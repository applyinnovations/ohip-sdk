/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomToBeChangedRoom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomToBeChangedRoom{}

// RoomToBeChangedRoom Room to be changed.
type RoomToBeChangedRoom struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	RoomDetails *ConfigRoomType `json:"roomDetails,omitempty"`
}

// NewRoomToBeChangedRoom instantiates a new RoomToBeChangedRoom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomToBeChangedRoom() *RoomToBeChangedRoom {
	this := RoomToBeChangedRoom{}
	return &this
}

// NewRoomToBeChangedRoomWithDefaults instantiates a new RoomToBeChangedRoom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomToBeChangedRoomWithDefaults() *RoomToBeChangedRoom {
	this := RoomToBeChangedRoom{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomToBeChangedRoom) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomToBeChangedRoom) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomToBeChangedRoom) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomToBeChangedRoom) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoomDetails returns the RoomDetails field value if set, zero value otherwise.
func (o *RoomToBeChangedRoom) GetRoomDetails() ConfigRoomType {
	if o == nil || IsNil(o.RoomDetails) {
		var ret ConfigRoomType
		return ret
	}
	return *o.RoomDetails
}

// GetRoomDetailsOk returns a tuple with the RoomDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomToBeChangedRoom) GetRoomDetailsOk() (*ConfigRoomType, bool) {
	if o == nil || IsNil(o.RoomDetails) {
		return nil, false
	}
	return o.RoomDetails, true
}

// HasRoomDetails returns a boolean if a field has been set.
func (o *RoomToBeChangedRoom) HasRoomDetails() bool {
	if o != nil && !IsNil(o.RoomDetails) {
		return true
	}

	return false
}

// SetRoomDetails gets a reference to the given ConfigRoomType and assigns it to the RoomDetails field.
func (o *RoomToBeChangedRoom) SetRoomDetails(v ConfigRoomType) {
	o.RoomDetails = &v
}

func (o RoomToBeChangedRoom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomToBeChangedRoom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RoomDetails) {
		toSerialize["roomDetails"] = o.RoomDetails
	}
	return toSerialize, nil
}

type NullableRoomToBeChangedRoom struct {
	value *RoomToBeChangedRoom
	isSet bool
}

func (v NullableRoomToBeChangedRoom) Get() *RoomToBeChangedRoom {
	return v.value
}

func (v *NullableRoomToBeChangedRoom) Set(val *RoomToBeChangedRoom) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomToBeChangedRoom) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomToBeChangedRoom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomToBeChangedRoom(val *RoomToBeChangedRoom) *NullableRoomToBeChangedRoom {
	return &NullableRoomToBeChangedRoom{value: val, isSet: true}
}

func (v NullableRoomToBeChangedRoom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomToBeChangedRoom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


