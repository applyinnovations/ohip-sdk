/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomTypesCriteriaRoomType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypesCriteriaRoomType{}

// RoomTypesCriteriaRoomType Room Type details to be created.
type RoomTypesCriteriaRoomType struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	RoomTypeDetails *RoomTypeType `json:"roomTypeDetails,omitempty"`
}

// NewRoomTypesCriteriaRoomType instantiates a new RoomTypesCriteriaRoomType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypesCriteriaRoomType() *RoomTypesCriteriaRoomType {
	this := RoomTypesCriteriaRoomType{}
	return &this
}

// NewRoomTypesCriteriaRoomTypeWithDefaults instantiates a new RoomTypesCriteriaRoomType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypesCriteriaRoomTypeWithDefaults() *RoomTypesCriteriaRoomType {
	this := RoomTypesCriteriaRoomType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomTypesCriteriaRoomType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypesCriteriaRoomType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomTypesCriteriaRoomType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomTypesCriteriaRoomType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoomTypeDetails returns the RoomTypeDetails field value if set, zero value otherwise.
func (o *RoomTypesCriteriaRoomType) GetRoomTypeDetails() RoomTypeType {
	if o == nil || IsNil(o.RoomTypeDetails) {
		var ret RoomTypeType
		return ret
	}
	return *o.RoomTypeDetails
}

// GetRoomTypeDetailsOk returns a tuple with the RoomTypeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypesCriteriaRoomType) GetRoomTypeDetailsOk() (*RoomTypeType, bool) {
	if o == nil || IsNil(o.RoomTypeDetails) {
		return nil, false
	}
	return o.RoomTypeDetails, true
}

// HasRoomTypeDetails returns a boolean if a field has been set.
func (o *RoomTypesCriteriaRoomType) HasRoomTypeDetails() bool {
	if o != nil && !IsNil(o.RoomTypeDetails) {
		return true
	}

	return false
}

// SetRoomTypeDetails gets a reference to the given RoomTypeType and assigns it to the RoomTypeDetails field.
func (o *RoomTypesCriteriaRoomType) SetRoomTypeDetails(v RoomTypeType) {
	o.RoomTypeDetails = &v
}

func (o RoomTypesCriteriaRoomType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypesCriteriaRoomType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RoomTypeDetails) {
		toSerialize["roomTypeDetails"] = o.RoomTypeDetails
	}
	return toSerialize, nil
}

type NullableRoomTypesCriteriaRoomType struct {
	value *RoomTypesCriteriaRoomType
	isSet bool
}

func (v NullableRoomTypesCriteriaRoomType) Get() *RoomTypesCriteriaRoomType {
	return v.value
}

func (v *NullableRoomTypesCriteriaRoomType) Set(val *RoomTypesCriteriaRoomType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypesCriteriaRoomType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypesCriteriaRoomType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypesCriteriaRoomType(val *RoomTypesCriteriaRoomType) *NullableRoomTypesCriteriaRoomType {
	return &NullableRoomTypesCriteriaRoomType{value: val, isSet: true}
}

func (v NullableRoomTypesCriteriaRoomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypesCriteriaRoomType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


