/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the CopyRoomType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyRoomType{}

// CopyRoomType Primary details of room to be copied and collection of rooms to be created from it.
type CopyRoomType struct {
	// Hotel code of an existing room that will serve as the basis for the new rooms.
	HotelId map[string]interface{} `json:"hotelId,omitempty"`
	// Room details that may differ from the base existing room.
	NewRooms []CopyNewRoomType `json:"newRooms,omitempty"`
	// Room number of an existing room that will serve as the basis for the new rooms.
	RoomId map[string]interface{} `json:"roomId,omitempty"`
}

// NewCopyRoomType instantiates a new CopyRoomType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyRoomType() *CopyRoomType {
	this := CopyRoomType{}
	return &this
}

// NewCopyRoomTypeWithDefaults instantiates a new CopyRoomType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyRoomTypeWithDefaults() *CopyRoomType {
	this := CopyRoomType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyRoomType) GetHotelId() map[string]interface{} {
	if o == nil || IsNil(o.HotelId) {
		var ret map[string]interface{}
		return ret
	}
	return o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRoomType) GetHotelIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.HotelId) {
		return map[string]interface{}{}, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyRoomType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given map[string]interface{} and assigns it to the HotelId field.
func (o *CopyRoomType) SetHotelId(v map[string]interface{}) {
	o.HotelId = v
}

// GetNewRooms returns the NewRooms field value if set, zero value otherwise.
func (o *CopyRoomType) GetNewRooms() []CopyNewRoomType {
	if o == nil || IsNil(o.NewRooms) {
		var ret []CopyNewRoomType
		return ret
	}
	return o.NewRooms
}

// GetNewRoomsOk returns a tuple with the NewRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRoomType) GetNewRoomsOk() ([]CopyNewRoomType, bool) {
	if o == nil || IsNil(o.NewRooms) {
		return nil, false
	}
	return o.NewRooms, true
}

// HasNewRooms returns a boolean if a field has been set.
func (o *CopyRoomType) HasNewRooms() bool {
	if o != nil && !IsNil(o.NewRooms) {
		return true
	}

	return false
}

// SetNewRooms gets a reference to the given []CopyNewRoomType and assigns it to the NewRooms field.
func (o *CopyRoomType) SetNewRooms(v []CopyNewRoomType) {
	o.NewRooms = v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *CopyRoomType) GetRoomId() map[string]interface{} {
	if o == nil || IsNil(o.RoomId) {
		var ret map[string]interface{}
		return ret
	}
	return o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRoomType) GetRoomIdOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RoomId) {
		return map[string]interface{}{}, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *CopyRoomType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given map[string]interface{} and assigns it to the RoomId field.
func (o *CopyRoomType) SetRoomId(v map[string]interface{}) {
	o.RoomId = v
}

func (o CopyRoomType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyRoomType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.NewRooms) {
		toSerialize["newRooms"] = o.NewRooms
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	return toSerialize, nil
}

type NullableCopyRoomType struct {
	value *CopyRoomType
	isSet bool
}

func (v NullableCopyRoomType) Get() *CopyRoomType {
	return v.value
}

func (v *NullableCopyRoomType) Set(val *CopyRoomType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyRoomType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyRoomType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyRoomType(val *CopyRoomType) *NullableCopyRoomType {
	return &NullableCopyRoomType{value: val, isSet: true}
}

func (v NullableCopyRoomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyRoomType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


