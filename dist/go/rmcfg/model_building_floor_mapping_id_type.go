/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the BuildingFloorMappingIDType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildingFloorMappingIDType{}

// BuildingFloorMappingIDType Building to Floor mapping ID details.
type BuildingFloorMappingIDType struct {
	// Building Code Identifier of the Hotel.
	BuildingCode *string `json:"buildingCode,omitempty"`
	// Floor Code Identifier of the Hotel.
	FloorCode *string `json:"floorCode,omitempty"`
	// Hotel Identifier of the Building and Floor.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewBuildingFloorMappingIDType instantiates a new BuildingFloorMappingIDType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildingFloorMappingIDType() *BuildingFloorMappingIDType {
	this := BuildingFloorMappingIDType{}
	return &this
}

// NewBuildingFloorMappingIDTypeWithDefaults instantiates a new BuildingFloorMappingIDType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildingFloorMappingIDTypeWithDefaults() *BuildingFloorMappingIDType {
	this := BuildingFloorMappingIDType{}
	return &this
}

// GetBuildingCode returns the BuildingCode field value if set, zero value otherwise.
func (o *BuildingFloorMappingIDType) GetBuildingCode() string {
	if o == nil || IsNil(o.BuildingCode) {
		var ret string
		return ret
	}
	return *o.BuildingCode
}

// GetBuildingCodeOk returns a tuple with the BuildingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingIDType) GetBuildingCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BuildingCode) {
		return nil, false
	}
	return o.BuildingCode, true
}

// HasBuildingCode returns a boolean if a field has been set.
func (o *BuildingFloorMappingIDType) HasBuildingCode() bool {
	if o != nil && !IsNil(o.BuildingCode) {
		return true
	}

	return false
}

// SetBuildingCode gets a reference to the given string and assigns it to the BuildingCode field.
func (o *BuildingFloorMappingIDType) SetBuildingCode(v string) {
	o.BuildingCode = &v
}

// GetFloorCode returns the FloorCode field value if set, zero value otherwise.
func (o *BuildingFloorMappingIDType) GetFloorCode() string {
	if o == nil || IsNil(o.FloorCode) {
		var ret string
		return ret
	}
	return *o.FloorCode
}

// GetFloorCodeOk returns a tuple with the FloorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingIDType) GetFloorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FloorCode) {
		return nil, false
	}
	return o.FloorCode, true
}

// HasFloorCode returns a boolean if a field has been set.
func (o *BuildingFloorMappingIDType) HasFloorCode() bool {
	if o != nil && !IsNil(o.FloorCode) {
		return true
	}

	return false
}

// SetFloorCode gets a reference to the given string and assigns it to the FloorCode field.
func (o *BuildingFloorMappingIDType) SetFloorCode(v string) {
	o.FloorCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BuildingFloorMappingIDType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingIDType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BuildingFloorMappingIDType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BuildingFloorMappingIDType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o BuildingFloorMappingIDType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildingFloorMappingIDType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildingCode) {
		toSerialize["buildingCode"] = o.BuildingCode
	}
	if !IsNil(o.FloorCode) {
		toSerialize["floorCode"] = o.FloorCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableBuildingFloorMappingIDType struct {
	value *BuildingFloorMappingIDType
	isSet bool
}

func (v NullableBuildingFloorMappingIDType) Get() *BuildingFloorMappingIDType {
	return v.value
}

func (v *NullableBuildingFloorMappingIDType) Set(val *BuildingFloorMappingIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildingFloorMappingIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildingFloorMappingIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildingFloorMappingIDType(val *BuildingFloorMappingIDType) *NullableBuildingFloorMappingIDType {
	return &NullableBuildingFloorMappingIDType{value: val, isSet: true}
}

func (v NullableBuildingFloorMappingIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildingFloorMappingIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


