/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the CopyNewRoomType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyNewRoomType{}

// CopyNewRoomType Room details that may differ from the base existing room. If any of Floor, RoomFeatures, HousekeepingCredits and RoomSection types is not passed together with this type, it means that it is expected to be empty for the new room; otherwise, they will have the value of the base existing room. Connecting rooms attached to the base existing room will not be created for the new room.
type CopyNewRoomType struct {
	Floors []string `json:"floors,omitempty"`
	// Housekeeping credits of the room. This may include stayover, departure, pickup and turndown credits.
	HousekeepingCredits []HousekeepingCreditsType `json:"housekeepingCredits,omitempty"`
	// A recurring element that identifies the room features.
	RoomFeatures []RoomFeatureType `json:"roomFeatures,omitempty"`
	// Room number of the new room to be created.
	RoomId *string `json:"roomId,omitempty"`
	RoomSection *RoomSectionType `json:"roomSection,omitempty"`
}

// NewCopyNewRoomType instantiates a new CopyNewRoomType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyNewRoomType() *CopyNewRoomType {
	this := CopyNewRoomType{}
	return &this
}

// NewCopyNewRoomTypeWithDefaults instantiates a new CopyNewRoomType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyNewRoomTypeWithDefaults() *CopyNewRoomType {
	this := CopyNewRoomType{}
	return &this
}

// GetFloors returns the Floors field value if set, zero value otherwise.
func (o *CopyNewRoomType) GetFloors() []string {
	if o == nil || IsNil(o.Floors) {
		var ret []string
		return ret
	}
	return o.Floors
}

// GetFloorsOk returns a tuple with the Floors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyNewRoomType) GetFloorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Floors) {
		return nil, false
	}
	return o.Floors, true
}

// HasFloors returns a boolean if a field has been set.
func (o *CopyNewRoomType) HasFloors() bool {
	if o != nil && !IsNil(o.Floors) {
		return true
	}

	return false
}

// SetFloors gets a reference to the given []string and assigns it to the Floors field.
func (o *CopyNewRoomType) SetFloors(v []string) {
	o.Floors = v
}

// GetHousekeepingCredits returns the HousekeepingCredits field value if set, zero value otherwise.
func (o *CopyNewRoomType) GetHousekeepingCredits() []HousekeepingCreditsType {
	if o == nil || IsNil(o.HousekeepingCredits) {
		var ret []HousekeepingCreditsType
		return ret
	}
	return o.HousekeepingCredits
}

// GetHousekeepingCreditsOk returns a tuple with the HousekeepingCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyNewRoomType) GetHousekeepingCreditsOk() ([]HousekeepingCreditsType, bool) {
	if o == nil || IsNil(o.HousekeepingCredits) {
		return nil, false
	}
	return o.HousekeepingCredits, true
}

// HasHousekeepingCredits returns a boolean if a field has been set.
func (o *CopyNewRoomType) HasHousekeepingCredits() bool {
	if o != nil && !IsNil(o.HousekeepingCredits) {
		return true
	}

	return false
}

// SetHousekeepingCredits gets a reference to the given []HousekeepingCreditsType and assigns it to the HousekeepingCredits field.
func (o *CopyNewRoomType) SetHousekeepingCredits(v []HousekeepingCreditsType) {
	o.HousekeepingCredits = v
}

// GetRoomFeatures returns the RoomFeatures field value if set, zero value otherwise.
func (o *CopyNewRoomType) GetRoomFeatures() []RoomFeatureType {
	if o == nil || IsNil(o.RoomFeatures) {
		var ret []RoomFeatureType
		return ret
	}
	return o.RoomFeatures
}

// GetRoomFeaturesOk returns a tuple with the RoomFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyNewRoomType) GetRoomFeaturesOk() ([]RoomFeatureType, bool) {
	if o == nil || IsNil(o.RoomFeatures) {
		return nil, false
	}
	return o.RoomFeatures, true
}

// HasRoomFeatures returns a boolean if a field has been set.
func (o *CopyNewRoomType) HasRoomFeatures() bool {
	if o != nil && !IsNil(o.RoomFeatures) {
		return true
	}

	return false
}

// SetRoomFeatures gets a reference to the given []RoomFeatureType and assigns it to the RoomFeatures field.
func (o *CopyNewRoomType) SetRoomFeatures(v []RoomFeatureType) {
	o.RoomFeatures = v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *CopyNewRoomType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyNewRoomType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *CopyNewRoomType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *CopyNewRoomType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetRoomSection returns the RoomSection field value if set, zero value otherwise.
func (o *CopyNewRoomType) GetRoomSection() RoomSectionType {
	if o == nil || IsNil(o.RoomSection) {
		var ret RoomSectionType
		return ret
	}
	return *o.RoomSection
}

// GetRoomSectionOk returns a tuple with the RoomSection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyNewRoomType) GetRoomSectionOk() (*RoomSectionType, bool) {
	if o == nil || IsNil(o.RoomSection) {
		return nil, false
	}
	return o.RoomSection, true
}

// HasRoomSection returns a boolean if a field has been set.
func (o *CopyNewRoomType) HasRoomSection() bool {
	if o != nil && !IsNil(o.RoomSection) {
		return true
	}

	return false
}

// SetRoomSection gets a reference to the given RoomSectionType and assigns it to the RoomSection field.
func (o *CopyNewRoomType) SetRoomSection(v RoomSectionType) {
	o.RoomSection = &v
}

func (o CopyNewRoomType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyNewRoomType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Floors) {
		toSerialize["floors"] = o.Floors
	}
	if !IsNil(o.HousekeepingCredits) {
		toSerialize["housekeepingCredits"] = o.HousekeepingCredits
	}
	if !IsNil(o.RoomFeatures) {
		toSerialize["roomFeatures"] = o.RoomFeatures
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.RoomSection) {
		toSerialize["roomSection"] = o.RoomSection
	}
	return toSerialize, nil
}

type NullableCopyNewRoomType struct {
	value *CopyNewRoomType
	isSet bool
}

func (v NullableCopyNewRoomType) Get() *CopyNewRoomType {
	return v.value
}

func (v *NullableCopyNewRoomType) Set(val *CopyNewRoomType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyNewRoomType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyNewRoomType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyNewRoomType(val *CopyNewRoomType) *NullableCopyNewRoomType {
	return &NullableCopyNewRoomType{value: val, isSet: true}
}

func (v NullableCopyNewRoomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyNewRoomType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


