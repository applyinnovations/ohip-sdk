/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the ComponentSuiteInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentSuiteInfoType{}

// ComponentSuiteInfoType This type holds information of the Component Suite to which the Component Room is attached.
type ComponentSuiteInfoType struct {
	// Component Suite Number to which the Component Room is attached.
	ComponentSuiteNumber *string `json:"componentSuiteNumber,omitempty"`
	// Component Suite Room Type to which the Component Room is attached.
	ComponentSuiteRoomType *string `json:"componentSuiteRoomType,omitempty"`
	// Component Suite Room Status to which the Component Room is attached.
	ComponentSuiteRoomStatus *string `json:"componentSuiteRoomStatus,omitempty"`
}

// NewComponentSuiteInfoType instantiates a new ComponentSuiteInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentSuiteInfoType() *ComponentSuiteInfoType {
	this := ComponentSuiteInfoType{}
	return &this
}

// NewComponentSuiteInfoTypeWithDefaults instantiates a new ComponentSuiteInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentSuiteInfoTypeWithDefaults() *ComponentSuiteInfoType {
	this := ComponentSuiteInfoType{}
	return &this
}

// GetComponentSuiteNumber returns the ComponentSuiteNumber field value if set, zero value otherwise.
func (o *ComponentSuiteInfoType) GetComponentSuiteNumber() string {
	if o == nil || IsNil(o.ComponentSuiteNumber) {
		var ret string
		return ret
	}
	return *o.ComponentSuiteNumber
}

// GetComponentSuiteNumberOk returns a tuple with the ComponentSuiteNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSuiteInfoType) GetComponentSuiteNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentSuiteNumber) {
		return nil, false
	}
	return o.ComponentSuiteNumber, true
}

// HasComponentSuiteNumber returns a boolean if a field has been set.
func (o *ComponentSuiteInfoType) HasComponentSuiteNumber() bool {
	if o != nil && !IsNil(o.ComponentSuiteNumber) {
		return true
	}

	return false
}

// SetComponentSuiteNumber gets a reference to the given string and assigns it to the ComponentSuiteNumber field.
func (o *ComponentSuiteInfoType) SetComponentSuiteNumber(v string) {
	o.ComponentSuiteNumber = &v
}

// GetComponentSuiteRoomType returns the ComponentSuiteRoomType field value if set, zero value otherwise.
func (o *ComponentSuiteInfoType) GetComponentSuiteRoomType() string {
	if o == nil || IsNil(o.ComponentSuiteRoomType) {
		var ret string
		return ret
	}
	return *o.ComponentSuiteRoomType
}

// GetComponentSuiteRoomTypeOk returns a tuple with the ComponentSuiteRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSuiteInfoType) GetComponentSuiteRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentSuiteRoomType) {
		return nil, false
	}
	return o.ComponentSuiteRoomType, true
}

// HasComponentSuiteRoomType returns a boolean if a field has been set.
func (o *ComponentSuiteInfoType) HasComponentSuiteRoomType() bool {
	if o != nil && !IsNil(o.ComponentSuiteRoomType) {
		return true
	}

	return false
}

// SetComponentSuiteRoomType gets a reference to the given string and assigns it to the ComponentSuiteRoomType field.
func (o *ComponentSuiteInfoType) SetComponentSuiteRoomType(v string) {
	o.ComponentSuiteRoomType = &v
}

// GetComponentSuiteRoomStatus returns the ComponentSuiteRoomStatus field value if set, zero value otherwise.
func (o *ComponentSuiteInfoType) GetComponentSuiteRoomStatus() string {
	if o == nil || IsNil(o.ComponentSuiteRoomStatus) {
		var ret string
		return ret
	}
	return *o.ComponentSuiteRoomStatus
}

// GetComponentSuiteRoomStatusOk returns a tuple with the ComponentSuiteRoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentSuiteInfoType) GetComponentSuiteRoomStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentSuiteRoomStatus) {
		return nil, false
	}
	return o.ComponentSuiteRoomStatus, true
}

// HasComponentSuiteRoomStatus returns a boolean if a field has been set.
func (o *ComponentSuiteInfoType) HasComponentSuiteRoomStatus() bool {
	if o != nil && !IsNil(o.ComponentSuiteRoomStatus) {
		return true
	}

	return false
}

// SetComponentSuiteRoomStatus gets a reference to the given string and assigns it to the ComponentSuiteRoomStatus field.
func (o *ComponentSuiteInfoType) SetComponentSuiteRoomStatus(v string) {
	o.ComponentSuiteRoomStatus = &v
}

func (o ComponentSuiteInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentSuiteInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentSuiteNumber) {
		toSerialize["componentSuiteNumber"] = o.ComponentSuiteNumber
	}
	if !IsNil(o.ComponentSuiteRoomType) {
		toSerialize["componentSuiteRoomType"] = o.ComponentSuiteRoomType
	}
	if !IsNil(o.ComponentSuiteRoomStatus) {
		toSerialize["componentSuiteRoomStatus"] = o.ComponentSuiteRoomStatus
	}
	return toSerialize, nil
}

type NullableComponentSuiteInfoType struct {
	value *ComponentSuiteInfoType
	isSet bool
}

func (v NullableComponentSuiteInfoType) Get() *ComponentSuiteInfoType {
	return v.value
}

func (v *NullableComponentSuiteInfoType) Set(val *ComponentSuiteInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentSuiteInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentSuiteInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentSuiteInfoType(val *ComponentSuiteInfoType) *NullableComponentSuiteInfoType {
	return &NullableComponentSuiteInfoType{value: val, isSet: true}
}

func (v NullableComponentSuiteInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentSuiteInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


