/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the HousekeepingCreditRuleTypeFacilityTaskRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HousekeepingCreditRuleTypeFacilityTaskRule{}

// HousekeepingCreditRuleTypeFacilityTaskRule When RuleType is set to FacilityTask, specifies task code and minimum task count.
type HousekeepingCreditRuleTypeFacilityTaskRule struct {
	// When RuleType is set to FacilityTask, specifies the minimum number of the facility task that must be assigned to a sheet before the rule is applicable to that sheet.
	MinimumTaskCount *int32 `json:"minimumTaskCount,omitempty"`
	// When RuleType is set to FacilityTask, specifies which task code makes this credit rule applicable. For example, the credit value will be added to the task assignment sheet when this specific task code is assigned.
	TaskCode *string `json:"taskCode,omitempty"`
}

// NewHousekeepingCreditRuleTypeFacilityTaskRule instantiates a new HousekeepingCreditRuleTypeFacilityTaskRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHousekeepingCreditRuleTypeFacilityTaskRule() *HousekeepingCreditRuleTypeFacilityTaskRule {
	this := HousekeepingCreditRuleTypeFacilityTaskRule{}
	return &this
}

// NewHousekeepingCreditRuleTypeFacilityTaskRuleWithDefaults instantiates a new HousekeepingCreditRuleTypeFacilityTaskRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHousekeepingCreditRuleTypeFacilityTaskRuleWithDefaults() *HousekeepingCreditRuleTypeFacilityTaskRule {
	this := HousekeepingCreditRuleTypeFacilityTaskRule{}
	return &this
}

// GetMinimumTaskCount returns the MinimumTaskCount field value if set, zero value otherwise.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) GetMinimumTaskCount() int32 {
	if o == nil || IsNil(o.MinimumTaskCount) {
		var ret int32
		return ret
	}
	return *o.MinimumTaskCount
}

// GetMinimumTaskCountOk returns a tuple with the MinimumTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) GetMinimumTaskCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumTaskCount) {
		return nil, false
	}
	return o.MinimumTaskCount, true
}

// HasMinimumTaskCount returns a boolean if a field has been set.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) HasMinimumTaskCount() bool {
	if o != nil && !IsNil(o.MinimumTaskCount) {
		return true
	}

	return false
}

// SetMinimumTaskCount gets a reference to the given int32 and assigns it to the MinimumTaskCount field.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) SetMinimumTaskCount(v int32) {
	o.MinimumTaskCount = &v
}

// GetTaskCode returns the TaskCode field value if set, zero value otherwise.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) GetTaskCode() string {
	if o == nil || IsNil(o.TaskCode) {
		var ret string
		return ret
	}
	return *o.TaskCode
}

// GetTaskCodeOk returns a tuple with the TaskCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) GetTaskCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TaskCode) {
		return nil, false
	}
	return o.TaskCode, true
}

// HasTaskCode returns a boolean if a field has been set.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) HasTaskCode() bool {
	if o != nil && !IsNil(o.TaskCode) {
		return true
	}

	return false
}

// SetTaskCode gets a reference to the given string and assigns it to the TaskCode field.
func (o *HousekeepingCreditRuleTypeFacilityTaskRule) SetTaskCode(v string) {
	o.TaskCode = &v
}

func (o HousekeepingCreditRuleTypeFacilityTaskRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HousekeepingCreditRuleTypeFacilityTaskRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinimumTaskCount) {
		toSerialize["minimumTaskCount"] = o.MinimumTaskCount
	}
	if !IsNil(o.TaskCode) {
		toSerialize["taskCode"] = o.TaskCode
	}
	return toSerialize, nil
}

type NullableHousekeepingCreditRuleTypeFacilityTaskRule struct {
	value *HousekeepingCreditRuleTypeFacilityTaskRule
	isSet bool
}

func (v NullableHousekeepingCreditRuleTypeFacilityTaskRule) Get() *HousekeepingCreditRuleTypeFacilityTaskRule {
	return v.value
}

func (v *NullableHousekeepingCreditRuleTypeFacilityTaskRule) Set(val *HousekeepingCreditRuleTypeFacilityTaskRule) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingCreditRuleTypeFacilityTaskRule) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingCreditRuleTypeFacilityTaskRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingCreditRuleTypeFacilityTaskRule(val *HousekeepingCreditRuleTypeFacilityTaskRule) *NullableHousekeepingCreditRuleTypeFacilityTaskRule {
	return &NullableHousekeepingCreditRuleTypeFacilityTaskRule{value: val, isSet: true}
}

func (v NullableHousekeepingCreditRuleTypeFacilityTaskRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingCreditRuleTypeFacilityTaskRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


