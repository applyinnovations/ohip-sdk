/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomFeatureConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomFeatureConfigType{}

// RoomFeatureConfigType Common code type for code, description, seq and inactive
type RoomFeatureConfigType struct {
	// Code for the code type.
	Code *string `json:"code,omitempty"`
	Description *TranslationTextType50 `json:"description,omitempty"`
	// Group code to which this code type belongs.
	GroupCode *string `json:"groupCode,omitempty"`
	// Hotel code for the code type.
	HotelId *string `json:"hotelId,omitempty"`
	// Indicates the code type is inactive or not.
	Inactive *bool `json:"inactive,omitempty"`
	// This type holds a collection of preferences at the property level.
	MappedPreferenceCodes []ConfigHotelPreferenceType `json:"mappedPreferenceCodes,omitempty"`
	// Display sequence for the code type.
	Sequence *int32 `json:"sequence,omitempty"`
}

// NewRoomFeatureConfigType instantiates a new RoomFeatureConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomFeatureConfigType() *RoomFeatureConfigType {
	this := RoomFeatureConfigType{}
	return &this
}

// NewRoomFeatureConfigTypeWithDefaults instantiates a new RoomFeatureConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomFeatureConfigTypeWithDefaults() *RoomFeatureConfigType {
	this := RoomFeatureConfigType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RoomFeatureConfigType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureConfigType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RoomFeatureConfigType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RoomFeatureConfigType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoomFeatureConfigType) GetDescription() TranslationTextType50 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType50
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureConfigType) GetDescriptionOk() (*TranslationTextType50, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoomFeatureConfigType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType50 and assigns it to the Description field.
func (o *RoomFeatureConfigType) SetDescription(v TranslationTextType50) {
	o.Description = &v
}

// GetGroupCode returns the GroupCode field value if set, zero value otherwise.
func (o *RoomFeatureConfigType) GetGroupCode() string {
	if o == nil || IsNil(o.GroupCode) {
		var ret string
		return ret
	}
	return *o.GroupCode
}

// GetGroupCodeOk returns a tuple with the GroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureConfigType) GetGroupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupCode) {
		return nil, false
	}
	return o.GroupCode, true
}

// HasGroupCode returns a boolean if a field has been set.
func (o *RoomFeatureConfigType) HasGroupCode() bool {
	if o != nil && !IsNil(o.GroupCode) {
		return true
	}

	return false
}

// SetGroupCode gets a reference to the given string and assigns it to the GroupCode field.
func (o *RoomFeatureConfigType) SetGroupCode(v string) {
	o.GroupCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomFeatureConfigType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureConfigType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomFeatureConfigType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomFeatureConfigType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *RoomFeatureConfigType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureConfigType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *RoomFeatureConfigType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *RoomFeatureConfigType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetMappedPreferenceCodes returns the MappedPreferenceCodes field value if set, zero value otherwise.
func (o *RoomFeatureConfigType) GetMappedPreferenceCodes() []ConfigHotelPreferenceType {
	if o == nil || IsNil(o.MappedPreferenceCodes) {
		var ret []ConfigHotelPreferenceType
		return ret
	}
	return o.MappedPreferenceCodes
}

// GetMappedPreferenceCodesOk returns a tuple with the MappedPreferenceCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureConfigType) GetMappedPreferenceCodesOk() ([]ConfigHotelPreferenceType, bool) {
	if o == nil || IsNil(o.MappedPreferenceCodes) {
		return nil, false
	}
	return o.MappedPreferenceCodes, true
}

// HasMappedPreferenceCodes returns a boolean if a field has been set.
func (o *RoomFeatureConfigType) HasMappedPreferenceCodes() bool {
	if o != nil && !IsNil(o.MappedPreferenceCodes) {
		return true
	}

	return false
}

// SetMappedPreferenceCodes gets a reference to the given []ConfigHotelPreferenceType and assigns it to the MappedPreferenceCodes field.
func (o *RoomFeatureConfigType) SetMappedPreferenceCodes(v []ConfigHotelPreferenceType) {
	o.MappedPreferenceCodes = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *RoomFeatureConfigType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureConfigType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *RoomFeatureConfigType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *RoomFeatureConfigType) SetSequence(v int32) {
	o.Sequence = &v
}

func (o RoomFeatureConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomFeatureConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.GroupCode) {
		toSerialize["groupCode"] = o.GroupCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.MappedPreferenceCodes) {
		toSerialize["mappedPreferenceCodes"] = o.MappedPreferenceCodes
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableRoomFeatureConfigType struct {
	value *RoomFeatureConfigType
	isSet bool
}

func (v NullableRoomFeatureConfigType) Get() *RoomFeatureConfigType {
	return v.value
}

func (v *NullableRoomFeatureConfigType) Set(val *RoomFeatureConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomFeatureConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomFeatureConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomFeatureConfigType(val *RoomFeatureConfigType) *NullableRoomFeatureConfigType {
	return &NullableRoomFeatureConfigType{value: val, isSet: true}
}

func (v NullableRoomFeatureConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomFeatureConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


