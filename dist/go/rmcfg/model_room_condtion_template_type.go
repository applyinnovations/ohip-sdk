/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomCondtionTemplateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomCondtionTemplateType{}

// RoomCondtionTemplateType Room Condition Template Type
type RoomCondtionTemplateType struct {
	// Description for the room condition.
	Description *string `json:"description,omitempty"`
	// Indicates types of assignment.
	DisplayInRoomAssignment *bool `json:"displayInRoomAssignment,omitempty"`
	// Comments for the room condition.
	Comments *string `json:"comments,omitempty"`
	DisplaySeq *int32 `json:"displaySeq,omitempty"`
	Inactive *bool `json:"inactive,omitempty"`
	Code *string `json:"code,omitempty"`
}

// NewRoomCondtionTemplateType instantiates a new RoomCondtionTemplateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomCondtionTemplateType() *RoomCondtionTemplateType {
	this := RoomCondtionTemplateType{}
	return &this
}

// NewRoomCondtionTemplateTypeWithDefaults instantiates a new RoomCondtionTemplateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomCondtionTemplateTypeWithDefaults() *RoomCondtionTemplateType {
	this := RoomCondtionTemplateType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoomCondtionTemplateType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionTemplateType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoomCondtionTemplateType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoomCondtionTemplateType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayInRoomAssignment returns the DisplayInRoomAssignment field value if set, zero value otherwise.
func (o *RoomCondtionTemplateType) GetDisplayInRoomAssignment() bool {
	if o == nil || IsNil(o.DisplayInRoomAssignment) {
		var ret bool
		return ret
	}
	return *o.DisplayInRoomAssignment
}

// GetDisplayInRoomAssignmentOk returns a tuple with the DisplayInRoomAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionTemplateType) GetDisplayInRoomAssignmentOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayInRoomAssignment) {
		return nil, false
	}
	return o.DisplayInRoomAssignment, true
}

// HasDisplayInRoomAssignment returns a boolean if a field has been set.
func (o *RoomCondtionTemplateType) HasDisplayInRoomAssignment() bool {
	if o != nil && !IsNil(o.DisplayInRoomAssignment) {
		return true
	}

	return false
}

// SetDisplayInRoomAssignment gets a reference to the given bool and assigns it to the DisplayInRoomAssignment field.
func (o *RoomCondtionTemplateType) SetDisplayInRoomAssignment(v bool) {
	o.DisplayInRoomAssignment = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RoomCondtionTemplateType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionTemplateType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RoomCondtionTemplateType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *RoomCondtionTemplateType) SetComments(v string) {
	o.Comments = &v
}

// GetDisplaySeq returns the DisplaySeq field value if set, zero value otherwise.
func (o *RoomCondtionTemplateType) GetDisplaySeq() int32 {
	if o == nil || IsNil(o.DisplaySeq) {
		var ret int32
		return ret
	}
	return *o.DisplaySeq
}

// GetDisplaySeqOk returns a tuple with the DisplaySeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionTemplateType) GetDisplaySeqOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplaySeq) {
		return nil, false
	}
	return o.DisplaySeq, true
}

// HasDisplaySeq returns a boolean if a field has been set.
func (o *RoomCondtionTemplateType) HasDisplaySeq() bool {
	if o != nil && !IsNil(o.DisplaySeq) {
		return true
	}

	return false
}

// SetDisplaySeq gets a reference to the given int32 and assigns it to the DisplaySeq field.
func (o *RoomCondtionTemplateType) SetDisplaySeq(v int32) {
	o.DisplaySeq = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *RoomCondtionTemplateType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionTemplateType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *RoomCondtionTemplateType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *RoomCondtionTemplateType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RoomCondtionTemplateType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionTemplateType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RoomCondtionTemplateType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RoomCondtionTemplateType) SetCode(v string) {
	o.Code = &v
}

func (o RoomCondtionTemplateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomCondtionTemplateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayInRoomAssignment) {
		toSerialize["displayInRoomAssignment"] = o.DisplayInRoomAssignment
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.DisplaySeq) {
		toSerialize["displaySeq"] = o.DisplaySeq
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableRoomCondtionTemplateType struct {
	value *RoomCondtionTemplateType
	isSet bool
}

func (v NullableRoomCondtionTemplateType) Get() *RoomCondtionTemplateType {
	return v.value
}

func (v *NullableRoomCondtionTemplateType) Set(val *RoomCondtionTemplateType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomCondtionTemplateType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomCondtionTemplateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomCondtionTemplateType(val *RoomCondtionTemplateType) *NullableRoomCondtionTemplateType {
	return &NullableRoomCondtionTemplateType{value: val, isSet: true}
}

func (v NullableRoomCondtionTemplateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomCondtionTemplateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


