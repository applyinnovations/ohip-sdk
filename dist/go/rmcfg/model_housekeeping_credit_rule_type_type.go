/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
	"fmt"
)

// HousekeepingCreditRuleTypeType A Traveling Rule will add extra credit to a task assignment sheet when rooms from multiple Buildings, Section Groups, Sections and/or Floors are assigned.
type HousekeepingCreditRuleTypeType string

// List of housekeepingCreditRuleTypeType
const (
	HOUSEKEEPINGCREDITRULETYPETYPE_FACILITY_TASK HousekeepingCreditRuleTypeType = "FacilityTask"
	HOUSEKEEPINGCREDITRULETYPETYPE_MISCELLANEOUS HousekeepingCreditRuleTypeType = "Miscellaneous"
	HOUSEKEEPINGCREDITRULETYPETYPE_SPECIAL HousekeepingCreditRuleTypeType = "Special"
	HOUSEKEEPINGCREDITRULETYPETYPE_TRAVELLING HousekeepingCreditRuleTypeType = "Travelling"
)

// All allowed values of HousekeepingCreditRuleTypeType enum
var AllowedHousekeepingCreditRuleTypeTypeEnumValues = []HousekeepingCreditRuleTypeType{
	"FacilityTask",
	"Miscellaneous",
	"Special",
	"Travelling",
}

func (v *HousekeepingCreditRuleTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HousekeepingCreditRuleTypeType(value)
	for _, existing := range AllowedHousekeepingCreditRuleTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HousekeepingCreditRuleTypeType", value)
}

// NewHousekeepingCreditRuleTypeTypeFromValue returns a pointer to a valid HousekeepingCreditRuleTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHousekeepingCreditRuleTypeTypeFromValue(v string) (*HousekeepingCreditRuleTypeType, error) {
	ev := HousekeepingCreditRuleTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HousekeepingCreditRuleTypeType: valid values are %v", v, AllowedHousekeepingCreditRuleTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HousekeepingCreditRuleTypeType) IsValid() bool {
	for _, existing := range AllowedHousekeepingCreditRuleTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to housekeepingCreditRuleTypeType value
func (v HousekeepingCreditRuleTypeType) Ptr() *HousekeepingCreditRuleTypeType {
	return &v
}

type NullableHousekeepingCreditRuleTypeType struct {
	value *HousekeepingCreditRuleTypeType
	isSet bool
}

func (v NullableHousekeepingCreditRuleTypeType) Get() *HousekeepingCreditRuleTypeType {
	return v.value
}

func (v *NullableHousekeepingCreditRuleTypeType) Set(val *HousekeepingCreditRuleTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingCreditRuleTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingCreditRuleTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingCreditRuleTypeType(val *HousekeepingCreditRuleTypeType) *NullableHousekeepingCreditRuleTypeType {
	return &NullableHousekeepingCreditRuleTypeType{value: val, isSet: true}
}

func (v NullableHousekeepingCreditRuleTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingCreditRuleTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

