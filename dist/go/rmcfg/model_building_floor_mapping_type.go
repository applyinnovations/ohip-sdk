/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the BuildingFloorMappingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildingFloorMappingType{}

// BuildingFloorMappingType Building to Floor mapping details associated with the Hotel.
type BuildingFloorMappingType struct {
	// Total Credits for all the rooms that belong to this building group.
	Credits *int32 `json:"credits,omitempty"`
	// The description of the house keeping building to floor mapping.
	Description *string `json:"description,omitempty"`
	FloorMappingId *BuildingFloorMappingIDType `json:"floorMappingId,omitempty"`
	// Rooms associated with the floor in the building.
	RoomCount *int32 `json:"roomCount,omitempty"`
	// Display sequence when auto task assignment is broken out by floor.
	Sequence *int32 `json:"sequence,omitempty"`
	// Target Credit for each task sheet created for this floor when auto task assignment is broken out by floor.
	TargetCredits *int32 `json:"targetCredits,omitempty"`
}

// NewBuildingFloorMappingType instantiates a new BuildingFloorMappingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildingFloorMappingType() *BuildingFloorMappingType {
	this := BuildingFloorMappingType{}
	return &this
}

// NewBuildingFloorMappingTypeWithDefaults instantiates a new BuildingFloorMappingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildingFloorMappingTypeWithDefaults() *BuildingFloorMappingType {
	this := BuildingFloorMappingType{}
	return &this
}

// GetCredits returns the Credits field value if set, zero value otherwise.
func (o *BuildingFloorMappingType) GetCredits() int32 {
	if o == nil || IsNil(o.Credits) {
		var ret int32
		return ret
	}
	return *o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingType) GetCreditsOk() (*int32, bool) {
	if o == nil || IsNil(o.Credits) {
		return nil, false
	}
	return o.Credits, true
}

// HasCredits returns a boolean if a field has been set.
func (o *BuildingFloorMappingType) HasCredits() bool {
	if o != nil && !IsNil(o.Credits) {
		return true
	}

	return false
}

// SetCredits gets a reference to the given int32 and assigns it to the Credits field.
func (o *BuildingFloorMappingType) SetCredits(v int32) {
	o.Credits = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BuildingFloorMappingType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BuildingFloorMappingType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BuildingFloorMappingType) SetDescription(v string) {
	o.Description = &v
}

// GetFloorMappingId returns the FloorMappingId field value if set, zero value otherwise.
func (o *BuildingFloorMappingType) GetFloorMappingId() BuildingFloorMappingIDType {
	if o == nil || IsNil(o.FloorMappingId) {
		var ret BuildingFloorMappingIDType
		return ret
	}
	return *o.FloorMappingId
}

// GetFloorMappingIdOk returns a tuple with the FloorMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingType) GetFloorMappingIdOk() (*BuildingFloorMappingIDType, bool) {
	if o == nil || IsNil(o.FloorMappingId) {
		return nil, false
	}
	return o.FloorMappingId, true
}

// HasFloorMappingId returns a boolean if a field has been set.
func (o *BuildingFloorMappingType) HasFloorMappingId() bool {
	if o != nil && !IsNil(o.FloorMappingId) {
		return true
	}

	return false
}

// SetFloorMappingId gets a reference to the given BuildingFloorMappingIDType and assigns it to the FloorMappingId field.
func (o *BuildingFloorMappingType) SetFloorMappingId(v BuildingFloorMappingIDType) {
	o.FloorMappingId = &v
}

// GetRoomCount returns the RoomCount field value if set, zero value otherwise.
func (o *BuildingFloorMappingType) GetRoomCount() int32 {
	if o == nil || IsNil(o.RoomCount) {
		var ret int32
		return ret
	}
	return *o.RoomCount
}

// GetRoomCountOk returns a tuple with the RoomCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingType) GetRoomCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomCount) {
		return nil, false
	}
	return o.RoomCount, true
}

// HasRoomCount returns a boolean if a field has been set.
func (o *BuildingFloorMappingType) HasRoomCount() bool {
	if o != nil && !IsNil(o.RoomCount) {
		return true
	}

	return false
}

// SetRoomCount gets a reference to the given int32 and assigns it to the RoomCount field.
func (o *BuildingFloorMappingType) SetRoomCount(v int32) {
	o.RoomCount = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *BuildingFloorMappingType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *BuildingFloorMappingType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *BuildingFloorMappingType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetTargetCredits returns the TargetCredits field value if set, zero value otherwise.
func (o *BuildingFloorMappingType) GetTargetCredits() int32 {
	if o == nil || IsNil(o.TargetCredits) {
		var ret int32
		return ret
	}
	return *o.TargetCredits
}

// GetTargetCreditsOk returns a tuple with the TargetCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingFloorMappingType) GetTargetCreditsOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetCredits) {
		return nil, false
	}
	return o.TargetCredits, true
}

// HasTargetCredits returns a boolean if a field has been set.
func (o *BuildingFloorMappingType) HasTargetCredits() bool {
	if o != nil && !IsNil(o.TargetCredits) {
		return true
	}

	return false
}

// SetTargetCredits gets a reference to the given int32 and assigns it to the TargetCredits field.
func (o *BuildingFloorMappingType) SetTargetCredits(v int32) {
	o.TargetCredits = &v
}

func (o BuildingFloorMappingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildingFloorMappingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Credits) {
		toSerialize["credits"] = o.Credits
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FloorMappingId) {
		toSerialize["floorMappingId"] = o.FloorMappingId
	}
	if !IsNil(o.RoomCount) {
		toSerialize["roomCount"] = o.RoomCount
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.TargetCredits) {
		toSerialize["targetCredits"] = o.TargetCredits
	}
	return toSerialize, nil
}

type NullableBuildingFloorMappingType struct {
	value *BuildingFloorMappingType
	isSet bool
}

func (v NullableBuildingFloorMappingType) Get() *BuildingFloorMappingType {
	return v.value
}

func (v *NullableBuildingFloorMappingType) Set(val *BuildingFloorMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildingFloorMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildingFloorMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildingFloorMappingType(val *BuildingFloorMappingType) *NullableBuildingFloorMappingType {
	return &NullableBuildingFloorMappingType{value: val, isSet: true}
}

func (v NullableBuildingFloorMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildingFloorMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


