/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the CreateRoomHierarchiesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRoomHierarchiesType{}

// CreateRoomHierarchiesType Holds collection of room hierarchies
type CreateRoomHierarchiesType struct {
	RoomHierarchy []RoomHierarchyType `json:"roomHierarchy,omitempty"`
	// Setting this flag to true will overwrite all existing hierarchies.
	OverwriteExisting *bool `json:"overwriteExisting,omitempty"`
}

// NewCreateRoomHierarchiesType instantiates a new CreateRoomHierarchiesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRoomHierarchiesType() *CreateRoomHierarchiesType {
	this := CreateRoomHierarchiesType{}
	return &this
}

// NewCreateRoomHierarchiesTypeWithDefaults instantiates a new CreateRoomHierarchiesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRoomHierarchiesTypeWithDefaults() *CreateRoomHierarchiesType {
	this := CreateRoomHierarchiesType{}
	return &this
}

// GetRoomHierarchy returns the RoomHierarchy field value if set, zero value otherwise.
func (o *CreateRoomHierarchiesType) GetRoomHierarchy() []RoomHierarchyType {
	if o == nil || IsNil(o.RoomHierarchy) {
		var ret []RoomHierarchyType
		return ret
	}
	return o.RoomHierarchy
}

// GetRoomHierarchyOk returns a tuple with the RoomHierarchy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoomHierarchiesType) GetRoomHierarchyOk() ([]RoomHierarchyType, bool) {
	if o == nil || IsNil(o.RoomHierarchy) {
		return nil, false
	}
	return o.RoomHierarchy, true
}

// HasRoomHierarchy returns a boolean if a field has been set.
func (o *CreateRoomHierarchiesType) HasRoomHierarchy() bool {
	if o != nil && !IsNil(o.RoomHierarchy) {
		return true
	}

	return false
}

// SetRoomHierarchy gets a reference to the given []RoomHierarchyType and assigns it to the RoomHierarchy field.
func (o *CreateRoomHierarchiesType) SetRoomHierarchy(v []RoomHierarchyType) {
	o.RoomHierarchy = v
}

// GetOverwriteExisting returns the OverwriteExisting field value if set, zero value otherwise.
func (o *CreateRoomHierarchiesType) GetOverwriteExisting() bool {
	if o == nil || IsNil(o.OverwriteExisting) {
		var ret bool
		return ret
	}
	return *o.OverwriteExisting
}

// GetOverwriteExistingOk returns a tuple with the OverwriteExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRoomHierarchiesType) GetOverwriteExistingOk() (*bool, bool) {
	if o == nil || IsNil(o.OverwriteExisting) {
		return nil, false
	}
	return o.OverwriteExisting, true
}

// HasOverwriteExisting returns a boolean if a field has been set.
func (o *CreateRoomHierarchiesType) HasOverwriteExisting() bool {
	if o != nil && !IsNil(o.OverwriteExisting) {
		return true
	}

	return false
}

// SetOverwriteExisting gets a reference to the given bool and assigns it to the OverwriteExisting field.
func (o *CreateRoomHierarchiesType) SetOverwriteExisting(v bool) {
	o.OverwriteExisting = &v
}

func (o CreateRoomHierarchiesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRoomHierarchiesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomHierarchy) {
		toSerialize["roomHierarchy"] = o.RoomHierarchy
	}
	if !IsNil(o.OverwriteExisting) {
		toSerialize["overwriteExisting"] = o.OverwriteExisting
	}
	return toSerialize, nil
}

type NullableCreateRoomHierarchiesType struct {
	value *CreateRoomHierarchiesType
	isSet bool
}

func (v NullableCreateRoomHierarchiesType) Get() *CreateRoomHierarchiesType {
	return v.value
}

func (v *NullableCreateRoomHierarchiesType) Set(val *CreateRoomHierarchiesType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRoomHierarchiesType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRoomHierarchiesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRoomHierarchiesType(val *CreateRoomHierarchiesType) *NullableCreateRoomHierarchiesType {
	return &NullableCreateRoomHierarchiesType{value: val, isSet: true}
}

func (v NullableCreateRoomHierarchiesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRoomHierarchiesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


