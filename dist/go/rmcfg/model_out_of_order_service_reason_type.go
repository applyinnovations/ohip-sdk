/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the OutOfOrderServiceReasonType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OutOfOrderServiceReasonType{}

// OutOfOrderServiceReasonType Base details of the Out of order/service reason.
type OutOfOrderServiceReasonType struct {
	// Description for the out of order/service reason.
	Description *string `json:"description,omitempty"`
	// Hotel code the out of order/service reason belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Indicator that tells whether the out of order/service reason in the hotel is active or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Out of order/service reason code identifying the reason.
	ReasonCode *string `json:"reasonCode,omitempty"`
	// Sequence number for displaying the out of order/service reason.
	Sequence *int32 `json:"sequence,omitempty"`
}

// NewOutOfOrderServiceReasonType instantiates a new OutOfOrderServiceReasonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutOfOrderServiceReasonType() *OutOfOrderServiceReasonType {
	this := OutOfOrderServiceReasonType{}
	return &this
}

// NewOutOfOrderServiceReasonTypeWithDefaults instantiates a new OutOfOrderServiceReasonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutOfOrderServiceReasonTypeWithDefaults() *OutOfOrderServiceReasonType {
	this := OutOfOrderServiceReasonType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OutOfOrderServiceReasonType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfOrderServiceReasonType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OutOfOrderServiceReasonType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OutOfOrderServiceReasonType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *OutOfOrderServiceReasonType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfOrderServiceReasonType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *OutOfOrderServiceReasonType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *OutOfOrderServiceReasonType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *OutOfOrderServiceReasonType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfOrderServiceReasonType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *OutOfOrderServiceReasonType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *OutOfOrderServiceReasonType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *OutOfOrderServiceReasonType) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfOrderServiceReasonType) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *OutOfOrderServiceReasonType) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *OutOfOrderServiceReasonType) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *OutOfOrderServiceReasonType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutOfOrderServiceReasonType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *OutOfOrderServiceReasonType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *OutOfOrderServiceReasonType) SetSequence(v int32) {
	o.Sequence = &v
}

func (o OutOfOrderServiceReasonType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OutOfOrderServiceReasonType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableOutOfOrderServiceReasonType struct {
	value *OutOfOrderServiceReasonType
	isSet bool
}

func (v NullableOutOfOrderServiceReasonType) Get() *OutOfOrderServiceReasonType {
	return v.value
}

func (v *NullableOutOfOrderServiceReasonType) Set(val *OutOfOrderServiceReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableOutOfOrderServiceReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableOutOfOrderServiceReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutOfOrderServiceReasonType(val *OutOfOrderServiceReasonType) *NullableOutOfOrderServiceReasonType {
	return &NullableOutOfOrderServiceReasonType{value: val, isSet: true}
}

func (v NullableOutOfOrderServiceReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutOfOrderServiceReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


