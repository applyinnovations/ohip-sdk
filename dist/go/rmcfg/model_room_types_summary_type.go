/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomTypesSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypesSummaryType{}

// RoomTypesSummaryType This type holds collection of room type.
type RoomTypesSummaryType struct {
	// Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	RoomTypeSummary []RoomTypeSummaryType `json:"roomTypeSummary,omitempty"`
}

// NewRoomTypesSummaryType instantiates a new RoomTypesSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypesSummaryType() *RoomTypesSummaryType {
	this := RoomTypesSummaryType{}
	return &this
}

// NewRoomTypesSummaryTypeWithDefaults instantiates a new RoomTypesSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypesSummaryTypeWithDefaults() *RoomTypesSummaryType {
	this := RoomTypesSummaryType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomTypesSummaryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypesSummaryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomTypesSummaryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomTypesSummaryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoomTypeSummary returns the RoomTypeSummary field value if set, zero value otherwise.
func (o *RoomTypesSummaryType) GetRoomTypeSummary() []RoomTypeSummaryType {
	if o == nil || IsNil(o.RoomTypeSummary) {
		var ret []RoomTypeSummaryType
		return ret
	}
	return o.RoomTypeSummary
}

// GetRoomTypeSummaryOk returns a tuple with the RoomTypeSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypesSummaryType) GetRoomTypeSummaryOk() ([]RoomTypeSummaryType, bool) {
	if o == nil || IsNil(o.RoomTypeSummary) {
		return nil, false
	}
	return o.RoomTypeSummary, true
}

// HasRoomTypeSummary returns a boolean if a field has been set.
func (o *RoomTypesSummaryType) HasRoomTypeSummary() bool {
	if o != nil && !IsNil(o.RoomTypeSummary) {
		return true
	}

	return false
}

// SetRoomTypeSummary gets a reference to the given []RoomTypeSummaryType and assigns it to the RoomTypeSummary field.
func (o *RoomTypesSummaryType) SetRoomTypeSummary(v []RoomTypeSummaryType) {
	o.RoomTypeSummary = v
}

func (o RoomTypesSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypesSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RoomTypeSummary) {
		toSerialize["roomTypeSummary"] = o.RoomTypeSummary
	}
	return toSerialize, nil
}

type NullableRoomTypesSummaryType struct {
	value *RoomTypesSummaryType
	isSet bool
}

func (v NullableRoomTypesSummaryType) Get() *RoomTypesSummaryType {
	return v.value
}

func (v *NullableRoomTypesSummaryType) Set(val *RoomTypesSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypesSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypesSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypesSummaryType(val *RoomTypesSummaryType) *NullableRoomTypesSummaryType {
	return &NullableRoomTypesSummaryType{value: val, isSet: true}
}

func (v NullableRoomTypesSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypesSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


