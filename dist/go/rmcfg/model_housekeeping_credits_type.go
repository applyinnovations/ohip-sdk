/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the HousekeepingCreditsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HousekeepingCreditsType{}

// HousekeepingCreditsType Information regarding the credits for housekeeping tasks/rooms.
type HousekeepingCreditsType struct {
	Type *HousekeepingCreditsDefinitionType `json:"type,omitempty"`
	// Total number of Credits for the Type.
	NumberOfCredits *float32 `json:"numberOfCredits,omitempty"`
}

// NewHousekeepingCreditsType instantiates a new HousekeepingCreditsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHousekeepingCreditsType() *HousekeepingCreditsType {
	this := HousekeepingCreditsType{}
	return &this
}

// NewHousekeepingCreditsTypeWithDefaults instantiates a new HousekeepingCreditsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHousekeepingCreditsTypeWithDefaults() *HousekeepingCreditsType {
	this := HousekeepingCreditsType{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HousekeepingCreditsType) GetType() HousekeepingCreditsDefinitionType {
	if o == nil || IsNil(o.Type) {
		var ret HousekeepingCreditsDefinitionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingCreditsType) GetTypeOk() (*HousekeepingCreditsDefinitionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HousekeepingCreditsType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given HousekeepingCreditsDefinitionType and assigns it to the Type field.
func (o *HousekeepingCreditsType) SetType(v HousekeepingCreditsDefinitionType) {
	o.Type = &v
}

// GetNumberOfCredits returns the NumberOfCredits field value if set, zero value otherwise.
func (o *HousekeepingCreditsType) GetNumberOfCredits() float32 {
	if o == nil || IsNil(o.NumberOfCredits) {
		var ret float32
		return ret
	}
	return *o.NumberOfCredits
}

// GetNumberOfCreditsOk returns a tuple with the NumberOfCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingCreditsType) GetNumberOfCreditsOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfCredits) {
		return nil, false
	}
	return o.NumberOfCredits, true
}

// HasNumberOfCredits returns a boolean if a field has been set.
func (o *HousekeepingCreditsType) HasNumberOfCredits() bool {
	if o != nil && !IsNil(o.NumberOfCredits) {
		return true
	}

	return false
}

// SetNumberOfCredits gets a reference to the given float32 and assigns it to the NumberOfCredits field.
func (o *HousekeepingCreditsType) SetNumberOfCredits(v float32) {
	o.NumberOfCredits = &v
}

func (o HousekeepingCreditsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HousekeepingCreditsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.NumberOfCredits) {
		toSerialize["numberOfCredits"] = o.NumberOfCredits
	}
	return toSerialize, nil
}

type NullableHousekeepingCreditsType struct {
	value *HousekeepingCreditsType
	isSet bool
}

func (v NullableHousekeepingCreditsType) Get() *HousekeepingCreditsType {
	return v.value
}

func (v *NullableHousekeepingCreditsType) Set(val *HousekeepingCreditsType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingCreditsType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingCreditsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingCreditsType(val *HousekeepingCreditsType) *NullableHousekeepingCreditsType {
	return &NullableHousekeepingCreditsType{value: val, isSet: true}
}

func (v NullableHousekeepingCreditsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingCreditsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


