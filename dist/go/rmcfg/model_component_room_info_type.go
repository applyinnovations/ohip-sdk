/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the ComponentRoomInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentRoomInfoType{}

// ComponentRoomInfoType This type holds information of a Component room attached to the Component Suite.
type ComponentRoomInfoType struct {
	// Component Room Number attached to the Component Suite.
	ComponentRoomNumber *string `json:"componentRoomNumber,omitempty"`
	// Room type of the Component Room attached to the Component Suite.
	ComponentRoomType *string `json:"componentRoomType,omitempty"`
	// Room Status of the Component Room attached to the Component Suite.
	ComponentRoomStatus *string `json:"componentRoomStatus,omitempty"`
}

// NewComponentRoomInfoType instantiates a new ComponentRoomInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentRoomInfoType() *ComponentRoomInfoType {
	this := ComponentRoomInfoType{}
	return &this
}

// NewComponentRoomInfoTypeWithDefaults instantiates a new ComponentRoomInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentRoomInfoTypeWithDefaults() *ComponentRoomInfoType {
	this := ComponentRoomInfoType{}
	return &this
}

// GetComponentRoomNumber returns the ComponentRoomNumber field value if set, zero value otherwise.
func (o *ComponentRoomInfoType) GetComponentRoomNumber() string {
	if o == nil || IsNil(o.ComponentRoomNumber) {
		var ret string
		return ret
	}
	return *o.ComponentRoomNumber
}

// GetComponentRoomNumberOk returns a tuple with the ComponentRoomNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRoomInfoType) GetComponentRoomNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentRoomNumber) {
		return nil, false
	}
	return o.ComponentRoomNumber, true
}

// HasComponentRoomNumber returns a boolean if a field has been set.
func (o *ComponentRoomInfoType) HasComponentRoomNumber() bool {
	if o != nil && !IsNil(o.ComponentRoomNumber) {
		return true
	}

	return false
}

// SetComponentRoomNumber gets a reference to the given string and assigns it to the ComponentRoomNumber field.
func (o *ComponentRoomInfoType) SetComponentRoomNumber(v string) {
	o.ComponentRoomNumber = &v
}

// GetComponentRoomType returns the ComponentRoomType field value if set, zero value otherwise.
func (o *ComponentRoomInfoType) GetComponentRoomType() string {
	if o == nil || IsNil(o.ComponentRoomType) {
		var ret string
		return ret
	}
	return *o.ComponentRoomType
}

// GetComponentRoomTypeOk returns a tuple with the ComponentRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRoomInfoType) GetComponentRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentRoomType) {
		return nil, false
	}
	return o.ComponentRoomType, true
}

// HasComponentRoomType returns a boolean if a field has been set.
func (o *ComponentRoomInfoType) HasComponentRoomType() bool {
	if o != nil && !IsNil(o.ComponentRoomType) {
		return true
	}

	return false
}

// SetComponentRoomType gets a reference to the given string and assigns it to the ComponentRoomType field.
func (o *ComponentRoomInfoType) SetComponentRoomType(v string) {
	o.ComponentRoomType = &v
}

// GetComponentRoomStatus returns the ComponentRoomStatus field value if set, zero value otherwise.
func (o *ComponentRoomInfoType) GetComponentRoomStatus() string {
	if o == nil || IsNil(o.ComponentRoomStatus) {
		var ret string
		return ret
	}
	return *o.ComponentRoomStatus
}

// GetComponentRoomStatusOk returns a tuple with the ComponentRoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentRoomInfoType) GetComponentRoomStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentRoomStatus) {
		return nil, false
	}
	return o.ComponentRoomStatus, true
}

// HasComponentRoomStatus returns a boolean if a field has been set.
func (o *ComponentRoomInfoType) HasComponentRoomStatus() bool {
	if o != nil && !IsNil(o.ComponentRoomStatus) {
		return true
	}

	return false
}

// SetComponentRoomStatus gets a reference to the given string and assigns it to the ComponentRoomStatus field.
func (o *ComponentRoomInfoType) SetComponentRoomStatus(v string) {
	o.ComponentRoomStatus = &v
}

func (o ComponentRoomInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentRoomInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComponentRoomNumber) {
		toSerialize["componentRoomNumber"] = o.ComponentRoomNumber
	}
	if !IsNil(o.ComponentRoomType) {
		toSerialize["componentRoomType"] = o.ComponentRoomType
	}
	if !IsNil(o.ComponentRoomStatus) {
		toSerialize["componentRoomStatus"] = o.ComponentRoomStatus
	}
	return toSerialize, nil
}

type NullableComponentRoomInfoType struct {
	value *ComponentRoomInfoType
	isSet bool
}

func (v NullableComponentRoomInfoType) Get() *ComponentRoomInfoType {
	return v.value
}

func (v *NullableComponentRoomInfoType) Set(val *ComponentRoomInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentRoomInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentRoomInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentRoomInfoType(val *ComponentRoomInfoType) *NullableComponentRoomInfoType {
	return &NullableComponentRoomInfoType{value: val, isSet: true}
}

func (v NullableComponentRoomInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentRoomInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


