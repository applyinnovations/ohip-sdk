/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomCondtionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomCondtionType{}

// RoomCondtionType Resort Room Condition Configuration Type
type RoomCondtionType struct {
	// Description for the room condition.
	Description *string `json:"description,omitempty"`
	// Indicates types of assignment.
	DisplayInRoomAssignment *bool `json:"displayInRoomAssignment,omitempty"`
	// Comments for the room condition.
	Comments *string `json:"comments,omitempty"`
	DisplaySeq *int32 `json:"displaySeq,omitempty"`
	Inactive *bool `json:"inactive,omitempty"`
	HoldMinutes *int32 `json:"holdMinutes,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	Code *string `json:"code,omitempty"`
}

// NewRoomCondtionType instantiates a new RoomCondtionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomCondtionType() *RoomCondtionType {
	this := RoomCondtionType{}
	return &this
}

// NewRoomCondtionTypeWithDefaults instantiates a new RoomCondtionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomCondtionTypeWithDefaults() *RoomCondtionType {
	this := RoomCondtionType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoomCondtionType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoomCondtionType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoomCondtionType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayInRoomAssignment returns the DisplayInRoomAssignment field value if set, zero value otherwise.
func (o *RoomCondtionType) GetDisplayInRoomAssignment() bool {
	if o == nil || IsNil(o.DisplayInRoomAssignment) {
		var ret bool
		return ret
	}
	return *o.DisplayInRoomAssignment
}

// GetDisplayInRoomAssignmentOk returns a tuple with the DisplayInRoomAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetDisplayInRoomAssignmentOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayInRoomAssignment) {
		return nil, false
	}
	return o.DisplayInRoomAssignment, true
}

// HasDisplayInRoomAssignment returns a boolean if a field has been set.
func (o *RoomCondtionType) HasDisplayInRoomAssignment() bool {
	if o != nil && !IsNil(o.DisplayInRoomAssignment) {
		return true
	}

	return false
}

// SetDisplayInRoomAssignment gets a reference to the given bool and assigns it to the DisplayInRoomAssignment field.
func (o *RoomCondtionType) SetDisplayInRoomAssignment(v bool) {
	o.DisplayInRoomAssignment = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RoomCondtionType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RoomCondtionType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *RoomCondtionType) SetComments(v string) {
	o.Comments = &v
}

// GetDisplaySeq returns the DisplaySeq field value if set, zero value otherwise.
func (o *RoomCondtionType) GetDisplaySeq() int32 {
	if o == nil || IsNil(o.DisplaySeq) {
		var ret int32
		return ret
	}
	return *o.DisplaySeq
}

// GetDisplaySeqOk returns a tuple with the DisplaySeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetDisplaySeqOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplaySeq) {
		return nil, false
	}
	return o.DisplaySeq, true
}

// HasDisplaySeq returns a boolean if a field has been set.
func (o *RoomCondtionType) HasDisplaySeq() bool {
	if o != nil && !IsNil(o.DisplaySeq) {
		return true
	}

	return false
}

// SetDisplaySeq gets a reference to the given int32 and assigns it to the DisplaySeq field.
func (o *RoomCondtionType) SetDisplaySeq(v int32) {
	o.DisplaySeq = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *RoomCondtionType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *RoomCondtionType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *RoomCondtionType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetHoldMinutes returns the HoldMinutes field value if set, zero value otherwise.
func (o *RoomCondtionType) GetHoldMinutes() int32 {
	if o == nil || IsNil(o.HoldMinutes) {
		var ret int32
		return ret
	}
	return *o.HoldMinutes
}

// GetHoldMinutesOk returns a tuple with the HoldMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetHoldMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.HoldMinutes) {
		return nil, false
	}
	return o.HoldMinutes, true
}

// HasHoldMinutes returns a boolean if a field has been set.
func (o *RoomCondtionType) HasHoldMinutes() bool {
	if o != nil && !IsNil(o.HoldMinutes) {
		return true
	}

	return false
}

// SetHoldMinutes gets a reference to the given int32 and assigns it to the HoldMinutes field.
func (o *RoomCondtionType) SetHoldMinutes(v int32) {
	o.HoldMinutes = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomCondtionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomCondtionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomCondtionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RoomCondtionType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCondtionType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RoomCondtionType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RoomCondtionType) SetCode(v string) {
	o.Code = &v
}

func (o RoomCondtionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomCondtionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayInRoomAssignment) {
		toSerialize["displayInRoomAssignment"] = o.DisplayInRoomAssignment
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.DisplaySeq) {
		toSerialize["displaySeq"] = o.DisplaySeq
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.HoldMinutes) {
		toSerialize["holdMinutes"] = o.HoldMinutes
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableRoomCondtionType struct {
	value *RoomCondtionType
	isSet bool
}

func (v NullableRoomCondtionType) Get() *RoomCondtionType {
	return v.value
}

func (v *NullableRoomCondtionType) Set(val *RoomCondtionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomCondtionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomCondtionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomCondtionType(val *RoomCondtionType) *NullableRoomCondtionType {
	return &NullableRoomCondtionType{value: val, isSet: true}
}

func (v NullableRoomCondtionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomCondtionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


