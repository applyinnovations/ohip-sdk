/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
	"fmt"
)

// HousekeepingCreditRuleTravelTypeType Applies to rooms across multiple section groups.
type HousekeepingCreditRuleTravelTypeType string

// List of housekeepingCreditRuleTravelTypeType
const (
	HOUSEKEEPINGCREDITRULETRAVELTYPETYPE_BUILDING HousekeepingCreditRuleTravelTypeType = "Building"
	HOUSEKEEPINGCREDITRULETRAVELTYPETYPE_FLOOR HousekeepingCreditRuleTravelTypeType = "Floor"
	HOUSEKEEPINGCREDITRULETRAVELTYPETYPE_SECTION HousekeepingCreditRuleTravelTypeType = "Section"
	HOUSEKEEPINGCREDITRULETRAVELTYPETYPE_SECTION_GROUP HousekeepingCreditRuleTravelTypeType = "SectionGroup"
)

// All allowed values of HousekeepingCreditRuleTravelTypeType enum
var AllowedHousekeepingCreditRuleTravelTypeTypeEnumValues = []HousekeepingCreditRuleTravelTypeType{
	"Building",
	"Floor",
	"Section",
	"SectionGroup",
}

func (v *HousekeepingCreditRuleTravelTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HousekeepingCreditRuleTravelTypeType(value)
	for _, existing := range AllowedHousekeepingCreditRuleTravelTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HousekeepingCreditRuleTravelTypeType", value)
}

// NewHousekeepingCreditRuleTravelTypeTypeFromValue returns a pointer to a valid HousekeepingCreditRuleTravelTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHousekeepingCreditRuleTravelTypeTypeFromValue(v string) (*HousekeepingCreditRuleTravelTypeType, error) {
	ev := HousekeepingCreditRuleTravelTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HousekeepingCreditRuleTravelTypeType: valid values are %v", v, AllowedHousekeepingCreditRuleTravelTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HousekeepingCreditRuleTravelTypeType) IsValid() bool {
	for _, existing := range AllowedHousekeepingCreditRuleTravelTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to housekeepingCreditRuleTravelTypeType value
func (v HousekeepingCreditRuleTravelTypeType) Ptr() *HousekeepingCreditRuleTravelTypeType {
	return &v
}

type NullableHousekeepingCreditRuleTravelTypeType struct {
	value *HousekeepingCreditRuleTravelTypeType
	isSet bool
}

func (v NullableHousekeepingCreditRuleTravelTypeType) Get() *HousekeepingCreditRuleTravelTypeType {
	return v.value
}

func (v *NullableHousekeepingCreditRuleTravelTypeType) Set(val *HousekeepingCreditRuleTravelTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingCreditRuleTravelTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingCreditRuleTravelTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingCreditRuleTravelTypeType(val *HousekeepingCreditRuleTravelTypeType) *NullableHousekeepingCreditRuleTravelTypeType {
	return &NullableHousekeepingCreditRuleTravelTypeType{value: val, isSet: true}
}

func (v NullableHousekeepingCreditRuleTravelTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingCreditRuleTravelTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

