/*
OPERA Cloud Room Configuration API

Testing HotelConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rmcfg"
)

func Test_rmcfg_HotelConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HotelConfigApiService ChangeBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var floorsId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeFloors(context.Background(), floorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHotelRoomMaintenanceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attendantId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingAttendants(context.Background(), attendantId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingCreditRules(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomScheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingRoomSchedules(context.Background(), roomScheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingSectionGroups(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingSections(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingSupplyCodes(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeHousekeepingTasks(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeOutOfOrderServiceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeResortRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomConditionCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeResortRoomCondition(context.Background(), roomConditionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeRoomConditionTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateCode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeRoomConditionTemplate(context.Background(), templateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeRoomGroups(context.Background(), rateGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateFloorsId string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateFloors(context.Background(), templateFloorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateOutOfOrderServiceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ChangeTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigApi.ChangeTemplateRoomMaintenanceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyBuildingGroups(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyBuildings(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyHousekeepingSectionGroups(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyHousekeepingSections(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyHousekeepingSupplyCodes(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.CopyRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService CopyRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomsId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.CopyRooms(context.Background(), roomsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteRoomClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteRoomClass(context.Background(), roomClassId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteRoomClassTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassTemplateId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteRoomClassTemplate(context.Background(), roomClassTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeTemplatesId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteRoomTypeTemplates(context.Background(), roomTypeTemplatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteRoomTypes(context.Background(), roomTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomsId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteRooms(context.Background(), roomsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService DeleteTemplateHousekeepingTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.HotelConfigApi.DeleteTemplateHousekeepingTask(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GenerateRoomHierarchy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GenerateRoomHierarchy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetBuildingFloorMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetBuildingFloorMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHotelRoomMaintenanceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHouseKeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHouseKeepingSupplyCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingAttendants(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingCreditRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingRoomSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingSectionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingSections(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetHousekeepingTasks(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetOutOfOrderServiceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetResortRoomConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetResortRoomConditions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomClassTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomClassTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomClasses(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomConditionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomConditionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomTypeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomTypeInfo(context.Background(), roomTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomTypeTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.GetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetRoomsSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetRoomsSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateHousekeepingTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateOutOfOrderServiceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService GetTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.GetTemplateRoomMaintenanceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHotelRoomMaintenanceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingAttendants(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingCreditRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingRoomSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingSectionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingSections(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingSupplyCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostHousekeepingTasks(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostOutOfOrderServiceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostResortRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostResortRoomCondition(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomClass(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomClassTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomClassTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomConditionTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomConditionTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomTypeTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostRoomTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PostRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateHousekeepingTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateOutOfOrderServiceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PostTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.PostTemplateRoomMaintenanceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutRoomClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutRoomClass(context.Background(), roomClassId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutRoomClassTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassTemplateId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutRoomClassTemplate(context.Background(), roomClassTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeTemplatesId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutRoomTypeTemplates(context.Background(), roomTypeTemplatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutRoomTypes(context.Background(), roomTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomsId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutRooms(context.Background(), roomsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService PutTemplateHousekeepingTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.HotelConfigApi.PutTemplateHousekeepingTask(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var floorsId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveFloors(context.Background(), floorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHotelRoomMaintenanceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attendantId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingAttendants(context.Background(), attendantId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingCreditRules(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomScheduleId string
		var roomTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingRoomSchedules(context.Background(), roomScheduleId, roomTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingSectionGroups(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingSections(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingSupplyCodes(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveHousekeepingTasks(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveOutOfOrderServiceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveResortRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomConditionCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveResortRoomCondition(context.Background(), roomConditionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveRoomConditionTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateCode string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveRoomConditionTemplate(context.Background(), templateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveRoomGroups(context.Background(), rateGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateFloorsId string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateFloors(context.Background(), templateFloorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateOutOfOrderServiceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService RemoveTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigApi.RemoveTemplateRoomMaintenanceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService SetBuildingFloorMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigApi.SetBuildingFloorMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService SetHousekeepingTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.SetHousekeepingTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigApiService ValidateRoomClassInUse", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigApi.ValidateRoomClassInUse(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
