/*
OPERA Cloud Room Configuration API

Testing HotelConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rmcfg"
)

func Test_rmcfg_HotelConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HotelConfigAPIService ChangeBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var floorsId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeFloors(context.Background(), floorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHotelRoomMaintenanceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attendantId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHousekeepingAttendants(context.Background(), attendantId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHousekeepingCreditRules(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomScheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHousekeepingRoomSchedules(context.Background(), roomScheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHousekeepingSectionGroups(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHousekeepingSections(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHousekeepingSupplyCodes(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHousekeepingTasks(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeOutOfOrderServiceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeResortRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomConditionCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeResortRoomCondition(context.Background(), roomConditionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeRoomConditionTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeRoomConditionTemplate(context.Background(), templateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeRoomGroups(context.Background(), rateGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateFloorsId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateFloors(context.Background(), templateFloorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateHousekeepingRoomSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sequenceId int32

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateHousekeepingRoomSchedule(context.Background(), sequenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateOutOfOrderServiceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateRoomMaintenanceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyBuildingGroups(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyBuildings(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyHousekeepingSectionGroups(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyHousekeepingSections(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyHousekeepingSupplyCodes(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomsId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyRooms(context.Background(), roomsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteRoomClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteRoomClass(context.Background(), roomClassId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteRoomClassTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassTemplateId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteRoomClassTemplate(context.Background(), roomClassTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeTemplatesId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteRoomTypeTemplates(context.Background(), roomTypeTemplatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteRoomTypes(context.Background(), roomTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomsId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteRooms(context.Background(), roomsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteTemplateHousekeepingRoomSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sequenceId int32

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteTemplateHousekeepingRoomSchedule(context.Background(), sequenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteTemplateHousekeepingTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteTemplateHousekeepingTask(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteVacantRoomStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var vacantRoomStatusId float32

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteVacantRoomStatus(context.Background(), hotelId, vacantRoomStatusId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GenerateRoomHierarchy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GenerateRoomHierarchy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetBuildingFloorMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetBuildingFloorMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHotelRoomMaintenanceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHouseKeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHouseKeepingSupplyCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHousekeepingAttendants(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHousekeepingCreditRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHousekeepingRoomSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHousekeepingSectionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHousekeepingSections(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHousekeepingTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHousekeepingTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHousekeepingTasks(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetOutOfOrderServiceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetResortRoomConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetResortRoomConditions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomClassTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomClassTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomClasses(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomConditionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomConditionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomTypeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomTypeInfo(context.Background(), roomTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomTypeTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRoomsSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRoomsSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateHousekeepingRoomSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateHousekeepingTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateOutOfOrderServiceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateRoomMaintenanceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetVacantRoomStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetVacantRoomStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHotelRoomMaintenanceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHousekeepingAttendants(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHousekeepingCreditRules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHousekeepingRoomSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHousekeepingSectionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHousekeepingSections(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHousekeepingSupplyCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHousekeepingTasks(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostOutOfOrderServiceReasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostResortRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostResortRoomCondition(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomClass(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomClassTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomClassTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomConditionTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomConditionTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomTypeTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRoomTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateFloors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateHousekeepingRoomSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateHousekeepingRoomSchedule(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateHousekeepingTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateOutOfOrderServiceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateRoomMaintenanceReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostVacantRoomStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostVacantRoomStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutRoomClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PutRoomClass(context.Background(), roomClassId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutRoomClassTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomClassTemplateId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PutRoomClassTemplate(context.Background(), roomClassTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutRoomTypeTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeTemplatesId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PutRoomTypeTemplates(context.Background(), roomTypeTemplatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PutRoomTypes(context.Background(), roomTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomsId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PutRooms(context.Background(), roomsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutTemplateHousekeepingTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PutTemplateHousekeepingTask(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutVacantRoomStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var vacantRoomStatusId float32

		resp, httpRes, err := apiClient.HotelConfigAPI.PutVacantRoomStatus(context.Background(), hotelId, vacantRoomStatusId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveBuildingGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveBuildingGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveBuildings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveBuildings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var floorsId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveFloors(context.Background(), floorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHotelRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHotelRoomMaintenanceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingAttendants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attendantId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingAttendants(context.Background(), attendantId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingCreditRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingCreditRules(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingRoomSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomScheduleId string
		var roomTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingRoomSchedules(context.Background(), roomScheduleId, roomTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sequenceId int32
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingSchedule(context.Background(), sequenceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingSectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingSectionGroups(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingSections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingSections(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingSupplyCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingSupplyCodes(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHousekeepingTasks(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveOutOfOrderServiceReasons(context.Background(), reasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveResortRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomConditionCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveResortRoomCondition(context.Background(), roomConditionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveRoomConditionTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveRoomConditionTemplate(context.Background(), templateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveRoomFeatures(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveRoomGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateGroupCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveRoomGroups(context.Background(), rateGroupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveRoomHierarchies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveRoomHierarchies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateFloors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateFloorsId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateFloors(context.Background(), templateFloorsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateOutOfOrderServiceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateOutOfOrderServiceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateRoomFeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateRoomFeatures(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateRoomMaintenanceReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateRoomMaintenanceReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService SetBuildingFloorMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.SetBuildingFloorMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService SetHousekeepingTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.SetHousekeepingTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ValidateRoomClassInUse", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ValidateRoomClassInUse(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
