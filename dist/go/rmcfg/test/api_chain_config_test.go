/*
OPERA Cloud Room Configuration API

Testing ChainConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rmcfg"
)

func Test_rmcfg_ChainConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigAPIService ChangeRoomMoveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeRoomMoveReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteBedTypeRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bedTypeRequestsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteBedTypeRequests(context.Background(), bedTypeRequestsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteBedTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bedTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteBedTypes(context.Background(), bedTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteFloorTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var floorTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteFloorTypes(context.Background(), floorTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteRoomPotentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomPotentialsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteRoomPotentials(context.Background(), roomPotentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteRoomPreferencePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomPreferencePrioritiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteRoomPreferencePriorities(context.Background(), roomPreferencePrioritiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteSmokingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var smokingTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteSmokingTypes(context.Background(), smokingTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBedTypeRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBedTypeRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBedTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBedTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetFloorTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetFloorTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetRoomMoveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetRoomMoveReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetRoomPotentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetRoomPotentials(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetRoomPreferencePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetRoomPreferencePriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetSmokingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetSmokingTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBedTypeRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBedTypeRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBedTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBedTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostFloorTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostFloorTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostRoomMoveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostRoomMoveReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostRoomPotentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostRoomPotentials(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostRoomPreferencePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostRoomPreferencePriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostSmokingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostSmokingTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutBedTypeRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bedTypeRequestsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutBedTypeRequests(context.Background(), bedTypeRequestsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutBedTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bedTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutBedTypes(context.Background(), bedTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutFloorTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var floorTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutFloorTypes(context.Background(), floorTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutRoomPotentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomPotentialsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutRoomPotentials(context.Background(), roomPotentialsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutRoomPreferencePriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomPreferencePrioritiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutRoomPreferencePriorities(context.Background(), roomPreferencePrioritiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutSmokingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var smokingTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutSmokingTypes(context.Background(), smokingTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveRoomMoveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reasonCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveRoomMoveReasons(context.Background(), reasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
