/*
OPERA Cloud Room Configuration API

APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmcfg

import (
	"encoding/json"
)

// checks if the RoomHierarchyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomHierarchyType{}

// RoomHierarchyType Room Hierarchy id type for create, change and delete
type RoomHierarchyType struct {
	RoomHierarchyType *RoomHierarchyTypeType `json:"roomHierarchyType,omitempty"`
	// Resort code in which the hierarchy should exist
	HotelId *string `json:"hotelId,omitempty"`
	// From code to process
	FromCode *string `json:"fromCode,omitempty"`
	ToCodes []string `json:"toCodes,omitempty"`
	// Display Sequence
	DisplaySequence *int32 `json:"displaySequence,omitempty"`
}

// NewRoomHierarchyType instantiates a new RoomHierarchyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomHierarchyType() *RoomHierarchyType {
	this := RoomHierarchyType{}
	return &this
}

// NewRoomHierarchyTypeWithDefaults instantiates a new RoomHierarchyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomHierarchyTypeWithDefaults() *RoomHierarchyType {
	this := RoomHierarchyType{}
	return &this
}

// GetRoomHierarchyType returns the RoomHierarchyType field value if set, zero value otherwise.
func (o *RoomHierarchyType) GetRoomHierarchyType() RoomHierarchyTypeType {
	if o == nil || IsNil(o.RoomHierarchyType) {
		var ret RoomHierarchyTypeType
		return ret
	}
	return *o.RoomHierarchyType
}

// GetRoomHierarchyTypeOk returns a tuple with the RoomHierarchyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomHierarchyType) GetRoomHierarchyTypeOk() (*RoomHierarchyTypeType, bool) {
	if o == nil || IsNil(o.RoomHierarchyType) {
		return nil, false
	}
	return o.RoomHierarchyType, true
}

// HasRoomHierarchyType returns a boolean if a field has been set.
func (o *RoomHierarchyType) HasRoomHierarchyType() bool {
	if o != nil && !IsNil(o.RoomHierarchyType) {
		return true
	}

	return false
}

// SetRoomHierarchyType gets a reference to the given RoomHierarchyTypeType and assigns it to the RoomHierarchyType field.
func (o *RoomHierarchyType) SetRoomHierarchyType(v RoomHierarchyTypeType) {
	o.RoomHierarchyType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomHierarchyType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomHierarchyType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomHierarchyType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomHierarchyType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetFromCode returns the FromCode field value if set, zero value otherwise.
func (o *RoomHierarchyType) GetFromCode() string {
	if o == nil || IsNil(o.FromCode) {
		var ret string
		return ret
	}
	return *o.FromCode
}

// GetFromCodeOk returns a tuple with the FromCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomHierarchyType) GetFromCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FromCode) {
		return nil, false
	}
	return o.FromCode, true
}

// HasFromCode returns a boolean if a field has been set.
func (o *RoomHierarchyType) HasFromCode() bool {
	if o != nil && !IsNil(o.FromCode) {
		return true
	}

	return false
}

// SetFromCode gets a reference to the given string and assigns it to the FromCode field.
func (o *RoomHierarchyType) SetFromCode(v string) {
	o.FromCode = &v
}

// GetToCodes returns the ToCodes field value if set, zero value otherwise.
func (o *RoomHierarchyType) GetToCodes() []string {
	if o == nil || IsNil(o.ToCodes) {
		var ret []string
		return ret
	}
	return o.ToCodes
}

// GetToCodesOk returns a tuple with the ToCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomHierarchyType) GetToCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.ToCodes) {
		return nil, false
	}
	return o.ToCodes, true
}

// HasToCodes returns a boolean if a field has been set.
func (o *RoomHierarchyType) HasToCodes() bool {
	if o != nil && !IsNil(o.ToCodes) {
		return true
	}

	return false
}

// SetToCodes gets a reference to the given []string and assigns it to the ToCodes field.
func (o *RoomHierarchyType) SetToCodes(v []string) {
	o.ToCodes = v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *RoomHierarchyType) GetDisplaySequence() int32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret int32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomHierarchyType) GetDisplaySequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *RoomHierarchyType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given int32 and assigns it to the DisplaySequence field.
func (o *RoomHierarchyType) SetDisplaySequence(v int32) {
	o.DisplaySequence = &v
}

func (o RoomHierarchyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomHierarchyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomHierarchyType) {
		toSerialize["roomHierarchyType"] = o.RoomHierarchyType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.FromCode) {
		toSerialize["fromCode"] = o.FromCode
	}
	if !IsNil(o.ToCodes) {
		toSerialize["toCodes"] = o.ToCodes
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	return toSerialize, nil
}

type NullableRoomHierarchyType struct {
	value *RoomHierarchyType
	isSet bool
}

func (v NullableRoomHierarchyType) Get() *RoomHierarchyType {
	return v.value
}

func (v *NullableRoomHierarchyType) Set(val *RoomHierarchyType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomHierarchyType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomHierarchyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomHierarchyType(val *RoomHierarchyType) *NullableRoomHierarchyType {
	return &NullableRoomHierarchyType{value: val, isSet: true}
}

func (v NullableRoomHierarchyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomHierarchyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


