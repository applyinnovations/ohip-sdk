/*
OPERA Cloud Integration Processor API

APIs to get Business Events generated in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package int

import (
	"encoding/json"
)

// checks if the BusinessEventType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessEventType{}

// BusinessEventType struct for BusinessEventType
type BusinessEventType struct {
	Details []BusinessEventDetailType `json:"details,omitempty"`
	Header *BusinessEventHeaderType `json:"header,omitempty"`
}

// NewBusinessEventType instantiates a new BusinessEventType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessEventType() *BusinessEventType {
	this := BusinessEventType{}
	return &this
}

// NewBusinessEventTypeWithDefaults instantiates a new BusinessEventType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessEventTypeWithDefaults() *BusinessEventType {
	this := BusinessEventType{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *BusinessEventType) GetDetails() []BusinessEventDetailType {
	if o == nil || IsNil(o.Details) {
		var ret []BusinessEventDetailType
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventType) GetDetailsOk() ([]BusinessEventDetailType, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *BusinessEventType) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given []BusinessEventDetailType and assigns it to the Details field.
func (o *BusinessEventType) SetDetails(v []BusinessEventDetailType) {
	o.Details = v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *BusinessEventType) GetHeader() BusinessEventHeaderType {
	if o == nil || IsNil(o.Header) {
		var ret BusinessEventHeaderType
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventType) GetHeaderOk() (*BusinessEventHeaderType, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *BusinessEventType) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given BusinessEventHeaderType and assigns it to the Header field.
func (o *BusinessEventType) SetHeader(v BusinessEventHeaderType) {
	o.Header = &v
}

func (o BusinessEventType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessEventType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	return toSerialize, nil
}

type NullableBusinessEventType struct {
	value *BusinessEventType
	isSet bool
}

func (v NullableBusinessEventType) Get() *BusinessEventType {
	return v.value
}

func (v *NullableBusinessEventType) Set(val *BusinessEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessEventType(val *BusinessEventType) *NullableBusinessEventType {
	return &NullableBusinessEventType{value: val, isSet: true}
}

func (v NullableBusinessEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


