/*
OPERA Cloud Integration Processor API

APIs to get Business Events generated in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package int

import (
	"encoding/json"
)

// checks if the BusinessEventDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessEventDetailType{}

// BusinessEventDetailType struct for BusinessEventDetailType
type BusinessEventDetailType struct {
	// Name of the data element, such as arrival date, departure date, etc.
	DataElement *string `json:"dataElement,omitempty"`
	// Value of the element when this action took place. In case of date values, format used is YYYY-MM-DD.
	OldValue *string `json:"oldValue,omitempty"`
	// Value of the element after this action took place. In case of date values, format used is YYYY-MM-DD.
	NewValue *string `json:"newValue,omitempty"`
	// Begin date from when this value is applicable, such as daily element date, block grid date etc.
	ScopeFrom *string `json:"scopeFrom,omitempty"`
	// End date till when this value is applicable, such as daily element date, block grid date etc.
	ScopeTo *string `json:"scopeTo,omitempty"`
	// Sequence number used to correlate fields of each record, when a collection of records is represented.
	ElementSequence *int32 `json:"elementSequence,omitempty"`
	// Element type used to correlate fields of each record, when a collection of records is represented, such as phone type for phones.
	ElementType *string `json:"elementType,omitempty"`
	// Element role used to correlate fields of each record, when a collection of records is represented, such as phone role for phones.
	ElementRole *string `json:"elementRole,omitempty"`
}

// NewBusinessEventDetailType instantiates a new BusinessEventDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessEventDetailType() *BusinessEventDetailType {
	this := BusinessEventDetailType{}
	return &this
}

// NewBusinessEventDetailTypeWithDefaults instantiates a new BusinessEventDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessEventDetailTypeWithDefaults() *BusinessEventDetailType {
	this := BusinessEventDetailType{}
	return &this
}

// GetDataElement returns the DataElement field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetDataElement() string {
	if o == nil || IsNil(o.DataElement) {
		var ret string
		return ret
	}
	return *o.DataElement
}

// GetDataElementOk returns a tuple with the DataElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetDataElementOk() (*string, bool) {
	if o == nil || IsNil(o.DataElement) {
		return nil, false
	}
	return o.DataElement, true
}

// HasDataElement returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasDataElement() bool {
	if o != nil && !IsNil(o.DataElement) {
		return true
	}

	return false
}

// SetDataElement gets a reference to the given string and assigns it to the DataElement field.
func (o *BusinessEventDetailType) SetDataElement(v string) {
	o.DataElement = &v
}

// GetOldValue returns the OldValue field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetOldValue() string {
	if o == nil || IsNil(o.OldValue) {
		var ret string
		return ret
	}
	return *o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetOldValueOk() (*string, bool) {
	if o == nil || IsNil(o.OldValue) {
		return nil, false
	}
	return o.OldValue, true
}

// HasOldValue returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasOldValue() bool {
	if o != nil && !IsNil(o.OldValue) {
		return true
	}

	return false
}

// SetOldValue gets a reference to the given string and assigns it to the OldValue field.
func (o *BusinessEventDetailType) SetOldValue(v string) {
	o.OldValue = &v
}

// GetNewValue returns the NewValue field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetNewValue() string {
	if o == nil || IsNil(o.NewValue) {
		var ret string
		return ret
	}
	return *o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetNewValueOk() (*string, bool) {
	if o == nil || IsNil(o.NewValue) {
		return nil, false
	}
	return o.NewValue, true
}

// HasNewValue returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasNewValue() bool {
	if o != nil && !IsNil(o.NewValue) {
		return true
	}

	return false
}

// SetNewValue gets a reference to the given string and assigns it to the NewValue field.
func (o *BusinessEventDetailType) SetNewValue(v string) {
	o.NewValue = &v
}

// GetScopeFrom returns the ScopeFrom field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetScopeFrom() string {
	if o == nil || IsNil(o.ScopeFrom) {
		var ret string
		return ret
	}
	return *o.ScopeFrom
}

// GetScopeFromOk returns a tuple with the ScopeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetScopeFromOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeFrom) {
		return nil, false
	}
	return o.ScopeFrom, true
}

// HasScopeFrom returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasScopeFrom() bool {
	if o != nil && !IsNil(o.ScopeFrom) {
		return true
	}

	return false
}

// SetScopeFrom gets a reference to the given string and assigns it to the ScopeFrom field.
func (o *BusinessEventDetailType) SetScopeFrom(v string) {
	o.ScopeFrom = &v
}

// GetScopeTo returns the ScopeTo field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetScopeTo() string {
	if o == nil || IsNil(o.ScopeTo) {
		var ret string
		return ret
	}
	return *o.ScopeTo
}

// GetScopeToOk returns a tuple with the ScopeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetScopeToOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeTo) {
		return nil, false
	}
	return o.ScopeTo, true
}

// HasScopeTo returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasScopeTo() bool {
	if o != nil && !IsNil(o.ScopeTo) {
		return true
	}

	return false
}

// SetScopeTo gets a reference to the given string and assigns it to the ScopeTo field.
func (o *BusinessEventDetailType) SetScopeTo(v string) {
	o.ScopeTo = &v
}

// GetElementSequence returns the ElementSequence field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetElementSequence() int32 {
	if o == nil || IsNil(o.ElementSequence) {
		var ret int32
		return ret
	}
	return *o.ElementSequence
}

// GetElementSequenceOk returns a tuple with the ElementSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetElementSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.ElementSequence) {
		return nil, false
	}
	return o.ElementSequence, true
}

// HasElementSequence returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasElementSequence() bool {
	if o != nil && !IsNil(o.ElementSequence) {
		return true
	}

	return false
}

// SetElementSequence gets a reference to the given int32 and assigns it to the ElementSequence field.
func (o *BusinessEventDetailType) SetElementSequence(v int32) {
	o.ElementSequence = &v
}

// GetElementType returns the ElementType field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetElementType() string {
	if o == nil || IsNil(o.ElementType) {
		var ret string
		return ret
	}
	return *o.ElementType
}

// GetElementTypeOk returns a tuple with the ElementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetElementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ElementType) {
		return nil, false
	}
	return o.ElementType, true
}

// HasElementType returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasElementType() bool {
	if o != nil && !IsNil(o.ElementType) {
		return true
	}

	return false
}

// SetElementType gets a reference to the given string and assigns it to the ElementType field.
func (o *BusinessEventDetailType) SetElementType(v string) {
	o.ElementType = &v
}

// GetElementRole returns the ElementRole field value if set, zero value otherwise.
func (o *BusinessEventDetailType) GetElementRole() string {
	if o == nil || IsNil(o.ElementRole) {
		var ret string
		return ret
	}
	return *o.ElementRole
}

// GetElementRoleOk returns a tuple with the ElementRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessEventDetailType) GetElementRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ElementRole) {
		return nil, false
	}
	return o.ElementRole, true
}

// HasElementRole returns a boolean if a field has been set.
func (o *BusinessEventDetailType) HasElementRole() bool {
	if o != nil && !IsNil(o.ElementRole) {
		return true
	}

	return false
}

// SetElementRole gets a reference to the given string and assigns it to the ElementRole field.
func (o *BusinessEventDetailType) SetElementRole(v string) {
	o.ElementRole = &v
}

func (o BusinessEventDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessEventDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataElement) {
		toSerialize["dataElement"] = o.DataElement
	}
	if !IsNil(o.OldValue) {
		toSerialize["oldValue"] = o.OldValue
	}
	if !IsNil(o.NewValue) {
		toSerialize["newValue"] = o.NewValue
	}
	if !IsNil(o.ScopeFrom) {
		toSerialize["scopeFrom"] = o.ScopeFrom
	}
	if !IsNil(o.ScopeTo) {
		toSerialize["scopeTo"] = o.ScopeTo
	}
	if !IsNil(o.ElementSequence) {
		toSerialize["elementSequence"] = o.ElementSequence
	}
	if !IsNil(o.ElementType) {
		toSerialize["elementType"] = o.ElementType
	}
	if !IsNil(o.ElementRole) {
		toSerialize["elementRole"] = o.ElementRole
	}
	return toSerialize, nil
}

type NullableBusinessEventDetailType struct {
	value *BusinessEventDetailType
	isSet bool
}

func (v NullableBusinessEventDetailType) Get() *BusinessEventDetailType {
	return v.value
}

func (v *NullableBusinessEventDetailType) Set(val *BusinessEventDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessEventDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessEventDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessEventDetailType(val *BusinessEventDetailType) *NullableBusinessEventDetailType {
	return &NullableBusinessEventDetailType{value: val, isSet: true}
}

func (v NullableBusinessEventDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessEventDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


