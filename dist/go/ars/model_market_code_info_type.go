/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtorsâ€™ accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the MarketCodeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketCodeInfoType{}

// MarketCodeInfoType struct for MarketCodeInfoType
type MarketCodeInfoType struct {
	MarketCode *string `json:"marketCode,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	MarketGroup *string `json:"marketGroup,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewMarketCodeInfoType instantiates a new MarketCodeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketCodeInfoType() *MarketCodeInfoType {
	this := MarketCodeInfoType{}
	return &this
}

// NewMarketCodeInfoTypeWithDefaults instantiates a new MarketCodeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketCodeInfoTypeWithDefaults() *MarketCodeInfoType {
	this := MarketCodeInfoType{}
	return &this
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *MarketCodeInfoType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketCodeInfoType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *MarketCodeInfoType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *MarketCodeInfoType) SetMarketCode(v string) {
	o.MarketCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MarketCodeInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketCodeInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MarketCodeInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MarketCodeInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMarketGroup returns the MarketGroup field value if set, zero value otherwise.
func (o *MarketCodeInfoType) GetMarketGroup() string {
	if o == nil || IsNil(o.MarketGroup) {
		var ret string
		return ret
	}
	return *o.MarketGroup
}

// GetMarketGroupOk returns a tuple with the MarketGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketCodeInfoType) GetMarketGroupOk() (*string, bool) {
	if o == nil || IsNil(o.MarketGroup) {
		return nil, false
	}
	return o.MarketGroup, true
}

// HasMarketGroup returns a boolean if a field has been set.
func (o *MarketCodeInfoType) HasMarketGroup() bool {
	if o != nil && !IsNil(o.MarketGroup) {
		return true
	}

	return false
}

// SetMarketGroup gets a reference to the given string and assigns it to the MarketGroup field.
func (o *MarketCodeInfoType) SetMarketGroup(v string) {
	o.MarketGroup = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MarketCodeInfoType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketCodeInfoType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MarketCodeInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MarketCodeInfoType) SetDescription(v string) {
	o.Description = &v
}

func (o MarketCodeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketCodeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MarketGroup) {
		toSerialize["marketGroup"] = o.MarketGroup
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableMarketCodeInfoType struct {
	value *MarketCodeInfoType
	isSet bool
}

func (v NullableMarketCodeInfoType) Get() *MarketCodeInfoType {
	return v.value
}

func (v *NullableMarketCodeInfoType) Set(val *MarketCodeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketCodeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketCodeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketCodeInfoType(val *MarketCodeInfoType) *NullableMarketCodeInfoType {
	return &NullableMarketCodeInfoType{value: val, isSet: true}
}

func (v NullableMarketCodeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketCodeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


