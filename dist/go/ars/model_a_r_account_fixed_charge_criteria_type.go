/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ARAccountFixedChargeCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARAccountFixedChargeCriteriaType{}

// ARAccountFixedChargeCriteriaType The traces on the AR Account.
type ARAccountFixedChargeCriteriaType struct {
	Schedule *FixedChargeScheduleType `json:"schedule,omitempty"`
	Charge *FixedChargeDetailType `json:"charge,omitempty"`
	// URL that identifies the location associated with the record identified by the UniqueID.
	Url *string `json:"url,omitempty"`
	// A reference to the type of object defined by the UniqueID element.
	Type *string `json:"type,omitempty"`
	// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
	Instance *string `json:"instance,omitempty"`
	// Used to identify the source of the identifier (e.g., IATA, ABTA).
	IdContext *string `json:"idContext,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Additional identifying value assigned by the creating system.
	IdExtension *int32 `json:"idExtension,omitempty"`
	// The resort where the AR Account exists.
	HotelId *string `json:"hotelId,omitempty"`
	AccountId *UniqueIDType `json:"accountId,omitempty"`
}

// NewARAccountFixedChargeCriteriaType instantiates a new ARAccountFixedChargeCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARAccountFixedChargeCriteriaType() *ARAccountFixedChargeCriteriaType {
	this := ARAccountFixedChargeCriteriaType{}
	return &this
}

// NewARAccountFixedChargeCriteriaTypeWithDefaults instantiates a new ARAccountFixedChargeCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARAccountFixedChargeCriteriaTypeWithDefaults() *ARAccountFixedChargeCriteriaType {
	this := ARAccountFixedChargeCriteriaType{}
	return &this
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetSchedule() FixedChargeScheduleType {
	if o == nil || IsNil(o.Schedule) {
		var ret FixedChargeScheduleType
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetScheduleOk() (*FixedChargeScheduleType, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given FixedChargeScheduleType and assigns it to the Schedule field.
func (o *ARAccountFixedChargeCriteriaType) SetSchedule(v FixedChargeScheduleType) {
	o.Schedule = &v
}

// GetCharge returns the Charge field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetCharge() FixedChargeDetailType {
	if o == nil || IsNil(o.Charge) {
		var ret FixedChargeDetailType
		return ret
	}
	return *o.Charge
}

// GetChargeOk returns a tuple with the Charge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetChargeOk() (*FixedChargeDetailType, bool) {
	if o == nil || IsNil(o.Charge) {
		return nil, false
	}
	return o.Charge, true
}

// HasCharge returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasCharge() bool {
	if o != nil && !IsNil(o.Charge) {
		return true
	}

	return false
}

// SetCharge gets a reference to the given FixedChargeDetailType and assigns it to the Charge field.
func (o *ARAccountFixedChargeCriteriaType) SetCharge(v FixedChargeDetailType) {
	o.Charge = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ARAccountFixedChargeCriteriaType) SetUrl(v string) {
	o.Url = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ARAccountFixedChargeCriteriaType) SetType(v string) {
	o.Type = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *ARAccountFixedChargeCriteriaType) SetInstance(v string) {
	o.Instance = &v
}

// GetIdContext returns the IdContext field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetIdContext() string {
	if o == nil || IsNil(o.IdContext) {
		var ret string
		return ret
	}
	return *o.IdContext
}

// GetIdContextOk returns a tuple with the IdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetIdContextOk() (*string, bool) {
	if o == nil || IsNil(o.IdContext) {
		return nil, false
	}
	return o.IdContext, true
}

// HasIdContext returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasIdContext() bool {
	if o != nil && !IsNil(o.IdContext) {
		return true
	}

	return false
}

// SetIdContext gets a reference to the given string and assigns it to the IdContext field.
func (o *ARAccountFixedChargeCriteriaType) SetIdContext(v string) {
	o.IdContext = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ARAccountFixedChargeCriteriaType) SetId(v string) {
	o.Id = &v
}

// GetIdExtension returns the IdExtension field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetIdExtension() int32 {
	if o == nil || IsNil(o.IdExtension) {
		var ret int32
		return ret
	}
	return *o.IdExtension
}

// GetIdExtensionOk returns a tuple with the IdExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetIdExtensionOk() (*int32, bool) {
	if o == nil || IsNil(o.IdExtension) {
		return nil, false
	}
	return o.IdExtension, true
}

// HasIdExtension returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasIdExtension() bool {
	if o != nil && !IsNil(o.IdExtension) {
		return true
	}

	return false
}

// SetIdExtension gets a reference to the given int32 and assigns it to the IdExtension field.
func (o *ARAccountFixedChargeCriteriaType) SetIdExtension(v int32) {
	o.IdExtension = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ARAccountFixedChargeCriteriaType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ARAccountFixedChargeCriteriaType) GetAccountId() UniqueIDType {
	if o == nil || IsNil(o.AccountId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARAccountFixedChargeCriteriaType) GetAccountIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ARAccountFixedChargeCriteriaType) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given UniqueIDType and assigns it to the AccountId field.
func (o *ARAccountFixedChargeCriteriaType) SetAccountId(v UniqueIDType) {
	o.AccountId = &v
}

func (o ARAccountFixedChargeCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARAccountFixedChargeCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Charge) {
		toSerialize["charge"] = o.Charge
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.IdContext) {
		toSerialize["idContext"] = o.IdContext
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdExtension) {
		toSerialize["idExtension"] = o.IdExtension
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	return toSerialize, nil
}

type NullableARAccountFixedChargeCriteriaType struct {
	value *ARAccountFixedChargeCriteriaType
	isSet bool
}

func (v NullableARAccountFixedChargeCriteriaType) Get() *ARAccountFixedChargeCriteriaType {
	return v.value
}

func (v *NullableARAccountFixedChargeCriteriaType) Set(val *ARAccountFixedChargeCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableARAccountFixedChargeCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableARAccountFixedChargeCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARAccountFixedChargeCriteriaType(val *ARAccountFixedChargeCriteriaType) *NullableARAccountFixedChargeCriteriaType {
	return &NullableARAccountFixedChargeCriteriaType{value: val, isSet: true}
}

func (v NullableARAccountFixedChargeCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARAccountFixedChargeCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


