/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the TransferARCreditCardPaymentsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransferARCreditCardPaymentsType{}

// TransferARCreditCardPaymentsType Transfer AR Credit Card payment information.
type TransferARCreditCardPaymentsType struct {
	// Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	AccountId *UniqueIDType `json:"accountId,omitempty"`
	TotalAmount *CurrencyAmountType `json:"totalAmount,omitempty"`
	// Reference Text for the payment.
	Reference *string `json:"reference,omitempty"`
	// Transaction number of the payments to be transfered.
	TransactionNo []float32 `json:"transactionNo,omitempty"`
	// The Cashier ID of the Cashier who is currently processing the transaction(s).
	CashierId *float32 `json:"cashierId,omitempty"`
}

// NewTransferARCreditCardPaymentsType instantiates a new TransferARCreditCardPaymentsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferARCreditCardPaymentsType() *TransferARCreditCardPaymentsType {
	this := TransferARCreditCardPaymentsType{}
	return &this
}

// NewTransferARCreditCardPaymentsTypeWithDefaults instantiates a new TransferARCreditCardPaymentsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferARCreditCardPaymentsTypeWithDefaults() *TransferARCreditCardPaymentsType {
	this := TransferARCreditCardPaymentsType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *TransferARCreditCardPaymentsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferARCreditCardPaymentsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *TransferARCreditCardPaymentsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *TransferARCreditCardPaymentsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *TransferARCreditCardPaymentsType) GetAccountId() UniqueIDType {
	if o == nil || IsNil(o.AccountId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferARCreditCardPaymentsType) GetAccountIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *TransferARCreditCardPaymentsType) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given UniqueIDType and assigns it to the AccountId field.
func (o *TransferARCreditCardPaymentsType) SetAccountId(v UniqueIDType) {
	o.AccountId = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *TransferARCreditCardPaymentsType) GetTotalAmount() CurrencyAmountType {
	if o == nil || IsNil(o.TotalAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferARCreditCardPaymentsType) GetTotalAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *TransferARCreditCardPaymentsType) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given CurrencyAmountType and assigns it to the TotalAmount field.
func (o *TransferARCreditCardPaymentsType) SetTotalAmount(v CurrencyAmountType) {
	o.TotalAmount = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransferARCreditCardPaymentsType) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferARCreditCardPaymentsType) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransferARCreditCardPaymentsType) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransferARCreditCardPaymentsType) SetReference(v string) {
	o.Reference = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *TransferARCreditCardPaymentsType) GetTransactionNo() []float32 {
	if o == nil || IsNil(o.TransactionNo) {
		var ret []float32
		return ret
	}
	return o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferARCreditCardPaymentsType) GetTransactionNoOk() ([]float32, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *TransferARCreditCardPaymentsType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given []float32 and assigns it to the TransactionNo field.
func (o *TransferARCreditCardPaymentsType) SetTransactionNo(v []float32) {
	o.TransactionNo = v
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *TransferARCreditCardPaymentsType) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransferARCreditCardPaymentsType) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *TransferARCreditCardPaymentsType) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *TransferARCreditCardPaymentsType) SetCashierId(v float32) {
	o.CashierId = &v
}

func (o TransferARCreditCardPaymentsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransferARCreditCardPaymentsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	return toSerialize, nil
}

type NullableTransferARCreditCardPaymentsType struct {
	value *TransferARCreditCardPaymentsType
	isSet bool
}

func (v NullableTransferARCreditCardPaymentsType) Get() *TransferARCreditCardPaymentsType {
	return v.value
}

func (v *NullableTransferARCreditCardPaymentsType) Set(val *TransferARCreditCardPaymentsType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferARCreditCardPaymentsType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferARCreditCardPaymentsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferARCreditCardPaymentsType(val *TransferARCreditCardPaymentsType) *NullableTransferARCreditCardPaymentsType {
	return &NullableTransferARCreditCardPaymentsType{value: val, isSet: true}
}

func (v NullableTransferARCreditCardPaymentsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferARCreditCardPaymentsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


