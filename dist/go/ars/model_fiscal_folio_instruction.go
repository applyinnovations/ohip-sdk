/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
	"fmt"
)

// FiscalFolioInstruction Action to generate Offline folio when no reponse is received from fiscal service.
type FiscalFolioInstruction string

// List of fiscalFolioInstruction
const (
	FISCALFOLIOINSTRUCTION_RETRY FiscalFolioInstruction = "Retry"
	FISCALFOLIOINSTRUCTION_NEW FiscalFolioInstruction = "New"
	FISCALFOLIOINSTRUCTION_VOID FiscalFolioInstruction = "Void"
	FISCALFOLIOINSTRUCTION_OFFLINE FiscalFolioInstruction = "Offline"
)

// All allowed values of FiscalFolioInstruction enum
var AllowedFiscalFolioInstructionEnumValues = []FiscalFolioInstruction{
	"Retry",
	"New",
	"Void",
	"Offline",
}

func (v *FiscalFolioInstruction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FiscalFolioInstruction(value)
	for _, existing := range AllowedFiscalFolioInstructionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FiscalFolioInstruction", value)
}

// NewFiscalFolioInstructionFromValue returns a pointer to a valid FiscalFolioInstruction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFiscalFolioInstructionFromValue(v string) (*FiscalFolioInstruction, error) {
	ev := FiscalFolioInstruction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FiscalFolioInstruction: valid values are %v", v, AllowedFiscalFolioInstructionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FiscalFolioInstruction) IsValid() bool {
	for _, existing := range AllowedFiscalFolioInstructionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to fiscalFolioInstruction value
func (v FiscalFolioInstruction) Ptr() *FiscalFolioInstruction {
	return &v
}

type NullableFiscalFolioInstruction struct {
	value *FiscalFolioInstruction
	isSet bool
}

func (v NullableFiscalFolioInstruction) Get() *FiscalFolioInstruction {
	return v.value
}

func (v *NullableFiscalFolioInstruction) Set(val *FiscalFolioInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalFolioInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalFolioInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalFolioInstruction(val *FiscalFolioInstruction) *NullableFiscalFolioInstruction {
	return &NullableFiscalFolioInstruction{value: val, isSet: true}
}

func (v NullableFiscalFolioInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalFolioInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

