/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
	"fmt"
)

// ARApplyType Apply payment Selectively to the Invoices included.
type ARApplyType string

// List of aRApplyType
const (
	ARAPPLYTYPE_DEFAULT ARApplyType = "Default"
	ARAPPLYTYPE_OLDEST_INVOICE ARApplyType = "OldestInvoice"
	ARAPPLYTYPE_APPLY_TO_INVOICES ARApplyType = "ApplyToInvoices"
	ARAPPLYTYPE_APPLY_SELECTIVELY_TO_INVOICES ARApplyType = "ApplySelectivelyToInvoices"
)

// All allowed values of ARApplyType enum
var AllowedARApplyTypeEnumValues = []ARApplyType{
	"Default",
	"OldestInvoice",
	"ApplyToInvoices",
	"ApplySelectivelyToInvoices",
}

func (v *ARApplyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ARApplyType(value)
	for _, existing := range AllowedARApplyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ARApplyType", value)
}

// NewARApplyTypeFromValue returns a pointer to a valid ARApplyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewARApplyTypeFromValue(v string) (*ARApplyType, error) {
	ev := ARApplyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ARApplyType: valid values are %v", v, AllowedARApplyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ARApplyType) IsValid() bool {
	for _, existing := range AllowedARApplyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to aRApplyType value
func (v ARApplyType) Ptr() *ARApplyType {
	return &v
}

type NullableARApplyType struct {
	value *ARApplyType
	isSet bool
}

func (v NullableARApplyType) Get() *ARApplyType {
	return v.value
}

func (v *NullableARApplyType) Set(val *ARApplyType) {
	v.value = val
	v.isSet = true
}

func (v NullableARApplyType) IsSet() bool {
	return v.isSet
}

func (v *NullableARApplyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARApplyType(val *ARApplyType) *NullableARApplyType {
	return &NullableARApplyType{value: val, isSet: true}
}

func (v NullableARApplyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARApplyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

