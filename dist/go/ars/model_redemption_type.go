/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the RedemptionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedemptionType{}

// RedemptionType Redemption information.
type RedemptionType struct {
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	// Approval Code of the Complimentary Bucket Redemption.
	ApprovalCode *string `json:"approvalCode,omitempty"`
	AvailableAmount *CurrencyAmountType `json:"availableAmount,omitempty"`
	// The associated redemption code.
	Code *string `json:"code,omitempty"`
	// Description of the Complimentary Bucket Redemption.
	Description *string `json:"description,omitempty"`
	// Additional information regarding the redemption.
	Supplement *string `json:"supplement,omitempty"`
	// Transaction code of the Complimentary Bucket Redemption.
	TransactionCode *string `json:"transactionCode,omitempty"`
	// Transaction Number of the Complimentary Bucket Redemption.
	TransactionNo *float32 `json:"transactionNo,omitempty"`
}

// NewRedemptionType instantiates a new RedemptionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedemptionType() *RedemptionType {
	this := RedemptionType{}
	return &this
}

// NewRedemptionTypeWithDefaults instantiates a new RedemptionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedemptionTypeWithDefaults() *RedemptionType {
	this := RedemptionType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *RedemptionType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *RedemptionType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *RedemptionType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetApprovalCode returns the ApprovalCode field value if set, zero value otherwise.
func (o *RedemptionType) GetApprovalCode() string {
	if o == nil || IsNil(o.ApprovalCode) {
		var ret string
		return ret
	}
	return *o.ApprovalCode
}

// GetApprovalCodeOk returns a tuple with the ApprovalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetApprovalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalCode) {
		return nil, false
	}
	return o.ApprovalCode, true
}

// HasApprovalCode returns a boolean if a field has been set.
func (o *RedemptionType) HasApprovalCode() bool {
	if o != nil && !IsNil(o.ApprovalCode) {
		return true
	}

	return false
}

// SetApprovalCode gets a reference to the given string and assigns it to the ApprovalCode field.
func (o *RedemptionType) SetApprovalCode(v string) {
	o.ApprovalCode = &v
}

// GetAvailableAmount returns the AvailableAmount field value if set, zero value otherwise.
func (o *RedemptionType) GetAvailableAmount() CurrencyAmountType {
	if o == nil || IsNil(o.AvailableAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AvailableAmount
}

// GetAvailableAmountOk returns a tuple with the AvailableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetAvailableAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AvailableAmount) {
		return nil, false
	}
	return o.AvailableAmount, true
}

// HasAvailableAmount returns a boolean if a field has been set.
func (o *RedemptionType) HasAvailableAmount() bool {
	if o != nil && !IsNil(o.AvailableAmount) {
		return true
	}

	return false
}

// SetAvailableAmount gets a reference to the given CurrencyAmountType and assigns it to the AvailableAmount field.
func (o *RedemptionType) SetAvailableAmount(v CurrencyAmountType) {
	o.AvailableAmount = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RedemptionType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RedemptionType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RedemptionType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RedemptionType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RedemptionType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RedemptionType) SetDescription(v string) {
	o.Description = &v
}

// GetSupplement returns the Supplement field value if set, zero value otherwise.
func (o *RedemptionType) GetSupplement() string {
	if o == nil || IsNil(o.Supplement) {
		var ret string
		return ret
	}
	return *o.Supplement
}

// GetSupplementOk returns a tuple with the Supplement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetSupplementOk() (*string, bool) {
	if o == nil || IsNil(o.Supplement) {
		return nil, false
	}
	return o.Supplement, true
}

// HasSupplement returns a boolean if a field has been set.
func (o *RedemptionType) HasSupplement() bool {
	if o != nil && !IsNil(o.Supplement) {
		return true
	}

	return false
}

// SetSupplement gets a reference to the given string and assigns it to the Supplement field.
func (o *RedemptionType) SetSupplement(v string) {
	o.Supplement = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *RedemptionType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *RedemptionType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *RedemptionType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionNo returns the TransactionNo field value if set, zero value otherwise.
func (o *RedemptionType) GetTransactionNo() float32 {
	if o == nil || IsNil(o.TransactionNo) {
		var ret float32
		return ret
	}
	return *o.TransactionNo
}

// GetTransactionNoOk returns a tuple with the TransactionNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedemptionType) GetTransactionNoOk() (*float32, bool) {
	if o == nil || IsNil(o.TransactionNo) {
		return nil, false
	}
	return o.TransactionNo, true
}

// HasTransactionNo returns a boolean if a field has been set.
func (o *RedemptionType) HasTransactionNo() bool {
	if o != nil && !IsNil(o.TransactionNo) {
		return true
	}

	return false
}

// SetTransactionNo gets a reference to the given float32 and assigns it to the TransactionNo field.
func (o *RedemptionType) SetTransactionNo(v float32) {
	o.TransactionNo = &v
}

func (o RedemptionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedemptionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.ApprovalCode) {
		toSerialize["approvalCode"] = o.ApprovalCode
	}
	if !IsNil(o.AvailableAmount) {
		toSerialize["availableAmount"] = o.AvailableAmount
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Supplement) {
		toSerialize["supplement"] = o.Supplement
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionNo) {
		toSerialize["transactionNo"] = o.TransactionNo
	}
	return toSerialize, nil
}

type NullableRedemptionType struct {
	value *RedemptionType
	isSet bool
}

func (v NullableRedemptionType) Get() *RedemptionType {
	return v.value
}

func (v *NullableRedemptionType) Set(val *RedemptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRedemptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRedemptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedemptionType(val *RedemptionType) *NullableRedemptionType {
	return &NullableRedemptionType{value: val, isSet: true}
}

func (v NullableRedemptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedemptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


