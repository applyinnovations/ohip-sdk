/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ARStatementType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARStatementType{}

// ARStatementType Details about an AR Statement.
type ARStatementType struct {
	// Property where the Account belongs.
	HotelId *string `json:"hotelId,omitempty"`
	Balance *CurrencyAmountType `json:"balance,omitempty"`
	AccountId *UniqueIDType `json:"accountId,omitempty"`
	// A collection of AR Invoices.
	Invoices []ARInvoiceType `json:"invoices,omitempty"`
	// Statement Number for the Statement, when the functionality for Numbering is ON.
	StatementNo *int32 `json:"statementNo,omitempty"`
	// Internal Report Sequence Number for the which is used to mark statement invoices
	ReportSeqNo *int32 `json:"reportSeqNo,omitempty"`
	// Flag to indicate if Folios are to be printed along with the Statement.
	InclFolios *bool `json:"inclFolios,omitempty"`
	// The Statement Report name which should be used for printing.
	StatementName *string `json:"statementName,omitempty"`
	Type *StatementType `json:"type,omitempty"`
	// The Statement Report name which should be used for printing.
	ReportFileName *string `json:"reportFileName,omitempty"`
}

// NewARStatementType instantiates a new ARStatementType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARStatementType() *ARStatementType {
	this := ARStatementType{}
	return &this
}

// NewARStatementTypeWithDefaults instantiates a new ARStatementType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARStatementTypeWithDefaults() *ARStatementType {
	this := ARStatementType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ARStatementType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ARStatementType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ARStatementType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *ARStatementType) GetBalance() CurrencyAmountType {
	if o == nil || IsNil(o.Balance) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetBalanceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *ARStatementType) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given CurrencyAmountType and assigns it to the Balance field.
func (o *ARStatementType) SetBalance(v CurrencyAmountType) {
	o.Balance = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ARStatementType) GetAccountId() UniqueIDType {
	if o == nil || IsNil(o.AccountId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetAccountIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ARStatementType) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given UniqueIDType and assigns it to the AccountId field.
func (o *ARStatementType) SetAccountId(v UniqueIDType) {
	o.AccountId = &v
}

// GetInvoices returns the Invoices field value if set, zero value otherwise.
func (o *ARStatementType) GetInvoices() []ARInvoiceType {
	if o == nil || IsNil(o.Invoices) {
		var ret []ARInvoiceType
		return ret
	}
	return o.Invoices
}

// GetInvoicesOk returns a tuple with the Invoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetInvoicesOk() ([]ARInvoiceType, bool) {
	if o == nil || IsNil(o.Invoices) {
		return nil, false
	}
	return o.Invoices, true
}

// HasInvoices returns a boolean if a field has been set.
func (o *ARStatementType) HasInvoices() bool {
	if o != nil && !IsNil(o.Invoices) {
		return true
	}

	return false
}

// SetInvoices gets a reference to the given []ARInvoiceType and assigns it to the Invoices field.
func (o *ARStatementType) SetInvoices(v []ARInvoiceType) {
	o.Invoices = v
}

// GetStatementNo returns the StatementNo field value if set, zero value otherwise.
func (o *ARStatementType) GetStatementNo() int32 {
	if o == nil || IsNil(o.StatementNo) {
		var ret int32
		return ret
	}
	return *o.StatementNo
}

// GetStatementNoOk returns a tuple with the StatementNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetStatementNoOk() (*int32, bool) {
	if o == nil || IsNil(o.StatementNo) {
		return nil, false
	}
	return o.StatementNo, true
}

// HasStatementNo returns a boolean if a field has been set.
func (o *ARStatementType) HasStatementNo() bool {
	if o != nil && !IsNil(o.StatementNo) {
		return true
	}

	return false
}

// SetStatementNo gets a reference to the given int32 and assigns it to the StatementNo field.
func (o *ARStatementType) SetStatementNo(v int32) {
	o.StatementNo = &v
}

// GetReportSeqNo returns the ReportSeqNo field value if set, zero value otherwise.
func (o *ARStatementType) GetReportSeqNo() int32 {
	if o == nil || IsNil(o.ReportSeqNo) {
		var ret int32
		return ret
	}
	return *o.ReportSeqNo
}

// GetReportSeqNoOk returns a tuple with the ReportSeqNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetReportSeqNoOk() (*int32, bool) {
	if o == nil || IsNil(o.ReportSeqNo) {
		return nil, false
	}
	return o.ReportSeqNo, true
}

// HasReportSeqNo returns a boolean if a field has been set.
func (o *ARStatementType) HasReportSeqNo() bool {
	if o != nil && !IsNil(o.ReportSeqNo) {
		return true
	}

	return false
}

// SetReportSeqNo gets a reference to the given int32 and assigns it to the ReportSeqNo field.
func (o *ARStatementType) SetReportSeqNo(v int32) {
	o.ReportSeqNo = &v
}

// GetInclFolios returns the InclFolios field value if set, zero value otherwise.
func (o *ARStatementType) GetInclFolios() bool {
	if o == nil || IsNil(o.InclFolios) {
		var ret bool
		return ret
	}
	return *o.InclFolios
}

// GetInclFoliosOk returns a tuple with the InclFolios field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetInclFoliosOk() (*bool, bool) {
	if o == nil || IsNil(o.InclFolios) {
		return nil, false
	}
	return o.InclFolios, true
}

// HasInclFolios returns a boolean if a field has been set.
func (o *ARStatementType) HasInclFolios() bool {
	if o != nil && !IsNil(o.InclFolios) {
		return true
	}

	return false
}

// SetInclFolios gets a reference to the given bool and assigns it to the InclFolios field.
func (o *ARStatementType) SetInclFolios(v bool) {
	o.InclFolios = &v
}

// GetStatementName returns the StatementName field value if set, zero value otherwise.
func (o *ARStatementType) GetStatementName() string {
	if o == nil || IsNil(o.StatementName) {
		var ret string
		return ret
	}
	return *o.StatementName
}

// GetStatementNameOk returns a tuple with the StatementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetStatementNameOk() (*string, bool) {
	if o == nil || IsNil(o.StatementName) {
		return nil, false
	}
	return o.StatementName, true
}

// HasStatementName returns a boolean if a field has been set.
func (o *ARStatementType) HasStatementName() bool {
	if o != nil && !IsNil(o.StatementName) {
		return true
	}

	return false
}

// SetStatementName gets a reference to the given string and assigns it to the StatementName field.
func (o *ARStatementType) SetStatementName(v string) {
	o.StatementName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ARStatementType) GetType() StatementType {
	if o == nil || IsNil(o.Type) {
		var ret StatementType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetTypeOk() (*StatementType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ARStatementType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given StatementType and assigns it to the Type field.
func (o *ARStatementType) SetType(v StatementType) {
	o.Type = &v
}

// GetReportFileName returns the ReportFileName field value if set, zero value otherwise.
func (o *ARStatementType) GetReportFileName() string {
	if o == nil || IsNil(o.ReportFileName) {
		var ret string
		return ret
	}
	return *o.ReportFileName
}

// GetReportFileNameOk returns a tuple with the ReportFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARStatementType) GetReportFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportFileName) {
		return nil, false
	}
	return o.ReportFileName, true
}

// HasReportFileName returns a boolean if a field has been set.
func (o *ARStatementType) HasReportFileName() bool {
	if o != nil && !IsNil(o.ReportFileName) {
		return true
	}

	return false
}

// SetReportFileName gets a reference to the given string and assigns it to the ReportFileName field.
func (o *ARStatementType) SetReportFileName(v string) {
	o.ReportFileName = &v
}

func (o ARStatementType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARStatementType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.Invoices) {
		toSerialize["invoices"] = o.Invoices
	}
	if !IsNil(o.StatementNo) {
		toSerialize["statementNo"] = o.StatementNo
	}
	if !IsNil(o.ReportSeqNo) {
		toSerialize["reportSeqNo"] = o.ReportSeqNo
	}
	if !IsNil(o.InclFolios) {
		toSerialize["inclFolios"] = o.InclFolios
	}
	if !IsNil(o.StatementName) {
		toSerialize["statementName"] = o.StatementName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ReportFileName) {
		toSerialize["reportFileName"] = o.ReportFileName
	}
	return toSerialize, nil
}

type NullableARStatementType struct {
	value *ARStatementType
	isSet bool
}

func (v NullableARStatementType) Get() *ARStatementType {
	return v.value
}

func (v *NullableARStatementType) Set(val *ARStatementType) {
	v.value = val
	v.isSet = true
}

func (v NullableARStatementType) IsSet() bool {
	return v.isSet
}

func (v *NullableARStatementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARStatementType(val *ARStatementType) *NullableARStatementType {
	return &NullableARStatementType{value: val, isSet: true}
}

func (v NullableARStatementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARStatementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


