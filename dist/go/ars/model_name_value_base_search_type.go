/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the NameValueBaseSearchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NameValueBaseSearchType{}

// NameValueBaseSearchType Contains name value information search criteria.
type NameValueBaseSearchType struct {
	ConfigName *CustomNameValueConfigType `json:"configName,omitempty"`
	// Specifies the hotel code.
	HotelId *string `json:"hotelId,omitempty"`
	ModuleName *NameValueModuleType `json:"moduleName,omitempty"`
	NameValueType *NameValueTypeType `json:"nameValueType,omitempty"`
	Sequence *UniqueIDType `json:"sequence,omitempty"`
}

// NewNameValueBaseSearchType instantiates a new NameValueBaseSearchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNameValueBaseSearchType() *NameValueBaseSearchType {
	this := NameValueBaseSearchType{}
	return &this
}

// NewNameValueBaseSearchTypeWithDefaults instantiates a new NameValueBaseSearchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNameValueBaseSearchTypeWithDefaults() *NameValueBaseSearchType {
	this := NameValueBaseSearchType{}
	return &this
}

// GetConfigName returns the ConfigName field value if set, zero value otherwise.
func (o *NameValueBaseSearchType) GetConfigName() CustomNameValueConfigType {
	if o == nil || IsNil(o.ConfigName) {
		var ret CustomNameValueConfigType
		return ret
	}
	return *o.ConfigName
}

// GetConfigNameOk returns a tuple with the ConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueBaseSearchType) GetConfigNameOk() (*CustomNameValueConfigType, bool) {
	if o == nil || IsNil(o.ConfigName) {
		return nil, false
	}
	return o.ConfigName, true
}

// HasConfigName returns a boolean if a field has been set.
func (o *NameValueBaseSearchType) HasConfigName() bool {
	if o != nil && !IsNil(o.ConfigName) {
		return true
	}

	return false
}

// SetConfigName gets a reference to the given CustomNameValueConfigType and assigns it to the ConfigName field.
func (o *NameValueBaseSearchType) SetConfigName(v CustomNameValueConfigType) {
	o.ConfigName = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *NameValueBaseSearchType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueBaseSearchType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *NameValueBaseSearchType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *NameValueBaseSearchType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetModuleName returns the ModuleName field value if set, zero value otherwise.
func (o *NameValueBaseSearchType) GetModuleName() NameValueModuleType {
	if o == nil || IsNil(o.ModuleName) {
		var ret NameValueModuleType
		return ret
	}
	return *o.ModuleName
}

// GetModuleNameOk returns a tuple with the ModuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueBaseSearchType) GetModuleNameOk() (*NameValueModuleType, bool) {
	if o == nil || IsNil(o.ModuleName) {
		return nil, false
	}
	return o.ModuleName, true
}

// HasModuleName returns a boolean if a field has been set.
func (o *NameValueBaseSearchType) HasModuleName() bool {
	if o != nil && !IsNil(o.ModuleName) {
		return true
	}

	return false
}

// SetModuleName gets a reference to the given NameValueModuleType and assigns it to the ModuleName field.
func (o *NameValueBaseSearchType) SetModuleName(v NameValueModuleType) {
	o.ModuleName = &v
}

// GetNameValueType returns the NameValueType field value if set, zero value otherwise.
func (o *NameValueBaseSearchType) GetNameValueType() NameValueTypeType {
	if o == nil || IsNil(o.NameValueType) {
		var ret NameValueTypeType
		return ret
	}
	return *o.NameValueType
}

// GetNameValueTypeOk returns a tuple with the NameValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueBaseSearchType) GetNameValueTypeOk() (*NameValueTypeType, bool) {
	if o == nil || IsNil(o.NameValueType) {
		return nil, false
	}
	return o.NameValueType, true
}

// HasNameValueType returns a boolean if a field has been set.
func (o *NameValueBaseSearchType) HasNameValueType() bool {
	if o != nil && !IsNil(o.NameValueType) {
		return true
	}

	return false
}

// SetNameValueType gets a reference to the given NameValueTypeType and assigns it to the NameValueType field.
func (o *NameValueBaseSearchType) SetNameValueType(v NameValueTypeType) {
	o.NameValueType = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *NameValueBaseSearchType) GetSequence() UniqueIDType {
	if o == nil || IsNil(o.Sequence) {
		var ret UniqueIDType
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NameValueBaseSearchType) GetSequenceOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *NameValueBaseSearchType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given UniqueIDType and assigns it to the Sequence field.
func (o *NameValueBaseSearchType) SetSequence(v UniqueIDType) {
	o.Sequence = &v
}

func (o NameValueBaseSearchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NameValueBaseSearchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigName) {
		toSerialize["configName"] = o.ConfigName
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ModuleName) {
		toSerialize["moduleName"] = o.ModuleName
	}
	if !IsNil(o.NameValueType) {
		toSerialize["nameValueType"] = o.NameValueType
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableNameValueBaseSearchType struct {
	value *NameValueBaseSearchType
	isSet bool
}

func (v NullableNameValueBaseSearchType) Get() *NameValueBaseSearchType {
	return v.value
}

func (v *NullableNameValueBaseSearchType) Set(val *NameValueBaseSearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableNameValueBaseSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableNameValueBaseSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNameValueBaseSearchType(val *NameValueBaseSearchType) *NullableNameValueBaseSearchType {
	return &NullableNameValueBaseSearchType{value: val, isSet: true}
}

func (v NullableNameValueBaseSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNameValueBaseSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


