/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ARCreditCardPaymentsInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARCreditCardPaymentsInfoType{}

// ARCreditCardPaymentsInfoType Collection of AR Credit Card payments Details.
type ARCreditCardPaymentsInfoType struct {
	// AR Credit Card Payments info .
	ARCreditCardPayments []ARCreditCardPaymentInfoType `json:"aRCreditCardPayments,omitempty"`
	// Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewARCreditCardPaymentsInfoType instantiates a new ARCreditCardPaymentsInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARCreditCardPaymentsInfoType() *ARCreditCardPaymentsInfoType {
	this := ARCreditCardPaymentsInfoType{}
	return &this
}

// NewARCreditCardPaymentsInfoTypeWithDefaults instantiates a new ARCreditCardPaymentsInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARCreditCardPaymentsInfoTypeWithDefaults() *ARCreditCardPaymentsInfoType {
	this := ARCreditCardPaymentsInfoType{}
	return &this
}

// GetARCreditCardPayments returns the ARCreditCardPayments field value if set, zero value otherwise.
func (o *ARCreditCardPaymentsInfoType) GetARCreditCardPayments() []ARCreditCardPaymentInfoType {
	if o == nil || IsNil(o.ARCreditCardPayments) {
		var ret []ARCreditCardPaymentInfoType
		return ret
	}
	return o.ARCreditCardPayments
}

// GetARCreditCardPaymentsOk returns a tuple with the ARCreditCardPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARCreditCardPaymentsInfoType) GetARCreditCardPaymentsOk() ([]ARCreditCardPaymentInfoType, bool) {
	if o == nil || IsNil(o.ARCreditCardPayments) {
		return nil, false
	}
	return o.ARCreditCardPayments, true
}

// HasARCreditCardPayments returns a boolean if a field has been set.
func (o *ARCreditCardPaymentsInfoType) HasARCreditCardPayments() bool {
	if o != nil && !IsNil(o.ARCreditCardPayments) {
		return true
	}

	return false
}

// SetARCreditCardPayments gets a reference to the given []ARCreditCardPaymentInfoType and assigns it to the ARCreditCardPayments field.
func (o *ARCreditCardPaymentsInfoType) SetARCreditCardPayments(v []ARCreditCardPaymentInfoType) {
	o.ARCreditCardPayments = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ARCreditCardPaymentsInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARCreditCardPaymentsInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ARCreditCardPaymentsInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ARCreditCardPaymentsInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o ARCreditCardPaymentsInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARCreditCardPaymentsInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ARCreditCardPayments) {
		toSerialize["aRCreditCardPayments"] = o.ARCreditCardPayments
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableARCreditCardPaymentsInfoType struct {
	value *ARCreditCardPaymentsInfoType
	isSet bool
}

func (v NullableARCreditCardPaymentsInfoType) Get() *ARCreditCardPaymentsInfoType {
	return v.value
}

func (v *NullableARCreditCardPaymentsInfoType) Set(val *ARCreditCardPaymentsInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableARCreditCardPaymentsInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableARCreditCardPaymentsInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARCreditCardPaymentsInfoType(val *ARCreditCardPaymentsInfoType) *NullableARCreditCardPaymentsInfoType {
	return &NullableARCreditCardPaymentsInfoType{value: val, isSet: true}
}

func (v NullableARCreditCardPaymentsInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARCreditCardPaymentsInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


