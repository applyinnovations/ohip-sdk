/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ARProfileYearViewInfoTypeHotelInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARProfileYearViewInfoTypeHotelInner{}

// ARProfileYearViewInfoTypeHotelInner struct for ARProfileYearViewInfoTypeHotelInner
type ARProfileYearViewInfoTypeHotelInner struct {
	// Information regarding the AR Account.
	Account []ARAccountType `json:"account,omitempty"`
	// Property Code for the Year Veiw information.
	HotelId *string `json:"hotelId,omitempty"`
	TotalHotelYearView *ARYearViewInfoType `json:"totalHotelYearView,omitempty"`
}

// NewARProfileYearViewInfoTypeHotelInner instantiates a new ARProfileYearViewInfoTypeHotelInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARProfileYearViewInfoTypeHotelInner() *ARProfileYearViewInfoTypeHotelInner {
	this := ARProfileYearViewInfoTypeHotelInner{}
	return &this
}

// NewARProfileYearViewInfoTypeHotelInnerWithDefaults instantiates a new ARProfileYearViewInfoTypeHotelInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARProfileYearViewInfoTypeHotelInnerWithDefaults() *ARProfileYearViewInfoTypeHotelInner {
	this := ARProfileYearViewInfoTypeHotelInner{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ARProfileYearViewInfoTypeHotelInner) GetAccount() []ARAccountType {
	if o == nil || IsNil(o.Account) {
		var ret []ARAccountType
		return ret
	}
	return o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARProfileYearViewInfoTypeHotelInner) GetAccountOk() ([]ARAccountType, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ARProfileYearViewInfoTypeHotelInner) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given []ARAccountType and assigns it to the Account field.
func (o *ARProfileYearViewInfoTypeHotelInner) SetAccount(v []ARAccountType) {
	o.Account = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ARProfileYearViewInfoTypeHotelInner) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARProfileYearViewInfoTypeHotelInner) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ARProfileYearViewInfoTypeHotelInner) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ARProfileYearViewInfoTypeHotelInner) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTotalHotelYearView returns the TotalHotelYearView field value if set, zero value otherwise.
func (o *ARProfileYearViewInfoTypeHotelInner) GetTotalHotelYearView() ARYearViewInfoType {
	if o == nil || IsNil(o.TotalHotelYearView) {
		var ret ARYearViewInfoType
		return ret
	}
	return *o.TotalHotelYearView
}

// GetTotalHotelYearViewOk returns a tuple with the TotalHotelYearView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARProfileYearViewInfoTypeHotelInner) GetTotalHotelYearViewOk() (*ARYearViewInfoType, bool) {
	if o == nil || IsNil(o.TotalHotelYearView) {
		return nil, false
	}
	return o.TotalHotelYearView, true
}

// HasTotalHotelYearView returns a boolean if a field has been set.
func (o *ARProfileYearViewInfoTypeHotelInner) HasTotalHotelYearView() bool {
	if o != nil && !IsNil(o.TotalHotelYearView) {
		return true
	}

	return false
}

// SetTotalHotelYearView gets a reference to the given ARYearViewInfoType and assigns it to the TotalHotelYearView field.
func (o *ARProfileYearViewInfoTypeHotelInner) SetTotalHotelYearView(v ARYearViewInfoType) {
	o.TotalHotelYearView = &v
}

func (o ARProfileYearViewInfoTypeHotelInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARProfileYearViewInfoTypeHotelInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TotalHotelYearView) {
		toSerialize["totalHotelYearView"] = o.TotalHotelYearView
	}
	return toSerialize, nil
}

type NullableARProfileYearViewInfoTypeHotelInner struct {
	value *ARProfileYearViewInfoTypeHotelInner
	isSet bool
}

func (v NullableARProfileYearViewInfoTypeHotelInner) Get() *ARProfileYearViewInfoTypeHotelInner {
	return v.value
}

func (v *NullableARProfileYearViewInfoTypeHotelInner) Set(val *ARProfileYearViewInfoTypeHotelInner) {
	v.value = val
	v.isSet = true
}

func (v NullableARProfileYearViewInfoTypeHotelInner) IsSet() bool {
	return v.isSet
}

func (v *NullableARProfileYearViewInfoTypeHotelInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARProfileYearViewInfoTypeHotelInner(val *ARProfileYearViewInfoTypeHotelInner) *NullableARProfileYearViewInfoTypeHotelInner {
	return &NullableARProfileYearViewInfoTypeHotelInner{value: val, isSet: true}
}

func (v NullableARProfileYearViewInfoTypeHotelInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARProfileYearViewInfoTypeHotelInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


