/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ARGenerateStatementCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARGenerateStatementCriteriaType{}

// ARGenerateStatementCriteriaType Criteria to process AR Printed Statements - create history and update invoices.
type ARGenerateStatementCriteriaType struct {
	// Details of printed Statements received by Fetch Operation and sent to be printed. Statements type includes report sequence number and report file name.
	Statements []ARStatementType `json:"statements,omitempty"`
	StatementCriteria *ARStatementCriteriaType `json:"statementCriteria,omitempty"`
}

// NewARGenerateStatementCriteriaType instantiates a new ARGenerateStatementCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARGenerateStatementCriteriaType() *ARGenerateStatementCriteriaType {
	this := ARGenerateStatementCriteriaType{}
	return &this
}

// NewARGenerateStatementCriteriaTypeWithDefaults instantiates a new ARGenerateStatementCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARGenerateStatementCriteriaTypeWithDefaults() *ARGenerateStatementCriteriaType {
	this := ARGenerateStatementCriteriaType{}
	return &this
}

// GetStatements returns the Statements field value if set, zero value otherwise.
func (o *ARGenerateStatementCriteriaType) GetStatements() []ARStatementType {
	if o == nil || IsNil(o.Statements) {
		var ret []ARStatementType
		return ret
	}
	return o.Statements
}

// GetStatementsOk returns a tuple with the Statements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARGenerateStatementCriteriaType) GetStatementsOk() ([]ARStatementType, bool) {
	if o == nil || IsNil(o.Statements) {
		return nil, false
	}
	return o.Statements, true
}

// HasStatements returns a boolean if a field has been set.
func (o *ARGenerateStatementCriteriaType) HasStatements() bool {
	if o != nil && !IsNil(o.Statements) {
		return true
	}

	return false
}

// SetStatements gets a reference to the given []ARStatementType and assigns it to the Statements field.
func (o *ARGenerateStatementCriteriaType) SetStatements(v []ARStatementType) {
	o.Statements = v
}

// GetStatementCriteria returns the StatementCriteria field value if set, zero value otherwise.
func (o *ARGenerateStatementCriteriaType) GetStatementCriteria() ARStatementCriteriaType {
	if o == nil || IsNil(o.StatementCriteria) {
		var ret ARStatementCriteriaType
		return ret
	}
	return *o.StatementCriteria
}

// GetStatementCriteriaOk returns a tuple with the StatementCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARGenerateStatementCriteriaType) GetStatementCriteriaOk() (*ARStatementCriteriaType, bool) {
	if o == nil || IsNil(o.StatementCriteria) {
		return nil, false
	}
	return o.StatementCriteria, true
}

// HasStatementCriteria returns a boolean if a field has been set.
func (o *ARGenerateStatementCriteriaType) HasStatementCriteria() bool {
	if o != nil && !IsNil(o.StatementCriteria) {
		return true
	}

	return false
}

// SetStatementCriteria gets a reference to the given ARStatementCriteriaType and assigns it to the StatementCriteria field.
func (o *ARGenerateStatementCriteriaType) SetStatementCriteria(v ARStatementCriteriaType) {
	o.StatementCriteria = &v
}

func (o ARGenerateStatementCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARGenerateStatementCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Statements) {
		toSerialize["statements"] = o.Statements
	}
	if !IsNil(o.StatementCriteria) {
		toSerialize["statementCriteria"] = o.StatementCriteria
	}
	return toSerialize, nil
}

type NullableARGenerateStatementCriteriaType struct {
	value *ARGenerateStatementCriteriaType
	isSet bool
}

func (v NullableARGenerateStatementCriteriaType) Get() *ARGenerateStatementCriteriaType {
	return v.value
}

func (v *NullableARGenerateStatementCriteriaType) Set(val *ARGenerateStatementCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableARGenerateStatementCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableARGenerateStatementCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARGenerateStatementCriteriaType(val *ARGenerateStatementCriteriaType) *NullableARGenerateStatementCriteriaType {
	return &NullableARGenerateStatementCriteriaType{value: val, isSet: true}
}

func (v NullableARGenerateStatementCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARGenerateStatementCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


