/*
OPERA Cloud Accounts Receivables API

APIs to cater for Accounts Receivables functionality in OPERA Cloud. <br /><br The OPERA Cloud Accounts Receivable module enables you to manage debtors' accounts, invoices, and remittance.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ars

import (
	"encoding/json"
)

// checks if the ARTaxCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ARTaxCodeType{}

// ARTaxCodeType AR Old Balances Single Posting Type - Tax and Transaction Code details.
type ARTaxCodeType struct {
	// Tax Code number
	TaxCode *int32 `json:"taxCode,omitempty"`
	// Transaction Code Value
	TransactionCode *string `json:"transactionCode,omitempty"`
	TaxAmount *CurrencyAmountType `json:"taxAmount,omitempty"`
}

// NewARTaxCodeType instantiates a new ARTaxCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewARTaxCodeType() *ARTaxCodeType {
	this := ARTaxCodeType{}
	return &this
}

// NewARTaxCodeTypeWithDefaults instantiates a new ARTaxCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewARTaxCodeTypeWithDefaults() *ARTaxCodeType {
	this := ARTaxCodeType{}
	return &this
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *ARTaxCodeType) GetTaxCode() int32 {
	if o == nil || IsNil(o.TaxCode) {
		var ret int32
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARTaxCodeType) GetTaxCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *ARTaxCodeType) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given int32 and assigns it to the TaxCode field.
func (o *ARTaxCodeType) SetTaxCode(v int32) {
	o.TaxCode = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *ARTaxCodeType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARTaxCodeType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *ARTaxCodeType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *ARTaxCodeType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *ARTaxCodeType) GetTaxAmount() CurrencyAmountType {
	if o == nil || IsNil(o.TaxAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ARTaxCodeType) GetTaxAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *ARTaxCodeType) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given CurrencyAmountType and assigns it to the TaxAmount field.
func (o *ARTaxCodeType) SetTaxAmount(v CurrencyAmountType) {
	o.TaxAmount = &v
}

func (o ARTaxCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ARTaxCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	return toSerialize, nil
}

type NullableARTaxCodeType struct {
	value *ARTaxCodeType
	isSet bool
}

func (v NullableARTaxCodeType) Get() *ARTaxCodeType {
	return v.value
}

func (v *NullableARTaxCodeType) Set(val *ARTaxCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableARTaxCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableARTaxCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARTaxCodeType(val *ARTaxCodeType) *NullableARTaxCodeType {
	return &NullableARTaxCodeType{value: val, isSet: true}
}

func (v NullableARTaxCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARTaxCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


