/*
OPERA Cloud Accounts Receivables API

Testing AccountsReceivablesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ars

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/ars"
)

func Test_ars_AccountsReceivablesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountsReceivablesAPIService CompressARInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.CompressARInvoices(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService CopyARAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.CopyARAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService DeleteAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.DeleteAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService DeleteAccountComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.DeleteAccountComment(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService DeleteAccountFixedCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fixedChargeId string
		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.DeleteAccountFixedCharge(context.Background(), fixedChargeId, accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService DeleteAccountTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.DeleteAccountTrace(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService DeletePaymentsFromInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var invoiceId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.DeletePaymentsFromInvoice(context.Background(), transactionId, invoiceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetARAgingCycles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetARAgingCycles(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetARCreditCardPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetARCreditCardPayments(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetARFolioPrinters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetARFolioPrinters(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetARStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetARStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetARTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetARTransactions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetAppliedInvoicePayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetAppliedInvoicePayments(context.Background(), accountId, transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetInvoiceAppliedPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var transactionId string
		var invoiceId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetInvoiceAppliedPayments(context.Background(), accountId, transactionId, invoiceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetInvoicePaymentDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetInvoicePaymentDetail(context.Background(), transactionId, accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetInvoicePostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetInvoicePostings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetInvoicesOnHold", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetInvoicesOnHold(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetInvoicesPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetInvoicesPayments(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetProfileAging", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetProfileAging(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetProfileYearView", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetProfileYearView(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetReminders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetReminders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetRemindersHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetRemindersHistory(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetStatements(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService GetStatementsHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.GetStatementsHistory(context.Background(), accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostARCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostARCharges(context.Background(), accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostAROldBalances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostAROldBalances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostARPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostARPayments(context.Background(), accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostAccount(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostAccountComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostAccountComment(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostAccountFixedCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostAccountFixedCharge(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostAccountTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostAccountTrace(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostBatchCharges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostBatchCharges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostChargesToAR", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostChargesToAR(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostCreditToInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostCreditToInvoices(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostInvoice(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostReminders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostReminders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostReversePayment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var accountId string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostReversePayment(context.Background(), transactionId, accountId, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PostStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PostStatements(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutARInvoicesAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutARInvoicesAccount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutAccountComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutAccountComment(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutAccountFixedCharge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fixedChargeId string
		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutAccountFixedCharge(context.Background(), fixedChargeId, accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutAccountTrace", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutAccountTrace(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutInvoice(context.Background(), invoiceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutInvoiceDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutInvoiceDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService PutInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.PutInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService RemovePaymentsFromInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.RemovePaymentsFromInvoice(context.Background(), transactionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService ReopenInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.ReopenInvoices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService TransferARCreditCardPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.TransferARCreditCardPayments(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService TransferDirectBillsToAr", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.TransferDirectBillsToAr(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService TransferInvoicesAndPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.TransferInvoicesAndPayments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService TransferPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.TransferPostings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService UncompressARInvoices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.UncompressARInvoices(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesAPIService UnlinkInvoiceFromStatement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesAPI.UnlinkInvoiceFromStatement(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
