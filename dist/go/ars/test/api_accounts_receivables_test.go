/*
OPERA Cloud Accounts Receivables API

Testing AccountsReceivablesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package ars

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/ars"
)

func Test_ars_AccountsReceivablesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountsReceivablesApiService CopyARAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.CopyARAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetARTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetARTransactions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService GetInvoicesPayments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.GetInvoicesPayments(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PostAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PostAccount(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsReceivablesApiService PutAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountId string
		var hotelId string

		resp, httpRes, err := apiClient.AccountsReceivablesApi.PutAccount(context.Background(), accountId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
