/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivitiesBulkUpdateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivitiesBulkUpdateType{}

// ActivitiesBulkUpdateType Collection of Activity Ids their details to be updated.
type ActivitiesBulkUpdateType struct {
	// Selected activities Unique identifier.
	ActivityIdList []ActivityIdRecord `json:"activityIdList,omitempty"`
	// Boolean flag if True will skip processing activities
	SkipProcessing *bool `json:"skipProcessing,omitempty"`
	ActivityRec *ActivityChanges `json:"activityRec,omitempty"`
}

// NewActivitiesBulkUpdateType instantiates a new ActivitiesBulkUpdateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivitiesBulkUpdateType() *ActivitiesBulkUpdateType {
	this := ActivitiesBulkUpdateType{}
	return &this
}

// NewActivitiesBulkUpdateTypeWithDefaults instantiates a new ActivitiesBulkUpdateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivitiesBulkUpdateTypeWithDefaults() *ActivitiesBulkUpdateType {
	this := ActivitiesBulkUpdateType{}
	return &this
}

// GetActivityIdList returns the ActivityIdList field value if set, zero value otherwise.
func (o *ActivitiesBulkUpdateType) GetActivityIdList() []ActivityIdRecord {
	if o == nil || IsNil(o.ActivityIdList) {
		var ret []ActivityIdRecord
		return ret
	}
	return o.ActivityIdList
}

// GetActivityIdListOk returns a tuple with the ActivityIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesBulkUpdateType) GetActivityIdListOk() ([]ActivityIdRecord, bool) {
	if o == nil || IsNil(o.ActivityIdList) {
		return nil, false
	}
	return o.ActivityIdList, true
}

// HasActivityIdList returns a boolean if a field has been set.
func (o *ActivitiesBulkUpdateType) HasActivityIdList() bool {
	if o != nil && !IsNil(o.ActivityIdList) {
		return true
	}

	return false
}

// SetActivityIdList gets a reference to the given []ActivityIdRecord and assigns it to the ActivityIdList field.
func (o *ActivitiesBulkUpdateType) SetActivityIdList(v []ActivityIdRecord) {
	o.ActivityIdList = v
}

// GetSkipProcessing returns the SkipProcessing field value if set, zero value otherwise.
func (o *ActivitiesBulkUpdateType) GetSkipProcessing() bool {
	if o == nil || IsNil(o.SkipProcessing) {
		var ret bool
		return ret
	}
	return *o.SkipProcessing
}

// GetSkipProcessingOk returns a tuple with the SkipProcessing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesBulkUpdateType) GetSkipProcessingOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipProcessing) {
		return nil, false
	}
	return o.SkipProcessing, true
}

// HasSkipProcessing returns a boolean if a field has been set.
func (o *ActivitiesBulkUpdateType) HasSkipProcessing() bool {
	if o != nil && !IsNil(o.SkipProcessing) {
		return true
	}

	return false
}

// SetSkipProcessing gets a reference to the given bool and assigns it to the SkipProcessing field.
func (o *ActivitiesBulkUpdateType) SetSkipProcessing(v bool) {
	o.SkipProcessing = &v
}

// GetActivityRec returns the ActivityRec field value if set, zero value otherwise.
func (o *ActivitiesBulkUpdateType) GetActivityRec() ActivityChanges {
	if o == nil || IsNil(o.ActivityRec) {
		var ret ActivityChanges
		return ret
	}
	return *o.ActivityRec
}

// GetActivityRecOk returns a tuple with the ActivityRec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesBulkUpdateType) GetActivityRecOk() (*ActivityChanges, bool) {
	if o == nil || IsNil(o.ActivityRec) {
		return nil, false
	}
	return o.ActivityRec, true
}

// HasActivityRec returns a boolean if a field has been set.
func (o *ActivitiesBulkUpdateType) HasActivityRec() bool {
	if o != nil && !IsNil(o.ActivityRec) {
		return true
	}

	return false
}

// SetActivityRec gets a reference to the given ActivityChanges and assigns it to the ActivityRec field.
func (o *ActivitiesBulkUpdateType) SetActivityRec(v ActivityChanges) {
	o.ActivityRec = &v
}

func (o ActivitiesBulkUpdateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivitiesBulkUpdateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityIdList) {
		toSerialize["activityIdList"] = o.ActivityIdList
	}
	if !IsNil(o.SkipProcessing) {
		toSerialize["skipProcessing"] = o.SkipProcessing
	}
	if !IsNil(o.ActivityRec) {
		toSerialize["activityRec"] = o.ActivityRec
	}
	return toSerialize, nil
}

type NullableActivitiesBulkUpdateType struct {
	value *ActivitiesBulkUpdateType
	isSet bool
}

func (v NullableActivitiesBulkUpdateType) Get() *ActivitiesBulkUpdateType {
	return v.value
}

func (v *NullableActivitiesBulkUpdateType) Set(val *ActivitiesBulkUpdateType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivitiesBulkUpdateType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivitiesBulkUpdateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivitiesBulkUpdateType(val *ActivitiesBulkUpdateType) *NullableActivitiesBulkUpdateType {
	return &NullableActivitiesBulkUpdateType{value: val, isSet: true}
}

func (v NullableActivitiesBulkUpdateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivitiesBulkUpdateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


