/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityStatSetType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityStatSetType{}

// ActivityStatSetType Base statistic set holder which defines the span of the statistical data.
type ActivityStatSetType struct {
	Start *string `json:"start,omitempty"`
	End *string `json:"end,omitempty"`
	Stat []ActivityStatType `json:"stat,omitempty"`
	Owner *string `json:"owner,omitempty"`
}

// NewActivityStatSetType instantiates a new ActivityStatSetType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityStatSetType() *ActivityStatSetType {
	this := ActivityStatSetType{}
	return &this
}

// NewActivityStatSetTypeWithDefaults instantiates a new ActivityStatSetType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStatSetTypeWithDefaults() *ActivityStatSetType {
	this := ActivityStatSetType{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *ActivityStatSetType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatSetType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *ActivityStatSetType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *ActivityStatSetType) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *ActivityStatSetType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatSetType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *ActivityStatSetType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *ActivityStatSetType) SetEnd(v string) {
	o.End = &v
}

// GetStat returns the Stat field value if set, zero value otherwise.
func (o *ActivityStatSetType) GetStat() []ActivityStatType {
	if o == nil || IsNil(o.Stat) {
		var ret []ActivityStatType
		return ret
	}
	return o.Stat
}

// GetStatOk returns a tuple with the Stat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatSetType) GetStatOk() ([]ActivityStatType, bool) {
	if o == nil || IsNil(o.Stat) {
		return nil, false
	}
	return o.Stat, true
}

// HasStat returns a boolean if a field has been set.
func (o *ActivityStatSetType) HasStat() bool {
	if o != nil && !IsNil(o.Stat) {
		return true
	}

	return false
}

// SetStat gets a reference to the given []ActivityStatType and assigns it to the Stat field.
func (o *ActivityStatSetType) SetStat(v []ActivityStatType) {
	o.Stat = v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ActivityStatSetType) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatSetType) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *ActivityStatSetType) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *ActivityStatSetType) SetOwner(v string) {
	o.Owner = &v
}

func (o ActivityStatSetType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityStatSetType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Stat) {
		toSerialize["stat"] = o.Stat
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullableActivityStatSetType struct {
	value *ActivityStatSetType
	isSet bool
}

func (v NullableActivityStatSetType) Get() *ActivityStatSetType {
	return v.value
}

func (v *NullableActivityStatSetType) Set(val *ActivityStatSetType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatSetType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatSetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatSetType(val *ActivityStatSetType) *NullableActivityStatSetType {
	return &NullableActivityStatSetType{value: val, isSet: true}
}

func (v NullableActivityStatSetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatSetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


