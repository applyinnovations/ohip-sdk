/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the RecentlyAccessedActivityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecentlyAccessedActivityType{}

// RecentlyAccessedActivityType A recently used activity details.
type RecentlyAccessedActivityType struct {
	// The date the record was accessed.
	AccessDate *string `json:"accessDate,omitempty"`
	// Unique identifier for the Activity.
	ActivityIdList []ActivityId `json:"activityIdList,omitempty"`
	// Owner Code of the Activity.
	ActivityOwnerCode *string `json:"activityOwnerCode,omitempty"`
	// Description of the ActivityType.
	ActivityTypeDescription *string `json:"activityTypeDescription,omitempty"`
	// Hotel Code of the Activity.
	HotelId *string `json:"hotelId,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewRecentlyAccessedActivityType instantiates a new RecentlyAccessedActivityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecentlyAccessedActivityType() *RecentlyAccessedActivityType {
	this := RecentlyAccessedActivityType{}
	return &this
}

// NewRecentlyAccessedActivityTypeWithDefaults instantiates a new RecentlyAccessedActivityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecentlyAccessedActivityTypeWithDefaults() *RecentlyAccessedActivityType {
	this := RecentlyAccessedActivityType{}
	return &this
}

// GetAccessDate returns the AccessDate field value if set, zero value otherwise.
func (o *RecentlyAccessedActivityType) GetAccessDate() string {
	if o == nil || IsNil(o.AccessDate) {
		var ret string
		return ret
	}
	return *o.AccessDate
}

// GetAccessDateOk returns a tuple with the AccessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedActivityType) GetAccessDateOk() (*string, bool) {
	if o == nil || IsNil(o.AccessDate) {
		return nil, false
	}
	return o.AccessDate, true
}

// HasAccessDate returns a boolean if a field has been set.
func (o *RecentlyAccessedActivityType) HasAccessDate() bool {
	if o != nil && !IsNil(o.AccessDate) {
		return true
	}

	return false
}

// SetAccessDate gets a reference to the given string and assigns it to the AccessDate field.
func (o *RecentlyAccessedActivityType) SetAccessDate(v string) {
	o.AccessDate = &v
}

// GetActivityIdList returns the ActivityIdList field value if set, zero value otherwise.
func (o *RecentlyAccessedActivityType) GetActivityIdList() []ActivityId {
	if o == nil || IsNil(o.ActivityIdList) {
		var ret []ActivityId
		return ret
	}
	return o.ActivityIdList
}

// GetActivityIdListOk returns a tuple with the ActivityIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedActivityType) GetActivityIdListOk() ([]ActivityId, bool) {
	if o == nil || IsNil(o.ActivityIdList) {
		return nil, false
	}
	return o.ActivityIdList, true
}

// HasActivityIdList returns a boolean if a field has been set.
func (o *RecentlyAccessedActivityType) HasActivityIdList() bool {
	if o != nil && !IsNil(o.ActivityIdList) {
		return true
	}

	return false
}

// SetActivityIdList gets a reference to the given []ActivityId and assigns it to the ActivityIdList field.
func (o *RecentlyAccessedActivityType) SetActivityIdList(v []ActivityId) {
	o.ActivityIdList = v
}

// GetActivityOwnerCode returns the ActivityOwnerCode field value if set, zero value otherwise.
func (o *RecentlyAccessedActivityType) GetActivityOwnerCode() string {
	if o == nil || IsNil(o.ActivityOwnerCode) {
		var ret string
		return ret
	}
	return *o.ActivityOwnerCode
}

// GetActivityOwnerCodeOk returns a tuple with the ActivityOwnerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedActivityType) GetActivityOwnerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityOwnerCode) {
		return nil, false
	}
	return o.ActivityOwnerCode, true
}

// HasActivityOwnerCode returns a boolean if a field has been set.
func (o *RecentlyAccessedActivityType) HasActivityOwnerCode() bool {
	if o != nil && !IsNil(o.ActivityOwnerCode) {
		return true
	}

	return false
}

// SetActivityOwnerCode gets a reference to the given string and assigns it to the ActivityOwnerCode field.
func (o *RecentlyAccessedActivityType) SetActivityOwnerCode(v string) {
	o.ActivityOwnerCode = &v
}

// GetActivityTypeDescription returns the ActivityTypeDescription field value if set, zero value otherwise.
func (o *RecentlyAccessedActivityType) GetActivityTypeDescription() string {
	if o == nil || IsNil(o.ActivityTypeDescription) {
		var ret string
		return ret
	}
	return *o.ActivityTypeDescription
}

// GetActivityTypeDescriptionOk returns a tuple with the ActivityTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedActivityType) GetActivityTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityTypeDescription) {
		return nil, false
	}
	return o.ActivityTypeDescription, true
}

// HasActivityTypeDescription returns a boolean if a field has been set.
func (o *RecentlyAccessedActivityType) HasActivityTypeDescription() bool {
	if o != nil && !IsNil(o.ActivityTypeDescription) {
		return true
	}

	return false
}

// SetActivityTypeDescription gets a reference to the given string and assigns it to the ActivityTypeDescription field.
func (o *RecentlyAccessedActivityType) SetActivityTypeDescription(v string) {
	o.ActivityTypeDescription = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RecentlyAccessedActivityType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedActivityType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RecentlyAccessedActivityType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RecentlyAccessedActivityType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *RecentlyAccessedActivityType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedActivityType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *RecentlyAccessedActivityType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *RecentlyAccessedActivityType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o RecentlyAccessedActivityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecentlyAccessedActivityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessDate) {
		toSerialize["accessDate"] = o.AccessDate
	}
	if !IsNil(o.ActivityIdList) {
		toSerialize["activityIdList"] = o.ActivityIdList
	}
	if !IsNil(o.ActivityOwnerCode) {
		toSerialize["activityOwnerCode"] = o.ActivityOwnerCode
	}
	if !IsNil(o.ActivityTypeDescription) {
		toSerialize["activityTypeDescription"] = o.ActivityTypeDescription
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableRecentlyAccessedActivityType struct {
	value *RecentlyAccessedActivityType
	isSet bool
}

func (v NullableRecentlyAccessedActivityType) Get() *RecentlyAccessedActivityType {
	return v.value
}

func (v *NullableRecentlyAccessedActivityType) Set(val *RecentlyAccessedActivityType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecentlyAccessedActivityType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecentlyAccessedActivityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecentlyAccessedActivityType(val *RecentlyAccessedActivityType) *NullableRecentlyAccessedActivityType {
	return &NullableRecentlyAccessedActivityType{value: val, isSet: true}
}

func (v NullableRecentlyAccessedActivityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecentlyAccessedActivityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


