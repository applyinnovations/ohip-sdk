/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityChanges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityChanges{}

// ActivityChanges Activities details to be updated.
type ActivityChanges struct {
	ActivityClass *ActivityConfigClassType `json:"activityClass,omitempty"`
	// Indicates the Activity Type used for the Activity.
	ActivityType *string `json:"activityType,omitempty"`
	// Indicates Purpose of the Activity.
	ActivityPurpose *string `json:"activityPurpose,omitempty"`
	// Activity Trace code used for the Activity.
	ActivityTraceCode *string `json:"activityTraceCode,omitempty"`
	// Owner of Activity.
	ActivityOwner *string `json:"activityOwner,omitempty"`
	// Start Date of Activity.
	StartDate *string `json:"startDate,omitempty"`
	// Start time of the Activity.
	StartTime *string `json:"startTime,omitempty"`
	// End Date of Activity.
	EndDate *string `json:"endDate,omitempty"`
	// End time of the Activity.
	EndTime *string `json:"endTime,omitempty"`
	// Notes associated with an Activity.
	Notes *string `json:"notes,omitempty"`
	// Indicates whether Activity has a high priority.
	HighPriority *bool `json:"highPriority,omitempty"`
	ActivityAccount *UniqueIDType `json:"activityAccount,omitempty"`
	ActivityContact *UniqueIDType `json:"activityContact,omitempty"`
}

// NewActivityChanges instantiates a new ActivityChanges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityChanges() *ActivityChanges {
	this := ActivityChanges{}
	return &this
}

// NewActivityChangesWithDefaults instantiates a new ActivityChanges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityChangesWithDefaults() *ActivityChanges {
	this := ActivityChanges{}
	return &this
}

// GetActivityClass returns the ActivityClass field value if set, zero value otherwise.
func (o *ActivityChanges) GetActivityClass() ActivityConfigClassType {
	if o == nil || IsNil(o.ActivityClass) {
		var ret ActivityConfigClassType
		return ret
	}
	return *o.ActivityClass
}

// GetActivityClassOk returns a tuple with the ActivityClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetActivityClassOk() (*ActivityConfigClassType, bool) {
	if o == nil || IsNil(o.ActivityClass) {
		return nil, false
	}
	return o.ActivityClass, true
}

// HasActivityClass returns a boolean if a field has been set.
func (o *ActivityChanges) HasActivityClass() bool {
	if o != nil && !IsNil(o.ActivityClass) {
		return true
	}

	return false
}

// SetActivityClass gets a reference to the given ActivityConfigClassType and assigns it to the ActivityClass field.
func (o *ActivityChanges) SetActivityClass(v ActivityConfigClassType) {
	o.ActivityClass = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *ActivityChanges) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType) {
		var ret string
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetActivityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *ActivityChanges) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given string and assigns it to the ActivityType field.
func (o *ActivityChanges) SetActivityType(v string) {
	o.ActivityType = &v
}

// GetActivityPurpose returns the ActivityPurpose field value if set, zero value otherwise.
func (o *ActivityChanges) GetActivityPurpose() string {
	if o == nil || IsNil(o.ActivityPurpose) {
		var ret string
		return ret
	}
	return *o.ActivityPurpose
}

// GetActivityPurposeOk returns a tuple with the ActivityPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetActivityPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityPurpose) {
		return nil, false
	}
	return o.ActivityPurpose, true
}

// HasActivityPurpose returns a boolean if a field has been set.
func (o *ActivityChanges) HasActivityPurpose() bool {
	if o != nil && !IsNil(o.ActivityPurpose) {
		return true
	}

	return false
}

// SetActivityPurpose gets a reference to the given string and assigns it to the ActivityPurpose field.
func (o *ActivityChanges) SetActivityPurpose(v string) {
	o.ActivityPurpose = &v
}

// GetActivityTraceCode returns the ActivityTraceCode field value if set, zero value otherwise.
func (o *ActivityChanges) GetActivityTraceCode() string {
	if o == nil || IsNil(o.ActivityTraceCode) {
		var ret string
		return ret
	}
	return *o.ActivityTraceCode
}

// GetActivityTraceCodeOk returns a tuple with the ActivityTraceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetActivityTraceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityTraceCode) {
		return nil, false
	}
	return o.ActivityTraceCode, true
}

// HasActivityTraceCode returns a boolean if a field has been set.
func (o *ActivityChanges) HasActivityTraceCode() bool {
	if o != nil && !IsNil(o.ActivityTraceCode) {
		return true
	}

	return false
}

// SetActivityTraceCode gets a reference to the given string and assigns it to the ActivityTraceCode field.
func (o *ActivityChanges) SetActivityTraceCode(v string) {
	o.ActivityTraceCode = &v
}

// GetActivityOwner returns the ActivityOwner field value if set, zero value otherwise.
func (o *ActivityChanges) GetActivityOwner() string {
	if o == nil || IsNil(o.ActivityOwner) {
		var ret string
		return ret
	}
	return *o.ActivityOwner
}

// GetActivityOwnerOk returns a tuple with the ActivityOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetActivityOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityOwner) {
		return nil, false
	}
	return o.ActivityOwner, true
}

// HasActivityOwner returns a boolean if a field has been set.
func (o *ActivityChanges) HasActivityOwner() bool {
	if o != nil && !IsNil(o.ActivityOwner) {
		return true
	}

	return false
}

// SetActivityOwner gets a reference to the given string and assigns it to the ActivityOwner field.
func (o *ActivityChanges) SetActivityOwner(v string) {
	o.ActivityOwner = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ActivityChanges) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ActivityChanges) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ActivityChanges) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ActivityChanges) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ActivityChanges) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *ActivityChanges) SetStartTime(v string) {
	o.StartTime = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ActivityChanges) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ActivityChanges) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ActivityChanges) SetEndDate(v string) {
	o.EndDate = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ActivityChanges) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ActivityChanges) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *ActivityChanges) SetEndTime(v string) {
	o.EndTime = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ActivityChanges) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ActivityChanges) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ActivityChanges) SetNotes(v string) {
	o.Notes = &v
}

// GetHighPriority returns the HighPriority field value if set, zero value otherwise.
func (o *ActivityChanges) GetHighPriority() bool {
	if o == nil || IsNil(o.HighPriority) {
		var ret bool
		return ret
	}
	return *o.HighPriority
}

// GetHighPriorityOk returns a tuple with the HighPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetHighPriorityOk() (*bool, bool) {
	if o == nil || IsNil(o.HighPriority) {
		return nil, false
	}
	return o.HighPriority, true
}

// HasHighPriority returns a boolean if a field has been set.
func (o *ActivityChanges) HasHighPriority() bool {
	if o != nil && !IsNil(o.HighPriority) {
		return true
	}

	return false
}

// SetHighPriority gets a reference to the given bool and assigns it to the HighPriority field.
func (o *ActivityChanges) SetHighPriority(v bool) {
	o.HighPriority = &v
}

// GetActivityAccount returns the ActivityAccount field value if set, zero value otherwise.
func (o *ActivityChanges) GetActivityAccount() UniqueIDType {
	if o == nil || IsNil(o.ActivityAccount) {
		var ret UniqueIDType
		return ret
	}
	return *o.ActivityAccount
}

// GetActivityAccountOk returns a tuple with the ActivityAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetActivityAccountOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ActivityAccount) {
		return nil, false
	}
	return o.ActivityAccount, true
}

// HasActivityAccount returns a boolean if a field has been set.
func (o *ActivityChanges) HasActivityAccount() bool {
	if o != nil && !IsNil(o.ActivityAccount) {
		return true
	}

	return false
}

// SetActivityAccount gets a reference to the given UniqueIDType and assigns it to the ActivityAccount field.
func (o *ActivityChanges) SetActivityAccount(v UniqueIDType) {
	o.ActivityAccount = &v
}

// GetActivityContact returns the ActivityContact field value if set, zero value otherwise.
func (o *ActivityChanges) GetActivityContact() UniqueIDType {
	if o == nil || IsNil(o.ActivityContact) {
		var ret UniqueIDType
		return ret
	}
	return *o.ActivityContact
}

// GetActivityContactOk returns a tuple with the ActivityContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityChanges) GetActivityContactOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ActivityContact) {
		return nil, false
	}
	return o.ActivityContact, true
}

// HasActivityContact returns a boolean if a field has been set.
func (o *ActivityChanges) HasActivityContact() bool {
	if o != nil && !IsNil(o.ActivityContact) {
		return true
	}

	return false
}

// SetActivityContact gets a reference to the given UniqueIDType and assigns it to the ActivityContact field.
func (o *ActivityChanges) SetActivityContact(v UniqueIDType) {
	o.ActivityContact = &v
}

func (o ActivityChanges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityChanges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityClass) {
		toSerialize["activityClass"] = o.ActivityClass
	}
	if !IsNil(o.ActivityType) {
		toSerialize["activityType"] = o.ActivityType
	}
	if !IsNil(o.ActivityPurpose) {
		toSerialize["activityPurpose"] = o.ActivityPurpose
	}
	if !IsNil(o.ActivityTraceCode) {
		toSerialize["activityTraceCode"] = o.ActivityTraceCode
	}
	if !IsNil(o.ActivityOwner) {
		toSerialize["activityOwner"] = o.ActivityOwner
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.HighPriority) {
		toSerialize["highPriority"] = o.HighPriority
	}
	if !IsNil(o.ActivityAccount) {
		toSerialize["activityAccount"] = o.ActivityAccount
	}
	if !IsNil(o.ActivityContact) {
		toSerialize["activityContact"] = o.ActivityContact
	}
	return toSerialize, nil
}

type NullableActivityChanges struct {
	value *ActivityChanges
	isSet bool
}

func (v NullableActivityChanges) Get() *ActivityChanges {
	return v.value
}

func (v *NullableActivityChanges) Set(val *ActivityChanges) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityChanges) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityChanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityChanges(val *ActivityChanges) *NullableActivityChanges {
	return &NullableActivityChanges{value: val, isSet: true}
}

func (v NullableActivityChanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityChanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


