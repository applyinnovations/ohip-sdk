/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityStatCategoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityStatCategoryType{}

// ActivityStatCategoryType Defines the codes and corresponding categories for which the data in the other elements has been gathered.
type ActivityStatCategoryType struct {
	Description *string `json:"description,omitempty"`
	StatCategoryCode *ActivityStatCategoryCodeType `json:"statCategoryCode,omitempty"`
	// Defines where this statistical data is applied.
	StatCode *string `json:"statCode,omitempty"`
	// Classification of the statistical data.
	StatCodeClass *string `json:"statCodeClass,omitempty"`
	StatSet []ActivityStatSetType `json:"statSet,omitempty"`
}

// NewActivityStatCategoryType instantiates a new ActivityStatCategoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityStatCategoryType() *ActivityStatCategoryType {
	this := ActivityStatCategoryType{}
	return &this
}

// NewActivityStatCategoryTypeWithDefaults instantiates a new ActivityStatCategoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStatCategoryTypeWithDefaults() *ActivityStatCategoryType {
	this := ActivityStatCategoryType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ActivityStatCategoryType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatCategoryType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ActivityStatCategoryType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ActivityStatCategoryType) SetDescription(v string) {
	o.Description = &v
}

// GetStatCategoryCode returns the StatCategoryCode field value if set, zero value otherwise.
func (o *ActivityStatCategoryType) GetStatCategoryCode() ActivityStatCategoryCodeType {
	if o == nil || IsNil(o.StatCategoryCode) {
		var ret ActivityStatCategoryCodeType
		return ret
	}
	return *o.StatCategoryCode
}

// GetStatCategoryCodeOk returns a tuple with the StatCategoryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatCategoryType) GetStatCategoryCodeOk() (*ActivityStatCategoryCodeType, bool) {
	if o == nil || IsNil(o.StatCategoryCode) {
		return nil, false
	}
	return o.StatCategoryCode, true
}

// HasStatCategoryCode returns a boolean if a field has been set.
func (o *ActivityStatCategoryType) HasStatCategoryCode() bool {
	if o != nil && !IsNil(o.StatCategoryCode) {
		return true
	}

	return false
}

// SetStatCategoryCode gets a reference to the given ActivityStatCategoryCodeType and assigns it to the StatCategoryCode field.
func (o *ActivityStatCategoryType) SetStatCategoryCode(v ActivityStatCategoryCodeType) {
	o.StatCategoryCode = &v
}

// GetStatCode returns the StatCode field value if set, zero value otherwise.
func (o *ActivityStatCategoryType) GetStatCode() string {
	if o == nil || IsNil(o.StatCode) {
		var ret string
		return ret
	}
	return *o.StatCode
}

// GetStatCodeOk returns a tuple with the StatCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatCategoryType) GetStatCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatCode) {
		return nil, false
	}
	return o.StatCode, true
}

// HasStatCode returns a boolean if a field has been set.
func (o *ActivityStatCategoryType) HasStatCode() bool {
	if o != nil && !IsNil(o.StatCode) {
		return true
	}

	return false
}

// SetStatCode gets a reference to the given string and assigns it to the StatCode field.
func (o *ActivityStatCategoryType) SetStatCode(v string) {
	o.StatCode = &v
}

// GetStatCodeClass returns the StatCodeClass field value if set, zero value otherwise.
func (o *ActivityStatCategoryType) GetStatCodeClass() string {
	if o == nil || IsNil(o.StatCodeClass) {
		var ret string
		return ret
	}
	return *o.StatCodeClass
}

// GetStatCodeClassOk returns a tuple with the StatCodeClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatCategoryType) GetStatCodeClassOk() (*string, bool) {
	if o == nil || IsNil(o.StatCodeClass) {
		return nil, false
	}
	return o.StatCodeClass, true
}

// HasStatCodeClass returns a boolean if a field has been set.
func (o *ActivityStatCategoryType) HasStatCodeClass() bool {
	if o != nil && !IsNil(o.StatCodeClass) {
		return true
	}

	return false
}

// SetStatCodeClass gets a reference to the given string and assigns it to the StatCodeClass field.
func (o *ActivityStatCategoryType) SetStatCodeClass(v string) {
	o.StatCodeClass = &v
}

// GetStatSet returns the StatSet field value if set, zero value otherwise.
func (o *ActivityStatCategoryType) GetStatSet() []ActivityStatSetType {
	if o == nil || IsNil(o.StatSet) {
		var ret []ActivityStatSetType
		return ret
	}
	return o.StatSet
}

// GetStatSetOk returns a tuple with the StatSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatCategoryType) GetStatSetOk() ([]ActivityStatSetType, bool) {
	if o == nil || IsNil(o.StatSet) {
		return nil, false
	}
	return o.StatSet, true
}

// HasStatSet returns a boolean if a field has been set.
func (o *ActivityStatCategoryType) HasStatSet() bool {
	if o != nil && !IsNil(o.StatSet) {
		return true
	}

	return false
}

// SetStatSet gets a reference to the given []ActivityStatSetType and assigns it to the StatSet field.
func (o *ActivityStatCategoryType) SetStatSet(v []ActivityStatSetType) {
	o.StatSet = v
}

func (o ActivityStatCategoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityStatCategoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.StatCategoryCode) {
		toSerialize["statCategoryCode"] = o.StatCategoryCode
	}
	if !IsNil(o.StatCode) {
		toSerialize["statCode"] = o.StatCode
	}
	if !IsNil(o.StatCodeClass) {
		toSerialize["statCodeClass"] = o.StatCodeClass
	}
	if !IsNil(o.StatSet) {
		toSerialize["statSet"] = o.StatSet
	}
	return toSerialize, nil
}

type NullableActivityStatCategoryType struct {
	value *ActivityStatCategoryType
	isSet bool
}

func (v NullableActivityStatCategoryType) Get() *ActivityStatCategoryType {
	return v.value
}

func (v *NullableActivityStatCategoryType) Set(val *ActivityStatCategoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatCategoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatCategoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatCategoryType(val *ActivityStatCategoryType) *NullableActivityStatCategoryType {
	return &NullableActivityStatCategoryType{value: val, isSet: true}
}

func (v NullableActivityStatCategoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatCategoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


