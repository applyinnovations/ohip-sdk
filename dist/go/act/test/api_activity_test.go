/*
OPERA Cloud Activity API

Testing ActivityAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package act

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/act"
)

func Test_act_ActivityAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ActivityAPIService DeleteActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.DeleteActivities(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService DeleteActivitiesWithOutHotelId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string

		resp, httpRes, err := apiClient.ActivityAPI.DeleteActivitiesWithOutHotelId(context.Background(), activityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService DeleteActivityAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attachmentId string
		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.DeleteActivityAttachment(context.Background(), attachmentId, activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService DeleteActivityAttachmentWithoutHotelId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attachmentId string
		var activityId string

		resp, httpRes, err := apiClient.ActivityAPI.DeleteActivityAttachmentWithoutHotelId(context.Background(), attachmentId, activityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService DeleteMultipleActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityAPI.DeleteMultipleActivities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.GetActivities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetActivitiesByMultipleHotelIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityAPI.GetActivitiesByMultipleHotelIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.GetActivity(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetActivityAttachments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.GetActivityAttachments(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.GetActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetActivityStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.GetActivityStatistics(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetActivityWithOutHotelId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string

		resp, httpRes, err := apiClient.ActivityAPI.GetActivityWithOutHotelId(context.Background(), activityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetEmails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityAPI.GetEmails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetRecentlyAccessedActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.GetRecentlyAccessedActivities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService GetRecentlyAccessedActivitiesWithOutHotelId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityAPI.GetRecentlyAccessedActivitiesWithOutHotelId(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService PostActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.PostActivities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService PostLinkedActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.PostLinkedActivities(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService PostMultipleActivitiesCompletion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityAPI.PostMultipleActivitiesCompletion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService PostSingleActivityCompletion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.PostSingleActivityCompletion(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService PutActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityAPI.PutActivities(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityAPIService PutBulkActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityAPI.PutBulkActivities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
