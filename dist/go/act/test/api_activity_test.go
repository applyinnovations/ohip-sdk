/*
OPERA Cloud Activity API

Testing ActivityApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package act

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/act"
)

func Test_act_ActivityApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ActivityApiService DeleteActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityApi.DeleteActivities(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService DeleteMultipleActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityApi.DeleteMultipleActivities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService GetActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityApi.GetActivities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService GetActivitiesByMultipleHotelIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityApi.GetActivitiesByMultipleHotelIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService GetActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityApi.GetActivity(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService PostActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityApi.PostActivities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService PostMultipleActivitiesCompletion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityApi.PostMultipleActivitiesCompletion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService PostSingleActivityCompletion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityApi.PostSingleActivityCompletion(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityApiService PutActivities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityApi.PutActivities(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
