/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the TelephoneType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TelephoneType{}

// TelephoneType Information on a telephone number for the customer.
type TelephoneType struct {
	// Telephone number assigned to a single location.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// NewTelephoneType instantiates a new TelephoneType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTelephoneType() *TelephoneType {
	this := TelephoneType{}
	return &this
}

// NewTelephoneTypeWithDefaults instantiates a new TelephoneType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTelephoneTypeWithDefaults() *TelephoneType {
	this := TelephoneType{}
	return &this
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *TelephoneType) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TelephoneType) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *TelephoneType) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *TelephoneType) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

func (o TelephoneType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TelephoneType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	return toSerialize, nil
}

type NullableTelephoneType struct {
	value *TelephoneType
	isSet bool
}

func (v NullableTelephoneType) Get() *TelephoneType {
	return v.value
}

func (v *NullableTelephoneType) Set(val *TelephoneType) {
	v.value = val
	v.isSet = true
}

func (v NullableTelephoneType) IsSet() bool {
	return v.isSet
}

func (v *NullableTelephoneType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelephoneType(val *TelephoneType) *NullableTelephoneType {
	return &NullableTelephoneType{value: val, isSet: true}
}

func (v NullableTelephoneType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelephoneType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


