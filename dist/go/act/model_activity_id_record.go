/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityIdRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityIdRecord{}

// ActivityIdRecord Unique identifier for the Activity Record containing activity ID and activity property.
type ActivityIdRecord struct {
	// Hotel code to which activity belongs
	HotelId *string `json:"hotelId,omitempty"`
	// Unique ID belonging to the activity.
	Id *string `json:"id,omitempty"`
}

// NewActivityIdRecord instantiates a new ActivityIdRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityIdRecord() *ActivityIdRecord {
	this := ActivityIdRecord{}
	return &this
}

// NewActivityIdRecordWithDefaults instantiates a new ActivityIdRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityIdRecordWithDefaults() *ActivityIdRecord {
	this := ActivityIdRecord{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ActivityIdRecord) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityIdRecord) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ActivityIdRecord) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ActivityIdRecord) SetHotelId(v string) {
	o.HotelId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActivityIdRecord) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityIdRecord) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActivityIdRecord) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActivityIdRecord) SetId(v string) {
	o.Id = &v
}

func (o ActivityIdRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityIdRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableActivityIdRecord struct {
	value *ActivityIdRecord
	isSet bool
}

func (v NullableActivityIdRecord) Get() *ActivityIdRecord {
	return v.value
}

func (v *NullableActivityIdRecord) Set(val *ActivityIdRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityIdRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityIdRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityIdRecord(val *ActivityIdRecord) *NullableActivityIdRecord {
	return &NullableActivityIdRecord{value: val, isSet: true}
}

func (v NullableActivityIdRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityIdRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


