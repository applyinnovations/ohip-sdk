/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivitiesBulkUpdateStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivitiesBulkUpdateStatus{}

// ActivitiesBulkUpdateStatus struct for ActivitiesBulkUpdateStatus
type ActivitiesBulkUpdateStatus struct {
	// Status/Info of the processed activities.
	ActivitiesBulkUpdateStatusType []ActivitiesProcessedInfoType `json:"activitiesBulkUpdateStatusType,omitempty"`
}

// NewActivitiesBulkUpdateStatus instantiates a new ActivitiesBulkUpdateStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivitiesBulkUpdateStatus() *ActivitiesBulkUpdateStatus {
	this := ActivitiesBulkUpdateStatus{}
	return &this
}

// NewActivitiesBulkUpdateStatusWithDefaults instantiates a new ActivitiesBulkUpdateStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivitiesBulkUpdateStatusWithDefaults() *ActivitiesBulkUpdateStatus {
	this := ActivitiesBulkUpdateStatus{}
	return &this
}

// GetActivitiesBulkUpdateStatusType returns the ActivitiesBulkUpdateStatusType field value if set, zero value otherwise.
func (o *ActivitiesBulkUpdateStatus) GetActivitiesBulkUpdateStatusType() []ActivitiesProcessedInfoType {
	if o == nil || IsNil(o.ActivitiesBulkUpdateStatusType) {
		var ret []ActivitiesProcessedInfoType
		return ret
	}
	return o.ActivitiesBulkUpdateStatusType
}

// GetActivitiesBulkUpdateStatusTypeOk returns a tuple with the ActivitiesBulkUpdateStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesBulkUpdateStatus) GetActivitiesBulkUpdateStatusTypeOk() ([]ActivitiesProcessedInfoType, bool) {
	if o == nil || IsNil(o.ActivitiesBulkUpdateStatusType) {
		return nil, false
	}
	return o.ActivitiesBulkUpdateStatusType, true
}

// HasActivitiesBulkUpdateStatusType returns a boolean if a field has been set.
func (o *ActivitiesBulkUpdateStatus) HasActivitiesBulkUpdateStatusType() bool {
	if o != nil && !IsNil(o.ActivitiesBulkUpdateStatusType) {
		return true
	}

	return false
}

// SetActivitiesBulkUpdateStatusType gets a reference to the given []ActivitiesProcessedInfoType and assigns it to the ActivitiesBulkUpdateStatusType field.
func (o *ActivitiesBulkUpdateStatus) SetActivitiesBulkUpdateStatusType(v []ActivitiesProcessedInfoType) {
	o.ActivitiesBulkUpdateStatusType = v
}

func (o ActivitiesBulkUpdateStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivitiesBulkUpdateStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivitiesBulkUpdateStatusType) {
		toSerialize["activitiesBulkUpdateStatusType"] = o.ActivitiesBulkUpdateStatusType
	}
	return toSerialize, nil
}

type NullableActivitiesBulkUpdateStatus struct {
	value *ActivitiesBulkUpdateStatus
	isSet bool
}

func (v NullableActivitiesBulkUpdateStatus) Get() *ActivitiesBulkUpdateStatus {
	return v.value
}

func (v *NullableActivitiesBulkUpdateStatus) Set(val *ActivitiesBulkUpdateStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableActivitiesBulkUpdateStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableActivitiesBulkUpdateStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivitiesBulkUpdateStatus(val *ActivitiesBulkUpdateStatus) *NullableActivitiesBulkUpdateStatus {
	return &NullableActivitiesBulkUpdateStatus{value: val, isSet: true}
}

func (v NullableActivitiesBulkUpdateStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivitiesBulkUpdateStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


