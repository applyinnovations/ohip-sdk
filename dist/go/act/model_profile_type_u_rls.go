/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ProfileTypeURLs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileTypeURLs{}

// ProfileTypeURLs List of Information on a URL for the customer.
type ProfileTypeURLs struct {
	// Collection of Detailed information on web url/address for the customer.
	URLInfo []URLInfoType `json:"uRLInfo,omitempty"`
}

// NewProfileTypeURLs instantiates a new ProfileTypeURLs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileTypeURLs() *ProfileTypeURLs {
	this := ProfileTypeURLs{}
	return &this
}

// NewProfileTypeURLsWithDefaults instantiates a new ProfileTypeURLs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileTypeURLsWithDefaults() *ProfileTypeURLs {
	this := ProfileTypeURLs{}
	return &this
}

// GetURLInfo returns the URLInfo field value if set, zero value otherwise.
func (o *ProfileTypeURLs) GetURLInfo() []URLInfoType {
	if o == nil || IsNil(o.URLInfo) {
		var ret []URLInfoType
		return ret
	}
	return o.URLInfo
}

// GetURLInfoOk returns a tuple with the URLInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileTypeURLs) GetURLInfoOk() ([]URLInfoType, bool) {
	if o == nil || IsNil(o.URLInfo) {
		return nil, false
	}
	return o.URLInfo, true
}

// HasURLInfo returns a boolean if a field has been set.
func (o *ProfileTypeURLs) HasURLInfo() bool {
	if o != nil && !IsNil(o.URLInfo) {
		return true
	}

	return false
}

// SetURLInfo gets a reference to the given []URLInfoType and assigns it to the URLInfo field.
func (o *ProfileTypeURLs) SetURLInfo(v []URLInfoType) {
	o.URLInfo = v
}

func (o ProfileTypeURLs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileTypeURLs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.URLInfo) {
		toSerialize["uRLInfo"] = o.URLInfo
	}
	return toSerialize, nil
}

type NullableProfileTypeURLs struct {
	value *ProfileTypeURLs
	isSet bool
}

func (v NullableProfileTypeURLs) Get() *ProfileTypeURLs {
	return v.value
}

func (v *NullableProfileTypeURLs) Set(val *ProfileTypeURLs) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileTypeURLs) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileTypeURLs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileTypeURLs(val *ProfileTypeURLs) *NullableProfileTypeURLs {
	return &NullableProfileTypeURLs{value: val, isSet: true}
}

func (v NullableProfileTypeURLs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileTypeURLs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


