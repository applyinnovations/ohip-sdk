/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
	"fmt"
)

// ActivityStatReportCodeType Supported Activity report codes.
type ActivityStatReportCodeType string

// List of activityStatReportCodeType
const (
	ACTIVITYSTATREPORTCODETYPE_ACTIVITIES ActivityStatReportCodeType = "Activities"
)

// All allowed values of ActivityStatReportCodeType enum
var AllowedActivityStatReportCodeTypeEnumValues = []ActivityStatReportCodeType{
	"Activities",
}

func (v *ActivityStatReportCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivityStatReportCodeType(value)
	for _, existing := range AllowedActivityStatReportCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActivityStatReportCodeType", value)
}

// NewActivityStatReportCodeTypeFromValue returns a pointer to a valid ActivityStatReportCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivityStatReportCodeTypeFromValue(v string) (*ActivityStatReportCodeType, error) {
	ev := ActivityStatReportCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActivityStatReportCodeType: valid values are %v", v, AllowedActivityStatReportCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivityStatReportCodeType) IsValid() bool {
	for _, existing := range AllowedActivityStatReportCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to activityStatReportCodeType value
func (v ActivityStatReportCodeType) Ptr() *ActivityStatReportCodeType {
	return &v
}

type NullableActivityStatReportCodeType struct {
	value *ActivityStatReportCodeType
	isSet bool
}

func (v NullableActivityStatReportCodeType) Get() *ActivityStatReportCodeType {
	return v.value
}

func (v *NullableActivityStatReportCodeType) Set(val *ActivityStatReportCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatReportCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatReportCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatReportCodeType(val *ActivityStatReportCodeType) *NullableActivityStatReportCodeType {
	return &NullableActivityStatReportCodeType{value: val, isSet: true}
}

func (v NullableActivityStatReportCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatReportCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

