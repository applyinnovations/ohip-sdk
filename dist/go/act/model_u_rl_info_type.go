/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the URLInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &URLInfoType{}

// URLInfoType Web site address.
type URLInfoType struct {
	Url *URLType `json:"url,omitempty"`
}

// NewURLInfoType instantiates a new URLInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewURLInfoType() *URLInfoType {
	this := URLInfoType{}
	return &this
}

// NewURLInfoTypeWithDefaults instantiates a new URLInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewURLInfoTypeWithDefaults() *URLInfoType {
	this := URLInfoType{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *URLInfoType) GetUrl() URLType {
	if o == nil || IsNil(o.Url) {
		var ret URLType
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *URLInfoType) GetUrlOk() (*URLType, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *URLInfoType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given URLType and assigns it to the Url field.
func (o *URLInfoType) SetUrl(v URLType) {
	o.Url = &v
}

func (o URLInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o URLInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableURLInfoType struct {
	value *URLInfoType
	isSet bool
}

func (v NullableURLInfoType) Get() *URLInfoType {
	return v.value
}

func (v *NullableURLInfoType) Set(val *URLInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableURLInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableURLInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableURLInfoType(val *URLInfoType) *NullableURLInfoType {
	return &NullableURLInfoType{value: val, isSet: true}
}

func (v NullableURLInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableURLInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


