/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
	"fmt"
)

// ActivityStatCategoryCodeType Supported activity statistical category codes.
type ActivityStatCategoryCodeType string

// List of activityStatCategoryCodeType
const (
	ACTIVITYSTATCATEGORYCODETYPE_HOTEL_CODE ActivityStatCategoryCodeType = "HotelCode"
)

// All allowed values of ActivityStatCategoryCodeType enum
var AllowedActivityStatCategoryCodeTypeEnumValues = []ActivityStatCategoryCodeType{
	"HotelCode",
}

func (v *ActivityStatCategoryCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActivityStatCategoryCodeType(value)
	for _, existing := range AllowedActivityStatCategoryCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActivityStatCategoryCodeType", value)
}

// NewActivityStatCategoryCodeTypeFromValue returns a pointer to a valid ActivityStatCategoryCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActivityStatCategoryCodeTypeFromValue(v string) (*ActivityStatCategoryCodeType, error) {
	ev := ActivityStatCategoryCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActivityStatCategoryCodeType: valid values are %v", v, AllowedActivityStatCategoryCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActivityStatCategoryCodeType) IsValid() bool {
	for _, existing := range AllowedActivityStatCategoryCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to activityStatCategoryCodeType value
func (v ActivityStatCategoryCodeType) Ptr() *ActivityStatCategoryCodeType {
	return &v
}

type NullableActivityStatCategoryCodeType struct {
	value *ActivityStatCategoryCodeType
	isSet bool
}

func (v NullableActivityStatCategoryCodeType) Get() *ActivityStatCategoryCodeType {
	return v.value
}

func (v *NullableActivityStatCategoryCodeType) Set(val *ActivityStatCategoryCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatCategoryCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatCategoryCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatCategoryCodeType(val *ActivityStatCategoryCodeType) *NullableActivityStatCategoryCodeType {
	return &NullableActivityStatCategoryCodeType{value: val, isSet: true}
}

func (v NullableActivityStatCategoryCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatCategoryCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

