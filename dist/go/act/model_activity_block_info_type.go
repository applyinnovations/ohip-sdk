/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityBlockInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityBlockInfoType{}

// ActivityBlockInfoType 
type ActivityBlockInfoType struct {
	// Defines descriptive name and unique identification combination.
	BlockIdList []UniqueNameIDType `json:"blockIdList,omitempty"`
	// Block code for the block.
	BlockCode *string `json:"blockCode,omitempty"`
	// Name of the block.
	BlockName *string `json:"blockName,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
	// When true, indicates a primary information.
	Primary *bool `json:"primary,omitempty"`
}

// NewActivityBlockInfoType instantiates a new ActivityBlockInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityBlockInfoType() *ActivityBlockInfoType {
	this := ActivityBlockInfoType{}
	return &this
}

// NewActivityBlockInfoTypeWithDefaults instantiates a new ActivityBlockInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityBlockInfoTypeWithDefaults() *ActivityBlockInfoType {
	this := ActivityBlockInfoType{}
	return &this
}

// GetBlockIdList returns the BlockIdList field value if set, zero value otherwise.
func (o *ActivityBlockInfoType) GetBlockIdList() []UniqueNameIDType {
	if o == nil || IsNil(o.BlockIdList) {
		var ret []UniqueNameIDType
		return ret
	}
	return o.BlockIdList
}

// GetBlockIdListOk returns a tuple with the BlockIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityBlockInfoType) GetBlockIdListOk() ([]UniqueNameIDType, bool) {
	if o == nil || IsNil(o.BlockIdList) {
		return nil, false
	}
	return o.BlockIdList, true
}

// HasBlockIdList returns a boolean if a field has been set.
func (o *ActivityBlockInfoType) HasBlockIdList() bool {
	if o != nil && !IsNil(o.BlockIdList) {
		return true
	}

	return false
}

// SetBlockIdList gets a reference to the given []UniqueNameIDType and assigns it to the BlockIdList field.
func (o *ActivityBlockInfoType) SetBlockIdList(v []UniqueNameIDType) {
	o.BlockIdList = v
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *ActivityBlockInfoType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityBlockInfoType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *ActivityBlockInfoType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *ActivityBlockInfoType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *ActivityBlockInfoType) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityBlockInfoType) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *ActivityBlockInfoType) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *ActivityBlockInfoType) SetBlockName(v string) {
	o.BlockName = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *ActivityBlockInfoType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityBlockInfoType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *ActivityBlockInfoType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *ActivityBlockInfoType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *ActivityBlockInfoType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityBlockInfoType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *ActivityBlockInfoType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *ActivityBlockInfoType) SetPrimary(v bool) {
	o.Primary = &v
}

func (o ActivityBlockInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityBlockInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockIdList) {
		toSerialize["blockIdList"] = o.BlockIdList
	}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	return toSerialize, nil
}

type NullableActivityBlockInfoType struct {
	value *ActivityBlockInfoType
	isSet bool
}

func (v NullableActivityBlockInfoType) Get() *ActivityBlockInfoType {
	return v.value
}

func (v *NullableActivityBlockInfoType) Set(val *ActivityBlockInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityBlockInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityBlockInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityBlockInfoType(val *ActivityBlockInfoType) *NullableActivityBlockInfoType {
	return &NullableActivityBlockInfoType{value: val, isSet: true}
}

func (v NullableActivityBlockInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityBlockInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


