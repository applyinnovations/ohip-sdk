/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityStatType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityStatType{}

// ActivityStatType Since the statistical value can be represented in different measure of units, this element will provide a flexible definition for the supported Opera9 statistical units.
type ActivityStatType struct {
	Code *ActivityStatCodeType `json:"code,omitempty"`
	UnitCategory *StatUnitCategoryType `json:"unitCategory,omitempty"`
	// Unit of measurement or the actual code that defines the value. Eg. CurrencyCode for the Amount Category.
	UnitType *string `json:"unitType,omitempty"`
	// Statistical value.
	UnitValue *float32 `json:"unitValue,omitempty"`
}

// NewActivityStatType instantiates a new ActivityStatType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityStatType() *ActivityStatType {
	this := ActivityStatType{}
	return &this
}

// NewActivityStatTypeWithDefaults instantiates a new ActivityStatType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStatTypeWithDefaults() *ActivityStatType {
	this := ActivityStatType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ActivityStatType) GetCode() ActivityStatCodeType {
	if o == nil || IsNil(o.Code) {
		var ret ActivityStatCodeType
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatType) GetCodeOk() (*ActivityStatCodeType, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ActivityStatType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given ActivityStatCodeType and assigns it to the Code field.
func (o *ActivityStatType) SetCode(v ActivityStatCodeType) {
	o.Code = &v
}

// GetUnitCategory returns the UnitCategory field value if set, zero value otherwise.
func (o *ActivityStatType) GetUnitCategory() StatUnitCategoryType {
	if o == nil || IsNil(o.UnitCategory) {
		var ret StatUnitCategoryType
		return ret
	}
	return *o.UnitCategory
}

// GetUnitCategoryOk returns a tuple with the UnitCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatType) GetUnitCategoryOk() (*StatUnitCategoryType, bool) {
	if o == nil || IsNil(o.UnitCategory) {
		return nil, false
	}
	return o.UnitCategory, true
}

// HasUnitCategory returns a boolean if a field has been set.
func (o *ActivityStatType) HasUnitCategory() bool {
	if o != nil && !IsNil(o.UnitCategory) {
		return true
	}

	return false
}

// SetUnitCategory gets a reference to the given StatUnitCategoryType and assigns it to the UnitCategory field.
func (o *ActivityStatType) SetUnitCategory(v StatUnitCategoryType) {
	o.UnitCategory = &v
}

// GetUnitType returns the UnitType field value if set, zero value otherwise.
func (o *ActivityStatType) GetUnitType() string {
	if o == nil || IsNil(o.UnitType) {
		var ret string
		return ret
	}
	return *o.UnitType
}

// GetUnitTypeOk returns a tuple with the UnitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatType) GetUnitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitType) {
		return nil, false
	}
	return o.UnitType, true
}

// HasUnitType returns a boolean if a field has been set.
func (o *ActivityStatType) HasUnitType() bool {
	if o != nil && !IsNil(o.UnitType) {
		return true
	}

	return false
}

// SetUnitType gets a reference to the given string and assigns it to the UnitType field.
func (o *ActivityStatType) SetUnitType(v string) {
	o.UnitType = &v
}

// GetUnitValue returns the UnitValue field value if set, zero value otherwise.
func (o *ActivityStatType) GetUnitValue() float32 {
	if o == nil || IsNil(o.UnitValue) {
		var ret float32
		return ret
	}
	return *o.UnitValue
}

// GetUnitValueOk returns a tuple with the UnitValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatType) GetUnitValueOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitValue) {
		return nil, false
	}
	return o.UnitValue, true
}

// HasUnitValue returns a boolean if a field has been set.
func (o *ActivityStatType) HasUnitValue() bool {
	if o != nil && !IsNil(o.UnitValue) {
		return true
	}

	return false
}

// SetUnitValue gets a reference to the given float32 and assigns it to the UnitValue field.
func (o *ActivityStatType) SetUnitValue(v float32) {
	o.UnitValue = &v
}

func (o ActivityStatType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityStatType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.UnitCategory) {
		toSerialize["unitCategory"] = o.UnitCategory
	}
	if !IsNil(o.UnitType) {
		toSerialize["unitType"] = o.UnitType
	}
	if !IsNil(o.UnitValue) {
		toSerialize["unitValue"] = o.UnitValue
	}
	return toSerialize, nil
}

type NullableActivityStatType struct {
	value *ActivityStatType
	isSet bool
}

func (v NullableActivityStatType) Get() *ActivityStatType {
	return v.value
}

func (v *NullableActivityStatType) Set(val *ActivityStatType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatType(val *ActivityStatType) *NullableActivityStatType {
	return &NullableActivityStatType{value: val, isSet: true}
}

func (v NullableActivityStatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


