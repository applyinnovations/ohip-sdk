/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the UniqueNameIDType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniqueNameIDType{}

// UniqueNameIDType Defines descriptive name, unique identification, and basic information combination.
type UniqueNameIDType struct {
	// When true, indicates a primary information.
	Primary *bool `json:"primary,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// A reference to the type of object defined by the UniqueID element.
	Type *string `json:"type,omitempty"`
}

// NewUniqueNameIDType instantiates a new UniqueNameIDType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniqueNameIDType() *UniqueNameIDType {
	this := UniqueNameIDType{}
	return &this
}

// NewUniqueNameIDTypeWithDefaults instantiates a new UniqueNameIDType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniqueNameIDTypeWithDefaults() *UniqueNameIDType {
	this := UniqueNameIDType{}
	return &this
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *UniqueNameIDType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniqueNameIDType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *UniqueNameIDType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *UniqueNameIDType) SetPrimary(v bool) {
	o.Primary = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UniqueNameIDType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniqueNameIDType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UniqueNameIDType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UniqueNameIDType) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UniqueNameIDType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniqueNameIDType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UniqueNameIDType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UniqueNameIDType) SetType(v string) {
	o.Type = &v
}

func (o UniqueNameIDType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniqueNameIDType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUniqueNameIDType struct {
	value *UniqueNameIDType
	isSet bool
}

func (v NullableUniqueNameIDType) Get() *UniqueNameIDType {
	return v.value
}

func (v *NullableUniqueNameIDType) Set(val *UniqueNameIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableUniqueNameIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableUniqueNameIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniqueNameIDType(val *UniqueNameIDType) *NullableUniqueNameIDType {
	return &NullableUniqueNameIDType{value: val, isSet: true}
}

func (v NullableUniqueNameIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniqueNameIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


