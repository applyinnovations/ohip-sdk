/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityInfoType{}

// ActivityInfoType Activity related information.
type ActivityInfoType struct {
	// This is the Hotel Code of the Activity.
	HotelId *string `json:"hotelId,omitempty"`
	ActivityClass *ActivityConfigClassType `json:"activityClass,omitempty"`
	// Indicates the Activity Type used for the Activity.
	ActivityType *string `json:"activityType,omitempty"`
	// Indicates the description used for the Activity Type.
	ActivityTypeDescription *string `json:"activityTypeDescription,omitempty"`
	// Indicates Purpose of the Activity.
	ActivityPurpose *string `json:"activityPurpose,omitempty"`
	// Activity Trace code used for the Activity.
	ActivityTraceCode *string `json:"activityTraceCode,omitempty"`
	// Owner of Activity.
	ActivityOwner *string `json:"activityOwner,omitempty"`
	// Start Date time of Activity.
	StartDateTime *string `json:"startDateTime,omitempty"`
	// End Date time of Activity.
	EndDateTime *string `json:"endDateTime,omitempty"`
	Status *ActivityInfoTypeStatus `json:"status,omitempty"`
	// Indicates the outcome of a completed Activity.
	ActivityResult *string `json:"activityResult,omitempty"`
	// Notes associated with an Activity.
	Notes *string `json:"notes,omitempty"`
	// Indicates whether Followup Activity is needed or not.
	Followup *bool `json:"followup,omitempty"`
	// Start Date time of the Followup Activity.
	FollowupStartDateTime *string `json:"followupStartDateTime,omitempty"`
	// Indicates whether Activity has a high priority.
	HighPriority *bool `json:"highPriority,omitempty"`
	// Determines whether the Activity overlaps with another activity with same date and time for the same owner.
	OverlapActivity *bool `json:"overlapActivity,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
}

// NewActivityInfoType instantiates a new ActivityInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityInfoType() *ActivityInfoType {
	this := ActivityInfoType{}
	return &this
}

// NewActivityInfoTypeWithDefaults instantiates a new ActivityInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityInfoTypeWithDefaults() *ActivityInfoType {
	this := ActivityInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ActivityInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ActivityInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ActivityInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetActivityClass returns the ActivityClass field value if set, zero value otherwise.
func (o *ActivityInfoType) GetActivityClass() ActivityConfigClassType {
	if o == nil || IsNil(o.ActivityClass) {
		var ret ActivityConfigClassType
		return ret
	}
	return *o.ActivityClass
}

// GetActivityClassOk returns a tuple with the ActivityClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetActivityClassOk() (*ActivityConfigClassType, bool) {
	if o == nil || IsNil(o.ActivityClass) {
		return nil, false
	}
	return o.ActivityClass, true
}

// HasActivityClass returns a boolean if a field has been set.
func (o *ActivityInfoType) HasActivityClass() bool {
	if o != nil && !IsNil(o.ActivityClass) {
		return true
	}

	return false
}

// SetActivityClass gets a reference to the given ActivityConfigClassType and assigns it to the ActivityClass field.
func (o *ActivityInfoType) SetActivityClass(v ActivityConfigClassType) {
	o.ActivityClass = &v
}

// GetActivityType returns the ActivityType field value if set, zero value otherwise.
func (o *ActivityInfoType) GetActivityType() string {
	if o == nil || IsNil(o.ActivityType) {
		var ret string
		return ret
	}
	return *o.ActivityType
}

// GetActivityTypeOk returns a tuple with the ActivityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetActivityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityType) {
		return nil, false
	}
	return o.ActivityType, true
}

// HasActivityType returns a boolean if a field has been set.
func (o *ActivityInfoType) HasActivityType() bool {
	if o != nil && !IsNil(o.ActivityType) {
		return true
	}

	return false
}

// SetActivityType gets a reference to the given string and assigns it to the ActivityType field.
func (o *ActivityInfoType) SetActivityType(v string) {
	o.ActivityType = &v
}

// GetActivityTypeDescription returns the ActivityTypeDescription field value if set, zero value otherwise.
func (o *ActivityInfoType) GetActivityTypeDescription() string {
	if o == nil || IsNil(o.ActivityTypeDescription) {
		var ret string
		return ret
	}
	return *o.ActivityTypeDescription
}

// GetActivityTypeDescriptionOk returns a tuple with the ActivityTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetActivityTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityTypeDescription) {
		return nil, false
	}
	return o.ActivityTypeDescription, true
}

// HasActivityTypeDescription returns a boolean if a field has been set.
func (o *ActivityInfoType) HasActivityTypeDescription() bool {
	if o != nil && !IsNil(o.ActivityTypeDescription) {
		return true
	}

	return false
}

// SetActivityTypeDescription gets a reference to the given string and assigns it to the ActivityTypeDescription field.
func (o *ActivityInfoType) SetActivityTypeDescription(v string) {
	o.ActivityTypeDescription = &v
}

// GetActivityPurpose returns the ActivityPurpose field value if set, zero value otherwise.
func (o *ActivityInfoType) GetActivityPurpose() string {
	if o == nil || IsNil(o.ActivityPurpose) {
		var ret string
		return ret
	}
	return *o.ActivityPurpose
}

// GetActivityPurposeOk returns a tuple with the ActivityPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetActivityPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityPurpose) {
		return nil, false
	}
	return o.ActivityPurpose, true
}

// HasActivityPurpose returns a boolean if a field has been set.
func (o *ActivityInfoType) HasActivityPurpose() bool {
	if o != nil && !IsNil(o.ActivityPurpose) {
		return true
	}

	return false
}

// SetActivityPurpose gets a reference to the given string and assigns it to the ActivityPurpose field.
func (o *ActivityInfoType) SetActivityPurpose(v string) {
	o.ActivityPurpose = &v
}

// GetActivityTraceCode returns the ActivityTraceCode field value if set, zero value otherwise.
func (o *ActivityInfoType) GetActivityTraceCode() string {
	if o == nil || IsNil(o.ActivityTraceCode) {
		var ret string
		return ret
	}
	return *o.ActivityTraceCode
}

// GetActivityTraceCodeOk returns a tuple with the ActivityTraceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetActivityTraceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityTraceCode) {
		return nil, false
	}
	return o.ActivityTraceCode, true
}

// HasActivityTraceCode returns a boolean if a field has been set.
func (o *ActivityInfoType) HasActivityTraceCode() bool {
	if o != nil && !IsNil(o.ActivityTraceCode) {
		return true
	}

	return false
}

// SetActivityTraceCode gets a reference to the given string and assigns it to the ActivityTraceCode field.
func (o *ActivityInfoType) SetActivityTraceCode(v string) {
	o.ActivityTraceCode = &v
}

// GetActivityOwner returns the ActivityOwner field value if set, zero value otherwise.
func (o *ActivityInfoType) GetActivityOwner() string {
	if o == nil || IsNil(o.ActivityOwner) {
		var ret string
		return ret
	}
	return *o.ActivityOwner
}

// GetActivityOwnerOk returns a tuple with the ActivityOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetActivityOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityOwner) {
		return nil, false
	}
	return o.ActivityOwner, true
}

// HasActivityOwner returns a boolean if a field has been set.
func (o *ActivityInfoType) HasActivityOwner() bool {
	if o != nil && !IsNil(o.ActivityOwner) {
		return true
	}

	return false
}

// SetActivityOwner gets a reference to the given string and assigns it to the ActivityOwner field.
func (o *ActivityInfoType) SetActivityOwner(v string) {
	o.ActivityOwner = &v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise.
func (o *ActivityInfoType) GetStartDateTime() string {
	if o == nil || IsNil(o.StartDateTime) {
		var ret string
		return ret
	}
	return *o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetStartDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartDateTime) {
		return nil, false
	}
	return o.StartDateTime, true
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *ActivityInfoType) HasStartDateTime() bool {
	if o != nil && !IsNil(o.StartDateTime) {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given string and assigns it to the StartDateTime field.
func (o *ActivityInfoType) SetStartDateTime(v string) {
	o.StartDateTime = &v
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise.
func (o *ActivityInfoType) GetEndDateTime() string {
	if o == nil || IsNil(o.EndDateTime) {
		var ret string
		return ret
	}
	return *o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetEndDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndDateTime) {
		return nil, false
	}
	return o.EndDateTime, true
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *ActivityInfoType) HasEndDateTime() bool {
	if o != nil && !IsNil(o.EndDateTime) {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given string and assigns it to the EndDateTime field.
func (o *ActivityInfoType) SetEndDateTime(v string) {
	o.EndDateTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActivityInfoType) GetStatus() ActivityInfoTypeStatus {
	if o == nil || IsNil(o.Status) {
		var ret ActivityInfoTypeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetStatusOk() (*ActivityInfoTypeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActivityInfoType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ActivityInfoTypeStatus and assigns it to the Status field.
func (o *ActivityInfoType) SetStatus(v ActivityInfoTypeStatus) {
	o.Status = &v
}

// GetActivityResult returns the ActivityResult field value if set, zero value otherwise.
func (o *ActivityInfoType) GetActivityResult() string {
	if o == nil || IsNil(o.ActivityResult) {
		var ret string
		return ret
	}
	return *o.ActivityResult
}

// GetActivityResultOk returns a tuple with the ActivityResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetActivityResultOk() (*string, bool) {
	if o == nil || IsNil(o.ActivityResult) {
		return nil, false
	}
	return o.ActivityResult, true
}

// HasActivityResult returns a boolean if a field has been set.
func (o *ActivityInfoType) HasActivityResult() bool {
	if o != nil && !IsNil(o.ActivityResult) {
		return true
	}

	return false
}

// SetActivityResult gets a reference to the given string and assigns it to the ActivityResult field.
func (o *ActivityInfoType) SetActivityResult(v string) {
	o.ActivityResult = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ActivityInfoType) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ActivityInfoType) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *ActivityInfoType) SetNotes(v string) {
	o.Notes = &v
}

// GetFollowup returns the Followup field value if set, zero value otherwise.
func (o *ActivityInfoType) GetFollowup() bool {
	if o == nil || IsNil(o.Followup) {
		var ret bool
		return ret
	}
	return *o.Followup
}

// GetFollowupOk returns a tuple with the Followup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetFollowupOk() (*bool, bool) {
	if o == nil || IsNil(o.Followup) {
		return nil, false
	}
	return o.Followup, true
}

// HasFollowup returns a boolean if a field has been set.
func (o *ActivityInfoType) HasFollowup() bool {
	if o != nil && !IsNil(o.Followup) {
		return true
	}

	return false
}

// SetFollowup gets a reference to the given bool and assigns it to the Followup field.
func (o *ActivityInfoType) SetFollowup(v bool) {
	o.Followup = &v
}

// GetFollowupStartDateTime returns the FollowupStartDateTime field value if set, zero value otherwise.
func (o *ActivityInfoType) GetFollowupStartDateTime() string {
	if o == nil || IsNil(o.FollowupStartDateTime) {
		var ret string
		return ret
	}
	return *o.FollowupStartDateTime
}

// GetFollowupStartDateTimeOk returns a tuple with the FollowupStartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetFollowupStartDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.FollowupStartDateTime) {
		return nil, false
	}
	return o.FollowupStartDateTime, true
}

// HasFollowupStartDateTime returns a boolean if a field has been set.
func (o *ActivityInfoType) HasFollowupStartDateTime() bool {
	if o != nil && !IsNil(o.FollowupStartDateTime) {
		return true
	}

	return false
}

// SetFollowupStartDateTime gets a reference to the given string and assigns it to the FollowupStartDateTime field.
func (o *ActivityInfoType) SetFollowupStartDateTime(v string) {
	o.FollowupStartDateTime = &v
}

// GetHighPriority returns the HighPriority field value if set, zero value otherwise.
func (o *ActivityInfoType) GetHighPriority() bool {
	if o == nil || IsNil(o.HighPriority) {
		var ret bool
		return ret
	}
	return *o.HighPriority
}

// GetHighPriorityOk returns a tuple with the HighPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetHighPriorityOk() (*bool, bool) {
	if o == nil || IsNil(o.HighPriority) {
		return nil, false
	}
	return o.HighPriority, true
}

// HasHighPriority returns a boolean if a field has been set.
func (o *ActivityInfoType) HasHighPriority() bool {
	if o != nil && !IsNil(o.HighPriority) {
		return true
	}

	return false
}

// SetHighPriority gets a reference to the given bool and assigns it to the HighPriority field.
func (o *ActivityInfoType) SetHighPriority(v bool) {
	o.HighPriority = &v
}

// GetOverlapActivity returns the OverlapActivity field value if set, zero value otherwise.
func (o *ActivityInfoType) GetOverlapActivity() bool {
	if o == nil || IsNil(o.OverlapActivity) {
		var ret bool
		return ret
	}
	return *o.OverlapActivity
}

// GetOverlapActivityOk returns a tuple with the OverlapActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetOverlapActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.OverlapActivity) {
		return nil, false
	}
	return o.OverlapActivity, true
}

// HasOverlapActivity returns a boolean if a field has been set.
func (o *ActivityInfoType) HasOverlapActivity() bool {
	if o != nil && !IsNil(o.OverlapActivity) {
		return true
	}

	return false
}

// SetOverlapActivity gets a reference to the given bool and assigns it to the OverlapActivity field.
func (o *ActivityInfoType) SetOverlapActivity(v bool) {
	o.OverlapActivity = &v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *ActivityInfoType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *ActivityInfoType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *ActivityInfoType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *ActivityInfoType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *ActivityInfoType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *ActivityInfoType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *ActivityInfoType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *ActivityInfoType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *ActivityInfoType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *ActivityInfoType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *ActivityInfoType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *ActivityInfoType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

func (o ActivityInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ActivityClass) {
		toSerialize["activityClass"] = o.ActivityClass
	}
	if !IsNil(o.ActivityType) {
		toSerialize["activityType"] = o.ActivityType
	}
	if !IsNil(o.ActivityTypeDescription) {
		toSerialize["activityTypeDescription"] = o.ActivityTypeDescription
	}
	if !IsNil(o.ActivityPurpose) {
		toSerialize["activityPurpose"] = o.ActivityPurpose
	}
	if !IsNil(o.ActivityTraceCode) {
		toSerialize["activityTraceCode"] = o.ActivityTraceCode
	}
	if !IsNil(o.ActivityOwner) {
		toSerialize["activityOwner"] = o.ActivityOwner
	}
	if !IsNil(o.StartDateTime) {
		toSerialize["startDateTime"] = o.StartDateTime
	}
	if !IsNil(o.EndDateTime) {
		toSerialize["endDateTime"] = o.EndDateTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ActivityResult) {
		toSerialize["activityResult"] = o.ActivityResult
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Followup) {
		toSerialize["followup"] = o.Followup
	}
	if !IsNil(o.FollowupStartDateTime) {
		toSerialize["followupStartDateTime"] = o.FollowupStartDateTime
	}
	if !IsNil(o.HighPriority) {
		toSerialize["highPriority"] = o.HighPriority
	}
	if !IsNil(o.OverlapActivity) {
		toSerialize["overlapActivity"] = o.OverlapActivity
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	return toSerialize, nil
}

type NullableActivityInfoType struct {
	value *ActivityInfoType
	isSet bool
}

func (v NullableActivityInfoType) Get() *ActivityInfoType {
	return v.value
}

func (v *NullableActivityInfoType) Set(val *ActivityInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityInfoType(val *ActivityInfoType) *NullableActivityInfoType {
	return &NullableActivityInfoType{value: val, isSet: true}
}

func (v NullableActivityInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


