/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityStatReportType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityStatReportType{}

// ActivityStatReportType Base abstraction defining all details needed to create a statistical report.
type ActivityStatReportType struct {
	// Statistical date of the requested report.
	CalendarDate *string `json:"calendarDate,omitempty"`
	// The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
	ChainCode *string `json:"chainCode,omitempty"`
	// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
	ChainName *string `json:"chainName,omitempty"`
	Description *string `json:"description,omitempty"`
	// The IATA city code; for example DCA, ORD.
	HotelCityCode *string `json:"hotelCityCode,omitempty"`
	// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
	HotelCodeContext *string `json:"hotelCodeContext,omitempty"`
	// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
	HotelId *string `json:"hotelId,omitempty"`
	// A text field used to communicate the proper name of the hotel.
	HotelName *string `json:"hotelName,omitempty"`
	ReportCode *ActivityStatReportCodeType `json:"reportCode,omitempty"`
	StatCategory []ActivityStatCategoryType `json:"statCategory,omitempty"`
}

// NewActivityStatReportType instantiates a new ActivityStatReportType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityStatReportType() *ActivityStatReportType {
	this := ActivityStatReportType{}
	return &this
}

// NewActivityStatReportTypeWithDefaults instantiates a new ActivityStatReportType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStatReportTypeWithDefaults() *ActivityStatReportType {
	this := ActivityStatReportType{}
	return &this
}

// GetCalendarDate returns the CalendarDate field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetCalendarDate() string {
	if o == nil || IsNil(o.CalendarDate) {
		var ret string
		return ret
	}
	return *o.CalendarDate
}

// GetCalendarDateOk returns a tuple with the CalendarDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetCalendarDateOk() (*string, bool) {
	if o == nil || IsNil(o.CalendarDate) {
		return nil, false
	}
	return o.CalendarDate, true
}

// HasCalendarDate returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasCalendarDate() bool {
	if o != nil && !IsNil(o.CalendarDate) {
		return true
	}

	return false
}

// SetCalendarDate gets a reference to the given string and assigns it to the CalendarDate field.
func (o *ActivityStatReportType) SetCalendarDate(v string) {
	o.CalendarDate = &v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *ActivityStatReportType) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetChainName returns the ChainName field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetChainName() string {
	if o == nil || IsNil(o.ChainName) {
		var ret string
		return ret
	}
	return *o.ChainName
}

// GetChainNameOk returns a tuple with the ChainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetChainNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChainName) {
		return nil, false
	}
	return o.ChainName, true
}

// HasChainName returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasChainName() bool {
	if o != nil && !IsNil(o.ChainName) {
		return true
	}

	return false
}

// SetChainName gets a reference to the given string and assigns it to the ChainName field.
func (o *ActivityStatReportType) SetChainName(v string) {
	o.ChainName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ActivityStatReportType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelCityCode returns the HotelCityCode field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetHotelCityCode() string {
	if o == nil || IsNil(o.HotelCityCode) {
		var ret string
		return ret
	}
	return *o.HotelCityCode
}

// GetHotelCityCodeOk returns a tuple with the HotelCityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetHotelCityCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCityCode) {
		return nil, false
	}
	return o.HotelCityCode, true
}

// HasHotelCityCode returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasHotelCityCode() bool {
	if o != nil && !IsNil(o.HotelCityCode) {
		return true
	}

	return false
}

// SetHotelCityCode gets a reference to the given string and assigns it to the HotelCityCode field.
func (o *ActivityStatReportType) SetHotelCityCode(v string) {
	o.HotelCityCode = &v
}

// GetHotelCodeContext returns the HotelCodeContext field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetHotelCodeContext() string {
	if o == nil || IsNil(o.HotelCodeContext) {
		var ret string
		return ret
	}
	return *o.HotelCodeContext
}

// GetHotelCodeContextOk returns a tuple with the HotelCodeContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetHotelCodeContextOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCodeContext) {
		return nil, false
	}
	return o.HotelCodeContext, true
}

// HasHotelCodeContext returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasHotelCodeContext() bool {
	if o != nil && !IsNil(o.HotelCodeContext) {
		return true
	}

	return false
}

// SetHotelCodeContext gets a reference to the given string and assigns it to the HotelCodeContext field.
func (o *ActivityStatReportType) SetHotelCodeContext(v string) {
	o.HotelCodeContext = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ActivityStatReportType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *ActivityStatReportType) SetHotelName(v string) {
	o.HotelName = &v
}

// GetReportCode returns the ReportCode field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetReportCode() ActivityStatReportCodeType {
	if o == nil || IsNil(o.ReportCode) {
		var ret ActivityStatReportCodeType
		return ret
	}
	return *o.ReportCode
}

// GetReportCodeOk returns a tuple with the ReportCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetReportCodeOk() (*ActivityStatReportCodeType, bool) {
	if o == nil || IsNil(o.ReportCode) {
		return nil, false
	}
	return o.ReportCode, true
}

// HasReportCode returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasReportCode() bool {
	if o != nil && !IsNil(o.ReportCode) {
		return true
	}

	return false
}

// SetReportCode gets a reference to the given ActivityStatReportCodeType and assigns it to the ReportCode field.
func (o *ActivityStatReportType) SetReportCode(v ActivityStatReportCodeType) {
	o.ReportCode = &v
}

// GetStatCategory returns the StatCategory field value if set, zero value otherwise.
func (o *ActivityStatReportType) GetStatCategory() []ActivityStatCategoryType {
	if o == nil || IsNil(o.StatCategory) {
		var ret []ActivityStatCategoryType
		return ret
	}
	return o.StatCategory
}

// GetStatCategoryOk returns a tuple with the StatCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatReportType) GetStatCategoryOk() ([]ActivityStatCategoryType, bool) {
	if o == nil || IsNil(o.StatCategory) {
		return nil, false
	}
	return o.StatCategory, true
}

// HasStatCategory returns a boolean if a field has been set.
func (o *ActivityStatReportType) HasStatCategory() bool {
	if o != nil && !IsNil(o.StatCategory) {
		return true
	}

	return false
}

// SetStatCategory gets a reference to the given []ActivityStatCategoryType and assigns it to the StatCategory field.
func (o *ActivityStatReportType) SetStatCategory(v []ActivityStatCategoryType) {
	o.StatCategory = v
}

func (o ActivityStatReportType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityStatReportType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalendarDate) {
		toSerialize["calendarDate"] = o.CalendarDate
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.ChainName) {
		toSerialize["chainName"] = o.ChainName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelCityCode) {
		toSerialize["hotelCityCode"] = o.HotelCityCode
	}
	if !IsNil(o.HotelCodeContext) {
		toSerialize["hotelCodeContext"] = o.HotelCodeContext
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.ReportCode) {
		toSerialize["reportCode"] = o.ReportCode
	}
	if !IsNil(o.StatCategory) {
		toSerialize["statCategory"] = o.StatCategory
	}
	return toSerialize, nil
}

type NullableActivityStatReportType struct {
	value *ActivityStatReportType
	isSet bool
}

func (v NullableActivityStatReportType) Get() *ActivityStatReportType {
	return v.value
}

func (v *NullableActivityStatReportType) Set(val *ActivityStatReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatReportType(val *ActivityStatReportType) *NullableActivityStatReportType {
	return &NullableActivityStatReportType{value: val, isSet: true}
}

func (v NullableActivityStatReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


