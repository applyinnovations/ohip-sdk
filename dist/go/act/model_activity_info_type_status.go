/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivityInfoTypeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityInfoTypeStatus{}

// ActivityInfoTypeStatus Completion status of Activity.
type ActivityInfoTypeStatus struct {
	// Name of person who completed the Activity.
	CompletedBy *string `json:"completedBy,omitempty"`
	// Date on which the Activity was completed.
	CompletedOn *string `json:"completedOn,omitempty"`
	// Indicates whether Activity is Completed or not.
	Completed *bool `json:"completed,omitempty"`
}

// NewActivityInfoTypeStatus instantiates a new ActivityInfoTypeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityInfoTypeStatus() *ActivityInfoTypeStatus {
	this := ActivityInfoTypeStatus{}
	return &this
}

// NewActivityInfoTypeStatusWithDefaults instantiates a new ActivityInfoTypeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityInfoTypeStatusWithDefaults() *ActivityInfoTypeStatus {
	this := ActivityInfoTypeStatus{}
	return &this
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise.
func (o *ActivityInfoTypeStatus) GetCompletedBy() string {
	if o == nil || IsNil(o.CompletedBy) {
		var ret string
		return ret
	}
	return *o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoTypeStatus) GetCompletedByOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedBy) {
		return nil, false
	}
	return o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *ActivityInfoTypeStatus) HasCompletedBy() bool {
	if o != nil && !IsNil(o.CompletedBy) {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given string and assigns it to the CompletedBy field.
func (o *ActivityInfoTypeStatus) SetCompletedBy(v string) {
	o.CompletedBy = &v
}

// GetCompletedOn returns the CompletedOn field value if set, zero value otherwise.
func (o *ActivityInfoTypeStatus) GetCompletedOn() string {
	if o == nil || IsNil(o.CompletedOn) {
		var ret string
		return ret
	}
	return *o.CompletedOn
}

// GetCompletedOnOk returns a tuple with the CompletedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoTypeStatus) GetCompletedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CompletedOn) {
		return nil, false
	}
	return o.CompletedOn, true
}

// HasCompletedOn returns a boolean if a field has been set.
func (o *ActivityInfoTypeStatus) HasCompletedOn() bool {
	if o != nil && !IsNil(o.CompletedOn) {
		return true
	}

	return false
}

// SetCompletedOn gets a reference to the given string and assigns it to the CompletedOn field.
func (o *ActivityInfoTypeStatus) SetCompletedOn(v string) {
	o.CompletedOn = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *ActivityInfoTypeStatus) GetCompleted() bool {
	if o == nil || IsNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityInfoTypeStatus) GetCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *ActivityInfoTypeStatus) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *ActivityInfoTypeStatus) SetCompleted(v bool) {
	o.Completed = &v
}

func (o ActivityInfoTypeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityInfoTypeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompletedBy) {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if !IsNil(o.CompletedOn) {
		toSerialize["completedOn"] = o.CompletedOn
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	return toSerialize, nil
}

type NullableActivityInfoTypeStatus struct {
	value *ActivityInfoTypeStatus
	isSet bool
}

func (v NullableActivityInfoTypeStatus) Get() *ActivityInfoTypeStatus {
	return v.value
}

func (v *NullableActivityInfoTypeStatus) Set(val *ActivityInfoTypeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityInfoTypeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityInfoTypeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityInfoTypeStatus(val *ActivityInfoTypeStatus) *NullableActivityInfoTypeStatus {
	return &NullableActivityInfoTypeStatus{value: val, isSet: true}
}

func (v NullableActivityInfoTypeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityInfoTypeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


