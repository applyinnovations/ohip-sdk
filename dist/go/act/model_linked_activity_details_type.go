/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the LinkedActivityDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkedActivityDetailsType{}

// LinkedActivityDetailsType Linked Activity Related Information.
type LinkedActivityDetailsType struct {
	ActivityId *ActivityId `json:"activityId,omitempty"`
	LinkedActivityDetail *ActivityInfoType `json:"linkedActivityDetail,omitempty"`
}

// NewLinkedActivityDetailsType instantiates a new LinkedActivityDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedActivityDetailsType() *LinkedActivityDetailsType {
	this := LinkedActivityDetailsType{}
	return &this
}

// NewLinkedActivityDetailsTypeWithDefaults instantiates a new LinkedActivityDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedActivityDetailsTypeWithDefaults() *LinkedActivityDetailsType {
	this := LinkedActivityDetailsType{}
	return &this
}

// GetActivityId returns the ActivityId field value if set, zero value otherwise.
func (o *LinkedActivityDetailsType) GetActivityId() ActivityId {
	if o == nil || IsNil(o.ActivityId) {
		var ret ActivityId
		return ret
	}
	return *o.ActivityId
}

// GetActivityIdOk returns a tuple with the ActivityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedActivityDetailsType) GetActivityIdOk() (*ActivityId, bool) {
	if o == nil || IsNil(o.ActivityId) {
		return nil, false
	}
	return o.ActivityId, true
}

// HasActivityId returns a boolean if a field has been set.
func (o *LinkedActivityDetailsType) HasActivityId() bool {
	if o != nil && !IsNil(o.ActivityId) {
		return true
	}

	return false
}

// SetActivityId gets a reference to the given ActivityId and assigns it to the ActivityId field.
func (o *LinkedActivityDetailsType) SetActivityId(v ActivityId) {
	o.ActivityId = &v
}

// GetLinkedActivityDetail returns the LinkedActivityDetail field value if set, zero value otherwise.
func (o *LinkedActivityDetailsType) GetLinkedActivityDetail() ActivityInfoType {
	if o == nil || IsNil(o.LinkedActivityDetail) {
		var ret ActivityInfoType
		return ret
	}
	return *o.LinkedActivityDetail
}

// GetLinkedActivityDetailOk returns a tuple with the LinkedActivityDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkedActivityDetailsType) GetLinkedActivityDetailOk() (*ActivityInfoType, bool) {
	if o == nil || IsNil(o.LinkedActivityDetail) {
		return nil, false
	}
	return o.LinkedActivityDetail, true
}

// HasLinkedActivityDetail returns a boolean if a field has been set.
func (o *LinkedActivityDetailsType) HasLinkedActivityDetail() bool {
	if o != nil && !IsNil(o.LinkedActivityDetail) {
		return true
	}

	return false
}

// SetLinkedActivityDetail gets a reference to the given ActivityInfoType and assigns it to the LinkedActivityDetail field.
func (o *LinkedActivityDetailsType) SetLinkedActivityDetail(v ActivityInfoType) {
	o.LinkedActivityDetail = &v
}

func (o LinkedActivityDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkedActivityDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityId) {
		toSerialize["activityId"] = o.ActivityId
	}
	if !IsNil(o.LinkedActivityDetail) {
		toSerialize["linkedActivityDetail"] = o.LinkedActivityDetail
	}
	return toSerialize, nil
}

type NullableLinkedActivityDetailsType struct {
	value *LinkedActivityDetailsType
	isSet bool
}

func (v NullableLinkedActivityDetailsType) Get() *LinkedActivityDetailsType {
	return v.value
}

func (v *NullableLinkedActivityDetailsType) Set(val *LinkedActivityDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedActivityDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedActivityDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedActivityDetailsType(val *LinkedActivityDetailsType) *NullableLinkedActivityDetailsType {
	return &NullableLinkedActivityDetailsType{value: val, isSet: true}
}

func (v NullableLinkedActivityDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedActivityDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


