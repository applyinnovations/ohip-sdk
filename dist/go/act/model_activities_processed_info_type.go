/*
OPERA Cloud Activity API

APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package act

import (
	"encoding/json"
)

// checks if the ActivitiesProcessedInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivitiesProcessedInfoType{}

// ActivitiesProcessedInfoType Status/Info of the processed activities.
type ActivitiesProcessedInfoType struct {
	ActivityIdRecord *ActivityIdRecord `json:"activityIdRecord,omitempty"`
	// Reason for not processing the activity.
	Reason *string `json:"reason,omitempty"`
	// Flag to indicate the warning messages from the API
	ProcessingInfoType *string `json:"processingInfoType,omitempty"`
	// Erorr/Warning code for not processing the activity.
	ProcessingInfoCode *string `json:"processingInfoCode,omitempty"`
}

// NewActivitiesProcessedInfoType instantiates a new ActivitiesProcessedInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivitiesProcessedInfoType() *ActivitiesProcessedInfoType {
	this := ActivitiesProcessedInfoType{}
	return &this
}

// NewActivitiesProcessedInfoTypeWithDefaults instantiates a new ActivitiesProcessedInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivitiesProcessedInfoTypeWithDefaults() *ActivitiesProcessedInfoType {
	this := ActivitiesProcessedInfoType{}
	return &this
}

// GetActivityIdRecord returns the ActivityIdRecord field value if set, zero value otherwise.
func (o *ActivitiesProcessedInfoType) GetActivityIdRecord() ActivityIdRecord {
	if o == nil || IsNil(o.ActivityIdRecord) {
		var ret ActivityIdRecord
		return ret
	}
	return *o.ActivityIdRecord
}

// GetActivityIdRecordOk returns a tuple with the ActivityIdRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesProcessedInfoType) GetActivityIdRecordOk() (*ActivityIdRecord, bool) {
	if o == nil || IsNil(o.ActivityIdRecord) {
		return nil, false
	}
	return o.ActivityIdRecord, true
}

// HasActivityIdRecord returns a boolean if a field has been set.
func (o *ActivitiesProcessedInfoType) HasActivityIdRecord() bool {
	if o != nil && !IsNil(o.ActivityIdRecord) {
		return true
	}

	return false
}

// SetActivityIdRecord gets a reference to the given ActivityIdRecord and assigns it to the ActivityIdRecord field.
func (o *ActivitiesProcessedInfoType) SetActivityIdRecord(v ActivityIdRecord) {
	o.ActivityIdRecord = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ActivitiesProcessedInfoType) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesProcessedInfoType) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ActivitiesProcessedInfoType) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ActivitiesProcessedInfoType) SetReason(v string) {
	o.Reason = &v
}

// GetProcessingInfoType returns the ProcessingInfoType field value if set, zero value otherwise.
func (o *ActivitiesProcessedInfoType) GetProcessingInfoType() string {
	if o == nil || IsNil(o.ProcessingInfoType) {
		var ret string
		return ret
	}
	return *o.ProcessingInfoType
}

// GetProcessingInfoTypeOk returns a tuple with the ProcessingInfoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesProcessedInfoType) GetProcessingInfoTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingInfoType) {
		return nil, false
	}
	return o.ProcessingInfoType, true
}

// HasProcessingInfoType returns a boolean if a field has been set.
func (o *ActivitiesProcessedInfoType) HasProcessingInfoType() bool {
	if o != nil && !IsNil(o.ProcessingInfoType) {
		return true
	}

	return false
}

// SetProcessingInfoType gets a reference to the given string and assigns it to the ProcessingInfoType field.
func (o *ActivitiesProcessedInfoType) SetProcessingInfoType(v string) {
	o.ProcessingInfoType = &v
}

// GetProcessingInfoCode returns the ProcessingInfoCode field value if set, zero value otherwise.
func (o *ActivitiesProcessedInfoType) GetProcessingInfoCode() string {
	if o == nil || IsNil(o.ProcessingInfoCode) {
		var ret string
		return ret
	}
	return *o.ProcessingInfoCode
}

// GetProcessingInfoCodeOk returns a tuple with the ProcessingInfoCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivitiesProcessedInfoType) GetProcessingInfoCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingInfoCode) {
		return nil, false
	}
	return o.ProcessingInfoCode, true
}

// HasProcessingInfoCode returns a boolean if a field has been set.
func (o *ActivitiesProcessedInfoType) HasProcessingInfoCode() bool {
	if o != nil && !IsNil(o.ProcessingInfoCode) {
		return true
	}

	return false
}

// SetProcessingInfoCode gets a reference to the given string and assigns it to the ProcessingInfoCode field.
func (o *ActivitiesProcessedInfoType) SetProcessingInfoCode(v string) {
	o.ProcessingInfoCode = &v
}

func (o ActivitiesProcessedInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivitiesProcessedInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivityIdRecord) {
		toSerialize["activityIdRecord"] = o.ActivityIdRecord
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ProcessingInfoType) {
		toSerialize["processingInfoType"] = o.ProcessingInfoType
	}
	if !IsNil(o.ProcessingInfoCode) {
		toSerialize["processingInfoCode"] = o.ProcessingInfoCode
	}
	return toSerialize, nil
}

type NullableActivitiesProcessedInfoType struct {
	value *ActivitiesProcessedInfoType
	isSet bool
}

func (v NullableActivitiesProcessedInfoType) Get() *ActivitiesProcessedInfoType {
	return v.value
}

func (v *NullableActivitiesProcessedInfoType) Set(val *ActivitiesProcessedInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivitiesProcessedInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivitiesProcessedInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivitiesProcessedInfoType(val *ActivitiesProcessedInfoType) *NullableActivitiesProcessedInfoType {
	return &NullableActivitiesProcessedInfoType{value: val, isSet: true}
}

func (v NullableActivitiesProcessedInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivitiesProcessedInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


