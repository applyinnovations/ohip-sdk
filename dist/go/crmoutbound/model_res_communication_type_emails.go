/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the ResCommunicationTypeEmails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResCommunicationTypeEmails{}

// ResCommunicationTypeEmails List of email address for the customer.
type ResCommunicationTypeEmails struct {
	// Collection of Detailed information on an eMail address for the customer.
	EmailInfo []EmailInfoType `json:"emailInfo,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	AllRowsFetched *bool `json:"allRowsFetched,omitempty"`
	// Total number of rows queried
	TotalRows *int32 `json:"totalRows,omitempty"`
}

// NewResCommunicationTypeEmails instantiates a new ResCommunicationTypeEmails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResCommunicationTypeEmails() *ResCommunicationTypeEmails {
	this := ResCommunicationTypeEmails{}
	return &this
}

// NewResCommunicationTypeEmailsWithDefaults instantiates a new ResCommunicationTypeEmails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResCommunicationTypeEmailsWithDefaults() *ResCommunicationTypeEmails {
	this := ResCommunicationTypeEmails{}
	return &this
}

// GetEmailInfo returns the EmailInfo field value if set, zero value otherwise.
func (o *ResCommunicationTypeEmails) GetEmailInfo() []EmailInfoType {
	if o == nil || IsNil(o.EmailInfo) {
		var ret []EmailInfoType
		return ret
	}
	return o.EmailInfo
}

// GetEmailInfoOk returns a tuple with the EmailInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResCommunicationTypeEmails) GetEmailInfoOk() ([]EmailInfoType, bool) {
	if o == nil || IsNil(o.EmailInfo) {
		return nil, false
	}
	return o.EmailInfo, true
}

// HasEmailInfo returns a boolean if a field has been set.
func (o *ResCommunicationTypeEmails) HasEmailInfo() bool {
	if o != nil && !IsNil(o.EmailInfo) {
		return true
	}

	return false
}

// SetEmailInfo gets a reference to the given []EmailInfoType and assigns it to the EmailInfo field.
func (o *ResCommunicationTypeEmails) SetEmailInfo(v []EmailInfoType) {
	o.EmailInfo = v
}

// GetAllRowsFetched returns the AllRowsFetched field value if set, zero value otherwise.
func (o *ResCommunicationTypeEmails) GetAllRowsFetched() bool {
	if o == nil || IsNil(o.AllRowsFetched) {
		var ret bool
		return ret
	}
	return *o.AllRowsFetched
}

// GetAllRowsFetchedOk returns a tuple with the AllRowsFetched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResCommunicationTypeEmails) GetAllRowsFetchedOk() (*bool, bool) {
	if o == nil || IsNil(o.AllRowsFetched) {
		return nil, false
	}
	return o.AllRowsFetched, true
}

// HasAllRowsFetched returns a boolean if a field has been set.
func (o *ResCommunicationTypeEmails) HasAllRowsFetched() bool {
	if o != nil && !IsNil(o.AllRowsFetched) {
		return true
	}

	return false
}

// SetAllRowsFetched gets a reference to the given bool and assigns it to the AllRowsFetched field.
func (o *ResCommunicationTypeEmails) SetAllRowsFetched(v bool) {
	o.AllRowsFetched = &v
}

// GetTotalRows returns the TotalRows field value if set, zero value otherwise.
func (o *ResCommunicationTypeEmails) GetTotalRows() int32 {
	if o == nil || IsNil(o.TotalRows) {
		var ret int32
		return ret
	}
	return *o.TotalRows
}

// GetTotalRowsOk returns a tuple with the TotalRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResCommunicationTypeEmails) GetTotalRowsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRows) {
		return nil, false
	}
	return o.TotalRows, true
}

// HasTotalRows returns a boolean if a field has been set.
func (o *ResCommunicationTypeEmails) HasTotalRows() bool {
	if o != nil && !IsNil(o.TotalRows) {
		return true
	}

	return false
}

// SetTotalRows gets a reference to the given int32 and assigns it to the TotalRows field.
func (o *ResCommunicationTypeEmails) SetTotalRows(v int32) {
	o.TotalRows = &v
}

func (o ResCommunicationTypeEmails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResCommunicationTypeEmails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailInfo) {
		toSerialize["emailInfo"] = o.EmailInfo
	}
	if !IsNil(o.AllRowsFetched) {
		toSerialize["allRowsFetched"] = o.AllRowsFetched
	}
	if !IsNil(o.TotalRows) {
		toSerialize["totalRows"] = o.TotalRows
	}
	return toSerialize, nil
}

type NullableResCommunicationTypeEmails struct {
	value *ResCommunicationTypeEmails
	isSet bool
}

func (v NullableResCommunicationTypeEmails) Get() *ResCommunicationTypeEmails {
	return v.value
}

func (v *NullableResCommunicationTypeEmails) Set(val *ResCommunicationTypeEmails) {
	v.value = val
	v.isSet = true
}

func (v NullableResCommunicationTypeEmails) IsSet() bool {
	return v.isSet
}

func (v *NullableResCommunicationTypeEmails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResCommunicationTypeEmails(val *ResCommunicationTypeEmails) *NullableResCommunicationTypeEmails {
	return &NullableResCommunicationTypeEmails{value: val, isSet: true}
}

func (v NullableResCommunicationTypeEmails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResCommunicationTypeEmails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


