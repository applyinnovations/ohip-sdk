/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the FolioTextsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolioTextsType{}

// FolioTextsType This stores the information the type of tax calculation especially with tax exemption, etc.
type FolioTextsType struct {
	// This stores the description for the type of tax calculation especially with tax exemption, etc.
	FolioText []FolioTextsTypeFolioTextInner `json:"folioText,omitempty"`
}

// NewFolioTextsType instantiates a new FolioTextsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolioTextsType() *FolioTextsType {
	this := FolioTextsType{}
	return &this
}

// NewFolioTextsTypeWithDefaults instantiates a new FolioTextsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolioTextsTypeWithDefaults() *FolioTextsType {
	this := FolioTextsType{}
	return &this
}

// GetFolioText returns the FolioText field value if set, zero value otherwise.
func (o *FolioTextsType) GetFolioText() []FolioTextsTypeFolioTextInner {
	if o == nil || IsNil(o.FolioText) {
		var ret []FolioTextsTypeFolioTextInner
		return ret
	}
	return o.FolioText
}

// GetFolioTextOk returns a tuple with the FolioText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolioTextsType) GetFolioTextOk() ([]FolioTextsTypeFolioTextInner, bool) {
	if o == nil || IsNil(o.FolioText) {
		return nil, false
	}
	return o.FolioText, true
}

// HasFolioText returns a boolean if a field has been set.
func (o *FolioTextsType) HasFolioText() bool {
	if o != nil && !IsNil(o.FolioText) {
		return true
	}

	return false
}

// SetFolioText gets a reference to the given []FolioTextsTypeFolioTextInner and assigns it to the FolioText field.
func (o *FolioTextsType) SetFolioText(v []FolioTextsTypeFolioTextInner) {
	o.FolioText = v
}

func (o FolioTextsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolioTextsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FolioText) {
		toSerialize["folioText"] = o.FolioText
	}
	return toSerialize, nil
}

type NullableFolioTextsType struct {
	value *FolioTextsType
	isSet bool
}

func (v NullableFolioTextsType) Get() *FolioTextsType {
	return v.value
}

func (v *NullableFolioTextsType) Set(val *FolioTextsType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioTextsType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioTextsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioTextsType(val *FolioTextsType) *NullableFolioTextsType {
	return &NullableFolioTextsType{value: val, isSet: true}
}

func (v NullableFolioTextsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioTextsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


