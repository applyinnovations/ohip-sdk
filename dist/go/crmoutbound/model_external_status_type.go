/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
	"fmt"
)

// ExternalStatusType Success return when there is no error and operation is successful.
type ExternalStatusType string

// List of externalStatusType
const (
	EXTERNALSTATUSTYPE_NOT_ENOUGH_CRITERIA ExternalStatusType = "NotEnoughCriteria"
	EXTERNALSTATUSTYPE_IGNORED_UNSUPPORTED_CRITERIA ExternalStatusType = "IgnoredUnsupportedCriteria"
	EXTERNALSTATUSTYPE_EXTERNAL_ERROR ExternalStatusType = "ExternalError"
	EXTERNALSTATUSTYPE_COMMUNICATION_ERROR ExternalStatusType = "CommunicationError"
	EXTERNALSTATUSTYPE_SUCCESS ExternalStatusType = "Success"
)

// All allowed values of ExternalStatusType enum
var AllowedExternalStatusTypeEnumValues = []ExternalStatusType{
	"NotEnoughCriteria",
	"IgnoredUnsupportedCriteria",
	"ExternalError",
	"CommunicationError",
	"Success",
}

func (v *ExternalStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalStatusType(value)
	for _, existing := range AllowedExternalStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalStatusType", value)
}

// NewExternalStatusTypeFromValue returns a pointer to a valid ExternalStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalStatusTypeFromValue(v string) (*ExternalStatusType, error) {
	ev := ExternalStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalStatusType: valid values are %v", v, AllowedExternalStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalStatusType) IsValid() bool {
	for _, existing := range AllowedExternalStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to externalStatusType value
func (v ExternalStatusType) Ptr() *ExternalStatusType {
	return &v
}

type NullableExternalStatusType struct {
	value *ExternalStatusType
	isSet bool
}

func (v NullableExternalStatusType) Get() *ExternalStatusType {
	return v.value
}

func (v *NullableExternalStatusType) Set(val *ExternalStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalStatusType(val *ExternalStatusType) *NullableExternalStatusType {
	return &NullableExternalStatusType{value: val, isSet: true}
}

func (v NullableExternalStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

