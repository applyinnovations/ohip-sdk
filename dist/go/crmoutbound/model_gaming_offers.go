/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the GamingOffers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GamingOffers{}

// GamingOffers Response object for fetching offers from external system.
type GamingOffers struct {
	// Offers that are availabl to be attached
	GamingOffersInfo []CodeDescriptionType `json:"gamingOffersInfo,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
}

// NewGamingOffers instantiates a new GamingOffers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGamingOffers() *GamingOffers {
	this := GamingOffers{}
	return &this
}

// NewGamingOffersWithDefaults instantiates a new GamingOffers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGamingOffersWithDefaults() *GamingOffers {
	this := GamingOffers{}
	return &this
}

// GetGamingOffersInfo returns the GamingOffersInfo field value if set, zero value otherwise.
func (o *GamingOffers) GetGamingOffersInfo() []CodeDescriptionType {
	if o == nil || IsNil(o.GamingOffersInfo) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.GamingOffersInfo
}

// GetGamingOffersInfoOk returns a tuple with the GamingOffersInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingOffers) GetGamingOffersInfoOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.GamingOffersInfo) {
		return nil, false
	}
	return o.GamingOffersInfo, true
}

// HasGamingOffersInfo returns a boolean if a field has been set.
func (o *GamingOffers) HasGamingOffersInfo() bool {
	if o != nil && !IsNil(o.GamingOffersInfo) {
		return true
	}

	return false
}

// SetGamingOffersInfo gets a reference to the given []CodeDescriptionType and assigns it to the GamingOffersInfo field.
func (o *GamingOffers) SetGamingOffersInfo(v []CodeDescriptionType) {
	o.GamingOffersInfo = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *GamingOffers) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GamingOffers) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *GamingOffers) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *GamingOffers) SetLinks(v []InstanceLink) {
	o.Links = v
}

func (o GamingOffers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GamingOffers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GamingOffersInfo) {
		toSerialize["gamingOffersInfo"] = o.GamingOffersInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableGamingOffers struct {
	value *GamingOffers
	isSet bool
}

func (v NullableGamingOffers) Get() *GamingOffers {
	return v.value
}

func (v *NullableGamingOffers) Set(val *GamingOffers) {
	v.value = val
	v.isSet = true
}

func (v NullableGamingOffers) IsSet() bool {
	return v.isSet
}

func (v *NullableGamingOffers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGamingOffers(val *GamingOffers) *NullableGamingOffers {
	return &NullableGamingOffers{value: val, isSet: true}
}

func (v NullableGamingOffers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGamingOffers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


