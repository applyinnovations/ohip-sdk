/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the PlayerStatisticsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerStatisticsType{}

// PlayerStatisticsType Contains Player Statistics information
type PlayerStatisticsType struct {
	EnrollmentDate *string `json:"enrollmentDate,omitempty"`
	CompDollars *string `json:"compDollars,omitempty"`
	ActualTableWins *string `json:"actualTableWins,omitempty"`
	ActualOtherWins *string `json:"actualOtherWins,omitempty"`
	TableTimePlayed *string `json:"tableTimePlayed,omitempty"`
	OtherTimePlayed *string `json:"otherTimePlayed,omitempty"`
	AverageSlotBet *string `json:"averageSlotBet,omitempty"`
	SkillRating *string `json:"skillRating,omitempty"`
	PlayerTableWins *string `json:"playerTableWins,omitempty"`
	PlayerOtherWins *string `json:"playerOtherWins,omitempty"`
	TheoriticalTableWins *string `json:"theoriticalTableWins,omitempty"`
	TheoriticalOtherWins *string `json:"theoriticalOtherWins,omitempty"`
	ExpectedProfit *string `json:"expectedProfit,omitempty"`
	GrossMarkers *string `json:"grossMarkers,omitempty"`
	CompPoints *string `json:"compPoints,omitempty"`
	TotalComps *string `json:"totalComps,omitempty"`
	ActualSlotWins *string `json:"actualSlotWins,omitempty"`
	CreditLimit *string `json:"creditLimit,omitempty"`
	SlotTimePlayed *string `json:"slotTimePlayed,omitempty"`
	AvgTableBet *string `json:"avgTableBet,omitempty"`
	AvgOtherBet *string `json:"avgOtherBet,omitempty"`
	PreferredGame *string `json:"preferredGame,omitempty"`
	PlayerSlotWins *string `json:"playerSlotWins,omitempty"`
	NoOfRatings *string `json:"noOfRatings,omitempty"`
	TheoSlotWins *string `json:"theoSlotWins,omitempty"`
	TheoProfit *string `json:"theoProfit,omitempty"`
	BettingLimit *string `json:"bettingLimit,omitempty"`
	NetMarkers *string `json:"netMarkers,omitempty"`
	Notes *string `json:"notes,omitempty"`
}

// NewPlayerStatisticsType instantiates a new PlayerStatisticsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerStatisticsType() *PlayerStatisticsType {
	this := PlayerStatisticsType{}
	return &this
}

// NewPlayerStatisticsTypeWithDefaults instantiates a new PlayerStatisticsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerStatisticsTypeWithDefaults() *PlayerStatisticsType {
	this := PlayerStatisticsType{}
	return &this
}

// GetEnrollmentDate returns the EnrollmentDate field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetEnrollmentDate() string {
	if o == nil || IsNil(o.EnrollmentDate) {
		var ret string
		return ret
	}
	return *o.EnrollmentDate
}

// GetEnrollmentDateOk returns a tuple with the EnrollmentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetEnrollmentDateOk() (*string, bool) {
	if o == nil || IsNil(o.EnrollmentDate) {
		return nil, false
	}
	return o.EnrollmentDate, true
}

// HasEnrollmentDate returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasEnrollmentDate() bool {
	if o != nil && !IsNil(o.EnrollmentDate) {
		return true
	}

	return false
}

// SetEnrollmentDate gets a reference to the given string and assigns it to the EnrollmentDate field.
func (o *PlayerStatisticsType) SetEnrollmentDate(v string) {
	o.EnrollmentDate = &v
}

// GetCompDollars returns the CompDollars field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetCompDollars() string {
	if o == nil || IsNil(o.CompDollars) {
		var ret string
		return ret
	}
	return *o.CompDollars
}

// GetCompDollarsOk returns a tuple with the CompDollars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetCompDollarsOk() (*string, bool) {
	if o == nil || IsNil(o.CompDollars) {
		return nil, false
	}
	return o.CompDollars, true
}

// HasCompDollars returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasCompDollars() bool {
	if o != nil && !IsNil(o.CompDollars) {
		return true
	}

	return false
}

// SetCompDollars gets a reference to the given string and assigns it to the CompDollars field.
func (o *PlayerStatisticsType) SetCompDollars(v string) {
	o.CompDollars = &v
}

// GetActualTableWins returns the ActualTableWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetActualTableWins() string {
	if o == nil || IsNil(o.ActualTableWins) {
		var ret string
		return ret
	}
	return *o.ActualTableWins
}

// GetActualTableWinsOk returns a tuple with the ActualTableWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetActualTableWinsOk() (*string, bool) {
	if o == nil || IsNil(o.ActualTableWins) {
		return nil, false
	}
	return o.ActualTableWins, true
}

// HasActualTableWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasActualTableWins() bool {
	if o != nil && !IsNil(o.ActualTableWins) {
		return true
	}

	return false
}

// SetActualTableWins gets a reference to the given string and assigns it to the ActualTableWins field.
func (o *PlayerStatisticsType) SetActualTableWins(v string) {
	o.ActualTableWins = &v
}

// GetActualOtherWins returns the ActualOtherWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetActualOtherWins() string {
	if o == nil || IsNil(o.ActualOtherWins) {
		var ret string
		return ret
	}
	return *o.ActualOtherWins
}

// GetActualOtherWinsOk returns a tuple with the ActualOtherWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetActualOtherWinsOk() (*string, bool) {
	if o == nil || IsNil(o.ActualOtherWins) {
		return nil, false
	}
	return o.ActualOtherWins, true
}

// HasActualOtherWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasActualOtherWins() bool {
	if o != nil && !IsNil(o.ActualOtherWins) {
		return true
	}

	return false
}

// SetActualOtherWins gets a reference to the given string and assigns it to the ActualOtherWins field.
func (o *PlayerStatisticsType) SetActualOtherWins(v string) {
	o.ActualOtherWins = &v
}

// GetTableTimePlayed returns the TableTimePlayed field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetTableTimePlayed() string {
	if o == nil || IsNil(o.TableTimePlayed) {
		var ret string
		return ret
	}
	return *o.TableTimePlayed
}

// GetTableTimePlayedOk returns a tuple with the TableTimePlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetTableTimePlayedOk() (*string, bool) {
	if o == nil || IsNil(o.TableTimePlayed) {
		return nil, false
	}
	return o.TableTimePlayed, true
}

// HasTableTimePlayed returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasTableTimePlayed() bool {
	if o != nil && !IsNil(o.TableTimePlayed) {
		return true
	}

	return false
}

// SetTableTimePlayed gets a reference to the given string and assigns it to the TableTimePlayed field.
func (o *PlayerStatisticsType) SetTableTimePlayed(v string) {
	o.TableTimePlayed = &v
}

// GetOtherTimePlayed returns the OtherTimePlayed field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetOtherTimePlayed() string {
	if o == nil || IsNil(o.OtherTimePlayed) {
		var ret string
		return ret
	}
	return *o.OtherTimePlayed
}

// GetOtherTimePlayedOk returns a tuple with the OtherTimePlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetOtherTimePlayedOk() (*string, bool) {
	if o == nil || IsNil(o.OtherTimePlayed) {
		return nil, false
	}
	return o.OtherTimePlayed, true
}

// HasOtherTimePlayed returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasOtherTimePlayed() bool {
	if o != nil && !IsNil(o.OtherTimePlayed) {
		return true
	}

	return false
}

// SetOtherTimePlayed gets a reference to the given string and assigns it to the OtherTimePlayed field.
func (o *PlayerStatisticsType) SetOtherTimePlayed(v string) {
	o.OtherTimePlayed = &v
}

// GetAverageSlotBet returns the AverageSlotBet field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetAverageSlotBet() string {
	if o == nil || IsNil(o.AverageSlotBet) {
		var ret string
		return ret
	}
	return *o.AverageSlotBet
}

// GetAverageSlotBetOk returns a tuple with the AverageSlotBet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetAverageSlotBetOk() (*string, bool) {
	if o == nil || IsNil(o.AverageSlotBet) {
		return nil, false
	}
	return o.AverageSlotBet, true
}

// HasAverageSlotBet returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasAverageSlotBet() bool {
	if o != nil && !IsNil(o.AverageSlotBet) {
		return true
	}

	return false
}

// SetAverageSlotBet gets a reference to the given string and assigns it to the AverageSlotBet field.
func (o *PlayerStatisticsType) SetAverageSlotBet(v string) {
	o.AverageSlotBet = &v
}

// GetSkillRating returns the SkillRating field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetSkillRating() string {
	if o == nil || IsNil(o.SkillRating) {
		var ret string
		return ret
	}
	return *o.SkillRating
}

// GetSkillRatingOk returns a tuple with the SkillRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetSkillRatingOk() (*string, bool) {
	if o == nil || IsNil(o.SkillRating) {
		return nil, false
	}
	return o.SkillRating, true
}

// HasSkillRating returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasSkillRating() bool {
	if o != nil && !IsNil(o.SkillRating) {
		return true
	}

	return false
}

// SetSkillRating gets a reference to the given string and assigns it to the SkillRating field.
func (o *PlayerStatisticsType) SetSkillRating(v string) {
	o.SkillRating = &v
}

// GetPlayerTableWins returns the PlayerTableWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetPlayerTableWins() string {
	if o == nil || IsNil(o.PlayerTableWins) {
		var ret string
		return ret
	}
	return *o.PlayerTableWins
}

// GetPlayerTableWinsOk returns a tuple with the PlayerTableWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetPlayerTableWinsOk() (*string, bool) {
	if o == nil || IsNil(o.PlayerTableWins) {
		return nil, false
	}
	return o.PlayerTableWins, true
}

// HasPlayerTableWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasPlayerTableWins() bool {
	if o != nil && !IsNil(o.PlayerTableWins) {
		return true
	}

	return false
}

// SetPlayerTableWins gets a reference to the given string and assigns it to the PlayerTableWins field.
func (o *PlayerStatisticsType) SetPlayerTableWins(v string) {
	o.PlayerTableWins = &v
}

// GetPlayerOtherWins returns the PlayerOtherWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetPlayerOtherWins() string {
	if o == nil || IsNil(o.PlayerOtherWins) {
		var ret string
		return ret
	}
	return *o.PlayerOtherWins
}

// GetPlayerOtherWinsOk returns a tuple with the PlayerOtherWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetPlayerOtherWinsOk() (*string, bool) {
	if o == nil || IsNil(o.PlayerOtherWins) {
		return nil, false
	}
	return o.PlayerOtherWins, true
}

// HasPlayerOtherWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasPlayerOtherWins() bool {
	if o != nil && !IsNil(o.PlayerOtherWins) {
		return true
	}

	return false
}

// SetPlayerOtherWins gets a reference to the given string and assigns it to the PlayerOtherWins field.
func (o *PlayerStatisticsType) SetPlayerOtherWins(v string) {
	o.PlayerOtherWins = &v
}

// GetTheoriticalTableWins returns the TheoriticalTableWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetTheoriticalTableWins() string {
	if o == nil || IsNil(o.TheoriticalTableWins) {
		var ret string
		return ret
	}
	return *o.TheoriticalTableWins
}

// GetTheoriticalTableWinsOk returns a tuple with the TheoriticalTableWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetTheoriticalTableWinsOk() (*string, bool) {
	if o == nil || IsNil(o.TheoriticalTableWins) {
		return nil, false
	}
	return o.TheoriticalTableWins, true
}

// HasTheoriticalTableWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasTheoriticalTableWins() bool {
	if o != nil && !IsNil(o.TheoriticalTableWins) {
		return true
	}

	return false
}

// SetTheoriticalTableWins gets a reference to the given string and assigns it to the TheoriticalTableWins field.
func (o *PlayerStatisticsType) SetTheoriticalTableWins(v string) {
	o.TheoriticalTableWins = &v
}

// GetTheoriticalOtherWins returns the TheoriticalOtherWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetTheoriticalOtherWins() string {
	if o == nil || IsNil(o.TheoriticalOtherWins) {
		var ret string
		return ret
	}
	return *o.TheoriticalOtherWins
}

// GetTheoriticalOtherWinsOk returns a tuple with the TheoriticalOtherWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetTheoriticalOtherWinsOk() (*string, bool) {
	if o == nil || IsNil(o.TheoriticalOtherWins) {
		return nil, false
	}
	return o.TheoriticalOtherWins, true
}

// HasTheoriticalOtherWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasTheoriticalOtherWins() bool {
	if o != nil && !IsNil(o.TheoriticalOtherWins) {
		return true
	}

	return false
}

// SetTheoriticalOtherWins gets a reference to the given string and assigns it to the TheoriticalOtherWins field.
func (o *PlayerStatisticsType) SetTheoriticalOtherWins(v string) {
	o.TheoriticalOtherWins = &v
}

// GetExpectedProfit returns the ExpectedProfit field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetExpectedProfit() string {
	if o == nil || IsNil(o.ExpectedProfit) {
		var ret string
		return ret
	}
	return *o.ExpectedProfit
}

// GetExpectedProfitOk returns a tuple with the ExpectedProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetExpectedProfitOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedProfit) {
		return nil, false
	}
	return o.ExpectedProfit, true
}

// HasExpectedProfit returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasExpectedProfit() bool {
	if o != nil && !IsNil(o.ExpectedProfit) {
		return true
	}

	return false
}

// SetExpectedProfit gets a reference to the given string and assigns it to the ExpectedProfit field.
func (o *PlayerStatisticsType) SetExpectedProfit(v string) {
	o.ExpectedProfit = &v
}

// GetGrossMarkers returns the GrossMarkers field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetGrossMarkers() string {
	if o == nil || IsNil(o.GrossMarkers) {
		var ret string
		return ret
	}
	return *o.GrossMarkers
}

// GetGrossMarkersOk returns a tuple with the GrossMarkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetGrossMarkersOk() (*string, bool) {
	if o == nil || IsNil(o.GrossMarkers) {
		return nil, false
	}
	return o.GrossMarkers, true
}

// HasGrossMarkers returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasGrossMarkers() bool {
	if o != nil && !IsNil(o.GrossMarkers) {
		return true
	}

	return false
}

// SetGrossMarkers gets a reference to the given string and assigns it to the GrossMarkers field.
func (o *PlayerStatisticsType) SetGrossMarkers(v string) {
	o.GrossMarkers = &v
}

// GetCompPoints returns the CompPoints field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetCompPoints() string {
	if o == nil || IsNil(o.CompPoints) {
		var ret string
		return ret
	}
	return *o.CompPoints
}

// GetCompPointsOk returns a tuple with the CompPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetCompPointsOk() (*string, bool) {
	if o == nil || IsNil(o.CompPoints) {
		return nil, false
	}
	return o.CompPoints, true
}

// HasCompPoints returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasCompPoints() bool {
	if o != nil && !IsNil(o.CompPoints) {
		return true
	}

	return false
}

// SetCompPoints gets a reference to the given string and assigns it to the CompPoints field.
func (o *PlayerStatisticsType) SetCompPoints(v string) {
	o.CompPoints = &v
}

// GetTotalComps returns the TotalComps field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetTotalComps() string {
	if o == nil || IsNil(o.TotalComps) {
		var ret string
		return ret
	}
	return *o.TotalComps
}

// GetTotalCompsOk returns a tuple with the TotalComps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetTotalCompsOk() (*string, bool) {
	if o == nil || IsNil(o.TotalComps) {
		return nil, false
	}
	return o.TotalComps, true
}

// HasTotalComps returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasTotalComps() bool {
	if o != nil && !IsNil(o.TotalComps) {
		return true
	}

	return false
}

// SetTotalComps gets a reference to the given string and assigns it to the TotalComps field.
func (o *PlayerStatisticsType) SetTotalComps(v string) {
	o.TotalComps = &v
}

// GetActualSlotWins returns the ActualSlotWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetActualSlotWins() string {
	if o == nil || IsNil(o.ActualSlotWins) {
		var ret string
		return ret
	}
	return *o.ActualSlotWins
}

// GetActualSlotWinsOk returns a tuple with the ActualSlotWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetActualSlotWinsOk() (*string, bool) {
	if o == nil || IsNil(o.ActualSlotWins) {
		return nil, false
	}
	return o.ActualSlotWins, true
}

// HasActualSlotWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasActualSlotWins() bool {
	if o != nil && !IsNil(o.ActualSlotWins) {
		return true
	}

	return false
}

// SetActualSlotWins gets a reference to the given string and assigns it to the ActualSlotWins field.
func (o *PlayerStatisticsType) SetActualSlotWins(v string) {
	o.ActualSlotWins = &v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetCreditLimit() string {
	if o == nil || IsNil(o.CreditLimit) {
		var ret string
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetCreditLimitOk() (*string, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given string and assigns it to the CreditLimit field.
func (o *PlayerStatisticsType) SetCreditLimit(v string) {
	o.CreditLimit = &v
}

// GetSlotTimePlayed returns the SlotTimePlayed field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetSlotTimePlayed() string {
	if o == nil || IsNil(o.SlotTimePlayed) {
		var ret string
		return ret
	}
	return *o.SlotTimePlayed
}

// GetSlotTimePlayedOk returns a tuple with the SlotTimePlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetSlotTimePlayedOk() (*string, bool) {
	if o == nil || IsNil(o.SlotTimePlayed) {
		return nil, false
	}
	return o.SlotTimePlayed, true
}

// HasSlotTimePlayed returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasSlotTimePlayed() bool {
	if o != nil && !IsNil(o.SlotTimePlayed) {
		return true
	}

	return false
}

// SetSlotTimePlayed gets a reference to the given string and assigns it to the SlotTimePlayed field.
func (o *PlayerStatisticsType) SetSlotTimePlayed(v string) {
	o.SlotTimePlayed = &v
}

// GetAvgTableBet returns the AvgTableBet field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetAvgTableBet() string {
	if o == nil || IsNil(o.AvgTableBet) {
		var ret string
		return ret
	}
	return *o.AvgTableBet
}

// GetAvgTableBetOk returns a tuple with the AvgTableBet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetAvgTableBetOk() (*string, bool) {
	if o == nil || IsNil(o.AvgTableBet) {
		return nil, false
	}
	return o.AvgTableBet, true
}

// HasAvgTableBet returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasAvgTableBet() bool {
	if o != nil && !IsNil(o.AvgTableBet) {
		return true
	}

	return false
}

// SetAvgTableBet gets a reference to the given string and assigns it to the AvgTableBet field.
func (o *PlayerStatisticsType) SetAvgTableBet(v string) {
	o.AvgTableBet = &v
}

// GetAvgOtherBet returns the AvgOtherBet field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetAvgOtherBet() string {
	if o == nil || IsNil(o.AvgOtherBet) {
		var ret string
		return ret
	}
	return *o.AvgOtherBet
}

// GetAvgOtherBetOk returns a tuple with the AvgOtherBet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetAvgOtherBetOk() (*string, bool) {
	if o == nil || IsNil(o.AvgOtherBet) {
		return nil, false
	}
	return o.AvgOtherBet, true
}

// HasAvgOtherBet returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasAvgOtherBet() bool {
	if o != nil && !IsNil(o.AvgOtherBet) {
		return true
	}

	return false
}

// SetAvgOtherBet gets a reference to the given string and assigns it to the AvgOtherBet field.
func (o *PlayerStatisticsType) SetAvgOtherBet(v string) {
	o.AvgOtherBet = &v
}

// GetPreferredGame returns the PreferredGame field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetPreferredGame() string {
	if o == nil || IsNil(o.PreferredGame) {
		var ret string
		return ret
	}
	return *o.PreferredGame
}

// GetPreferredGameOk returns a tuple with the PreferredGame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetPreferredGameOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredGame) {
		return nil, false
	}
	return o.PreferredGame, true
}

// HasPreferredGame returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasPreferredGame() bool {
	if o != nil && !IsNil(o.PreferredGame) {
		return true
	}

	return false
}

// SetPreferredGame gets a reference to the given string and assigns it to the PreferredGame field.
func (o *PlayerStatisticsType) SetPreferredGame(v string) {
	o.PreferredGame = &v
}

// GetPlayerSlotWins returns the PlayerSlotWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetPlayerSlotWins() string {
	if o == nil || IsNil(o.PlayerSlotWins) {
		var ret string
		return ret
	}
	return *o.PlayerSlotWins
}

// GetPlayerSlotWinsOk returns a tuple with the PlayerSlotWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetPlayerSlotWinsOk() (*string, bool) {
	if o == nil || IsNil(o.PlayerSlotWins) {
		return nil, false
	}
	return o.PlayerSlotWins, true
}

// HasPlayerSlotWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasPlayerSlotWins() bool {
	if o != nil && !IsNil(o.PlayerSlotWins) {
		return true
	}

	return false
}

// SetPlayerSlotWins gets a reference to the given string and assigns it to the PlayerSlotWins field.
func (o *PlayerStatisticsType) SetPlayerSlotWins(v string) {
	o.PlayerSlotWins = &v
}

// GetNoOfRatings returns the NoOfRatings field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetNoOfRatings() string {
	if o == nil || IsNil(o.NoOfRatings) {
		var ret string
		return ret
	}
	return *o.NoOfRatings
}

// GetNoOfRatingsOk returns a tuple with the NoOfRatings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetNoOfRatingsOk() (*string, bool) {
	if o == nil || IsNil(o.NoOfRatings) {
		return nil, false
	}
	return o.NoOfRatings, true
}

// HasNoOfRatings returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasNoOfRatings() bool {
	if o != nil && !IsNil(o.NoOfRatings) {
		return true
	}

	return false
}

// SetNoOfRatings gets a reference to the given string and assigns it to the NoOfRatings field.
func (o *PlayerStatisticsType) SetNoOfRatings(v string) {
	o.NoOfRatings = &v
}

// GetTheoSlotWins returns the TheoSlotWins field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetTheoSlotWins() string {
	if o == nil || IsNil(o.TheoSlotWins) {
		var ret string
		return ret
	}
	return *o.TheoSlotWins
}

// GetTheoSlotWinsOk returns a tuple with the TheoSlotWins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetTheoSlotWinsOk() (*string, bool) {
	if o == nil || IsNil(o.TheoSlotWins) {
		return nil, false
	}
	return o.TheoSlotWins, true
}

// HasTheoSlotWins returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasTheoSlotWins() bool {
	if o != nil && !IsNil(o.TheoSlotWins) {
		return true
	}

	return false
}

// SetTheoSlotWins gets a reference to the given string and assigns it to the TheoSlotWins field.
func (o *PlayerStatisticsType) SetTheoSlotWins(v string) {
	o.TheoSlotWins = &v
}

// GetTheoProfit returns the TheoProfit field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetTheoProfit() string {
	if o == nil || IsNil(o.TheoProfit) {
		var ret string
		return ret
	}
	return *o.TheoProfit
}

// GetTheoProfitOk returns a tuple with the TheoProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetTheoProfitOk() (*string, bool) {
	if o == nil || IsNil(o.TheoProfit) {
		return nil, false
	}
	return o.TheoProfit, true
}

// HasTheoProfit returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasTheoProfit() bool {
	if o != nil && !IsNil(o.TheoProfit) {
		return true
	}

	return false
}

// SetTheoProfit gets a reference to the given string and assigns it to the TheoProfit field.
func (o *PlayerStatisticsType) SetTheoProfit(v string) {
	o.TheoProfit = &v
}

// GetBettingLimit returns the BettingLimit field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetBettingLimit() string {
	if o == nil || IsNil(o.BettingLimit) {
		var ret string
		return ret
	}
	return *o.BettingLimit
}

// GetBettingLimitOk returns a tuple with the BettingLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetBettingLimitOk() (*string, bool) {
	if o == nil || IsNil(o.BettingLimit) {
		return nil, false
	}
	return o.BettingLimit, true
}

// HasBettingLimit returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasBettingLimit() bool {
	if o != nil && !IsNil(o.BettingLimit) {
		return true
	}

	return false
}

// SetBettingLimit gets a reference to the given string and assigns it to the BettingLimit field.
func (o *PlayerStatisticsType) SetBettingLimit(v string) {
	o.BettingLimit = &v
}

// GetNetMarkers returns the NetMarkers field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetNetMarkers() string {
	if o == nil || IsNil(o.NetMarkers) {
		var ret string
		return ret
	}
	return *o.NetMarkers
}

// GetNetMarkersOk returns a tuple with the NetMarkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetNetMarkersOk() (*string, bool) {
	if o == nil || IsNil(o.NetMarkers) {
		return nil, false
	}
	return o.NetMarkers, true
}

// HasNetMarkers returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasNetMarkers() bool {
	if o != nil && !IsNil(o.NetMarkers) {
		return true
	}

	return false
}

// SetNetMarkers gets a reference to the given string and assigns it to the NetMarkers field.
func (o *PlayerStatisticsType) SetNetMarkers(v string) {
	o.NetMarkers = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *PlayerStatisticsType) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerStatisticsType) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *PlayerStatisticsType) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *PlayerStatisticsType) SetNotes(v string) {
	o.Notes = &v
}

func (o PlayerStatisticsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerStatisticsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnrollmentDate) {
		toSerialize["enrollmentDate"] = o.EnrollmentDate
	}
	if !IsNil(o.CompDollars) {
		toSerialize["compDollars"] = o.CompDollars
	}
	if !IsNil(o.ActualTableWins) {
		toSerialize["actualTableWins"] = o.ActualTableWins
	}
	if !IsNil(o.ActualOtherWins) {
		toSerialize["actualOtherWins"] = o.ActualOtherWins
	}
	if !IsNil(o.TableTimePlayed) {
		toSerialize["tableTimePlayed"] = o.TableTimePlayed
	}
	if !IsNil(o.OtherTimePlayed) {
		toSerialize["otherTimePlayed"] = o.OtherTimePlayed
	}
	if !IsNil(o.AverageSlotBet) {
		toSerialize["averageSlotBet"] = o.AverageSlotBet
	}
	if !IsNil(o.SkillRating) {
		toSerialize["skillRating"] = o.SkillRating
	}
	if !IsNil(o.PlayerTableWins) {
		toSerialize["playerTableWins"] = o.PlayerTableWins
	}
	if !IsNil(o.PlayerOtherWins) {
		toSerialize["playerOtherWins"] = o.PlayerOtherWins
	}
	if !IsNil(o.TheoriticalTableWins) {
		toSerialize["theoriticalTableWins"] = o.TheoriticalTableWins
	}
	if !IsNil(o.TheoriticalOtherWins) {
		toSerialize["theoriticalOtherWins"] = o.TheoriticalOtherWins
	}
	if !IsNil(o.ExpectedProfit) {
		toSerialize["expectedProfit"] = o.ExpectedProfit
	}
	if !IsNil(o.GrossMarkers) {
		toSerialize["grossMarkers"] = o.GrossMarkers
	}
	if !IsNil(o.CompPoints) {
		toSerialize["compPoints"] = o.CompPoints
	}
	if !IsNil(o.TotalComps) {
		toSerialize["totalComps"] = o.TotalComps
	}
	if !IsNil(o.ActualSlotWins) {
		toSerialize["actualSlotWins"] = o.ActualSlotWins
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	if !IsNil(o.SlotTimePlayed) {
		toSerialize["slotTimePlayed"] = o.SlotTimePlayed
	}
	if !IsNil(o.AvgTableBet) {
		toSerialize["avgTableBet"] = o.AvgTableBet
	}
	if !IsNil(o.AvgOtherBet) {
		toSerialize["avgOtherBet"] = o.AvgOtherBet
	}
	if !IsNil(o.PreferredGame) {
		toSerialize["preferredGame"] = o.PreferredGame
	}
	if !IsNil(o.PlayerSlotWins) {
		toSerialize["playerSlotWins"] = o.PlayerSlotWins
	}
	if !IsNil(o.NoOfRatings) {
		toSerialize["noOfRatings"] = o.NoOfRatings
	}
	if !IsNil(o.TheoSlotWins) {
		toSerialize["theoSlotWins"] = o.TheoSlotWins
	}
	if !IsNil(o.TheoProfit) {
		toSerialize["theoProfit"] = o.TheoProfit
	}
	if !IsNil(o.BettingLimit) {
		toSerialize["bettingLimit"] = o.BettingLimit
	}
	if !IsNil(o.NetMarkers) {
		toSerialize["netMarkers"] = o.NetMarkers
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	return toSerialize, nil
}

type NullablePlayerStatisticsType struct {
	value *PlayerStatisticsType
	isSet bool
}

func (v NullablePlayerStatisticsType) Get() *PlayerStatisticsType {
	return v.value
}

func (v *NullablePlayerStatisticsType) Set(val *PlayerStatisticsType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerStatisticsType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerStatisticsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerStatisticsType(val *PlayerStatisticsType) *NullablePlayerStatisticsType {
	return &NullablePlayerStatisticsType{value: val, isSet: true}
}

func (v NullablePlayerStatisticsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerStatisticsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


