/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the MembershipTransactionExceptionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTransactionExceptionType{}

// MembershipTransactionExceptionType Details about a membership like ProfileID, Card Number, Type, Level, etc.
type MembershipTransactionExceptionType struct {
	ProfileId *ProfileId `json:"profileId,omitempty"`
	// The profile name associated with this membership.
	Name *string `json:"name,omitempty"`
	MembershipId *UniqueIDType `json:"membershipId,omitempty"`
	// The card number associated with this membership.
	MembershipCardNo *string `json:"membershipCardNo,omitempty"`
	MembershipType *CodeDescriptionType `json:"membershipType,omitempty"`
	// The current level of the membership.
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	// Date when the member enrolled for the membership.
	JoinedDate *string `json:"joinedDate,omitempty"`
	// Membership card expiration date.
	CardExpirationDate *string `json:"cardExpirationDate,omitempty"`
	MembershipTransactionId *MembershipTransactionId `json:"membershipTransactionId,omitempty"`
	// Hotel code of the membership transaction exceptions.
	HotelId *string `json:"hotelId,omitempty"`
	FromToRangeDate *DateRangeType `json:"fromToRangeDate,omitempty"`
	// Any reference like reservation no etc against which the certificate was consumed.
	ReservationNumber *string `json:"reservationNumber,omitempty"`
	// If multiple room membership transaction exceptions occurred, the number of rooms booked.(MR)
	RoomsBooked *int32 `json:"roomsBooked,omitempty"`
	// Indicates if back to back membership transaction exceptions have occurred or not.
	BackToBack *string `json:"backToBack,omitempty"`
	// The average rate of the stay.
	AverageRate *float32 `json:"averageRate,omitempty"`
	// Tier stay points associated with this membership points transaction.
	TierStays *float32 `json:"tierStays,omitempty"`
	// Award points associated with this membership points transaction.
	TotalAwardPoints *float32 `json:"totalAwardPoints,omitempty"`
	// Tier night points associated with this membership points transaction.
	TotalNights *float32 `json:"totalNights,omitempty"`
	// Tier revenue points associated with this membership points transaction.
	TotalRevenue *float32 `json:"totalRevenue,omitempty"`
	// Points Calculated value(Y/N) for the selected transaction.
	PointsCalculate *bool `json:"pointsCalculate,omitempty"`
	// Notes regarding the resolution of the membership transaction exception or for any other reason.
	UserNotes *string `json:"userNotes,omitempty"`
	// The systems records and notes identifying the exception criteria.
	ProcessingMessages *string `json:"processingMessages,omitempty"`
	// The total number of award points associated with this transaction.
	TotalPoints *float32 `json:"totalPoints,omitempty"`
	// The total number of base award points for this membership points transaction.
	AwardBasePoints *float32 `json:"awardBasePoints,omitempty"`
	// Indicates if this transaction involves bonus points, The total number of bonus points.
	AwardBonusPoints *float32 `json:"awardBonusPoints,omitempty"`
	TierPoints *MembershipTransactionTierPointsType `json:"tierPoints,omitempty"`
	ComputedPoints *MembershipTransactionExceptionComputePointsType `json:"computedPoints,omitempty"`
	// Indicates the type of Exception like Exception not resolved,Points Rejected on Exception etc.,
	ExceptionType *int32 `json:"exceptionType,omitempty"`
}

// NewMembershipTransactionExceptionType instantiates a new MembershipTransactionExceptionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTransactionExceptionType() *MembershipTransactionExceptionType {
	this := MembershipTransactionExceptionType{}
	return &this
}

// NewMembershipTransactionExceptionTypeWithDefaults instantiates a new MembershipTransactionExceptionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTransactionExceptionTypeWithDefaults() *MembershipTransactionExceptionType {
	this := MembershipTransactionExceptionType{}
	return &this
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *MembershipTransactionExceptionType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MembershipTransactionExceptionType) SetName(v string) {
	o.Name = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetMembershipId() UniqueIDType {
	if o == nil || IsNil(o.MembershipId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetMembershipIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given UniqueIDType and assigns it to the MembershipId field.
func (o *MembershipTransactionExceptionType) SetMembershipId(v UniqueIDType) {
	o.MembershipId = &v
}

// GetMembershipCardNo returns the MembershipCardNo field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetMembershipCardNo() string {
	if o == nil || IsNil(o.MembershipCardNo) {
		var ret string
		return ret
	}
	return *o.MembershipCardNo
}

// GetMembershipCardNoOk returns a tuple with the MembershipCardNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetMembershipCardNoOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipCardNo) {
		return nil, false
	}
	return o.MembershipCardNo, true
}

// HasMembershipCardNo returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasMembershipCardNo() bool {
	if o != nil && !IsNil(o.MembershipCardNo) {
		return true
	}

	return false
}

// SetMembershipCardNo gets a reference to the given string and assigns it to the MembershipCardNo field.
func (o *MembershipTransactionExceptionType) SetMembershipCardNo(v string) {
	o.MembershipCardNo = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetMembershipType() CodeDescriptionType {
	if o == nil || IsNil(o.MembershipType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetMembershipTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given CodeDescriptionType and assigns it to the MembershipType field.
func (o *MembershipTransactionExceptionType) SetMembershipType(v CodeDescriptionType) {
	o.MembershipType = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *MembershipTransactionExceptionType) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetJoinedDate returns the JoinedDate field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetJoinedDate() string {
	if o == nil || IsNil(o.JoinedDate) {
		var ret string
		return ret
	}
	return *o.JoinedDate
}

// GetJoinedDateOk returns a tuple with the JoinedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetJoinedDateOk() (*string, bool) {
	if o == nil || IsNil(o.JoinedDate) {
		return nil, false
	}
	return o.JoinedDate, true
}

// HasJoinedDate returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasJoinedDate() bool {
	if o != nil && !IsNil(o.JoinedDate) {
		return true
	}

	return false
}

// SetJoinedDate gets a reference to the given string and assigns it to the JoinedDate field.
func (o *MembershipTransactionExceptionType) SetJoinedDate(v string) {
	o.JoinedDate = &v
}

// GetCardExpirationDate returns the CardExpirationDate field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetCardExpirationDate() string {
	if o == nil || IsNil(o.CardExpirationDate) {
		var ret string
		return ret
	}
	return *o.CardExpirationDate
}

// GetCardExpirationDateOk returns a tuple with the CardExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetCardExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.CardExpirationDate) {
		return nil, false
	}
	return o.CardExpirationDate, true
}

// HasCardExpirationDate returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasCardExpirationDate() bool {
	if o != nil && !IsNil(o.CardExpirationDate) {
		return true
	}

	return false
}

// SetCardExpirationDate gets a reference to the given string and assigns it to the CardExpirationDate field.
func (o *MembershipTransactionExceptionType) SetCardExpirationDate(v string) {
	o.CardExpirationDate = &v
}

// GetMembershipTransactionId returns the MembershipTransactionId field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetMembershipTransactionId() MembershipTransactionId {
	if o == nil || IsNil(o.MembershipTransactionId) {
		var ret MembershipTransactionId
		return ret
	}
	return *o.MembershipTransactionId
}

// GetMembershipTransactionIdOk returns a tuple with the MembershipTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetMembershipTransactionIdOk() (*MembershipTransactionId, bool) {
	if o == nil || IsNil(o.MembershipTransactionId) {
		return nil, false
	}
	return o.MembershipTransactionId, true
}

// HasMembershipTransactionId returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasMembershipTransactionId() bool {
	if o != nil && !IsNil(o.MembershipTransactionId) {
		return true
	}

	return false
}

// SetMembershipTransactionId gets a reference to the given MembershipTransactionId and assigns it to the MembershipTransactionId field.
func (o *MembershipTransactionExceptionType) SetMembershipTransactionId(v MembershipTransactionId) {
	o.MembershipTransactionId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MembershipTransactionExceptionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetFromToRangeDate returns the FromToRangeDate field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetFromToRangeDate() DateRangeType {
	if o == nil || IsNil(o.FromToRangeDate) {
		var ret DateRangeType
		return ret
	}
	return *o.FromToRangeDate
}

// GetFromToRangeDateOk returns a tuple with the FromToRangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetFromToRangeDateOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.FromToRangeDate) {
		return nil, false
	}
	return o.FromToRangeDate, true
}

// HasFromToRangeDate returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasFromToRangeDate() bool {
	if o != nil && !IsNil(o.FromToRangeDate) {
		return true
	}

	return false
}

// SetFromToRangeDate gets a reference to the given DateRangeType and assigns it to the FromToRangeDate field.
func (o *MembershipTransactionExceptionType) SetFromToRangeDate(v DateRangeType) {
	o.FromToRangeDate = &v
}

// GetReservationNumber returns the ReservationNumber field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetReservationNumber() string {
	if o == nil || IsNil(o.ReservationNumber) {
		var ret string
		return ret
	}
	return *o.ReservationNumber
}

// GetReservationNumberOk returns a tuple with the ReservationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetReservationNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ReservationNumber) {
		return nil, false
	}
	return o.ReservationNumber, true
}

// HasReservationNumber returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasReservationNumber() bool {
	if o != nil && !IsNil(o.ReservationNumber) {
		return true
	}

	return false
}

// SetReservationNumber gets a reference to the given string and assigns it to the ReservationNumber field.
func (o *MembershipTransactionExceptionType) SetReservationNumber(v string) {
	o.ReservationNumber = &v
}

// GetRoomsBooked returns the RoomsBooked field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetRoomsBooked() int32 {
	if o == nil || IsNil(o.RoomsBooked) {
		var ret int32
		return ret
	}
	return *o.RoomsBooked
}

// GetRoomsBookedOk returns a tuple with the RoomsBooked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetRoomsBookedOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomsBooked) {
		return nil, false
	}
	return o.RoomsBooked, true
}

// HasRoomsBooked returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasRoomsBooked() bool {
	if o != nil && !IsNil(o.RoomsBooked) {
		return true
	}

	return false
}

// SetRoomsBooked gets a reference to the given int32 and assigns it to the RoomsBooked field.
func (o *MembershipTransactionExceptionType) SetRoomsBooked(v int32) {
	o.RoomsBooked = &v
}

// GetBackToBack returns the BackToBack field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetBackToBack() string {
	if o == nil || IsNil(o.BackToBack) {
		var ret string
		return ret
	}
	return *o.BackToBack
}

// GetBackToBackOk returns a tuple with the BackToBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetBackToBackOk() (*string, bool) {
	if o == nil || IsNil(o.BackToBack) {
		return nil, false
	}
	return o.BackToBack, true
}

// HasBackToBack returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasBackToBack() bool {
	if o != nil && !IsNil(o.BackToBack) {
		return true
	}

	return false
}

// SetBackToBack gets a reference to the given string and assigns it to the BackToBack field.
func (o *MembershipTransactionExceptionType) SetBackToBack(v string) {
	o.BackToBack = &v
}

// GetAverageRate returns the AverageRate field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetAverageRate() float32 {
	if o == nil || IsNil(o.AverageRate) {
		var ret float32
		return ret
	}
	return *o.AverageRate
}

// GetAverageRateOk returns a tuple with the AverageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetAverageRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageRate) {
		return nil, false
	}
	return o.AverageRate, true
}

// HasAverageRate returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasAverageRate() bool {
	if o != nil && !IsNil(o.AverageRate) {
		return true
	}

	return false
}

// SetAverageRate gets a reference to the given float32 and assigns it to the AverageRate field.
func (o *MembershipTransactionExceptionType) SetAverageRate(v float32) {
	o.AverageRate = &v
}

// GetTierStays returns the TierStays field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetTierStays() float32 {
	if o == nil || IsNil(o.TierStays) {
		var ret float32
		return ret
	}
	return *o.TierStays
}

// GetTierStaysOk returns a tuple with the TierStays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetTierStaysOk() (*float32, bool) {
	if o == nil || IsNil(o.TierStays) {
		return nil, false
	}
	return o.TierStays, true
}

// HasTierStays returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasTierStays() bool {
	if o != nil && !IsNil(o.TierStays) {
		return true
	}

	return false
}

// SetTierStays gets a reference to the given float32 and assigns it to the TierStays field.
func (o *MembershipTransactionExceptionType) SetTierStays(v float32) {
	o.TierStays = &v
}

// GetTotalAwardPoints returns the TotalAwardPoints field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetTotalAwardPoints() float32 {
	if o == nil || IsNil(o.TotalAwardPoints) {
		var ret float32
		return ret
	}
	return *o.TotalAwardPoints
}

// GetTotalAwardPointsOk returns a tuple with the TotalAwardPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetTotalAwardPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAwardPoints) {
		return nil, false
	}
	return o.TotalAwardPoints, true
}

// HasTotalAwardPoints returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasTotalAwardPoints() bool {
	if o != nil && !IsNil(o.TotalAwardPoints) {
		return true
	}

	return false
}

// SetTotalAwardPoints gets a reference to the given float32 and assigns it to the TotalAwardPoints field.
func (o *MembershipTransactionExceptionType) SetTotalAwardPoints(v float32) {
	o.TotalAwardPoints = &v
}

// GetTotalNights returns the TotalNights field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetTotalNights() float32 {
	if o == nil || IsNil(o.TotalNights) {
		var ret float32
		return ret
	}
	return *o.TotalNights
}

// GetTotalNightsOk returns a tuple with the TotalNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetTotalNightsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalNights) {
		return nil, false
	}
	return o.TotalNights, true
}

// HasTotalNights returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasTotalNights() bool {
	if o != nil && !IsNil(o.TotalNights) {
		return true
	}

	return false
}

// SetTotalNights gets a reference to the given float32 and assigns it to the TotalNights field.
func (o *MembershipTransactionExceptionType) SetTotalNights(v float32) {
	o.TotalNights = &v
}

// GetTotalRevenue returns the TotalRevenue field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetTotalRevenue() float32 {
	if o == nil || IsNil(o.TotalRevenue) {
		var ret float32
		return ret
	}
	return *o.TotalRevenue
}

// GetTotalRevenueOk returns a tuple with the TotalRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetTotalRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalRevenue) {
		return nil, false
	}
	return o.TotalRevenue, true
}

// HasTotalRevenue returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasTotalRevenue() bool {
	if o != nil && !IsNil(o.TotalRevenue) {
		return true
	}

	return false
}

// SetTotalRevenue gets a reference to the given float32 and assigns it to the TotalRevenue field.
func (o *MembershipTransactionExceptionType) SetTotalRevenue(v float32) {
	o.TotalRevenue = &v
}

// GetPointsCalculate returns the PointsCalculate field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetPointsCalculate() bool {
	if o == nil || IsNil(o.PointsCalculate) {
		var ret bool
		return ret
	}
	return *o.PointsCalculate
}

// GetPointsCalculateOk returns a tuple with the PointsCalculate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetPointsCalculateOk() (*bool, bool) {
	if o == nil || IsNil(o.PointsCalculate) {
		return nil, false
	}
	return o.PointsCalculate, true
}

// HasPointsCalculate returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasPointsCalculate() bool {
	if o != nil && !IsNil(o.PointsCalculate) {
		return true
	}

	return false
}

// SetPointsCalculate gets a reference to the given bool and assigns it to the PointsCalculate field.
func (o *MembershipTransactionExceptionType) SetPointsCalculate(v bool) {
	o.PointsCalculate = &v
}

// GetUserNotes returns the UserNotes field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetUserNotes() string {
	if o == nil || IsNil(o.UserNotes) {
		var ret string
		return ret
	}
	return *o.UserNotes
}

// GetUserNotesOk returns a tuple with the UserNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetUserNotesOk() (*string, bool) {
	if o == nil || IsNil(o.UserNotes) {
		return nil, false
	}
	return o.UserNotes, true
}

// HasUserNotes returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasUserNotes() bool {
	if o != nil && !IsNil(o.UserNotes) {
		return true
	}

	return false
}

// SetUserNotes gets a reference to the given string and assigns it to the UserNotes field.
func (o *MembershipTransactionExceptionType) SetUserNotes(v string) {
	o.UserNotes = &v
}

// GetProcessingMessages returns the ProcessingMessages field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetProcessingMessages() string {
	if o == nil || IsNil(o.ProcessingMessages) {
		var ret string
		return ret
	}
	return *o.ProcessingMessages
}

// GetProcessingMessagesOk returns a tuple with the ProcessingMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetProcessingMessagesOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingMessages) {
		return nil, false
	}
	return o.ProcessingMessages, true
}

// HasProcessingMessages returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasProcessingMessages() bool {
	if o != nil && !IsNil(o.ProcessingMessages) {
		return true
	}

	return false
}

// SetProcessingMessages gets a reference to the given string and assigns it to the ProcessingMessages field.
func (o *MembershipTransactionExceptionType) SetProcessingMessages(v string) {
	o.ProcessingMessages = &v
}

// GetTotalPoints returns the TotalPoints field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetTotalPoints() float32 {
	if o == nil || IsNil(o.TotalPoints) {
		var ret float32
		return ret
	}
	return *o.TotalPoints
}

// GetTotalPointsOk returns a tuple with the TotalPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetTotalPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPoints) {
		return nil, false
	}
	return o.TotalPoints, true
}

// HasTotalPoints returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasTotalPoints() bool {
	if o != nil && !IsNil(o.TotalPoints) {
		return true
	}

	return false
}

// SetTotalPoints gets a reference to the given float32 and assigns it to the TotalPoints field.
func (o *MembershipTransactionExceptionType) SetTotalPoints(v float32) {
	o.TotalPoints = &v
}

// GetAwardBasePoints returns the AwardBasePoints field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetAwardBasePoints() float32 {
	if o == nil || IsNil(o.AwardBasePoints) {
		var ret float32
		return ret
	}
	return *o.AwardBasePoints
}

// GetAwardBasePointsOk returns a tuple with the AwardBasePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetAwardBasePointsOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardBasePoints) {
		return nil, false
	}
	return o.AwardBasePoints, true
}

// HasAwardBasePoints returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasAwardBasePoints() bool {
	if o != nil && !IsNil(o.AwardBasePoints) {
		return true
	}

	return false
}

// SetAwardBasePoints gets a reference to the given float32 and assigns it to the AwardBasePoints field.
func (o *MembershipTransactionExceptionType) SetAwardBasePoints(v float32) {
	o.AwardBasePoints = &v
}

// GetAwardBonusPoints returns the AwardBonusPoints field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetAwardBonusPoints() float32 {
	if o == nil || IsNil(o.AwardBonusPoints) {
		var ret float32
		return ret
	}
	return *o.AwardBonusPoints
}

// GetAwardBonusPointsOk returns a tuple with the AwardBonusPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetAwardBonusPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardBonusPoints) {
		return nil, false
	}
	return o.AwardBonusPoints, true
}

// HasAwardBonusPoints returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasAwardBonusPoints() bool {
	if o != nil && !IsNil(o.AwardBonusPoints) {
		return true
	}

	return false
}

// SetAwardBonusPoints gets a reference to the given float32 and assigns it to the AwardBonusPoints field.
func (o *MembershipTransactionExceptionType) SetAwardBonusPoints(v float32) {
	o.AwardBonusPoints = &v
}

// GetTierPoints returns the TierPoints field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetTierPoints() MembershipTransactionTierPointsType {
	if o == nil || IsNil(o.TierPoints) {
		var ret MembershipTransactionTierPointsType
		return ret
	}
	return *o.TierPoints
}

// GetTierPointsOk returns a tuple with the TierPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetTierPointsOk() (*MembershipTransactionTierPointsType, bool) {
	if o == nil || IsNil(o.TierPoints) {
		return nil, false
	}
	return o.TierPoints, true
}

// HasTierPoints returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasTierPoints() bool {
	if o != nil && !IsNil(o.TierPoints) {
		return true
	}

	return false
}

// SetTierPoints gets a reference to the given MembershipTransactionTierPointsType and assigns it to the TierPoints field.
func (o *MembershipTransactionExceptionType) SetTierPoints(v MembershipTransactionTierPointsType) {
	o.TierPoints = &v
}

// GetComputedPoints returns the ComputedPoints field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetComputedPoints() MembershipTransactionExceptionComputePointsType {
	if o == nil || IsNil(o.ComputedPoints) {
		var ret MembershipTransactionExceptionComputePointsType
		return ret
	}
	return *o.ComputedPoints
}

// GetComputedPointsOk returns a tuple with the ComputedPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetComputedPointsOk() (*MembershipTransactionExceptionComputePointsType, bool) {
	if o == nil || IsNil(o.ComputedPoints) {
		return nil, false
	}
	return o.ComputedPoints, true
}

// HasComputedPoints returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasComputedPoints() bool {
	if o != nil && !IsNil(o.ComputedPoints) {
		return true
	}

	return false
}

// SetComputedPoints gets a reference to the given MembershipTransactionExceptionComputePointsType and assigns it to the ComputedPoints field.
func (o *MembershipTransactionExceptionType) SetComputedPoints(v MembershipTransactionExceptionComputePointsType) {
	o.ComputedPoints = &v
}

// GetExceptionType returns the ExceptionType field value if set, zero value otherwise.
func (o *MembershipTransactionExceptionType) GetExceptionType() int32 {
	if o == nil || IsNil(o.ExceptionType) {
		var ret int32
		return ret
	}
	return *o.ExceptionType
}

// GetExceptionTypeOk returns a tuple with the ExceptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionExceptionType) GetExceptionTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.ExceptionType) {
		return nil, false
	}
	return o.ExceptionType, true
}

// HasExceptionType returns a boolean if a field has been set.
func (o *MembershipTransactionExceptionType) HasExceptionType() bool {
	if o != nil && !IsNil(o.ExceptionType) {
		return true
	}

	return false
}

// SetExceptionType gets a reference to the given int32 and assigns it to the ExceptionType field.
func (o *MembershipTransactionExceptionType) SetExceptionType(v int32) {
	o.ExceptionType = &v
}

func (o MembershipTransactionExceptionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTransactionExceptionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.MembershipCardNo) {
		toSerialize["membershipCardNo"] = o.MembershipCardNo
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.JoinedDate) {
		toSerialize["joinedDate"] = o.JoinedDate
	}
	if !IsNil(o.CardExpirationDate) {
		toSerialize["cardExpirationDate"] = o.CardExpirationDate
	}
	if !IsNil(o.MembershipTransactionId) {
		toSerialize["membershipTransactionId"] = o.MembershipTransactionId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.FromToRangeDate) {
		toSerialize["fromToRangeDate"] = o.FromToRangeDate
	}
	if !IsNil(o.ReservationNumber) {
		toSerialize["reservationNumber"] = o.ReservationNumber
	}
	if !IsNil(o.RoomsBooked) {
		toSerialize["roomsBooked"] = o.RoomsBooked
	}
	if !IsNil(o.BackToBack) {
		toSerialize["backToBack"] = o.BackToBack
	}
	if !IsNil(o.AverageRate) {
		toSerialize["averageRate"] = o.AverageRate
	}
	if !IsNil(o.TierStays) {
		toSerialize["tierStays"] = o.TierStays
	}
	if !IsNil(o.TotalAwardPoints) {
		toSerialize["totalAwardPoints"] = o.TotalAwardPoints
	}
	if !IsNil(o.TotalNights) {
		toSerialize["totalNights"] = o.TotalNights
	}
	if !IsNil(o.TotalRevenue) {
		toSerialize["totalRevenue"] = o.TotalRevenue
	}
	if !IsNil(o.PointsCalculate) {
		toSerialize["pointsCalculate"] = o.PointsCalculate
	}
	if !IsNil(o.UserNotes) {
		toSerialize["userNotes"] = o.UserNotes
	}
	if !IsNil(o.ProcessingMessages) {
		toSerialize["processingMessages"] = o.ProcessingMessages
	}
	if !IsNil(o.TotalPoints) {
		toSerialize["totalPoints"] = o.TotalPoints
	}
	if !IsNil(o.AwardBasePoints) {
		toSerialize["awardBasePoints"] = o.AwardBasePoints
	}
	if !IsNil(o.AwardBonusPoints) {
		toSerialize["awardBonusPoints"] = o.AwardBonusPoints
	}
	if !IsNil(o.TierPoints) {
		toSerialize["tierPoints"] = o.TierPoints
	}
	if !IsNil(o.ComputedPoints) {
		toSerialize["computedPoints"] = o.ComputedPoints
	}
	if !IsNil(o.ExceptionType) {
		toSerialize["exceptionType"] = o.ExceptionType
	}
	return toSerialize, nil
}

type NullableMembershipTransactionExceptionType struct {
	value *MembershipTransactionExceptionType
	isSet bool
}

func (v NullableMembershipTransactionExceptionType) Get() *MembershipTransactionExceptionType {
	return v.value
}

func (v *NullableMembershipTransactionExceptionType) Set(val *MembershipTransactionExceptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTransactionExceptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTransactionExceptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTransactionExceptionType(val *MembershipTransactionExceptionType) *NullableMembershipTransactionExceptionType {
	return &NullableMembershipTransactionExceptionType{value: val, isSet: true}
}

func (v NullableMembershipTransactionExceptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTransactionExceptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


