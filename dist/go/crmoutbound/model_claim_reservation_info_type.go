/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the ClaimReservationInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimReservationInfoType{}

// ClaimReservationInfoType Summary of claim activity log information.
type ClaimReservationInfoType struct {
	// Property where the stay associated with this claim.
	HotelId *string `json:"hotelId,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ConfirmationNo []UniqueIDType `json:"confirmationNo,omitempty"`
	// Arrival date for the stay associated with this claim.
	Arrival *string `json:"arrival,omitempty"`
	// Departure date for the stay associated with this claim.
	Departure *string `json:"departure,omitempty"`
}

// NewClaimReservationInfoType instantiates a new ClaimReservationInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimReservationInfoType() *ClaimReservationInfoType {
	this := ClaimReservationInfoType{}
	return &this
}

// NewClaimReservationInfoTypeWithDefaults instantiates a new ClaimReservationInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimReservationInfoTypeWithDefaults() *ClaimReservationInfoType {
	this := ClaimReservationInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ClaimReservationInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimReservationInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ClaimReservationInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ClaimReservationInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetConfirmationNo returns the ConfirmationNo field value if set, zero value otherwise.
func (o *ClaimReservationInfoType) GetConfirmationNo() []UniqueIDType {
	if o == nil || IsNil(o.ConfirmationNo) {
		var ret []UniqueIDType
		return ret
	}
	return o.ConfirmationNo
}

// GetConfirmationNoOk returns a tuple with the ConfirmationNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimReservationInfoType) GetConfirmationNoOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ConfirmationNo) {
		return nil, false
	}
	return o.ConfirmationNo, true
}

// HasConfirmationNo returns a boolean if a field has been set.
func (o *ClaimReservationInfoType) HasConfirmationNo() bool {
	if o != nil && !IsNil(o.ConfirmationNo) {
		return true
	}

	return false
}

// SetConfirmationNo gets a reference to the given []UniqueIDType and assigns it to the ConfirmationNo field.
func (o *ClaimReservationInfoType) SetConfirmationNo(v []UniqueIDType) {
	o.ConfirmationNo = v
}

// GetArrival returns the Arrival field value if set, zero value otherwise.
func (o *ClaimReservationInfoType) GetArrival() string {
	if o == nil || IsNil(o.Arrival) {
		var ret string
		return ret
	}
	return *o.Arrival
}

// GetArrivalOk returns a tuple with the Arrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimReservationInfoType) GetArrivalOk() (*string, bool) {
	if o == nil || IsNil(o.Arrival) {
		return nil, false
	}
	return o.Arrival, true
}

// HasArrival returns a boolean if a field has been set.
func (o *ClaimReservationInfoType) HasArrival() bool {
	if o != nil && !IsNil(o.Arrival) {
		return true
	}

	return false
}

// SetArrival gets a reference to the given string and assigns it to the Arrival field.
func (o *ClaimReservationInfoType) SetArrival(v string) {
	o.Arrival = &v
}

// GetDeparture returns the Departure field value if set, zero value otherwise.
func (o *ClaimReservationInfoType) GetDeparture() string {
	if o == nil || IsNil(o.Departure) {
		var ret string
		return ret
	}
	return *o.Departure
}

// GetDepartureOk returns a tuple with the Departure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimReservationInfoType) GetDepartureOk() (*string, bool) {
	if o == nil || IsNil(o.Departure) {
		return nil, false
	}
	return o.Departure, true
}

// HasDeparture returns a boolean if a field has been set.
func (o *ClaimReservationInfoType) HasDeparture() bool {
	if o != nil && !IsNil(o.Departure) {
		return true
	}

	return false
}

// SetDeparture gets a reference to the given string and assigns it to the Departure field.
func (o *ClaimReservationInfoType) SetDeparture(v string) {
	o.Departure = &v
}

func (o ClaimReservationInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimReservationInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ConfirmationNo) {
		toSerialize["confirmationNo"] = o.ConfirmationNo
	}
	if !IsNil(o.Arrival) {
		toSerialize["arrival"] = o.Arrival
	}
	if !IsNil(o.Departure) {
		toSerialize["departure"] = o.Departure
	}
	return toSerialize, nil
}

type NullableClaimReservationInfoType struct {
	value *ClaimReservationInfoType
	isSet bool
}

func (v NullableClaimReservationInfoType) Get() *ClaimReservationInfoType {
	return v.value
}

func (v *NullableClaimReservationInfoType) Set(val *ClaimReservationInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimReservationInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimReservationInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimReservationInfoType(val *ClaimReservationInfoType) *NullableClaimReservationInfoType {
	return &NullableClaimReservationInfoType{value: val, isSet: true}
}

func (v NullableClaimReservationInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimReservationInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


