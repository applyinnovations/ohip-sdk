/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 20.99.99.99
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
)

// checks if the ResAttachedProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResAttachedProfileType{}

// ResAttachedProfileType struct for ResAttachedProfileType
type ResAttachedProfileType struct {
	// Attached profile name
	Name *string `json:"name,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ProfileIdList []UniqueIDType `json:"profileIdList,omitempty"`
	ResProfileType *ResProfileTypeType `json:"resProfileType,omitempty"`
}

// NewResAttachedProfileType instantiates a new ResAttachedProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResAttachedProfileType() *ResAttachedProfileType {
	this := ResAttachedProfileType{}
	return &this
}

// NewResAttachedProfileTypeWithDefaults instantiates a new ResAttachedProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResAttachedProfileTypeWithDefaults() *ResAttachedProfileType {
	this := ResAttachedProfileType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResAttachedProfileType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResAttachedProfileType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResAttachedProfileType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResAttachedProfileType) SetName(v string) {
	o.Name = &v
}

// GetProfileIdList returns the ProfileIdList field value if set, zero value otherwise.
func (o *ResAttachedProfileType) GetProfileIdList() []UniqueIDType {
	if o == nil || IsNil(o.ProfileIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ProfileIdList
}

// GetProfileIdListOk returns a tuple with the ProfileIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResAttachedProfileType) GetProfileIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ProfileIdList) {
		return nil, false
	}
	return o.ProfileIdList, true
}

// HasProfileIdList returns a boolean if a field has been set.
func (o *ResAttachedProfileType) HasProfileIdList() bool {
	if o != nil && !IsNil(o.ProfileIdList) {
		return true
	}

	return false
}

// SetProfileIdList gets a reference to the given []UniqueIDType and assigns it to the ProfileIdList field.
func (o *ResAttachedProfileType) SetProfileIdList(v []UniqueIDType) {
	o.ProfileIdList = v
}

// GetResProfileType returns the ResProfileType field value if set, zero value otherwise.
func (o *ResAttachedProfileType) GetResProfileType() ResProfileTypeType {
	if o == nil || IsNil(o.ResProfileType) {
		var ret ResProfileTypeType
		return ret
	}
	return *o.ResProfileType
}

// GetResProfileTypeOk returns a tuple with the ResProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResAttachedProfileType) GetResProfileTypeOk() (*ResProfileTypeType, bool) {
	if o == nil || IsNil(o.ResProfileType) {
		return nil, false
	}
	return o.ResProfileType, true
}

// HasResProfileType returns a boolean if a field has been set.
func (o *ResAttachedProfileType) HasResProfileType() bool {
	if o != nil && !IsNil(o.ResProfileType) {
		return true
	}

	return false
}

// SetResProfileType gets a reference to the given ResProfileTypeType and assigns it to the ResProfileType field.
func (o *ResAttachedProfileType) SetResProfileType(v ResProfileTypeType) {
	o.ResProfileType = &v
}

func (o ResAttachedProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResAttachedProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProfileIdList) {
		toSerialize["profileIdList"] = o.ProfileIdList
	}
	if !IsNil(o.ResProfileType) {
		toSerialize["resProfileType"] = o.ResProfileType
	}
	return toSerialize, nil
}

type NullableResAttachedProfileType struct {
	value *ResAttachedProfileType
	isSet bool
}

func (v NullableResAttachedProfileType) Get() *ResAttachedProfileType {
	return v.value
}

func (v *NullableResAttachedProfileType) Set(val *ResAttachedProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableResAttachedProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableResAttachedProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResAttachedProfileType(val *ResAttachedProfileType) *NullableResAttachedProfileType {
	return &NullableResAttachedProfileType{value: val, isSet: true}
}

func (v NullableResAttachedProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResAttachedProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


