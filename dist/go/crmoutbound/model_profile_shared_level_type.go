/*
OPERA Cloud Customer Relationship Management Outbound API

APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmoutbound

import (
	"encoding/json"
	"fmt"
)

// ProfileSharedLevelType Simple types for Shared level.
type ProfileSharedLevelType string

// List of profileSharedLevelType
const (
	PROFILESHAREDLEVELTYPE_GLOBAL ProfileSharedLevelType = "Global"
	PROFILESHAREDLEVELTYPE_PROPERTY ProfileSharedLevelType = "Property"
	PROFILESHAREDLEVELTYPE_CRO ProfileSharedLevelType = "Cro"
)

// All allowed values of ProfileSharedLevelType enum
var AllowedProfileSharedLevelTypeEnumValues = []ProfileSharedLevelType{
	"Global",
	"Property",
	"Cro",
}

func (v *ProfileSharedLevelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileSharedLevelType(value)
	for _, existing := range AllowedProfileSharedLevelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileSharedLevelType", value)
}

// NewProfileSharedLevelTypeFromValue returns a pointer to a valid ProfileSharedLevelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileSharedLevelTypeFromValue(v string) (*ProfileSharedLevelType, error) {
	ev := ProfileSharedLevelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileSharedLevelType: valid values are %v", v, AllowedProfileSharedLevelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileSharedLevelType) IsValid() bool {
	for _, existing := range AllowedProfileSharedLevelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to profileSharedLevelType value
func (v ProfileSharedLevelType) Ptr() *ProfileSharedLevelType {
	return &v
}

type NullableProfileSharedLevelType struct {
	value *ProfileSharedLevelType
	isSet bool
}

func (v NullableProfileSharedLevelType) Get() *ProfileSharedLevelType {
	return v.value
}

func (v *NullableProfileSharedLevelType) Set(val *ProfileSharedLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileSharedLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileSharedLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileSharedLevelType(val *ProfileSharedLevelType) *NullableProfileSharedLevelType {
	return &NullableProfileSharedLevelType{value: val, isSet: true}
}

func (v NullableProfileSharedLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileSharedLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

