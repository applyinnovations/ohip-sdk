/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateGroupType{}

// RateGroupType Details of Rate Group.
type RateGroupType struct {
	// Hotel Code the Rate Group belong to.
	HotelId *string `json:"hotelId,omitempty"`
	// Unique code for Rate group.
	RateGroupCode *string `json:"rateGroupCode,omitempty"`
	// Rate Group Description.
	Description *string `json:"description,omitempty"`
}

// NewRateGroupType instantiates a new RateGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateGroupType() *RateGroupType {
	this := RateGroupType{}
	return &this
}

// NewRateGroupTypeWithDefaults instantiates a new RateGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateGroupTypeWithDefaults() *RateGroupType {
	this := RateGroupType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RateGroupType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateGroupType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RateGroupType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RateGroupType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRateGroupCode returns the RateGroupCode field value if set, zero value otherwise.
func (o *RateGroupType) GetRateGroupCode() string {
	if o == nil || IsNil(o.RateGroupCode) {
		var ret string
		return ret
	}
	return *o.RateGroupCode
}

// GetRateGroupCodeOk returns a tuple with the RateGroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateGroupType) GetRateGroupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateGroupCode) {
		return nil, false
	}
	return o.RateGroupCode, true
}

// HasRateGroupCode returns a boolean if a field has been set.
func (o *RateGroupType) HasRateGroupCode() bool {
	if o != nil && !IsNil(o.RateGroupCode) {
		return true
	}

	return false
}

// SetRateGroupCode gets a reference to the given string and assigns it to the RateGroupCode field.
func (o *RateGroupType) SetRateGroupCode(v string) {
	o.RateGroupCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RateGroupType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateGroupType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RateGroupType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RateGroupType) SetDescription(v string) {
	o.Description = &v
}

func (o RateGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RateGroupCode) {
		toSerialize["rateGroupCode"] = o.RateGroupCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableRateGroupType struct {
	value *RateGroupType
	isSet bool
}

func (v NullableRateGroupType) Get() *RateGroupType {
	return v.value
}

func (v *NullableRateGroupType) Set(val *RateGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateGroupType(val *RateGroupType) *NullableRateGroupType {
	return &NullableRateGroupType{value: val, isSet: true}
}

func (v NullableRateGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


