/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the ThresholdType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThresholdType{}

// ThresholdType Condition threshold value with incremental flag.
type ThresholdType struct {
	// If incremental flag is true, condition threshold value represents increment or decrement to be adjusted, otherwise it represents an absolute value.
	Incremental *bool `json:"incremental,omitempty"`
	// Property Value
	Value *int32 `json:"value,omitempty"`
}

// NewThresholdType instantiates a new ThresholdType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThresholdType() *ThresholdType {
	this := ThresholdType{}
	return &this
}

// NewThresholdTypeWithDefaults instantiates a new ThresholdType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThresholdTypeWithDefaults() *ThresholdType {
	this := ThresholdType{}
	return &this
}

// GetIncremental returns the Incremental field value if set, zero value otherwise.
func (o *ThresholdType) GetIncremental() bool {
	if o == nil || IsNil(o.Incremental) {
		var ret bool
		return ret
	}
	return *o.Incremental
}

// GetIncrementalOk returns a tuple with the Incremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdType) GetIncrementalOk() (*bool, bool) {
	if o == nil || IsNil(o.Incremental) {
		return nil, false
	}
	return o.Incremental, true
}

// HasIncremental returns a boolean if a field has been set.
func (o *ThresholdType) HasIncremental() bool {
	if o != nil && !IsNil(o.Incremental) {
		return true
	}

	return false
}

// SetIncremental gets a reference to the given bool and assigns it to the Incremental field.
func (o *ThresholdType) SetIncremental(v bool) {
	o.Incremental = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ThresholdType) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThresholdType) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ThresholdType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *ThresholdType) SetValue(v int32) {
	o.Value = &v
}

func (o ThresholdType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThresholdType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Incremental) {
		toSerialize["incremental"] = o.Incremental
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableThresholdType struct {
	value *ThresholdType
	isSet bool
}

func (v NullableThresholdType) Get() *ThresholdType {
	return v.value
}

func (v *NullableThresholdType) Set(val *ThresholdType) {
	v.value = val
	v.isSet = true
}

func (v NullableThresholdType) IsSet() bool {
	return v.isSet
}

func (v *NullableThresholdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThresholdType(val *ThresholdType) *NullableThresholdType {
	return &NullableThresholdType{value: val, isSet: true}
}

func (v NullableThresholdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThresholdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


