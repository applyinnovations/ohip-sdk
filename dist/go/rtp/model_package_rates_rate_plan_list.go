/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the PackageRatesRatePlanList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageRatesRatePlanList{}

// PackageRatesRatePlanList Hotel code for which rates are associated.
type PackageRatesRatePlanList struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelCode *string `json:"hotelCode,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	PackageCode *string `json:"packageCode,omitempty"`
	RatePlan []RatePlanShortInfoType `json:"ratePlan,omitempty"`
}

// NewPackageRatesRatePlanList instantiates a new PackageRatesRatePlanList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageRatesRatePlanList() *PackageRatesRatePlanList {
	this := PackageRatesRatePlanList{}
	return &this
}

// NewPackageRatesRatePlanListWithDefaults instantiates a new PackageRatesRatePlanList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageRatesRatePlanListWithDefaults() *PackageRatesRatePlanList {
	this := PackageRatesRatePlanList{}
	return &this
}

// GetHotelCode returns the HotelCode field value if set, zero value otherwise.
func (o *PackageRatesRatePlanList) GetHotelCode() string {
	if o == nil || IsNil(o.HotelCode) {
		var ret string
		return ret
	}
	return *o.HotelCode
}

// GetHotelCodeOk returns a tuple with the HotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageRatesRatePlanList) GetHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCode) {
		return nil, false
	}
	return o.HotelCode, true
}

// HasHotelCode returns a boolean if a field has been set.
func (o *PackageRatesRatePlanList) HasHotelCode() bool {
	if o != nil && !IsNil(o.HotelCode) {
		return true
	}

	return false
}

// SetHotelCode gets a reference to the given string and assigns it to the HotelCode field.
func (o *PackageRatesRatePlanList) SetHotelCode(v string) {
	o.HotelCode = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *PackageRatesRatePlanList) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageRatesRatePlanList) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *PackageRatesRatePlanList) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *PackageRatesRatePlanList) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetRatePlan returns the RatePlan field value if set, zero value otherwise.
func (o *PackageRatesRatePlanList) GetRatePlan() []RatePlanShortInfoType {
	if o == nil || IsNil(o.RatePlan) {
		var ret []RatePlanShortInfoType
		return ret
	}
	return o.RatePlan
}

// GetRatePlanOk returns a tuple with the RatePlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageRatesRatePlanList) GetRatePlanOk() ([]RatePlanShortInfoType, bool) {
	if o == nil || IsNil(o.RatePlan) {
		return nil, false
	}
	return o.RatePlan, true
}

// HasRatePlan returns a boolean if a field has been set.
func (o *PackageRatesRatePlanList) HasRatePlan() bool {
	if o != nil && !IsNil(o.RatePlan) {
		return true
	}

	return false
}

// SetRatePlan gets a reference to the given []RatePlanShortInfoType and assigns it to the RatePlan field.
func (o *PackageRatesRatePlanList) SetRatePlan(v []RatePlanShortInfoType) {
	o.RatePlan = v
}

func (o PackageRatesRatePlanList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageRatesRatePlanList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelCode) {
		toSerialize["hotelCode"] = o.HotelCode
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.RatePlan) {
		toSerialize["ratePlan"] = o.RatePlan
	}
	return toSerialize, nil
}

type NullablePackageRatesRatePlanList struct {
	value *PackageRatesRatePlanList
	isSet bool
}

func (v NullablePackageRatesRatePlanList) Get() *PackageRatesRatePlanList {
	return v.value
}

func (v *NullablePackageRatesRatePlanList) Set(val *PackageRatesRatePlanList) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageRatesRatePlanList) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageRatesRatePlanList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageRatesRatePlanList(val *PackageRatesRatePlanList) *NullablePackageRatesRatePlanList {
	return &NullablePackageRatesRatePlanList{value: val, isSet: true}
}

func (v NullablePackageRatesRatePlanList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageRatesRatePlanList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


