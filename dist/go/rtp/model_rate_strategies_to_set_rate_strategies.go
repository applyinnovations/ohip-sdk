/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateStrategiesToSetRateStrategies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateStrategiesToSetRateStrategies{}

// RateStrategiesToSetRateStrategies Collection of rate strategies.
type RateStrategiesToSetRateStrategies struct {
	// If AutoCounterStrategy flag is true, system will automatically create or update a counter strategy for open and close condition type strategy.
	AutoCounterStrategy *bool `json:"autoCounterStrategy,omitempty"`
	// Rate Strategy details to be created or changed.
	RateStrategy []HotelRateStrategyType `json:"rateStrategy,omitempty"`
}

// NewRateStrategiesToSetRateStrategies instantiates a new RateStrategiesToSetRateStrategies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateStrategiesToSetRateStrategies() *RateStrategiesToSetRateStrategies {
	this := RateStrategiesToSetRateStrategies{}
	return &this
}

// NewRateStrategiesToSetRateStrategiesWithDefaults instantiates a new RateStrategiesToSetRateStrategies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateStrategiesToSetRateStrategiesWithDefaults() *RateStrategiesToSetRateStrategies {
	this := RateStrategiesToSetRateStrategies{}
	return &this
}

// GetAutoCounterStrategy returns the AutoCounterStrategy field value if set, zero value otherwise.
func (o *RateStrategiesToSetRateStrategies) GetAutoCounterStrategy() bool {
	if o == nil || IsNil(o.AutoCounterStrategy) {
		var ret bool
		return ret
	}
	return *o.AutoCounterStrategy
}

// GetAutoCounterStrategyOk returns a tuple with the AutoCounterStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateStrategiesToSetRateStrategies) GetAutoCounterStrategyOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCounterStrategy) {
		return nil, false
	}
	return o.AutoCounterStrategy, true
}

// HasAutoCounterStrategy returns a boolean if a field has been set.
func (o *RateStrategiesToSetRateStrategies) HasAutoCounterStrategy() bool {
	if o != nil && !IsNil(o.AutoCounterStrategy) {
		return true
	}

	return false
}

// SetAutoCounterStrategy gets a reference to the given bool and assigns it to the AutoCounterStrategy field.
func (o *RateStrategiesToSetRateStrategies) SetAutoCounterStrategy(v bool) {
	o.AutoCounterStrategy = &v
}

// GetRateStrategy returns the RateStrategy field value if set, zero value otherwise.
func (o *RateStrategiesToSetRateStrategies) GetRateStrategy() []HotelRateStrategyType {
	if o == nil || IsNil(o.RateStrategy) {
		var ret []HotelRateStrategyType
		return ret
	}
	return o.RateStrategy
}

// GetRateStrategyOk returns a tuple with the RateStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateStrategiesToSetRateStrategies) GetRateStrategyOk() ([]HotelRateStrategyType, bool) {
	if o == nil || IsNil(o.RateStrategy) {
		return nil, false
	}
	return o.RateStrategy, true
}

// HasRateStrategy returns a boolean if a field has been set.
func (o *RateStrategiesToSetRateStrategies) HasRateStrategy() bool {
	if o != nil && !IsNil(o.RateStrategy) {
		return true
	}

	return false
}

// SetRateStrategy gets a reference to the given []HotelRateStrategyType and assigns it to the RateStrategy field.
func (o *RateStrategiesToSetRateStrategies) SetRateStrategy(v []HotelRateStrategyType) {
	o.RateStrategy = v
}

func (o RateStrategiesToSetRateStrategies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateStrategiesToSetRateStrategies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoCounterStrategy) {
		toSerialize["autoCounterStrategy"] = o.AutoCounterStrategy
	}
	if !IsNil(o.RateStrategy) {
		toSerialize["rateStrategy"] = o.RateStrategy
	}
	return toSerialize, nil
}

type NullableRateStrategiesToSetRateStrategies struct {
	value *RateStrategiesToSetRateStrategies
	isSet bool
}

func (v NullableRateStrategiesToSetRateStrategies) Get() *RateStrategiesToSetRateStrategies {
	return v.value
}

func (v *NullableRateStrategiesToSetRateStrategies) Set(val *RateStrategiesToSetRateStrategies) {
	v.value = val
	v.isSet = true
}

func (v NullableRateStrategiesToSetRateStrategies) IsSet() bool {
	return v.isSet
}

func (v *NullableRateStrategiesToSetRateStrategies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateStrategiesToSetRateStrategies(val *RateStrategiesToSetRateStrategies) *NullableRateStrategiesToSetRateStrategies {
	return &NullableRateStrategiesToSetRateStrategies{value: val, isSet: true}
}

func (v NullableRateStrategiesToSetRateStrategies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateStrategiesToSetRateStrategies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


