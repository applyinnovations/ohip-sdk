/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanPostingRhythmType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanPostingRhythmType{}

// RatePlanPostingRhythmType Rate Plan Posting rhythm type.
type RatePlanPostingRhythmType struct {
	DoNotPostEveryXNights *RatePlanPostingRhythmTypeDoNotPostEveryXNights `json:"doNotPostEveryXNights,omitempty"`
}

// NewRatePlanPostingRhythmType instantiates a new RatePlanPostingRhythmType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanPostingRhythmType() *RatePlanPostingRhythmType {
	this := RatePlanPostingRhythmType{}
	return &this
}

// NewRatePlanPostingRhythmTypeWithDefaults instantiates a new RatePlanPostingRhythmType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanPostingRhythmTypeWithDefaults() *RatePlanPostingRhythmType {
	this := RatePlanPostingRhythmType{}
	return &this
}

// GetDoNotPostEveryXNights returns the DoNotPostEveryXNights field value if set, zero value otherwise.
func (o *RatePlanPostingRhythmType) GetDoNotPostEveryXNights() RatePlanPostingRhythmTypeDoNotPostEveryXNights {
	if o == nil || IsNil(o.DoNotPostEveryXNights) {
		var ret RatePlanPostingRhythmTypeDoNotPostEveryXNights
		return ret
	}
	return *o.DoNotPostEveryXNights
}

// GetDoNotPostEveryXNightsOk returns a tuple with the DoNotPostEveryXNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanPostingRhythmType) GetDoNotPostEveryXNightsOk() (*RatePlanPostingRhythmTypeDoNotPostEveryXNights, bool) {
	if o == nil || IsNil(o.DoNotPostEveryXNights) {
		return nil, false
	}
	return o.DoNotPostEveryXNights, true
}

// HasDoNotPostEveryXNights returns a boolean if a field has been set.
func (o *RatePlanPostingRhythmType) HasDoNotPostEveryXNights() bool {
	if o != nil && !IsNil(o.DoNotPostEveryXNights) {
		return true
	}

	return false
}

// SetDoNotPostEveryXNights gets a reference to the given RatePlanPostingRhythmTypeDoNotPostEveryXNights and assigns it to the DoNotPostEveryXNights field.
func (o *RatePlanPostingRhythmType) SetDoNotPostEveryXNights(v RatePlanPostingRhythmTypeDoNotPostEveryXNights) {
	o.DoNotPostEveryXNights = &v
}

func (o RatePlanPostingRhythmType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanPostingRhythmType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DoNotPostEveryXNights) {
		toSerialize["doNotPostEveryXNights"] = o.DoNotPostEveryXNights
	}
	return toSerialize, nil
}

type NullableRatePlanPostingRhythmType struct {
	value *RatePlanPostingRhythmType
	isSet bool
}

func (v NullableRatePlanPostingRhythmType) Get() *RatePlanPostingRhythmType {
	return v.value
}

func (v *NullableRatePlanPostingRhythmType) Set(val *RatePlanPostingRhythmType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanPostingRhythmType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanPostingRhythmType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanPostingRhythmType(val *RatePlanPostingRhythmType) *NullableRatePlanPostingRhythmType {
	return &NullableRatePlanPostingRhythmType{value: val, isSet: true}
}

func (v NullableRatePlanPostingRhythmType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanPostingRhythmType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


