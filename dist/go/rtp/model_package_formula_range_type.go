/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the PackageFormulaRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageFormulaRangeType{}

// PackageFormulaRangeType Package Formula Ranges data.
type PackageFormulaRangeType struct {
	// Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	// Tax Range Type.
	TaxRangeType *string `json:"taxRangeType,omitempty"`
	AmountFrom *CurrencyAmountType `json:"amountFrom,omitempty"`
	AmountTo *CurrencyAmountType `json:"amountTo,omitempty"`
	TaxAmount *CurrencyAmountType `json:"taxAmount,omitempty"`
	IntervalAmount *CurrencyAmountType `json:"intervalAmount,omitempty"`
	// Package Formula Range Id.
	PkgFormulaRangeId *int32 `json:"pkgFormulaRangeId,omitempty"`
}

// NewPackageFormulaRangeType instantiates a new PackageFormulaRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageFormulaRangeType() *PackageFormulaRangeType {
	this := PackageFormulaRangeType{}
	return &this
}

// NewPackageFormulaRangeTypeWithDefaults instantiates a new PackageFormulaRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageFormulaRangeTypeWithDefaults() *PackageFormulaRangeType {
	this := PackageFormulaRangeType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PackageFormulaRangeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFormulaRangeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PackageFormulaRangeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PackageFormulaRangeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTaxRangeType returns the TaxRangeType field value if set, zero value otherwise.
func (o *PackageFormulaRangeType) GetTaxRangeType() string {
	if o == nil || IsNil(o.TaxRangeType) {
		var ret string
		return ret
	}
	return *o.TaxRangeType
}

// GetTaxRangeTypeOk returns a tuple with the TaxRangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFormulaRangeType) GetTaxRangeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TaxRangeType) {
		return nil, false
	}
	return o.TaxRangeType, true
}

// HasTaxRangeType returns a boolean if a field has been set.
func (o *PackageFormulaRangeType) HasTaxRangeType() bool {
	if o != nil && !IsNil(o.TaxRangeType) {
		return true
	}

	return false
}

// SetTaxRangeType gets a reference to the given string and assigns it to the TaxRangeType field.
func (o *PackageFormulaRangeType) SetTaxRangeType(v string) {
	o.TaxRangeType = &v
}

// GetAmountFrom returns the AmountFrom field value if set, zero value otherwise.
func (o *PackageFormulaRangeType) GetAmountFrom() CurrencyAmountType {
	if o == nil || IsNil(o.AmountFrom) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AmountFrom
}

// GetAmountFromOk returns a tuple with the AmountFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFormulaRangeType) GetAmountFromOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AmountFrom) {
		return nil, false
	}
	return o.AmountFrom, true
}

// HasAmountFrom returns a boolean if a field has been set.
func (o *PackageFormulaRangeType) HasAmountFrom() bool {
	if o != nil && !IsNil(o.AmountFrom) {
		return true
	}

	return false
}

// SetAmountFrom gets a reference to the given CurrencyAmountType and assigns it to the AmountFrom field.
func (o *PackageFormulaRangeType) SetAmountFrom(v CurrencyAmountType) {
	o.AmountFrom = &v
}

// GetAmountTo returns the AmountTo field value if set, zero value otherwise.
func (o *PackageFormulaRangeType) GetAmountTo() CurrencyAmountType {
	if o == nil || IsNil(o.AmountTo) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AmountTo
}

// GetAmountToOk returns a tuple with the AmountTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFormulaRangeType) GetAmountToOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AmountTo) {
		return nil, false
	}
	return o.AmountTo, true
}

// HasAmountTo returns a boolean if a field has been set.
func (o *PackageFormulaRangeType) HasAmountTo() bool {
	if o != nil && !IsNil(o.AmountTo) {
		return true
	}

	return false
}

// SetAmountTo gets a reference to the given CurrencyAmountType and assigns it to the AmountTo field.
func (o *PackageFormulaRangeType) SetAmountTo(v CurrencyAmountType) {
	o.AmountTo = &v
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise.
func (o *PackageFormulaRangeType) GetTaxAmount() CurrencyAmountType {
	if o == nil || IsNil(o.TaxAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFormulaRangeType) GetTaxAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.TaxAmount) {
		return nil, false
	}
	return o.TaxAmount, true
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *PackageFormulaRangeType) HasTaxAmount() bool {
	if o != nil && !IsNil(o.TaxAmount) {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given CurrencyAmountType and assigns it to the TaxAmount field.
func (o *PackageFormulaRangeType) SetTaxAmount(v CurrencyAmountType) {
	o.TaxAmount = &v
}

// GetIntervalAmount returns the IntervalAmount field value if set, zero value otherwise.
func (o *PackageFormulaRangeType) GetIntervalAmount() CurrencyAmountType {
	if o == nil || IsNil(o.IntervalAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.IntervalAmount
}

// GetIntervalAmountOk returns a tuple with the IntervalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFormulaRangeType) GetIntervalAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.IntervalAmount) {
		return nil, false
	}
	return o.IntervalAmount, true
}

// HasIntervalAmount returns a boolean if a field has been set.
func (o *PackageFormulaRangeType) HasIntervalAmount() bool {
	if o != nil && !IsNil(o.IntervalAmount) {
		return true
	}

	return false
}

// SetIntervalAmount gets a reference to the given CurrencyAmountType and assigns it to the IntervalAmount field.
func (o *PackageFormulaRangeType) SetIntervalAmount(v CurrencyAmountType) {
	o.IntervalAmount = &v
}

// GetPkgFormulaRangeId returns the PkgFormulaRangeId field value if set, zero value otherwise.
func (o *PackageFormulaRangeType) GetPkgFormulaRangeId() int32 {
	if o == nil || IsNil(o.PkgFormulaRangeId) {
		var ret int32
		return ret
	}
	return *o.PkgFormulaRangeId
}

// GetPkgFormulaRangeIdOk returns a tuple with the PkgFormulaRangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFormulaRangeType) GetPkgFormulaRangeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PkgFormulaRangeId) {
		return nil, false
	}
	return o.PkgFormulaRangeId, true
}

// HasPkgFormulaRangeId returns a boolean if a field has been set.
func (o *PackageFormulaRangeType) HasPkgFormulaRangeId() bool {
	if o != nil && !IsNil(o.PkgFormulaRangeId) {
		return true
	}

	return false
}

// SetPkgFormulaRangeId gets a reference to the given int32 and assigns it to the PkgFormulaRangeId field.
func (o *PackageFormulaRangeType) SetPkgFormulaRangeId(v int32) {
	o.PkgFormulaRangeId = &v
}

func (o PackageFormulaRangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageFormulaRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TaxRangeType) {
		toSerialize["taxRangeType"] = o.TaxRangeType
	}
	if !IsNil(o.AmountFrom) {
		toSerialize["amountFrom"] = o.AmountFrom
	}
	if !IsNil(o.AmountTo) {
		toSerialize["amountTo"] = o.AmountTo
	}
	if !IsNil(o.TaxAmount) {
		toSerialize["taxAmount"] = o.TaxAmount
	}
	if !IsNil(o.IntervalAmount) {
		toSerialize["intervalAmount"] = o.IntervalAmount
	}
	if !IsNil(o.PkgFormulaRangeId) {
		toSerialize["pkgFormulaRangeId"] = o.PkgFormulaRangeId
	}
	return toSerialize, nil
}

type NullablePackageFormulaRangeType struct {
	value *PackageFormulaRangeType
	isSet bool
}

func (v NullablePackageFormulaRangeType) Get() *PackageFormulaRangeType {
	return v.value
}

func (v *NullablePackageFormulaRangeType) Set(val *PackageFormulaRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageFormulaRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageFormulaRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageFormulaRangeType(val *PackageFormulaRangeType) *NullablePackageFormulaRangeType {
	return &NullablePackageFormulaRangeType{value: val, isSet: true}
}

func (v NullablePackageFormulaRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageFormulaRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


