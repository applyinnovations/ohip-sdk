/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanBasedOnRateTypeBARBasedRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanBasedOnRateTypeBARBasedRate{}

// RatePlanBasedOnRateTypeBARBasedRate Best Available Rate (BAR) Based Rate type
type RatePlanBasedOnRateTypeBARBasedRate struct {
	// Base Amount used for BAR based rate calculation.
	BARBaseAmount *float32 `json:"bARBaseAmount,omitempty"`
	// Flat or Percentage (FLT/PCT) indicator.
	FlatOrPercentage *string `json:"flatOrPercentage,omitempty"`
	// Rounding style used for the calculated rate amounts. Valid values are U,D,N,C,F which means Up, Down, None, Up-Keep Decimal, Down - Keep Decimal.
	Rounding *string `json:"rounding,omitempty"`
	// While showing availability, do system need to compare the static rates defined for the rate with dynamically computed BAR based rate pricing? If true, availability shows lower of the these two pricing. If false, availabilty shows the dynamically calucated pricing.
	CompareWithRateSchedules *bool `json:"compareWithRateSchedules,omitempty"`
	// While showing availability, in case all the BAR rates are closed whether to calculate the rate amount based on highest BAR instead of defaulting to its own rate schedule. If false, availability shows rates from its own rate schedule.
	DefaultToHighestBar *bool `json:"defaultToHighestBar,omitempty"`
}

// NewRatePlanBasedOnRateTypeBARBasedRate instantiates a new RatePlanBasedOnRateTypeBARBasedRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanBasedOnRateTypeBARBasedRate() *RatePlanBasedOnRateTypeBARBasedRate {
	this := RatePlanBasedOnRateTypeBARBasedRate{}
	return &this
}

// NewRatePlanBasedOnRateTypeBARBasedRateWithDefaults instantiates a new RatePlanBasedOnRateTypeBARBasedRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanBasedOnRateTypeBARBasedRateWithDefaults() *RatePlanBasedOnRateTypeBARBasedRate {
	this := RatePlanBasedOnRateTypeBARBasedRate{}
	return &this
}

// GetBARBaseAmount returns the BARBaseAmount field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetBARBaseAmount() float32 {
	if o == nil || IsNil(o.BARBaseAmount) {
		var ret float32
		return ret
	}
	return *o.BARBaseAmount
}

// GetBARBaseAmountOk returns a tuple with the BARBaseAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetBARBaseAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BARBaseAmount) {
		return nil, false
	}
	return o.BARBaseAmount, true
}

// HasBARBaseAmount returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) HasBARBaseAmount() bool {
	if o != nil && !IsNil(o.BARBaseAmount) {
		return true
	}

	return false
}

// SetBARBaseAmount gets a reference to the given float32 and assigns it to the BARBaseAmount field.
func (o *RatePlanBasedOnRateTypeBARBasedRate) SetBARBaseAmount(v float32) {
	o.BARBaseAmount = &v
}

// GetFlatOrPercentage returns the FlatOrPercentage field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetFlatOrPercentage() string {
	if o == nil || IsNil(o.FlatOrPercentage) {
		var ret string
		return ret
	}
	return *o.FlatOrPercentage
}

// GetFlatOrPercentageOk returns a tuple with the FlatOrPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetFlatOrPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.FlatOrPercentage) {
		return nil, false
	}
	return o.FlatOrPercentage, true
}

// HasFlatOrPercentage returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) HasFlatOrPercentage() bool {
	if o != nil && !IsNil(o.FlatOrPercentage) {
		return true
	}

	return false
}

// SetFlatOrPercentage gets a reference to the given string and assigns it to the FlatOrPercentage field.
func (o *RatePlanBasedOnRateTypeBARBasedRate) SetFlatOrPercentage(v string) {
	o.FlatOrPercentage = &v
}

// GetRounding returns the Rounding field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetRounding() string {
	if o == nil || IsNil(o.Rounding) {
		var ret string
		return ret
	}
	return *o.Rounding
}

// GetRoundingOk returns a tuple with the Rounding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetRoundingOk() (*string, bool) {
	if o == nil || IsNil(o.Rounding) {
		return nil, false
	}
	return o.Rounding, true
}

// HasRounding returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) HasRounding() bool {
	if o != nil && !IsNil(o.Rounding) {
		return true
	}

	return false
}

// SetRounding gets a reference to the given string and assigns it to the Rounding field.
func (o *RatePlanBasedOnRateTypeBARBasedRate) SetRounding(v string) {
	o.Rounding = &v
}

// GetCompareWithRateSchedules returns the CompareWithRateSchedules field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetCompareWithRateSchedules() bool {
	if o == nil || IsNil(o.CompareWithRateSchedules) {
		var ret bool
		return ret
	}
	return *o.CompareWithRateSchedules
}

// GetCompareWithRateSchedulesOk returns a tuple with the CompareWithRateSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetCompareWithRateSchedulesOk() (*bool, bool) {
	if o == nil || IsNil(o.CompareWithRateSchedules) {
		return nil, false
	}
	return o.CompareWithRateSchedules, true
}

// HasCompareWithRateSchedules returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) HasCompareWithRateSchedules() bool {
	if o != nil && !IsNil(o.CompareWithRateSchedules) {
		return true
	}

	return false
}

// SetCompareWithRateSchedules gets a reference to the given bool and assigns it to the CompareWithRateSchedules field.
func (o *RatePlanBasedOnRateTypeBARBasedRate) SetCompareWithRateSchedules(v bool) {
	o.CompareWithRateSchedules = &v
}

// GetDefaultToHighestBar returns the DefaultToHighestBar field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetDefaultToHighestBar() bool {
	if o == nil || IsNil(o.DefaultToHighestBar) {
		var ret bool
		return ret
	}
	return *o.DefaultToHighestBar
}

// GetDefaultToHighestBarOk returns a tuple with the DefaultToHighestBar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) GetDefaultToHighestBarOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultToHighestBar) {
		return nil, false
	}
	return o.DefaultToHighestBar, true
}

// HasDefaultToHighestBar returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeBARBasedRate) HasDefaultToHighestBar() bool {
	if o != nil && !IsNil(o.DefaultToHighestBar) {
		return true
	}

	return false
}

// SetDefaultToHighestBar gets a reference to the given bool and assigns it to the DefaultToHighestBar field.
func (o *RatePlanBasedOnRateTypeBARBasedRate) SetDefaultToHighestBar(v bool) {
	o.DefaultToHighestBar = &v
}

func (o RatePlanBasedOnRateTypeBARBasedRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanBasedOnRateTypeBARBasedRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BARBaseAmount) {
		toSerialize["bARBaseAmount"] = o.BARBaseAmount
	}
	if !IsNil(o.FlatOrPercentage) {
		toSerialize["flatOrPercentage"] = o.FlatOrPercentage
	}
	if !IsNil(o.Rounding) {
		toSerialize["rounding"] = o.Rounding
	}
	if !IsNil(o.CompareWithRateSchedules) {
		toSerialize["compareWithRateSchedules"] = o.CompareWithRateSchedules
	}
	if !IsNil(o.DefaultToHighestBar) {
		toSerialize["defaultToHighestBar"] = o.DefaultToHighestBar
	}
	return toSerialize, nil
}

type NullableRatePlanBasedOnRateTypeBARBasedRate struct {
	value *RatePlanBasedOnRateTypeBARBasedRate
	isSet bool
}

func (v NullableRatePlanBasedOnRateTypeBARBasedRate) Get() *RatePlanBasedOnRateTypeBARBasedRate {
	return v.value
}

func (v *NullableRatePlanBasedOnRateTypeBARBasedRate) Set(val *RatePlanBasedOnRateTypeBARBasedRate) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanBasedOnRateTypeBARBasedRate) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanBasedOnRateTypeBARBasedRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanBasedOnRateTypeBARBasedRate(val *RatePlanBasedOnRateTypeBARBasedRate) *NullableRatePlanBasedOnRateTypeBARBasedRate {
	return &NullableRatePlanBasedOnRateTypeBARBasedRate{value: val, isSet: true}
}

func (v NullableRatePlanBasedOnRateTypeBARBasedRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanBasedOnRateTypeBARBasedRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


