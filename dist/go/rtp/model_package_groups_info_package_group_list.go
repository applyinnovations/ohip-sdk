/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the PackageGroupsInfoPackageGroupList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageGroupsInfoPackageGroupList{}

// PackageGroupsInfoPackageGroupList List of package groups.
type PackageGroupsInfoPackageGroupList struct {
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	AllRowsFetched *bool `json:"allRowsFetched,omitempty"`
	// Package Groups of each hotel.
	PackageGroups []HotelPackageGroupsType `json:"packageGroups,omitempty"`
	// Total number of rows queried
	TotalRows *int32 `json:"totalRows,omitempty"`
}

// NewPackageGroupsInfoPackageGroupList instantiates a new PackageGroupsInfoPackageGroupList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageGroupsInfoPackageGroupList() *PackageGroupsInfoPackageGroupList {
	this := PackageGroupsInfoPackageGroupList{}
	return &this
}

// NewPackageGroupsInfoPackageGroupListWithDefaults instantiates a new PackageGroupsInfoPackageGroupList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageGroupsInfoPackageGroupListWithDefaults() *PackageGroupsInfoPackageGroupList {
	this := PackageGroupsInfoPackageGroupList{}
	return &this
}

// GetAllRowsFetched returns the AllRowsFetched field value if set, zero value otherwise.
func (o *PackageGroupsInfoPackageGroupList) GetAllRowsFetched() bool {
	if o == nil || IsNil(o.AllRowsFetched) {
		var ret bool
		return ret
	}
	return *o.AllRowsFetched
}

// GetAllRowsFetchedOk returns a tuple with the AllRowsFetched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageGroupsInfoPackageGroupList) GetAllRowsFetchedOk() (*bool, bool) {
	if o == nil || IsNil(o.AllRowsFetched) {
		return nil, false
	}
	return o.AllRowsFetched, true
}

// HasAllRowsFetched returns a boolean if a field has been set.
func (o *PackageGroupsInfoPackageGroupList) HasAllRowsFetched() bool {
	if o != nil && !IsNil(o.AllRowsFetched) {
		return true
	}

	return false
}

// SetAllRowsFetched gets a reference to the given bool and assigns it to the AllRowsFetched field.
func (o *PackageGroupsInfoPackageGroupList) SetAllRowsFetched(v bool) {
	o.AllRowsFetched = &v
}

// GetPackageGroups returns the PackageGroups field value if set, zero value otherwise.
func (o *PackageGroupsInfoPackageGroupList) GetPackageGroups() []HotelPackageGroupsType {
	if o == nil || IsNil(o.PackageGroups) {
		var ret []HotelPackageGroupsType
		return ret
	}
	return o.PackageGroups
}

// GetPackageGroupsOk returns a tuple with the PackageGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageGroupsInfoPackageGroupList) GetPackageGroupsOk() ([]HotelPackageGroupsType, bool) {
	if o == nil || IsNil(o.PackageGroups) {
		return nil, false
	}
	return o.PackageGroups, true
}

// HasPackageGroups returns a boolean if a field has been set.
func (o *PackageGroupsInfoPackageGroupList) HasPackageGroups() bool {
	if o != nil && !IsNil(o.PackageGroups) {
		return true
	}

	return false
}

// SetPackageGroups gets a reference to the given []HotelPackageGroupsType and assigns it to the PackageGroups field.
func (o *PackageGroupsInfoPackageGroupList) SetPackageGroups(v []HotelPackageGroupsType) {
	o.PackageGroups = v
}

// GetTotalRows returns the TotalRows field value if set, zero value otherwise.
func (o *PackageGroupsInfoPackageGroupList) GetTotalRows() int32 {
	if o == nil || IsNil(o.TotalRows) {
		var ret int32
		return ret
	}
	return *o.TotalRows
}

// GetTotalRowsOk returns a tuple with the TotalRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageGroupsInfoPackageGroupList) GetTotalRowsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalRows) {
		return nil, false
	}
	return o.TotalRows, true
}

// HasTotalRows returns a boolean if a field has been set.
func (o *PackageGroupsInfoPackageGroupList) HasTotalRows() bool {
	if o != nil && !IsNil(o.TotalRows) {
		return true
	}

	return false
}

// SetTotalRows gets a reference to the given int32 and assigns it to the TotalRows field.
func (o *PackageGroupsInfoPackageGroupList) SetTotalRows(v int32) {
	o.TotalRows = &v
}

func (o PackageGroupsInfoPackageGroupList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageGroupsInfoPackageGroupList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllRowsFetched) {
		toSerialize["allRowsFetched"] = o.AllRowsFetched
	}
	if !IsNil(o.PackageGroups) {
		toSerialize["packageGroups"] = o.PackageGroups
	}
	if !IsNil(o.TotalRows) {
		toSerialize["totalRows"] = o.TotalRows
	}
	return toSerialize, nil
}

type NullablePackageGroupsInfoPackageGroupList struct {
	value *PackageGroupsInfoPackageGroupList
	isSet bool
}

func (v NullablePackageGroupsInfoPackageGroupList) Get() *PackageGroupsInfoPackageGroupList {
	return v.value
}

func (v *NullablePackageGroupsInfoPackageGroupList) Set(val *PackageGroupsInfoPackageGroupList) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageGroupsInfoPackageGroupList) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageGroupsInfoPackageGroupList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageGroupsInfoPackageGroupList(val *PackageGroupsInfoPackageGroupList) *NullablePackageGroupsInfoPackageGroupList {
	return &NullablePackageGroupsInfoPackageGroupList{value: val, isSet: true}
}

func (v NullablePackageGroupsInfoPackageGroupList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageGroupsInfoPackageGroupList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


