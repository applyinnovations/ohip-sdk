/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the PackageCodeShortInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageCodeShortInfoType{}

// PackageCodeShortInfoType struct for PackageCodeShortInfoType
type PackageCodeShortInfoType struct {
	// Package Code.
	Code *string `json:"code,omitempty"`
	// Indicates if it is a Package Group or not.
	Group *bool `json:"group,omitempty"`
	PostingAttributes *ConfigPostingAttributesType `json:"postingAttributes,omitempty"`
	PrimaryDetails *ConfigPackagePrimaryDetailsType `json:"primaryDetails,omitempty"`
	// Indicates if package is a redemption package.
	RedemptionProductYn *string `json:"redemptionProductYn,omitempty"`
	TransactionDetails *ConfigPackageTransactionType `json:"transactionDetails,omitempty"`
	// Flag to check the package code is used in application setting.
	UsedInAppSetting *bool `json:"usedInAppSetting,omitempty"`
}

// NewPackageCodeShortInfoType instantiates a new PackageCodeShortInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageCodeShortInfoType() *PackageCodeShortInfoType {
	this := PackageCodeShortInfoType{}
	return &this
}

// NewPackageCodeShortInfoTypeWithDefaults instantiates a new PackageCodeShortInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageCodeShortInfoTypeWithDefaults() *PackageCodeShortInfoType {
	this := PackageCodeShortInfoType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PackageCodeShortInfoType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodeShortInfoType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PackageCodeShortInfoType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PackageCodeShortInfoType) SetCode(v string) {
	o.Code = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *PackageCodeShortInfoType) GetGroup() bool {
	if o == nil || IsNil(o.Group) {
		var ret bool
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodeShortInfoType) GetGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *PackageCodeShortInfoType) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given bool and assigns it to the Group field.
func (o *PackageCodeShortInfoType) SetGroup(v bool) {
	o.Group = &v
}

// GetPostingAttributes returns the PostingAttributes field value if set, zero value otherwise.
func (o *PackageCodeShortInfoType) GetPostingAttributes() ConfigPostingAttributesType {
	if o == nil || IsNil(o.PostingAttributes) {
		var ret ConfigPostingAttributesType
		return ret
	}
	return *o.PostingAttributes
}

// GetPostingAttributesOk returns a tuple with the PostingAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodeShortInfoType) GetPostingAttributesOk() (*ConfigPostingAttributesType, bool) {
	if o == nil || IsNil(o.PostingAttributes) {
		return nil, false
	}
	return o.PostingAttributes, true
}

// HasPostingAttributes returns a boolean if a field has been set.
func (o *PackageCodeShortInfoType) HasPostingAttributes() bool {
	if o != nil && !IsNil(o.PostingAttributes) {
		return true
	}

	return false
}

// SetPostingAttributes gets a reference to the given ConfigPostingAttributesType and assigns it to the PostingAttributes field.
func (o *PackageCodeShortInfoType) SetPostingAttributes(v ConfigPostingAttributesType) {
	o.PostingAttributes = &v
}

// GetPrimaryDetails returns the PrimaryDetails field value if set, zero value otherwise.
func (o *PackageCodeShortInfoType) GetPrimaryDetails() ConfigPackagePrimaryDetailsType {
	if o == nil || IsNil(o.PrimaryDetails) {
		var ret ConfigPackagePrimaryDetailsType
		return ret
	}
	return *o.PrimaryDetails
}

// GetPrimaryDetailsOk returns a tuple with the PrimaryDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodeShortInfoType) GetPrimaryDetailsOk() (*ConfigPackagePrimaryDetailsType, bool) {
	if o == nil || IsNil(o.PrimaryDetails) {
		return nil, false
	}
	return o.PrimaryDetails, true
}

// HasPrimaryDetails returns a boolean if a field has been set.
func (o *PackageCodeShortInfoType) HasPrimaryDetails() bool {
	if o != nil && !IsNil(o.PrimaryDetails) {
		return true
	}

	return false
}

// SetPrimaryDetails gets a reference to the given ConfigPackagePrimaryDetailsType and assigns it to the PrimaryDetails field.
func (o *PackageCodeShortInfoType) SetPrimaryDetails(v ConfigPackagePrimaryDetailsType) {
	o.PrimaryDetails = &v
}

// GetRedemptionProductYn returns the RedemptionProductYn field value if set, zero value otherwise.
func (o *PackageCodeShortInfoType) GetRedemptionProductYn() string {
	if o == nil || IsNil(o.RedemptionProductYn) {
		var ret string
		return ret
	}
	return *o.RedemptionProductYn
}

// GetRedemptionProductYnOk returns a tuple with the RedemptionProductYn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodeShortInfoType) GetRedemptionProductYnOk() (*string, bool) {
	if o == nil || IsNil(o.RedemptionProductYn) {
		return nil, false
	}
	return o.RedemptionProductYn, true
}

// HasRedemptionProductYn returns a boolean if a field has been set.
func (o *PackageCodeShortInfoType) HasRedemptionProductYn() bool {
	if o != nil && !IsNil(o.RedemptionProductYn) {
		return true
	}

	return false
}

// SetRedemptionProductYn gets a reference to the given string and assigns it to the RedemptionProductYn field.
func (o *PackageCodeShortInfoType) SetRedemptionProductYn(v string) {
	o.RedemptionProductYn = &v
}

// GetTransactionDetails returns the TransactionDetails field value if set, zero value otherwise.
func (o *PackageCodeShortInfoType) GetTransactionDetails() ConfigPackageTransactionType {
	if o == nil || IsNil(o.TransactionDetails) {
		var ret ConfigPackageTransactionType
		return ret
	}
	return *o.TransactionDetails
}

// GetTransactionDetailsOk returns a tuple with the TransactionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodeShortInfoType) GetTransactionDetailsOk() (*ConfigPackageTransactionType, bool) {
	if o == nil || IsNil(o.TransactionDetails) {
		return nil, false
	}
	return o.TransactionDetails, true
}

// HasTransactionDetails returns a boolean if a field has been set.
func (o *PackageCodeShortInfoType) HasTransactionDetails() bool {
	if o != nil && !IsNil(o.TransactionDetails) {
		return true
	}

	return false
}

// SetTransactionDetails gets a reference to the given ConfigPackageTransactionType and assigns it to the TransactionDetails field.
func (o *PackageCodeShortInfoType) SetTransactionDetails(v ConfigPackageTransactionType) {
	o.TransactionDetails = &v
}

// GetUsedInAppSetting returns the UsedInAppSetting field value if set, zero value otherwise.
func (o *PackageCodeShortInfoType) GetUsedInAppSetting() bool {
	if o == nil || IsNil(o.UsedInAppSetting) {
		var ret bool
		return ret
	}
	return *o.UsedInAppSetting
}

// GetUsedInAppSettingOk returns a tuple with the UsedInAppSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageCodeShortInfoType) GetUsedInAppSettingOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedInAppSetting) {
		return nil, false
	}
	return o.UsedInAppSetting, true
}

// HasUsedInAppSetting returns a boolean if a field has been set.
func (o *PackageCodeShortInfoType) HasUsedInAppSetting() bool {
	if o != nil && !IsNil(o.UsedInAppSetting) {
		return true
	}

	return false
}

// SetUsedInAppSetting gets a reference to the given bool and assigns it to the UsedInAppSetting field.
func (o *PackageCodeShortInfoType) SetUsedInAppSetting(v bool) {
	o.UsedInAppSetting = &v
}

func (o PackageCodeShortInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageCodeShortInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.PostingAttributes) {
		toSerialize["postingAttributes"] = o.PostingAttributes
	}
	if !IsNil(o.PrimaryDetails) {
		toSerialize["primaryDetails"] = o.PrimaryDetails
	}
	if !IsNil(o.RedemptionProductYn) {
		toSerialize["redemptionProductYn"] = o.RedemptionProductYn
	}
	if !IsNil(o.TransactionDetails) {
		toSerialize["transactionDetails"] = o.TransactionDetails
	}
	if !IsNil(o.UsedInAppSetting) {
		toSerialize["usedInAppSetting"] = o.UsedInAppSetting
	}
	return toSerialize, nil
}

type NullablePackageCodeShortInfoType struct {
	value *PackageCodeShortInfoType
	isSet bool
}

func (v NullablePackageCodeShortInfoType) Get() *PackageCodeShortInfoType {
	return v.value
}

func (v *NullablePackageCodeShortInfoType) Set(val *PackageCodeShortInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageCodeShortInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageCodeShortInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageCodeShortInfoType(val *PackageCodeShortInfoType) *NullablePackageCodeShortInfoType {
	return &NullablePackageCodeShortInfoType{value: val, isSet: true}
}

func (v NullablePackageCodeShortInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageCodeShortInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


