/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlansSummaryRatePlanShortInfoList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlansSummaryRatePlanShortInfoList{}

// RatePlansSummaryRatePlanShortInfoList List of summary information for the rate plan code.
type RatePlansSummaryRatePlanShortInfoList struct {
	// List of summary information for the rate plan code.
	RatePlanShortInfo []RatePlanShortInfoType `json:"ratePlanShortInfo,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	HasMore *bool `json:"hasMore,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
	// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
	Offset *int32 `json:"offset,omitempty"`
	// Indicates maximum number of records a Web Service should return.
	Limit *int32 `json:"limit,omitempty"`
	// Evaluated total page count based on the requested max fetch count.
	TotalPages *int32 `json:"totalPages,omitempty"`
}

// NewRatePlansSummaryRatePlanShortInfoList instantiates a new RatePlansSummaryRatePlanShortInfoList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlansSummaryRatePlanShortInfoList() *RatePlansSummaryRatePlanShortInfoList {
	this := RatePlansSummaryRatePlanShortInfoList{}
	return &this
}

// NewRatePlansSummaryRatePlanShortInfoListWithDefaults instantiates a new RatePlansSummaryRatePlanShortInfoList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlansSummaryRatePlanShortInfoListWithDefaults() *RatePlansSummaryRatePlanShortInfoList {
	this := RatePlansSummaryRatePlanShortInfoList{}
	return &this
}

// GetRatePlanShortInfo returns the RatePlanShortInfo field value if set, zero value otherwise.
func (o *RatePlansSummaryRatePlanShortInfoList) GetRatePlanShortInfo() []RatePlanShortInfoType {
	if o == nil || IsNil(o.RatePlanShortInfo) {
		var ret []RatePlanShortInfoType
		return ret
	}
	return o.RatePlanShortInfo
}

// GetRatePlanShortInfoOk returns a tuple with the RatePlanShortInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) GetRatePlanShortInfoOk() ([]RatePlanShortInfoType, bool) {
	if o == nil || IsNil(o.RatePlanShortInfo) {
		return nil, false
	}
	return o.RatePlanShortInfo, true
}

// HasRatePlanShortInfo returns a boolean if a field has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) HasRatePlanShortInfo() bool {
	if o != nil && !IsNil(o.RatePlanShortInfo) {
		return true
	}

	return false
}

// SetRatePlanShortInfo gets a reference to the given []RatePlanShortInfoType and assigns it to the RatePlanShortInfo field.
func (o *RatePlansSummaryRatePlanShortInfoList) SetRatePlanShortInfo(v []RatePlanShortInfoType) {
	o.RatePlanShortInfo = v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *RatePlansSummaryRatePlanShortInfoList) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *RatePlansSummaryRatePlanShortInfoList) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *RatePlansSummaryRatePlanShortInfoList) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *RatePlansSummaryRatePlanShortInfoList) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RatePlansSummaryRatePlanShortInfoList) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RatePlansSummaryRatePlanShortInfoList) SetCount(v int32) {
	o.Count = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *RatePlansSummaryRatePlanShortInfoList) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *RatePlansSummaryRatePlanShortInfoList) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *RatePlansSummaryRatePlanShortInfoList) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *RatePlansSummaryRatePlanShortInfoList) SetLimit(v int32) {
	o.Limit = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *RatePlansSummaryRatePlanShortInfoList) GetTotalPages() int32 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int32
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) GetTotalPagesOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *RatePlansSummaryRatePlanShortInfoList) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int32 and assigns it to the TotalPages field.
func (o *RatePlansSummaryRatePlanShortInfoList) SetTotalPages(v int32) {
	o.TotalPages = &v
}

func (o RatePlansSummaryRatePlanShortInfoList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlansSummaryRatePlanShortInfoList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatePlanShortInfo) {
		toSerialize["ratePlanShortInfo"] = o.RatePlanShortInfo
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.TotalPages) {
		toSerialize["totalPages"] = o.TotalPages
	}
	return toSerialize, nil
}

type NullableRatePlansSummaryRatePlanShortInfoList struct {
	value *RatePlansSummaryRatePlanShortInfoList
	isSet bool
}

func (v NullableRatePlansSummaryRatePlanShortInfoList) Get() *RatePlansSummaryRatePlanShortInfoList {
	return v.value
}

func (v *NullableRatePlansSummaryRatePlanShortInfoList) Set(val *RatePlansSummaryRatePlanShortInfoList) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlansSummaryRatePlanShortInfoList) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlansSummaryRatePlanShortInfoList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlansSummaryRatePlanShortInfoList(val *RatePlansSummaryRatePlanShortInfoList) *NullableRatePlansSummaryRatePlanShortInfoList {
	return &NullableRatePlansSummaryRatePlanShortInfoList{value: val, isSet: true}
}

func (v NullableRatePlansSummaryRatePlanShortInfoList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlansSummaryRatePlanShortInfoList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


