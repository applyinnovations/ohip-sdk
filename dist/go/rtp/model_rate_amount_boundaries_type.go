/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateAmountBoundariesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateAmountBoundariesType{}

// RateAmountBoundariesType Rate amount boundaries for the rate plan schedule. Minimum and/or maximum rate amounts can be defined for one and/or two adults.
type RateAmountBoundariesType struct {
	Minimum *RateAmountBoundaryType `json:"minimum,omitempty"`
	Maximum *RateAmountBoundaryType `json:"maximum,omitempty"`
}

// NewRateAmountBoundariesType instantiates a new RateAmountBoundariesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateAmountBoundariesType() *RateAmountBoundariesType {
	this := RateAmountBoundariesType{}
	return &this
}

// NewRateAmountBoundariesTypeWithDefaults instantiates a new RateAmountBoundariesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateAmountBoundariesTypeWithDefaults() *RateAmountBoundariesType {
	this := RateAmountBoundariesType{}
	return &this
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *RateAmountBoundariesType) GetMinimum() RateAmountBoundaryType {
	if o == nil || IsNil(o.Minimum) {
		var ret RateAmountBoundaryType
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountBoundariesType) GetMinimumOk() (*RateAmountBoundaryType, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *RateAmountBoundariesType) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given RateAmountBoundaryType and assigns it to the Minimum field.
func (o *RateAmountBoundariesType) SetMinimum(v RateAmountBoundaryType) {
	o.Minimum = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *RateAmountBoundariesType) GetMaximum() RateAmountBoundaryType {
	if o == nil || IsNil(o.Maximum) {
		var ret RateAmountBoundaryType
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountBoundariesType) GetMaximumOk() (*RateAmountBoundaryType, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *RateAmountBoundariesType) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given RateAmountBoundaryType and assigns it to the Maximum field.
func (o *RateAmountBoundariesType) SetMaximum(v RateAmountBoundaryType) {
	o.Maximum = &v
}

func (o RateAmountBoundariesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateAmountBoundariesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	return toSerialize, nil
}

type NullableRateAmountBoundariesType struct {
	value *RateAmountBoundariesType
	isSet bool
}

func (v NullableRateAmountBoundariesType) Get() *RateAmountBoundariesType {
	return v.value
}

func (v *NullableRateAmountBoundariesType) Set(val *RateAmountBoundariesType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateAmountBoundariesType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateAmountBoundariesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateAmountBoundariesType(val *RateAmountBoundariesType) *NullableRateAmountBoundariesType {
	return &NullableRateAmountBoundariesType{value: val, isSet: true}
}

func (v NullableRateAmountBoundariesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateAmountBoundariesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


