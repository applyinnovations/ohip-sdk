/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the YieldSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YieldSummaryType{}

// YieldSummaryType Yield adjustment summary for each adjutment type.
type YieldSummaryType struct {
	AdjustmentCategory *AdjustmentCategoryType `json:"adjustmentCategory,omitempty"`
	// Total Amount of adjustment for this Adjustment category.
	TotalAmount *float32 `json:"totalAmount,omitempty"`
}

// NewYieldSummaryType instantiates a new YieldSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYieldSummaryType() *YieldSummaryType {
	this := YieldSummaryType{}
	return &this
}

// NewYieldSummaryTypeWithDefaults instantiates a new YieldSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYieldSummaryTypeWithDefaults() *YieldSummaryType {
	this := YieldSummaryType{}
	return &this
}

// GetAdjustmentCategory returns the AdjustmentCategory field value if set, zero value otherwise.
func (o *YieldSummaryType) GetAdjustmentCategory() AdjustmentCategoryType {
	if o == nil || IsNil(o.AdjustmentCategory) {
		var ret AdjustmentCategoryType
		return ret
	}
	return *o.AdjustmentCategory
}

// GetAdjustmentCategoryOk returns a tuple with the AdjustmentCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldSummaryType) GetAdjustmentCategoryOk() (*AdjustmentCategoryType, bool) {
	if o == nil || IsNil(o.AdjustmentCategory) {
		return nil, false
	}
	return o.AdjustmentCategory, true
}

// HasAdjustmentCategory returns a boolean if a field has been set.
func (o *YieldSummaryType) HasAdjustmentCategory() bool {
	if o != nil && !IsNil(o.AdjustmentCategory) {
		return true
	}

	return false
}

// SetAdjustmentCategory gets a reference to the given AdjustmentCategoryType and assigns it to the AdjustmentCategory field.
func (o *YieldSummaryType) SetAdjustmentCategory(v AdjustmentCategoryType) {
	o.AdjustmentCategory = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *YieldSummaryType) GetTotalAmount() float32 {
	if o == nil || IsNil(o.TotalAmount) {
		var ret float32
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldSummaryType) GetTotalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *YieldSummaryType) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given float32 and assigns it to the TotalAmount field.
func (o *YieldSummaryType) SetTotalAmount(v float32) {
	o.TotalAmount = &v
}

func (o YieldSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YieldSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustmentCategory) {
		toSerialize["adjustmentCategory"] = o.AdjustmentCategory
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	return toSerialize, nil
}

type NullableYieldSummaryType struct {
	value *YieldSummaryType
	isSet bool
}

func (v NullableYieldSummaryType) Get() *YieldSummaryType {
	return v.value
}

func (v *NullableYieldSummaryType) Set(val *YieldSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableYieldSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableYieldSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYieldSummaryType(val *YieldSummaryType) *NullableYieldSummaryType {
	return &NullableYieldSummaryType{value: val, isSet: true}
}

func (v NullableYieldSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYieldSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


