/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the UpdateRatePlanSchedulesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRatePlanSchedulesType{}

// UpdateRatePlanSchedulesType struct for UpdateRatePlanSchedulesType
type UpdateRatePlanSchedulesType struct {
	RatePlanScheduleId *UniqueIDType `json:"ratePlanScheduleId,omitempty"`
	RatePlanScheduleDetail *RatePlanScheduleDetailType `json:"ratePlanScheduleDetail,omitempty"`
	OriginalRatePlanScheduleDetail *RatePlanScheduleDetailType `json:"originalRatePlanScheduleDetail,omitempty"`
}

// NewUpdateRatePlanSchedulesType instantiates a new UpdateRatePlanSchedulesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRatePlanSchedulesType() *UpdateRatePlanSchedulesType {
	this := UpdateRatePlanSchedulesType{}
	return &this
}

// NewUpdateRatePlanSchedulesTypeWithDefaults instantiates a new UpdateRatePlanSchedulesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRatePlanSchedulesTypeWithDefaults() *UpdateRatePlanSchedulesType {
	this := UpdateRatePlanSchedulesType{}
	return &this
}

// GetRatePlanScheduleId returns the RatePlanScheduleId field value if set, zero value otherwise.
func (o *UpdateRatePlanSchedulesType) GetRatePlanScheduleId() UniqueIDType {
	if o == nil || IsNil(o.RatePlanScheduleId) {
		var ret UniqueIDType
		return ret
	}
	return *o.RatePlanScheduleId
}

// GetRatePlanScheduleIdOk returns a tuple with the RatePlanScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRatePlanSchedulesType) GetRatePlanScheduleIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.RatePlanScheduleId) {
		return nil, false
	}
	return o.RatePlanScheduleId, true
}

// HasRatePlanScheduleId returns a boolean if a field has been set.
func (o *UpdateRatePlanSchedulesType) HasRatePlanScheduleId() bool {
	if o != nil && !IsNil(o.RatePlanScheduleId) {
		return true
	}

	return false
}

// SetRatePlanScheduleId gets a reference to the given UniqueIDType and assigns it to the RatePlanScheduleId field.
func (o *UpdateRatePlanSchedulesType) SetRatePlanScheduleId(v UniqueIDType) {
	o.RatePlanScheduleId = &v
}

// GetRatePlanScheduleDetail returns the RatePlanScheduleDetail field value if set, zero value otherwise.
func (o *UpdateRatePlanSchedulesType) GetRatePlanScheduleDetail() RatePlanScheduleDetailType {
	if o == nil || IsNil(o.RatePlanScheduleDetail) {
		var ret RatePlanScheduleDetailType
		return ret
	}
	return *o.RatePlanScheduleDetail
}

// GetRatePlanScheduleDetailOk returns a tuple with the RatePlanScheduleDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRatePlanSchedulesType) GetRatePlanScheduleDetailOk() (*RatePlanScheduleDetailType, bool) {
	if o == nil || IsNil(o.RatePlanScheduleDetail) {
		return nil, false
	}
	return o.RatePlanScheduleDetail, true
}

// HasRatePlanScheduleDetail returns a boolean if a field has been set.
func (o *UpdateRatePlanSchedulesType) HasRatePlanScheduleDetail() bool {
	if o != nil && !IsNil(o.RatePlanScheduleDetail) {
		return true
	}

	return false
}

// SetRatePlanScheduleDetail gets a reference to the given RatePlanScheduleDetailType and assigns it to the RatePlanScheduleDetail field.
func (o *UpdateRatePlanSchedulesType) SetRatePlanScheduleDetail(v RatePlanScheduleDetailType) {
	o.RatePlanScheduleDetail = &v
}

// GetOriginalRatePlanScheduleDetail returns the OriginalRatePlanScheduleDetail field value if set, zero value otherwise.
func (o *UpdateRatePlanSchedulesType) GetOriginalRatePlanScheduleDetail() RatePlanScheduleDetailType {
	if o == nil || IsNil(o.OriginalRatePlanScheduleDetail) {
		var ret RatePlanScheduleDetailType
		return ret
	}
	return *o.OriginalRatePlanScheduleDetail
}

// GetOriginalRatePlanScheduleDetailOk returns a tuple with the OriginalRatePlanScheduleDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRatePlanSchedulesType) GetOriginalRatePlanScheduleDetailOk() (*RatePlanScheduleDetailType, bool) {
	if o == nil || IsNil(o.OriginalRatePlanScheduleDetail) {
		return nil, false
	}
	return o.OriginalRatePlanScheduleDetail, true
}

// HasOriginalRatePlanScheduleDetail returns a boolean if a field has been set.
func (o *UpdateRatePlanSchedulesType) HasOriginalRatePlanScheduleDetail() bool {
	if o != nil && !IsNil(o.OriginalRatePlanScheduleDetail) {
		return true
	}

	return false
}

// SetOriginalRatePlanScheduleDetail gets a reference to the given RatePlanScheduleDetailType and assigns it to the OriginalRatePlanScheduleDetail field.
func (o *UpdateRatePlanSchedulesType) SetOriginalRatePlanScheduleDetail(v RatePlanScheduleDetailType) {
	o.OriginalRatePlanScheduleDetail = &v
}

func (o UpdateRatePlanSchedulesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRatePlanSchedulesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatePlanScheduleId) {
		toSerialize["ratePlanScheduleId"] = o.RatePlanScheduleId
	}
	if !IsNil(o.RatePlanScheduleDetail) {
		toSerialize["ratePlanScheduleDetail"] = o.RatePlanScheduleDetail
	}
	if !IsNil(o.OriginalRatePlanScheduleDetail) {
		toSerialize["originalRatePlanScheduleDetail"] = o.OriginalRatePlanScheduleDetail
	}
	return toSerialize, nil
}

type NullableUpdateRatePlanSchedulesType struct {
	value *UpdateRatePlanSchedulesType
	isSet bool
}

func (v NullableUpdateRatePlanSchedulesType) Get() *UpdateRatePlanSchedulesType {
	return v.value
}

func (v *NullableUpdateRatePlanSchedulesType) Set(val *UpdateRatePlanSchedulesType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRatePlanSchedulesType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRatePlanSchedulesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRatePlanSchedulesType(val *UpdateRatePlanSchedulesType) *NullableUpdateRatePlanSchedulesType {
	return &NullableUpdateRatePlanSchedulesType{value: val, isSet: true}
}

func (v NullableUpdateRatePlanSchedulesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRatePlanSchedulesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


