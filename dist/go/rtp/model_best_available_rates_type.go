/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the BestAvailableRatesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BestAvailableRatesType{}

// BestAvailableRatesType The best available rate for rate code(s)
type BestAvailableRatesType struct {
	DateRange *DateRangeType `json:"dateRange,omitempty"`
	Duration *BestAvailableRatesTypeDuration `json:"duration,omitempty"`
	// Hotel Code for Best Available Rate
	HotelId *string `json:"hotelId,omitempty"`
	LengthOfStay *BestAvailableRatesTypeLengthOfStay `json:"lengthOfStay,omitempty"`
	RateCode []string `json:"rateCode,omitempty"`
}

// NewBestAvailableRatesType instantiates a new BestAvailableRatesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBestAvailableRatesType() *BestAvailableRatesType {
	this := BestAvailableRatesType{}
	return &this
}

// NewBestAvailableRatesTypeWithDefaults instantiates a new BestAvailableRatesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBestAvailableRatesTypeWithDefaults() *BestAvailableRatesType {
	this := BestAvailableRatesType{}
	return &this
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *BestAvailableRatesType) GetDateRange() DateRangeType {
	if o == nil || IsNil(o.DateRange) {
		var ret DateRangeType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesType) GetDateRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *BestAvailableRatesType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given DateRangeType and assigns it to the DateRange field.
func (o *BestAvailableRatesType) SetDateRange(v DateRangeType) {
	o.DateRange = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *BestAvailableRatesType) GetDuration() BestAvailableRatesTypeDuration {
	if o == nil || IsNil(o.Duration) {
		var ret BestAvailableRatesTypeDuration
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesType) GetDurationOk() (*BestAvailableRatesTypeDuration, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *BestAvailableRatesType) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given BestAvailableRatesTypeDuration and assigns it to the Duration field.
func (o *BestAvailableRatesType) SetDuration(v BestAvailableRatesTypeDuration) {
	o.Duration = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BestAvailableRatesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BestAvailableRatesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BestAvailableRatesType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLengthOfStay returns the LengthOfStay field value if set, zero value otherwise.
func (o *BestAvailableRatesType) GetLengthOfStay() BestAvailableRatesTypeLengthOfStay {
	if o == nil || IsNil(o.LengthOfStay) {
		var ret BestAvailableRatesTypeLengthOfStay
		return ret
	}
	return *o.LengthOfStay
}

// GetLengthOfStayOk returns a tuple with the LengthOfStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesType) GetLengthOfStayOk() (*BestAvailableRatesTypeLengthOfStay, bool) {
	if o == nil || IsNil(o.LengthOfStay) {
		return nil, false
	}
	return o.LengthOfStay, true
}

// HasLengthOfStay returns a boolean if a field has been set.
func (o *BestAvailableRatesType) HasLengthOfStay() bool {
	if o != nil && !IsNil(o.LengthOfStay) {
		return true
	}

	return false
}

// SetLengthOfStay gets a reference to the given BestAvailableRatesTypeLengthOfStay and assigns it to the LengthOfStay field.
func (o *BestAvailableRatesType) SetLengthOfStay(v BestAvailableRatesTypeLengthOfStay) {
	o.LengthOfStay = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *BestAvailableRatesType) GetRateCode() []string {
	if o == nil || IsNil(o.RateCode) {
		var ret []string
		return ret
	}
	return o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesType) GetRateCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *BestAvailableRatesType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given []string and assigns it to the RateCode field.
func (o *BestAvailableRatesType) SetRateCode(v []string) {
	o.RateCode = v
}

func (o BestAvailableRatesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BestAvailableRatesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.LengthOfStay) {
		toSerialize["lengthOfStay"] = o.LengthOfStay
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	return toSerialize, nil
}

type NullableBestAvailableRatesType struct {
	value *BestAvailableRatesType
	isSet bool
}

func (v NullableBestAvailableRatesType) Get() *BestAvailableRatesType {
	return v.value
}

func (v *NullableBestAvailableRatesType) Set(val *BestAvailableRatesType) {
	v.value = val
	v.isSet = true
}

func (v NullableBestAvailableRatesType) IsSet() bool {
	return v.isSet
}

func (v *NullableBestAvailableRatesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBestAvailableRatesType(val *BestAvailableRatesType) *NullableBestAvailableRatesType {
	return &NullableBestAvailableRatesType{value: val, isSet: true}
}

func (v NullableBestAvailableRatesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBestAvailableRatesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


