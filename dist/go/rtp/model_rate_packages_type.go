/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePackagesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePackagesType{}

// RatePackagesType struct for RatePackagesType
type RatePackagesType struct {
	// Rate Package Full Information
	Packages []RatePackageCodeType `json:"packages,omitempty"`
	// Package Group full Information along with the members that belong to this Group.
	PackageGroups []RatePackageGroupType `json:"packageGroups,omitempty"`
}

// NewRatePackagesType instantiates a new RatePackagesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePackagesType() *RatePackagesType {
	this := RatePackagesType{}
	return &this
}

// NewRatePackagesTypeWithDefaults instantiates a new RatePackagesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePackagesTypeWithDefaults() *RatePackagesType {
	this := RatePackagesType{}
	return &this
}

// GetPackages returns the Packages field value if set, zero value otherwise.
func (o *RatePackagesType) GetPackages() []RatePackageCodeType {
	if o == nil || IsNil(o.Packages) {
		var ret []RatePackageCodeType
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePackagesType) GetPackagesOk() ([]RatePackageCodeType, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *RatePackagesType) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []RatePackageCodeType and assigns it to the Packages field.
func (o *RatePackagesType) SetPackages(v []RatePackageCodeType) {
	o.Packages = v
}

// GetPackageGroups returns the PackageGroups field value if set, zero value otherwise.
func (o *RatePackagesType) GetPackageGroups() []RatePackageGroupType {
	if o == nil || IsNil(o.PackageGroups) {
		var ret []RatePackageGroupType
		return ret
	}
	return o.PackageGroups
}

// GetPackageGroupsOk returns a tuple with the PackageGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePackagesType) GetPackageGroupsOk() ([]RatePackageGroupType, bool) {
	if o == nil || IsNil(o.PackageGroups) {
		return nil, false
	}
	return o.PackageGroups, true
}

// HasPackageGroups returns a boolean if a field has been set.
func (o *RatePackagesType) HasPackageGroups() bool {
	if o != nil && !IsNil(o.PackageGroups) {
		return true
	}

	return false
}

// SetPackageGroups gets a reference to the given []RatePackageGroupType and assigns it to the PackageGroups field.
func (o *RatePackagesType) SetPackageGroups(v []RatePackageGroupType) {
	o.PackageGroups = v
}

func (o RatePackagesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePackagesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Packages) {
		toSerialize["packages"] = o.Packages
	}
	if !IsNil(o.PackageGroups) {
		toSerialize["packageGroups"] = o.PackageGroups
	}
	return toSerialize, nil
}

type NullableRatePackagesType struct {
	value *RatePackagesType
	isSet bool
}

func (v NullableRatePackagesType) Get() *RatePackagesType {
	return v.value
}

func (v *NullableRatePackagesType) Set(val *RatePackagesType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePackagesType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePackagesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePackagesType(val *RatePackagesType) *NullableRatePackagesType {
	return &NullableRatePackagesType{value: val, isSet: true}
}

func (v NullableRatePackagesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePackagesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


