/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateStrategyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateStrategyType{}

// RateStrategyType The Rate strategy type.
type RateStrategyType struct {
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	StrategyDetail *StrategyDetailType `json:"strategyDetail,omitempty"`
	// A reference to the type of object defined by the UniqueID element.
	Type *string `json:"type,omitempty"`
}

// NewRateStrategyType instantiates a new RateStrategyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateStrategyType() *RateStrategyType {
	this := RateStrategyType{}
	return &this
}

// NewRateStrategyTypeWithDefaults instantiates a new RateStrategyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateStrategyTypeWithDefaults() *RateStrategyType {
	this := RateStrategyType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RateStrategyType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateStrategyType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RateStrategyType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RateStrategyType) SetId(v string) {
	o.Id = &v
}

// GetStrategyDetail returns the StrategyDetail field value if set, zero value otherwise.
func (o *RateStrategyType) GetStrategyDetail() StrategyDetailType {
	if o == nil || IsNil(o.StrategyDetail) {
		var ret StrategyDetailType
		return ret
	}
	return *o.StrategyDetail
}

// GetStrategyDetailOk returns a tuple with the StrategyDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateStrategyType) GetStrategyDetailOk() (*StrategyDetailType, bool) {
	if o == nil || IsNil(o.StrategyDetail) {
		return nil, false
	}
	return o.StrategyDetail, true
}

// HasStrategyDetail returns a boolean if a field has been set.
func (o *RateStrategyType) HasStrategyDetail() bool {
	if o != nil && !IsNil(o.StrategyDetail) {
		return true
	}

	return false
}

// SetStrategyDetail gets a reference to the given StrategyDetailType and assigns it to the StrategyDetail field.
func (o *RateStrategyType) SetStrategyDetail(v StrategyDetailType) {
	o.StrategyDetail = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RateStrategyType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateStrategyType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RateStrategyType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RateStrategyType) SetType(v string) {
	o.Type = &v
}

func (o RateStrategyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateStrategyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.StrategyDetail) {
		toSerialize["strategyDetail"] = o.StrategyDetail
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRateStrategyType struct {
	value *RateStrategyType
	isSet bool
}

func (v NullableRateStrategyType) Get() *RateStrategyType {
	return v.value
}

func (v *NullableRateStrategyType) Set(val *RateStrategyType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateStrategyType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateStrategyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateStrategyType(val *RateStrategyType) *NullableRateStrategyType {
	return &NullableRateStrategyType{value: val, isSet: true}
}

func (v NullableRateStrategyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateStrategyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


