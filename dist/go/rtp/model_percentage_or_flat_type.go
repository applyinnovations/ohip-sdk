/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// PercentageOrFlatType Simple type for flat or percentage type.
type PercentageOrFlatType string

// List of percentageOrFlatType
const (
	PERCENTAGEORFLATTYPE_FLAT PercentageOrFlatType = "Flat"
	PERCENTAGEORFLATTYPE_PERCENTAGE PercentageOrFlatType = "Percentage"
)

// All allowed values of PercentageOrFlatType enum
var AllowedPercentageOrFlatTypeEnumValues = []PercentageOrFlatType{
	"Flat",
	"Percentage",
}

func (v *PercentageOrFlatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PercentageOrFlatType(value)
	for _, existing := range AllowedPercentageOrFlatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PercentageOrFlatType", value)
}

// NewPercentageOrFlatTypeFromValue returns a pointer to a valid PercentageOrFlatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPercentageOrFlatTypeFromValue(v string) (*PercentageOrFlatType, error) {
	ev := PercentageOrFlatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PercentageOrFlatType: valid values are %v", v, AllowedPercentageOrFlatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PercentageOrFlatType) IsValid() bool {
	for _, existing := range AllowedPercentageOrFlatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to percentageOrFlatType value
func (v PercentageOrFlatType) Ptr() *PercentageOrFlatType {
	return &v
}

type NullablePercentageOrFlatType struct {
	value *PercentageOrFlatType
	isSet bool
}

func (v NullablePercentageOrFlatType) Get() *PercentageOrFlatType {
	return v.value
}

func (v *NullablePercentageOrFlatType) Set(val *PercentageOrFlatType) {
	v.value = val
	v.isSet = true
}

func (v NullablePercentageOrFlatType) IsSet() bool {
	return v.isSet
}

func (v *NullablePercentageOrFlatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePercentageOrFlatType(val *PercentageOrFlatType) *NullablePercentageOrFlatType {
	return &NullablePercentageOrFlatType{value: val, isSet: true}
}

func (v NullablePercentageOrFlatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePercentageOrFlatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

