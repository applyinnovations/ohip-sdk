/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the BestAvailableRatesTypeLengthOfStay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BestAvailableRatesTypeLengthOfStay{}

// BestAvailableRatesTypeLengthOfStay Length of Stay for which best available rates will be considered
type BestAvailableRatesTypeLengthOfStay struct {
	// Indicates Length of Stay 1 configuration.
	LOS1 *bool `json:"lOS1,omitempty"`
	// Indicates Length of Stay 2 configuration.
	LOS2 *bool `json:"lOS2,omitempty"`
	// Indicates Length of Stay 3 configuration.
	LOS3 *bool `json:"lOS3,omitempty"`
	// Indicates Length of Stay 4 configuration.
	LOS4 *bool `json:"lOS4,omitempty"`
	// Indicates Length of Stay 5 configuration.
	LOS5 *bool `json:"lOS5,omitempty"`
	// Indicates Length of Stay 6 configuration.
	LOS6 *bool `json:"lOS6,omitempty"`
	// Indicates Length of Stay 7 configuration.
	LOS7 *bool `json:"lOS7,omitempty"`
	// Indicates Length of Stay 8 configuration.
	LOS8 *bool `json:"lOS8,omitempty"`
}

// NewBestAvailableRatesTypeLengthOfStay instantiates a new BestAvailableRatesTypeLengthOfStay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBestAvailableRatesTypeLengthOfStay() *BestAvailableRatesTypeLengthOfStay {
	this := BestAvailableRatesTypeLengthOfStay{}
	return &this
}

// NewBestAvailableRatesTypeLengthOfStayWithDefaults instantiates a new BestAvailableRatesTypeLengthOfStay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBestAvailableRatesTypeLengthOfStayWithDefaults() *BestAvailableRatesTypeLengthOfStay {
	this := BestAvailableRatesTypeLengthOfStay{}
	return &this
}

// GetLOS1 returns the LOS1 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS1() bool {
	if o == nil || IsNil(o.LOS1) {
		var ret bool
		return ret
	}
	return *o.LOS1
}

// GetLOS1Ok returns a tuple with the LOS1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS1Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS1) {
		return nil, false
	}
	return o.LOS1, true
}

// HasLOS1 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS1() bool {
	if o != nil && !IsNil(o.LOS1) {
		return true
	}

	return false
}

// SetLOS1 gets a reference to the given bool and assigns it to the LOS1 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS1(v bool) {
	o.LOS1 = &v
}

// GetLOS2 returns the LOS2 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS2() bool {
	if o == nil || IsNil(o.LOS2) {
		var ret bool
		return ret
	}
	return *o.LOS2
}

// GetLOS2Ok returns a tuple with the LOS2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS2Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS2) {
		return nil, false
	}
	return o.LOS2, true
}

// HasLOS2 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS2() bool {
	if o != nil && !IsNil(o.LOS2) {
		return true
	}

	return false
}

// SetLOS2 gets a reference to the given bool and assigns it to the LOS2 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS2(v bool) {
	o.LOS2 = &v
}

// GetLOS3 returns the LOS3 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS3() bool {
	if o == nil || IsNil(o.LOS3) {
		var ret bool
		return ret
	}
	return *o.LOS3
}

// GetLOS3Ok returns a tuple with the LOS3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS3Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS3) {
		return nil, false
	}
	return o.LOS3, true
}

// HasLOS3 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS3() bool {
	if o != nil && !IsNil(o.LOS3) {
		return true
	}

	return false
}

// SetLOS3 gets a reference to the given bool and assigns it to the LOS3 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS3(v bool) {
	o.LOS3 = &v
}

// GetLOS4 returns the LOS4 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS4() bool {
	if o == nil || IsNil(o.LOS4) {
		var ret bool
		return ret
	}
	return *o.LOS4
}

// GetLOS4Ok returns a tuple with the LOS4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS4Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS4) {
		return nil, false
	}
	return o.LOS4, true
}

// HasLOS4 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS4() bool {
	if o != nil && !IsNil(o.LOS4) {
		return true
	}

	return false
}

// SetLOS4 gets a reference to the given bool and assigns it to the LOS4 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS4(v bool) {
	o.LOS4 = &v
}

// GetLOS5 returns the LOS5 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS5() bool {
	if o == nil || IsNil(o.LOS5) {
		var ret bool
		return ret
	}
	return *o.LOS5
}

// GetLOS5Ok returns a tuple with the LOS5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS5Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS5) {
		return nil, false
	}
	return o.LOS5, true
}

// HasLOS5 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS5() bool {
	if o != nil && !IsNil(o.LOS5) {
		return true
	}

	return false
}

// SetLOS5 gets a reference to the given bool and assigns it to the LOS5 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS5(v bool) {
	o.LOS5 = &v
}

// GetLOS6 returns the LOS6 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS6() bool {
	if o == nil || IsNil(o.LOS6) {
		var ret bool
		return ret
	}
	return *o.LOS6
}

// GetLOS6Ok returns a tuple with the LOS6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS6Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS6) {
		return nil, false
	}
	return o.LOS6, true
}

// HasLOS6 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS6() bool {
	if o != nil && !IsNil(o.LOS6) {
		return true
	}

	return false
}

// SetLOS6 gets a reference to the given bool and assigns it to the LOS6 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS6(v bool) {
	o.LOS6 = &v
}

// GetLOS7 returns the LOS7 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS7() bool {
	if o == nil || IsNil(o.LOS7) {
		var ret bool
		return ret
	}
	return *o.LOS7
}

// GetLOS7Ok returns a tuple with the LOS7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS7Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS7) {
		return nil, false
	}
	return o.LOS7, true
}

// HasLOS7 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS7() bool {
	if o != nil && !IsNil(o.LOS7) {
		return true
	}

	return false
}

// SetLOS7 gets a reference to the given bool and assigns it to the LOS7 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS7(v bool) {
	o.LOS7 = &v
}

// GetLOS8 returns the LOS8 field value if set, zero value otherwise.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS8() bool {
	if o == nil || IsNil(o.LOS8) {
		var ret bool
		return ret
	}
	return *o.LOS8
}

// GetLOS8Ok returns a tuple with the LOS8 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BestAvailableRatesTypeLengthOfStay) GetLOS8Ok() (*bool, bool) {
	if o == nil || IsNil(o.LOS8) {
		return nil, false
	}
	return o.LOS8, true
}

// HasLOS8 returns a boolean if a field has been set.
func (o *BestAvailableRatesTypeLengthOfStay) HasLOS8() bool {
	if o != nil && !IsNil(o.LOS8) {
		return true
	}

	return false
}

// SetLOS8 gets a reference to the given bool and assigns it to the LOS8 field.
func (o *BestAvailableRatesTypeLengthOfStay) SetLOS8(v bool) {
	o.LOS8 = &v
}

func (o BestAvailableRatesTypeLengthOfStay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BestAvailableRatesTypeLengthOfStay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LOS1) {
		toSerialize["lOS1"] = o.LOS1
	}
	if !IsNil(o.LOS2) {
		toSerialize["lOS2"] = o.LOS2
	}
	if !IsNil(o.LOS3) {
		toSerialize["lOS3"] = o.LOS3
	}
	if !IsNil(o.LOS4) {
		toSerialize["lOS4"] = o.LOS4
	}
	if !IsNil(o.LOS5) {
		toSerialize["lOS5"] = o.LOS5
	}
	if !IsNil(o.LOS6) {
		toSerialize["lOS6"] = o.LOS6
	}
	if !IsNil(o.LOS7) {
		toSerialize["lOS7"] = o.LOS7
	}
	if !IsNil(o.LOS8) {
		toSerialize["lOS8"] = o.LOS8
	}
	return toSerialize, nil
}

type NullableBestAvailableRatesTypeLengthOfStay struct {
	value *BestAvailableRatesTypeLengthOfStay
	isSet bool
}

func (v NullableBestAvailableRatesTypeLengthOfStay) Get() *BestAvailableRatesTypeLengthOfStay {
	return v.value
}

func (v *NullableBestAvailableRatesTypeLengthOfStay) Set(val *BestAvailableRatesTypeLengthOfStay) {
	v.value = val
	v.isSet = true
}

func (v NullableBestAvailableRatesTypeLengthOfStay) IsSet() bool {
	return v.isSet
}

func (v *NullableBestAvailableRatesTypeLengthOfStay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBestAvailableRatesTypeLengthOfStay(val *BestAvailableRatesTypeLengthOfStay) *NullableBestAvailableRatesTypeLengthOfStay {
	return &NullableBestAvailableRatesTypeLengthOfStay{value: val, isSet: true}
}

func (v NullableBestAvailableRatesTypeLengthOfStay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBestAvailableRatesTypeLengthOfStay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


