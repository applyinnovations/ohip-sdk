/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanBasedOnRateTypeDynamicBaseRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanBasedOnRateTypeDynamicBaseRate{}

// RatePlanBasedOnRateTypeDynamicBaseRate Dynamic Base Rate type
type RatePlanBasedOnRateTypeDynamicBaseRate struct {
	// While showing availability, do system need to compare the static rates defined for the rate with dynamically computed base rate pricing? If true, availability shows lower of the these two pricing. If false, availabilty shows the dynamically calucated pricing.
	CompareWithRateSchedules *bool `json:"compareWithRateSchedules,omitempty"`
	// Rate Plan code.
	DependentRatePlans []string `json:"dependentRatePlans,omitempty"`
	// Base Amount used for Dynamic base rate calculation.
	DynamicBaseAmount *float32 `json:"dynamicBaseAmount,omitempty"`
	// Rate plan code used to Dynamically base the rate on.
	DynamicBasedOnRatePlan *string `json:"dynamicBasedOnRatePlan,omitempty"`
	// Flat or Percentage (FLT/PCT) indicator.
	FlatOrPercentage *string `json:"flatOrPercentage,omitempty"`
	// Rounding style used for the calculated rate amounts. Valid values are U,D,N,C,F which means Up, Down, None, Up-Keep Decimal, Down - Keep Decimal.
	Rounding *string `json:"rounding,omitempty"`
}

// NewRatePlanBasedOnRateTypeDynamicBaseRate instantiates a new RatePlanBasedOnRateTypeDynamicBaseRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanBasedOnRateTypeDynamicBaseRate() *RatePlanBasedOnRateTypeDynamicBaseRate {
	this := RatePlanBasedOnRateTypeDynamicBaseRate{}
	return &this
}

// NewRatePlanBasedOnRateTypeDynamicBaseRateWithDefaults instantiates a new RatePlanBasedOnRateTypeDynamicBaseRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanBasedOnRateTypeDynamicBaseRateWithDefaults() *RatePlanBasedOnRateTypeDynamicBaseRate {
	this := RatePlanBasedOnRateTypeDynamicBaseRate{}
	return &this
}

// GetCompareWithRateSchedules returns the CompareWithRateSchedules field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetCompareWithRateSchedules() bool {
	if o == nil || IsNil(o.CompareWithRateSchedules) {
		var ret bool
		return ret
	}
	return *o.CompareWithRateSchedules
}

// GetCompareWithRateSchedulesOk returns a tuple with the CompareWithRateSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetCompareWithRateSchedulesOk() (*bool, bool) {
	if o == nil || IsNil(o.CompareWithRateSchedules) {
		return nil, false
	}
	return o.CompareWithRateSchedules, true
}

// HasCompareWithRateSchedules returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) HasCompareWithRateSchedules() bool {
	if o != nil && !IsNil(o.CompareWithRateSchedules) {
		return true
	}

	return false
}

// SetCompareWithRateSchedules gets a reference to the given bool and assigns it to the CompareWithRateSchedules field.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) SetCompareWithRateSchedules(v bool) {
	o.CompareWithRateSchedules = &v
}

// GetDependentRatePlans returns the DependentRatePlans field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetDependentRatePlans() []string {
	if o == nil || IsNil(o.DependentRatePlans) {
		var ret []string
		return ret
	}
	return o.DependentRatePlans
}

// GetDependentRatePlansOk returns a tuple with the DependentRatePlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetDependentRatePlansOk() ([]string, bool) {
	if o == nil || IsNil(o.DependentRatePlans) {
		return nil, false
	}
	return o.DependentRatePlans, true
}

// HasDependentRatePlans returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) HasDependentRatePlans() bool {
	if o != nil && !IsNil(o.DependentRatePlans) {
		return true
	}

	return false
}

// SetDependentRatePlans gets a reference to the given []string and assigns it to the DependentRatePlans field.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) SetDependentRatePlans(v []string) {
	o.DependentRatePlans = v
}

// GetDynamicBaseAmount returns the DynamicBaseAmount field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetDynamicBaseAmount() float32 {
	if o == nil || IsNil(o.DynamicBaseAmount) {
		var ret float32
		return ret
	}
	return *o.DynamicBaseAmount
}

// GetDynamicBaseAmountOk returns a tuple with the DynamicBaseAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetDynamicBaseAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.DynamicBaseAmount) {
		return nil, false
	}
	return o.DynamicBaseAmount, true
}

// HasDynamicBaseAmount returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) HasDynamicBaseAmount() bool {
	if o != nil && !IsNil(o.DynamicBaseAmount) {
		return true
	}

	return false
}

// SetDynamicBaseAmount gets a reference to the given float32 and assigns it to the DynamicBaseAmount field.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) SetDynamicBaseAmount(v float32) {
	o.DynamicBaseAmount = &v
}

// GetDynamicBasedOnRatePlan returns the DynamicBasedOnRatePlan field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetDynamicBasedOnRatePlan() string {
	if o == nil || IsNil(o.DynamicBasedOnRatePlan) {
		var ret string
		return ret
	}
	return *o.DynamicBasedOnRatePlan
}

// GetDynamicBasedOnRatePlanOk returns a tuple with the DynamicBasedOnRatePlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetDynamicBasedOnRatePlanOk() (*string, bool) {
	if o == nil || IsNil(o.DynamicBasedOnRatePlan) {
		return nil, false
	}
	return o.DynamicBasedOnRatePlan, true
}

// HasDynamicBasedOnRatePlan returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) HasDynamicBasedOnRatePlan() bool {
	if o != nil && !IsNil(o.DynamicBasedOnRatePlan) {
		return true
	}

	return false
}

// SetDynamicBasedOnRatePlan gets a reference to the given string and assigns it to the DynamicBasedOnRatePlan field.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) SetDynamicBasedOnRatePlan(v string) {
	o.DynamicBasedOnRatePlan = &v
}

// GetFlatOrPercentage returns the FlatOrPercentage field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetFlatOrPercentage() string {
	if o == nil || IsNil(o.FlatOrPercentage) {
		var ret string
		return ret
	}
	return *o.FlatOrPercentage
}

// GetFlatOrPercentageOk returns a tuple with the FlatOrPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetFlatOrPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.FlatOrPercentage) {
		return nil, false
	}
	return o.FlatOrPercentage, true
}

// HasFlatOrPercentage returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) HasFlatOrPercentage() bool {
	if o != nil && !IsNil(o.FlatOrPercentage) {
		return true
	}

	return false
}

// SetFlatOrPercentage gets a reference to the given string and assigns it to the FlatOrPercentage field.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) SetFlatOrPercentage(v string) {
	o.FlatOrPercentage = &v
}

// GetRounding returns the Rounding field value if set, zero value otherwise.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetRounding() string {
	if o == nil || IsNil(o.Rounding) {
		var ret string
		return ret
	}
	return *o.Rounding
}

// GetRoundingOk returns a tuple with the Rounding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) GetRoundingOk() (*string, bool) {
	if o == nil || IsNil(o.Rounding) {
		return nil, false
	}
	return o.Rounding, true
}

// HasRounding returns a boolean if a field has been set.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) HasRounding() bool {
	if o != nil && !IsNil(o.Rounding) {
		return true
	}

	return false
}

// SetRounding gets a reference to the given string and assigns it to the Rounding field.
func (o *RatePlanBasedOnRateTypeDynamicBaseRate) SetRounding(v string) {
	o.Rounding = &v
}

func (o RatePlanBasedOnRateTypeDynamicBaseRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanBasedOnRateTypeDynamicBaseRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompareWithRateSchedules) {
		toSerialize["compareWithRateSchedules"] = o.CompareWithRateSchedules
	}
	if !IsNil(o.DependentRatePlans) {
		toSerialize["dependentRatePlans"] = o.DependentRatePlans
	}
	if !IsNil(o.DynamicBaseAmount) {
		toSerialize["dynamicBaseAmount"] = o.DynamicBaseAmount
	}
	if !IsNil(o.DynamicBasedOnRatePlan) {
		toSerialize["dynamicBasedOnRatePlan"] = o.DynamicBasedOnRatePlan
	}
	if !IsNil(o.FlatOrPercentage) {
		toSerialize["flatOrPercentage"] = o.FlatOrPercentage
	}
	if !IsNil(o.Rounding) {
		toSerialize["rounding"] = o.Rounding
	}
	return toSerialize, nil
}

type NullableRatePlanBasedOnRateTypeDynamicBaseRate struct {
	value *RatePlanBasedOnRateTypeDynamicBaseRate
	isSet bool
}

func (v NullableRatePlanBasedOnRateTypeDynamicBaseRate) Get() *RatePlanBasedOnRateTypeDynamicBaseRate {
	return v.value
}

func (v *NullableRatePlanBasedOnRateTypeDynamicBaseRate) Set(val *RatePlanBasedOnRateTypeDynamicBaseRate) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanBasedOnRateTypeDynamicBaseRate) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanBasedOnRateTypeDynamicBaseRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanBasedOnRateTypeDynamicBaseRate(val *RatePlanBasedOnRateTypeDynamicBaseRate) *NullableRatePlanBasedOnRateTypeDynamicBaseRate {
	return &NullableRatePlanBasedOnRateTypeDynamicBaseRate{value: val, isSet: true}
}

func (v NullableRatePlanBasedOnRateTypeDynamicBaseRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanBasedOnRateTypeDynamicBaseRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


