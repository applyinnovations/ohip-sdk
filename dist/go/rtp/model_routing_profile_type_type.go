/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// RoutingProfileTypeType Profile Types available for routing instructions.
type RoutingProfileTypeType string

// List of routingProfileTypeType
const (
	ROUTINGPROFILETYPETYPE_AGENT RoutingProfileTypeType = "Agent"
	ROUTINGPROFILETYPETYPE_COMPANY RoutingProfileTypeType = "Company"
	ROUTINGPROFILETYPETYPE_CONTACT RoutingProfileTypeType = "Contact"
	ROUTINGPROFILETYPETYPE_SOURCE RoutingProfileTypeType = "Source"
)

// All allowed values of RoutingProfileTypeType enum
var AllowedRoutingProfileTypeTypeEnumValues = []RoutingProfileTypeType{
	"Agent",
	"Company",
	"Contact",
	"Source",
}

func (v *RoutingProfileTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingProfileTypeType(value)
	for _, existing := range AllowedRoutingProfileTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingProfileTypeType", value)
}

// NewRoutingProfileTypeTypeFromValue returns a pointer to a valid RoutingProfileTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingProfileTypeTypeFromValue(v string) (*RoutingProfileTypeType, error) {
	ev := RoutingProfileTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingProfileTypeType: valid values are %v", v, AllowedRoutingProfileTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingProfileTypeType) IsValid() bool {
	for _, existing := range AllowedRoutingProfileTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to routingProfileTypeType value
func (v RoutingProfileTypeType) Ptr() *RoutingProfileTypeType {
	return &v
}

type NullableRoutingProfileTypeType struct {
	value *RoutingProfileTypeType
	isSet bool
}

func (v NullableRoutingProfileTypeType) Get() *RoutingProfileTypeType {
	return v.value
}

func (v *NullableRoutingProfileTypeType) Set(val *RoutingProfileTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProfileTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProfileTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProfileTypeType(val *RoutingProfileTypeType) *NullableRoutingProfileTypeType {
	return &NullableRoutingProfileTypeType{value: val, isSet: true}
}

func (v NullableRoutingProfileTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProfileTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

