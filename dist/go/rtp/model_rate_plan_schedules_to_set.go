/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanSchedulesToSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanSchedulesToSet{}

// RatePlanSchedulesToSet Request object to set rate plan schedules.
type RatePlanSchedulesToSet struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// List of rate plan schedules to be created / updated.
	RatePlanScheduleList []RatePlanScheduleDetailType `json:"ratePlanScheduleList,omitempty"`
}

// NewRatePlanSchedulesToSet instantiates a new RatePlanSchedulesToSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanSchedulesToSet() *RatePlanSchedulesToSet {
	this := RatePlanSchedulesToSet{}
	return &this
}

// NewRatePlanSchedulesToSetWithDefaults instantiates a new RatePlanSchedulesToSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanSchedulesToSetWithDefaults() *RatePlanSchedulesToSet {
	this := RatePlanSchedulesToSet{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RatePlanSchedulesToSet) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSchedulesToSet) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RatePlanSchedulesToSet) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RatePlanSchedulesToSet) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *RatePlanSchedulesToSet) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSchedulesToSet) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *RatePlanSchedulesToSet) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *RatePlanSchedulesToSet) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetRatePlanScheduleList returns the RatePlanScheduleList field value if set, zero value otherwise.
func (o *RatePlanSchedulesToSet) GetRatePlanScheduleList() []RatePlanScheduleDetailType {
	if o == nil || IsNil(o.RatePlanScheduleList) {
		var ret []RatePlanScheduleDetailType
		return ret
	}
	return o.RatePlanScheduleList
}

// GetRatePlanScheduleListOk returns a tuple with the RatePlanScheduleList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSchedulesToSet) GetRatePlanScheduleListOk() ([]RatePlanScheduleDetailType, bool) {
	if o == nil || IsNil(o.RatePlanScheduleList) {
		return nil, false
	}
	return o.RatePlanScheduleList, true
}

// HasRatePlanScheduleList returns a boolean if a field has been set.
func (o *RatePlanSchedulesToSet) HasRatePlanScheduleList() bool {
	if o != nil && !IsNil(o.RatePlanScheduleList) {
		return true
	}

	return false
}

// SetRatePlanScheduleList gets a reference to the given []RatePlanScheduleDetailType and assigns it to the RatePlanScheduleList field.
func (o *RatePlanSchedulesToSet) SetRatePlanScheduleList(v []RatePlanScheduleDetailType) {
	o.RatePlanScheduleList = v
}

func (o RatePlanSchedulesToSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanSchedulesToSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.RatePlanScheduleList) {
		toSerialize["ratePlanScheduleList"] = o.RatePlanScheduleList
	}
	return toSerialize, nil
}

type NullableRatePlanSchedulesToSet struct {
	value *RatePlanSchedulesToSet
	isSet bool
}

func (v NullableRatePlanSchedulesToSet) Get() *RatePlanSchedulesToSet {
	return v.value
}

func (v *NullableRatePlanSchedulesToSet) Set(val *RatePlanSchedulesToSet) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanSchedulesToSet) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanSchedulesToSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanSchedulesToSet(val *RatePlanSchedulesToSet) *NullableRatePlanSchedulesToSet {
	return &NullableRatePlanSchedulesToSet{value: val, isSet: true}
}

func (v NullableRatePlanSchedulesToSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanSchedulesToSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


