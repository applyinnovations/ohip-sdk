/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the YieldInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YieldInfoType{}

// YieldInfoType The complete Yield adjustment information for the rate schedule.
type YieldInfoType struct {
	// Adjustment amount for the code.
	AdjustmentAmount *float32 `json:"adjustmentAmount,omitempty"`
	// Whether the Adjustment amount is overridden? false, signifies the amount is current value of Adjustment code.
	AdjustmentAmountOverridden *bool `json:"adjustmentAmountOverridden,omitempty"`
	AdjustmentCategory *AdjustmentCategoryType `json:"adjustmentCategory,omitempty"`
	// Adjustment Code.
	AdjustmentCode *string `json:"adjustmentCode,omitempty"`
	// The currency Code for this adjustment code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Description of the adjustment code.
	Description *string `json:"description,omitempty"`
}

// NewYieldInfoType instantiates a new YieldInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYieldInfoType() *YieldInfoType {
	this := YieldInfoType{}
	return &this
}

// NewYieldInfoTypeWithDefaults instantiates a new YieldInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYieldInfoTypeWithDefaults() *YieldInfoType {
	this := YieldInfoType{}
	return &this
}

// GetAdjustmentAmount returns the AdjustmentAmount field value if set, zero value otherwise.
func (o *YieldInfoType) GetAdjustmentAmount() float32 {
	if o == nil || IsNil(o.AdjustmentAmount) {
		var ret float32
		return ret
	}
	return *o.AdjustmentAmount
}

// GetAdjustmentAmountOk returns a tuple with the AdjustmentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldInfoType) GetAdjustmentAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.AdjustmentAmount) {
		return nil, false
	}
	return o.AdjustmentAmount, true
}

// HasAdjustmentAmount returns a boolean if a field has been set.
func (o *YieldInfoType) HasAdjustmentAmount() bool {
	if o != nil && !IsNil(o.AdjustmentAmount) {
		return true
	}

	return false
}

// SetAdjustmentAmount gets a reference to the given float32 and assigns it to the AdjustmentAmount field.
func (o *YieldInfoType) SetAdjustmentAmount(v float32) {
	o.AdjustmentAmount = &v
}

// GetAdjustmentAmountOverridden returns the AdjustmentAmountOverridden field value if set, zero value otherwise.
func (o *YieldInfoType) GetAdjustmentAmountOverridden() bool {
	if o == nil || IsNil(o.AdjustmentAmountOverridden) {
		var ret bool
		return ret
	}
	return *o.AdjustmentAmountOverridden
}

// GetAdjustmentAmountOverriddenOk returns a tuple with the AdjustmentAmountOverridden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldInfoType) GetAdjustmentAmountOverriddenOk() (*bool, bool) {
	if o == nil || IsNil(o.AdjustmentAmountOverridden) {
		return nil, false
	}
	return o.AdjustmentAmountOverridden, true
}

// HasAdjustmentAmountOverridden returns a boolean if a field has been set.
func (o *YieldInfoType) HasAdjustmentAmountOverridden() bool {
	if o != nil && !IsNil(o.AdjustmentAmountOverridden) {
		return true
	}

	return false
}

// SetAdjustmentAmountOverridden gets a reference to the given bool and assigns it to the AdjustmentAmountOverridden field.
func (o *YieldInfoType) SetAdjustmentAmountOverridden(v bool) {
	o.AdjustmentAmountOverridden = &v
}

// GetAdjustmentCategory returns the AdjustmentCategory field value if set, zero value otherwise.
func (o *YieldInfoType) GetAdjustmentCategory() AdjustmentCategoryType {
	if o == nil || IsNil(o.AdjustmentCategory) {
		var ret AdjustmentCategoryType
		return ret
	}
	return *o.AdjustmentCategory
}

// GetAdjustmentCategoryOk returns a tuple with the AdjustmentCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldInfoType) GetAdjustmentCategoryOk() (*AdjustmentCategoryType, bool) {
	if o == nil || IsNil(o.AdjustmentCategory) {
		return nil, false
	}
	return o.AdjustmentCategory, true
}

// HasAdjustmentCategory returns a boolean if a field has been set.
func (o *YieldInfoType) HasAdjustmentCategory() bool {
	if o != nil && !IsNil(o.AdjustmentCategory) {
		return true
	}

	return false
}

// SetAdjustmentCategory gets a reference to the given AdjustmentCategoryType and assigns it to the AdjustmentCategory field.
func (o *YieldInfoType) SetAdjustmentCategory(v AdjustmentCategoryType) {
	o.AdjustmentCategory = &v
}

// GetAdjustmentCode returns the AdjustmentCode field value if set, zero value otherwise.
func (o *YieldInfoType) GetAdjustmentCode() string {
	if o == nil || IsNil(o.AdjustmentCode) {
		var ret string
		return ret
	}
	return *o.AdjustmentCode
}

// GetAdjustmentCodeOk returns a tuple with the AdjustmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldInfoType) GetAdjustmentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustmentCode) {
		return nil, false
	}
	return o.AdjustmentCode, true
}

// HasAdjustmentCode returns a boolean if a field has been set.
func (o *YieldInfoType) HasAdjustmentCode() bool {
	if o != nil && !IsNil(o.AdjustmentCode) {
		return true
	}

	return false
}

// SetAdjustmentCode gets a reference to the given string and assigns it to the AdjustmentCode field.
func (o *YieldInfoType) SetAdjustmentCode(v string) {
	o.AdjustmentCode = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *YieldInfoType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldInfoType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *YieldInfoType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *YieldInfoType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *YieldInfoType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *YieldInfoType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *YieldInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *YieldInfoType) SetDescription(v string) {
	o.Description = &v
}

func (o YieldInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YieldInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustmentAmount) {
		toSerialize["adjustmentAmount"] = o.AdjustmentAmount
	}
	if !IsNil(o.AdjustmentAmountOverridden) {
		toSerialize["adjustmentAmountOverridden"] = o.AdjustmentAmountOverridden
	}
	if !IsNil(o.AdjustmentCategory) {
		toSerialize["adjustmentCategory"] = o.AdjustmentCategory
	}
	if !IsNil(o.AdjustmentCode) {
		toSerialize["adjustmentCode"] = o.AdjustmentCode
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableYieldInfoType struct {
	value *YieldInfoType
	isSet bool
}

func (v NullableYieldInfoType) Get() *YieldInfoType {
	return v.value
}

func (v *NullableYieldInfoType) Set(val *YieldInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableYieldInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableYieldInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYieldInfoType(val *YieldInfoType) *NullableYieldInfoType {
	return &NullableYieldInfoType{value: val, isSet: true}
}

func (v NullableYieldInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYieldInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


