/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanTypeNegotiatedRates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanTypeNegotiatedRates{}

// RatePlanTypeNegotiatedRates List of negotiated Profiles.
type RatePlanTypeNegotiatedRates struct {
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	HasMore *bool `json:"hasMore,omitempty"`
	NegotiatedRate []NegotiatedRateType `json:"negotiatedRate,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// NewRatePlanTypeNegotiatedRates instantiates a new RatePlanTypeNegotiatedRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanTypeNegotiatedRates() *RatePlanTypeNegotiatedRates {
	this := RatePlanTypeNegotiatedRates{}
	return &this
}

// NewRatePlanTypeNegotiatedRatesWithDefaults instantiates a new RatePlanTypeNegotiatedRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanTypeNegotiatedRatesWithDefaults() *RatePlanTypeNegotiatedRates {
	this := RatePlanTypeNegotiatedRates{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RatePlanTypeNegotiatedRates) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanTypeNegotiatedRates) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RatePlanTypeNegotiatedRates) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *RatePlanTypeNegotiatedRates) SetCount(v int32) {
	o.Count = &v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *RatePlanTypeNegotiatedRates) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanTypeNegotiatedRates) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *RatePlanTypeNegotiatedRates) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *RatePlanTypeNegotiatedRates) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetNegotiatedRate returns the NegotiatedRate field value if set, zero value otherwise.
func (o *RatePlanTypeNegotiatedRates) GetNegotiatedRate() []NegotiatedRateType {
	if o == nil || IsNil(o.NegotiatedRate) {
		var ret []NegotiatedRateType
		return ret
	}
	return o.NegotiatedRate
}

// GetNegotiatedRateOk returns a tuple with the NegotiatedRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanTypeNegotiatedRates) GetNegotiatedRateOk() ([]NegotiatedRateType, bool) {
	if o == nil || IsNil(o.NegotiatedRate) {
		return nil, false
	}
	return o.NegotiatedRate, true
}

// HasNegotiatedRate returns a boolean if a field has been set.
func (o *RatePlanTypeNegotiatedRates) HasNegotiatedRate() bool {
	if o != nil && !IsNil(o.NegotiatedRate) {
		return true
	}

	return false
}

// SetNegotiatedRate gets a reference to the given []NegotiatedRateType and assigns it to the NegotiatedRate field.
func (o *RatePlanTypeNegotiatedRates) SetNegotiatedRate(v []NegotiatedRateType) {
	o.NegotiatedRate = v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *RatePlanTypeNegotiatedRates) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanTypeNegotiatedRates) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *RatePlanTypeNegotiatedRates) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *RatePlanTypeNegotiatedRates) SetTotalResults(v int32) {
	o.TotalResults = &v
}

func (o RatePlanTypeNegotiatedRates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanTypeNegotiatedRates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.NegotiatedRate) {
		toSerialize["negotiatedRate"] = o.NegotiatedRate
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableRatePlanTypeNegotiatedRates struct {
	value *RatePlanTypeNegotiatedRates
	isSet bool
}

func (v NullableRatePlanTypeNegotiatedRates) Get() *RatePlanTypeNegotiatedRates {
	return v.value
}

func (v *NullableRatePlanTypeNegotiatedRates) Set(val *RatePlanTypeNegotiatedRates) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanTypeNegotiatedRates) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanTypeNegotiatedRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanTypeNegotiatedRates(val *RatePlanTypeNegotiatedRates) *NullableRatePlanTypeNegotiatedRates {
	return &NullableRatePlanTypeNegotiatedRates{value: val, isSet: true}
}

func (v NullableRatePlanTypeNegotiatedRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanTypeNegotiatedRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


