/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the StrategyDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StrategyDetailType{}

// StrategyDetailType The Rate strategy details.
type StrategyDetailType struct {
	Condition *StrategyConditionType `json:"condition,omitempty"`
	Control *StrategyControlType `json:"control,omitempty"`
	// Rate Strategy execution order sequence.
	ExecutionOrder *int32 `json:"executionOrder,omitempty"`
	Restriction *StrategyRestrictionType `json:"restriction,omitempty"`
}

// NewStrategyDetailType instantiates a new StrategyDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategyDetailType() *StrategyDetailType {
	this := StrategyDetailType{}
	return &this
}

// NewStrategyDetailTypeWithDefaults instantiates a new StrategyDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyDetailTypeWithDefaults() *StrategyDetailType {
	this := StrategyDetailType{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *StrategyDetailType) GetCondition() StrategyConditionType {
	if o == nil || IsNil(o.Condition) {
		var ret StrategyConditionType
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyDetailType) GetConditionOk() (*StrategyConditionType, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *StrategyDetailType) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given StrategyConditionType and assigns it to the Condition field.
func (o *StrategyDetailType) SetCondition(v StrategyConditionType) {
	o.Condition = &v
}

// GetControl returns the Control field value if set, zero value otherwise.
func (o *StrategyDetailType) GetControl() StrategyControlType {
	if o == nil || IsNil(o.Control) {
		var ret StrategyControlType
		return ret
	}
	return *o.Control
}

// GetControlOk returns a tuple with the Control field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyDetailType) GetControlOk() (*StrategyControlType, bool) {
	if o == nil || IsNil(o.Control) {
		return nil, false
	}
	return o.Control, true
}

// HasControl returns a boolean if a field has been set.
func (o *StrategyDetailType) HasControl() bool {
	if o != nil && !IsNil(o.Control) {
		return true
	}

	return false
}

// SetControl gets a reference to the given StrategyControlType and assigns it to the Control field.
func (o *StrategyDetailType) SetControl(v StrategyControlType) {
	o.Control = &v
}

// GetExecutionOrder returns the ExecutionOrder field value if set, zero value otherwise.
func (o *StrategyDetailType) GetExecutionOrder() int32 {
	if o == nil || IsNil(o.ExecutionOrder) {
		var ret int32
		return ret
	}
	return *o.ExecutionOrder
}

// GetExecutionOrderOk returns a tuple with the ExecutionOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyDetailType) GetExecutionOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutionOrder) {
		return nil, false
	}
	return o.ExecutionOrder, true
}

// HasExecutionOrder returns a boolean if a field has been set.
func (o *StrategyDetailType) HasExecutionOrder() bool {
	if o != nil && !IsNil(o.ExecutionOrder) {
		return true
	}

	return false
}

// SetExecutionOrder gets a reference to the given int32 and assigns it to the ExecutionOrder field.
func (o *StrategyDetailType) SetExecutionOrder(v int32) {
	o.ExecutionOrder = &v
}

// GetRestriction returns the Restriction field value if set, zero value otherwise.
func (o *StrategyDetailType) GetRestriction() StrategyRestrictionType {
	if o == nil || IsNil(o.Restriction) {
		var ret StrategyRestrictionType
		return ret
	}
	return *o.Restriction
}

// GetRestrictionOk returns a tuple with the Restriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyDetailType) GetRestrictionOk() (*StrategyRestrictionType, bool) {
	if o == nil || IsNil(o.Restriction) {
		return nil, false
	}
	return o.Restriction, true
}

// HasRestriction returns a boolean if a field has been set.
func (o *StrategyDetailType) HasRestriction() bool {
	if o != nil && !IsNil(o.Restriction) {
		return true
	}

	return false
}

// SetRestriction gets a reference to the given StrategyRestrictionType and assigns it to the Restriction field.
func (o *StrategyDetailType) SetRestriction(v StrategyRestrictionType) {
	o.Restriction = &v
}

func (o StrategyDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StrategyDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Control) {
		toSerialize["control"] = o.Control
	}
	if !IsNil(o.ExecutionOrder) {
		toSerialize["executionOrder"] = o.ExecutionOrder
	}
	if !IsNil(o.Restriction) {
		toSerialize["restriction"] = o.Restriction
	}
	return toSerialize, nil
}

type NullableStrategyDetailType struct {
	value *StrategyDetailType
	isSet bool
}

func (v NullableStrategyDetailType) Get() *StrategyDetailType {
	return v.value
}

func (v *NullableStrategyDetailType) Set(val *StrategyDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyDetailType(val *StrategyDetailType) *NullableStrategyDetailType {
	return &NullableStrategyDetailType{value: val, isSet: true}
}

func (v NullableStrategyDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


