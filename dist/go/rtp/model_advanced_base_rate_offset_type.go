/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the AdvancedBaseRateOffsetType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvancedBaseRateOffsetType{}

// AdvancedBaseRateOffsetType A Rate which is of Advanced Dynamic Base Rate can have rate schedule based on an offset from its Base Rate or BAR Rate.
type AdvancedBaseRateOffsetType struct {
	// offset amount for the advanced dynamic base rate schedule.
	Offset *float32 `json:"offset,omitempty"`
	// It signifies offset amount is of Flat or Percentage type. Valid Values are F/P.
	FlatOrPercentage *string `json:"flatOrPercentage,omitempty"`
	// Should this schedule be Advanced dynamically based on BAR rate.
	ApplyBar *bool `json:"applyBar,omitempty"`
	// Offset amount for the advanced dynamic base rate schedule from its BAR Rate.
	BarBaseAmount *float32 `json:"barBaseAmount,omitempty"`
	// It signifies whether Bar Base Amount is of Flat or Percentage type. Valid Values are F/P.
	BarFlatOrPercentage *string `json:"barFlatOrPercentage,omitempty"`
	// Rounding style used for the calculated rate amounts. Valid values are U,D,N,C,F which means Up, Down, None, Up-Keep Decimal, Down-Keep Decimal.
	BarRounding *string `json:"barRounding,omitempty"`
}

// NewAdvancedBaseRateOffsetType instantiates a new AdvancedBaseRateOffsetType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedBaseRateOffsetType() *AdvancedBaseRateOffsetType {
	this := AdvancedBaseRateOffsetType{}
	return &this
}

// NewAdvancedBaseRateOffsetTypeWithDefaults instantiates a new AdvancedBaseRateOffsetType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedBaseRateOffsetTypeWithDefaults() *AdvancedBaseRateOffsetType {
	this := AdvancedBaseRateOffsetType{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *AdvancedBaseRateOffsetType) GetOffset() float32 {
	if o == nil || IsNil(o.Offset) {
		var ret float32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedBaseRateOffsetType) GetOffsetOk() (*float32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *AdvancedBaseRateOffsetType) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given float32 and assigns it to the Offset field.
func (o *AdvancedBaseRateOffsetType) SetOffset(v float32) {
	o.Offset = &v
}

// GetFlatOrPercentage returns the FlatOrPercentage field value if set, zero value otherwise.
func (o *AdvancedBaseRateOffsetType) GetFlatOrPercentage() string {
	if o == nil || IsNil(o.FlatOrPercentage) {
		var ret string
		return ret
	}
	return *o.FlatOrPercentage
}

// GetFlatOrPercentageOk returns a tuple with the FlatOrPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedBaseRateOffsetType) GetFlatOrPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.FlatOrPercentage) {
		return nil, false
	}
	return o.FlatOrPercentage, true
}

// HasFlatOrPercentage returns a boolean if a field has been set.
func (o *AdvancedBaseRateOffsetType) HasFlatOrPercentage() bool {
	if o != nil && !IsNil(o.FlatOrPercentage) {
		return true
	}

	return false
}

// SetFlatOrPercentage gets a reference to the given string and assigns it to the FlatOrPercentage field.
func (o *AdvancedBaseRateOffsetType) SetFlatOrPercentage(v string) {
	o.FlatOrPercentage = &v
}

// GetApplyBar returns the ApplyBar field value if set, zero value otherwise.
func (o *AdvancedBaseRateOffsetType) GetApplyBar() bool {
	if o == nil || IsNil(o.ApplyBar) {
		var ret bool
		return ret
	}
	return *o.ApplyBar
}

// GetApplyBarOk returns a tuple with the ApplyBar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedBaseRateOffsetType) GetApplyBarOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyBar) {
		return nil, false
	}
	return o.ApplyBar, true
}

// HasApplyBar returns a boolean if a field has been set.
func (o *AdvancedBaseRateOffsetType) HasApplyBar() bool {
	if o != nil && !IsNil(o.ApplyBar) {
		return true
	}

	return false
}

// SetApplyBar gets a reference to the given bool and assigns it to the ApplyBar field.
func (o *AdvancedBaseRateOffsetType) SetApplyBar(v bool) {
	o.ApplyBar = &v
}

// GetBarBaseAmount returns the BarBaseAmount field value if set, zero value otherwise.
func (o *AdvancedBaseRateOffsetType) GetBarBaseAmount() float32 {
	if o == nil || IsNil(o.BarBaseAmount) {
		var ret float32
		return ret
	}
	return *o.BarBaseAmount
}

// GetBarBaseAmountOk returns a tuple with the BarBaseAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedBaseRateOffsetType) GetBarBaseAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BarBaseAmount) {
		return nil, false
	}
	return o.BarBaseAmount, true
}

// HasBarBaseAmount returns a boolean if a field has been set.
func (o *AdvancedBaseRateOffsetType) HasBarBaseAmount() bool {
	if o != nil && !IsNil(o.BarBaseAmount) {
		return true
	}

	return false
}

// SetBarBaseAmount gets a reference to the given float32 and assigns it to the BarBaseAmount field.
func (o *AdvancedBaseRateOffsetType) SetBarBaseAmount(v float32) {
	o.BarBaseAmount = &v
}

// GetBarFlatOrPercentage returns the BarFlatOrPercentage field value if set, zero value otherwise.
func (o *AdvancedBaseRateOffsetType) GetBarFlatOrPercentage() string {
	if o == nil || IsNil(o.BarFlatOrPercentage) {
		var ret string
		return ret
	}
	return *o.BarFlatOrPercentage
}

// GetBarFlatOrPercentageOk returns a tuple with the BarFlatOrPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedBaseRateOffsetType) GetBarFlatOrPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.BarFlatOrPercentage) {
		return nil, false
	}
	return o.BarFlatOrPercentage, true
}

// HasBarFlatOrPercentage returns a boolean if a field has been set.
func (o *AdvancedBaseRateOffsetType) HasBarFlatOrPercentage() bool {
	if o != nil && !IsNil(o.BarFlatOrPercentage) {
		return true
	}

	return false
}

// SetBarFlatOrPercentage gets a reference to the given string and assigns it to the BarFlatOrPercentage field.
func (o *AdvancedBaseRateOffsetType) SetBarFlatOrPercentage(v string) {
	o.BarFlatOrPercentage = &v
}

// GetBarRounding returns the BarRounding field value if set, zero value otherwise.
func (o *AdvancedBaseRateOffsetType) GetBarRounding() string {
	if o == nil || IsNil(o.BarRounding) {
		var ret string
		return ret
	}
	return *o.BarRounding
}

// GetBarRoundingOk returns a tuple with the BarRounding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedBaseRateOffsetType) GetBarRoundingOk() (*string, bool) {
	if o == nil || IsNil(o.BarRounding) {
		return nil, false
	}
	return o.BarRounding, true
}

// HasBarRounding returns a boolean if a field has been set.
func (o *AdvancedBaseRateOffsetType) HasBarRounding() bool {
	if o != nil && !IsNil(o.BarRounding) {
		return true
	}

	return false
}

// SetBarRounding gets a reference to the given string and assigns it to the BarRounding field.
func (o *AdvancedBaseRateOffsetType) SetBarRounding(v string) {
	o.BarRounding = &v
}

func (o AdvancedBaseRateOffsetType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvancedBaseRateOffsetType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.FlatOrPercentage) {
		toSerialize["flatOrPercentage"] = o.FlatOrPercentage
	}
	if !IsNil(o.ApplyBar) {
		toSerialize["applyBar"] = o.ApplyBar
	}
	if !IsNil(o.BarBaseAmount) {
		toSerialize["barBaseAmount"] = o.BarBaseAmount
	}
	if !IsNil(o.BarFlatOrPercentage) {
		toSerialize["barFlatOrPercentage"] = o.BarFlatOrPercentage
	}
	if !IsNil(o.BarRounding) {
		toSerialize["barRounding"] = o.BarRounding
	}
	return toSerialize, nil
}

type NullableAdvancedBaseRateOffsetType struct {
	value *AdvancedBaseRateOffsetType
	isSet bool
}

func (v NullableAdvancedBaseRateOffsetType) Get() *AdvancedBaseRateOffsetType {
	return v.value
}

func (v *NullableAdvancedBaseRateOffsetType) Set(val *AdvancedBaseRateOffsetType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedBaseRateOffsetType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedBaseRateOffsetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedBaseRateOffsetType(val *AdvancedBaseRateOffsetType) *NullableAdvancedBaseRateOffsetType {
	return &NullableAdvancedBaseRateOffsetType{value: val, isSet: true}
}

func (v NullableAdvancedBaseRateOffsetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedBaseRateOffsetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


