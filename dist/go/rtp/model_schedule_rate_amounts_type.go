/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the ScheduleRateAmountsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleRateAmountsType{}

// ScheduleRateAmountsType struct for ScheduleRateAmountsType
type ScheduleRateAmountsType struct {
	// Rate amount for one person.
	OnePersonRate *float32 `json:"onePersonRate,omitempty"`
	// Rate amount for two persons.
	TwoPersonRate *float32 `json:"twoPersonRate,omitempty"`
	// Rate amount for three persons.
	ThreePersonRate *float32 `json:"threePersonRate,omitempty"`
	// Rate amount for four persons.
	FourPersonRate *float32 `json:"fourPersonRate,omitempty"`
	// Rate amount for five persons.
	FivePersonRate *float32 `json:"fivePersonRate,omitempty"`
	// Rate amount for each extra person.
	ExtraPersonRate *float32 `json:"extraPersonRate,omitempty"`
	// Rate amount for each extra Child.
	ExtraChildRate *float32 `json:"extraChildRate,omitempty"`
	// Rate amount for one Child.
	OneChildRate *float32 `json:"oneChildRate,omitempty"`
	// Rate amount for two Children.
	TwoChildrenRate *float32 `json:"twoChildrenRate,omitempty"`
	// Rate amount for three Children.
	ThreeChildrenRate *float32 `json:"threeChildrenRate,omitempty"`
	// Rate amount for four Children.
	FourChildrenRate *float32 `json:"fourChildrenRate,omitempty"`
	// Rate amount by age bucket.
	RateByAgeBuckets []RateByAgeBucketType `json:"rateByAgeBuckets,omitempty"`
	// Minimum number of children needed to get free stay.
	MinimumChildrenForFreeStay *int32 `json:"minimumChildrenForFreeStay,omitempty"`
	// The number of award points required for applying this rate plan schedule.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// true if floor amount needs to be override
	OverrideFloorAmount *bool `json:"overrideFloorAmount,omitempty"`
}

// NewScheduleRateAmountsType instantiates a new ScheduleRateAmountsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleRateAmountsType() *ScheduleRateAmountsType {
	this := ScheduleRateAmountsType{}
	return &this
}

// NewScheduleRateAmountsTypeWithDefaults instantiates a new ScheduleRateAmountsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleRateAmountsTypeWithDefaults() *ScheduleRateAmountsType {
	this := ScheduleRateAmountsType{}
	return &this
}

// GetOnePersonRate returns the OnePersonRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetOnePersonRate() float32 {
	if o == nil || IsNil(o.OnePersonRate) {
		var ret float32
		return ret
	}
	return *o.OnePersonRate
}

// GetOnePersonRateOk returns a tuple with the OnePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetOnePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OnePersonRate) {
		return nil, false
	}
	return o.OnePersonRate, true
}

// HasOnePersonRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasOnePersonRate() bool {
	if o != nil && !IsNil(o.OnePersonRate) {
		return true
	}

	return false
}

// SetOnePersonRate gets a reference to the given float32 and assigns it to the OnePersonRate field.
func (o *ScheduleRateAmountsType) SetOnePersonRate(v float32) {
	o.OnePersonRate = &v
}

// GetTwoPersonRate returns the TwoPersonRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetTwoPersonRate() float32 {
	if o == nil || IsNil(o.TwoPersonRate) {
		var ret float32
		return ret
	}
	return *o.TwoPersonRate
}

// GetTwoPersonRateOk returns a tuple with the TwoPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetTwoPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoPersonRate) {
		return nil, false
	}
	return o.TwoPersonRate, true
}

// HasTwoPersonRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasTwoPersonRate() bool {
	if o != nil && !IsNil(o.TwoPersonRate) {
		return true
	}

	return false
}

// SetTwoPersonRate gets a reference to the given float32 and assigns it to the TwoPersonRate field.
func (o *ScheduleRateAmountsType) SetTwoPersonRate(v float32) {
	o.TwoPersonRate = &v
}

// GetThreePersonRate returns the ThreePersonRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetThreePersonRate() float32 {
	if o == nil || IsNil(o.ThreePersonRate) {
		var ret float32
		return ret
	}
	return *o.ThreePersonRate
}

// GetThreePersonRateOk returns a tuple with the ThreePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetThreePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreePersonRate) {
		return nil, false
	}
	return o.ThreePersonRate, true
}

// HasThreePersonRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasThreePersonRate() bool {
	if o != nil && !IsNil(o.ThreePersonRate) {
		return true
	}

	return false
}

// SetThreePersonRate gets a reference to the given float32 and assigns it to the ThreePersonRate field.
func (o *ScheduleRateAmountsType) SetThreePersonRate(v float32) {
	o.ThreePersonRate = &v
}

// GetFourPersonRate returns the FourPersonRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetFourPersonRate() float32 {
	if o == nil || IsNil(o.FourPersonRate) {
		var ret float32
		return ret
	}
	return *o.FourPersonRate
}

// GetFourPersonRateOk returns a tuple with the FourPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetFourPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FourPersonRate) {
		return nil, false
	}
	return o.FourPersonRate, true
}

// HasFourPersonRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasFourPersonRate() bool {
	if o != nil && !IsNil(o.FourPersonRate) {
		return true
	}

	return false
}

// SetFourPersonRate gets a reference to the given float32 and assigns it to the FourPersonRate field.
func (o *ScheduleRateAmountsType) SetFourPersonRate(v float32) {
	o.FourPersonRate = &v
}

// GetFivePersonRate returns the FivePersonRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetFivePersonRate() float32 {
	if o == nil || IsNil(o.FivePersonRate) {
		var ret float32
		return ret
	}
	return *o.FivePersonRate
}

// GetFivePersonRateOk returns a tuple with the FivePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetFivePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FivePersonRate) {
		return nil, false
	}
	return o.FivePersonRate, true
}

// HasFivePersonRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasFivePersonRate() bool {
	if o != nil && !IsNil(o.FivePersonRate) {
		return true
	}

	return false
}

// SetFivePersonRate gets a reference to the given float32 and assigns it to the FivePersonRate field.
func (o *ScheduleRateAmountsType) SetFivePersonRate(v float32) {
	o.FivePersonRate = &v
}

// GetExtraPersonRate returns the ExtraPersonRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetExtraPersonRate() float32 {
	if o == nil || IsNil(o.ExtraPersonRate) {
		var ret float32
		return ret
	}
	return *o.ExtraPersonRate
}

// GetExtraPersonRateOk returns a tuple with the ExtraPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetExtraPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtraPersonRate) {
		return nil, false
	}
	return o.ExtraPersonRate, true
}

// HasExtraPersonRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasExtraPersonRate() bool {
	if o != nil && !IsNil(o.ExtraPersonRate) {
		return true
	}

	return false
}

// SetExtraPersonRate gets a reference to the given float32 and assigns it to the ExtraPersonRate field.
func (o *ScheduleRateAmountsType) SetExtraPersonRate(v float32) {
	o.ExtraPersonRate = &v
}

// GetExtraChildRate returns the ExtraChildRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetExtraChildRate() float32 {
	if o == nil || IsNil(o.ExtraChildRate) {
		var ret float32
		return ret
	}
	return *o.ExtraChildRate
}

// GetExtraChildRateOk returns a tuple with the ExtraChildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetExtraChildRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtraChildRate) {
		return nil, false
	}
	return o.ExtraChildRate, true
}

// HasExtraChildRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasExtraChildRate() bool {
	if o != nil && !IsNil(o.ExtraChildRate) {
		return true
	}

	return false
}

// SetExtraChildRate gets a reference to the given float32 and assigns it to the ExtraChildRate field.
func (o *ScheduleRateAmountsType) SetExtraChildRate(v float32) {
	o.ExtraChildRate = &v
}

// GetOneChildRate returns the OneChildRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetOneChildRate() float32 {
	if o == nil || IsNil(o.OneChildRate) {
		var ret float32
		return ret
	}
	return *o.OneChildRate
}

// GetOneChildRateOk returns a tuple with the OneChildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetOneChildRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OneChildRate) {
		return nil, false
	}
	return o.OneChildRate, true
}

// HasOneChildRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasOneChildRate() bool {
	if o != nil && !IsNil(o.OneChildRate) {
		return true
	}

	return false
}

// SetOneChildRate gets a reference to the given float32 and assigns it to the OneChildRate field.
func (o *ScheduleRateAmountsType) SetOneChildRate(v float32) {
	o.OneChildRate = &v
}

// GetTwoChildrenRate returns the TwoChildrenRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetTwoChildrenRate() float32 {
	if o == nil || IsNil(o.TwoChildrenRate) {
		var ret float32
		return ret
	}
	return *o.TwoChildrenRate
}

// GetTwoChildrenRateOk returns a tuple with the TwoChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetTwoChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoChildrenRate) {
		return nil, false
	}
	return o.TwoChildrenRate, true
}

// HasTwoChildrenRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasTwoChildrenRate() bool {
	if o != nil && !IsNil(o.TwoChildrenRate) {
		return true
	}

	return false
}

// SetTwoChildrenRate gets a reference to the given float32 and assigns it to the TwoChildrenRate field.
func (o *ScheduleRateAmountsType) SetTwoChildrenRate(v float32) {
	o.TwoChildrenRate = &v
}

// GetThreeChildrenRate returns the ThreeChildrenRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetThreeChildrenRate() float32 {
	if o == nil || IsNil(o.ThreeChildrenRate) {
		var ret float32
		return ret
	}
	return *o.ThreeChildrenRate
}

// GetThreeChildrenRateOk returns a tuple with the ThreeChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetThreeChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreeChildrenRate) {
		return nil, false
	}
	return o.ThreeChildrenRate, true
}

// HasThreeChildrenRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasThreeChildrenRate() bool {
	if o != nil && !IsNil(o.ThreeChildrenRate) {
		return true
	}

	return false
}

// SetThreeChildrenRate gets a reference to the given float32 and assigns it to the ThreeChildrenRate field.
func (o *ScheduleRateAmountsType) SetThreeChildrenRate(v float32) {
	o.ThreeChildrenRate = &v
}

// GetFourChildrenRate returns the FourChildrenRate field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetFourChildrenRate() float32 {
	if o == nil || IsNil(o.FourChildrenRate) {
		var ret float32
		return ret
	}
	return *o.FourChildrenRate
}

// GetFourChildrenRateOk returns a tuple with the FourChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetFourChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FourChildrenRate) {
		return nil, false
	}
	return o.FourChildrenRate, true
}

// HasFourChildrenRate returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasFourChildrenRate() bool {
	if o != nil && !IsNil(o.FourChildrenRate) {
		return true
	}

	return false
}

// SetFourChildrenRate gets a reference to the given float32 and assigns it to the FourChildrenRate field.
func (o *ScheduleRateAmountsType) SetFourChildrenRate(v float32) {
	o.FourChildrenRate = &v
}

// GetRateByAgeBuckets returns the RateByAgeBuckets field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetRateByAgeBuckets() []RateByAgeBucketType {
	if o == nil || IsNil(o.RateByAgeBuckets) {
		var ret []RateByAgeBucketType
		return ret
	}
	return o.RateByAgeBuckets
}

// GetRateByAgeBucketsOk returns a tuple with the RateByAgeBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetRateByAgeBucketsOk() ([]RateByAgeBucketType, bool) {
	if o == nil || IsNil(o.RateByAgeBuckets) {
		return nil, false
	}
	return o.RateByAgeBuckets, true
}

// HasRateByAgeBuckets returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasRateByAgeBuckets() bool {
	if o != nil && !IsNil(o.RateByAgeBuckets) {
		return true
	}

	return false
}

// SetRateByAgeBuckets gets a reference to the given []RateByAgeBucketType and assigns it to the RateByAgeBuckets field.
func (o *ScheduleRateAmountsType) SetRateByAgeBuckets(v []RateByAgeBucketType) {
	o.RateByAgeBuckets = v
}

// GetMinimumChildrenForFreeStay returns the MinimumChildrenForFreeStay field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetMinimumChildrenForFreeStay() int32 {
	if o == nil || IsNil(o.MinimumChildrenForFreeStay) {
		var ret int32
		return ret
	}
	return *o.MinimumChildrenForFreeStay
}

// GetMinimumChildrenForFreeStayOk returns a tuple with the MinimumChildrenForFreeStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetMinimumChildrenForFreeStayOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumChildrenForFreeStay) {
		return nil, false
	}
	return o.MinimumChildrenForFreeStay, true
}

// HasMinimumChildrenForFreeStay returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasMinimumChildrenForFreeStay() bool {
	if o != nil && !IsNil(o.MinimumChildrenForFreeStay) {
		return true
	}

	return false
}

// SetMinimumChildrenForFreeStay gets a reference to the given int32 and assigns it to the MinimumChildrenForFreeStay field.
func (o *ScheduleRateAmountsType) SetMinimumChildrenForFreeStay(v int32) {
	o.MinimumChildrenForFreeStay = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *ScheduleRateAmountsType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetOverrideFloorAmount returns the OverrideFloorAmount field value if set, zero value otherwise.
func (o *ScheduleRateAmountsType) GetOverrideFloorAmount() bool {
	if o == nil || IsNil(o.OverrideFloorAmount) {
		var ret bool
		return ret
	}
	return *o.OverrideFloorAmount
}

// GetOverrideFloorAmountOk returns a tuple with the OverrideFloorAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRateAmountsType) GetOverrideFloorAmountOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideFloorAmount) {
		return nil, false
	}
	return o.OverrideFloorAmount, true
}

// HasOverrideFloorAmount returns a boolean if a field has been set.
func (o *ScheduleRateAmountsType) HasOverrideFloorAmount() bool {
	if o != nil && !IsNil(o.OverrideFloorAmount) {
		return true
	}

	return false
}

// SetOverrideFloorAmount gets a reference to the given bool and assigns it to the OverrideFloorAmount field.
func (o *ScheduleRateAmountsType) SetOverrideFloorAmount(v bool) {
	o.OverrideFloorAmount = &v
}

func (o ScheduleRateAmountsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleRateAmountsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnePersonRate) {
		toSerialize["onePersonRate"] = o.OnePersonRate
	}
	if !IsNil(o.TwoPersonRate) {
		toSerialize["twoPersonRate"] = o.TwoPersonRate
	}
	if !IsNil(o.ThreePersonRate) {
		toSerialize["threePersonRate"] = o.ThreePersonRate
	}
	if !IsNil(o.FourPersonRate) {
		toSerialize["fourPersonRate"] = o.FourPersonRate
	}
	if !IsNil(o.FivePersonRate) {
		toSerialize["fivePersonRate"] = o.FivePersonRate
	}
	if !IsNil(o.ExtraPersonRate) {
		toSerialize["extraPersonRate"] = o.ExtraPersonRate
	}
	if !IsNil(o.ExtraChildRate) {
		toSerialize["extraChildRate"] = o.ExtraChildRate
	}
	if !IsNil(o.OneChildRate) {
		toSerialize["oneChildRate"] = o.OneChildRate
	}
	if !IsNil(o.TwoChildrenRate) {
		toSerialize["twoChildrenRate"] = o.TwoChildrenRate
	}
	if !IsNil(o.ThreeChildrenRate) {
		toSerialize["threeChildrenRate"] = o.ThreeChildrenRate
	}
	if !IsNil(o.FourChildrenRate) {
		toSerialize["fourChildrenRate"] = o.FourChildrenRate
	}
	if !IsNil(o.RateByAgeBuckets) {
		toSerialize["rateByAgeBuckets"] = o.RateByAgeBuckets
	}
	if !IsNil(o.MinimumChildrenForFreeStay) {
		toSerialize["minimumChildrenForFreeStay"] = o.MinimumChildrenForFreeStay
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.OverrideFloorAmount) {
		toSerialize["overrideFloorAmount"] = o.OverrideFloorAmount
	}
	return toSerialize, nil
}

type NullableScheduleRateAmountsType struct {
	value *ScheduleRateAmountsType
	isSet bool
}

func (v NullableScheduleRateAmountsType) Get() *ScheduleRateAmountsType {
	return v.value
}

func (v *NullableScheduleRateAmountsType) Set(val *ScheduleRateAmountsType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleRateAmountsType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleRateAmountsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleRateAmountsType(val *ScheduleRateAmountsType) *NullableScheduleRateAmountsType {
	return &NullableScheduleRateAmountsType{value: val, isSet: true}
}

func (v NullableScheduleRateAmountsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleRateAmountsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


