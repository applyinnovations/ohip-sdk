/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// MassRateChangeRecordStatusType Simple type for base type, flat or percentage.
type MassRateChangeRecordStatusType string

// List of massRateChangeRecordStatusType
const (
	MASSRATECHANGERECORDSTATUSTYPE_SUCCESS MassRateChangeRecordStatusType = "Success"
	MASSRATECHANGERECORDSTATUSTYPE_FAIL MassRateChangeRecordStatusType = "Fail"
)

// All allowed values of MassRateChangeRecordStatusType enum
var AllowedMassRateChangeRecordStatusTypeEnumValues = []MassRateChangeRecordStatusType{
	"Success",
	"Fail",
}

func (v *MassRateChangeRecordStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MassRateChangeRecordStatusType(value)
	for _, existing := range AllowedMassRateChangeRecordStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MassRateChangeRecordStatusType", value)
}

// NewMassRateChangeRecordStatusTypeFromValue returns a pointer to a valid MassRateChangeRecordStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMassRateChangeRecordStatusTypeFromValue(v string) (*MassRateChangeRecordStatusType, error) {
	ev := MassRateChangeRecordStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MassRateChangeRecordStatusType: valid values are %v", v, AllowedMassRateChangeRecordStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MassRateChangeRecordStatusType) IsValid() bool {
	for _, existing := range AllowedMassRateChangeRecordStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to massRateChangeRecordStatusType value
func (v MassRateChangeRecordStatusType) Ptr() *MassRateChangeRecordStatusType {
	return &v
}

type NullableMassRateChangeRecordStatusType struct {
	value *MassRateChangeRecordStatusType
	isSet bool
}

func (v NullableMassRateChangeRecordStatusType) Get() *MassRateChangeRecordStatusType {
	return v.value
}

func (v *NullableMassRateChangeRecordStatusType) Set(val *MassRateChangeRecordStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableMassRateChangeRecordStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableMassRateChangeRecordStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMassRateChangeRecordStatusType(val *MassRateChangeRecordStatusType) *NullableMassRateChangeRecordStatusType {
	return &NullableMassRateChangeRecordStatusType{value: val, isSet: true}
}

func (v NullableMassRateChangeRecordStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMassRateChangeRecordStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

