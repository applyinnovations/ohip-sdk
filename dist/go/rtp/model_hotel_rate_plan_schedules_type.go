/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the HotelRatePlanSchedulesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelRatePlanSchedulesType{}

// HotelRatePlanSchedulesType struct for HotelRatePlanSchedulesType
type HotelRatePlanSchedulesType struct {
	// Rate plan schedule to be managed.
	RatePlanScheduleList []RatePlanSchedulesType `json:"ratePlanScheduleList,omitempty"`
	// Hotel Code of the rate plan schedules.
	HotelId *string `json:"hotelId,omitempty"`
	// Rate plan code of the rate plan schedules.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
}

// NewHotelRatePlanSchedulesType instantiates a new HotelRatePlanSchedulesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelRatePlanSchedulesType() *HotelRatePlanSchedulesType {
	this := HotelRatePlanSchedulesType{}
	return &this
}

// NewHotelRatePlanSchedulesTypeWithDefaults instantiates a new HotelRatePlanSchedulesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelRatePlanSchedulesTypeWithDefaults() *HotelRatePlanSchedulesType {
	this := HotelRatePlanSchedulesType{}
	return &this
}

// GetRatePlanScheduleList returns the RatePlanScheduleList field value if set, zero value otherwise.
func (o *HotelRatePlanSchedulesType) GetRatePlanScheduleList() []RatePlanSchedulesType {
	if o == nil || IsNil(o.RatePlanScheduleList) {
		var ret []RatePlanSchedulesType
		return ret
	}
	return o.RatePlanScheduleList
}

// GetRatePlanScheduleListOk returns a tuple with the RatePlanScheduleList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelRatePlanSchedulesType) GetRatePlanScheduleListOk() ([]RatePlanSchedulesType, bool) {
	if o == nil || IsNil(o.RatePlanScheduleList) {
		return nil, false
	}
	return o.RatePlanScheduleList, true
}

// HasRatePlanScheduleList returns a boolean if a field has been set.
func (o *HotelRatePlanSchedulesType) HasRatePlanScheduleList() bool {
	if o != nil && !IsNil(o.RatePlanScheduleList) {
		return true
	}

	return false
}

// SetRatePlanScheduleList gets a reference to the given []RatePlanSchedulesType and assigns it to the RatePlanScheduleList field.
func (o *HotelRatePlanSchedulesType) SetRatePlanScheduleList(v []RatePlanSchedulesType) {
	o.RatePlanScheduleList = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelRatePlanSchedulesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelRatePlanSchedulesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelRatePlanSchedulesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelRatePlanSchedulesType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *HotelRatePlanSchedulesType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelRatePlanSchedulesType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *HotelRatePlanSchedulesType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *HotelRatePlanSchedulesType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

func (o HotelRatePlanSchedulesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelRatePlanSchedulesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatePlanScheduleList) {
		toSerialize["ratePlanScheduleList"] = o.RatePlanScheduleList
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	return toSerialize, nil
}

type NullableHotelRatePlanSchedulesType struct {
	value *HotelRatePlanSchedulesType
	isSet bool
}

func (v NullableHotelRatePlanSchedulesType) Get() *HotelRatePlanSchedulesType {
	return v.value
}

func (v *NullableHotelRatePlanSchedulesType) Set(val *HotelRatePlanSchedulesType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelRatePlanSchedulesType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelRatePlanSchedulesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelRatePlanSchedulesType(val *HotelRatePlanSchedulesType) *NullableHotelRatePlanSchedulesType {
	return &NullableHotelRatePlanSchedulesType{value: val, isSet: true}
}

func (v NullableHotelRatePlanSchedulesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelRatePlanSchedulesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


