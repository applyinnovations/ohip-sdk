/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateTierType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateTierType{}

// RateTierType Details for a single rate tier.
type RateTierType struct {
	// The ending length of stay days. This is not a required field.
	EndLOS *int32 `json:"endLOS,omitempty"`
	// The starting length of stay days. This is a required field.
	StartLOS *int32 `json:"startLOS,omitempty"`
	TierID *int32 `json:"tierID,omitempty"`
}

// NewRateTierType instantiates a new RateTierType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateTierType() *RateTierType {
	this := RateTierType{}
	return &this
}

// NewRateTierTypeWithDefaults instantiates a new RateTierType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateTierTypeWithDefaults() *RateTierType {
	this := RateTierType{}
	return &this
}

// GetEndLOS returns the EndLOS field value if set, zero value otherwise.
func (o *RateTierType) GetEndLOS() int32 {
	if o == nil || IsNil(o.EndLOS) {
		var ret int32
		return ret
	}
	return *o.EndLOS
}

// GetEndLOSOk returns a tuple with the EndLOS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateTierType) GetEndLOSOk() (*int32, bool) {
	if o == nil || IsNil(o.EndLOS) {
		return nil, false
	}
	return o.EndLOS, true
}

// HasEndLOS returns a boolean if a field has been set.
func (o *RateTierType) HasEndLOS() bool {
	if o != nil && !IsNil(o.EndLOS) {
		return true
	}

	return false
}

// SetEndLOS gets a reference to the given int32 and assigns it to the EndLOS field.
func (o *RateTierType) SetEndLOS(v int32) {
	o.EndLOS = &v
}

// GetStartLOS returns the StartLOS field value if set, zero value otherwise.
func (o *RateTierType) GetStartLOS() int32 {
	if o == nil || IsNil(o.StartLOS) {
		var ret int32
		return ret
	}
	return *o.StartLOS
}

// GetStartLOSOk returns a tuple with the StartLOS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateTierType) GetStartLOSOk() (*int32, bool) {
	if o == nil || IsNil(o.StartLOS) {
		return nil, false
	}
	return o.StartLOS, true
}

// HasStartLOS returns a boolean if a field has been set.
func (o *RateTierType) HasStartLOS() bool {
	if o != nil && !IsNil(o.StartLOS) {
		return true
	}

	return false
}

// SetStartLOS gets a reference to the given int32 and assigns it to the StartLOS field.
func (o *RateTierType) SetStartLOS(v int32) {
	o.StartLOS = &v
}

// GetTierID returns the TierID field value if set, zero value otherwise.
func (o *RateTierType) GetTierID() int32 {
	if o == nil || IsNil(o.TierID) {
		var ret int32
		return ret
	}
	return *o.TierID
}

// GetTierIDOk returns a tuple with the TierID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateTierType) GetTierIDOk() (*int32, bool) {
	if o == nil || IsNil(o.TierID) {
		return nil, false
	}
	return o.TierID, true
}

// HasTierID returns a boolean if a field has been set.
func (o *RateTierType) HasTierID() bool {
	if o != nil && !IsNil(o.TierID) {
		return true
	}

	return false
}

// SetTierID gets a reference to the given int32 and assigns it to the TierID field.
func (o *RateTierType) SetTierID(v int32) {
	o.TierID = &v
}

func (o RateTierType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateTierType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndLOS) {
		toSerialize["endLOS"] = o.EndLOS
	}
	if !IsNil(o.StartLOS) {
		toSerialize["startLOS"] = o.StartLOS
	}
	if !IsNil(o.TierID) {
		toSerialize["tierID"] = o.TierID
	}
	return toSerialize, nil
}

type NullableRateTierType struct {
	value *RateTierType
	isSet bool
}

func (v NullableRateTierType) Get() *RateTierType {
	return v.value
}

func (v *NullableRateTierType) Set(val *RateTierType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateTierType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateTierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateTierType(val *RateTierType) *NullableRateTierType {
	return &NullableRateTierType{value: val, isSet: true}
}

func (v NullableRateTierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateTierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


