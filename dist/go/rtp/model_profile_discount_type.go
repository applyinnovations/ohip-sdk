/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the ProfileDiscountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDiscountType{}

// ProfileDiscountType Discount details for a profile.
type ProfileDiscountType struct {
	DateRangeDetails *TimeSpanDaysOfWeekType `json:"dateRangeDetails,omitempty"`
	DiscAmount *ProfileDiscountTypeDiscAmount `json:"discAmount,omitempty"`
	// URL that identifies the location associated with the record identified by the UniqueID.
	Url *string `json:"url,omitempty"`
	// A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
	Type *string `json:"type,omitempty"`
	// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
	Instance *string `json:"instance,omitempty"`
	// Used to identify the source of the identifier (e.g., IATA, ABTA).
	IdContext *string `json:"idContext,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Additional identifying value assigned by the creating system.
	IdExtension *int32 `json:"idExtension,omitempty"`
}

// NewProfileDiscountType instantiates a new ProfileDiscountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDiscountType() *ProfileDiscountType {
	this := ProfileDiscountType{}
	return &this
}

// NewProfileDiscountTypeWithDefaults instantiates a new ProfileDiscountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDiscountTypeWithDefaults() *ProfileDiscountType {
	this := ProfileDiscountType{}
	return &this
}

// GetDateRangeDetails returns the DateRangeDetails field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetDateRangeDetails() TimeSpanDaysOfWeekType {
	if o == nil || IsNil(o.DateRangeDetails) {
		var ret TimeSpanDaysOfWeekType
		return ret
	}
	return *o.DateRangeDetails
}

// GetDateRangeDetailsOk returns a tuple with the DateRangeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetDateRangeDetailsOk() (*TimeSpanDaysOfWeekType, bool) {
	if o == nil || IsNil(o.DateRangeDetails) {
		return nil, false
	}
	return o.DateRangeDetails, true
}

// HasDateRangeDetails returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasDateRangeDetails() bool {
	if o != nil && !IsNil(o.DateRangeDetails) {
		return true
	}

	return false
}

// SetDateRangeDetails gets a reference to the given TimeSpanDaysOfWeekType and assigns it to the DateRangeDetails field.
func (o *ProfileDiscountType) SetDateRangeDetails(v TimeSpanDaysOfWeekType) {
	o.DateRangeDetails = &v
}

// GetDiscAmount returns the DiscAmount field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetDiscAmount() ProfileDiscountTypeDiscAmount {
	if o == nil || IsNil(o.DiscAmount) {
		var ret ProfileDiscountTypeDiscAmount
		return ret
	}
	return *o.DiscAmount
}

// GetDiscAmountOk returns a tuple with the DiscAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetDiscAmountOk() (*ProfileDiscountTypeDiscAmount, bool) {
	if o == nil || IsNil(o.DiscAmount) {
		return nil, false
	}
	return o.DiscAmount, true
}

// HasDiscAmount returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasDiscAmount() bool {
	if o != nil && !IsNil(o.DiscAmount) {
		return true
	}

	return false
}

// SetDiscAmount gets a reference to the given ProfileDiscountTypeDiscAmount and assigns it to the DiscAmount field.
func (o *ProfileDiscountType) SetDiscAmount(v ProfileDiscountTypeDiscAmount) {
	o.DiscAmount = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ProfileDiscountType) SetUrl(v string) {
	o.Url = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProfileDiscountType) SetType(v string) {
	o.Type = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *ProfileDiscountType) SetInstance(v string) {
	o.Instance = &v
}

// GetIdContext returns the IdContext field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetIdContext() string {
	if o == nil || IsNil(o.IdContext) {
		var ret string
		return ret
	}
	return *o.IdContext
}

// GetIdContextOk returns a tuple with the IdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetIdContextOk() (*string, bool) {
	if o == nil || IsNil(o.IdContext) {
		return nil, false
	}
	return o.IdContext, true
}

// HasIdContext returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasIdContext() bool {
	if o != nil && !IsNil(o.IdContext) {
		return true
	}

	return false
}

// SetIdContext gets a reference to the given string and assigns it to the IdContext field.
func (o *ProfileDiscountType) SetIdContext(v string) {
	o.IdContext = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProfileDiscountType) SetId(v string) {
	o.Id = &v
}

// GetIdExtension returns the IdExtension field value if set, zero value otherwise.
func (o *ProfileDiscountType) GetIdExtension() int32 {
	if o == nil || IsNil(o.IdExtension) {
		var ret int32
		return ret
	}
	return *o.IdExtension
}

// GetIdExtensionOk returns a tuple with the IdExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDiscountType) GetIdExtensionOk() (*int32, bool) {
	if o == nil || IsNil(o.IdExtension) {
		return nil, false
	}
	return o.IdExtension, true
}

// HasIdExtension returns a boolean if a field has been set.
func (o *ProfileDiscountType) HasIdExtension() bool {
	if o != nil && !IsNil(o.IdExtension) {
		return true
	}

	return false
}

// SetIdExtension gets a reference to the given int32 and assigns it to the IdExtension field.
func (o *ProfileDiscountType) SetIdExtension(v int32) {
	o.IdExtension = &v
}

func (o ProfileDiscountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDiscountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateRangeDetails) {
		toSerialize["dateRangeDetails"] = o.DateRangeDetails
	}
	if !IsNil(o.DiscAmount) {
		toSerialize["discAmount"] = o.DiscAmount
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.IdContext) {
		toSerialize["idContext"] = o.IdContext
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdExtension) {
		toSerialize["idExtension"] = o.IdExtension
	}
	return toSerialize, nil
}

type NullableProfileDiscountType struct {
	value *ProfileDiscountType
	isSet bool
}

func (v NullableProfileDiscountType) Get() *ProfileDiscountType {
	return v.value
}

func (v *NullableProfileDiscountType) Set(val *ProfileDiscountType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDiscountType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDiscountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDiscountType(val *ProfileDiscountType) *NullableProfileDiscountType {
	return &NullableProfileDiscountType{value: val, isSet: true}
}

func (v NullableProfileDiscountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDiscountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


