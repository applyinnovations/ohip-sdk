/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanSellControlsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanSellControlsType{}

// RatePlanSellControlsType struct for RatePlanSellControlsType
type RatePlanSellControlsType struct {
	// Maximum number of days the guest has to book in advance to consume this rate plan code.
	MaximumAdvanceBooking *int32 `json:"maximumAdvanceBooking,omitempty"`
	// Maximum number of nights the guest has to stay to consume this rate plan code.
	MaximumLengthOfStay *int32 `json:"maximumLengthOfStay,omitempty"`
	// Maximum number of nights the guest has to stay through to consume this rate plan code.
	MaximumStayThrough *int32 `json:"maximumStayThrough,omitempty"`
	// Minimum number of days the guest has to book in advance to consume this rate plan code.
	MinimumAdvanceBooking *int32 `json:"minimumAdvanceBooking,omitempty"`
	// Minimum number of nights the guest has to stay to consume this rate plan code.
	MinimumLengthOfStay *int32 `json:"minimumLengthOfStay,omitempty"`
	// Minimum number of nights the guest has to stay through to consume this rate plan code.
	MinimumStayThrough *int32 `json:"minimumStayThrough,omitempty"`
}

// NewRatePlanSellControlsType instantiates a new RatePlanSellControlsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanSellControlsType() *RatePlanSellControlsType {
	this := RatePlanSellControlsType{}
	return &this
}

// NewRatePlanSellControlsTypeWithDefaults instantiates a new RatePlanSellControlsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanSellControlsTypeWithDefaults() *RatePlanSellControlsType {
	this := RatePlanSellControlsType{}
	return &this
}

// GetMaximumAdvanceBooking returns the MaximumAdvanceBooking field value if set, zero value otherwise.
func (o *RatePlanSellControlsType) GetMaximumAdvanceBooking() int32 {
	if o == nil || IsNil(o.MaximumAdvanceBooking) {
		var ret int32
		return ret
	}
	return *o.MaximumAdvanceBooking
}

// GetMaximumAdvanceBookingOk returns a tuple with the MaximumAdvanceBooking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSellControlsType) GetMaximumAdvanceBookingOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumAdvanceBooking) {
		return nil, false
	}
	return o.MaximumAdvanceBooking, true
}

// HasMaximumAdvanceBooking returns a boolean if a field has been set.
func (o *RatePlanSellControlsType) HasMaximumAdvanceBooking() bool {
	if o != nil && !IsNil(o.MaximumAdvanceBooking) {
		return true
	}

	return false
}

// SetMaximumAdvanceBooking gets a reference to the given int32 and assigns it to the MaximumAdvanceBooking field.
func (o *RatePlanSellControlsType) SetMaximumAdvanceBooking(v int32) {
	o.MaximumAdvanceBooking = &v
}

// GetMaximumLengthOfStay returns the MaximumLengthOfStay field value if set, zero value otherwise.
func (o *RatePlanSellControlsType) GetMaximumLengthOfStay() int32 {
	if o == nil || IsNil(o.MaximumLengthOfStay) {
		var ret int32
		return ret
	}
	return *o.MaximumLengthOfStay
}

// GetMaximumLengthOfStayOk returns a tuple with the MaximumLengthOfStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSellControlsType) GetMaximumLengthOfStayOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumLengthOfStay) {
		return nil, false
	}
	return o.MaximumLengthOfStay, true
}

// HasMaximumLengthOfStay returns a boolean if a field has been set.
func (o *RatePlanSellControlsType) HasMaximumLengthOfStay() bool {
	if o != nil && !IsNil(o.MaximumLengthOfStay) {
		return true
	}

	return false
}

// SetMaximumLengthOfStay gets a reference to the given int32 and assigns it to the MaximumLengthOfStay field.
func (o *RatePlanSellControlsType) SetMaximumLengthOfStay(v int32) {
	o.MaximumLengthOfStay = &v
}

// GetMaximumStayThrough returns the MaximumStayThrough field value if set, zero value otherwise.
func (o *RatePlanSellControlsType) GetMaximumStayThrough() int32 {
	if o == nil || IsNil(o.MaximumStayThrough) {
		var ret int32
		return ret
	}
	return *o.MaximumStayThrough
}

// GetMaximumStayThroughOk returns a tuple with the MaximumStayThrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSellControlsType) GetMaximumStayThroughOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumStayThrough) {
		return nil, false
	}
	return o.MaximumStayThrough, true
}

// HasMaximumStayThrough returns a boolean if a field has been set.
func (o *RatePlanSellControlsType) HasMaximumStayThrough() bool {
	if o != nil && !IsNil(o.MaximumStayThrough) {
		return true
	}

	return false
}

// SetMaximumStayThrough gets a reference to the given int32 and assigns it to the MaximumStayThrough field.
func (o *RatePlanSellControlsType) SetMaximumStayThrough(v int32) {
	o.MaximumStayThrough = &v
}

// GetMinimumAdvanceBooking returns the MinimumAdvanceBooking field value if set, zero value otherwise.
func (o *RatePlanSellControlsType) GetMinimumAdvanceBooking() int32 {
	if o == nil || IsNil(o.MinimumAdvanceBooking) {
		var ret int32
		return ret
	}
	return *o.MinimumAdvanceBooking
}

// GetMinimumAdvanceBookingOk returns a tuple with the MinimumAdvanceBooking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSellControlsType) GetMinimumAdvanceBookingOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumAdvanceBooking) {
		return nil, false
	}
	return o.MinimumAdvanceBooking, true
}

// HasMinimumAdvanceBooking returns a boolean if a field has been set.
func (o *RatePlanSellControlsType) HasMinimumAdvanceBooking() bool {
	if o != nil && !IsNil(o.MinimumAdvanceBooking) {
		return true
	}

	return false
}

// SetMinimumAdvanceBooking gets a reference to the given int32 and assigns it to the MinimumAdvanceBooking field.
func (o *RatePlanSellControlsType) SetMinimumAdvanceBooking(v int32) {
	o.MinimumAdvanceBooking = &v
}

// GetMinimumLengthOfStay returns the MinimumLengthOfStay field value if set, zero value otherwise.
func (o *RatePlanSellControlsType) GetMinimumLengthOfStay() int32 {
	if o == nil || IsNil(o.MinimumLengthOfStay) {
		var ret int32
		return ret
	}
	return *o.MinimumLengthOfStay
}

// GetMinimumLengthOfStayOk returns a tuple with the MinimumLengthOfStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSellControlsType) GetMinimumLengthOfStayOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumLengthOfStay) {
		return nil, false
	}
	return o.MinimumLengthOfStay, true
}

// HasMinimumLengthOfStay returns a boolean if a field has been set.
func (o *RatePlanSellControlsType) HasMinimumLengthOfStay() bool {
	if o != nil && !IsNil(o.MinimumLengthOfStay) {
		return true
	}

	return false
}

// SetMinimumLengthOfStay gets a reference to the given int32 and assigns it to the MinimumLengthOfStay field.
func (o *RatePlanSellControlsType) SetMinimumLengthOfStay(v int32) {
	o.MinimumLengthOfStay = &v
}

// GetMinimumStayThrough returns the MinimumStayThrough field value if set, zero value otherwise.
func (o *RatePlanSellControlsType) GetMinimumStayThrough() int32 {
	if o == nil || IsNil(o.MinimumStayThrough) {
		var ret int32
		return ret
	}
	return *o.MinimumStayThrough
}

// GetMinimumStayThroughOk returns a tuple with the MinimumStayThrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanSellControlsType) GetMinimumStayThroughOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumStayThrough) {
		return nil, false
	}
	return o.MinimumStayThrough, true
}

// HasMinimumStayThrough returns a boolean if a field has been set.
func (o *RatePlanSellControlsType) HasMinimumStayThrough() bool {
	if o != nil && !IsNil(o.MinimumStayThrough) {
		return true
	}

	return false
}

// SetMinimumStayThrough gets a reference to the given int32 and assigns it to the MinimumStayThrough field.
func (o *RatePlanSellControlsType) SetMinimumStayThrough(v int32) {
	o.MinimumStayThrough = &v
}

func (o RatePlanSellControlsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanSellControlsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaximumAdvanceBooking) {
		toSerialize["maximumAdvanceBooking"] = o.MaximumAdvanceBooking
	}
	if !IsNil(o.MaximumLengthOfStay) {
		toSerialize["maximumLengthOfStay"] = o.MaximumLengthOfStay
	}
	if !IsNil(o.MaximumStayThrough) {
		toSerialize["maximumStayThrough"] = o.MaximumStayThrough
	}
	if !IsNil(o.MinimumAdvanceBooking) {
		toSerialize["minimumAdvanceBooking"] = o.MinimumAdvanceBooking
	}
	if !IsNil(o.MinimumLengthOfStay) {
		toSerialize["minimumLengthOfStay"] = o.MinimumLengthOfStay
	}
	if !IsNil(o.MinimumStayThrough) {
		toSerialize["minimumStayThrough"] = o.MinimumStayThrough
	}
	return toSerialize, nil
}

type NullableRatePlanSellControlsType struct {
	value *RatePlanSellControlsType
	isSet bool
}

func (v NullableRatePlanSellControlsType) Get() *RatePlanSellControlsType {
	return v.value
}

func (v *NullableRatePlanSellControlsType) Set(val *RatePlanSellControlsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanSellControlsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanSellControlsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanSellControlsType(val *RatePlanSellControlsType) *NullableRatePlanSellControlsType {
	return &NullableRatePlanSellControlsType{value: val, isSet: true}
}

func (v NullableRatePlanSellControlsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanSellControlsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


