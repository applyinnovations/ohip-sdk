/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the NegotiatedProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegotiatedProfileType{}

// NegotiatedProfileType Profile details
type NegotiatedProfileType struct {
	// External system code selected to allow changes from external system.
	ExternalSystemCode *string `json:"externalSystemCode,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ProfileIdList []UniqueIDType `json:"profileIdList,omitempty"`
	ProfileName *ProfileNameType `json:"profileName,omitempty"`
	ProfileType *ProfileTypeType `json:"profileType,omitempty"`
	// collection of Negotiated rates.
	RateInfoList []NegRateAccessType `json:"rateInfoList,omitempty"`
}

// NewNegotiatedProfileType instantiates a new NegotiatedProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegotiatedProfileType() *NegotiatedProfileType {
	this := NegotiatedProfileType{}
	return &this
}

// NewNegotiatedProfileTypeWithDefaults instantiates a new NegotiatedProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegotiatedProfileTypeWithDefaults() *NegotiatedProfileType {
	this := NegotiatedProfileType{}
	return &this
}

// GetExternalSystemCode returns the ExternalSystemCode field value if set, zero value otherwise.
func (o *NegotiatedProfileType) GetExternalSystemCode() string {
	if o == nil || IsNil(o.ExternalSystemCode) {
		var ret string
		return ret
	}
	return *o.ExternalSystemCode
}

// GetExternalSystemCodeOk returns a tuple with the ExternalSystemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiatedProfileType) GetExternalSystemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalSystemCode) {
		return nil, false
	}
	return o.ExternalSystemCode, true
}

// HasExternalSystemCode returns a boolean if a field has been set.
func (o *NegotiatedProfileType) HasExternalSystemCode() bool {
	if o != nil && !IsNil(o.ExternalSystemCode) {
		return true
	}

	return false
}

// SetExternalSystemCode gets a reference to the given string and assigns it to the ExternalSystemCode field.
func (o *NegotiatedProfileType) SetExternalSystemCode(v string) {
	o.ExternalSystemCode = &v
}

// GetProfileIdList returns the ProfileIdList field value if set, zero value otherwise.
func (o *NegotiatedProfileType) GetProfileIdList() []UniqueIDType {
	if o == nil || IsNil(o.ProfileIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ProfileIdList
}

// GetProfileIdListOk returns a tuple with the ProfileIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiatedProfileType) GetProfileIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ProfileIdList) {
		return nil, false
	}
	return o.ProfileIdList, true
}

// HasProfileIdList returns a boolean if a field has been set.
func (o *NegotiatedProfileType) HasProfileIdList() bool {
	if o != nil && !IsNil(o.ProfileIdList) {
		return true
	}

	return false
}

// SetProfileIdList gets a reference to the given []UniqueIDType and assigns it to the ProfileIdList field.
func (o *NegotiatedProfileType) SetProfileIdList(v []UniqueIDType) {
	o.ProfileIdList = v
}

// GetProfileName returns the ProfileName field value if set, zero value otherwise.
func (o *NegotiatedProfileType) GetProfileName() ProfileNameType {
	if o == nil || IsNil(o.ProfileName) {
		var ret ProfileNameType
		return ret
	}
	return *o.ProfileName
}

// GetProfileNameOk returns a tuple with the ProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiatedProfileType) GetProfileNameOk() (*ProfileNameType, bool) {
	if o == nil || IsNil(o.ProfileName) {
		return nil, false
	}
	return o.ProfileName, true
}

// HasProfileName returns a boolean if a field has been set.
func (o *NegotiatedProfileType) HasProfileName() bool {
	if o != nil && !IsNil(o.ProfileName) {
		return true
	}

	return false
}

// SetProfileName gets a reference to the given ProfileNameType and assigns it to the ProfileName field.
func (o *NegotiatedProfileType) SetProfileName(v ProfileNameType) {
	o.ProfileName = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *NegotiatedProfileType) GetProfileType() ProfileTypeType {
	if o == nil || IsNil(o.ProfileType) {
		var ret ProfileTypeType
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiatedProfileType) GetProfileTypeOk() (*ProfileTypeType, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *NegotiatedProfileType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given ProfileTypeType and assigns it to the ProfileType field.
func (o *NegotiatedProfileType) SetProfileType(v ProfileTypeType) {
	o.ProfileType = &v
}

// GetRateInfoList returns the RateInfoList field value if set, zero value otherwise.
func (o *NegotiatedProfileType) GetRateInfoList() []NegRateAccessType {
	if o == nil || IsNil(o.RateInfoList) {
		var ret []NegRateAccessType
		return ret
	}
	return o.RateInfoList
}

// GetRateInfoListOk returns a tuple with the RateInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegotiatedProfileType) GetRateInfoListOk() ([]NegRateAccessType, bool) {
	if o == nil || IsNil(o.RateInfoList) {
		return nil, false
	}
	return o.RateInfoList, true
}

// HasRateInfoList returns a boolean if a field has been set.
func (o *NegotiatedProfileType) HasRateInfoList() bool {
	if o != nil && !IsNil(o.RateInfoList) {
		return true
	}

	return false
}

// SetRateInfoList gets a reference to the given []NegRateAccessType and assigns it to the RateInfoList field.
func (o *NegotiatedProfileType) SetRateInfoList(v []NegRateAccessType) {
	o.RateInfoList = v
}

func (o NegotiatedProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegotiatedProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalSystemCode) {
		toSerialize["externalSystemCode"] = o.ExternalSystemCode
	}
	if !IsNil(o.ProfileIdList) {
		toSerialize["profileIdList"] = o.ProfileIdList
	}
	if !IsNil(o.ProfileName) {
		toSerialize["profileName"] = o.ProfileName
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	if !IsNil(o.RateInfoList) {
		toSerialize["rateInfoList"] = o.RateInfoList
	}
	return toSerialize, nil
}

type NullableNegotiatedProfileType struct {
	value *NegotiatedProfileType
	isSet bool
}

func (v NullableNegotiatedProfileType) Get() *NegotiatedProfileType {
	return v.value
}

func (v *NullableNegotiatedProfileType) Set(val *NegotiatedProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableNegotiatedProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableNegotiatedProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegotiatedProfileType(val *NegotiatedProfileType) *NullableNegotiatedProfileType {
	return &NullableNegotiatedProfileType{value: val, isSet: true}
}

func (v NullableNegotiatedProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegotiatedProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


