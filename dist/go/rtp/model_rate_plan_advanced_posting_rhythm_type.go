/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanAdvancedPostingRhythmType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanAdvancedPostingRhythmType{}

// RatePlanAdvancedPostingRhythmType Posting rhythm details for a rate plan containing Buy x Get y functionality.
type RatePlanAdvancedPostingRhythmType struct {
	// Code identifying the posting rhythm within the rate plan.
	Code *string `json:"code,omitempty"`
	// Description of the posting rhythm offer.
	Description *string `json:"description,omitempty"`
	// Date which the posting rhythm becomes applicable.
	BeginSellDate *string `json:"beginSellDate,omitempty"`
	// Date which the posting rhythm ceases to be applicable.
	EndSellDate *string `json:"endSellDate,omitempty"`
	// The number of nights which are required to be paid in order to receive free nights.
	RequiredPaidNights *int32 `json:"requiredPaidNights,omitempty"`
	// The number of free nights which are eligible when the number of required paid nights has been met.
	EligibleFreeNights *int32 `json:"eligibleFreeNights,omitempty"`
	// Indicates if the posting rhythm offer can be repeated more than once during the entire stay.
	RepeatWithinStay *bool `json:"repeatWithinStay,omitempty"`
	// Indicates if the posting rhythm offer can be repeated more than once within a specific sell segment of the reservation.
	RepeatWithinSellSegment *bool `json:"repeatWithinSellSegment,omitempty"`
}

// NewRatePlanAdvancedPostingRhythmType instantiates a new RatePlanAdvancedPostingRhythmType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanAdvancedPostingRhythmType() *RatePlanAdvancedPostingRhythmType {
	this := RatePlanAdvancedPostingRhythmType{}
	return &this
}

// NewRatePlanAdvancedPostingRhythmTypeWithDefaults instantiates a new RatePlanAdvancedPostingRhythmType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanAdvancedPostingRhythmTypeWithDefaults() *RatePlanAdvancedPostingRhythmType {
	this := RatePlanAdvancedPostingRhythmType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RatePlanAdvancedPostingRhythmType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RatePlanAdvancedPostingRhythmType) SetDescription(v string) {
	o.Description = &v
}

// GetBeginSellDate returns the BeginSellDate field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetBeginSellDate() string {
	if o == nil || IsNil(o.BeginSellDate) {
		var ret string
		return ret
	}
	return *o.BeginSellDate
}

// GetBeginSellDateOk returns a tuple with the BeginSellDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetBeginSellDateOk() (*string, bool) {
	if o == nil || IsNil(o.BeginSellDate) {
		return nil, false
	}
	return o.BeginSellDate, true
}

// HasBeginSellDate returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasBeginSellDate() bool {
	if o != nil && !IsNil(o.BeginSellDate) {
		return true
	}

	return false
}

// SetBeginSellDate gets a reference to the given string and assigns it to the BeginSellDate field.
func (o *RatePlanAdvancedPostingRhythmType) SetBeginSellDate(v string) {
	o.BeginSellDate = &v
}

// GetEndSellDate returns the EndSellDate field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetEndSellDate() string {
	if o == nil || IsNil(o.EndSellDate) {
		var ret string
		return ret
	}
	return *o.EndSellDate
}

// GetEndSellDateOk returns a tuple with the EndSellDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetEndSellDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndSellDate) {
		return nil, false
	}
	return o.EndSellDate, true
}

// HasEndSellDate returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasEndSellDate() bool {
	if o != nil && !IsNil(o.EndSellDate) {
		return true
	}

	return false
}

// SetEndSellDate gets a reference to the given string and assigns it to the EndSellDate field.
func (o *RatePlanAdvancedPostingRhythmType) SetEndSellDate(v string) {
	o.EndSellDate = &v
}

// GetRequiredPaidNights returns the RequiredPaidNights field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetRequiredPaidNights() int32 {
	if o == nil || IsNil(o.RequiredPaidNights) {
		var ret int32
		return ret
	}
	return *o.RequiredPaidNights
}

// GetRequiredPaidNightsOk returns a tuple with the RequiredPaidNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetRequiredPaidNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.RequiredPaidNights) {
		return nil, false
	}
	return o.RequiredPaidNights, true
}

// HasRequiredPaidNights returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasRequiredPaidNights() bool {
	if o != nil && !IsNil(o.RequiredPaidNights) {
		return true
	}

	return false
}

// SetRequiredPaidNights gets a reference to the given int32 and assigns it to the RequiredPaidNights field.
func (o *RatePlanAdvancedPostingRhythmType) SetRequiredPaidNights(v int32) {
	o.RequiredPaidNights = &v
}

// GetEligibleFreeNights returns the EligibleFreeNights field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetEligibleFreeNights() int32 {
	if o == nil || IsNil(o.EligibleFreeNights) {
		var ret int32
		return ret
	}
	return *o.EligibleFreeNights
}

// GetEligibleFreeNightsOk returns a tuple with the EligibleFreeNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetEligibleFreeNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.EligibleFreeNights) {
		return nil, false
	}
	return o.EligibleFreeNights, true
}

// HasEligibleFreeNights returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasEligibleFreeNights() bool {
	if o != nil && !IsNil(o.EligibleFreeNights) {
		return true
	}

	return false
}

// SetEligibleFreeNights gets a reference to the given int32 and assigns it to the EligibleFreeNights field.
func (o *RatePlanAdvancedPostingRhythmType) SetEligibleFreeNights(v int32) {
	o.EligibleFreeNights = &v
}

// GetRepeatWithinStay returns the RepeatWithinStay field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetRepeatWithinStay() bool {
	if o == nil || IsNil(o.RepeatWithinStay) {
		var ret bool
		return ret
	}
	return *o.RepeatWithinStay
}

// GetRepeatWithinStayOk returns a tuple with the RepeatWithinStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetRepeatWithinStayOk() (*bool, bool) {
	if o == nil || IsNil(o.RepeatWithinStay) {
		return nil, false
	}
	return o.RepeatWithinStay, true
}

// HasRepeatWithinStay returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasRepeatWithinStay() bool {
	if o != nil && !IsNil(o.RepeatWithinStay) {
		return true
	}

	return false
}

// SetRepeatWithinStay gets a reference to the given bool and assigns it to the RepeatWithinStay field.
func (o *RatePlanAdvancedPostingRhythmType) SetRepeatWithinStay(v bool) {
	o.RepeatWithinStay = &v
}

// GetRepeatWithinSellSegment returns the RepeatWithinSellSegment field value if set, zero value otherwise.
func (o *RatePlanAdvancedPostingRhythmType) GetRepeatWithinSellSegment() bool {
	if o == nil || IsNil(o.RepeatWithinSellSegment) {
		var ret bool
		return ret
	}
	return *o.RepeatWithinSellSegment
}

// GetRepeatWithinSellSegmentOk returns a tuple with the RepeatWithinSellSegment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanAdvancedPostingRhythmType) GetRepeatWithinSellSegmentOk() (*bool, bool) {
	if o == nil || IsNil(o.RepeatWithinSellSegment) {
		return nil, false
	}
	return o.RepeatWithinSellSegment, true
}

// HasRepeatWithinSellSegment returns a boolean if a field has been set.
func (o *RatePlanAdvancedPostingRhythmType) HasRepeatWithinSellSegment() bool {
	if o != nil && !IsNil(o.RepeatWithinSellSegment) {
		return true
	}

	return false
}

// SetRepeatWithinSellSegment gets a reference to the given bool and assigns it to the RepeatWithinSellSegment field.
func (o *RatePlanAdvancedPostingRhythmType) SetRepeatWithinSellSegment(v bool) {
	o.RepeatWithinSellSegment = &v
}

func (o RatePlanAdvancedPostingRhythmType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanAdvancedPostingRhythmType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.BeginSellDate) {
		toSerialize["beginSellDate"] = o.BeginSellDate
	}
	if !IsNil(o.EndSellDate) {
		toSerialize["endSellDate"] = o.EndSellDate
	}
	if !IsNil(o.RequiredPaidNights) {
		toSerialize["requiredPaidNights"] = o.RequiredPaidNights
	}
	if !IsNil(o.EligibleFreeNights) {
		toSerialize["eligibleFreeNights"] = o.EligibleFreeNights
	}
	if !IsNil(o.RepeatWithinStay) {
		toSerialize["repeatWithinStay"] = o.RepeatWithinStay
	}
	if !IsNil(o.RepeatWithinSellSegment) {
		toSerialize["repeatWithinSellSegment"] = o.RepeatWithinSellSegment
	}
	return toSerialize, nil
}

type NullableRatePlanAdvancedPostingRhythmType struct {
	value *RatePlanAdvancedPostingRhythmType
	isSet bool
}

func (v NullableRatePlanAdvancedPostingRhythmType) Get() *RatePlanAdvancedPostingRhythmType {
	return v.value
}

func (v *NullableRatePlanAdvancedPostingRhythmType) Set(val *RatePlanAdvancedPostingRhythmType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanAdvancedPostingRhythmType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanAdvancedPostingRhythmType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanAdvancedPostingRhythmType(val *RatePlanAdvancedPostingRhythmType) *NullableRatePlanAdvancedPostingRhythmType {
	return &NullableRatePlanAdvancedPostingRhythmType{value: val, isSet: true}
}

func (v NullableRatePlanAdvancedPostingRhythmType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanAdvancedPostingRhythmType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


