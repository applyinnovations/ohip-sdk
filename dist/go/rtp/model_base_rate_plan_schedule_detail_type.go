/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the BaseRatePlanScheduleDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseRatePlanScheduleDetailType{}

// BaseRatePlanScheduleDetailType struct for BaseRatePlanScheduleDetailType
type BaseRatePlanScheduleDetailType struct {
	RateAmounts *ScheduleRateAmountsType `json:"rateAmounts,omitempty"`
	AdvancedBaseRateOffset *AdvancedBaseRateOffsetType `json:"advancedBaseRateOffset,omitempty"`
	RateAmountBoundaries *RateAmountBoundariesType `json:"rateAmountBoundaries,omitempty"`
	Classifications *RatePlanScheduleClassificationsType `json:"classifications,omitempty"`
	OccupantThresholdPricing *OccupantThresholdPricingType `json:"occupantThresholdPricing,omitempty"`
	// The list of adjustment codes for the rate plan schedule.
	AdjustmentDetails []AdjustmentDetailType `json:"adjustmentDetails,omitempty"`
	RateSchedulePackages *RatePackagesType `json:"rateSchedulePackages,omitempty"`
	TierID *int32 `json:"tierID,omitempty"`
	// Season code attached to the rate plan schedule that defines the start and end dates. When creating a rate plan schedule, if a season code is provided the start and end dates will be ignored. These values will be pulled from the season code record.
	SeasonCode *string `json:"seasonCode,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
}

// NewBaseRatePlanScheduleDetailType instantiates a new BaseRatePlanScheduleDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseRatePlanScheduleDetailType() *BaseRatePlanScheduleDetailType {
	this := BaseRatePlanScheduleDetailType{}
	return &this
}

// NewBaseRatePlanScheduleDetailTypeWithDefaults instantiates a new BaseRatePlanScheduleDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseRatePlanScheduleDetailTypeWithDefaults() *BaseRatePlanScheduleDetailType {
	this := BaseRatePlanScheduleDetailType{}
	return &this
}

// GetRateAmounts returns the RateAmounts field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetRateAmounts() ScheduleRateAmountsType {
	if o == nil || IsNil(o.RateAmounts) {
		var ret ScheduleRateAmountsType
		return ret
	}
	return *o.RateAmounts
}

// GetRateAmountsOk returns a tuple with the RateAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetRateAmountsOk() (*ScheduleRateAmountsType, bool) {
	if o == nil || IsNil(o.RateAmounts) {
		return nil, false
	}
	return o.RateAmounts, true
}

// HasRateAmounts returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasRateAmounts() bool {
	if o != nil && !IsNil(o.RateAmounts) {
		return true
	}

	return false
}

// SetRateAmounts gets a reference to the given ScheduleRateAmountsType and assigns it to the RateAmounts field.
func (o *BaseRatePlanScheduleDetailType) SetRateAmounts(v ScheduleRateAmountsType) {
	o.RateAmounts = &v
}

// GetAdvancedBaseRateOffset returns the AdvancedBaseRateOffset field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetAdvancedBaseRateOffset() AdvancedBaseRateOffsetType {
	if o == nil || IsNil(o.AdvancedBaseRateOffset) {
		var ret AdvancedBaseRateOffsetType
		return ret
	}
	return *o.AdvancedBaseRateOffset
}

// GetAdvancedBaseRateOffsetOk returns a tuple with the AdvancedBaseRateOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetAdvancedBaseRateOffsetOk() (*AdvancedBaseRateOffsetType, bool) {
	if o == nil || IsNil(o.AdvancedBaseRateOffset) {
		return nil, false
	}
	return o.AdvancedBaseRateOffset, true
}

// HasAdvancedBaseRateOffset returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasAdvancedBaseRateOffset() bool {
	if o != nil && !IsNil(o.AdvancedBaseRateOffset) {
		return true
	}

	return false
}

// SetAdvancedBaseRateOffset gets a reference to the given AdvancedBaseRateOffsetType and assigns it to the AdvancedBaseRateOffset field.
func (o *BaseRatePlanScheduleDetailType) SetAdvancedBaseRateOffset(v AdvancedBaseRateOffsetType) {
	o.AdvancedBaseRateOffset = &v
}

// GetRateAmountBoundaries returns the RateAmountBoundaries field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetRateAmountBoundaries() RateAmountBoundariesType {
	if o == nil || IsNil(o.RateAmountBoundaries) {
		var ret RateAmountBoundariesType
		return ret
	}
	return *o.RateAmountBoundaries
}

// GetRateAmountBoundariesOk returns a tuple with the RateAmountBoundaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetRateAmountBoundariesOk() (*RateAmountBoundariesType, bool) {
	if o == nil || IsNil(o.RateAmountBoundaries) {
		return nil, false
	}
	return o.RateAmountBoundaries, true
}

// HasRateAmountBoundaries returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasRateAmountBoundaries() bool {
	if o != nil && !IsNil(o.RateAmountBoundaries) {
		return true
	}

	return false
}

// SetRateAmountBoundaries gets a reference to the given RateAmountBoundariesType and assigns it to the RateAmountBoundaries field.
func (o *BaseRatePlanScheduleDetailType) SetRateAmountBoundaries(v RateAmountBoundariesType) {
	o.RateAmountBoundaries = &v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetClassifications() RatePlanScheduleClassificationsType {
	if o == nil || IsNil(o.Classifications) {
		var ret RatePlanScheduleClassificationsType
		return ret
	}
	return *o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetClassificationsOk() (*RatePlanScheduleClassificationsType, bool) {
	if o == nil || IsNil(o.Classifications) {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasClassifications() bool {
	if o != nil && !IsNil(o.Classifications) {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given RatePlanScheduleClassificationsType and assigns it to the Classifications field.
func (o *BaseRatePlanScheduleDetailType) SetClassifications(v RatePlanScheduleClassificationsType) {
	o.Classifications = &v
}

// GetOccupantThresholdPricing returns the OccupantThresholdPricing field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetOccupantThresholdPricing() OccupantThresholdPricingType {
	if o == nil || IsNil(o.OccupantThresholdPricing) {
		var ret OccupantThresholdPricingType
		return ret
	}
	return *o.OccupantThresholdPricing
}

// GetOccupantThresholdPricingOk returns a tuple with the OccupantThresholdPricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetOccupantThresholdPricingOk() (*OccupantThresholdPricingType, bool) {
	if o == nil || IsNil(o.OccupantThresholdPricing) {
		return nil, false
	}
	return o.OccupantThresholdPricing, true
}

// HasOccupantThresholdPricing returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasOccupantThresholdPricing() bool {
	if o != nil && !IsNil(o.OccupantThresholdPricing) {
		return true
	}

	return false
}

// SetOccupantThresholdPricing gets a reference to the given OccupantThresholdPricingType and assigns it to the OccupantThresholdPricing field.
func (o *BaseRatePlanScheduleDetailType) SetOccupantThresholdPricing(v OccupantThresholdPricingType) {
	o.OccupantThresholdPricing = &v
}

// GetAdjustmentDetails returns the AdjustmentDetails field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetAdjustmentDetails() []AdjustmentDetailType {
	if o == nil || IsNil(o.AdjustmentDetails) {
		var ret []AdjustmentDetailType
		return ret
	}
	return o.AdjustmentDetails
}

// GetAdjustmentDetailsOk returns a tuple with the AdjustmentDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetAdjustmentDetailsOk() ([]AdjustmentDetailType, bool) {
	if o == nil || IsNil(o.AdjustmentDetails) {
		return nil, false
	}
	return o.AdjustmentDetails, true
}

// HasAdjustmentDetails returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasAdjustmentDetails() bool {
	if o != nil && !IsNil(o.AdjustmentDetails) {
		return true
	}

	return false
}

// SetAdjustmentDetails gets a reference to the given []AdjustmentDetailType and assigns it to the AdjustmentDetails field.
func (o *BaseRatePlanScheduleDetailType) SetAdjustmentDetails(v []AdjustmentDetailType) {
	o.AdjustmentDetails = v
}

// GetRateSchedulePackages returns the RateSchedulePackages field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetRateSchedulePackages() RatePackagesType {
	if o == nil || IsNil(o.RateSchedulePackages) {
		var ret RatePackagesType
		return ret
	}
	return *o.RateSchedulePackages
}

// GetRateSchedulePackagesOk returns a tuple with the RateSchedulePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetRateSchedulePackagesOk() (*RatePackagesType, bool) {
	if o == nil || IsNil(o.RateSchedulePackages) {
		return nil, false
	}
	return o.RateSchedulePackages, true
}

// HasRateSchedulePackages returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasRateSchedulePackages() bool {
	if o != nil && !IsNil(o.RateSchedulePackages) {
		return true
	}

	return false
}

// SetRateSchedulePackages gets a reference to the given RatePackagesType and assigns it to the RateSchedulePackages field.
func (o *BaseRatePlanScheduleDetailType) SetRateSchedulePackages(v RatePackagesType) {
	o.RateSchedulePackages = &v
}

// GetTierID returns the TierID field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetTierID() int32 {
	if o == nil || IsNil(o.TierID) {
		var ret int32
		return ret
	}
	return *o.TierID
}

// GetTierIDOk returns a tuple with the TierID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetTierIDOk() (*int32, bool) {
	if o == nil || IsNil(o.TierID) {
		return nil, false
	}
	return o.TierID, true
}

// HasTierID returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasTierID() bool {
	if o != nil && !IsNil(o.TierID) {
		return true
	}

	return false
}

// SetTierID gets a reference to the given int32 and assigns it to the TierID field.
func (o *BaseRatePlanScheduleDetailType) SetTierID(v int32) {
	o.TierID = &v
}

// GetSeasonCode returns the SeasonCode field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetSeasonCode() string {
	if o == nil || IsNil(o.SeasonCode) {
		var ret string
		return ret
	}
	return *o.SeasonCode
}

// GetSeasonCodeOk returns a tuple with the SeasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetSeasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonCode) {
		return nil, false
	}
	return o.SeasonCode, true
}

// HasSeasonCode returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasSeasonCode() bool {
	if o != nil && !IsNil(o.SeasonCode) {
		return true
	}

	return false
}

// SetSeasonCode gets a reference to the given string and assigns it to the SeasonCode field.
func (o *BaseRatePlanScheduleDetailType) SetSeasonCode(v string) {
	o.SeasonCode = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *BaseRatePlanScheduleDetailType) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *BaseRatePlanScheduleDetailType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseRatePlanScheduleDetailType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *BaseRatePlanScheduleDetailType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *BaseRatePlanScheduleDetailType) SetEnd(v string) {
	o.End = &v
}

func (o BaseRatePlanScheduleDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseRatePlanScheduleDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RateAmounts) {
		toSerialize["rateAmounts"] = o.RateAmounts
	}
	if !IsNil(o.AdvancedBaseRateOffset) {
		toSerialize["advancedBaseRateOffset"] = o.AdvancedBaseRateOffset
	}
	if !IsNil(o.RateAmountBoundaries) {
		toSerialize["rateAmountBoundaries"] = o.RateAmountBoundaries
	}
	if !IsNil(o.Classifications) {
		toSerialize["classifications"] = o.Classifications
	}
	if !IsNil(o.OccupantThresholdPricing) {
		toSerialize["occupantThresholdPricing"] = o.OccupantThresholdPricing
	}
	if !IsNil(o.AdjustmentDetails) {
		toSerialize["adjustmentDetails"] = o.AdjustmentDetails
	}
	if !IsNil(o.RateSchedulePackages) {
		toSerialize["rateSchedulePackages"] = o.RateSchedulePackages
	}
	if !IsNil(o.TierID) {
		toSerialize["tierID"] = o.TierID
	}
	if !IsNil(o.SeasonCode) {
		toSerialize["seasonCode"] = o.SeasonCode
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableBaseRatePlanScheduleDetailType struct {
	value *BaseRatePlanScheduleDetailType
	isSet bool
}

func (v NullableBaseRatePlanScheduleDetailType) Get() *BaseRatePlanScheduleDetailType {
	return v.value
}

func (v *NullableBaseRatePlanScheduleDetailType) Set(val *BaseRatePlanScheduleDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseRatePlanScheduleDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseRatePlanScheduleDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseRatePlanScheduleDetailType(val *BaseRatePlanScheduleDetailType) *NullableBaseRatePlanScheduleDetailType {
	return &NullableBaseRatePlanScheduleDetailType{value: val, isSet: true}
}

func (v NullableBaseRatePlanScheduleDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseRatePlanScheduleDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


