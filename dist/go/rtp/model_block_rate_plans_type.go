/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the BlockRatePlansType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRatePlansType{}

// BlockRatePlansType Description of rate codes for the block and their information.
type BlockRatePlansType struct {
	// Block rate plan code information.
	BlockRatePlan []BlockRatePlanType `json:"blockRatePlan,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
}

// NewBlockRatePlansType instantiates a new BlockRatePlansType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRatePlansType() *BlockRatePlansType {
	this := BlockRatePlansType{}
	return &this
}

// NewBlockRatePlansTypeWithDefaults instantiates a new BlockRatePlansType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRatePlansTypeWithDefaults() *BlockRatePlansType {
	this := BlockRatePlansType{}
	return &this
}

// GetBlockRatePlan returns the BlockRatePlan field value if set, zero value otherwise.
func (o *BlockRatePlansType) GetBlockRatePlan() []BlockRatePlanType {
	if o == nil || IsNil(o.BlockRatePlan) {
		var ret []BlockRatePlanType
		return ret
	}
	return o.BlockRatePlan
}

// GetBlockRatePlanOk returns a tuple with the BlockRatePlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRatePlansType) GetBlockRatePlanOk() ([]BlockRatePlanType, bool) {
	if o == nil || IsNil(o.BlockRatePlan) {
		return nil, false
	}
	return o.BlockRatePlan, true
}

// HasBlockRatePlan returns a boolean if a field has been set.
func (o *BlockRatePlansType) HasBlockRatePlan() bool {
	if o != nil && !IsNil(o.BlockRatePlan) {
		return true
	}

	return false
}

// SetBlockRatePlan gets a reference to the given []BlockRatePlanType and assigns it to the BlockRatePlan field.
func (o *BlockRatePlansType) SetBlockRatePlan(v []BlockRatePlanType) {
	o.BlockRatePlan = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockRatePlansType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRatePlansType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockRatePlansType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockRatePlansType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o BlockRatePlansType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRatePlansType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockRatePlan) {
		toSerialize["blockRatePlan"] = o.BlockRatePlan
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableBlockRatePlansType struct {
	value *BlockRatePlansType
	isSet bool
}

func (v NullableBlockRatePlansType) Get() *BlockRatePlansType {
	return v.value
}

func (v *NullableBlockRatePlansType) Set(val *BlockRatePlansType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRatePlansType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRatePlansType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRatePlansType(val *BlockRatePlansType) *NullableBlockRatePlansType {
	return &NullableBlockRatePlansType{value: val, isSet: true}
}

func (v NullableBlockRatePlansType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRatePlansType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


