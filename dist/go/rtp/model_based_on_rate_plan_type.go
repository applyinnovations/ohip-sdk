/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// BasedOnRatePlanType None means that rate is a standard rate. If sent in the changeRatePlan operation will delete any Based on Rate Plan Type.
type BasedOnRatePlanType string

// List of basedOnRatePlanType
const (
	BASEDONRATEPLANTYPE_BASE_RATE BasedOnRatePlanType = "BaseRate"
	BASEDONRATEPLANTYPE_DYNAMIC_BASE_RATE BasedOnRatePlanType = "DynamicBaseRate"
	BASEDONRATEPLANTYPE_BAR_BASED_RATE BasedOnRatePlanType = "BARBasedRate"
	BASEDONRATEPLANTYPE_ADVANCED_DYNAMIC_BASE_RATE BasedOnRatePlanType = "AdvancedDynamicBaseRate"
	BASEDONRATEPLANTYPE_NONE BasedOnRatePlanType = "None"
)

// All allowed values of BasedOnRatePlanType enum
var AllowedBasedOnRatePlanTypeEnumValues = []BasedOnRatePlanType{
	"BaseRate",
	"DynamicBaseRate",
	"BARBasedRate",
	"AdvancedDynamicBaseRate",
	"None",
}

func (v *BasedOnRatePlanType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BasedOnRatePlanType(value)
	for _, existing := range AllowedBasedOnRatePlanTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BasedOnRatePlanType", value)
}

// NewBasedOnRatePlanTypeFromValue returns a pointer to a valid BasedOnRatePlanType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBasedOnRatePlanTypeFromValue(v string) (*BasedOnRatePlanType, error) {
	ev := BasedOnRatePlanType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BasedOnRatePlanType: valid values are %v", v, AllowedBasedOnRatePlanTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BasedOnRatePlanType) IsValid() bool {
	for _, existing := range AllowedBasedOnRatePlanTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to basedOnRatePlanType value
func (v BasedOnRatePlanType) Ptr() *BasedOnRatePlanType {
	return &v
}

type NullableBasedOnRatePlanType struct {
	value *BasedOnRatePlanType
	isSet bool
}

func (v NullableBasedOnRatePlanType) Get() *BasedOnRatePlanType {
	return v.value
}

func (v *NullableBasedOnRatePlanType) Set(val *BasedOnRatePlanType) {
	v.value = val
	v.isSet = true
}

func (v NullableBasedOnRatePlanType) IsSet() bool {
	return v.isSet
}

func (v *NullableBasedOnRatePlanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasedOnRatePlanType(val *BasedOnRatePlanType) *NullableBasedOnRatePlanType {
	return &NullableBasedOnRatePlanType{value: val, isSet: true}
}

func (v NullableBasedOnRatePlanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasedOnRatePlanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

