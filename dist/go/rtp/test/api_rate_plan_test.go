/*
OPERA Cloud Rate API

Testing RatePlanApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rtp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rtp"
)

func Test_rtp_RatePlanApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RatePlanApiService CopyPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.CopyPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService CopyPromotionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.CopyPromotionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService CopyRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.CopyRatePlans(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService CopyTieredRateSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var destinationTierId string
		var sourceTierId string
		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.CopyTieredRateSchedules(context.Background(), destinationTierId, sourceTierId, ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteDailyRatePlanScheduleRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteDailyRatePlanScheduleRange(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteMassRateChangeLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteMassRateChangeLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanId string
		var startDate string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteNegotiatedRates(context.Background(), ratePlanId, startDate, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeletePackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeletePackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeletePackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageFormulaRangeId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeletePackageFormulaRanges(context.Background(), packageFormulaRangeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeletePackageGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeletePackageGroups(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeletePromotionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeletePromotionGroup(context.Background(), groupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRateAccessExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRateAccessExclusions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRatePlanPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRatePlanPackages(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRatePlanPostingRhythms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRatePlanPostingRhythms(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRatePlanServiceCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRatePlanServiceCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRateStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateStrategyId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRateStrategy(context.Background(), rateStrategyId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageForecastGroupCode string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteTemplatePackageForecastGroups(context.Background(), packageForecastGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DistributeNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DistributeNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DownloadExternalRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DownloadExternalRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetMassRateChangeStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetMassRateChangeStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetNegotiatedRatesForGivenHotelAndRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetNegotiatedRatesForGivenHotelAndRate(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetNegotiatedRatesForGivenProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RatePlanApi.GetNegotiatedRatesForGivenProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPackageFormulaRanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackageGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPackageGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackageRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPackageRates(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.GetPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPromotionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPromotionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPromotionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPromotionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRateActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRateActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlanScheduleYieldAdjustments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlanScheduleYieldAdjustments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlans(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlansByHotel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlansByHotel(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlansForBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlansForBlock(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRateStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRateStrategies(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.GetTemplatePackageForecastGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetTemplatePromotionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.GetTemplatePromotionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetYieldAdjustments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetYieldAdjustments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService ManageRatePlansSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.ManageRatePlansSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PingRatePlanService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.PingRatePlanService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostPackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostPackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostPackageFormulaRanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostPackageGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostPackageGroup(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostPromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostPromotionCode(context.Background(), promotionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostPromotionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostPromotionGroup(context.Background(), groupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRatePlan(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRatePlanPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRatePlanPackages(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRatePlanPostingRhythms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRatePlanPostingRhythms(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRateStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRateStrategy(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.PostTemplatePackageForecastGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostTemplatePromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string

		resp, httpRes, err := apiClient.RatePlanApi.PostTemplatePromotionCode(context.Background(), promotionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutNegotiatedRates(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutPackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutPackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageFormulaRangeId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutPackageFormulaRanges(context.Background(), packageFormulaRangeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutPackageGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutPackageGroup(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutPromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutPromotionCode(context.Background(), promotionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutPromotionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutPromotionGroup(context.Background(), groupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutRatePlanPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutRatePlanPackages(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutRatePlanPostingRhythms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutRatePlanPostingRhythms(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutRateStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateStrategyId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutRateStrategy(context.Background(), rateStrategyId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.PutTemplatePackageForecastGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutTemplatePromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string

		resp, httpRes, err := apiClient.RatePlanApi.PutTemplatePromotionCode(context.Background(), promotionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService SetDailyRatePlanScheduleRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.SetDailyRatePlanScheduleRange(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService SetMassRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.SetMassRatePlanSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService SetRateAccessExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.SetRateAccessExclusions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService SetRateStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.SetRateStrategies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService SplitRatePlanSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.SplitRatePlanSchedule(context.Background(), scheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
