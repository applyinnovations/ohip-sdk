/*
OPERA Cloud Rate API

Testing RatePlanAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rtp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rtp"
)

func Test_rtp_RatePlanAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RatePlanAPIService CopyPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.CopyPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService CopyPromotionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.CopyPromotionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService CopyRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.CopyRatePlans(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService CopyTieredRateSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var destinationTierId string
		var sourceTierId string
		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.CopyTieredRateSchedules(context.Background(), destinationTierId, sourceTierId, ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteDailyRatePlanScheduleRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteDailyRatePlanScheduleRange(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteMassRateChangeLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteMassRateChangeLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanId string
		var startDate string
		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteNegotiatedRates(context.Background(), ratePlanId, startDate, profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeletePackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeletePackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeletePackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageFormulaRangeId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeletePackageFormulaRanges(context.Background(), packageFormulaRangeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeletePackageGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeletePackageGroups(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeletePromotionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeletePromotionGroup(context.Background(), groupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRateAccessExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRateAccessExclusions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRatePlanPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRatePlanPackages(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRatePlanPostingRhythms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRatePlanPostingRhythms(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRatePlanServiceCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRatePlanServiceCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteRateStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateStrategyId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteRateStrategy(context.Background(), rateStrategyId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DeleteTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageForecastGroupCode string

		resp, httpRes, err := apiClient.RatePlanAPI.DeleteTemplatePackageForecastGroups(context.Background(), packageForecastGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DistributeNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DistributeNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService DownloadExternalRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.DownloadExternalRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetMassRateChangeStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetMassRateChangeStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetNegotiatedRatesForGivenHotelAndRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetNegotiatedRatesForGivenHotelAndRate(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetNegotiatedRatesForGivenProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetNegotiatedRatesForGivenProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetPackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetPackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetPackageFormulaRanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetPackageGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetPackageGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetPackageRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetPackageRates(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.GetPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetPromotionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetPromotionCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetPromotionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetPromotionGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRateActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRateActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRatePlanScheduleYieldAdjustments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRatePlanScheduleYieldAdjustments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.GetRatePlans(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRatePlansByHotel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRatePlansByHotel(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRatePlansForBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRatePlansForBlock(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetRateStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetRateStrategies(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.GetTemplatePackageForecastGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetTemplatePromotionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.GetTemplatePromotionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService GetYieldAdjustments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.GetYieldAdjustments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService ManageRatePlansSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.ManageRatePlansSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PingRatePlanService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.PingRatePlanService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostPackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostPackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostPackageFormulaRanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostPackageGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostPackageGroup(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostPromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostPromotionCode(context.Background(), promotionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostPromotionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostPromotionGroup(context.Background(), groupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostRatePlan(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostRatePlanPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostRatePlanPackages(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostRatePlanPostingRhythms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostRatePlanPostingRhythms(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostRateStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PostRateStrategy(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.PostTemplatePackageForecastGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PostTemplatePromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string

		resp, httpRes, err := apiClient.RatePlanAPI.PostTemplatePromotionCode(context.Background(), promotionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutHotelPackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutHotelPackageForecastGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutNegotiatedRates(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutPackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutPackageFormulaRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageFormulaRangeId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutPackageFormulaRanges(context.Background(), packageFormulaRangeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutPackageGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutPackageGroup(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutPromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutPromotionCode(context.Background(), promotionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutPromotionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutPromotionGroup(context.Background(), groupCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutRateGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutRatePlanPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutRatePlanPackages(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutRatePlanPostingRhythms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutRatePlanPostingRhythms(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutRateStrategy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateStrategyId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.PutRateStrategy(context.Background(), rateStrategyId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutTemplatePackageForecastGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.PutTemplatePackageForecastGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService PutTemplatePromotionCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promotionCode string

		resp, httpRes, err := apiClient.RatePlanAPI.PutTemplatePromotionCode(context.Background(), promotionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService SetDailyRatePlanScheduleRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.SetDailyRatePlanScheduleRange(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService SetMassRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.SetMassRatePlanSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService SetRateAccessExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.SetRateAccessExclusions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService SetRateStrategies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanAPI.SetRateStrategies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanAPIService SplitRatePlanSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scheduleId string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanAPI.SplitRatePlanSchedule(context.Background(), scheduleId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
