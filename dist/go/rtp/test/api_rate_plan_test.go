/*
OPERA Cloud Rate API

Testing RatePlanApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rtp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rtp"
)

func Test_rtp_RatePlanApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RatePlanApiService DeleteBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService DeleteRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.DeleteRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetNegotiatedRatesForGivenHotelAndRate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetNegotiatedRatesForGivenHotelAndRate(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetNegotiatedRatesForGivenProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RatePlanApi.GetNegotiatedRatesForGivenProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPackage(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackageGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPackageGroups(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackageRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetPackageRates(context.Background(), packageCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.GetPackages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlan(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService GetRatePlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RatePlanApi.GetRatePlans(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostBestAvailableRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostBestAvailableRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostNegotiatedRates(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRatePlan(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PostRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PostRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutNegotiatedRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutNegotiatedRates(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RatePlanApiService PutRatePlanSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCode string
		var hotelId string

		resp, httpRes, err := apiClient.RatePlanApi.PutRatePlanSchedules(context.Background(), ratePlanCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
