/*
OPERA Cloud Rate API

Testing HotelConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rtp

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rtp"
)

func Test_rtp_HotelConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HotelConfigAPIService ChangeRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeRateCategory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateClassCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeRateClass(context.Background(), rateClassCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var seasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeRateSeasons(context.Background(), seasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCategoryCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateRateCategory(context.Background(), rateCategoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateClassCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateRateClass(context.Background(), rateClassCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var seasonCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateRateSeasons(context.Background(), seasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteRateCategory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateClassCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteRateClass(context.Background(), rateClassCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteTemplateRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCategoryCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteTemplateRateCategory(context.Background(), rateCategoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteTemplateRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateClassCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteTemplateRateClass(context.Background(), rateClassCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRateCategory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRateClass(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetRateSeasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateRateCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateRateClass(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateRateSeasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRateCategory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRateClass(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostRateSeasons(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateRateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateRateCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateRateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateRateClass(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateRateSeasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var seasonCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveRateSeasons(context.Background(), seasonCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateRateSeasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var seasonCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateRateSeasons(context.Background(), seasonCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
