/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the HotelPackageCodesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelPackageCodesType{}

// HotelPackageCodesType Depending on the fetch instructions either full details or basic details will be fetched
type HotelPackageCodesType struct {
	// Basic information about the each package code.
	PackageCodeShortInfo []PackageCodeShortInfoType `json:"packageCodeShortInfo,omitempty"`
	// Full Details about each package code
	PackageCodeInfo []PackageCodeType `json:"packageCodeInfo,omitempty"`
	// Hotel code for the packages.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewHotelPackageCodesType instantiates a new HotelPackageCodesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelPackageCodesType() *HotelPackageCodesType {
	this := HotelPackageCodesType{}
	return &this
}

// NewHotelPackageCodesTypeWithDefaults instantiates a new HotelPackageCodesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelPackageCodesTypeWithDefaults() *HotelPackageCodesType {
	this := HotelPackageCodesType{}
	return &this
}

// GetPackageCodeShortInfo returns the PackageCodeShortInfo field value if set, zero value otherwise.
func (o *HotelPackageCodesType) GetPackageCodeShortInfo() []PackageCodeShortInfoType {
	if o == nil || IsNil(o.PackageCodeShortInfo) {
		var ret []PackageCodeShortInfoType
		return ret
	}
	return o.PackageCodeShortInfo
}

// GetPackageCodeShortInfoOk returns a tuple with the PackageCodeShortInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelPackageCodesType) GetPackageCodeShortInfoOk() ([]PackageCodeShortInfoType, bool) {
	if o == nil || IsNil(o.PackageCodeShortInfo) {
		return nil, false
	}
	return o.PackageCodeShortInfo, true
}

// HasPackageCodeShortInfo returns a boolean if a field has been set.
func (o *HotelPackageCodesType) HasPackageCodeShortInfo() bool {
	if o != nil && !IsNil(o.PackageCodeShortInfo) {
		return true
	}

	return false
}

// SetPackageCodeShortInfo gets a reference to the given []PackageCodeShortInfoType and assigns it to the PackageCodeShortInfo field.
func (o *HotelPackageCodesType) SetPackageCodeShortInfo(v []PackageCodeShortInfoType) {
	o.PackageCodeShortInfo = v
}

// GetPackageCodeInfo returns the PackageCodeInfo field value if set, zero value otherwise.
func (o *HotelPackageCodesType) GetPackageCodeInfo() []PackageCodeType {
	if o == nil || IsNil(o.PackageCodeInfo) {
		var ret []PackageCodeType
		return ret
	}
	return o.PackageCodeInfo
}

// GetPackageCodeInfoOk returns a tuple with the PackageCodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelPackageCodesType) GetPackageCodeInfoOk() ([]PackageCodeType, bool) {
	if o == nil || IsNil(o.PackageCodeInfo) {
		return nil, false
	}
	return o.PackageCodeInfo, true
}

// HasPackageCodeInfo returns a boolean if a field has been set.
func (o *HotelPackageCodesType) HasPackageCodeInfo() bool {
	if o != nil && !IsNil(o.PackageCodeInfo) {
		return true
	}

	return false
}

// SetPackageCodeInfo gets a reference to the given []PackageCodeType and assigns it to the PackageCodeInfo field.
func (o *HotelPackageCodesType) SetPackageCodeInfo(v []PackageCodeType) {
	o.PackageCodeInfo = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelPackageCodesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelPackageCodesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelPackageCodesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelPackageCodesType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o HotelPackageCodesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelPackageCodesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageCodeShortInfo) {
		toSerialize["packageCodeShortInfo"] = o.PackageCodeShortInfo
	}
	if !IsNil(o.PackageCodeInfo) {
		toSerialize["packageCodeInfo"] = o.PackageCodeInfo
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableHotelPackageCodesType struct {
	value *HotelPackageCodesType
	isSet bool
}

func (v NullableHotelPackageCodesType) Get() *HotelPackageCodesType {
	return v.value
}

func (v *NullableHotelPackageCodesType) Set(val *HotelPackageCodesType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelPackageCodesType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelPackageCodesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelPackageCodesType(val *HotelPackageCodesType) *NullableHotelPackageCodesType {
	return &NullableHotelPackageCodesType{value: val, isSet: true}
}

func (v NullableHotelPackageCodesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelPackageCodesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


