/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the PropertyPromotionRateCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyPromotionRateCodeType{}

// PropertyPromotionRateCodeType struct for PropertyPromotionRateCodeType
type PropertyPromotionRateCodeType struct {
	// Created or removed rate code. Accepted values are \"CREATED\", \"REMOVED\"
	ActionType *string `json:"actionType,omitempty"`
	// One of the unique key of the promotion code it attaches to.
	HotelId *string `json:"hotelId,omitempty"`
	// One of the unique key of the promotion code it attaches to.
	PromotionCode *string `json:"promotionCode,omitempty"`
	// Code of the rate.
	RateCode *string `json:"rateCode,omitempty"`
	// Description of the rate.
	RateDescription *string `json:"rateDescription,omitempty"`
}

// NewPropertyPromotionRateCodeType instantiates a new PropertyPromotionRateCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyPromotionRateCodeType() *PropertyPromotionRateCodeType {
	this := PropertyPromotionRateCodeType{}
	return &this
}

// NewPropertyPromotionRateCodeTypeWithDefaults instantiates a new PropertyPromotionRateCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyPromotionRateCodeTypeWithDefaults() *PropertyPromotionRateCodeType {
	this := PropertyPromotionRateCodeType{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *PropertyPromotionRateCodeType) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyPromotionRateCodeType) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *PropertyPromotionRateCodeType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *PropertyPromotionRateCodeType) SetActionType(v string) {
	o.ActionType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PropertyPromotionRateCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyPromotionRateCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PropertyPromotionRateCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PropertyPromotionRateCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPromotionCode returns the PromotionCode field value if set, zero value otherwise.
func (o *PropertyPromotionRateCodeType) GetPromotionCode() string {
	if o == nil || IsNil(o.PromotionCode) {
		var ret string
		return ret
	}
	return *o.PromotionCode
}

// GetPromotionCodeOk returns a tuple with the PromotionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyPromotionRateCodeType) GetPromotionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PromotionCode) {
		return nil, false
	}
	return o.PromotionCode, true
}

// HasPromotionCode returns a boolean if a field has been set.
func (o *PropertyPromotionRateCodeType) HasPromotionCode() bool {
	if o != nil && !IsNil(o.PromotionCode) {
		return true
	}

	return false
}

// SetPromotionCode gets a reference to the given string and assigns it to the PromotionCode field.
func (o *PropertyPromotionRateCodeType) SetPromotionCode(v string) {
	o.PromotionCode = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *PropertyPromotionRateCodeType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyPromotionRateCodeType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *PropertyPromotionRateCodeType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *PropertyPromotionRateCodeType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetRateDescription returns the RateDescription field value if set, zero value otherwise.
func (o *PropertyPromotionRateCodeType) GetRateDescription() string {
	if o == nil || IsNil(o.RateDescription) {
		var ret string
		return ret
	}
	return *o.RateDescription
}

// GetRateDescriptionOk returns a tuple with the RateDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyPromotionRateCodeType) GetRateDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RateDescription) {
		return nil, false
	}
	return o.RateDescription, true
}

// HasRateDescription returns a boolean if a field has been set.
func (o *PropertyPromotionRateCodeType) HasRateDescription() bool {
	if o != nil && !IsNil(o.RateDescription) {
		return true
	}

	return false
}

// SetRateDescription gets a reference to the given string and assigns it to the RateDescription field.
func (o *PropertyPromotionRateCodeType) SetRateDescription(v string) {
	o.RateDescription = &v
}

func (o PropertyPromotionRateCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyPromotionRateCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PromotionCode) {
		toSerialize["promotionCode"] = o.PromotionCode
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.RateDescription) {
		toSerialize["rateDescription"] = o.RateDescription
	}
	return toSerialize, nil
}

type NullablePropertyPromotionRateCodeType struct {
	value *PropertyPromotionRateCodeType
	isSet bool
}

func (v NullablePropertyPromotionRateCodeType) Get() *PropertyPromotionRateCodeType {
	return v.value
}

func (v *NullablePropertyPromotionRateCodeType) Set(val *PropertyPromotionRateCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyPromotionRateCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyPromotionRateCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyPromotionRateCodeType(val *PropertyPromotionRateCodeType) *NullablePropertyPromotionRateCodeType {
	return &NullablePropertyPromotionRateCodeType{value: val, isSet: true}
}

func (v NullablePropertyPromotionRateCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyPromotionRateCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


