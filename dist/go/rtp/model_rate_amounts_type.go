/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateAmountsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateAmountsType{}

// RateAmountsType struct for RateAmountsType
type RateAmountsType struct {
	BaseAmount *float32 `json:"baseAmount,omitempty"`
	// Rate amount for the extra child..
	ExtraChildRate *float32 `json:"extraChildRate,omitempty"`
	// Rate amount for each extra person.
	ExtraPersonRate *float32 `json:"extraPersonRate,omitempty"`
	// Rate amount for five persons.
	FivePersonsRate *float32 `json:"fivePersonsRate,omitempty"`
	// Rate amount for four Children.
	FourChildrenRate *float32 `json:"fourChildrenRate,omitempty"`
	// Rate amount for four persons.
	FourPersonsRate *float32 `json:"fourPersonsRate,omitempty"`
	// Rate amount for one Child.
	OneChildRate *float32 `json:"oneChildRate,omitempty"`
	// Rate amount for one person.
	OnePersonRate *float32 `json:"onePersonRate,omitempty"`
	// Rate amount by age bucket.
	RateByAgeBuckets []RateByAgeBucketType `json:"rateByAgeBuckets,omitempty"`
	// Rate amount for three Children.
	ThreeChildrenRate *float32 `json:"threeChildrenRate,omitempty"`
	// Rate amount for three persons.
	ThreePersonsRate *float32 `json:"threePersonsRate,omitempty"`
	// Rate amount for two Children.
	TwoChildrenRate *float32 `json:"twoChildrenRate,omitempty"`
	// Rate amount for two persons.
	TwoPersonsRate *float32 `json:"twoPersonsRate,omitempty"`
}

// NewRateAmountsType instantiates a new RateAmountsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateAmountsType() *RateAmountsType {
	this := RateAmountsType{}
	return &this
}

// NewRateAmountsTypeWithDefaults instantiates a new RateAmountsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateAmountsTypeWithDefaults() *RateAmountsType {
	this := RateAmountsType{}
	return &this
}

// GetBaseAmount returns the BaseAmount field value if set, zero value otherwise.
func (o *RateAmountsType) GetBaseAmount() float32 {
	if o == nil || IsNil(o.BaseAmount) {
		var ret float32
		return ret
	}
	return *o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetBaseAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseAmount) {
		return nil, false
	}
	return o.BaseAmount, true
}

// HasBaseAmount returns a boolean if a field has been set.
func (o *RateAmountsType) HasBaseAmount() bool {
	if o != nil && !IsNil(o.BaseAmount) {
		return true
	}

	return false
}

// SetBaseAmount gets a reference to the given float32 and assigns it to the BaseAmount field.
func (o *RateAmountsType) SetBaseAmount(v float32) {
	o.BaseAmount = &v
}

// GetExtraChildRate returns the ExtraChildRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetExtraChildRate() float32 {
	if o == nil || IsNil(o.ExtraChildRate) {
		var ret float32
		return ret
	}
	return *o.ExtraChildRate
}

// GetExtraChildRateOk returns a tuple with the ExtraChildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetExtraChildRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtraChildRate) {
		return nil, false
	}
	return o.ExtraChildRate, true
}

// HasExtraChildRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasExtraChildRate() bool {
	if o != nil && !IsNil(o.ExtraChildRate) {
		return true
	}

	return false
}

// SetExtraChildRate gets a reference to the given float32 and assigns it to the ExtraChildRate field.
func (o *RateAmountsType) SetExtraChildRate(v float32) {
	o.ExtraChildRate = &v
}

// GetExtraPersonRate returns the ExtraPersonRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetExtraPersonRate() float32 {
	if o == nil || IsNil(o.ExtraPersonRate) {
		var ret float32
		return ret
	}
	return *o.ExtraPersonRate
}

// GetExtraPersonRateOk returns a tuple with the ExtraPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetExtraPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtraPersonRate) {
		return nil, false
	}
	return o.ExtraPersonRate, true
}

// HasExtraPersonRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasExtraPersonRate() bool {
	if o != nil && !IsNil(o.ExtraPersonRate) {
		return true
	}

	return false
}

// SetExtraPersonRate gets a reference to the given float32 and assigns it to the ExtraPersonRate field.
func (o *RateAmountsType) SetExtraPersonRate(v float32) {
	o.ExtraPersonRate = &v
}

// GetFivePersonsRate returns the FivePersonsRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetFivePersonsRate() float32 {
	if o == nil || IsNil(o.FivePersonsRate) {
		var ret float32
		return ret
	}
	return *o.FivePersonsRate
}

// GetFivePersonsRateOk returns a tuple with the FivePersonsRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetFivePersonsRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FivePersonsRate) {
		return nil, false
	}
	return o.FivePersonsRate, true
}

// HasFivePersonsRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasFivePersonsRate() bool {
	if o != nil && !IsNil(o.FivePersonsRate) {
		return true
	}

	return false
}

// SetFivePersonsRate gets a reference to the given float32 and assigns it to the FivePersonsRate field.
func (o *RateAmountsType) SetFivePersonsRate(v float32) {
	o.FivePersonsRate = &v
}

// GetFourChildrenRate returns the FourChildrenRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetFourChildrenRate() float32 {
	if o == nil || IsNil(o.FourChildrenRate) {
		var ret float32
		return ret
	}
	return *o.FourChildrenRate
}

// GetFourChildrenRateOk returns a tuple with the FourChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetFourChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FourChildrenRate) {
		return nil, false
	}
	return o.FourChildrenRate, true
}

// HasFourChildrenRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasFourChildrenRate() bool {
	if o != nil && !IsNil(o.FourChildrenRate) {
		return true
	}

	return false
}

// SetFourChildrenRate gets a reference to the given float32 and assigns it to the FourChildrenRate field.
func (o *RateAmountsType) SetFourChildrenRate(v float32) {
	o.FourChildrenRate = &v
}

// GetFourPersonsRate returns the FourPersonsRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetFourPersonsRate() float32 {
	if o == nil || IsNil(o.FourPersonsRate) {
		var ret float32
		return ret
	}
	return *o.FourPersonsRate
}

// GetFourPersonsRateOk returns a tuple with the FourPersonsRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetFourPersonsRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FourPersonsRate) {
		return nil, false
	}
	return o.FourPersonsRate, true
}

// HasFourPersonsRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasFourPersonsRate() bool {
	if o != nil && !IsNil(o.FourPersonsRate) {
		return true
	}

	return false
}

// SetFourPersonsRate gets a reference to the given float32 and assigns it to the FourPersonsRate field.
func (o *RateAmountsType) SetFourPersonsRate(v float32) {
	o.FourPersonsRate = &v
}

// GetOneChildRate returns the OneChildRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetOneChildRate() float32 {
	if o == nil || IsNil(o.OneChildRate) {
		var ret float32
		return ret
	}
	return *o.OneChildRate
}

// GetOneChildRateOk returns a tuple with the OneChildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetOneChildRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OneChildRate) {
		return nil, false
	}
	return o.OneChildRate, true
}

// HasOneChildRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasOneChildRate() bool {
	if o != nil && !IsNil(o.OneChildRate) {
		return true
	}

	return false
}

// SetOneChildRate gets a reference to the given float32 and assigns it to the OneChildRate field.
func (o *RateAmountsType) SetOneChildRate(v float32) {
	o.OneChildRate = &v
}

// GetOnePersonRate returns the OnePersonRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetOnePersonRate() float32 {
	if o == nil || IsNil(o.OnePersonRate) {
		var ret float32
		return ret
	}
	return *o.OnePersonRate
}

// GetOnePersonRateOk returns a tuple with the OnePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetOnePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OnePersonRate) {
		return nil, false
	}
	return o.OnePersonRate, true
}

// HasOnePersonRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasOnePersonRate() bool {
	if o != nil && !IsNil(o.OnePersonRate) {
		return true
	}

	return false
}

// SetOnePersonRate gets a reference to the given float32 and assigns it to the OnePersonRate field.
func (o *RateAmountsType) SetOnePersonRate(v float32) {
	o.OnePersonRate = &v
}

// GetRateByAgeBuckets returns the RateByAgeBuckets field value if set, zero value otherwise.
func (o *RateAmountsType) GetRateByAgeBuckets() []RateByAgeBucketType {
	if o == nil || IsNil(o.RateByAgeBuckets) {
		var ret []RateByAgeBucketType
		return ret
	}
	return o.RateByAgeBuckets
}

// GetRateByAgeBucketsOk returns a tuple with the RateByAgeBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetRateByAgeBucketsOk() ([]RateByAgeBucketType, bool) {
	if o == nil || IsNil(o.RateByAgeBuckets) {
		return nil, false
	}
	return o.RateByAgeBuckets, true
}

// HasRateByAgeBuckets returns a boolean if a field has been set.
func (o *RateAmountsType) HasRateByAgeBuckets() bool {
	if o != nil && !IsNil(o.RateByAgeBuckets) {
		return true
	}

	return false
}

// SetRateByAgeBuckets gets a reference to the given []RateByAgeBucketType and assigns it to the RateByAgeBuckets field.
func (o *RateAmountsType) SetRateByAgeBuckets(v []RateByAgeBucketType) {
	o.RateByAgeBuckets = v
}

// GetThreeChildrenRate returns the ThreeChildrenRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetThreeChildrenRate() float32 {
	if o == nil || IsNil(o.ThreeChildrenRate) {
		var ret float32
		return ret
	}
	return *o.ThreeChildrenRate
}

// GetThreeChildrenRateOk returns a tuple with the ThreeChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetThreeChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreeChildrenRate) {
		return nil, false
	}
	return o.ThreeChildrenRate, true
}

// HasThreeChildrenRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasThreeChildrenRate() bool {
	if o != nil && !IsNil(o.ThreeChildrenRate) {
		return true
	}

	return false
}

// SetThreeChildrenRate gets a reference to the given float32 and assigns it to the ThreeChildrenRate field.
func (o *RateAmountsType) SetThreeChildrenRate(v float32) {
	o.ThreeChildrenRate = &v
}

// GetThreePersonsRate returns the ThreePersonsRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetThreePersonsRate() float32 {
	if o == nil || IsNil(o.ThreePersonsRate) {
		var ret float32
		return ret
	}
	return *o.ThreePersonsRate
}

// GetThreePersonsRateOk returns a tuple with the ThreePersonsRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetThreePersonsRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreePersonsRate) {
		return nil, false
	}
	return o.ThreePersonsRate, true
}

// HasThreePersonsRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasThreePersonsRate() bool {
	if o != nil && !IsNil(o.ThreePersonsRate) {
		return true
	}

	return false
}

// SetThreePersonsRate gets a reference to the given float32 and assigns it to the ThreePersonsRate field.
func (o *RateAmountsType) SetThreePersonsRate(v float32) {
	o.ThreePersonsRate = &v
}

// GetTwoChildrenRate returns the TwoChildrenRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetTwoChildrenRate() float32 {
	if o == nil || IsNil(o.TwoChildrenRate) {
		var ret float32
		return ret
	}
	return *o.TwoChildrenRate
}

// GetTwoChildrenRateOk returns a tuple with the TwoChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetTwoChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoChildrenRate) {
		return nil, false
	}
	return o.TwoChildrenRate, true
}

// HasTwoChildrenRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasTwoChildrenRate() bool {
	if o != nil && !IsNil(o.TwoChildrenRate) {
		return true
	}

	return false
}

// SetTwoChildrenRate gets a reference to the given float32 and assigns it to the TwoChildrenRate field.
func (o *RateAmountsType) SetTwoChildrenRate(v float32) {
	o.TwoChildrenRate = &v
}

// GetTwoPersonsRate returns the TwoPersonsRate field value if set, zero value otherwise.
func (o *RateAmountsType) GetTwoPersonsRate() float32 {
	if o == nil || IsNil(o.TwoPersonsRate) {
		var ret float32
		return ret
	}
	return *o.TwoPersonsRate
}

// GetTwoPersonsRateOk returns a tuple with the TwoPersonsRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAmountsType) GetTwoPersonsRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoPersonsRate) {
		return nil, false
	}
	return o.TwoPersonsRate, true
}

// HasTwoPersonsRate returns a boolean if a field has been set.
func (o *RateAmountsType) HasTwoPersonsRate() bool {
	if o != nil && !IsNil(o.TwoPersonsRate) {
		return true
	}

	return false
}

// SetTwoPersonsRate gets a reference to the given float32 and assigns it to the TwoPersonsRate field.
func (o *RateAmountsType) SetTwoPersonsRate(v float32) {
	o.TwoPersonsRate = &v
}

func (o RateAmountsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateAmountsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseAmount) {
		toSerialize["baseAmount"] = o.BaseAmount
	}
	if !IsNil(o.ExtraChildRate) {
		toSerialize["extraChildRate"] = o.ExtraChildRate
	}
	if !IsNil(o.ExtraPersonRate) {
		toSerialize["extraPersonRate"] = o.ExtraPersonRate
	}
	if !IsNil(o.FivePersonsRate) {
		toSerialize["fivePersonsRate"] = o.FivePersonsRate
	}
	if !IsNil(o.FourChildrenRate) {
		toSerialize["fourChildrenRate"] = o.FourChildrenRate
	}
	if !IsNil(o.FourPersonsRate) {
		toSerialize["fourPersonsRate"] = o.FourPersonsRate
	}
	if !IsNil(o.OneChildRate) {
		toSerialize["oneChildRate"] = o.OneChildRate
	}
	if !IsNil(o.OnePersonRate) {
		toSerialize["onePersonRate"] = o.OnePersonRate
	}
	if !IsNil(o.RateByAgeBuckets) {
		toSerialize["rateByAgeBuckets"] = o.RateByAgeBuckets
	}
	if !IsNil(o.ThreeChildrenRate) {
		toSerialize["threeChildrenRate"] = o.ThreeChildrenRate
	}
	if !IsNil(o.ThreePersonsRate) {
		toSerialize["threePersonsRate"] = o.ThreePersonsRate
	}
	if !IsNil(o.TwoChildrenRate) {
		toSerialize["twoChildrenRate"] = o.TwoChildrenRate
	}
	if !IsNil(o.TwoPersonsRate) {
		toSerialize["twoPersonsRate"] = o.TwoPersonsRate
	}
	return toSerialize, nil
}

type NullableRateAmountsType struct {
	value *RateAmountsType
	isSet bool
}

func (v NullableRateAmountsType) Get() *RateAmountsType {
	return v.value
}

func (v *NullableRateAmountsType) Set(val *RateAmountsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateAmountsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateAmountsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateAmountsType(val *RateAmountsType) *NullableRateAmountsType {
	return &NullableRateAmountsType{value: val, isSet: true}
}

func (v NullableRateAmountsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateAmountsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


