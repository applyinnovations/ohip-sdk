/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateOffsetType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateOffsetType{}

// RateOffsetType Rate Offset details for copying a rate schedule to a different tier.
type RateOffsetType struct {
	// Offset amount for copying the rate schedule.
	Offset *float32 `json:"offset,omitempty"`
	// Specifies whether the offset amount is of Flat or Percentage type. Valid values are F/P.
	FlatOrPercentage *string `json:"flatOrPercentage,omitempty"`
	// Specifies whether the offset amount is to increase the rate or decrease the rate. Valid values are I/D.
	IncreaseOrDecrease *string `json:"increaseOrDecrease,omitempty"`
}

// NewRateOffsetType instantiates a new RateOffsetType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateOffsetType() *RateOffsetType {
	this := RateOffsetType{}
	return &this
}

// NewRateOffsetTypeWithDefaults instantiates a new RateOffsetType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateOffsetTypeWithDefaults() *RateOffsetType {
	this := RateOffsetType{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *RateOffsetType) GetOffset() float32 {
	if o == nil || IsNil(o.Offset) {
		var ret float32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateOffsetType) GetOffsetOk() (*float32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *RateOffsetType) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given float32 and assigns it to the Offset field.
func (o *RateOffsetType) SetOffset(v float32) {
	o.Offset = &v
}

// GetFlatOrPercentage returns the FlatOrPercentage field value if set, zero value otherwise.
func (o *RateOffsetType) GetFlatOrPercentage() string {
	if o == nil || IsNil(o.FlatOrPercentage) {
		var ret string
		return ret
	}
	return *o.FlatOrPercentage
}

// GetFlatOrPercentageOk returns a tuple with the FlatOrPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateOffsetType) GetFlatOrPercentageOk() (*string, bool) {
	if o == nil || IsNil(o.FlatOrPercentage) {
		return nil, false
	}
	return o.FlatOrPercentage, true
}

// HasFlatOrPercentage returns a boolean if a field has been set.
func (o *RateOffsetType) HasFlatOrPercentage() bool {
	if o != nil && !IsNil(o.FlatOrPercentage) {
		return true
	}

	return false
}

// SetFlatOrPercentage gets a reference to the given string and assigns it to the FlatOrPercentage field.
func (o *RateOffsetType) SetFlatOrPercentage(v string) {
	o.FlatOrPercentage = &v
}

// GetIncreaseOrDecrease returns the IncreaseOrDecrease field value if set, zero value otherwise.
func (o *RateOffsetType) GetIncreaseOrDecrease() string {
	if o == nil || IsNil(o.IncreaseOrDecrease) {
		var ret string
		return ret
	}
	return *o.IncreaseOrDecrease
}

// GetIncreaseOrDecreaseOk returns a tuple with the IncreaseOrDecrease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateOffsetType) GetIncreaseOrDecreaseOk() (*string, bool) {
	if o == nil || IsNil(o.IncreaseOrDecrease) {
		return nil, false
	}
	return o.IncreaseOrDecrease, true
}

// HasIncreaseOrDecrease returns a boolean if a field has been set.
func (o *RateOffsetType) HasIncreaseOrDecrease() bool {
	if o != nil && !IsNil(o.IncreaseOrDecrease) {
		return true
	}

	return false
}

// SetIncreaseOrDecrease gets a reference to the given string and assigns it to the IncreaseOrDecrease field.
func (o *RateOffsetType) SetIncreaseOrDecrease(v string) {
	o.IncreaseOrDecrease = &v
}

func (o RateOffsetType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateOffsetType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.FlatOrPercentage) {
		toSerialize["flatOrPercentage"] = o.FlatOrPercentage
	}
	if !IsNil(o.IncreaseOrDecrease) {
		toSerialize["increaseOrDecrease"] = o.IncreaseOrDecrease
	}
	return toSerialize, nil
}

type NullableRateOffsetType struct {
	value *RateOffsetType
	isSet bool
}

func (v NullableRateOffsetType) Get() *RateOffsetType {
	return v.value
}

func (v *NullableRateOffsetType) Set(val *RateOffsetType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateOffsetType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateOffsetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateOffsetType(val *RateOffsetType) *NullableRateOffsetType {
	return &NullableRateOffsetType{value: val, isSet: true}
}

func (v NullableRateOffsetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateOffsetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


