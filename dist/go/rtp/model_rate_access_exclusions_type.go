/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateAccessExclusionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateAccessExclusionsType{}

// RateAccessExclusionsType struct for RateAccessExclusionsType
type RateAccessExclusionsType struct {
	// Hotel code for the rate code.
	HotelId *string `json:"hotelId,omitempty"`
	// Collection of Rate Access Exclusions.
	RateAccessExclusion []RateAccessExclusionType `json:"rateAccessExclusion,omitempty"`
	// Rate code
	RateCode *string `json:"rateCode,omitempty"`
}

// NewRateAccessExclusionsType instantiates a new RateAccessExclusionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateAccessExclusionsType() *RateAccessExclusionsType {
	this := RateAccessExclusionsType{}
	return &this
}

// NewRateAccessExclusionsTypeWithDefaults instantiates a new RateAccessExclusionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateAccessExclusionsTypeWithDefaults() *RateAccessExclusionsType {
	this := RateAccessExclusionsType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RateAccessExclusionsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAccessExclusionsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RateAccessExclusionsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RateAccessExclusionsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRateAccessExclusion returns the RateAccessExclusion field value if set, zero value otherwise.
func (o *RateAccessExclusionsType) GetRateAccessExclusion() []RateAccessExclusionType {
	if o == nil || IsNil(o.RateAccessExclusion) {
		var ret []RateAccessExclusionType
		return ret
	}
	return o.RateAccessExclusion
}

// GetRateAccessExclusionOk returns a tuple with the RateAccessExclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAccessExclusionsType) GetRateAccessExclusionOk() ([]RateAccessExclusionType, bool) {
	if o == nil || IsNil(o.RateAccessExclusion) {
		return nil, false
	}
	return o.RateAccessExclusion, true
}

// HasRateAccessExclusion returns a boolean if a field has been set.
func (o *RateAccessExclusionsType) HasRateAccessExclusion() bool {
	if o != nil && !IsNil(o.RateAccessExclusion) {
		return true
	}

	return false
}

// SetRateAccessExclusion gets a reference to the given []RateAccessExclusionType and assigns it to the RateAccessExclusion field.
func (o *RateAccessExclusionsType) SetRateAccessExclusion(v []RateAccessExclusionType) {
	o.RateAccessExclusion = v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *RateAccessExclusionsType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAccessExclusionsType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *RateAccessExclusionsType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *RateAccessExclusionsType) SetRateCode(v string) {
	o.RateCode = &v
}

func (o RateAccessExclusionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateAccessExclusionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RateAccessExclusion) {
		toSerialize["rateAccessExclusion"] = o.RateAccessExclusion
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	return toSerialize, nil
}

type NullableRateAccessExclusionsType struct {
	value *RateAccessExclusionsType
	isSet bool
}

func (v NullableRateAccessExclusionsType) Get() *RateAccessExclusionsType {
	return v.value
}

func (v *NullableRateAccessExclusionsType) Set(val *RateAccessExclusionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateAccessExclusionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateAccessExclusionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateAccessExclusionsType(val *RateAccessExclusionsType) *NullableRateAccessExclusionsType {
	return &NullableRateAccessExclusionsType{value: val, isSet: true}
}

func (v NullableRateAccessExclusionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateAccessExclusionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


