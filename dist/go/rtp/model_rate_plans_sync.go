/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// checks if the RatePlansSync type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlansSync{}

// RatePlansSync Request object to synchronize rate codes.
type RatePlansSync struct {
	// Rate Codes.
	RatePlanCodes []string `json:"ratePlanCodes"`
	Target RatePlansSyncTargetType `json:"target"`
}

type _RatePlansSync RatePlansSync

// NewRatePlansSync instantiates a new RatePlansSync object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlansSync(ratePlanCodes []string, target RatePlansSyncTargetType) *RatePlansSync {
	this := RatePlansSync{}
	this.RatePlanCodes = ratePlanCodes
	this.Target = target
	return &this
}

// NewRatePlansSyncWithDefaults instantiates a new RatePlansSync object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlansSyncWithDefaults() *RatePlansSync {
	this := RatePlansSync{}
	return &this
}

// GetRatePlanCodes returns the RatePlanCodes field value
func (o *RatePlansSync) GetRatePlanCodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RatePlanCodes
}

// GetRatePlanCodesOk returns a tuple with the RatePlanCodes field value
// and a boolean to check if the value has been set.
func (o *RatePlansSync) GetRatePlanCodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RatePlanCodes, true
}

// SetRatePlanCodes sets field value
func (o *RatePlansSync) SetRatePlanCodes(v []string) {
	o.RatePlanCodes = v
}

// GetTarget returns the Target field value
func (o *RatePlansSync) GetTarget() RatePlansSyncTargetType {
	if o == nil {
		var ret RatePlansSyncTargetType
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *RatePlansSync) GetTargetOk() (*RatePlansSyncTargetType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *RatePlansSync) SetTarget(v RatePlansSyncTargetType) {
	o.Target = v
}

func (o RatePlansSync) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlansSync) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ratePlanCodes"] = o.RatePlanCodes
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

func (o *RatePlansSync) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ratePlanCodes",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRatePlansSync := _RatePlansSync{}

	err = json.Unmarshal(bytes, &varRatePlansSync)

	if err != nil {
		return err
	}

	*o = RatePlansSync(varRatePlansSync)

	return err
}

type NullableRatePlansSync struct {
	value *RatePlansSync
	isSet bool
}

func (v NullableRatePlansSync) Get() *RatePlansSync {
	return v.value
}

func (v *NullableRatePlansSync) Set(val *RatePlansSync) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlansSync) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlansSync) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlansSync(val *RatePlansSync) *NullableRatePlansSync {
	return &NullableRatePlansSync{value: val, isSet: true}
}

func (v NullableRatePlansSync) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlansSync) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


