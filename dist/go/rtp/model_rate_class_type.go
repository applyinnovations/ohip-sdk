/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateClassType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateClassType{}

// RateClassType A hotel rate class.
type RateClassType struct {
	// Description of the rate class.
	Description *string `json:"description,omitempty"`
	// Hotel Code the rate class belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// List of Rate Categories with description.
	RateCategories []CodeDescriptionType `json:"rateCategories,omitempty"`
	// Code that uniquely identifies the rate class.
	RateClass *string `json:"rateClass,omitempty"`
	// Display Sequence of the rate class.
	Sequence *int32 `json:"sequence,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewRateClassType instantiates a new RateClassType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateClassType() *RateClassType {
	this := RateClassType{}
	return &this
}

// NewRateClassTypeWithDefaults instantiates a new RateClassType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateClassTypeWithDefaults() *RateClassType {
	this := RateClassType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RateClassType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RateClassType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RateClassType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RateClassType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RateClassType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RateClassType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRateCategories returns the RateCategories field value if set, zero value otherwise.
func (o *RateClassType) GetRateCategories() []CodeDescriptionType {
	if o == nil || IsNil(o.RateCategories) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.RateCategories
}

// GetRateCategoriesOk returns a tuple with the RateCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassType) GetRateCategoriesOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RateCategories) {
		return nil, false
	}
	return o.RateCategories, true
}

// HasRateCategories returns a boolean if a field has been set.
func (o *RateClassType) HasRateCategories() bool {
	if o != nil && !IsNil(o.RateCategories) {
		return true
	}

	return false
}

// SetRateCategories gets a reference to the given []CodeDescriptionType and assigns it to the RateCategories field.
func (o *RateClassType) SetRateCategories(v []CodeDescriptionType) {
	o.RateCategories = v
}

// GetRateClass returns the RateClass field value if set, zero value otherwise.
func (o *RateClassType) GetRateClass() string {
	if o == nil || IsNil(o.RateClass) {
		var ret string
		return ret
	}
	return *o.RateClass
}

// GetRateClassOk returns a tuple with the RateClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassType) GetRateClassOk() (*string, bool) {
	if o == nil || IsNil(o.RateClass) {
		return nil, false
	}
	return o.RateClass, true
}

// HasRateClass returns a boolean if a field has been set.
func (o *RateClassType) HasRateClass() bool {
	if o != nil && !IsNil(o.RateClass) {
		return true
	}

	return false
}

// SetRateClass gets a reference to the given string and assigns it to the RateClass field.
func (o *RateClassType) SetRateClass(v string) {
	o.RateClass = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *RateClassType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *RateClassType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *RateClassType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *RateClassType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *RateClassType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *RateClassType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o RateClassType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateClassType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RateCategories) {
		toSerialize["rateCategories"] = o.RateCategories
	}
	if !IsNil(o.RateClass) {
		toSerialize["rateClass"] = o.RateClass
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableRateClassType struct {
	value *RateClassType
	isSet bool
}

func (v NullableRateClassType) Get() *RateClassType {
	return v.value
}

func (v *NullableRateClassType) Set(val *RateClassType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateClassType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateClassType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateClassType(val *RateClassType) *NullableRateClassType {
	return &NullableRateClassType{value: val, isSet: true}
}

func (v NullableRateClassType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateClassType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


