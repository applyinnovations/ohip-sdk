/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the CopyPackageCodeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyPackageCodeInfoType{}

// CopyPackageCodeInfoType The type gives details of the source package code to be copied along with information of the target where the package code is being copied. Details include source package code to be copied, the hotel code where the package code will be copied to, the name and description with which the package code will be copied under the target hotel code.
type CopyPackageCodeInfoType struct {
	CopyAs *CodeDescriptionType `json:"copyAs,omitempty"`
	// Source package code to be copied.
	SourcePackageCode *string `json:"sourcePackageCode,omitempty"`
	// Target hotel code where the package code will be copied to.
	TargetHotelCode *string `json:"targetHotelCode,omitempty"`
}

// NewCopyPackageCodeInfoType instantiates a new CopyPackageCodeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyPackageCodeInfoType() *CopyPackageCodeInfoType {
	this := CopyPackageCodeInfoType{}
	return &this
}

// NewCopyPackageCodeInfoTypeWithDefaults instantiates a new CopyPackageCodeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyPackageCodeInfoTypeWithDefaults() *CopyPackageCodeInfoType {
	this := CopyPackageCodeInfoType{}
	return &this
}

// GetCopyAs returns the CopyAs field value if set, zero value otherwise.
func (o *CopyPackageCodeInfoType) GetCopyAs() CodeDescriptionType {
	if o == nil || IsNil(o.CopyAs) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.CopyAs
}

// GetCopyAsOk returns a tuple with the CopyAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyPackageCodeInfoType) GetCopyAsOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.CopyAs) {
		return nil, false
	}
	return o.CopyAs, true
}

// HasCopyAs returns a boolean if a field has been set.
func (o *CopyPackageCodeInfoType) HasCopyAs() bool {
	if o != nil && !IsNil(o.CopyAs) {
		return true
	}

	return false
}

// SetCopyAs gets a reference to the given CodeDescriptionType and assigns it to the CopyAs field.
func (o *CopyPackageCodeInfoType) SetCopyAs(v CodeDescriptionType) {
	o.CopyAs = &v
}

// GetSourcePackageCode returns the SourcePackageCode field value if set, zero value otherwise.
func (o *CopyPackageCodeInfoType) GetSourcePackageCode() string {
	if o == nil || IsNil(o.SourcePackageCode) {
		var ret string
		return ret
	}
	return *o.SourcePackageCode
}

// GetSourcePackageCodeOk returns a tuple with the SourcePackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyPackageCodeInfoType) GetSourcePackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePackageCode) {
		return nil, false
	}
	return o.SourcePackageCode, true
}

// HasSourcePackageCode returns a boolean if a field has been set.
func (o *CopyPackageCodeInfoType) HasSourcePackageCode() bool {
	if o != nil && !IsNil(o.SourcePackageCode) {
		return true
	}

	return false
}

// SetSourcePackageCode gets a reference to the given string and assigns it to the SourcePackageCode field.
func (o *CopyPackageCodeInfoType) SetSourcePackageCode(v string) {
	o.SourcePackageCode = &v
}

// GetTargetHotelCode returns the TargetHotelCode field value if set, zero value otherwise.
func (o *CopyPackageCodeInfoType) GetTargetHotelCode() string {
	if o == nil || IsNil(o.TargetHotelCode) {
		var ret string
		return ret
	}
	return *o.TargetHotelCode
}

// GetTargetHotelCodeOk returns a tuple with the TargetHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyPackageCodeInfoType) GetTargetHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TargetHotelCode) {
		return nil, false
	}
	return o.TargetHotelCode, true
}

// HasTargetHotelCode returns a boolean if a field has been set.
func (o *CopyPackageCodeInfoType) HasTargetHotelCode() bool {
	if o != nil && !IsNil(o.TargetHotelCode) {
		return true
	}

	return false
}

// SetTargetHotelCode gets a reference to the given string and assigns it to the TargetHotelCode field.
func (o *CopyPackageCodeInfoType) SetTargetHotelCode(v string) {
	o.TargetHotelCode = &v
}

func (o CopyPackageCodeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyPackageCodeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CopyAs) {
		toSerialize["copyAs"] = o.CopyAs
	}
	if !IsNil(o.SourcePackageCode) {
		toSerialize["sourcePackageCode"] = o.SourcePackageCode
	}
	if !IsNil(o.TargetHotelCode) {
		toSerialize["targetHotelCode"] = o.TargetHotelCode
	}
	return toSerialize, nil
}

type NullableCopyPackageCodeInfoType struct {
	value *CopyPackageCodeInfoType
	isSet bool
}

func (v NullableCopyPackageCodeInfoType) Get() *CopyPackageCodeInfoType {
	return v.value
}

func (v *NullableCopyPackageCodeInfoType) Set(val *CopyPackageCodeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyPackageCodeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyPackageCodeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyPackageCodeInfoType(val *CopyPackageCodeInfoType) *NullableCopyPackageCodeInfoType {
	return &NullableCopyPackageCodeInfoType{value: val, isSet: true}
}

func (v NullableCopyPackageCodeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyPackageCodeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


