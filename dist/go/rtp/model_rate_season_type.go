/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateSeasonType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateSeasonType{}

// RateSeasonType Base details common between hotel and template rate seasons.
type RateSeasonType struct {
	// Description of the rate season.
	Description *string `json:"description,omitempty"`
	DateRange *TimeSpanType `json:"dateRange,omitempty"`
	// Season code to identify the rate season.
	SeasonCode *string `json:"seasonCode,omitempty"`
	// Rate code associated with the rate season. When a rate code is provided, the season code is reserved exclusively for this rate code and cannot be used in other rate codes.
	ReservedForRateCode *string `json:"reservedForRateCode,omitempty"`
	// Hotel code that the rate season belongs to.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewRateSeasonType instantiates a new RateSeasonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateSeasonType() *RateSeasonType {
	this := RateSeasonType{}
	return &this
}

// NewRateSeasonTypeWithDefaults instantiates a new RateSeasonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateSeasonTypeWithDefaults() *RateSeasonType {
	this := RateSeasonType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RateSeasonType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateSeasonType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RateSeasonType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RateSeasonType) SetDescription(v string) {
	o.Description = &v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *RateSeasonType) GetDateRange() TimeSpanType {
	if o == nil || IsNil(o.DateRange) {
		var ret TimeSpanType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateSeasonType) GetDateRangeOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *RateSeasonType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given TimeSpanType and assigns it to the DateRange field.
func (o *RateSeasonType) SetDateRange(v TimeSpanType) {
	o.DateRange = &v
}

// GetSeasonCode returns the SeasonCode field value if set, zero value otherwise.
func (o *RateSeasonType) GetSeasonCode() string {
	if o == nil || IsNil(o.SeasonCode) {
		var ret string
		return ret
	}
	return *o.SeasonCode
}

// GetSeasonCodeOk returns a tuple with the SeasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateSeasonType) GetSeasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonCode) {
		return nil, false
	}
	return o.SeasonCode, true
}

// HasSeasonCode returns a boolean if a field has been set.
func (o *RateSeasonType) HasSeasonCode() bool {
	if o != nil && !IsNil(o.SeasonCode) {
		return true
	}

	return false
}

// SetSeasonCode gets a reference to the given string and assigns it to the SeasonCode field.
func (o *RateSeasonType) SetSeasonCode(v string) {
	o.SeasonCode = &v
}

// GetReservedForRateCode returns the ReservedForRateCode field value if set, zero value otherwise.
func (o *RateSeasonType) GetReservedForRateCode() string {
	if o == nil || IsNil(o.ReservedForRateCode) {
		var ret string
		return ret
	}
	return *o.ReservedForRateCode
}

// GetReservedForRateCodeOk returns a tuple with the ReservedForRateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateSeasonType) GetReservedForRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReservedForRateCode) {
		return nil, false
	}
	return o.ReservedForRateCode, true
}

// HasReservedForRateCode returns a boolean if a field has been set.
func (o *RateSeasonType) HasReservedForRateCode() bool {
	if o != nil && !IsNil(o.ReservedForRateCode) {
		return true
	}

	return false
}

// SetReservedForRateCode gets a reference to the given string and assigns it to the ReservedForRateCode field.
func (o *RateSeasonType) SetReservedForRateCode(v string) {
	o.ReservedForRateCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RateSeasonType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateSeasonType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RateSeasonType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RateSeasonType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o RateSeasonType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateSeasonType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.SeasonCode) {
		toSerialize["seasonCode"] = o.SeasonCode
	}
	if !IsNil(o.ReservedForRateCode) {
		toSerialize["reservedForRateCode"] = o.ReservedForRateCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableRateSeasonType struct {
	value *RateSeasonType
	isSet bool
}

func (v NullableRateSeasonType) Get() *RateSeasonType {
	return v.value
}

func (v *NullableRateSeasonType) Set(val *RateSeasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateSeasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateSeasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateSeasonType(val *RateSeasonType) *NullableRateSeasonType {
	return &NullableRateSeasonType{value: val, isSet: true}
}

func (v NullableRateSeasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateSeasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


