/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the TemplateRateSeasonType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateRateSeasonType{}

// TemplateRateSeasonType Base details common between hotel and template rate seasons.
type TemplateRateSeasonType struct {
	// Description of the rate season.
	Description *string `json:"description,omitempty"`
	DateRange *TimeSpanType `json:"dateRange,omitempty"`
	// Season code to identify the rate season.
	SeasonCode *string `json:"seasonCode,omitempty"`
}

// NewTemplateRateSeasonType instantiates a new TemplateRateSeasonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateRateSeasonType() *TemplateRateSeasonType {
	this := TemplateRateSeasonType{}
	return &this
}

// NewTemplateRateSeasonTypeWithDefaults instantiates a new TemplateRateSeasonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateRateSeasonTypeWithDefaults() *TemplateRateSeasonType {
	this := TemplateRateSeasonType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TemplateRateSeasonType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRateSeasonType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplateRateSeasonType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TemplateRateSeasonType) SetDescription(v string) {
	o.Description = &v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *TemplateRateSeasonType) GetDateRange() TimeSpanType {
	if o == nil || IsNil(o.DateRange) {
		var ret TimeSpanType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRateSeasonType) GetDateRangeOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *TemplateRateSeasonType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given TimeSpanType and assigns it to the DateRange field.
func (o *TemplateRateSeasonType) SetDateRange(v TimeSpanType) {
	o.DateRange = &v
}

// GetSeasonCode returns the SeasonCode field value if set, zero value otherwise.
func (o *TemplateRateSeasonType) GetSeasonCode() string {
	if o == nil || IsNil(o.SeasonCode) {
		var ret string
		return ret
	}
	return *o.SeasonCode
}

// GetSeasonCodeOk returns a tuple with the SeasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateRateSeasonType) GetSeasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonCode) {
		return nil, false
	}
	return o.SeasonCode, true
}

// HasSeasonCode returns a boolean if a field has been set.
func (o *TemplateRateSeasonType) HasSeasonCode() bool {
	if o != nil && !IsNil(o.SeasonCode) {
		return true
	}

	return false
}

// SetSeasonCode gets a reference to the given string and assigns it to the SeasonCode field.
func (o *TemplateRateSeasonType) SetSeasonCode(v string) {
	o.SeasonCode = &v
}

func (o TemplateRateSeasonType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateRateSeasonType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.SeasonCode) {
		toSerialize["seasonCode"] = o.SeasonCode
	}
	return toSerialize, nil
}

type NullableTemplateRateSeasonType struct {
	value *TemplateRateSeasonType
	isSet bool
}

func (v NullableTemplateRateSeasonType) Get() *TemplateRateSeasonType {
	return v.value
}

func (v *NullableTemplateRateSeasonType) Set(val *TemplateRateSeasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateRateSeasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateRateSeasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateRateSeasonType(val *TemplateRateSeasonType) *NullableTemplateRateSeasonType {
	return &NullableTemplateRateSeasonType{value: val, isSet: true}
}

func (v NullableTemplateRateSeasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateRateSeasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


