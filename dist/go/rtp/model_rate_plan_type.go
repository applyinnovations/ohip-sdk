/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanType{}

// RatePlanType The Rate plan code Details.
type RatePlanType struct {
	PrimaryDetails *RatePlanPrimaryDetailsType `json:"primaryDetails,omitempty"`
	Classifications *RatePlanClassificationsType `json:"classifications,omitempty"`
	TransactionDetails *RatePlanTransactionDetailsType `json:"transactionDetails,omitempty"`
	RateCommission *RatePlanCommissionType `json:"rateCommission,omitempty"`
	RateDeposit *RatePlanDepositType `json:"rateDeposit,omitempty"`
	Descriptions *RatePlanDescriptionsType `json:"descriptions,omitempty"`
	// Details of each room type
	RoomTypeList []RateRoomTypeDetailType `json:"roomTypeList,omitempty"`
	RatePackages *RatePackagesType `json:"ratePackages,omitempty"`
	NegotiatedRates *RatePlanTypeNegotiatedRates `json:"negotiatedRates,omitempty"`
	Controls *RatePlanControlsType `json:"controls,omitempty"`
	Distribution *RatePlanDistributionType `json:"distribution,omitempty"`
	// Collection of lamp indicators.
	RatePlanCodeIndicators []IndicatorType `json:"ratePlanCodeIndicators,omitempty"`
	// Rate plan type based on rates.
	RatePlanBasedOnRates []RatePlanBasedOnRateType `json:"ratePlanBasedOnRates,omitempty"`
	RatePlanScheduleInfo *RatePlanScheduleInfoType `json:"ratePlanScheduleInfo,omitempty"`
	// 
	ApprovalNotes []RatePlanNoteType `json:"approvalNotes,omitempty"`
	RoutingInstructions *RatePlanRoutingInstructionsType `json:"routingInstructions,omitempty"`
	ExternalAttributes *RatePlanExternalAttributesType `json:"externalAttributes,omitempty"`
	// List of access exclusions.
	AccessExclusions []RateAccessExclusionType `json:"accessExclusions,omitempty"`
	// This is a placeholder element for future use. Functionality may not be available for the current implementation.
	MobileCheckinAllowed *bool `json:"mobileCheckinAllowed,omitempty"`
	// This is a placeholder element for future use. Functionality may not be available for the current implementation.
	MobileCheckoutAllowed *bool `json:"mobileCheckoutAllowed,omitempty"`
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
	// Rate plan Code
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
	// Is rate amount suppressed for the rate plan?
	SupressRate *bool `json:"supressRate,omitempty"`
	// Is Rate amount printed on the reports for the rate plan?
	PrintRate *bool `json:"printRate,omitempty"`
	// Is rate plan code discounted?
	DiscountAllowed *bool `json:"discountAllowed,omitempty"`
	// Is redemption allowed on the rate code?
	Redemption *bool `json:"redemption,omitempty"`
	// Is rate plan code externally controlled?
	ExternallyControlled *bool `json:"externallyControlled,omitempty"`
	// Is rate plan code of BAR Rate type?
	BARRate *bool `json:"bARRate,omitempty"`
	// Is rate plan code a daily rate?
	Daily *bool `json:"daily,omitempty"`
	// Is rate plan code a tiered rate?
	Tiered *bool `json:"tiered,omitempty"`
	// Is rate plan code for day use?
	DayUse *bool `json:"dayUse,omitempty"`
	// Indicates if rate Calendar factors such as adder/multiplier should be used for price calculation.
	DayType *bool `json:"dayType,omitempty"`
	// Is rate plan code complimentary?
	Complimentary *bool `json:"complimentary,omitempty"`
	// Is rate plan code for house use?
	HouseUse *bool `json:"houseUse,omitempty"`
	// Is rate plan code only available as a negotiated rate that must be associated with a guest, company, or travel agent profile ?
	Negotiated *bool `json:"negotiated,omitempty"`
	// Is rate plan code flagged as an owner rate plan? Owner rate plans have special functionality for no-shows depending on the Rolling Noshow Preference application setting.
	OwnerRate *bool `json:"ownerRate,omitempty"`
	// Is rate plan code flagged as eligible for memberships? This flag controls whether the guest stay, which this rate plan is attached to, qualifies for point calculations for Frequent Flyer or Frequent Guest programs. If the rate plan associated to the reservation has not been flagged for Membership then the guest will not earn any points/miles for their stay.
	MembershipEligible *bool `json:"membershipEligible,omitempty"`
	// Flag to identify if Rate Code is Advanced Daily Base Rate Code
	AdvancedDailyBase *bool `json:"advancedDailyBase,omitempty"`
	// Flag to identify if Rate Code is Advanced Daily Rate
	AdvancedDailyRate *bool `json:"advancedDailyRate,omitempty"`
	// An amount that act as Floor value for Rate Plan.
	FloorAmount *float32 `json:"floorAmount,omitempty"`
}

// NewRatePlanType instantiates a new RatePlanType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanType() *RatePlanType {
	this := RatePlanType{}
	return &this
}

// NewRatePlanTypeWithDefaults instantiates a new RatePlanType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanTypeWithDefaults() *RatePlanType {
	this := RatePlanType{}
	return &this
}

// GetPrimaryDetails returns the PrimaryDetails field value if set, zero value otherwise.
func (o *RatePlanType) GetPrimaryDetails() RatePlanPrimaryDetailsType {
	if o == nil || IsNil(o.PrimaryDetails) {
		var ret RatePlanPrimaryDetailsType
		return ret
	}
	return *o.PrimaryDetails
}

// GetPrimaryDetailsOk returns a tuple with the PrimaryDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetPrimaryDetailsOk() (*RatePlanPrimaryDetailsType, bool) {
	if o == nil || IsNil(o.PrimaryDetails) {
		return nil, false
	}
	return o.PrimaryDetails, true
}

// HasPrimaryDetails returns a boolean if a field has been set.
func (o *RatePlanType) HasPrimaryDetails() bool {
	if o != nil && !IsNil(o.PrimaryDetails) {
		return true
	}

	return false
}

// SetPrimaryDetails gets a reference to the given RatePlanPrimaryDetailsType and assigns it to the PrimaryDetails field.
func (o *RatePlanType) SetPrimaryDetails(v RatePlanPrimaryDetailsType) {
	o.PrimaryDetails = &v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *RatePlanType) GetClassifications() RatePlanClassificationsType {
	if o == nil || IsNil(o.Classifications) {
		var ret RatePlanClassificationsType
		return ret
	}
	return *o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetClassificationsOk() (*RatePlanClassificationsType, bool) {
	if o == nil || IsNil(o.Classifications) {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *RatePlanType) HasClassifications() bool {
	if o != nil && !IsNil(o.Classifications) {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given RatePlanClassificationsType and assigns it to the Classifications field.
func (o *RatePlanType) SetClassifications(v RatePlanClassificationsType) {
	o.Classifications = &v
}

// GetTransactionDetails returns the TransactionDetails field value if set, zero value otherwise.
func (o *RatePlanType) GetTransactionDetails() RatePlanTransactionDetailsType {
	if o == nil || IsNil(o.TransactionDetails) {
		var ret RatePlanTransactionDetailsType
		return ret
	}
	return *o.TransactionDetails
}

// GetTransactionDetailsOk returns a tuple with the TransactionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetTransactionDetailsOk() (*RatePlanTransactionDetailsType, bool) {
	if o == nil || IsNil(o.TransactionDetails) {
		return nil, false
	}
	return o.TransactionDetails, true
}

// HasTransactionDetails returns a boolean if a field has been set.
func (o *RatePlanType) HasTransactionDetails() bool {
	if o != nil && !IsNil(o.TransactionDetails) {
		return true
	}

	return false
}

// SetTransactionDetails gets a reference to the given RatePlanTransactionDetailsType and assigns it to the TransactionDetails field.
func (o *RatePlanType) SetTransactionDetails(v RatePlanTransactionDetailsType) {
	o.TransactionDetails = &v
}

// GetRateCommission returns the RateCommission field value if set, zero value otherwise.
func (o *RatePlanType) GetRateCommission() RatePlanCommissionType {
	if o == nil || IsNil(o.RateCommission) {
		var ret RatePlanCommissionType
		return ret
	}
	return *o.RateCommission
}

// GetRateCommissionOk returns a tuple with the RateCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRateCommissionOk() (*RatePlanCommissionType, bool) {
	if o == nil || IsNil(o.RateCommission) {
		return nil, false
	}
	return o.RateCommission, true
}

// HasRateCommission returns a boolean if a field has been set.
func (o *RatePlanType) HasRateCommission() bool {
	if o != nil && !IsNil(o.RateCommission) {
		return true
	}

	return false
}

// SetRateCommission gets a reference to the given RatePlanCommissionType and assigns it to the RateCommission field.
func (o *RatePlanType) SetRateCommission(v RatePlanCommissionType) {
	o.RateCommission = &v
}

// GetRateDeposit returns the RateDeposit field value if set, zero value otherwise.
func (o *RatePlanType) GetRateDeposit() RatePlanDepositType {
	if o == nil || IsNil(o.RateDeposit) {
		var ret RatePlanDepositType
		return ret
	}
	return *o.RateDeposit
}

// GetRateDepositOk returns a tuple with the RateDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRateDepositOk() (*RatePlanDepositType, bool) {
	if o == nil || IsNil(o.RateDeposit) {
		return nil, false
	}
	return o.RateDeposit, true
}

// HasRateDeposit returns a boolean if a field has been set.
func (o *RatePlanType) HasRateDeposit() bool {
	if o != nil && !IsNil(o.RateDeposit) {
		return true
	}

	return false
}

// SetRateDeposit gets a reference to the given RatePlanDepositType and assigns it to the RateDeposit field.
func (o *RatePlanType) SetRateDeposit(v RatePlanDepositType) {
	o.RateDeposit = &v
}

// GetDescriptions returns the Descriptions field value if set, zero value otherwise.
func (o *RatePlanType) GetDescriptions() RatePlanDescriptionsType {
	if o == nil || IsNil(o.Descriptions) {
		var ret RatePlanDescriptionsType
		return ret
	}
	return *o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetDescriptionsOk() (*RatePlanDescriptionsType, bool) {
	if o == nil || IsNil(o.Descriptions) {
		return nil, false
	}
	return o.Descriptions, true
}

// HasDescriptions returns a boolean if a field has been set.
func (o *RatePlanType) HasDescriptions() bool {
	if o != nil && !IsNil(o.Descriptions) {
		return true
	}

	return false
}

// SetDescriptions gets a reference to the given RatePlanDescriptionsType and assigns it to the Descriptions field.
func (o *RatePlanType) SetDescriptions(v RatePlanDescriptionsType) {
	o.Descriptions = &v
}

// GetRoomTypeList returns the RoomTypeList field value if set, zero value otherwise.
func (o *RatePlanType) GetRoomTypeList() []RateRoomTypeDetailType {
	if o == nil || IsNil(o.RoomTypeList) {
		var ret []RateRoomTypeDetailType
		return ret
	}
	return o.RoomTypeList
}

// GetRoomTypeListOk returns a tuple with the RoomTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRoomTypeListOk() ([]RateRoomTypeDetailType, bool) {
	if o == nil || IsNil(o.RoomTypeList) {
		return nil, false
	}
	return o.RoomTypeList, true
}

// HasRoomTypeList returns a boolean if a field has been set.
func (o *RatePlanType) HasRoomTypeList() bool {
	if o != nil && !IsNil(o.RoomTypeList) {
		return true
	}

	return false
}

// SetRoomTypeList gets a reference to the given []RateRoomTypeDetailType and assigns it to the RoomTypeList field.
func (o *RatePlanType) SetRoomTypeList(v []RateRoomTypeDetailType) {
	o.RoomTypeList = v
}

// GetRatePackages returns the RatePackages field value if set, zero value otherwise.
func (o *RatePlanType) GetRatePackages() RatePackagesType {
	if o == nil || IsNil(o.RatePackages) {
		var ret RatePackagesType
		return ret
	}
	return *o.RatePackages
}

// GetRatePackagesOk returns a tuple with the RatePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRatePackagesOk() (*RatePackagesType, bool) {
	if o == nil || IsNil(o.RatePackages) {
		return nil, false
	}
	return o.RatePackages, true
}

// HasRatePackages returns a boolean if a field has been set.
func (o *RatePlanType) HasRatePackages() bool {
	if o != nil && !IsNil(o.RatePackages) {
		return true
	}

	return false
}

// SetRatePackages gets a reference to the given RatePackagesType and assigns it to the RatePackages field.
func (o *RatePlanType) SetRatePackages(v RatePackagesType) {
	o.RatePackages = &v
}

// GetNegotiatedRates returns the NegotiatedRates field value if set, zero value otherwise.
func (o *RatePlanType) GetNegotiatedRates() RatePlanTypeNegotiatedRates {
	if o == nil || IsNil(o.NegotiatedRates) {
		var ret RatePlanTypeNegotiatedRates
		return ret
	}
	return *o.NegotiatedRates
}

// GetNegotiatedRatesOk returns a tuple with the NegotiatedRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetNegotiatedRatesOk() (*RatePlanTypeNegotiatedRates, bool) {
	if o == nil || IsNil(o.NegotiatedRates) {
		return nil, false
	}
	return o.NegotiatedRates, true
}

// HasNegotiatedRates returns a boolean if a field has been set.
func (o *RatePlanType) HasNegotiatedRates() bool {
	if o != nil && !IsNil(o.NegotiatedRates) {
		return true
	}

	return false
}

// SetNegotiatedRates gets a reference to the given RatePlanTypeNegotiatedRates and assigns it to the NegotiatedRates field.
func (o *RatePlanType) SetNegotiatedRates(v RatePlanTypeNegotiatedRates) {
	o.NegotiatedRates = &v
}

// GetControls returns the Controls field value if set, zero value otherwise.
func (o *RatePlanType) GetControls() RatePlanControlsType {
	if o == nil || IsNil(o.Controls) {
		var ret RatePlanControlsType
		return ret
	}
	return *o.Controls
}

// GetControlsOk returns a tuple with the Controls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetControlsOk() (*RatePlanControlsType, bool) {
	if o == nil || IsNil(o.Controls) {
		return nil, false
	}
	return o.Controls, true
}

// HasControls returns a boolean if a field has been set.
func (o *RatePlanType) HasControls() bool {
	if o != nil && !IsNil(o.Controls) {
		return true
	}

	return false
}

// SetControls gets a reference to the given RatePlanControlsType and assigns it to the Controls field.
func (o *RatePlanType) SetControls(v RatePlanControlsType) {
	o.Controls = &v
}

// GetDistribution returns the Distribution field value if set, zero value otherwise.
func (o *RatePlanType) GetDistribution() RatePlanDistributionType {
	if o == nil || IsNil(o.Distribution) {
		var ret RatePlanDistributionType
		return ret
	}
	return *o.Distribution
}

// GetDistributionOk returns a tuple with the Distribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetDistributionOk() (*RatePlanDistributionType, bool) {
	if o == nil || IsNil(o.Distribution) {
		return nil, false
	}
	return o.Distribution, true
}

// HasDistribution returns a boolean if a field has been set.
func (o *RatePlanType) HasDistribution() bool {
	if o != nil && !IsNil(o.Distribution) {
		return true
	}

	return false
}

// SetDistribution gets a reference to the given RatePlanDistributionType and assigns it to the Distribution field.
func (o *RatePlanType) SetDistribution(v RatePlanDistributionType) {
	o.Distribution = &v
}

// GetRatePlanCodeIndicators returns the RatePlanCodeIndicators field value if set, zero value otherwise.
func (o *RatePlanType) GetRatePlanCodeIndicators() []IndicatorType {
	if o == nil || IsNil(o.RatePlanCodeIndicators) {
		var ret []IndicatorType
		return ret
	}
	return o.RatePlanCodeIndicators
}

// GetRatePlanCodeIndicatorsOk returns a tuple with the RatePlanCodeIndicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRatePlanCodeIndicatorsOk() ([]IndicatorType, bool) {
	if o == nil || IsNil(o.RatePlanCodeIndicators) {
		return nil, false
	}
	return o.RatePlanCodeIndicators, true
}

// HasRatePlanCodeIndicators returns a boolean if a field has been set.
func (o *RatePlanType) HasRatePlanCodeIndicators() bool {
	if o != nil && !IsNil(o.RatePlanCodeIndicators) {
		return true
	}

	return false
}

// SetRatePlanCodeIndicators gets a reference to the given []IndicatorType and assigns it to the RatePlanCodeIndicators field.
func (o *RatePlanType) SetRatePlanCodeIndicators(v []IndicatorType) {
	o.RatePlanCodeIndicators = v
}

// GetRatePlanBasedOnRates returns the RatePlanBasedOnRates field value if set, zero value otherwise.
func (o *RatePlanType) GetRatePlanBasedOnRates() []RatePlanBasedOnRateType {
	if o == nil || IsNil(o.RatePlanBasedOnRates) {
		var ret []RatePlanBasedOnRateType
		return ret
	}
	return o.RatePlanBasedOnRates
}

// GetRatePlanBasedOnRatesOk returns a tuple with the RatePlanBasedOnRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRatePlanBasedOnRatesOk() ([]RatePlanBasedOnRateType, bool) {
	if o == nil || IsNil(o.RatePlanBasedOnRates) {
		return nil, false
	}
	return o.RatePlanBasedOnRates, true
}

// HasRatePlanBasedOnRates returns a boolean if a field has been set.
func (o *RatePlanType) HasRatePlanBasedOnRates() bool {
	if o != nil && !IsNil(o.RatePlanBasedOnRates) {
		return true
	}

	return false
}

// SetRatePlanBasedOnRates gets a reference to the given []RatePlanBasedOnRateType and assigns it to the RatePlanBasedOnRates field.
func (o *RatePlanType) SetRatePlanBasedOnRates(v []RatePlanBasedOnRateType) {
	o.RatePlanBasedOnRates = v
}

// GetRatePlanScheduleInfo returns the RatePlanScheduleInfo field value if set, zero value otherwise.
func (o *RatePlanType) GetRatePlanScheduleInfo() RatePlanScheduleInfoType {
	if o == nil || IsNil(o.RatePlanScheduleInfo) {
		var ret RatePlanScheduleInfoType
		return ret
	}
	return *o.RatePlanScheduleInfo
}

// GetRatePlanScheduleInfoOk returns a tuple with the RatePlanScheduleInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRatePlanScheduleInfoOk() (*RatePlanScheduleInfoType, bool) {
	if o == nil || IsNil(o.RatePlanScheduleInfo) {
		return nil, false
	}
	return o.RatePlanScheduleInfo, true
}

// HasRatePlanScheduleInfo returns a boolean if a field has been set.
func (o *RatePlanType) HasRatePlanScheduleInfo() bool {
	if o != nil && !IsNil(o.RatePlanScheduleInfo) {
		return true
	}

	return false
}

// SetRatePlanScheduleInfo gets a reference to the given RatePlanScheduleInfoType and assigns it to the RatePlanScheduleInfo field.
func (o *RatePlanType) SetRatePlanScheduleInfo(v RatePlanScheduleInfoType) {
	o.RatePlanScheduleInfo = &v
}

// GetApprovalNotes returns the ApprovalNotes field value if set, zero value otherwise.
func (o *RatePlanType) GetApprovalNotes() []RatePlanNoteType {
	if o == nil || IsNil(o.ApprovalNotes) {
		var ret []RatePlanNoteType
		return ret
	}
	return o.ApprovalNotes
}

// GetApprovalNotesOk returns a tuple with the ApprovalNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetApprovalNotesOk() ([]RatePlanNoteType, bool) {
	if o == nil || IsNil(o.ApprovalNotes) {
		return nil, false
	}
	return o.ApprovalNotes, true
}

// HasApprovalNotes returns a boolean if a field has been set.
func (o *RatePlanType) HasApprovalNotes() bool {
	if o != nil && !IsNil(o.ApprovalNotes) {
		return true
	}

	return false
}

// SetApprovalNotes gets a reference to the given []RatePlanNoteType and assigns it to the ApprovalNotes field.
func (o *RatePlanType) SetApprovalNotes(v []RatePlanNoteType) {
	o.ApprovalNotes = v
}

// GetRoutingInstructions returns the RoutingInstructions field value if set, zero value otherwise.
func (o *RatePlanType) GetRoutingInstructions() RatePlanRoutingInstructionsType {
	if o == nil || IsNil(o.RoutingInstructions) {
		var ret RatePlanRoutingInstructionsType
		return ret
	}
	return *o.RoutingInstructions
}

// GetRoutingInstructionsOk returns a tuple with the RoutingInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRoutingInstructionsOk() (*RatePlanRoutingInstructionsType, bool) {
	if o == nil || IsNil(o.RoutingInstructions) {
		return nil, false
	}
	return o.RoutingInstructions, true
}

// HasRoutingInstructions returns a boolean if a field has been set.
func (o *RatePlanType) HasRoutingInstructions() bool {
	if o != nil && !IsNil(o.RoutingInstructions) {
		return true
	}

	return false
}

// SetRoutingInstructions gets a reference to the given RatePlanRoutingInstructionsType and assigns it to the RoutingInstructions field.
func (o *RatePlanType) SetRoutingInstructions(v RatePlanRoutingInstructionsType) {
	o.RoutingInstructions = &v
}

// GetExternalAttributes returns the ExternalAttributes field value if set, zero value otherwise.
func (o *RatePlanType) GetExternalAttributes() RatePlanExternalAttributesType {
	if o == nil || IsNil(o.ExternalAttributes) {
		var ret RatePlanExternalAttributesType
		return ret
	}
	return *o.ExternalAttributes
}

// GetExternalAttributesOk returns a tuple with the ExternalAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetExternalAttributesOk() (*RatePlanExternalAttributesType, bool) {
	if o == nil || IsNil(o.ExternalAttributes) {
		return nil, false
	}
	return o.ExternalAttributes, true
}

// HasExternalAttributes returns a boolean if a field has been set.
func (o *RatePlanType) HasExternalAttributes() bool {
	if o != nil && !IsNil(o.ExternalAttributes) {
		return true
	}

	return false
}

// SetExternalAttributes gets a reference to the given RatePlanExternalAttributesType and assigns it to the ExternalAttributes field.
func (o *RatePlanType) SetExternalAttributes(v RatePlanExternalAttributesType) {
	o.ExternalAttributes = &v
}

// GetAccessExclusions returns the AccessExclusions field value if set, zero value otherwise.
func (o *RatePlanType) GetAccessExclusions() []RateAccessExclusionType {
	if o == nil || IsNil(o.AccessExclusions) {
		var ret []RateAccessExclusionType
		return ret
	}
	return o.AccessExclusions
}

// GetAccessExclusionsOk returns a tuple with the AccessExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetAccessExclusionsOk() ([]RateAccessExclusionType, bool) {
	if o == nil || IsNil(o.AccessExclusions) {
		return nil, false
	}
	return o.AccessExclusions, true
}

// HasAccessExclusions returns a boolean if a field has been set.
func (o *RatePlanType) HasAccessExclusions() bool {
	if o != nil && !IsNil(o.AccessExclusions) {
		return true
	}

	return false
}

// SetAccessExclusions gets a reference to the given []RateAccessExclusionType and assigns it to the AccessExclusions field.
func (o *RatePlanType) SetAccessExclusions(v []RateAccessExclusionType) {
	o.AccessExclusions = v
}

// GetMobileCheckinAllowed returns the MobileCheckinAllowed field value if set, zero value otherwise.
func (o *RatePlanType) GetMobileCheckinAllowed() bool {
	if o == nil || IsNil(o.MobileCheckinAllowed) {
		var ret bool
		return ret
	}
	return *o.MobileCheckinAllowed
}

// GetMobileCheckinAllowedOk returns a tuple with the MobileCheckinAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetMobileCheckinAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.MobileCheckinAllowed) {
		return nil, false
	}
	return o.MobileCheckinAllowed, true
}

// HasMobileCheckinAllowed returns a boolean if a field has been set.
func (o *RatePlanType) HasMobileCheckinAllowed() bool {
	if o != nil && !IsNil(o.MobileCheckinAllowed) {
		return true
	}

	return false
}

// SetMobileCheckinAllowed gets a reference to the given bool and assigns it to the MobileCheckinAllowed field.
func (o *RatePlanType) SetMobileCheckinAllowed(v bool) {
	o.MobileCheckinAllowed = &v
}

// GetMobileCheckoutAllowed returns the MobileCheckoutAllowed field value if set, zero value otherwise.
func (o *RatePlanType) GetMobileCheckoutAllowed() bool {
	if o == nil || IsNil(o.MobileCheckoutAllowed) {
		var ret bool
		return ret
	}
	return *o.MobileCheckoutAllowed
}

// GetMobileCheckoutAllowedOk returns a tuple with the MobileCheckoutAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetMobileCheckoutAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.MobileCheckoutAllowed) {
		return nil, false
	}
	return o.MobileCheckoutAllowed, true
}

// HasMobileCheckoutAllowed returns a boolean if a field has been set.
func (o *RatePlanType) HasMobileCheckoutAllowed() bool {
	if o != nil && !IsNil(o.MobileCheckoutAllowed) {
		return true
	}

	return false
}

// SetMobileCheckoutAllowed gets a reference to the given bool and assigns it to the MobileCheckoutAllowed field.
func (o *RatePlanType) SetMobileCheckoutAllowed(v bool) {
	o.MobileCheckoutAllowed = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RatePlanType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RatePlanType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RatePlanType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *RatePlanType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *RatePlanType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *RatePlanType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *RatePlanType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *RatePlanType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *RatePlanType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *RatePlanType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *RatePlanType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *RatePlanType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *RatePlanType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *RatePlanType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *RatePlanType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *RatePlanType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *RatePlanType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *RatePlanType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *RatePlanType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *RatePlanType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *RatePlanType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

// GetSupressRate returns the SupressRate field value if set, zero value otherwise.
func (o *RatePlanType) GetSupressRate() bool {
	if o == nil || IsNil(o.SupressRate) {
		var ret bool
		return ret
	}
	return *o.SupressRate
}

// GetSupressRateOk returns a tuple with the SupressRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetSupressRateOk() (*bool, bool) {
	if o == nil || IsNil(o.SupressRate) {
		return nil, false
	}
	return o.SupressRate, true
}

// HasSupressRate returns a boolean if a field has been set.
func (o *RatePlanType) HasSupressRate() bool {
	if o != nil && !IsNil(o.SupressRate) {
		return true
	}

	return false
}

// SetSupressRate gets a reference to the given bool and assigns it to the SupressRate field.
func (o *RatePlanType) SetSupressRate(v bool) {
	o.SupressRate = &v
}

// GetPrintRate returns the PrintRate field value if set, zero value otherwise.
func (o *RatePlanType) GetPrintRate() bool {
	if o == nil || IsNil(o.PrintRate) {
		var ret bool
		return ret
	}
	return *o.PrintRate
}

// GetPrintRateOk returns a tuple with the PrintRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetPrintRateOk() (*bool, bool) {
	if o == nil || IsNil(o.PrintRate) {
		return nil, false
	}
	return o.PrintRate, true
}

// HasPrintRate returns a boolean if a field has been set.
func (o *RatePlanType) HasPrintRate() bool {
	if o != nil && !IsNil(o.PrintRate) {
		return true
	}

	return false
}

// SetPrintRate gets a reference to the given bool and assigns it to the PrintRate field.
func (o *RatePlanType) SetPrintRate(v bool) {
	o.PrintRate = &v
}

// GetDiscountAllowed returns the DiscountAllowed field value if set, zero value otherwise.
func (o *RatePlanType) GetDiscountAllowed() bool {
	if o == nil || IsNil(o.DiscountAllowed) {
		var ret bool
		return ret
	}
	return *o.DiscountAllowed
}

// GetDiscountAllowedOk returns a tuple with the DiscountAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetDiscountAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscountAllowed) {
		return nil, false
	}
	return o.DiscountAllowed, true
}

// HasDiscountAllowed returns a boolean if a field has been set.
func (o *RatePlanType) HasDiscountAllowed() bool {
	if o != nil && !IsNil(o.DiscountAllowed) {
		return true
	}

	return false
}

// SetDiscountAllowed gets a reference to the given bool and assigns it to the DiscountAllowed field.
func (o *RatePlanType) SetDiscountAllowed(v bool) {
	o.DiscountAllowed = &v
}

// GetRedemption returns the Redemption field value if set, zero value otherwise.
func (o *RatePlanType) GetRedemption() bool {
	if o == nil || IsNil(o.Redemption) {
		var ret bool
		return ret
	}
	return *o.Redemption
}

// GetRedemptionOk returns a tuple with the Redemption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetRedemptionOk() (*bool, bool) {
	if o == nil || IsNil(o.Redemption) {
		return nil, false
	}
	return o.Redemption, true
}

// HasRedemption returns a boolean if a field has been set.
func (o *RatePlanType) HasRedemption() bool {
	if o != nil && !IsNil(o.Redemption) {
		return true
	}

	return false
}

// SetRedemption gets a reference to the given bool and assigns it to the Redemption field.
func (o *RatePlanType) SetRedemption(v bool) {
	o.Redemption = &v
}

// GetExternallyControlled returns the ExternallyControlled field value if set, zero value otherwise.
func (o *RatePlanType) GetExternallyControlled() bool {
	if o == nil || IsNil(o.ExternallyControlled) {
		var ret bool
		return ret
	}
	return *o.ExternallyControlled
}

// GetExternallyControlledOk returns a tuple with the ExternallyControlled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetExternallyControlledOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternallyControlled) {
		return nil, false
	}
	return o.ExternallyControlled, true
}

// HasExternallyControlled returns a boolean if a field has been set.
func (o *RatePlanType) HasExternallyControlled() bool {
	if o != nil && !IsNil(o.ExternallyControlled) {
		return true
	}

	return false
}

// SetExternallyControlled gets a reference to the given bool and assigns it to the ExternallyControlled field.
func (o *RatePlanType) SetExternallyControlled(v bool) {
	o.ExternallyControlled = &v
}

// GetBARRate returns the BARRate field value if set, zero value otherwise.
func (o *RatePlanType) GetBARRate() bool {
	if o == nil || IsNil(o.BARRate) {
		var ret bool
		return ret
	}
	return *o.BARRate
}

// GetBARRateOk returns a tuple with the BARRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetBARRateOk() (*bool, bool) {
	if o == nil || IsNil(o.BARRate) {
		return nil, false
	}
	return o.BARRate, true
}

// HasBARRate returns a boolean if a field has been set.
func (o *RatePlanType) HasBARRate() bool {
	if o != nil && !IsNil(o.BARRate) {
		return true
	}

	return false
}

// SetBARRate gets a reference to the given bool and assigns it to the BARRate field.
func (o *RatePlanType) SetBARRate(v bool) {
	o.BARRate = &v
}

// GetDaily returns the Daily field value if set, zero value otherwise.
func (o *RatePlanType) GetDaily() bool {
	if o == nil || IsNil(o.Daily) {
		var ret bool
		return ret
	}
	return *o.Daily
}

// GetDailyOk returns a tuple with the Daily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetDailyOk() (*bool, bool) {
	if o == nil || IsNil(o.Daily) {
		return nil, false
	}
	return o.Daily, true
}

// HasDaily returns a boolean if a field has been set.
func (o *RatePlanType) HasDaily() bool {
	if o != nil && !IsNil(o.Daily) {
		return true
	}

	return false
}

// SetDaily gets a reference to the given bool and assigns it to the Daily field.
func (o *RatePlanType) SetDaily(v bool) {
	o.Daily = &v
}

// GetTiered returns the Tiered field value if set, zero value otherwise.
func (o *RatePlanType) GetTiered() bool {
	if o == nil || IsNil(o.Tiered) {
		var ret bool
		return ret
	}
	return *o.Tiered
}

// GetTieredOk returns a tuple with the Tiered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetTieredOk() (*bool, bool) {
	if o == nil || IsNil(o.Tiered) {
		return nil, false
	}
	return o.Tiered, true
}

// HasTiered returns a boolean if a field has been set.
func (o *RatePlanType) HasTiered() bool {
	if o != nil && !IsNil(o.Tiered) {
		return true
	}

	return false
}

// SetTiered gets a reference to the given bool and assigns it to the Tiered field.
func (o *RatePlanType) SetTiered(v bool) {
	o.Tiered = &v
}

// GetDayUse returns the DayUse field value if set, zero value otherwise.
func (o *RatePlanType) GetDayUse() bool {
	if o == nil || IsNil(o.DayUse) {
		var ret bool
		return ret
	}
	return *o.DayUse
}

// GetDayUseOk returns a tuple with the DayUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetDayUseOk() (*bool, bool) {
	if o == nil || IsNil(o.DayUse) {
		return nil, false
	}
	return o.DayUse, true
}

// HasDayUse returns a boolean if a field has been set.
func (o *RatePlanType) HasDayUse() bool {
	if o != nil && !IsNil(o.DayUse) {
		return true
	}

	return false
}

// SetDayUse gets a reference to the given bool and assigns it to the DayUse field.
func (o *RatePlanType) SetDayUse(v bool) {
	o.DayUse = &v
}

// GetDayType returns the DayType field value if set, zero value otherwise.
func (o *RatePlanType) GetDayType() bool {
	if o == nil || IsNil(o.DayType) {
		var ret bool
		return ret
	}
	return *o.DayType
}

// GetDayTypeOk returns a tuple with the DayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetDayTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.DayType) {
		return nil, false
	}
	return o.DayType, true
}

// HasDayType returns a boolean if a field has been set.
func (o *RatePlanType) HasDayType() bool {
	if o != nil && !IsNil(o.DayType) {
		return true
	}

	return false
}

// SetDayType gets a reference to the given bool and assigns it to the DayType field.
func (o *RatePlanType) SetDayType(v bool) {
	o.DayType = &v
}

// GetComplimentary returns the Complimentary field value if set, zero value otherwise.
func (o *RatePlanType) GetComplimentary() bool {
	if o == nil || IsNil(o.Complimentary) {
		var ret bool
		return ret
	}
	return *o.Complimentary
}

// GetComplimentaryOk returns a tuple with the Complimentary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetComplimentaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Complimentary) {
		return nil, false
	}
	return o.Complimentary, true
}

// HasComplimentary returns a boolean if a field has been set.
func (o *RatePlanType) HasComplimentary() bool {
	if o != nil && !IsNil(o.Complimentary) {
		return true
	}

	return false
}

// SetComplimentary gets a reference to the given bool and assigns it to the Complimentary field.
func (o *RatePlanType) SetComplimentary(v bool) {
	o.Complimentary = &v
}

// GetHouseUse returns the HouseUse field value if set, zero value otherwise.
func (o *RatePlanType) GetHouseUse() bool {
	if o == nil || IsNil(o.HouseUse) {
		var ret bool
		return ret
	}
	return *o.HouseUse
}

// GetHouseUseOk returns a tuple with the HouseUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetHouseUseOk() (*bool, bool) {
	if o == nil || IsNil(o.HouseUse) {
		return nil, false
	}
	return o.HouseUse, true
}

// HasHouseUse returns a boolean if a field has been set.
func (o *RatePlanType) HasHouseUse() bool {
	if o != nil && !IsNil(o.HouseUse) {
		return true
	}

	return false
}

// SetHouseUse gets a reference to the given bool and assigns it to the HouseUse field.
func (o *RatePlanType) SetHouseUse(v bool) {
	o.HouseUse = &v
}

// GetNegotiated returns the Negotiated field value if set, zero value otherwise.
func (o *RatePlanType) GetNegotiated() bool {
	if o == nil || IsNil(o.Negotiated) {
		var ret bool
		return ret
	}
	return *o.Negotiated
}

// GetNegotiatedOk returns a tuple with the Negotiated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetNegotiatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Negotiated) {
		return nil, false
	}
	return o.Negotiated, true
}

// HasNegotiated returns a boolean if a field has been set.
func (o *RatePlanType) HasNegotiated() bool {
	if o != nil && !IsNil(o.Negotiated) {
		return true
	}

	return false
}

// SetNegotiated gets a reference to the given bool and assigns it to the Negotiated field.
func (o *RatePlanType) SetNegotiated(v bool) {
	o.Negotiated = &v
}

// GetOwnerRate returns the OwnerRate field value if set, zero value otherwise.
func (o *RatePlanType) GetOwnerRate() bool {
	if o == nil || IsNil(o.OwnerRate) {
		var ret bool
		return ret
	}
	return *o.OwnerRate
}

// GetOwnerRateOk returns a tuple with the OwnerRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetOwnerRateOk() (*bool, bool) {
	if o == nil || IsNil(o.OwnerRate) {
		return nil, false
	}
	return o.OwnerRate, true
}

// HasOwnerRate returns a boolean if a field has been set.
func (o *RatePlanType) HasOwnerRate() bool {
	if o != nil && !IsNil(o.OwnerRate) {
		return true
	}

	return false
}

// SetOwnerRate gets a reference to the given bool and assigns it to the OwnerRate field.
func (o *RatePlanType) SetOwnerRate(v bool) {
	o.OwnerRate = &v
}

// GetMembershipEligible returns the MembershipEligible field value if set, zero value otherwise.
func (o *RatePlanType) GetMembershipEligible() bool {
	if o == nil || IsNil(o.MembershipEligible) {
		var ret bool
		return ret
	}
	return *o.MembershipEligible
}

// GetMembershipEligibleOk returns a tuple with the MembershipEligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetMembershipEligibleOk() (*bool, bool) {
	if o == nil || IsNil(o.MembershipEligible) {
		return nil, false
	}
	return o.MembershipEligible, true
}

// HasMembershipEligible returns a boolean if a field has been set.
func (o *RatePlanType) HasMembershipEligible() bool {
	if o != nil && !IsNil(o.MembershipEligible) {
		return true
	}

	return false
}

// SetMembershipEligible gets a reference to the given bool and assigns it to the MembershipEligible field.
func (o *RatePlanType) SetMembershipEligible(v bool) {
	o.MembershipEligible = &v
}

// GetAdvancedDailyBase returns the AdvancedDailyBase field value if set, zero value otherwise.
func (o *RatePlanType) GetAdvancedDailyBase() bool {
	if o == nil || IsNil(o.AdvancedDailyBase) {
		var ret bool
		return ret
	}
	return *o.AdvancedDailyBase
}

// GetAdvancedDailyBaseOk returns a tuple with the AdvancedDailyBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetAdvancedDailyBaseOk() (*bool, bool) {
	if o == nil || IsNil(o.AdvancedDailyBase) {
		return nil, false
	}
	return o.AdvancedDailyBase, true
}

// HasAdvancedDailyBase returns a boolean if a field has been set.
func (o *RatePlanType) HasAdvancedDailyBase() bool {
	if o != nil && !IsNil(o.AdvancedDailyBase) {
		return true
	}

	return false
}

// SetAdvancedDailyBase gets a reference to the given bool and assigns it to the AdvancedDailyBase field.
func (o *RatePlanType) SetAdvancedDailyBase(v bool) {
	o.AdvancedDailyBase = &v
}

// GetAdvancedDailyRate returns the AdvancedDailyRate field value if set, zero value otherwise.
func (o *RatePlanType) GetAdvancedDailyRate() bool {
	if o == nil || IsNil(o.AdvancedDailyRate) {
		var ret bool
		return ret
	}
	return *o.AdvancedDailyRate
}

// GetAdvancedDailyRateOk returns a tuple with the AdvancedDailyRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetAdvancedDailyRateOk() (*bool, bool) {
	if o == nil || IsNil(o.AdvancedDailyRate) {
		return nil, false
	}
	return o.AdvancedDailyRate, true
}

// HasAdvancedDailyRate returns a boolean if a field has been set.
func (o *RatePlanType) HasAdvancedDailyRate() bool {
	if o != nil && !IsNil(o.AdvancedDailyRate) {
		return true
	}

	return false
}

// SetAdvancedDailyRate gets a reference to the given bool and assigns it to the AdvancedDailyRate field.
func (o *RatePlanType) SetAdvancedDailyRate(v bool) {
	o.AdvancedDailyRate = &v
}

// GetFloorAmount returns the FloorAmount field value if set, zero value otherwise.
func (o *RatePlanType) GetFloorAmount() float32 {
	if o == nil || IsNil(o.FloorAmount) {
		var ret float32
		return ret
	}
	return *o.FloorAmount
}

// GetFloorAmountOk returns a tuple with the FloorAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanType) GetFloorAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.FloorAmount) {
		return nil, false
	}
	return o.FloorAmount, true
}

// HasFloorAmount returns a boolean if a field has been set.
func (o *RatePlanType) HasFloorAmount() bool {
	if o != nil && !IsNil(o.FloorAmount) {
		return true
	}

	return false
}

// SetFloorAmount gets a reference to the given float32 and assigns it to the FloorAmount field.
func (o *RatePlanType) SetFloorAmount(v float32) {
	o.FloorAmount = &v
}

func (o RatePlanType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrimaryDetails) {
		toSerialize["primaryDetails"] = o.PrimaryDetails
	}
	if !IsNil(o.Classifications) {
		toSerialize["classifications"] = o.Classifications
	}
	if !IsNil(o.TransactionDetails) {
		toSerialize["transactionDetails"] = o.TransactionDetails
	}
	if !IsNil(o.RateCommission) {
		toSerialize["rateCommission"] = o.RateCommission
	}
	if !IsNil(o.RateDeposit) {
		toSerialize["rateDeposit"] = o.RateDeposit
	}
	if !IsNil(o.Descriptions) {
		toSerialize["descriptions"] = o.Descriptions
	}
	if !IsNil(o.RoomTypeList) {
		toSerialize["roomTypeList"] = o.RoomTypeList
	}
	if !IsNil(o.RatePackages) {
		toSerialize["ratePackages"] = o.RatePackages
	}
	if !IsNil(o.NegotiatedRates) {
		toSerialize["negotiatedRates"] = o.NegotiatedRates
	}
	if !IsNil(o.Controls) {
		toSerialize["controls"] = o.Controls
	}
	if !IsNil(o.Distribution) {
		toSerialize["distribution"] = o.Distribution
	}
	if !IsNil(o.RatePlanCodeIndicators) {
		toSerialize["ratePlanCodeIndicators"] = o.RatePlanCodeIndicators
	}
	if !IsNil(o.RatePlanBasedOnRates) {
		toSerialize["ratePlanBasedOnRates"] = o.RatePlanBasedOnRates
	}
	if !IsNil(o.RatePlanScheduleInfo) {
		toSerialize["ratePlanScheduleInfo"] = o.RatePlanScheduleInfo
	}
	if !IsNil(o.ApprovalNotes) {
		toSerialize["approvalNotes"] = o.ApprovalNotes
	}
	if !IsNil(o.RoutingInstructions) {
		toSerialize["routingInstructions"] = o.RoutingInstructions
	}
	if !IsNil(o.ExternalAttributes) {
		toSerialize["externalAttributes"] = o.ExternalAttributes
	}
	if !IsNil(o.AccessExclusions) {
		toSerialize["accessExclusions"] = o.AccessExclusions
	}
	if !IsNil(o.MobileCheckinAllowed) {
		toSerialize["mobileCheckinAllowed"] = o.MobileCheckinAllowed
	}
	if !IsNil(o.MobileCheckoutAllowed) {
		toSerialize["mobileCheckoutAllowed"] = o.MobileCheckoutAllowed
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	if !IsNil(o.SupressRate) {
		toSerialize["supressRate"] = o.SupressRate
	}
	if !IsNil(o.PrintRate) {
		toSerialize["printRate"] = o.PrintRate
	}
	if !IsNil(o.DiscountAllowed) {
		toSerialize["discountAllowed"] = o.DiscountAllowed
	}
	if !IsNil(o.Redemption) {
		toSerialize["redemption"] = o.Redemption
	}
	if !IsNil(o.ExternallyControlled) {
		toSerialize["externallyControlled"] = o.ExternallyControlled
	}
	if !IsNil(o.BARRate) {
		toSerialize["bARRate"] = o.BARRate
	}
	if !IsNil(o.Daily) {
		toSerialize["daily"] = o.Daily
	}
	if !IsNil(o.Tiered) {
		toSerialize["tiered"] = o.Tiered
	}
	if !IsNil(o.DayUse) {
		toSerialize["dayUse"] = o.DayUse
	}
	if !IsNil(o.DayType) {
		toSerialize["dayType"] = o.DayType
	}
	if !IsNil(o.Complimentary) {
		toSerialize["complimentary"] = o.Complimentary
	}
	if !IsNil(o.HouseUse) {
		toSerialize["houseUse"] = o.HouseUse
	}
	if !IsNil(o.Negotiated) {
		toSerialize["negotiated"] = o.Negotiated
	}
	if !IsNil(o.OwnerRate) {
		toSerialize["ownerRate"] = o.OwnerRate
	}
	if !IsNil(o.MembershipEligible) {
		toSerialize["membershipEligible"] = o.MembershipEligible
	}
	if !IsNil(o.AdvancedDailyBase) {
		toSerialize["advancedDailyBase"] = o.AdvancedDailyBase
	}
	if !IsNil(o.AdvancedDailyRate) {
		toSerialize["advancedDailyRate"] = o.AdvancedDailyRate
	}
	if !IsNil(o.FloorAmount) {
		toSerialize["floorAmount"] = o.FloorAmount
	}
	return toSerialize, nil
}

type NullableRatePlanType struct {
	value *RatePlanType
	isSet bool
}

func (v NullableRatePlanType) Get() *RatePlanType {
	return v.value
}

func (v *NullableRatePlanType) Set(val *RatePlanType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanType(val *RatePlanType) *NullableRatePlanType {
	return &NullableRatePlanType{value: val, isSet: true}
}

func (v NullableRatePlanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


