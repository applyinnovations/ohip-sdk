/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// RatePlanScheduleType Simple type for rate code types.
type RatePlanScheduleType string

// List of ratePlanScheduleType
const (
	RATEPLANSCHEDULETYPE_STANDARD RatePlanScheduleType = "Standard"
	RATEPLANSCHEDULETYPE_DEPENDENT RatePlanScheduleType = "Dependent"
	RATEPLANSCHEDULETYPE_DAILY RatePlanScheduleType = "Daily"
)

// All allowed values of RatePlanScheduleType enum
var AllowedRatePlanScheduleTypeEnumValues = []RatePlanScheduleType{
	"Standard",
	"Dependent",
	"Daily",
}

func (v *RatePlanScheduleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RatePlanScheduleType(value)
	for _, existing := range AllowedRatePlanScheduleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RatePlanScheduleType", value)
}

// NewRatePlanScheduleTypeFromValue returns a pointer to a valid RatePlanScheduleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRatePlanScheduleTypeFromValue(v string) (*RatePlanScheduleType, error) {
	ev := RatePlanScheduleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RatePlanScheduleType: valid values are %v", v, AllowedRatePlanScheduleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RatePlanScheduleType) IsValid() bool {
	for _, existing := range AllowedRatePlanScheduleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ratePlanScheduleType value
func (v RatePlanScheduleType) Ptr() *RatePlanScheduleType {
	return &v
}

type NullableRatePlanScheduleType struct {
	value *RatePlanScheduleType
	isSet bool
}

func (v NullableRatePlanScheduleType) Get() *RatePlanScheduleType {
	return v.value
}

func (v *NullableRatePlanScheduleType) Set(val *RatePlanScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanScheduleType(val *RatePlanScheduleType) *NullableRatePlanScheduleType {
	return &NullableRatePlanScheduleType{value: val, isSet: true}
}

func (v NullableRatePlanScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

