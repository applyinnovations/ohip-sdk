/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
	"fmt"
)

// checks if the RatePlansSyncTargetType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlansSyncTargetType{}

// RatePlansSyncTargetType Attributes related to sync target like Hotel Ids.
type RatePlansSyncTargetType struct {
	// Hotel code.
	HotelIds []string `json:"hotelIds"`
}

type _RatePlansSyncTargetType RatePlansSyncTargetType

// NewRatePlansSyncTargetType instantiates a new RatePlansSyncTargetType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlansSyncTargetType(hotelIds []string) *RatePlansSyncTargetType {
	this := RatePlansSyncTargetType{}
	this.HotelIds = hotelIds
	return &this
}

// NewRatePlansSyncTargetTypeWithDefaults instantiates a new RatePlansSyncTargetType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlansSyncTargetTypeWithDefaults() *RatePlansSyncTargetType {
	this := RatePlansSyncTargetType{}
	return &this
}

// GetHotelIds returns the HotelIds field value
func (o *RatePlansSyncTargetType) GetHotelIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HotelIds
}

// GetHotelIdsOk returns a tuple with the HotelIds field value
// and a boolean to check if the value has been set.
func (o *RatePlansSyncTargetType) GetHotelIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HotelIds, true
}

// SetHotelIds sets field value
func (o *RatePlansSyncTargetType) SetHotelIds(v []string) {
	o.HotelIds = v
}

func (o RatePlansSyncTargetType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlansSyncTargetType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hotelIds"] = o.HotelIds
	return toSerialize, nil
}

func (o *RatePlansSyncTargetType) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hotelIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRatePlansSyncTargetType := _RatePlansSyncTargetType{}

	err = json.Unmarshal(bytes, &varRatePlansSyncTargetType)

	if err != nil {
		return err
	}

	*o = RatePlansSyncTargetType(varRatePlansSyncTargetType)

	return err
}

type NullableRatePlansSyncTargetType struct {
	value *RatePlansSyncTargetType
	isSet bool
}

func (v NullableRatePlansSyncTargetType) Get() *RatePlansSyncTargetType {
	return v.value
}

func (v *NullableRatePlansSyncTargetType) Set(val *RatePlansSyncTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlansSyncTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlansSyncTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlansSyncTargetType(val *RatePlansSyncTargetType) *NullableRatePlansSyncTargetType {
	return &NullableRatePlansSyncTargetType{value: val, isSet: true}
}

func (v NullableRatePlansSyncTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlansSyncTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


