/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the StrategyConditionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StrategyConditionType{}

// StrategyConditionType The Rate strategy condition details type.
type StrategyConditionType struct {
	// Consider the out of order rooms for the strategy
	ConsiderOutOfOrderRooms *bool `json:"considerOutOfOrderRooms,omitempty"`
	// Consider the sell limit for the strategy
	ConsiderSellLimits *bool `json:"considerSellLimits,omitempty"`
	Threshold *ThresholdType `json:"threshold,omitempty"`
	// Flat or Percentage.
	ThresholdType *string `json:"thresholdType,omitempty"`
	Type *RateStrategyConditionType `json:"type,omitempty"`
}

// NewStrategyConditionType instantiates a new StrategyConditionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStrategyConditionType() *StrategyConditionType {
	this := StrategyConditionType{}
	return &this
}

// NewStrategyConditionTypeWithDefaults instantiates a new StrategyConditionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStrategyConditionTypeWithDefaults() *StrategyConditionType {
	this := StrategyConditionType{}
	return &this
}

// GetConsiderOutOfOrderRooms returns the ConsiderOutOfOrderRooms field value if set, zero value otherwise.
func (o *StrategyConditionType) GetConsiderOutOfOrderRooms() bool {
	if o == nil || IsNil(o.ConsiderOutOfOrderRooms) {
		var ret bool
		return ret
	}
	return *o.ConsiderOutOfOrderRooms
}

// GetConsiderOutOfOrderRoomsOk returns a tuple with the ConsiderOutOfOrderRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyConditionType) GetConsiderOutOfOrderRoomsOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsiderOutOfOrderRooms) {
		return nil, false
	}
	return o.ConsiderOutOfOrderRooms, true
}

// HasConsiderOutOfOrderRooms returns a boolean if a field has been set.
func (o *StrategyConditionType) HasConsiderOutOfOrderRooms() bool {
	if o != nil && !IsNil(o.ConsiderOutOfOrderRooms) {
		return true
	}

	return false
}

// SetConsiderOutOfOrderRooms gets a reference to the given bool and assigns it to the ConsiderOutOfOrderRooms field.
func (o *StrategyConditionType) SetConsiderOutOfOrderRooms(v bool) {
	o.ConsiderOutOfOrderRooms = &v
}

// GetConsiderSellLimits returns the ConsiderSellLimits field value if set, zero value otherwise.
func (o *StrategyConditionType) GetConsiderSellLimits() bool {
	if o == nil || IsNil(o.ConsiderSellLimits) {
		var ret bool
		return ret
	}
	return *o.ConsiderSellLimits
}

// GetConsiderSellLimitsOk returns a tuple with the ConsiderSellLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyConditionType) GetConsiderSellLimitsOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsiderSellLimits) {
		return nil, false
	}
	return o.ConsiderSellLimits, true
}

// HasConsiderSellLimits returns a boolean if a field has been set.
func (o *StrategyConditionType) HasConsiderSellLimits() bool {
	if o != nil && !IsNil(o.ConsiderSellLimits) {
		return true
	}

	return false
}

// SetConsiderSellLimits gets a reference to the given bool and assigns it to the ConsiderSellLimits field.
func (o *StrategyConditionType) SetConsiderSellLimits(v bool) {
	o.ConsiderSellLimits = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *StrategyConditionType) GetThreshold() ThresholdType {
	if o == nil || IsNil(o.Threshold) {
		var ret ThresholdType
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyConditionType) GetThresholdOk() (*ThresholdType, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *StrategyConditionType) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given ThresholdType and assigns it to the Threshold field.
func (o *StrategyConditionType) SetThreshold(v ThresholdType) {
	o.Threshold = &v
}

// GetThresholdType returns the ThresholdType field value if set, zero value otherwise.
func (o *StrategyConditionType) GetThresholdType() string {
	if o == nil || IsNil(o.ThresholdType) {
		var ret string
		return ret
	}
	return *o.ThresholdType
}

// GetThresholdTypeOk returns a tuple with the ThresholdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyConditionType) GetThresholdTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ThresholdType) {
		return nil, false
	}
	return o.ThresholdType, true
}

// HasThresholdType returns a boolean if a field has been set.
func (o *StrategyConditionType) HasThresholdType() bool {
	if o != nil && !IsNil(o.ThresholdType) {
		return true
	}

	return false
}

// SetThresholdType gets a reference to the given string and assigns it to the ThresholdType field.
func (o *StrategyConditionType) SetThresholdType(v string) {
	o.ThresholdType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StrategyConditionType) GetType() RateStrategyConditionType {
	if o == nil || IsNil(o.Type) {
		var ret RateStrategyConditionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StrategyConditionType) GetTypeOk() (*RateStrategyConditionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StrategyConditionType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RateStrategyConditionType and assigns it to the Type field.
func (o *StrategyConditionType) SetType(v RateStrategyConditionType) {
	o.Type = &v
}

func (o StrategyConditionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StrategyConditionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsiderOutOfOrderRooms) {
		toSerialize["considerOutOfOrderRooms"] = o.ConsiderOutOfOrderRooms
	}
	if !IsNil(o.ConsiderSellLimits) {
		toSerialize["considerSellLimits"] = o.ConsiderSellLimits
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	if !IsNil(o.ThresholdType) {
		toSerialize["thresholdType"] = o.ThresholdType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableStrategyConditionType struct {
	value *StrategyConditionType
	isSet bool
}

func (v NullableStrategyConditionType) Get() *StrategyConditionType {
	return v.value
}

func (v *NullableStrategyConditionType) Set(val *StrategyConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableStrategyConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableStrategyConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStrategyConditionType(val *StrategyConditionType) *NullableStrategyConditionType {
	return &NullableStrategyConditionType{value: val, isSet: true}
}

func (v NullableStrategyConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStrategyConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


