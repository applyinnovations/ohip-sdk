/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the AdvancedDynamicBaseRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvancedDynamicBaseRateType{}

// AdvancedDynamicBaseRateType Advanced Dynamic Base Rate type
type AdvancedDynamicBaseRateType struct {
	// Rate plan code used to Advanced Dynamically base the rate on.
	BasedOnRatePlan *string `json:"basedOnRatePlan,omitempty"`
	// Rounding style used for the calculated rate amounts. Valid values are U,D,N,C,F which means Up, Down, None, Up-Keep Decimal, Down - Keep Decimal.
	Rounding *string `json:"rounding,omitempty"`
	// While showing availability, do system need to compare the static rates defined for the rate with Advanced dynamically computed base rate pricing? If true, availability shows lower of the these two pricing. If false, availability shows the advanced dynamically calculated pricing.
	CompareWithRateSchedules *bool `json:"compareWithRateSchedules,omitempty"`
	// Rate Plan code.
	AdvancedDependentRatePlans []string `json:"advancedDependentRatePlans,omitempty"`
}

// NewAdvancedDynamicBaseRateType instantiates a new AdvancedDynamicBaseRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedDynamicBaseRateType() *AdvancedDynamicBaseRateType {
	this := AdvancedDynamicBaseRateType{}
	return &this
}

// NewAdvancedDynamicBaseRateTypeWithDefaults instantiates a new AdvancedDynamicBaseRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedDynamicBaseRateTypeWithDefaults() *AdvancedDynamicBaseRateType {
	this := AdvancedDynamicBaseRateType{}
	return &this
}

// GetBasedOnRatePlan returns the BasedOnRatePlan field value if set, zero value otherwise.
func (o *AdvancedDynamicBaseRateType) GetBasedOnRatePlan() string {
	if o == nil || IsNil(o.BasedOnRatePlan) {
		var ret string
		return ret
	}
	return *o.BasedOnRatePlan
}

// GetBasedOnRatePlanOk returns a tuple with the BasedOnRatePlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDynamicBaseRateType) GetBasedOnRatePlanOk() (*string, bool) {
	if o == nil || IsNil(o.BasedOnRatePlan) {
		return nil, false
	}
	return o.BasedOnRatePlan, true
}

// HasBasedOnRatePlan returns a boolean if a field has been set.
func (o *AdvancedDynamicBaseRateType) HasBasedOnRatePlan() bool {
	if o != nil && !IsNil(o.BasedOnRatePlan) {
		return true
	}

	return false
}

// SetBasedOnRatePlan gets a reference to the given string and assigns it to the BasedOnRatePlan field.
func (o *AdvancedDynamicBaseRateType) SetBasedOnRatePlan(v string) {
	o.BasedOnRatePlan = &v
}

// GetRounding returns the Rounding field value if set, zero value otherwise.
func (o *AdvancedDynamicBaseRateType) GetRounding() string {
	if o == nil || IsNil(o.Rounding) {
		var ret string
		return ret
	}
	return *o.Rounding
}

// GetRoundingOk returns a tuple with the Rounding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDynamicBaseRateType) GetRoundingOk() (*string, bool) {
	if o == nil || IsNil(o.Rounding) {
		return nil, false
	}
	return o.Rounding, true
}

// HasRounding returns a boolean if a field has been set.
func (o *AdvancedDynamicBaseRateType) HasRounding() bool {
	if o != nil && !IsNil(o.Rounding) {
		return true
	}

	return false
}

// SetRounding gets a reference to the given string and assigns it to the Rounding field.
func (o *AdvancedDynamicBaseRateType) SetRounding(v string) {
	o.Rounding = &v
}

// GetCompareWithRateSchedules returns the CompareWithRateSchedules field value if set, zero value otherwise.
func (o *AdvancedDynamicBaseRateType) GetCompareWithRateSchedules() bool {
	if o == nil || IsNil(o.CompareWithRateSchedules) {
		var ret bool
		return ret
	}
	return *o.CompareWithRateSchedules
}

// GetCompareWithRateSchedulesOk returns a tuple with the CompareWithRateSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDynamicBaseRateType) GetCompareWithRateSchedulesOk() (*bool, bool) {
	if o == nil || IsNil(o.CompareWithRateSchedules) {
		return nil, false
	}
	return o.CompareWithRateSchedules, true
}

// HasCompareWithRateSchedules returns a boolean if a field has been set.
func (o *AdvancedDynamicBaseRateType) HasCompareWithRateSchedules() bool {
	if o != nil && !IsNil(o.CompareWithRateSchedules) {
		return true
	}

	return false
}

// SetCompareWithRateSchedules gets a reference to the given bool and assigns it to the CompareWithRateSchedules field.
func (o *AdvancedDynamicBaseRateType) SetCompareWithRateSchedules(v bool) {
	o.CompareWithRateSchedules = &v
}

// GetAdvancedDependentRatePlans returns the AdvancedDependentRatePlans field value if set, zero value otherwise.
func (o *AdvancedDynamicBaseRateType) GetAdvancedDependentRatePlans() []string {
	if o == nil || IsNil(o.AdvancedDependentRatePlans) {
		var ret []string
		return ret
	}
	return o.AdvancedDependentRatePlans
}

// GetAdvancedDependentRatePlansOk returns a tuple with the AdvancedDependentRatePlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDynamicBaseRateType) GetAdvancedDependentRatePlansOk() ([]string, bool) {
	if o == nil || IsNil(o.AdvancedDependentRatePlans) {
		return nil, false
	}
	return o.AdvancedDependentRatePlans, true
}

// HasAdvancedDependentRatePlans returns a boolean if a field has been set.
func (o *AdvancedDynamicBaseRateType) HasAdvancedDependentRatePlans() bool {
	if o != nil && !IsNil(o.AdvancedDependentRatePlans) {
		return true
	}

	return false
}

// SetAdvancedDependentRatePlans gets a reference to the given []string and assigns it to the AdvancedDependentRatePlans field.
func (o *AdvancedDynamicBaseRateType) SetAdvancedDependentRatePlans(v []string) {
	o.AdvancedDependentRatePlans = v
}

func (o AdvancedDynamicBaseRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvancedDynamicBaseRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BasedOnRatePlan) {
		toSerialize["basedOnRatePlan"] = o.BasedOnRatePlan
	}
	if !IsNil(o.Rounding) {
		toSerialize["rounding"] = o.Rounding
	}
	if !IsNil(o.CompareWithRateSchedules) {
		toSerialize["compareWithRateSchedules"] = o.CompareWithRateSchedules
	}
	if !IsNil(o.AdvancedDependentRatePlans) {
		toSerialize["advancedDependentRatePlans"] = o.AdvancedDependentRatePlans
	}
	return toSerialize, nil
}

type NullableAdvancedDynamicBaseRateType struct {
	value *AdvancedDynamicBaseRateType
	isSet bool
}

func (v NullableAdvancedDynamicBaseRateType) Get() *AdvancedDynamicBaseRateType {
	return v.value
}

func (v *NullableAdvancedDynamicBaseRateType) Set(val *AdvancedDynamicBaseRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedDynamicBaseRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedDynamicBaseRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedDynamicBaseRateType(val *AdvancedDynamicBaseRateType) *NullableAdvancedDynamicBaseRateType {
	return &NullableAdvancedDynamicBaseRateType{value: val, isSet: true}
}

func (v NullableAdvancedDynamicBaseRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedDynamicBaseRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


