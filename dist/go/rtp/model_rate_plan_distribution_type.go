/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RatePlanDistributionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanDistributionType{}

// RatePlanDistributionType struct for RatePlanDistributionType
type RatePlanDistributionType struct {
	// Restriction updates for the rate plan to be sent to channels?
	RestrictionUpdate *bool `json:"restrictionUpdate,omitempty"`
	// Rate updates for the rate plan to be sent to channels?
	RateUpdate *bool `json:"rateUpdate,omitempty"`
	// Consider the rate plan for regional availability to be used by channels?
	RegionalAvailability *bool `json:"regionalAvailability,omitempty"`
	// Rate plan to be uploaded to MyFidleio and published.
	MyFidelioUploadAllowed *bool `json:"myFidelioUploadAllowed,omitempty"`
	// Flag to indicate if Rate Plan is mapped to at least one Channel.
	ChannelRateMappingExists *bool `json:"channelRateMappingExists,omitempty"`
	// Rate plan Code is available for channels.
	ChannelAllowed *bool `json:"channelAllowed,omitempty"`
}

// NewRatePlanDistributionType instantiates a new RatePlanDistributionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanDistributionType() *RatePlanDistributionType {
	this := RatePlanDistributionType{}
	return &this
}

// NewRatePlanDistributionTypeWithDefaults instantiates a new RatePlanDistributionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanDistributionTypeWithDefaults() *RatePlanDistributionType {
	this := RatePlanDistributionType{}
	return &this
}

// GetRestrictionUpdate returns the RestrictionUpdate field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetRestrictionUpdate() bool {
	if o == nil || IsNil(o.RestrictionUpdate) {
		var ret bool
		return ret
	}
	return *o.RestrictionUpdate
}

// GetRestrictionUpdateOk returns a tuple with the RestrictionUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetRestrictionUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictionUpdate) {
		return nil, false
	}
	return o.RestrictionUpdate, true
}

// HasRestrictionUpdate returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasRestrictionUpdate() bool {
	if o != nil && !IsNil(o.RestrictionUpdate) {
		return true
	}

	return false
}

// SetRestrictionUpdate gets a reference to the given bool and assigns it to the RestrictionUpdate field.
func (o *RatePlanDistributionType) SetRestrictionUpdate(v bool) {
	o.RestrictionUpdate = &v
}

// GetRateUpdate returns the RateUpdate field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetRateUpdate() bool {
	if o == nil || IsNil(o.RateUpdate) {
		var ret bool
		return ret
	}
	return *o.RateUpdate
}

// GetRateUpdateOk returns a tuple with the RateUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetRateUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.RateUpdate) {
		return nil, false
	}
	return o.RateUpdate, true
}

// HasRateUpdate returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasRateUpdate() bool {
	if o != nil && !IsNil(o.RateUpdate) {
		return true
	}

	return false
}

// SetRateUpdate gets a reference to the given bool and assigns it to the RateUpdate field.
func (o *RatePlanDistributionType) SetRateUpdate(v bool) {
	o.RateUpdate = &v
}

// GetRegionalAvailability returns the RegionalAvailability field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetRegionalAvailability() bool {
	if o == nil || IsNil(o.RegionalAvailability) {
		var ret bool
		return ret
	}
	return *o.RegionalAvailability
}

// GetRegionalAvailabilityOk returns a tuple with the RegionalAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetRegionalAvailabilityOk() (*bool, bool) {
	if o == nil || IsNil(o.RegionalAvailability) {
		return nil, false
	}
	return o.RegionalAvailability, true
}

// HasRegionalAvailability returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasRegionalAvailability() bool {
	if o != nil && !IsNil(o.RegionalAvailability) {
		return true
	}

	return false
}

// SetRegionalAvailability gets a reference to the given bool and assigns it to the RegionalAvailability field.
func (o *RatePlanDistributionType) SetRegionalAvailability(v bool) {
	o.RegionalAvailability = &v
}

// GetMyFidelioUploadAllowed returns the MyFidelioUploadAllowed field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetMyFidelioUploadAllowed() bool {
	if o == nil || IsNil(o.MyFidelioUploadAllowed) {
		var ret bool
		return ret
	}
	return *o.MyFidelioUploadAllowed
}

// GetMyFidelioUploadAllowedOk returns a tuple with the MyFidelioUploadAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetMyFidelioUploadAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.MyFidelioUploadAllowed) {
		return nil, false
	}
	return o.MyFidelioUploadAllowed, true
}

// HasMyFidelioUploadAllowed returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasMyFidelioUploadAllowed() bool {
	if o != nil && !IsNil(o.MyFidelioUploadAllowed) {
		return true
	}

	return false
}

// SetMyFidelioUploadAllowed gets a reference to the given bool and assigns it to the MyFidelioUploadAllowed field.
func (o *RatePlanDistributionType) SetMyFidelioUploadAllowed(v bool) {
	o.MyFidelioUploadAllowed = &v
}

// GetChannelRateMappingExists returns the ChannelRateMappingExists field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetChannelRateMappingExists() bool {
	if o == nil || IsNil(o.ChannelRateMappingExists) {
		var ret bool
		return ret
	}
	return *o.ChannelRateMappingExists
}

// GetChannelRateMappingExistsOk returns a tuple with the ChannelRateMappingExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetChannelRateMappingExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.ChannelRateMappingExists) {
		return nil, false
	}
	return o.ChannelRateMappingExists, true
}

// HasChannelRateMappingExists returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasChannelRateMappingExists() bool {
	if o != nil && !IsNil(o.ChannelRateMappingExists) {
		return true
	}

	return false
}

// SetChannelRateMappingExists gets a reference to the given bool and assigns it to the ChannelRateMappingExists field.
func (o *RatePlanDistributionType) SetChannelRateMappingExists(v bool) {
	o.ChannelRateMappingExists = &v
}

// GetChannelAllowed returns the ChannelAllowed field value if set, zero value otherwise.
func (o *RatePlanDistributionType) GetChannelAllowed() bool {
	if o == nil || IsNil(o.ChannelAllowed) {
		var ret bool
		return ret
	}
	return *o.ChannelAllowed
}

// GetChannelAllowedOk returns a tuple with the ChannelAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanDistributionType) GetChannelAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.ChannelAllowed) {
		return nil, false
	}
	return o.ChannelAllowed, true
}

// HasChannelAllowed returns a boolean if a field has been set.
func (o *RatePlanDistributionType) HasChannelAllowed() bool {
	if o != nil && !IsNil(o.ChannelAllowed) {
		return true
	}

	return false
}

// SetChannelAllowed gets a reference to the given bool and assigns it to the ChannelAllowed field.
func (o *RatePlanDistributionType) SetChannelAllowed(v bool) {
	o.ChannelAllowed = &v
}

func (o RatePlanDistributionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanDistributionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RestrictionUpdate) {
		toSerialize["restrictionUpdate"] = o.RestrictionUpdate
	}
	if !IsNil(o.RateUpdate) {
		toSerialize["rateUpdate"] = o.RateUpdate
	}
	if !IsNil(o.RegionalAvailability) {
		toSerialize["regionalAvailability"] = o.RegionalAvailability
	}
	if !IsNil(o.MyFidelioUploadAllowed) {
		toSerialize["myFidelioUploadAllowed"] = o.MyFidelioUploadAllowed
	}
	if !IsNil(o.ChannelRateMappingExists) {
		toSerialize["channelRateMappingExists"] = o.ChannelRateMappingExists
	}
	if !IsNil(o.ChannelAllowed) {
		toSerialize["channelAllowed"] = o.ChannelAllowed
	}
	return toSerialize, nil
}

type NullableRatePlanDistributionType struct {
	value *RatePlanDistributionType
	isSet bool
}

func (v NullableRatePlanDistributionType) Get() *RatePlanDistributionType {
	return v.value
}

func (v *NullableRatePlanDistributionType) Set(val *RatePlanDistributionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanDistributionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanDistributionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanDistributionType(val *RatePlanDistributionType) *NullableRatePlanDistributionType {
	return &NullableRatePlanDistributionType{value: val, isSet: true}
}

func (v NullableRatePlanDistributionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanDistributionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


