/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the NegRateAccessType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NegRateAccessType{}

// NegRateAccessType Details of Negotiated rate.
type NegRateAccessType struct {
	// Commission code for the negotiated rate.
	CommissionCode *string `json:"commissionCode,omitempty"`
	// Sequence for the negotiated rate.
	NegotiatedRateOrder *int32 `json:"negotiatedRateOrder,omitempty"`
	NewTimeSpan *TimeSpanType `json:"newTimeSpan,omitempty"`
	// List of discounts for the negotiated rate.
	Discounts []ProfileDiscountType `json:"discounts,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
}

// NewNegRateAccessType instantiates a new NegRateAccessType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNegRateAccessType() *NegRateAccessType {
	this := NegRateAccessType{}
	return &this
}

// NewNegRateAccessTypeWithDefaults instantiates a new NegRateAccessType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNegRateAccessTypeWithDefaults() *NegRateAccessType {
	this := NegRateAccessType{}
	return &this
}

// GetCommissionCode returns the CommissionCode field value if set, zero value otherwise.
func (o *NegRateAccessType) GetCommissionCode() string {
	if o == nil || IsNil(o.CommissionCode) {
		var ret string
		return ret
	}
	return *o.CommissionCode
}

// GetCommissionCodeOk returns a tuple with the CommissionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegRateAccessType) GetCommissionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CommissionCode) {
		return nil, false
	}
	return o.CommissionCode, true
}

// HasCommissionCode returns a boolean if a field has been set.
func (o *NegRateAccessType) HasCommissionCode() bool {
	if o != nil && !IsNil(o.CommissionCode) {
		return true
	}

	return false
}

// SetCommissionCode gets a reference to the given string and assigns it to the CommissionCode field.
func (o *NegRateAccessType) SetCommissionCode(v string) {
	o.CommissionCode = &v
}

// GetNegotiatedRateOrder returns the NegotiatedRateOrder field value if set, zero value otherwise.
func (o *NegRateAccessType) GetNegotiatedRateOrder() int32 {
	if o == nil || IsNil(o.NegotiatedRateOrder) {
		var ret int32
		return ret
	}
	return *o.NegotiatedRateOrder
}

// GetNegotiatedRateOrderOk returns a tuple with the NegotiatedRateOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegRateAccessType) GetNegotiatedRateOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.NegotiatedRateOrder) {
		return nil, false
	}
	return o.NegotiatedRateOrder, true
}

// HasNegotiatedRateOrder returns a boolean if a field has been set.
func (o *NegRateAccessType) HasNegotiatedRateOrder() bool {
	if o != nil && !IsNil(o.NegotiatedRateOrder) {
		return true
	}

	return false
}

// SetNegotiatedRateOrder gets a reference to the given int32 and assigns it to the NegotiatedRateOrder field.
func (o *NegRateAccessType) SetNegotiatedRateOrder(v int32) {
	o.NegotiatedRateOrder = &v
}

// GetNewTimeSpan returns the NewTimeSpan field value if set, zero value otherwise.
func (o *NegRateAccessType) GetNewTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.NewTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.NewTimeSpan
}

// GetNewTimeSpanOk returns a tuple with the NewTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegRateAccessType) GetNewTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.NewTimeSpan) {
		return nil, false
	}
	return o.NewTimeSpan, true
}

// HasNewTimeSpan returns a boolean if a field has been set.
func (o *NegRateAccessType) HasNewTimeSpan() bool {
	if o != nil && !IsNil(o.NewTimeSpan) {
		return true
	}

	return false
}

// SetNewTimeSpan gets a reference to the given TimeSpanType and assigns it to the NewTimeSpan field.
func (o *NegRateAccessType) SetNewTimeSpan(v TimeSpanType) {
	o.NewTimeSpan = &v
}

// GetDiscounts returns the Discounts field value if set, zero value otherwise.
func (o *NegRateAccessType) GetDiscounts() []ProfileDiscountType {
	if o == nil || IsNil(o.Discounts) {
		var ret []ProfileDiscountType
		return ret
	}
	return o.Discounts
}

// GetDiscountsOk returns a tuple with the Discounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegRateAccessType) GetDiscountsOk() ([]ProfileDiscountType, bool) {
	if o == nil || IsNil(o.Discounts) {
		return nil, false
	}
	return o.Discounts, true
}

// HasDiscounts returns a boolean if a field has been set.
func (o *NegRateAccessType) HasDiscounts() bool {
	if o != nil && !IsNil(o.Discounts) {
		return true
	}

	return false
}

// SetDiscounts gets a reference to the given []ProfileDiscountType and assigns it to the Discounts field.
func (o *NegRateAccessType) SetDiscounts(v []ProfileDiscountType) {
	o.Discounts = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *NegRateAccessType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegRateAccessType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *NegRateAccessType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *NegRateAccessType) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *NegRateAccessType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NegRateAccessType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *NegRateAccessType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *NegRateAccessType) SetEnd(v string) {
	o.End = &v
}

func (o NegRateAccessType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NegRateAccessType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommissionCode) {
		toSerialize["commissionCode"] = o.CommissionCode
	}
	if !IsNil(o.NegotiatedRateOrder) {
		toSerialize["negotiatedRateOrder"] = o.NegotiatedRateOrder
	}
	if !IsNil(o.NewTimeSpan) {
		toSerialize["newTimeSpan"] = o.NewTimeSpan
	}
	if !IsNil(o.Discounts) {
		toSerialize["discounts"] = o.Discounts
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableNegRateAccessType struct {
	value *NegRateAccessType
	isSet bool
}

func (v NullableNegRateAccessType) Get() *NegRateAccessType {
	return v.value
}

func (v *NullableNegRateAccessType) Set(val *NegRateAccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableNegRateAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableNegRateAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNegRateAccessType(val *NegRateAccessType) *NullableNegRateAccessType {
	return &NullableNegRateAccessType{value: val, isSet: true}
}

func (v NullableNegRateAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNegRateAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


