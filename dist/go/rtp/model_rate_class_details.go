/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the RateClassDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateClassDetails{}

// RateClassDetails Response for fetch rate classes.
type RateClassDetails struct {
	Links []InstanceLink `json:"links,omitempty"`
	RateClasses *RateClassDetailsRateClasses `json:"rateClasses,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewRateClassDetails instantiates a new RateClassDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateClassDetails() *RateClassDetails {
	this := RateClassDetails{}
	return &this
}

// NewRateClassDetailsWithDefaults instantiates a new RateClassDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateClassDetailsWithDefaults() *RateClassDetails {
	this := RateClassDetails{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RateClassDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RateClassDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *RateClassDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetRateClasses returns the RateClasses field value if set, zero value otherwise.
func (o *RateClassDetails) GetRateClasses() RateClassDetailsRateClasses {
	if o == nil || IsNil(o.RateClasses) {
		var ret RateClassDetailsRateClasses
		return ret
	}
	return *o.RateClasses
}

// GetRateClassesOk returns a tuple with the RateClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassDetails) GetRateClassesOk() (*RateClassDetailsRateClasses, bool) {
	if o == nil || IsNil(o.RateClasses) {
		return nil, false
	}
	return o.RateClasses, true
}

// HasRateClasses returns a boolean if a field has been set.
func (o *RateClassDetails) HasRateClasses() bool {
	if o != nil && !IsNil(o.RateClasses) {
		return true
	}

	return false
}

// SetRateClasses gets a reference to the given RateClassDetailsRateClasses and assigns it to the RateClasses field.
func (o *RateClassDetails) SetRateClasses(v RateClassDetailsRateClasses) {
	o.RateClasses = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RateClassDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateClassDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RateClassDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *RateClassDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o RateClassDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateClassDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.RateClasses) {
		toSerialize["rateClasses"] = o.RateClasses
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableRateClassDetails struct {
	value *RateClassDetails
	isSet bool
}

func (v NullableRateClassDetails) Get() *RateClassDetails {
	return v.value
}

func (v *NullableRateClassDetails) Set(val *RateClassDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRateClassDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRateClassDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateClassDetails(val *RateClassDetails) *NullableRateClassDetails {
	return &NullableRateClassDetails{value: val, isSet: true}
}

func (v NullableRateClassDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateClassDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


