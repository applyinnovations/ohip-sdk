/*
OPERA Cloud Rate API

APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rtp

import (
	"encoding/json"
)

// checks if the HotelPackageGroupsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelPackageGroupsType{}

// HotelPackageGroupsType struct for HotelPackageGroupsType
type HotelPackageGroupsType struct {
	// Hotel code for the packages.
	HotelId *string `json:"hotelId,omitempty"`
	// Information about the each package group.
	PackageGroup []PackageGroupType `json:"packageGroup,omitempty"`
}

// NewHotelPackageGroupsType instantiates a new HotelPackageGroupsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelPackageGroupsType() *HotelPackageGroupsType {
	this := HotelPackageGroupsType{}
	return &this
}

// NewHotelPackageGroupsTypeWithDefaults instantiates a new HotelPackageGroupsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelPackageGroupsTypeWithDefaults() *HotelPackageGroupsType {
	this := HotelPackageGroupsType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelPackageGroupsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelPackageGroupsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelPackageGroupsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelPackageGroupsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPackageGroup returns the PackageGroup field value if set, zero value otherwise.
func (o *HotelPackageGroupsType) GetPackageGroup() []PackageGroupType {
	if o == nil || IsNil(o.PackageGroup) {
		var ret []PackageGroupType
		return ret
	}
	return o.PackageGroup
}

// GetPackageGroupOk returns a tuple with the PackageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelPackageGroupsType) GetPackageGroupOk() ([]PackageGroupType, bool) {
	if o == nil || IsNil(o.PackageGroup) {
		return nil, false
	}
	return o.PackageGroup, true
}

// HasPackageGroup returns a boolean if a field has been set.
func (o *HotelPackageGroupsType) HasPackageGroup() bool {
	if o != nil && !IsNil(o.PackageGroup) {
		return true
	}

	return false
}

// SetPackageGroup gets a reference to the given []PackageGroupType and assigns it to the PackageGroup field.
func (o *HotelPackageGroupsType) SetPackageGroup(v []PackageGroupType) {
	o.PackageGroup = v
}

func (o HotelPackageGroupsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelPackageGroupsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PackageGroup) {
		toSerialize["packageGroup"] = o.PackageGroup
	}
	return toSerialize, nil
}

type NullableHotelPackageGroupsType struct {
	value *HotelPackageGroupsType
	isSet bool
}

func (v NullableHotelPackageGroupsType) Get() *HotelPackageGroupsType {
	return v.value
}

func (v *NullableHotelPackageGroupsType) Set(val *HotelPackageGroupsType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelPackageGroupsType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelPackageGroupsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelPackageGroupsType(val *HotelPackageGroupsType) *NullableHotelPackageGroupsType {
	return &NullableHotelPackageGroupsType{value: val, isSet: true}
}

func (v NullableHotelPackageGroupsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelPackageGroupsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


