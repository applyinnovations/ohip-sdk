/*
OPERA Cloud Report Master Data Management API

APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
)

// checks if the ReportType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportType{}

// ReportType Contains details about the report application module from the DB.
type ReportType struct {
	ModuleId *UniqueIDType `json:"moduleId,omitempty"`
	// Report name.
	ReportName *string `json:"reportName,omitempty"`
	ModuleType *ReportModuleTypeType `json:"moduleType,omitempty"`
	ReportDescription *TranslationTextType1000 `json:"reportDescription,omitempty"`
	ReportGroupId *UniqueIDType `json:"reportGroupId,omitempty"`
	// Report group.
	ReportGroup *string `json:"reportGroup,omitempty"`
	// Unique Id that references an object uniquely in the system.
	AttachedReports []UniqueIDType `json:"attachedReports,omitempty"`
	ReportGroupDescription *string `json:"reportGroupDescription,omitempty"`
	TranslatableReportGroupDescription *TranslationTextType1000 `json:"translatableReportGroupDescription,omitempty"`
	// The hotel code that the report is associated with.
	Hotel *string `json:"hotel,omitempty"`
	// Form which is run to collect parameter information to generate the report.
	FormToRun *string `json:"formToRun,omitempty"`
	// Report language code.
	LanguageCode *string `json:"languageCode,omitempty"`
	// Flag which indicates whether the report requires parameters.
	HasParameters *bool `json:"hasParameters,omitempty"`
	// Flag which indicates whether the report is a sample provided in the application.
	Sample *bool `json:"sample,omitempty"`
	// Flag which indicates whether the report is customized by the user.
	Customized *bool `json:"customized,omitempty"`
	CustomizedRtfAttachId *UniqueIDType `json:"customizedRtfAttachId,omitempty"`
	// Flag which indicates if the report can be run separately.
	CanRunSeperate *bool `json:"canRunSeperate,omitempty"`
	// Flag which indicates if the report can be run for multiple properties.
	MultiPropertyReport *bool `json:"multiPropertyReport,omitempty"`
	// Flag which indicates whether the report requires a procedure.
	ProcedureRequired *bool `json:"procedureRequired,omitempty"`
	// Flag which indicates whether the report is user defined.
	UserDefinedReport *bool `json:"userDefinedReport,omitempty"`
	// Flag which indicates whether the report is protected.
	ProtectedReport *bool `json:"protectedReport,omitempty"`
	// Flag to indicate whether this is a system report.
	SystemReport *bool `json:"systemReport,omitempty"`
	// Report default destination.
	Destination *string `json:"destination,omitempty"`
	// Default printer name.
	DefaultPrinterName *string `json:"defaultPrinterName,omitempty"`
	// Number of copies configured for report.
	Copies *int32 `json:"copies,omitempty"`
	// Flag to indicate whether this is a shift report.
	ShiftReport *bool `json:"shiftReport,omitempty"`
	// Set to ODT for BI Publisher reports.
	DataSourceType *string `json:"dataSourceType,omitempty"`
	// Data source for BI Publisher reports.
	DataSource *string `json:"dataSource,omitempty"`
	// A comma separated list of Opera V5 application indicators for which the report is enabled.
	UsedInApp *string `json:"usedInApp,omitempty"`
	// A flag indicating that the report has been certified for use with Opera 9.
	Opera9Certified *bool `json:"opera9Certified,omitempty"`
	WatermarkDetails *WatermarkType `json:"watermarkDetails,omitempty"`
	ExternalReportUrl *ExternalUrlInfoType `json:"externalReportUrl,omitempty"`
	// Rows for Key Packet report group.
	RowsPerPage *int32 `json:"rowsPerPage,omitempty"`
	// Columns for Key Packet report group.
	ColumnsPerPage *int32 `json:"columnsPerPage,omitempty"`
	// Flag to indicate whether the report can be exported to Excel.
	ExcelOutput *bool `json:"excelOutput,omitempty"`
}

// NewReportType instantiates a new ReportType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportType() *ReportType {
	this := ReportType{}
	return &this
}

// NewReportTypeWithDefaults instantiates a new ReportType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportTypeWithDefaults() *ReportType {
	this := ReportType{}
	return &this
}

// GetModuleId returns the ModuleId field value if set, zero value otherwise.
func (o *ReportType) GetModuleId() UniqueIDType {
	if o == nil || IsNil(o.ModuleId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ModuleId
}

// GetModuleIdOk returns a tuple with the ModuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetModuleIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ModuleId) {
		return nil, false
	}
	return o.ModuleId, true
}

// HasModuleId returns a boolean if a field has been set.
func (o *ReportType) HasModuleId() bool {
	if o != nil && !IsNil(o.ModuleId) {
		return true
	}

	return false
}

// SetModuleId gets a reference to the given UniqueIDType and assigns it to the ModuleId field.
func (o *ReportType) SetModuleId(v UniqueIDType) {
	o.ModuleId = &v
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *ReportType) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *ReportType) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *ReportType) SetReportName(v string) {
	o.ReportName = &v
}

// GetModuleType returns the ModuleType field value if set, zero value otherwise.
func (o *ReportType) GetModuleType() ReportModuleTypeType {
	if o == nil || IsNil(o.ModuleType) {
		var ret ReportModuleTypeType
		return ret
	}
	return *o.ModuleType
}

// GetModuleTypeOk returns a tuple with the ModuleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetModuleTypeOk() (*ReportModuleTypeType, bool) {
	if o == nil || IsNil(o.ModuleType) {
		return nil, false
	}
	return o.ModuleType, true
}

// HasModuleType returns a boolean if a field has been set.
func (o *ReportType) HasModuleType() bool {
	if o != nil && !IsNil(o.ModuleType) {
		return true
	}

	return false
}

// SetModuleType gets a reference to the given ReportModuleTypeType and assigns it to the ModuleType field.
func (o *ReportType) SetModuleType(v ReportModuleTypeType) {
	o.ModuleType = &v
}

// GetReportDescription returns the ReportDescription field value if set, zero value otherwise.
func (o *ReportType) GetReportDescription() TranslationTextType1000 {
	if o == nil || IsNil(o.ReportDescription) {
		var ret TranslationTextType1000
		return ret
	}
	return *o.ReportDescription
}

// GetReportDescriptionOk returns a tuple with the ReportDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetReportDescriptionOk() (*TranslationTextType1000, bool) {
	if o == nil || IsNil(o.ReportDescription) {
		return nil, false
	}
	return o.ReportDescription, true
}

// HasReportDescription returns a boolean if a field has been set.
func (o *ReportType) HasReportDescription() bool {
	if o != nil && !IsNil(o.ReportDescription) {
		return true
	}

	return false
}

// SetReportDescription gets a reference to the given TranslationTextType1000 and assigns it to the ReportDescription field.
func (o *ReportType) SetReportDescription(v TranslationTextType1000) {
	o.ReportDescription = &v
}

// GetReportGroupId returns the ReportGroupId field value if set, zero value otherwise.
func (o *ReportType) GetReportGroupId() UniqueIDType {
	if o == nil || IsNil(o.ReportGroupId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ReportGroupId
}

// GetReportGroupIdOk returns a tuple with the ReportGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetReportGroupIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ReportGroupId) {
		return nil, false
	}
	return o.ReportGroupId, true
}

// HasReportGroupId returns a boolean if a field has been set.
func (o *ReportType) HasReportGroupId() bool {
	if o != nil && !IsNil(o.ReportGroupId) {
		return true
	}

	return false
}

// SetReportGroupId gets a reference to the given UniqueIDType and assigns it to the ReportGroupId field.
func (o *ReportType) SetReportGroupId(v UniqueIDType) {
	o.ReportGroupId = &v
}

// GetReportGroup returns the ReportGroup field value if set, zero value otherwise.
func (o *ReportType) GetReportGroup() string {
	if o == nil || IsNil(o.ReportGroup) {
		var ret string
		return ret
	}
	return *o.ReportGroup
}

// GetReportGroupOk returns a tuple with the ReportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetReportGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ReportGroup) {
		return nil, false
	}
	return o.ReportGroup, true
}

// HasReportGroup returns a boolean if a field has been set.
func (o *ReportType) HasReportGroup() bool {
	if o != nil && !IsNil(o.ReportGroup) {
		return true
	}

	return false
}

// SetReportGroup gets a reference to the given string and assigns it to the ReportGroup field.
func (o *ReportType) SetReportGroup(v string) {
	o.ReportGroup = &v
}

// GetAttachedReports returns the AttachedReports field value if set, zero value otherwise.
func (o *ReportType) GetAttachedReports() []UniqueIDType {
	if o == nil || IsNil(o.AttachedReports) {
		var ret []UniqueIDType
		return ret
	}
	return o.AttachedReports
}

// GetAttachedReportsOk returns a tuple with the AttachedReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetAttachedReportsOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.AttachedReports) {
		return nil, false
	}
	return o.AttachedReports, true
}

// HasAttachedReports returns a boolean if a field has been set.
func (o *ReportType) HasAttachedReports() bool {
	if o != nil && !IsNil(o.AttachedReports) {
		return true
	}

	return false
}

// SetAttachedReports gets a reference to the given []UniqueIDType and assigns it to the AttachedReports field.
func (o *ReportType) SetAttachedReports(v []UniqueIDType) {
	o.AttachedReports = v
}

// GetReportGroupDescription returns the ReportGroupDescription field value if set, zero value otherwise.
func (o *ReportType) GetReportGroupDescription() string {
	if o == nil || IsNil(o.ReportGroupDescription) {
		var ret string
		return ret
	}
	return *o.ReportGroupDescription
}

// GetReportGroupDescriptionOk returns a tuple with the ReportGroupDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetReportGroupDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ReportGroupDescription) {
		return nil, false
	}
	return o.ReportGroupDescription, true
}

// HasReportGroupDescription returns a boolean if a field has been set.
func (o *ReportType) HasReportGroupDescription() bool {
	if o != nil && !IsNil(o.ReportGroupDescription) {
		return true
	}

	return false
}

// SetReportGroupDescription gets a reference to the given string and assigns it to the ReportGroupDescription field.
func (o *ReportType) SetReportGroupDescription(v string) {
	o.ReportGroupDescription = &v
}

// GetTranslatableReportGroupDescription returns the TranslatableReportGroupDescription field value if set, zero value otherwise.
func (o *ReportType) GetTranslatableReportGroupDescription() TranslationTextType1000 {
	if o == nil || IsNil(o.TranslatableReportGroupDescription) {
		var ret TranslationTextType1000
		return ret
	}
	return *o.TranslatableReportGroupDescription
}

// GetTranslatableReportGroupDescriptionOk returns a tuple with the TranslatableReportGroupDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetTranslatableReportGroupDescriptionOk() (*TranslationTextType1000, bool) {
	if o == nil || IsNil(o.TranslatableReportGroupDescription) {
		return nil, false
	}
	return o.TranslatableReportGroupDescription, true
}

// HasTranslatableReportGroupDescription returns a boolean if a field has been set.
func (o *ReportType) HasTranslatableReportGroupDescription() bool {
	if o != nil && !IsNil(o.TranslatableReportGroupDescription) {
		return true
	}

	return false
}

// SetTranslatableReportGroupDescription gets a reference to the given TranslationTextType1000 and assigns it to the TranslatableReportGroupDescription field.
func (o *ReportType) SetTranslatableReportGroupDescription(v TranslationTextType1000) {
	o.TranslatableReportGroupDescription = &v
}

// GetHotel returns the Hotel field value if set, zero value otherwise.
func (o *ReportType) GetHotel() string {
	if o == nil || IsNil(o.Hotel) {
		var ret string
		return ret
	}
	return *o.Hotel
}

// GetHotelOk returns a tuple with the Hotel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetHotelOk() (*string, bool) {
	if o == nil || IsNil(o.Hotel) {
		return nil, false
	}
	return o.Hotel, true
}

// HasHotel returns a boolean if a field has been set.
func (o *ReportType) HasHotel() bool {
	if o != nil && !IsNil(o.Hotel) {
		return true
	}

	return false
}

// SetHotel gets a reference to the given string and assigns it to the Hotel field.
func (o *ReportType) SetHotel(v string) {
	o.Hotel = &v
}

// GetFormToRun returns the FormToRun field value if set, zero value otherwise.
func (o *ReportType) GetFormToRun() string {
	if o == nil || IsNil(o.FormToRun) {
		var ret string
		return ret
	}
	return *o.FormToRun
}

// GetFormToRunOk returns a tuple with the FormToRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetFormToRunOk() (*string, bool) {
	if o == nil || IsNil(o.FormToRun) {
		return nil, false
	}
	return o.FormToRun, true
}

// HasFormToRun returns a boolean if a field has been set.
func (o *ReportType) HasFormToRun() bool {
	if o != nil && !IsNil(o.FormToRun) {
		return true
	}

	return false
}

// SetFormToRun gets a reference to the given string and assigns it to the FormToRun field.
func (o *ReportType) SetFormToRun(v string) {
	o.FormToRun = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *ReportType) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *ReportType) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *ReportType) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetHasParameters returns the HasParameters field value if set, zero value otherwise.
func (o *ReportType) GetHasParameters() bool {
	if o == nil || IsNil(o.HasParameters) {
		var ret bool
		return ret
	}
	return *o.HasParameters
}

// GetHasParametersOk returns a tuple with the HasParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetHasParametersOk() (*bool, bool) {
	if o == nil || IsNil(o.HasParameters) {
		return nil, false
	}
	return o.HasParameters, true
}

// HasHasParameters returns a boolean if a field has been set.
func (o *ReportType) HasHasParameters() bool {
	if o != nil && !IsNil(o.HasParameters) {
		return true
	}

	return false
}

// SetHasParameters gets a reference to the given bool and assigns it to the HasParameters field.
func (o *ReportType) SetHasParameters(v bool) {
	o.HasParameters = &v
}

// GetSample returns the Sample field value if set, zero value otherwise.
func (o *ReportType) GetSample() bool {
	if o == nil || IsNil(o.Sample) {
		var ret bool
		return ret
	}
	return *o.Sample
}

// GetSampleOk returns a tuple with the Sample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetSampleOk() (*bool, bool) {
	if o == nil || IsNil(o.Sample) {
		return nil, false
	}
	return o.Sample, true
}

// HasSample returns a boolean if a field has been set.
func (o *ReportType) HasSample() bool {
	if o != nil && !IsNil(o.Sample) {
		return true
	}

	return false
}

// SetSample gets a reference to the given bool and assigns it to the Sample field.
func (o *ReportType) SetSample(v bool) {
	o.Sample = &v
}

// GetCustomized returns the Customized field value if set, zero value otherwise.
func (o *ReportType) GetCustomized() bool {
	if o == nil || IsNil(o.Customized) {
		var ret bool
		return ret
	}
	return *o.Customized
}

// GetCustomizedOk returns a tuple with the Customized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetCustomizedOk() (*bool, bool) {
	if o == nil || IsNil(o.Customized) {
		return nil, false
	}
	return o.Customized, true
}

// HasCustomized returns a boolean if a field has been set.
func (o *ReportType) HasCustomized() bool {
	if o != nil && !IsNil(o.Customized) {
		return true
	}

	return false
}

// SetCustomized gets a reference to the given bool and assigns it to the Customized field.
func (o *ReportType) SetCustomized(v bool) {
	o.Customized = &v
}

// GetCustomizedRtfAttachId returns the CustomizedRtfAttachId field value if set, zero value otherwise.
func (o *ReportType) GetCustomizedRtfAttachId() UniqueIDType {
	if o == nil || IsNil(o.CustomizedRtfAttachId) {
		var ret UniqueIDType
		return ret
	}
	return *o.CustomizedRtfAttachId
}

// GetCustomizedRtfAttachIdOk returns a tuple with the CustomizedRtfAttachId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetCustomizedRtfAttachIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.CustomizedRtfAttachId) {
		return nil, false
	}
	return o.CustomizedRtfAttachId, true
}

// HasCustomizedRtfAttachId returns a boolean if a field has been set.
func (o *ReportType) HasCustomizedRtfAttachId() bool {
	if o != nil && !IsNil(o.CustomizedRtfAttachId) {
		return true
	}

	return false
}

// SetCustomizedRtfAttachId gets a reference to the given UniqueIDType and assigns it to the CustomizedRtfAttachId field.
func (o *ReportType) SetCustomizedRtfAttachId(v UniqueIDType) {
	o.CustomizedRtfAttachId = &v
}

// GetCanRunSeperate returns the CanRunSeperate field value if set, zero value otherwise.
func (o *ReportType) GetCanRunSeperate() bool {
	if o == nil || IsNil(o.CanRunSeperate) {
		var ret bool
		return ret
	}
	return *o.CanRunSeperate
}

// GetCanRunSeperateOk returns a tuple with the CanRunSeperate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetCanRunSeperateOk() (*bool, bool) {
	if o == nil || IsNil(o.CanRunSeperate) {
		return nil, false
	}
	return o.CanRunSeperate, true
}

// HasCanRunSeperate returns a boolean if a field has been set.
func (o *ReportType) HasCanRunSeperate() bool {
	if o != nil && !IsNil(o.CanRunSeperate) {
		return true
	}

	return false
}

// SetCanRunSeperate gets a reference to the given bool and assigns it to the CanRunSeperate field.
func (o *ReportType) SetCanRunSeperate(v bool) {
	o.CanRunSeperate = &v
}

// GetMultiPropertyReport returns the MultiPropertyReport field value if set, zero value otherwise.
func (o *ReportType) GetMultiPropertyReport() bool {
	if o == nil || IsNil(o.MultiPropertyReport) {
		var ret bool
		return ret
	}
	return *o.MultiPropertyReport
}

// GetMultiPropertyReportOk returns a tuple with the MultiPropertyReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetMultiPropertyReportOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiPropertyReport) {
		return nil, false
	}
	return o.MultiPropertyReport, true
}

// HasMultiPropertyReport returns a boolean if a field has been set.
func (o *ReportType) HasMultiPropertyReport() bool {
	if o != nil && !IsNil(o.MultiPropertyReport) {
		return true
	}

	return false
}

// SetMultiPropertyReport gets a reference to the given bool and assigns it to the MultiPropertyReport field.
func (o *ReportType) SetMultiPropertyReport(v bool) {
	o.MultiPropertyReport = &v
}

// GetProcedureRequired returns the ProcedureRequired field value if set, zero value otherwise.
func (o *ReportType) GetProcedureRequired() bool {
	if o == nil || IsNil(o.ProcedureRequired) {
		var ret bool
		return ret
	}
	return *o.ProcedureRequired
}

// GetProcedureRequiredOk returns a tuple with the ProcedureRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetProcedureRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ProcedureRequired) {
		return nil, false
	}
	return o.ProcedureRequired, true
}

// HasProcedureRequired returns a boolean if a field has been set.
func (o *ReportType) HasProcedureRequired() bool {
	if o != nil && !IsNil(o.ProcedureRequired) {
		return true
	}

	return false
}

// SetProcedureRequired gets a reference to the given bool and assigns it to the ProcedureRequired field.
func (o *ReportType) SetProcedureRequired(v bool) {
	o.ProcedureRequired = &v
}

// GetUserDefinedReport returns the UserDefinedReport field value if set, zero value otherwise.
func (o *ReportType) GetUserDefinedReport() bool {
	if o == nil || IsNil(o.UserDefinedReport) {
		var ret bool
		return ret
	}
	return *o.UserDefinedReport
}

// GetUserDefinedReportOk returns a tuple with the UserDefinedReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetUserDefinedReportOk() (*bool, bool) {
	if o == nil || IsNil(o.UserDefinedReport) {
		return nil, false
	}
	return o.UserDefinedReport, true
}

// HasUserDefinedReport returns a boolean if a field has been set.
func (o *ReportType) HasUserDefinedReport() bool {
	if o != nil && !IsNil(o.UserDefinedReport) {
		return true
	}

	return false
}

// SetUserDefinedReport gets a reference to the given bool and assigns it to the UserDefinedReport field.
func (o *ReportType) SetUserDefinedReport(v bool) {
	o.UserDefinedReport = &v
}

// GetProtectedReport returns the ProtectedReport field value if set, zero value otherwise.
func (o *ReportType) GetProtectedReport() bool {
	if o == nil || IsNil(o.ProtectedReport) {
		var ret bool
		return ret
	}
	return *o.ProtectedReport
}

// GetProtectedReportOk returns a tuple with the ProtectedReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetProtectedReportOk() (*bool, bool) {
	if o == nil || IsNil(o.ProtectedReport) {
		return nil, false
	}
	return o.ProtectedReport, true
}

// HasProtectedReport returns a boolean if a field has been set.
func (o *ReportType) HasProtectedReport() bool {
	if o != nil && !IsNil(o.ProtectedReport) {
		return true
	}

	return false
}

// SetProtectedReport gets a reference to the given bool and assigns it to the ProtectedReport field.
func (o *ReportType) SetProtectedReport(v bool) {
	o.ProtectedReport = &v
}

// GetSystemReport returns the SystemReport field value if set, zero value otherwise.
func (o *ReportType) GetSystemReport() bool {
	if o == nil || IsNil(o.SystemReport) {
		var ret bool
		return ret
	}
	return *o.SystemReport
}

// GetSystemReportOk returns a tuple with the SystemReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetSystemReportOk() (*bool, bool) {
	if o == nil || IsNil(o.SystemReport) {
		return nil, false
	}
	return o.SystemReport, true
}

// HasSystemReport returns a boolean if a field has been set.
func (o *ReportType) HasSystemReport() bool {
	if o != nil && !IsNil(o.SystemReport) {
		return true
	}

	return false
}

// SetSystemReport gets a reference to the given bool and assigns it to the SystemReport field.
func (o *ReportType) SetSystemReport(v bool) {
	o.SystemReport = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *ReportType) GetDestination() string {
	if o == nil || IsNil(o.Destination) {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *ReportType) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *ReportType) SetDestination(v string) {
	o.Destination = &v
}

// GetDefaultPrinterName returns the DefaultPrinterName field value if set, zero value otherwise.
func (o *ReportType) GetDefaultPrinterName() string {
	if o == nil || IsNil(o.DefaultPrinterName) {
		var ret string
		return ret
	}
	return *o.DefaultPrinterName
}

// GetDefaultPrinterNameOk returns a tuple with the DefaultPrinterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetDefaultPrinterNameOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPrinterName) {
		return nil, false
	}
	return o.DefaultPrinterName, true
}

// HasDefaultPrinterName returns a boolean if a field has been set.
func (o *ReportType) HasDefaultPrinterName() bool {
	if o != nil && !IsNil(o.DefaultPrinterName) {
		return true
	}

	return false
}

// SetDefaultPrinterName gets a reference to the given string and assigns it to the DefaultPrinterName field.
func (o *ReportType) SetDefaultPrinterName(v string) {
	o.DefaultPrinterName = &v
}

// GetCopies returns the Copies field value if set, zero value otherwise.
func (o *ReportType) GetCopies() int32 {
	if o == nil || IsNil(o.Copies) {
		var ret int32
		return ret
	}
	return *o.Copies
}

// GetCopiesOk returns a tuple with the Copies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetCopiesOk() (*int32, bool) {
	if o == nil || IsNil(o.Copies) {
		return nil, false
	}
	return o.Copies, true
}

// HasCopies returns a boolean if a field has been set.
func (o *ReportType) HasCopies() bool {
	if o != nil && !IsNil(o.Copies) {
		return true
	}

	return false
}

// SetCopies gets a reference to the given int32 and assigns it to the Copies field.
func (o *ReportType) SetCopies(v int32) {
	o.Copies = &v
}

// GetShiftReport returns the ShiftReport field value if set, zero value otherwise.
func (o *ReportType) GetShiftReport() bool {
	if o == nil || IsNil(o.ShiftReport) {
		var ret bool
		return ret
	}
	return *o.ShiftReport
}

// GetShiftReportOk returns a tuple with the ShiftReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetShiftReportOk() (*bool, bool) {
	if o == nil || IsNil(o.ShiftReport) {
		return nil, false
	}
	return o.ShiftReport, true
}

// HasShiftReport returns a boolean if a field has been set.
func (o *ReportType) HasShiftReport() bool {
	if o != nil && !IsNil(o.ShiftReport) {
		return true
	}

	return false
}

// SetShiftReport gets a reference to the given bool and assigns it to the ShiftReport field.
func (o *ReportType) SetShiftReport(v bool) {
	o.ShiftReport = &v
}

// GetDataSourceType returns the DataSourceType field value if set, zero value otherwise.
func (o *ReportType) GetDataSourceType() string {
	if o == nil || IsNil(o.DataSourceType) {
		var ret string
		return ret
	}
	return *o.DataSourceType
}

// GetDataSourceTypeOk returns a tuple with the DataSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetDataSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataSourceType) {
		return nil, false
	}
	return o.DataSourceType, true
}

// HasDataSourceType returns a boolean if a field has been set.
func (o *ReportType) HasDataSourceType() bool {
	if o != nil && !IsNil(o.DataSourceType) {
		return true
	}

	return false
}

// SetDataSourceType gets a reference to the given string and assigns it to the DataSourceType field.
func (o *ReportType) SetDataSourceType(v string) {
	o.DataSourceType = &v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *ReportType) GetDataSource() string {
	if o == nil || IsNil(o.DataSource) {
		var ret string
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetDataSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *ReportType) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given string and assigns it to the DataSource field.
func (o *ReportType) SetDataSource(v string) {
	o.DataSource = &v
}

// GetUsedInApp returns the UsedInApp field value if set, zero value otherwise.
func (o *ReportType) GetUsedInApp() string {
	if o == nil || IsNil(o.UsedInApp) {
		var ret string
		return ret
	}
	return *o.UsedInApp
}

// GetUsedInAppOk returns a tuple with the UsedInApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetUsedInAppOk() (*string, bool) {
	if o == nil || IsNil(o.UsedInApp) {
		return nil, false
	}
	return o.UsedInApp, true
}

// HasUsedInApp returns a boolean if a field has been set.
func (o *ReportType) HasUsedInApp() bool {
	if o != nil && !IsNil(o.UsedInApp) {
		return true
	}

	return false
}

// SetUsedInApp gets a reference to the given string and assigns it to the UsedInApp field.
func (o *ReportType) SetUsedInApp(v string) {
	o.UsedInApp = &v
}

// GetOpera9Certified returns the Opera9Certified field value if set, zero value otherwise.
func (o *ReportType) GetOpera9Certified() bool {
	if o == nil || IsNil(o.Opera9Certified) {
		var ret bool
		return ret
	}
	return *o.Opera9Certified
}

// GetOpera9CertifiedOk returns a tuple with the Opera9Certified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetOpera9CertifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Opera9Certified) {
		return nil, false
	}
	return o.Opera9Certified, true
}

// HasOpera9Certified returns a boolean if a field has been set.
func (o *ReportType) HasOpera9Certified() bool {
	if o != nil && !IsNil(o.Opera9Certified) {
		return true
	}

	return false
}

// SetOpera9Certified gets a reference to the given bool and assigns it to the Opera9Certified field.
func (o *ReportType) SetOpera9Certified(v bool) {
	o.Opera9Certified = &v
}

// GetWatermarkDetails returns the WatermarkDetails field value if set, zero value otherwise.
func (o *ReportType) GetWatermarkDetails() WatermarkType {
	if o == nil || IsNil(o.WatermarkDetails) {
		var ret WatermarkType
		return ret
	}
	return *o.WatermarkDetails
}

// GetWatermarkDetailsOk returns a tuple with the WatermarkDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetWatermarkDetailsOk() (*WatermarkType, bool) {
	if o == nil || IsNil(o.WatermarkDetails) {
		return nil, false
	}
	return o.WatermarkDetails, true
}

// HasWatermarkDetails returns a boolean if a field has been set.
func (o *ReportType) HasWatermarkDetails() bool {
	if o != nil && !IsNil(o.WatermarkDetails) {
		return true
	}

	return false
}

// SetWatermarkDetails gets a reference to the given WatermarkType and assigns it to the WatermarkDetails field.
func (o *ReportType) SetWatermarkDetails(v WatermarkType) {
	o.WatermarkDetails = &v
}

// GetExternalReportUrl returns the ExternalReportUrl field value if set, zero value otherwise.
func (o *ReportType) GetExternalReportUrl() ExternalUrlInfoType {
	if o == nil || IsNil(o.ExternalReportUrl) {
		var ret ExternalUrlInfoType
		return ret
	}
	return *o.ExternalReportUrl
}

// GetExternalReportUrlOk returns a tuple with the ExternalReportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetExternalReportUrlOk() (*ExternalUrlInfoType, bool) {
	if o == nil || IsNil(o.ExternalReportUrl) {
		return nil, false
	}
	return o.ExternalReportUrl, true
}

// HasExternalReportUrl returns a boolean if a field has been set.
func (o *ReportType) HasExternalReportUrl() bool {
	if o != nil && !IsNil(o.ExternalReportUrl) {
		return true
	}

	return false
}

// SetExternalReportUrl gets a reference to the given ExternalUrlInfoType and assigns it to the ExternalReportUrl field.
func (o *ReportType) SetExternalReportUrl(v ExternalUrlInfoType) {
	o.ExternalReportUrl = &v
}

// GetRowsPerPage returns the RowsPerPage field value if set, zero value otherwise.
func (o *ReportType) GetRowsPerPage() int32 {
	if o == nil || IsNil(o.RowsPerPage) {
		var ret int32
		return ret
	}
	return *o.RowsPerPage
}

// GetRowsPerPageOk returns a tuple with the RowsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetRowsPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.RowsPerPage) {
		return nil, false
	}
	return o.RowsPerPage, true
}

// HasRowsPerPage returns a boolean if a field has been set.
func (o *ReportType) HasRowsPerPage() bool {
	if o != nil && !IsNil(o.RowsPerPage) {
		return true
	}

	return false
}

// SetRowsPerPage gets a reference to the given int32 and assigns it to the RowsPerPage field.
func (o *ReportType) SetRowsPerPage(v int32) {
	o.RowsPerPage = &v
}

// GetColumnsPerPage returns the ColumnsPerPage field value if set, zero value otherwise.
func (o *ReportType) GetColumnsPerPage() int32 {
	if o == nil || IsNil(o.ColumnsPerPage) {
		var ret int32
		return ret
	}
	return *o.ColumnsPerPage
}

// GetColumnsPerPageOk returns a tuple with the ColumnsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetColumnsPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.ColumnsPerPage) {
		return nil, false
	}
	return o.ColumnsPerPage, true
}

// HasColumnsPerPage returns a boolean if a field has been set.
func (o *ReportType) HasColumnsPerPage() bool {
	if o != nil && !IsNil(o.ColumnsPerPage) {
		return true
	}

	return false
}

// SetColumnsPerPage gets a reference to the given int32 and assigns it to the ColumnsPerPage field.
func (o *ReportType) SetColumnsPerPage(v int32) {
	o.ColumnsPerPage = &v
}

// GetExcelOutput returns the ExcelOutput field value if set, zero value otherwise.
func (o *ReportType) GetExcelOutput() bool {
	if o == nil || IsNil(o.ExcelOutput) {
		var ret bool
		return ret
	}
	return *o.ExcelOutput
}

// GetExcelOutputOk returns a tuple with the ExcelOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportType) GetExcelOutputOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcelOutput) {
		return nil, false
	}
	return o.ExcelOutput, true
}

// HasExcelOutput returns a boolean if a field has been set.
func (o *ReportType) HasExcelOutput() bool {
	if o != nil && !IsNil(o.ExcelOutput) {
		return true
	}

	return false
}

// SetExcelOutput gets a reference to the given bool and assigns it to the ExcelOutput field.
func (o *ReportType) SetExcelOutput(v bool) {
	o.ExcelOutput = &v
}

func (o ReportType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ModuleId) {
		toSerialize["moduleId"] = o.ModuleId
	}
	if !IsNil(o.ReportName) {
		toSerialize["reportName"] = o.ReportName
	}
	if !IsNil(o.ModuleType) {
		toSerialize["moduleType"] = o.ModuleType
	}
	if !IsNil(o.ReportDescription) {
		toSerialize["reportDescription"] = o.ReportDescription
	}
	if !IsNil(o.ReportGroupId) {
		toSerialize["reportGroupId"] = o.ReportGroupId
	}
	if !IsNil(o.ReportGroup) {
		toSerialize["reportGroup"] = o.ReportGroup
	}
	if !IsNil(o.AttachedReports) {
		toSerialize["attachedReports"] = o.AttachedReports
	}
	if !IsNil(o.ReportGroupDescription) {
		toSerialize["reportGroupDescription"] = o.ReportGroupDescription
	}
	if !IsNil(o.TranslatableReportGroupDescription) {
		toSerialize["translatableReportGroupDescription"] = o.TranslatableReportGroupDescription
	}
	if !IsNil(o.Hotel) {
		toSerialize["hotel"] = o.Hotel
	}
	if !IsNil(o.FormToRun) {
		toSerialize["formToRun"] = o.FormToRun
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.HasParameters) {
		toSerialize["hasParameters"] = o.HasParameters
	}
	if !IsNil(o.Sample) {
		toSerialize["sample"] = o.Sample
	}
	if !IsNil(o.Customized) {
		toSerialize["customized"] = o.Customized
	}
	if !IsNil(o.CustomizedRtfAttachId) {
		toSerialize["customizedRtfAttachId"] = o.CustomizedRtfAttachId
	}
	if !IsNil(o.CanRunSeperate) {
		toSerialize["canRunSeperate"] = o.CanRunSeperate
	}
	if !IsNil(o.MultiPropertyReport) {
		toSerialize["multiPropertyReport"] = o.MultiPropertyReport
	}
	if !IsNil(o.ProcedureRequired) {
		toSerialize["procedureRequired"] = o.ProcedureRequired
	}
	if !IsNil(o.UserDefinedReport) {
		toSerialize["userDefinedReport"] = o.UserDefinedReport
	}
	if !IsNil(o.ProtectedReport) {
		toSerialize["protectedReport"] = o.ProtectedReport
	}
	if !IsNil(o.SystemReport) {
		toSerialize["systemReport"] = o.SystemReport
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.DefaultPrinterName) {
		toSerialize["defaultPrinterName"] = o.DefaultPrinterName
	}
	if !IsNil(o.Copies) {
		toSerialize["copies"] = o.Copies
	}
	if !IsNil(o.ShiftReport) {
		toSerialize["shiftReport"] = o.ShiftReport
	}
	if !IsNil(o.DataSourceType) {
		toSerialize["dataSourceType"] = o.DataSourceType
	}
	if !IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}
	if !IsNil(o.UsedInApp) {
		toSerialize["usedInApp"] = o.UsedInApp
	}
	if !IsNil(o.Opera9Certified) {
		toSerialize["opera9Certified"] = o.Opera9Certified
	}
	if !IsNil(o.WatermarkDetails) {
		toSerialize["watermarkDetails"] = o.WatermarkDetails
	}
	if !IsNil(o.ExternalReportUrl) {
		toSerialize["externalReportUrl"] = o.ExternalReportUrl
	}
	if !IsNil(o.RowsPerPage) {
		toSerialize["rowsPerPage"] = o.RowsPerPage
	}
	if !IsNil(o.ColumnsPerPage) {
		toSerialize["columnsPerPage"] = o.ColumnsPerPage
	}
	if !IsNil(o.ExcelOutput) {
		toSerialize["excelOutput"] = o.ExcelOutput
	}
	return toSerialize, nil
}

type NullableReportType struct {
	value *ReportType
	isSet bool
}

func (v NullableReportType) Get() *ReportType {
	return v.value
}

func (v *NullableReportType) Set(val *ReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportType(val *ReportType) *NullableReportType {
	return &NullableReportType{value: val, isSet: true}
}

func (v NullableReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


