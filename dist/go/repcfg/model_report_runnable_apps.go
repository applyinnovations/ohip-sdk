/*
OPERA Cloud Report Master Data Management API

APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
	"fmt"
)

// ReportRunnableApps Simple type for report module type.
type ReportRunnableApps string

// List of reportRunnableApps
const (
	REPORTRUNNABLEAPPS_GLOBAL ReportRunnableApps = "Global"
	REPORTRUNNABLEAPPS_PROPERTY ReportRunnableApps = "Property"
	REPORTRUNNABLEAPPS_SALES_AND_CATERING ReportRunnableApps = "SalesAndCatering"
)

// All allowed values of ReportRunnableApps enum
var AllowedReportRunnableAppsEnumValues = []ReportRunnableApps{
	"Global",
	"Property",
	"SalesAndCatering",
}

func (v *ReportRunnableApps) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReportRunnableApps(value)
	for _, existing := range AllowedReportRunnableAppsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReportRunnableApps", value)
}

// NewReportRunnableAppsFromValue returns a pointer to a valid ReportRunnableApps
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportRunnableAppsFromValue(v string) (*ReportRunnableApps, error) {
	ev := ReportRunnableApps(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReportRunnableApps: valid values are %v", v, AllowedReportRunnableAppsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportRunnableApps) IsValid() bool {
	for _, existing := range AllowedReportRunnableAppsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to reportRunnableApps value
func (v ReportRunnableApps) Ptr() *ReportRunnableApps {
	return &v
}

type NullableReportRunnableApps struct {
	value *ReportRunnableApps
	isSet bool
}

func (v NullableReportRunnableApps) Get() *ReportRunnableApps {
	return v.value
}

func (v *NullableReportRunnableApps) Set(val *ReportRunnableApps) {
	v.value = val
	v.isSet = true
}

func (v NullableReportRunnableApps) IsSet() bool {
	return v.isSet
}

func (v *NullableReportRunnableApps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportRunnableApps(val *ReportRunnableApps) *NullableReportRunnableApps {
	return &NullableReportRunnableApps{value: val, isSet: true}
}

func (v NullableReportRunnableApps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportRunnableApps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

