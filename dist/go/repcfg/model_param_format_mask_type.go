/*
OPERA Cloud Report Master Data Management API

APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
	"fmt"
)

// ParamFormatMaskType Specifies the format mask for the parameter.
type ParamFormatMaskType string

// List of paramFormatMaskType
const (
	PARAMFORMATMASKTYPE_NONE ParamFormatMaskType = "None"
	PARAMFORMATMASKTYPE_UPPER ParamFormatMaskType = "Upper"
	PARAMFORMATMASKTYPE_LOWER ParamFormatMaskType = "Lower"
)

// All allowed values of ParamFormatMaskType enum
var AllowedParamFormatMaskTypeEnumValues = []ParamFormatMaskType{
	"None",
	"Upper",
	"Lower",
}

func (v *ParamFormatMaskType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParamFormatMaskType(value)
	for _, existing := range AllowedParamFormatMaskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParamFormatMaskType", value)
}

// NewParamFormatMaskTypeFromValue returns a pointer to a valid ParamFormatMaskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParamFormatMaskTypeFromValue(v string) (*ParamFormatMaskType, error) {
	ev := ParamFormatMaskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParamFormatMaskType: valid values are %v", v, AllowedParamFormatMaskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParamFormatMaskType) IsValid() bool {
	for _, existing := range AllowedParamFormatMaskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paramFormatMaskType value
func (v ParamFormatMaskType) Ptr() *ParamFormatMaskType {
	return &v
}

type NullableParamFormatMaskType struct {
	value *ParamFormatMaskType
	isSet bool
}

func (v NullableParamFormatMaskType) Get() *ParamFormatMaskType {
	return v.value
}

func (v *NullableParamFormatMaskType) Set(val *ParamFormatMaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableParamFormatMaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableParamFormatMaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamFormatMaskType(val *ParamFormatMaskType) *NullableParamFormatMaskType {
	return &NullableParamFormatMaskType{value: val, isSet: true}
}

func (v NullableParamFormatMaskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamFormatMaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

