/*
OPERA Cloud Report Master Data Management API

APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
)

// checks if the LovParamDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LovParamDetailsType{}

// LovParamDetailsType Identifies a destination record for the report.
type LovParamDetailsType struct {
	// Query statement for LOV based report parameters.
	LovSql *string `json:"lovSql,omitempty"`
	// List of values for report parameter.
	LOVs []ParamLOVType `json:"lOVs,omitempty"`
	// Flag to indicate that input should be validated against LOV.
	LovValidate *bool `json:"lovValidate,omitempty"`
	// This attribute is used to indicate if an LOV defined is multi-select. This is particularly useful for simple reports.
	LovMultiSelect *bool `json:"lovMultiSelect,omitempty"`
}

// NewLovParamDetailsType instantiates a new LovParamDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLovParamDetailsType() *LovParamDetailsType {
	this := LovParamDetailsType{}
	return &this
}

// NewLovParamDetailsTypeWithDefaults instantiates a new LovParamDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLovParamDetailsTypeWithDefaults() *LovParamDetailsType {
	this := LovParamDetailsType{}
	return &this
}

// GetLovSql returns the LovSql field value if set, zero value otherwise.
func (o *LovParamDetailsType) GetLovSql() string {
	if o == nil || IsNil(o.LovSql) {
		var ret string
		return ret
	}
	return *o.LovSql
}

// GetLovSqlOk returns a tuple with the LovSql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LovParamDetailsType) GetLovSqlOk() (*string, bool) {
	if o == nil || IsNil(o.LovSql) {
		return nil, false
	}
	return o.LovSql, true
}

// HasLovSql returns a boolean if a field has been set.
func (o *LovParamDetailsType) HasLovSql() bool {
	if o != nil && !IsNil(o.LovSql) {
		return true
	}

	return false
}

// SetLovSql gets a reference to the given string and assigns it to the LovSql field.
func (o *LovParamDetailsType) SetLovSql(v string) {
	o.LovSql = &v
}

// GetLOVs returns the LOVs field value if set, zero value otherwise.
func (o *LovParamDetailsType) GetLOVs() []ParamLOVType {
	if o == nil || IsNil(o.LOVs) {
		var ret []ParamLOVType
		return ret
	}
	return o.LOVs
}

// GetLOVsOk returns a tuple with the LOVs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LovParamDetailsType) GetLOVsOk() ([]ParamLOVType, bool) {
	if o == nil || IsNil(o.LOVs) {
		return nil, false
	}
	return o.LOVs, true
}

// HasLOVs returns a boolean if a field has been set.
func (o *LovParamDetailsType) HasLOVs() bool {
	if o != nil && !IsNil(o.LOVs) {
		return true
	}

	return false
}

// SetLOVs gets a reference to the given []ParamLOVType and assigns it to the LOVs field.
func (o *LovParamDetailsType) SetLOVs(v []ParamLOVType) {
	o.LOVs = v
}

// GetLovValidate returns the LovValidate field value if set, zero value otherwise.
func (o *LovParamDetailsType) GetLovValidate() bool {
	if o == nil || IsNil(o.LovValidate) {
		var ret bool
		return ret
	}
	return *o.LovValidate
}

// GetLovValidateOk returns a tuple with the LovValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LovParamDetailsType) GetLovValidateOk() (*bool, bool) {
	if o == nil || IsNil(o.LovValidate) {
		return nil, false
	}
	return o.LovValidate, true
}

// HasLovValidate returns a boolean if a field has been set.
func (o *LovParamDetailsType) HasLovValidate() bool {
	if o != nil && !IsNil(o.LovValidate) {
		return true
	}

	return false
}

// SetLovValidate gets a reference to the given bool and assigns it to the LovValidate field.
func (o *LovParamDetailsType) SetLovValidate(v bool) {
	o.LovValidate = &v
}

// GetLovMultiSelect returns the LovMultiSelect field value if set, zero value otherwise.
func (o *LovParamDetailsType) GetLovMultiSelect() bool {
	if o == nil || IsNil(o.LovMultiSelect) {
		var ret bool
		return ret
	}
	return *o.LovMultiSelect
}

// GetLovMultiSelectOk returns a tuple with the LovMultiSelect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LovParamDetailsType) GetLovMultiSelectOk() (*bool, bool) {
	if o == nil || IsNil(o.LovMultiSelect) {
		return nil, false
	}
	return o.LovMultiSelect, true
}

// HasLovMultiSelect returns a boolean if a field has been set.
func (o *LovParamDetailsType) HasLovMultiSelect() bool {
	if o != nil && !IsNil(o.LovMultiSelect) {
		return true
	}

	return false
}

// SetLovMultiSelect gets a reference to the given bool and assigns it to the LovMultiSelect field.
func (o *LovParamDetailsType) SetLovMultiSelect(v bool) {
	o.LovMultiSelect = &v
}

func (o LovParamDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LovParamDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LovSql) {
		toSerialize["lovSql"] = o.LovSql
	}
	if !IsNil(o.LOVs) {
		toSerialize["lOVs"] = o.LOVs
	}
	if !IsNil(o.LovValidate) {
		toSerialize["lovValidate"] = o.LovValidate
	}
	if !IsNil(o.LovMultiSelect) {
		toSerialize["lovMultiSelect"] = o.LovMultiSelect
	}
	return toSerialize, nil
}

type NullableLovParamDetailsType struct {
	value *LovParamDetailsType
	isSet bool
}

func (v NullableLovParamDetailsType) Get() *LovParamDetailsType {
	return v.value
}

func (v *NullableLovParamDetailsType) Set(val *LovParamDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableLovParamDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableLovParamDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLovParamDetailsType(val *LovParamDetailsType) *NullableLovParamDetailsType {
	return &NullableLovParamDetailsType{value: val, isSet: true}
}

func (v NullableLovParamDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLovParamDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


