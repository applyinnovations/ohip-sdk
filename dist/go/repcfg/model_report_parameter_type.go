/*
OPERA Cloud Report Master Data Management API

APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
)

// checks if the ReportParameterType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportParameterType{}

// ReportParameterType Defines an individual report parameter.
type ReportParameterType struct {
	// Individual report parameter details.
	Name *string `json:"name,omitempty"`
	// Display label for report parameter.
	Label *string `json:"label,omitempty"`
	DataType *ParamDataType `json:"dataType,omitempty"`
	// Initial report parameter value.
	Value *string `json:"value,omitempty"`
	// Date value from offset.
	CalculatedDateValue *string `json:"calculatedDateValue,omitempty"`
	// Format mask for date report parameters.
	DateFormatMask *string `json:"dateFormatMask,omitempty"`
	// Report parameter display order.
	OrderBy *int32 `json:"orderBy,omitempty"`
	// Number of days to offset from current business date for date report parameter.
	DateOffset *int32 `json:"dateOffset,omitempty"`
	FormatMask *ParamFormatMaskType `json:"formatMask,omitempty"`
	BuildStringForDateOffset *string `json:"buildStringForDateOffset,omitempty"`
	LovParam *LovParamDetailsType `json:"lovParam,omitempty"`
}

// NewReportParameterType instantiates a new ReportParameterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportParameterType() *ReportParameterType {
	this := ReportParameterType{}
	return &this
}

// NewReportParameterTypeWithDefaults instantiates a new ReportParameterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportParameterTypeWithDefaults() *ReportParameterType {
	this := ReportParameterType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReportParameterType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReportParameterType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReportParameterType) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ReportParameterType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ReportParameterType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ReportParameterType) SetLabel(v string) {
	o.Label = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ReportParameterType) GetDataType() ParamDataType {
	if o == nil || IsNil(o.DataType) {
		var ret ParamDataType
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetDataTypeOk() (*ParamDataType, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ReportParameterType) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given ParamDataType and assigns it to the DataType field.
func (o *ReportParameterType) SetDataType(v ParamDataType) {
	o.DataType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ReportParameterType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ReportParameterType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ReportParameterType) SetValue(v string) {
	o.Value = &v
}

// GetCalculatedDateValue returns the CalculatedDateValue field value if set, zero value otherwise.
func (o *ReportParameterType) GetCalculatedDateValue() string {
	if o == nil || IsNil(o.CalculatedDateValue) {
		var ret string
		return ret
	}
	return *o.CalculatedDateValue
}

// GetCalculatedDateValueOk returns a tuple with the CalculatedDateValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetCalculatedDateValueOk() (*string, bool) {
	if o == nil || IsNil(o.CalculatedDateValue) {
		return nil, false
	}
	return o.CalculatedDateValue, true
}

// HasCalculatedDateValue returns a boolean if a field has been set.
func (o *ReportParameterType) HasCalculatedDateValue() bool {
	if o != nil && !IsNil(o.CalculatedDateValue) {
		return true
	}

	return false
}

// SetCalculatedDateValue gets a reference to the given string and assigns it to the CalculatedDateValue field.
func (o *ReportParameterType) SetCalculatedDateValue(v string) {
	o.CalculatedDateValue = &v
}

// GetDateFormatMask returns the DateFormatMask field value if set, zero value otherwise.
func (o *ReportParameterType) GetDateFormatMask() string {
	if o == nil || IsNil(o.DateFormatMask) {
		var ret string
		return ret
	}
	return *o.DateFormatMask
}

// GetDateFormatMaskOk returns a tuple with the DateFormatMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetDateFormatMaskOk() (*string, bool) {
	if o == nil || IsNil(o.DateFormatMask) {
		return nil, false
	}
	return o.DateFormatMask, true
}

// HasDateFormatMask returns a boolean if a field has been set.
func (o *ReportParameterType) HasDateFormatMask() bool {
	if o != nil && !IsNil(o.DateFormatMask) {
		return true
	}

	return false
}

// SetDateFormatMask gets a reference to the given string and assigns it to the DateFormatMask field.
func (o *ReportParameterType) SetDateFormatMask(v string) {
	o.DateFormatMask = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *ReportParameterType) GetOrderBy() int32 {
	if o == nil || IsNil(o.OrderBy) {
		var ret int32
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetOrderByOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *ReportParameterType) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given int32 and assigns it to the OrderBy field.
func (o *ReportParameterType) SetOrderBy(v int32) {
	o.OrderBy = &v
}

// GetDateOffset returns the DateOffset field value if set, zero value otherwise.
func (o *ReportParameterType) GetDateOffset() int32 {
	if o == nil || IsNil(o.DateOffset) {
		var ret int32
		return ret
	}
	return *o.DateOffset
}

// GetDateOffsetOk returns a tuple with the DateOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetDateOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.DateOffset) {
		return nil, false
	}
	return o.DateOffset, true
}

// HasDateOffset returns a boolean if a field has been set.
func (o *ReportParameterType) HasDateOffset() bool {
	if o != nil && !IsNil(o.DateOffset) {
		return true
	}

	return false
}

// SetDateOffset gets a reference to the given int32 and assigns it to the DateOffset field.
func (o *ReportParameterType) SetDateOffset(v int32) {
	o.DateOffset = &v
}

// GetFormatMask returns the FormatMask field value if set, zero value otherwise.
func (o *ReportParameterType) GetFormatMask() ParamFormatMaskType {
	if o == nil || IsNil(o.FormatMask) {
		var ret ParamFormatMaskType
		return ret
	}
	return *o.FormatMask
}

// GetFormatMaskOk returns a tuple with the FormatMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetFormatMaskOk() (*ParamFormatMaskType, bool) {
	if o == nil || IsNil(o.FormatMask) {
		return nil, false
	}
	return o.FormatMask, true
}

// HasFormatMask returns a boolean if a field has been set.
func (o *ReportParameterType) HasFormatMask() bool {
	if o != nil && !IsNil(o.FormatMask) {
		return true
	}

	return false
}

// SetFormatMask gets a reference to the given ParamFormatMaskType and assigns it to the FormatMask field.
func (o *ReportParameterType) SetFormatMask(v ParamFormatMaskType) {
	o.FormatMask = &v
}

// GetBuildStringForDateOffset returns the BuildStringForDateOffset field value if set, zero value otherwise.
func (o *ReportParameterType) GetBuildStringForDateOffset() string {
	if o == nil || IsNil(o.BuildStringForDateOffset) {
		var ret string
		return ret
	}
	return *o.BuildStringForDateOffset
}

// GetBuildStringForDateOffsetOk returns a tuple with the BuildStringForDateOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetBuildStringForDateOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.BuildStringForDateOffset) {
		return nil, false
	}
	return o.BuildStringForDateOffset, true
}

// HasBuildStringForDateOffset returns a boolean if a field has been set.
func (o *ReportParameterType) HasBuildStringForDateOffset() bool {
	if o != nil && !IsNil(o.BuildStringForDateOffset) {
		return true
	}

	return false
}

// SetBuildStringForDateOffset gets a reference to the given string and assigns it to the BuildStringForDateOffset field.
func (o *ReportParameterType) SetBuildStringForDateOffset(v string) {
	o.BuildStringForDateOffset = &v
}

// GetLovParam returns the LovParam field value if set, zero value otherwise.
func (o *ReportParameterType) GetLovParam() LovParamDetailsType {
	if o == nil || IsNil(o.LovParam) {
		var ret LovParamDetailsType
		return ret
	}
	return *o.LovParam
}

// GetLovParamOk returns a tuple with the LovParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportParameterType) GetLovParamOk() (*LovParamDetailsType, bool) {
	if o == nil || IsNil(o.LovParam) {
		return nil, false
	}
	return o.LovParam, true
}

// HasLovParam returns a boolean if a field has been set.
func (o *ReportParameterType) HasLovParam() bool {
	if o != nil && !IsNil(o.LovParam) {
		return true
	}

	return false
}

// SetLovParam gets a reference to the given LovParamDetailsType and assigns it to the LovParam field.
func (o *ReportParameterType) SetLovParam(v LovParamDetailsType) {
	o.LovParam = &v
}

func (o ReportParameterType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportParameterType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.CalculatedDateValue) {
		toSerialize["calculatedDateValue"] = o.CalculatedDateValue
	}
	if !IsNil(o.DateFormatMask) {
		toSerialize["dateFormatMask"] = o.DateFormatMask
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.DateOffset) {
		toSerialize["dateOffset"] = o.DateOffset
	}
	if !IsNil(o.FormatMask) {
		toSerialize["formatMask"] = o.FormatMask
	}
	if !IsNil(o.BuildStringForDateOffset) {
		toSerialize["buildStringForDateOffset"] = o.BuildStringForDateOffset
	}
	if !IsNil(o.LovParam) {
		toSerialize["lovParam"] = o.LovParam
	}
	return toSerialize, nil
}

type NullableReportParameterType struct {
	value *ReportParameterType
	isSet bool
}

func (v NullableReportParameterType) Get() *ReportParameterType {
	return v.value
}

func (v *NullableReportParameterType) Set(val *ReportParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableReportParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableReportParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportParameterType(val *ReportParameterType) *NullableReportParameterType {
	return &NullableReportParameterType{value: val, isSet: true}
}

func (v NullableReportParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


