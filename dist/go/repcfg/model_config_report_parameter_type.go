/*
OPERA Cloud Report Master Data Management API

APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
)

// checks if the ConfigReportParameterType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigReportParameterType{}

// ConfigReportParameterType A report parameter.
type ConfigReportParameterType struct {
	// Report parameter name.
	Name *string `json:"name,omitempty"`
	// Display label for report parameter.
	Label *string `json:"label,omitempty"`
	DataType *ParamDataType `json:"dataType,omitempty"`
	// Default report parameter value.
	Value *string `json:"value,omitempty"`
	// Date Ofset could be in the format +x DAYS.
	DateOffset *string `json:"dateOffset,omitempty"`
	// Query statement for LOV based report parameters.
	LovSql *string `json:"lovSql,omitempty"`
	// Display sequence of report parameter.
	Sequence *int32 `json:"sequence,omitempty"`
}

// NewConfigReportParameterType instantiates a new ConfigReportParameterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigReportParameterType() *ConfigReportParameterType {
	this := ConfigReportParameterType{}
	return &this
}

// NewConfigReportParameterTypeWithDefaults instantiates a new ConfigReportParameterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigReportParameterTypeWithDefaults() *ConfigReportParameterType {
	this := ConfigReportParameterType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigReportParameterType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigReportParameterType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigReportParameterType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConfigReportParameterType) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ConfigReportParameterType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigReportParameterType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ConfigReportParameterType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ConfigReportParameterType) SetLabel(v string) {
	o.Label = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ConfigReportParameterType) GetDataType() ParamDataType {
	if o == nil || IsNil(o.DataType) {
		var ret ParamDataType
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigReportParameterType) GetDataTypeOk() (*ParamDataType, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ConfigReportParameterType) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given ParamDataType and assigns it to the DataType field.
func (o *ConfigReportParameterType) SetDataType(v ParamDataType) {
	o.DataType = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConfigReportParameterType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigReportParameterType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConfigReportParameterType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ConfigReportParameterType) SetValue(v string) {
	o.Value = &v
}

// GetDateOffset returns the DateOffset field value if set, zero value otherwise.
func (o *ConfigReportParameterType) GetDateOffset() string {
	if o == nil || IsNil(o.DateOffset) {
		var ret string
		return ret
	}
	return *o.DateOffset
}

// GetDateOffsetOk returns a tuple with the DateOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigReportParameterType) GetDateOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.DateOffset) {
		return nil, false
	}
	return o.DateOffset, true
}

// HasDateOffset returns a boolean if a field has been set.
func (o *ConfigReportParameterType) HasDateOffset() bool {
	if o != nil && !IsNil(o.DateOffset) {
		return true
	}

	return false
}

// SetDateOffset gets a reference to the given string and assigns it to the DateOffset field.
func (o *ConfigReportParameterType) SetDateOffset(v string) {
	o.DateOffset = &v
}

// GetLovSql returns the LovSql field value if set, zero value otherwise.
func (o *ConfigReportParameterType) GetLovSql() string {
	if o == nil || IsNil(o.LovSql) {
		var ret string
		return ret
	}
	return *o.LovSql
}

// GetLovSqlOk returns a tuple with the LovSql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigReportParameterType) GetLovSqlOk() (*string, bool) {
	if o == nil || IsNil(o.LovSql) {
		return nil, false
	}
	return o.LovSql, true
}

// HasLovSql returns a boolean if a field has been set.
func (o *ConfigReportParameterType) HasLovSql() bool {
	if o != nil && !IsNil(o.LovSql) {
		return true
	}

	return false
}

// SetLovSql gets a reference to the given string and assigns it to the LovSql field.
func (o *ConfigReportParameterType) SetLovSql(v string) {
	o.LovSql = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ConfigReportParameterType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigReportParameterType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ConfigReportParameterType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *ConfigReportParameterType) SetSequence(v int32) {
	o.Sequence = &v
}

func (o ConfigReportParameterType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigReportParameterType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.DateOffset) {
		toSerialize["dateOffset"] = o.DateOffset
	}
	if !IsNil(o.LovSql) {
		toSerialize["lovSql"] = o.LovSql
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableConfigReportParameterType struct {
	value *ConfigReportParameterType
	isSet bool
}

func (v NullableConfigReportParameterType) Get() *ConfigReportParameterType {
	return v.value
}

func (v *NullableConfigReportParameterType) Set(val *ConfigReportParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigReportParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigReportParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigReportParameterType(val *ConfigReportParameterType) *NullableConfigReportParameterType {
	return &NullableConfigReportParameterType{value: val, isSet: true}
}

func (v NullableConfigReportParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigReportParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


