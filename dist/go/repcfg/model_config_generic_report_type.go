/*
OPERA Cloud Report Master Data Management API

APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
)

// checks if the ConfigGenericReportType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigGenericReportType{}

// ConfigGenericReportType A mandatory or non-mandatory procedure or report.
type ConfigGenericReportType struct {
	Name *TranslationTextType1000 `json:"name,omitempty"`
	// Name of the .REP or .RTF file. .REP or .RTF extension is not needed.
	ReportName *string `json:"reportName,omitempty"`
	// Flag which indicates whether the report is user defined.
	UserDefinedReport *bool `json:"userDefinedReport,omitempty"`
	ModuleType *ReportModuleTypeType `json:"moduleType,omitempty"`
	// Report can be run in these applications - Global level, property level or in the Sales & Event Management.
	UsedInApp []ReportRunnableApps `json:"usedInApp,omitempty"`
	// Set to ODT for BI Publisher reports.
	DataSourceType *string `json:"dataSourceType,omitempty"`
	// Data source for BI Publisher reports.
	DataSource *string `json:"dataSource,omitempty"`
	// Flag indicating whether procedure or report is mandatory or not.
	Mandatory *bool `json:"mandatory,omitempty"`
	// Form which is run to collect parameter information to generate the report.
	FormToRun *string `json:"formToRun,omitempty"`
	// The language in which the report is configured. This language code will be used when running a report for guests like registration cards, folio etc when GUEST LANGUAGE functionality is turned on.
	ReportLanguage *string `json:"reportLanguage,omitempty"`
	// Flag indicating whether procedure or report is active to run.
	Active *bool `json:"active,omitempty"`
	// Flag indicating whether report is protected or not.
	Protected *bool `json:"protected,omitempty"`
	// Display sequence of procedure or report.
	Sequence *int32 `json:"sequence,omitempty"`
	// Report group to which the report is being added.
	ReportGroup *string `json:"reportGroup,omitempty"`
	// Flag which indicates if the report can be run for multiple properties.
	MultiPropertyReport *bool `json:"multiPropertyReport,omitempty"`
	// Flag to indicate whether the report can be exported to Excel.
	ExcelOutput *bool `json:"excelOutput,omitempty"`
	// Unique Id that references an object uniquely in the system.
	AttachedReports []UniqueIDType `json:"attachedReports,omitempty"`
	WatermarkDetails *WatermarkType `json:"watermarkDetails,omitempty"`
	// A report parameter.
	Parameters []ConfigReportParameterType `json:"parameters,omitempty"`
	// Rows to be entered for Key Packet report group.
	RowsPerPage *int32 `json:"rowsPerPage,omitempty"`
	// Columns to be entered for Key Packet report group.
	ColumnsPerPage *int32 `json:"columnsPerPage,omitempty"`
	ModuleId *UniqueIDType `json:"moduleId,omitempty"`
	ExternalReportUrl *ExternalUrlInfoType `json:"externalReportUrl,omitempty"`
	PrintReport *PrintReportType `json:"printReport,omitempty"`
}

// NewConfigGenericReportType instantiates a new ConfigGenericReportType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigGenericReportType() *ConfigGenericReportType {
	this := ConfigGenericReportType{}
	return &this
}

// NewConfigGenericReportTypeWithDefaults instantiates a new ConfigGenericReportType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigGenericReportTypeWithDefaults() *ConfigGenericReportType {
	this := ConfigGenericReportType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetName() TranslationTextType1000 {
	if o == nil || IsNil(o.Name) {
		var ret TranslationTextType1000
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetNameOk() (*TranslationTextType1000, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given TranslationTextType1000 and assigns it to the Name field.
func (o *ConfigGenericReportType) SetName(v TranslationTextType1000) {
	o.Name = &v
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *ConfigGenericReportType) SetReportName(v string) {
	o.ReportName = &v
}

// GetUserDefinedReport returns the UserDefinedReport field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetUserDefinedReport() bool {
	if o == nil || IsNil(o.UserDefinedReport) {
		var ret bool
		return ret
	}
	return *o.UserDefinedReport
}

// GetUserDefinedReportOk returns a tuple with the UserDefinedReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetUserDefinedReportOk() (*bool, bool) {
	if o == nil || IsNil(o.UserDefinedReport) {
		return nil, false
	}
	return o.UserDefinedReport, true
}

// HasUserDefinedReport returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasUserDefinedReport() bool {
	if o != nil && !IsNil(o.UserDefinedReport) {
		return true
	}

	return false
}

// SetUserDefinedReport gets a reference to the given bool and assigns it to the UserDefinedReport field.
func (o *ConfigGenericReportType) SetUserDefinedReport(v bool) {
	o.UserDefinedReport = &v
}

// GetModuleType returns the ModuleType field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetModuleType() ReportModuleTypeType {
	if o == nil || IsNil(o.ModuleType) {
		var ret ReportModuleTypeType
		return ret
	}
	return *o.ModuleType
}

// GetModuleTypeOk returns a tuple with the ModuleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetModuleTypeOk() (*ReportModuleTypeType, bool) {
	if o == nil || IsNil(o.ModuleType) {
		return nil, false
	}
	return o.ModuleType, true
}

// HasModuleType returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasModuleType() bool {
	if o != nil && !IsNil(o.ModuleType) {
		return true
	}

	return false
}

// SetModuleType gets a reference to the given ReportModuleTypeType and assigns it to the ModuleType field.
func (o *ConfigGenericReportType) SetModuleType(v ReportModuleTypeType) {
	o.ModuleType = &v
}

// GetUsedInApp returns the UsedInApp field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetUsedInApp() []ReportRunnableApps {
	if o == nil || IsNil(o.UsedInApp) {
		var ret []ReportRunnableApps
		return ret
	}
	return o.UsedInApp
}

// GetUsedInAppOk returns a tuple with the UsedInApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetUsedInAppOk() ([]ReportRunnableApps, bool) {
	if o == nil || IsNil(o.UsedInApp) {
		return nil, false
	}
	return o.UsedInApp, true
}

// HasUsedInApp returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasUsedInApp() bool {
	if o != nil && !IsNil(o.UsedInApp) {
		return true
	}

	return false
}

// SetUsedInApp gets a reference to the given []ReportRunnableApps and assigns it to the UsedInApp field.
func (o *ConfigGenericReportType) SetUsedInApp(v []ReportRunnableApps) {
	o.UsedInApp = v
}

// GetDataSourceType returns the DataSourceType field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetDataSourceType() string {
	if o == nil || IsNil(o.DataSourceType) {
		var ret string
		return ret
	}
	return *o.DataSourceType
}

// GetDataSourceTypeOk returns a tuple with the DataSourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetDataSourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataSourceType) {
		return nil, false
	}
	return o.DataSourceType, true
}

// HasDataSourceType returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasDataSourceType() bool {
	if o != nil && !IsNil(o.DataSourceType) {
		return true
	}

	return false
}

// SetDataSourceType gets a reference to the given string and assigns it to the DataSourceType field.
func (o *ConfigGenericReportType) SetDataSourceType(v string) {
	o.DataSourceType = &v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetDataSource() string {
	if o == nil || IsNil(o.DataSource) {
		var ret string
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetDataSourceOk() (*string, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given string and assigns it to the DataSource field.
func (o *ConfigGenericReportType) SetDataSource(v string) {
	o.DataSource = &v
}

// GetMandatory returns the Mandatory field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetMandatory() bool {
	if o == nil || IsNil(o.Mandatory) {
		var ret bool
		return ret
	}
	return *o.Mandatory
}

// GetMandatoryOk returns a tuple with the Mandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.Mandatory) {
		return nil, false
	}
	return o.Mandatory, true
}

// HasMandatory returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasMandatory() bool {
	if o != nil && !IsNil(o.Mandatory) {
		return true
	}

	return false
}

// SetMandatory gets a reference to the given bool and assigns it to the Mandatory field.
func (o *ConfigGenericReportType) SetMandatory(v bool) {
	o.Mandatory = &v
}

// GetFormToRun returns the FormToRun field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetFormToRun() string {
	if o == nil || IsNil(o.FormToRun) {
		var ret string
		return ret
	}
	return *o.FormToRun
}

// GetFormToRunOk returns a tuple with the FormToRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetFormToRunOk() (*string, bool) {
	if o == nil || IsNil(o.FormToRun) {
		return nil, false
	}
	return o.FormToRun, true
}

// HasFormToRun returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasFormToRun() bool {
	if o != nil && !IsNil(o.FormToRun) {
		return true
	}

	return false
}

// SetFormToRun gets a reference to the given string and assigns it to the FormToRun field.
func (o *ConfigGenericReportType) SetFormToRun(v string) {
	o.FormToRun = &v
}

// GetReportLanguage returns the ReportLanguage field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetReportLanguage() string {
	if o == nil || IsNil(o.ReportLanguage) {
		var ret string
		return ret
	}
	return *o.ReportLanguage
}

// GetReportLanguageOk returns a tuple with the ReportLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetReportLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ReportLanguage) {
		return nil, false
	}
	return o.ReportLanguage, true
}

// HasReportLanguage returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasReportLanguage() bool {
	if o != nil && !IsNil(o.ReportLanguage) {
		return true
	}

	return false
}

// SetReportLanguage gets a reference to the given string and assigns it to the ReportLanguage field.
func (o *ConfigGenericReportType) SetReportLanguage(v string) {
	o.ReportLanguage = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ConfigGenericReportType) SetActive(v bool) {
	o.Active = &v
}

// GetProtected returns the Protected field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetProtected() bool {
	if o == nil || IsNil(o.Protected) {
		var ret bool
		return ret
	}
	return *o.Protected
}

// GetProtectedOk returns a tuple with the Protected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Protected) {
		return nil, false
	}
	return o.Protected, true
}

// HasProtected returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasProtected() bool {
	if o != nil && !IsNil(o.Protected) {
		return true
	}

	return false
}

// SetProtected gets a reference to the given bool and assigns it to the Protected field.
func (o *ConfigGenericReportType) SetProtected(v bool) {
	o.Protected = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *ConfigGenericReportType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetReportGroup returns the ReportGroup field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetReportGroup() string {
	if o == nil || IsNil(o.ReportGroup) {
		var ret string
		return ret
	}
	return *o.ReportGroup
}

// GetReportGroupOk returns a tuple with the ReportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetReportGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ReportGroup) {
		return nil, false
	}
	return o.ReportGroup, true
}

// HasReportGroup returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasReportGroup() bool {
	if o != nil && !IsNil(o.ReportGroup) {
		return true
	}

	return false
}

// SetReportGroup gets a reference to the given string and assigns it to the ReportGroup field.
func (o *ConfigGenericReportType) SetReportGroup(v string) {
	o.ReportGroup = &v
}

// GetMultiPropertyReport returns the MultiPropertyReport field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetMultiPropertyReport() bool {
	if o == nil || IsNil(o.MultiPropertyReport) {
		var ret bool
		return ret
	}
	return *o.MultiPropertyReport
}

// GetMultiPropertyReportOk returns a tuple with the MultiPropertyReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetMultiPropertyReportOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiPropertyReport) {
		return nil, false
	}
	return o.MultiPropertyReport, true
}

// HasMultiPropertyReport returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasMultiPropertyReport() bool {
	if o != nil && !IsNil(o.MultiPropertyReport) {
		return true
	}

	return false
}

// SetMultiPropertyReport gets a reference to the given bool and assigns it to the MultiPropertyReport field.
func (o *ConfigGenericReportType) SetMultiPropertyReport(v bool) {
	o.MultiPropertyReport = &v
}

// GetExcelOutput returns the ExcelOutput field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetExcelOutput() bool {
	if o == nil || IsNil(o.ExcelOutput) {
		var ret bool
		return ret
	}
	return *o.ExcelOutput
}

// GetExcelOutputOk returns a tuple with the ExcelOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetExcelOutputOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcelOutput) {
		return nil, false
	}
	return o.ExcelOutput, true
}

// HasExcelOutput returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasExcelOutput() bool {
	if o != nil && !IsNil(o.ExcelOutput) {
		return true
	}

	return false
}

// SetExcelOutput gets a reference to the given bool and assigns it to the ExcelOutput field.
func (o *ConfigGenericReportType) SetExcelOutput(v bool) {
	o.ExcelOutput = &v
}

// GetAttachedReports returns the AttachedReports field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetAttachedReports() []UniqueIDType {
	if o == nil || IsNil(o.AttachedReports) {
		var ret []UniqueIDType
		return ret
	}
	return o.AttachedReports
}

// GetAttachedReportsOk returns a tuple with the AttachedReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetAttachedReportsOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.AttachedReports) {
		return nil, false
	}
	return o.AttachedReports, true
}

// HasAttachedReports returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasAttachedReports() bool {
	if o != nil && !IsNil(o.AttachedReports) {
		return true
	}

	return false
}

// SetAttachedReports gets a reference to the given []UniqueIDType and assigns it to the AttachedReports field.
func (o *ConfigGenericReportType) SetAttachedReports(v []UniqueIDType) {
	o.AttachedReports = v
}

// GetWatermarkDetails returns the WatermarkDetails field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetWatermarkDetails() WatermarkType {
	if o == nil || IsNil(o.WatermarkDetails) {
		var ret WatermarkType
		return ret
	}
	return *o.WatermarkDetails
}

// GetWatermarkDetailsOk returns a tuple with the WatermarkDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetWatermarkDetailsOk() (*WatermarkType, bool) {
	if o == nil || IsNil(o.WatermarkDetails) {
		return nil, false
	}
	return o.WatermarkDetails, true
}

// HasWatermarkDetails returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasWatermarkDetails() bool {
	if o != nil && !IsNil(o.WatermarkDetails) {
		return true
	}

	return false
}

// SetWatermarkDetails gets a reference to the given WatermarkType and assigns it to the WatermarkDetails field.
func (o *ConfigGenericReportType) SetWatermarkDetails(v WatermarkType) {
	o.WatermarkDetails = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetParameters() []ConfigReportParameterType {
	if o == nil || IsNil(o.Parameters) {
		var ret []ConfigReportParameterType
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetParametersOk() ([]ConfigReportParameterType, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []ConfigReportParameterType and assigns it to the Parameters field.
func (o *ConfigGenericReportType) SetParameters(v []ConfigReportParameterType) {
	o.Parameters = v
}

// GetRowsPerPage returns the RowsPerPage field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetRowsPerPage() int32 {
	if o == nil || IsNil(o.RowsPerPage) {
		var ret int32
		return ret
	}
	return *o.RowsPerPage
}

// GetRowsPerPageOk returns a tuple with the RowsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetRowsPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.RowsPerPage) {
		return nil, false
	}
	return o.RowsPerPage, true
}

// HasRowsPerPage returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasRowsPerPage() bool {
	if o != nil && !IsNil(o.RowsPerPage) {
		return true
	}

	return false
}

// SetRowsPerPage gets a reference to the given int32 and assigns it to the RowsPerPage field.
func (o *ConfigGenericReportType) SetRowsPerPage(v int32) {
	o.RowsPerPage = &v
}

// GetColumnsPerPage returns the ColumnsPerPage field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetColumnsPerPage() int32 {
	if o == nil || IsNil(o.ColumnsPerPage) {
		var ret int32
		return ret
	}
	return *o.ColumnsPerPage
}

// GetColumnsPerPageOk returns a tuple with the ColumnsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetColumnsPerPageOk() (*int32, bool) {
	if o == nil || IsNil(o.ColumnsPerPage) {
		return nil, false
	}
	return o.ColumnsPerPage, true
}

// HasColumnsPerPage returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasColumnsPerPage() bool {
	if o != nil && !IsNil(o.ColumnsPerPage) {
		return true
	}

	return false
}

// SetColumnsPerPage gets a reference to the given int32 and assigns it to the ColumnsPerPage field.
func (o *ConfigGenericReportType) SetColumnsPerPage(v int32) {
	o.ColumnsPerPage = &v
}

// GetModuleId returns the ModuleId field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetModuleId() UniqueIDType {
	if o == nil || IsNil(o.ModuleId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ModuleId
}

// GetModuleIdOk returns a tuple with the ModuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetModuleIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ModuleId) {
		return nil, false
	}
	return o.ModuleId, true
}

// HasModuleId returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasModuleId() bool {
	if o != nil && !IsNil(o.ModuleId) {
		return true
	}

	return false
}

// SetModuleId gets a reference to the given UniqueIDType and assigns it to the ModuleId field.
func (o *ConfigGenericReportType) SetModuleId(v UniqueIDType) {
	o.ModuleId = &v
}

// GetExternalReportUrl returns the ExternalReportUrl field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetExternalReportUrl() ExternalUrlInfoType {
	if o == nil || IsNil(o.ExternalReportUrl) {
		var ret ExternalUrlInfoType
		return ret
	}
	return *o.ExternalReportUrl
}

// GetExternalReportUrlOk returns a tuple with the ExternalReportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetExternalReportUrlOk() (*ExternalUrlInfoType, bool) {
	if o == nil || IsNil(o.ExternalReportUrl) {
		return nil, false
	}
	return o.ExternalReportUrl, true
}

// HasExternalReportUrl returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasExternalReportUrl() bool {
	if o != nil && !IsNil(o.ExternalReportUrl) {
		return true
	}

	return false
}

// SetExternalReportUrl gets a reference to the given ExternalUrlInfoType and assigns it to the ExternalReportUrl field.
func (o *ConfigGenericReportType) SetExternalReportUrl(v ExternalUrlInfoType) {
	o.ExternalReportUrl = &v
}

// GetPrintReport returns the PrintReport field value if set, zero value otherwise.
func (o *ConfigGenericReportType) GetPrintReport() PrintReportType {
	if o == nil || IsNil(o.PrintReport) {
		var ret PrintReportType
		return ret
	}
	return *o.PrintReport
}

// GetPrintReportOk returns a tuple with the PrintReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigGenericReportType) GetPrintReportOk() (*PrintReportType, bool) {
	if o == nil || IsNil(o.PrintReport) {
		return nil, false
	}
	return o.PrintReport, true
}

// HasPrintReport returns a boolean if a field has been set.
func (o *ConfigGenericReportType) HasPrintReport() bool {
	if o != nil && !IsNil(o.PrintReport) {
		return true
	}

	return false
}

// SetPrintReport gets a reference to the given PrintReportType and assigns it to the PrintReport field.
func (o *ConfigGenericReportType) SetPrintReport(v PrintReportType) {
	o.PrintReport = &v
}

func (o ConfigGenericReportType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigGenericReportType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ReportName) {
		toSerialize["reportName"] = o.ReportName
	}
	if !IsNil(o.UserDefinedReport) {
		toSerialize["userDefinedReport"] = o.UserDefinedReport
	}
	if !IsNil(o.ModuleType) {
		toSerialize["moduleType"] = o.ModuleType
	}
	if !IsNil(o.UsedInApp) {
		toSerialize["usedInApp"] = o.UsedInApp
	}
	if !IsNil(o.DataSourceType) {
		toSerialize["dataSourceType"] = o.DataSourceType
	}
	if !IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}
	if !IsNil(o.Mandatory) {
		toSerialize["mandatory"] = o.Mandatory
	}
	if !IsNil(o.FormToRun) {
		toSerialize["formToRun"] = o.FormToRun
	}
	if !IsNil(o.ReportLanguage) {
		toSerialize["reportLanguage"] = o.ReportLanguage
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Protected) {
		toSerialize["protected"] = o.Protected
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.ReportGroup) {
		toSerialize["reportGroup"] = o.ReportGroup
	}
	if !IsNil(o.MultiPropertyReport) {
		toSerialize["multiPropertyReport"] = o.MultiPropertyReport
	}
	if !IsNil(o.ExcelOutput) {
		toSerialize["excelOutput"] = o.ExcelOutput
	}
	if !IsNil(o.AttachedReports) {
		toSerialize["attachedReports"] = o.AttachedReports
	}
	if !IsNil(o.WatermarkDetails) {
		toSerialize["watermarkDetails"] = o.WatermarkDetails
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.RowsPerPage) {
		toSerialize["rowsPerPage"] = o.RowsPerPage
	}
	if !IsNil(o.ColumnsPerPage) {
		toSerialize["columnsPerPage"] = o.ColumnsPerPage
	}
	if !IsNil(o.ModuleId) {
		toSerialize["moduleId"] = o.ModuleId
	}
	if !IsNil(o.ExternalReportUrl) {
		toSerialize["externalReportUrl"] = o.ExternalReportUrl
	}
	if !IsNil(o.PrintReport) {
		toSerialize["printReport"] = o.PrintReport
	}
	return toSerialize, nil
}

type NullableConfigGenericReportType struct {
	value *ConfigGenericReportType
	isSet bool
}

func (v NullableConfigGenericReportType) Get() *ConfigGenericReportType {
	return v.value
}

func (v *NullableConfigGenericReportType) Set(val *ConfigGenericReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigGenericReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigGenericReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigGenericReportType(val *ConfigGenericReportType) *NullableConfigGenericReportType {
	return &NullableConfigGenericReportType{value: val, isSet: true}
}

func (v NullableConfigGenericReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigGenericReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


