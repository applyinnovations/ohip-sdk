/*
OPERA Cloud Report Master Data Management API

APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
)

// checks if the PrintReportType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrintReportType{}

// PrintReportType Details to print or send report to printer, email or fax.
type PrintReportType struct {
	Destination *PrintDestinationType `json:"destination,omitempty"`
	// Number of copies to be printed or sent.
	Copies *int32 `json:"copies,omitempty"`
	// Indicates whether report has already been sent or not.
	Sent *bool `json:"sent,omitempty"`
}

// NewPrintReportType instantiates a new PrintReportType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrintReportType() *PrintReportType {
	this := PrintReportType{}
	return &this
}

// NewPrintReportTypeWithDefaults instantiates a new PrintReportType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrintReportTypeWithDefaults() *PrintReportType {
	this := PrintReportType{}
	return &this
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *PrintReportType) GetDestination() PrintDestinationType {
	if o == nil || IsNil(o.Destination) {
		var ret PrintDestinationType
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintReportType) GetDestinationOk() (*PrintDestinationType, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *PrintReportType) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given PrintDestinationType and assigns it to the Destination field.
func (o *PrintReportType) SetDestination(v PrintDestinationType) {
	o.Destination = &v
}

// GetCopies returns the Copies field value if set, zero value otherwise.
func (o *PrintReportType) GetCopies() int32 {
	if o == nil || IsNil(o.Copies) {
		var ret int32
		return ret
	}
	return *o.Copies
}

// GetCopiesOk returns a tuple with the Copies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintReportType) GetCopiesOk() (*int32, bool) {
	if o == nil || IsNil(o.Copies) {
		return nil, false
	}
	return o.Copies, true
}

// HasCopies returns a boolean if a field has been set.
func (o *PrintReportType) HasCopies() bool {
	if o != nil && !IsNil(o.Copies) {
		return true
	}

	return false
}

// SetCopies gets a reference to the given int32 and assigns it to the Copies field.
func (o *PrintReportType) SetCopies(v int32) {
	o.Copies = &v
}

// GetSent returns the Sent field value if set, zero value otherwise.
func (o *PrintReportType) GetSent() bool {
	if o == nil || IsNil(o.Sent) {
		var ret bool
		return ret
	}
	return *o.Sent
}

// GetSentOk returns a tuple with the Sent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintReportType) GetSentOk() (*bool, bool) {
	if o == nil || IsNil(o.Sent) {
		return nil, false
	}
	return o.Sent, true
}

// HasSent returns a boolean if a field has been set.
func (o *PrintReportType) HasSent() bool {
	if o != nil && !IsNil(o.Sent) {
		return true
	}

	return false
}

// SetSent gets a reference to the given bool and assigns it to the Sent field.
func (o *PrintReportType) SetSent(v bool) {
	o.Sent = &v
}

func (o PrintReportType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrintReportType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Copies) {
		toSerialize["copies"] = o.Copies
	}
	if !IsNil(o.Sent) {
		toSerialize["sent"] = o.Sent
	}
	return toSerialize, nil
}

type NullablePrintReportType struct {
	value *PrintReportType
	isSet bool
}

func (v NullablePrintReportType) Get() *PrintReportType {
	return v.value
}

func (v *NullablePrintReportType) Set(val *PrintReportType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrintReportType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrintReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrintReportType(val *PrintReportType) *NullablePrintReportType {
	return &NullablePrintReportType{value: val, isSet: true}
}

func (v NullablePrintReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrintReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


