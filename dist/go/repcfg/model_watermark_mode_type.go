/*
OPERA Cloud Report Master Data Management API

APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package repcfg

import (
	"encoding/json"
	"fmt"
)

// WatermarkModeType Identifies the data type of the report parameter.
type WatermarkModeType string

// List of watermarkModeType
const (
	WATERMARKMODETYPE_SIMPLE WatermarkModeType = "Simple"
	WATERMARKMODETYPE_ENHANCED WatermarkModeType = "Enhanced"
	WATERMARKMODETYPE_NO_WATERMARK WatermarkModeType = "NoWatermark"
	WATERMARKMODETYPE_GROUP_SETTINGS WatermarkModeType = "GroupSettings"
)

// All allowed values of WatermarkModeType enum
var AllowedWatermarkModeTypeEnumValues = []WatermarkModeType{
	"Simple",
	"Enhanced",
	"NoWatermark",
	"GroupSettings",
}

func (v *WatermarkModeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WatermarkModeType(value)
	for _, existing := range AllowedWatermarkModeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WatermarkModeType", value)
}

// NewWatermarkModeTypeFromValue returns a pointer to a valid WatermarkModeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWatermarkModeTypeFromValue(v string) (*WatermarkModeType, error) {
	ev := WatermarkModeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WatermarkModeType: valid values are %v", v, AllowedWatermarkModeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WatermarkModeType) IsValid() bool {
	for _, existing := range AllowedWatermarkModeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to watermarkModeType value
func (v WatermarkModeType) Ptr() *WatermarkModeType {
	return &v
}

type NullableWatermarkModeType struct {
	value *WatermarkModeType
	isSet bool
}

func (v NullableWatermarkModeType) Get() *WatermarkModeType {
	return v.value
}

func (v *NullableWatermarkModeType) Set(val *WatermarkModeType) {
	v.value = val
	v.isSet = true
}

func (v NullableWatermarkModeType) IsSet() bool {
	return v.isSet
}

func (v *NullableWatermarkModeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatermarkModeType(val *WatermarkModeType) *NullableWatermarkModeType {
	return &NullableWatermarkModeType{value: val, isSet: true}
}

func (v NullableWatermarkModeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatermarkModeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

