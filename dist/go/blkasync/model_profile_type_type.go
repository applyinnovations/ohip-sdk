/*
OPERA Cloud Block Reservation Asynchronous API

APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkasync

import (
	"encoding/json"
	"fmt"
)

// ProfileTypeType The types of Profile handled by the web service.
type ProfileTypeType string

// List of profileTypeType
const (
	PROFILETYPETYPE_GUEST ProfileTypeType = "Guest"
	PROFILETYPETYPE_AGENT ProfileTypeType = "Agent"
	PROFILETYPETYPE_COMPANY ProfileTypeType = "Company"
	PROFILETYPETYPE_GROUP ProfileTypeType = "Group"
	PROFILETYPETYPE_SOURCE ProfileTypeType = "Source"
	PROFILETYPETYPE_EMPLOYEE ProfileTypeType = "Employee"
	PROFILETYPETYPE_HOTEL ProfileTypeType = "Hotel"
	PROFILETYPETYPE_VENDOR ProfileTypeType = "Vendor"
	PROFILETYPETYPE_CONTACT ProfileTypeType = "Contact"
	PROFILETYPETYPE_PURGE ProfileTypeType = "Purge"
	PROFILETYPETYPE_BUSINESS_HEADER ProfileTypeType = "BusinessHeader"
	PROFILETYPETYPE_BILLING_ACCOUNT ProfileTypeType = "BillingAccount"
	PROFILETYPETYPE_ACTIVITY ProfileTypeType = "Activity"
	PROFILETYPETYPE_POTENTIAL ProfileTypeType = "Potential"
	PROFILETYPETYPE_ACCOUNT ProfileTypeType = "Account"
)

// All allowed values of ProfileTypeType enum
var AllowedProfileTypeTypeEnumValues = []ProfileTypeType{
	"Guest",
	"Agent",
	"Company",
	"Group",
	"Source",
	"Employee",
	"Hotel",
	"Vendor",
	"Contact",
	"Purge",
	"BusinessHeader",
	"BillingAccount",
	"Activity",
	"Potential",
	"Account",
}

func (v *ProfileTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileTypeType(value)
	for _, existing := range AllowedProfileTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileTypeType", value)
}

// NewProfileTypeTypeFromValue returns a pointer to a valid ProfileTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileTypeTypeFromValue(v string) (*ProfileTypeType, error) {
	ev := ProfileTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileTypeType: valid values are %v", v, AllowedProfileTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileTypeType) IsValid() bool {
	for _, existing := range AllowedProfileTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to profileTypeType value
func (v ProfileTypeType) Ptr() *ProfileTypeType {
	return &v
}

type NullableProfileTypeType struct {
	value *ProfileTypeType
	isSet bool
}

func (v NullableProfileTypeType) Get() *ProfileTypeType {
	return v.value
}

func (v *NullableProfileTypeType) Set(val *ProfileTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileTypeType(val *ProfileTypeType) *NullableProfileTypeType {
	return &NullableProfileTypeType{value: val, isSet: true}
}

func (v NullableProfileTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

