/*
OPERA Cloud Block Reservation Asynchronous API

APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkasync

import (
	"encoding/json"
)

// checks if the BlockAllocationRanges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAllocationRanges{}

// BlockAllocationRanges Collection of block allocation ranges.
type BlockAllocationRanges struct {
	// Collection of Range information for the block allocation ranges operation.
	BlockAllocationRanges []BlockAllocationRangeType `json:"blockAllocationRanges,omitempty"`
}

// NewBlockAllocationRanges instantiates a new BlockAllocationRanges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAllocationRanges() *BlockAllocationRanges {
	this := BlockAllocationRanges{}
	return &this
}

// NewBlockAllocationRangesWithDefaults instantiates a new BlockAllocationRanges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAllocationRangesWithDefaults() *BlockAllocationRanges {
	this := BlockAllocationRanges{}
	return &this
}

// GetBlockAllocationRanges returns the BlockAllocationRanges field value if set, zero value otherwise.
func (o *BlockAllocationRanges) GetBlockAllocationRanges() []BlockAllocationRangeType {
	if o == nil || IsNil(o.BlockAllocationRanges) {
		var ret []BlockAllocationRangeType
		return ret
	}
	return o.BlockAllocationRanges
}

// GetBlockAllocationRangesOk returns a tuple with the BlockAllocationRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRanges) GetBlockAllocationRangesOk() ([]BlockAllocationRangeType, bool) {
	if o == nil || IsNil(o.BlockAllocationRanges) {
		return nil, false
	}
	return o.BlockAllocationRanges, true
}

// HasBlockAllocationRanges returns a boolean if a field has been set.
func (o *BlockAllocationRanges) HasBlockAllocationRanges() bool {
	if o != nil && !IsNil(o.BlockAllocationRanges) {
		return true
	}

	return false
}

// SetBlockAllocationRanges gets a reference to the given []BlockAllocationRangeType and assigns it to the BlockAllocationRanges field.
func (o *BlockAllocationRanges) SetBlockAllocationRanges(v []BlockAllocationRangeType) {
	o.BlockAllocationRanges = v
}

func (o BlockAllocationRanges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAllocationRanges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockAllocationRanges) {
		toSerialize["blockAllocationRanges"] = o.BlockAllocationRanges
	}
	return toSerialize, nil
}

type NullableBlockAllocationRanges struct {
	value *BlockAllocationRanges
	isSet bool
}

func (v NullableBlockAllocationRanges) Get() *BlockAllocationRanges {
	return v.value
}

func (v *NullableBlockAllocationRanges) Set(val *BlockAllocationRanges) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAllocationRanges) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAllocationRanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAllocationRanges(val *BlockAllocationRanges) *NullableBlockAllocationRanges {
	return &NullableBlockAllocationRanges{value: val, isSet: true}
}

func (v NullableBlockAllocationRanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAllocationRanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


