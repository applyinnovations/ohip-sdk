/*
OPERA Cloud Block Reservation Asynchronous API

Testing BlockAsyncAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package blkasync

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/blkasync"
)

func Test_blkasync_BlockAsyncAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlockAsyncAPIService GetAllocationRangesProcessInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string
		var requestId string

		resp, httpRes, err := apiClient.BlockAsyncAPI.GetAllocationRangesProcessInfo(context.Background(), hotelId, blockId, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService GetAllocationRangesProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string
		var requestId string

		httpRes, err := apiClient.BlockAsyncAPI.GetAllocationRangesProcessStatus(context.Background(), hotelId, blockId, requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService GetBlockAllocationProcessInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string
		var requestId string

		resp, httpRes, err := apiClient.BlockAsyncAPI.GetBlockAllocationProcessInfo(context.Background(), hotelId, blockId, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService GetBlockAllocationProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string
		var requestId string

		httpRes, err := apiClient.BlockAsyncAPI.GetBlockAllocationProcessStatus(context.Background(), hotelId, blockId, requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService GetBlockAllocationSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var hotelId string
		var extSystemCode string

		resp, httpRes, err := apiClient.BlockAsyncAPI.GetBlockAllocationSummary(context.Background(), requestId, hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService GetBlockAllocationSummaryProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string
		var extSystemCode string
		var hotelId string

		httpRes, err := apiClient.BlockAsyncAPI.GetBlockAllocationSummaryProcessStatus(context.Background(), requestId, extSystemCode, hotelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService GetShiftBlockProcessInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string
		var requestId string

		resp, httpRes, err := apiClient.BlockAsyncAPI.GetShiftBlockProcessInfo(context.Background(), hotelId, blockId, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService GetShiftBlockProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string
		var requestId string

		httpRes, err := apiClient.BlockAsyncAPI.GetShiftBlockProcessStatus(context.Background(), hotelId, blockId, requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService StartAllocationRangesProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string

		resp, httpRes, err := apiClient.BlockAsyncAPI.StartAllocationRangesProcess(context.Background(), hotelId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService StartBlockAllocationProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string

		resp, httpRes, err := apiClient.BlockAsyncAPI.StartBlockAllocationProcess(context.Background(), hotelId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService StartBlockAllocationSummaryProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var extSystemCode string

		resp, httpRes, err := apiClient.BlockAsyncAPI.StartBlockAllocationSummaryProcess(context.Background(), hotelId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAsyncAPIService StartShiftBlockProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var blockId string

		resp, httpRes, err := apiClient.BlockAsyncAPI.StartShiftBlockProcess(context.Background(), hotelId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
