/*
OPERA Cloud Block Reservation Asynchronous API

APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkasync

import (
	"encoding/json"
)

// checks if the RoomAllocationDateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomAllocationDateType{}

// RoomAllocationDateType struct for RoomAllocationDateType
type RoomAllocationDateType struct {
	// The block date for which the allocation details are listed.
	AllocationDate *string `json:"allocationDate,omitempty"`
	Allocations []RoomAllocationDetailsType `json:"allocations,omitempty"`
}

// NewRoomAllocationDateType instantiates a new RoomAllocationDateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomAllocationDateType() *RoomAllocationDateType {
	this := RoomAllocationDateType{}
	return &this
}

// NewRoomAllocationDateTypeWithDefaults instantiates a new RoomAllocationDateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomAllocationDateTypeWithDefaults() *RoomAllocationDateType {
	this := RoomAllocationDateType{}
	return &this
}

// GetAllocationDate returns the AllocationDate field value if set, zero value otherwise.
func (o *RoomAllocationDateType) GetAllocationDate() string {
	if o == nil || IsNil(o.AllocationDate) {
		var ret string
		return ret
	}
	return *o.AllocationDate
}

// GetAllocationDateOk returns a tuple with the AllocationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomAllocationDateType) GetAllocationDateOk() (*string, bool) {
	if o == nil || IsNil(o.AllocationDate) {
		return nil, false
	}
	return o.AllocationDate, true
}

// HasAllocationDate returns a boolean if a field has been set.
func (o *RoomAllocationDateType) HasAllocationDate() bool {
	if o != nil && !IsNil(o.AllocationDate) {
		return true
	}

	return false
}

// SetAllocationDate gets a reference to the given string and assigns it to the AllocationDate field.
func (o *RoomAllocationDateType) SetAllocationDate(v string) {
	o.AllocationDate = &v
}

// GetAllocations returns the Allocations field value if set, zero value otherwise.
func (o *RoomAllocationDateType) GetAllocations() []RoomAllocationDetailsType {
	if o == nil || IsNil(o.Allocations) {
		var ret []RoomAllocationDetailsType
		return ret
	}
	return o.Allocations
}

// GetAllocationsOk returns a tuple with the Allocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomAllocationDateType) GetAllocationsOk() ([]RoomAllocationDetailsType, bool) {
	if o == nil || IsNil(o.Allocations) {
		return nil, false
	}
	return o.Allocations, true
}

// HasAllocations returns a boolean if a field has been set.
func (o *RoomAllocationDateType) HasAllocations() bool {
	if o != nil && !IsNil(o.Allocations) {
		return true
	}

	return false
}

// SetAllocations gets a reference to the given []RoomAllocationDetailsType and assigns it to the Allocations field.
func (o *RoomAllocationDateType) SetAllocations(v []RoomAllocationDetailsType) {
	o.Allocations = v
}

func (o RoomAllocationDateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomAllocationDateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocationDate) {
		toSerialize["allocationDate"] = o.AllocationDate
	}
	if !IsNil(o.Allocations) {
		toSerialize["allocations"] = o.Allocations
	}
	return toSerialize, nil
}

type NullableRoomAllocationDateType struct {
	value *RoomAllocationDateType
	isSet bool
}

func (v NullableRoomAllocationDateType) Get() *RoomAllocationDateType {
	return v.value
}

func (v *NullableRoomAllocationDateType) Set(val *RoomAllocationDateType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomAllocationDateType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomAllocationDateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomAllocationDateType(val *RoomAllocationDateType) *NullableRoomAllocationDateType {
	return &NullableRoomAllocationDateType{value: val, isSet: true}
}

func (v NullableRoomAllocationDateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomAllocationDateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


