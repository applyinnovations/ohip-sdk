/*
OPERA Cloud Block Reservation Asynchronous API

APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkasync

import (
	"encoding/json"
)

// checks if the ProcessDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessDetails{}

// ProcessDetails Response object to hold the details of process.
type ProcessDetails struct {
	Status *StatusType `json:"status,omitempty"`
	// Status/Info of the processed events.
	CateringEventsProcessedInfo []CateringEventsProcessedInfoType `json:"cateringEventsProcessedInfo,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewProcessDetails instantiates a new ProcessDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessDetails() *ProcessDetails {
	this := ProcessDetails{}
	return &this
}

// NewProcessDetailsWithDefaults instantiates a new ProcessDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessDetailsWithDefaults() *ProcessDetails {
	this := ProcessDetails{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProcessDetails) GetStatus() StatusType {
	if o == nil || IsNil(o.Status) {
		var ret StatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessDetails) GetStatusOk() (*StatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProcessDetails) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusType and assigns it to the Status field.
func (o *ProcessDetails) SetStatus(v StatusType) {
	o.Status = &v
}

// GetCateringEventsProcessedInfo returns the CateringEventsProcessedInfo field value if set, zero value otherwise.
func (o *ProcessDetails) GetCateringEventsProcessedInfo() []CateringEventsProcessedInfoType {
	if o == nil || IsNil(o.CateringEventsProcessedInfo) {
		var ret []CateringEventsProcessedInfoType
		return ret
	}
	return o.CateringEventsProcessedInfo
}

// GetCateringEventsProcessedInfoOk returns a tuple with the CateringEventsProcessedInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessDetails) GetCateringEventsProcessedInfoOk() ([]CateringEventsProcessedInfoType, bool) {
	if o == nil || IsNil(o.CateringEventsProcessedInfo) {
		return nil, false
	}
	return o.CateringEventsProcessedInfo, true
}

// HasCateringEventsProcessedInfo returns a boolean if a field has been set.
func (o *ProcessDetails) HasCateringEventsProcessedInfo() bool {
	if o != nil && !IsNil(o.CateringEventsProcessedInfo) {
		return true
	}

	return false
}

// SetCateringEventsProcessedInfo gets a reference to the given []CateringEventsProcessedInfoType and assigns it to the CateringEventsProcessedInfo field.
func (o *ProcessDetails) SetCateringEventsProcessedInfo(v []CateringEventsProcessedInfoType) {
	o.CateringEventsProcessedInfo = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ProcessDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ProcessDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ProcessDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ProcessDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ProcessDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ProcessDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ProcessDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.CateringEventsProcessedInfo) {
		toSerialize["cateringEventsProcessedInfo"] = o.CateringEventsProcessedInfo
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableProcessDetails struct {
	value *ProcessDetails
	isSet bool
}

func (v NullableProcessDetails) Get() *ProcessDetails {
	return v.value
}

func (v *NullableProcessDetails) Set(val *ProcessDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessDetails(val *ProcessDetails) *NullableProcessDetails {
	return &NullableProcessDetails{value: val, isSet: true}
}

func (v NullableProcessDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


