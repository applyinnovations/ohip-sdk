/*
OPERA Cloud Block Reservation Asynchronous API

APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkasync

import (
	"encoding/json"
)

// checks if the BlockAllocationRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAllocationRangeType{}

// BlockAllocationRangeType Container for information related to block allocation range update operation
type BlockAllocationRangeType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	// List of room types for which the range update has to be applied.
	RoomTypes []string `json:"roomTypes,omitempty"`
	// Begin date for range update operation.
	BeginDate *string `json:"beginDate,omitempty"`
	// End date for range update operation.
	EndDate *string `json:"endDate,omitempty"`
	AllocationType *AllocationType `json:"allocationType,omitempty"`
	// Flag to indicate if the occupancy data is absolute or relative to the current value.
	IncrementFlag *bool `json:"incrementFlag,omitempty"`
	BlockInventory *BlockGridInvType `json:"blockInventory,omitempty"`
	BlockRates *BlockGridRatesType `json:"blockRates,omitempty"`
	// Date after which unused block rooms should be returned to house.
	CutoffDate *string `json:"cutoffDate,omitempty"`
	// Number of days from block start date after which unused block rooms should be returned to house.
	CutoffDays *int32 `json:"cutoffDays,omitempty"`
	// A true value indicates that the cutoff schedule, if added to Business Block, can be overridden.
	OverrideCutoffSchedule *bool `json:"overrideCutoffSchedule,omitempty"`
	IncludedDays *string `json:"includedDays,omitempty"`
	RangeMode *BlockRangeModeType `json:"rangeMode,omitempty"`
	// Date which has to be overbooked or excluded.
	OverbookList []BlockAllocationRangeTypeOverbookListInner `json:"overbookList,omitempty"`
	// Indicates if the Allocation objects refer to Generic Room Types (Room Pools).
	GenericRoomType *bool `json:"genericRoomType,omitempty"`
}

// NewBlockAllocationRangeType instantiates a new BlockAllocationRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAllocationRangeType() *BlockAllocationRangeType {
	this := BlockAllocationRangeType{}
	return &this
}

// NewBlockAllocationRangeTypeWithDefaults instantiates a new BlockAllocationRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAllocationRangeTypeWithDefaults() *BlockAllocationRangeType {
	this := BlockAllocationRangeType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *BlockAllocationRangeType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockAllocationRangeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *BlockAllocationRangeType) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

// GetBeginDate returns the BeginDate field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetBeginDate() string {
	if o == nil || IsNil(o.BeginDate) {
		var ret string
		return ret
	}
	return *o.BeginDate
}

// GetBeginDateOk returns a tuple with the BeginDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetBeginDateOk() (*string, bool) {
	if o == nil || IsNil(o.BeginDate) {
		return nil, false
	}
	return o.BeginDate, true
}

// HasBeginDate returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasBeginDate() bool {
	if o != nil && !IsNil(o.BeginDate) {
		return true
	}

	return false
}

// SetBeginDate gets a reference to the given string and assigns it to the BeginDate field.
func (o *BlockAllocationRangeType) SetBeginDate(v string) {
	o.BeginDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BlockAllocationRangeType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetAllocationType returns the AllocationType field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetAllocationType() AllocationType {
	if o == nil || IsNil(o.AllocationType) {
		var ret AllocationType
		return ret
	}
	return *o.AllocationType
}

// GetAllocationTypeOk returns a tuple with the AllocationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetAllocationTypeOk() (*AllocationType, bool) {
	if o == nil || IsNil(o.AllocationType) {
		return nil, false
	}
	return o.AllocationType, true
}

// HasAllocationType returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasAllocationType() bool {
	if o != nil && !IsNil(o.AllocationType) {
		return true
	}

	return false
}

// SetAllocationType gets a reference to the given AllocationType and assigns it to the AllocationType field.
func (o *BlockAllocationRangeType) SetAllocationType(v AllocationType) {
	o.AllocationType = &v
}

// GetIncrementFlag returns the IncrementFlag field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetIncrementFlag() bool {
	if o == nil || IsNil(o.IncrementFlag) {
		var ret bool
		return ret
	}
	return *o.IncrementFlag
}

// GetIncrementFlagOk returns a tuple with the IncrementFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetIncrementFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.IncrementFlag) {
		return nil, false
	}
	return o.IncrementFlag, true
}

// HasIncrementFlag returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasIncrementFlag() bool {
	if o != nil && !IsNil(o.IncrementFlag) {
		return true
	}

	return false
}

// SetIncrementFlag gets a reference to the given bool and assigns it to the IncrementFlag field.
func (o *BlockAllocationRangeType) SetIncrementFlag(v bool) {
	o.IncrementFlag = &v
}

// GetBlockInventory returns the BlockInventory field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetBlockInventory() BlockGridInvType {
	if o == nil || IsNil(o.BlockInventory) {
		var ret BlockGridInvType
		return ret
	}
	return *o.BlockInventory
}

// GetBlockInventoryOk returns a tuple with the BlockInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetBlockInventoryOk() (*BlockGridInvType, bool) {
	if o == nil || IsNil(o.BlockInventory) {
		return nil, false
	}
	return o.BlockInventory, true
}

// HasBlockInventory returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasBlockInventory() bool {
	if o != nil && !IsNil(o.BlockInventory) {
		return true
	}

	return false
}

// SetBlockInventory gets a reference to the given BlockGridInvType and assigns it to the BlockInventory field.
func (o *BlockAllocationRangeType) SetBlockInventory(v BlockGridInvType) {
	o.BlockInventory = &v
}

// GetBlockRates returns the BlockRates field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetBlockRates() BlockGridRatesType {
	if o == nil || IsNil(o.BlockRates) {
		var ret BlockGridRatesType
		return ret
	}
	return *o.BlockRates
}

// GetBlockRatesOk returns a tuple with the BlockRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetBlockRatesOk() (*BlockGridRatesType, bool) {
	if o == nil || IsNil(o.BlockRates) {
		return nil, false
	}
	return o.BlockRates, true
}

// HasBlockRates returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasBlockRates() bool {
	if o != nil && !IsNil(o.BlockRates) {
		return true
	}

	return false
}

// SetBlockRates gets a reference to the given BlockGridRatesType and assigns it to the BlockRates field.
func (o *BlockAllocationRangeType) SetBlockRates(v BlockGridRatesType) {
	o.BlockRates = &v
}

// GetCutoffDate returns the CutoffDate field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetCutoffDate() string {
	if o == nil || IsNil(o.CutoffDate) {
		var ret string
		return ret
	}
	return *o.CutoffDate
}

// GetCutoffDateOk returns a tuple with the CutoffDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetCutoffDateOk() (*string, bool) {
	if o == nil || IsNil(o.CutoffDate) {
		return nil, false
	}
	return o.CutoffDate, true
}

// HasCutoffDate returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasCutoffDate() bool {
	if o != nil && !IsNil(o.CutoffDate) {
		return true
	}

	return false
}

// SetCutoffDate gets a reference to the given string and assigns it to the CutoffDate field.
func (o *BlockAllocationRangeType) SetCutoffDate(v string) {
	o.CutoffDate = &v
}

// GetCutoffDays returns the CutoffDays field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetCutoffDays() int32 {
	if o == nil || IsNil(o.CutoffDays) {
		var ret int32
		return ret
	}
	return *o.CutoffDays
}

// GetCutoffDaysOk returns a tuple with the CutoffDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetCutoffDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.CutoffDays) {
		return nil, false
	}
	return o.CutoffDays, true
}

// HasCutoffDays returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasCutoffDays() bool {
	if o != nil && !IsNil(o.CutoffDays) {
		return true
	}

	return false
}

// SetCutoffDays gets a reference to the given int32 and assigns it to the CutoffDays field.
func (o *BlockAllocationRangeType) SetCutoffDays(v int32) {
	o.CutoffDays = &v
}

// GetOverrideCutoffSchedule returns the OverrideCutoffSchedule field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetOverrideCutoffSchedule() bool {
	if o == nil || IsNil(o.OverrideCutoffSchedule) {
		var ret bool
		return ret
	}
	return *o.OverrideCutoffSchedule
}

// GetOverrideCutoffScheduleOk returns a tuple with the OverrideCutoffSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetOverrideCutoffScheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideCutoffSchedule) {
		return nil, false
	}
	return o.OverrideCutoffSchedule, true
}

// HasOverrideCutoffSchedule returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasOverrideCutoffSchedule() bool {
	if o != nil && !IsNil(o.OverrideCutoffSchedule) {
		return true
	}

	return false
}

// SetOverrideCutoffSchedule gets a reference to the given bool and assigns it to the OverrideCutoffSchedule field.
func (o *BlockAllocationRangeType) SetOverrideCutoffSchedule(v bool) {
	o.OverrideCutoffSchedule = &v
}

// GetIncludedDays returns the IncludedDays field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetIncludedDays() string {
	if o == nil || IsNil(o.IncludedDays) {
		var ret string
		return ret
	}
	return *o.IncludedDays
}

// GetIncludedDaysOk returns a tuple with the IncludedDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetIncludedDaysOk() (*string, bool) {
	if o == nil || IsNil(o.IncludedDays) {
		return nil, false
	}
	return o.IncludedDays, true
}

// HasIncludedDays returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasIncludedDays() bool {
	if o != nil && !IsNil(o.IncludedDays) {
		return true
	}

	return false
}

// SetIncludedDays gets a reference to the given string and assigns it to the IncludedDays field.
func (o *BlockAllocationRangeType) SetIncludedDays(v string) {
	o.IncludedDays = &v
}

// GetRangeMode returns the RangeMode field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetRangeMode() BlockRangeModeType {
	if o == nil || IsNil(o.RangeMode) {
		var ret BlockRangeModeType
		return ret
	}
	return *o.RangeMode
}

// GetRangeModeOk returns a tuple with the RangeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetRangeModeOk() (*BlockRangeModeType, bool) {
	if o == nil || IsNil(o.RangeMode) {
		return nil, false
	}
	return o.RangeMode, true
}

// HasRangeMode returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasRangeMode() bool {
	if o != nil && !IsNil(o.RangeMode) {
		return true
	}

	return false
}

// SetRangeMode gets a reference to the given BlockRangeModeType and assigns it to the RangeMode field.
func (o *BlockAllocationRangeType) SetRangeMode(v BlockRangeModeType) {
	o.RangeMode = &v
}

// GetOverbookList returns the OverbookList field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetOverbookList() []BlockAllocationRangeTypeOverbookListInner {
	if o == nil || IsNil(o.OverbookList) {
		var ret []BlockAllocationRangeTypeOverbookListInner
		return ret
	}
	return o.OverbookList
}

// GetOverbookListOk returns a tuple with the OverbookList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetOverbookListOk() ([]BlockAllocationRangeTypeOverbookListInner, bool) {
	if o == nil || IsNil(o.OverbookList) {
		return nil, false
	}
	return o.OverbookList, true
}

// HasOverbookList returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasOverbookList() bool {
	if o != nil && !IsNil(o.OverbookList) {
		return true
	}

	return false
}

// SetOverbookList gets a reference to the given []BlockAllocationRangeTypeOverbookListInner and assigns it to the OverbookList field.
func (o *BlockAllocationRangeType) SetOverbookList(v []BlockAllocationRangeTypeOverbookListInner) {
	o.OverbookList = v
}

// GetGenericRoomType returns the GenericRoomType field value if set, zero value otherwise.
func (o *BlockAllocationRangeType) GetGenericRoomType() bool {
	if o == nil || IsNil(o.GenericRoomType) {
		var ret bool
		return ret
	}
	return *o.GenericRoomType
}

// GetGenericRoomTypeOk returns a tuple with the GenericRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAllocationRangeType) GetGenericRoomTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.GenericRoomType) {
		return nil, false
	}
	return o.GenericRoomType, true
}

// HasGenericRoomType returns a boolean if a field has been set.
func (o *BlockAllocationRangeType) HasGenericRoomType() bool {
	if o != nil && !IsNil(o.GenericRoomType) {
		return true
	}

	return false
}

// SetGenericRoomType gets a reference to the given bool and assigns it to the GenericRoomType field.
func (o *BlockAllocationRangeType) SetGenericRoomType(v bool) {
	o.GenericRoomType = &v
}

func (o BlockAllocationRangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAllocationRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	if !IsNil(o.BeginDate) {
		toSerialize["beginDate"] = o.BeginDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.AllocationType) {
		toSerialize["allocationType"] = o.AllocationType
	}
	if !IsNil(o.IncrementFlag) {
		toSerialize["incrementFlag"] = o.IncrementFlag
	}
	if !IsNil(o.BlockInventory) {
		toSerialize["blockInventory"] = o.BlockInventory
	}
	if !IsNil(o.BlockRates) {
		toSerialize["blockRates"] = o.BlockRates
	}
	if !IsNil(o.CutoffDate) {
		toSerialize["cutoffDate"] = o.CutoffDate
	}
	if !IsNil(o.CutoffDays) {
		toSerialize["cutoffDays"] = o.CutoffDays
	}
	if !IsNil(o.OverrideCutoffSchedule) {
		toSerialize["overrideCutoffSchedule"] = o.OverrideCutoffSchedule
	}
	if !IsNil(o.IncludedDays) {
		toSerialize["includedDays"] = o.IncludedDays
	}
	if !IsNil(o.RangeMode) {
		toSerialize["rangeMode"] = o.RangeMode
	}
	if !IsNil(o.OverbookList) {
		toSerialize["overbookList"] = o.OverbookList
	}
	if !IsNil(o.GenericRoomType) {
		toSerialize["genericRoomType"] = o.GenericRoomType
	}
	return toSerialize, nil
}

type NullableBlockAllocationRangeType struct {
	value *BlockAllocationRangeType
	isSet bool
}

func (v NullableBlockAllocationRangeType) Get() *BlockAllocationRangeType {
	return v.value
}

func (v *NullableBlockAllocationRangeType) Set(val *BlockAllocationRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAllocationRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAllocationRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAllocationRangeType(val *BlockAllocationRangeType) *NullableBlockAllocationRangeType {
	return &NullableBlockAllocationRangeType{value: val, isSet: true}
}

func (v NullableBlockAllocationRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAllocationRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


