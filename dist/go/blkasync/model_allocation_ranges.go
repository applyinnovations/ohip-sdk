/*
OPERA Cloud Block Reservation Asynchronous API

APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkasync

import (
	"encoding/json"
)

// checks if the AllocationRanges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllocationRanges{}

// AllocationRanges Request for setting block allocation for ranges of dates for a list of room types.
type AllocationRanges struct {
	AllocationRanges *BlockAllocationRanges `json:"allocationRanges,omitempty"`
	// Indicates if the Allocation objects refer to Generic Room Types (Room Pools).
	GenericRoomType *bool `json:"genericRoomType,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewAllocationRanges instantiates a new AllocationRanges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationRanges() *AllocationRanges {
	this := AllocationRanges{}
	return &this
}

// NewAllocationRangesWithDefaults instantiates a new AllocationRanges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationRangesWithDefaults() *AllocationRanges {
	this := AllocationRanges{}
	return &this
}

// GetAllocationRanges returns the AllocationRanges field value if set, zero value otherwise.
func (o *AllocationRanges) GetAllocationRanges() BlockAllocationRanges {
	if o == nil || IsNil(o.AllocationRanges) {
		var ret BlockAllocationRanges
		return ret
	}
	return *o.AllocationRanges
}

// GetAllocationRangesOk returns a tuple with the AllocationRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationRanges) GetAllocationRangesOk() (*BlockAllocationRanges, bool) {
	if o == nil || IsNil(o.AllocationRanges) {
		return nil, false
	}
	return o.AllocationRanges, true
}

// HasAllocationRanges returns a boolean if a field has been set.
func (o *AllocationRanges) HasAllocationRanges() bool {
	if o != nil && !IsNil(o.AllocationRanges) {
		return true
	}

	return false
}

// SetAllocationRanges gets a reference to the given BlockAllocationRanges and assigns it to the AllocationRanges field.
func (o *AllocationRanges) SetAllocationRanges(v BlockAllocationRanges) {
	o.AllocationRanges = &v
}

// GetGenericRoomType returns the GenericRoomType field value if set, zero value otherwise.
func (o *AllocationRanges) GetGenericRoomType() bool {
	if o == nil || IsNil(o.GenericRoomType) {
		var ret bool
		return ret
	}
	return *o.GenericRoomType
}

// GetGenericRoomTypeOk returns a tuple with the GenericRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationRanges) GetGenericRoomTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.GenericRoomType) {
		return nil, false
	}
	return o.GenericRoomType, true
}

// HasGenericRoomType returns a boolean if a field has been set.
func (o *AllocationRanges) HasGenericRoomType() bool {
	if o != nil && !IsNil(o.GenericRoomType) {
		return true
	}

	return false
}

// SetGenericRoomType gets a reference to the given bool and assigns it to the GenericRoomType field.
func (o *AllocationRanges) SetGenericRoomType(v bool) {
	o.GenericRoomType = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AllocationRanges) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationRanges) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AllocationRanges) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *AllocationRanges) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *AllocationRanges) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationRanges) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AllocationRanges) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *AllocationRanges) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o AllocationRanges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllocationRanges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocationRanges) {
		toSerialize["allocationRanges"] = o.AllocationRanges
	}
	if !IsNil(o.GenericRoomType) {
		toSerialize["genericRoomType"] = o.GenericRoomType
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableAllocationRanges struct {
	value *AllocationRanges
	isSet bool
}

func (v NullableAllocationRanges) Get() *AllocationRanges {
	return v.value
}

func (v *NullableAllocationRanges) Set(val *AllocationRanges) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationRanges) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationRanges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationRanges(val *AllocationRanges) *NullableAllocationRanges {
	return &NullableAllocationRanges{value: val, isSet: true}
}

func (v NullableAllocationRanges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationRanges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


