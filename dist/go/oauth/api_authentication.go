/*
oAuth API for OHIP

REST API to obtain an OAuth token from the Oracle Hospitality Integration Platform.  <p>For authenticating to Distribution APIs please use the Early Release OPERA Cloud Distribution Authentication API.</p><br /><br /> Compatible with OPERA Cloud release 21.5.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 21.5.0.0
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oauth

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AuthenticationAPIService AuthenticationAPI service
type AuthenticationAPIService service

type AuthenticationAPIGetTokenRequest struct {
	ctx context.Context
	ApiService *AuthenticationAPIService
	xAppKey *string
	grantType *string
	enterpriseId *string
	username *string
	password *string
	scope *string
}

// Client or Partner&#39;s Application Key
func (r AuthenticationAPIGetTokenRequest) XAppKey(xAppKey string) AuthenticationAPIGetTokenRequest {
	r.xAppKey = &xAppKey
	return r
}

// The grant type.  This value will depend on the API you are passing the OAuth token to.
func (r AuthenticationAPIGetTokenRequest) GrantType(grantType string) AuthenticationAPIGetTokenRequest {
	r.grantType = &grantType
	return r
}

// Global unique ID of the Enterprise. Only while using Client Credentials workflow with OCIM environments, users should pass this header.
func (r AuthenticationAPIGetTokenRequest) EnterpriseId(enterpriseId string) AuthenticationAPIGetTokenRequest {
	r.enterpriseId = &enterpriseId
	return r
}

// Your OPERA Cloud integration user name. Required value when requesting a token using the password grant.
func (r AuthenticationAPIGetTokenRequest) Username(username string) AuthenticationAPIGetTokenRequest {
	r.username = &username
	return r
}

// Your OPERA Cloud integration user password. Required value when requesting a token using the password grant.
func (r AuthenticationAPIGetTokenRequest) Password(password string) AuthenticationAPIGetTokenRequest {
	r.password = &password
	return r
}

// Your assigned scope. Required value when requesting a token using the client_credentials grant.
func (r AuthenticationAPIGetTokenRequest) Scope(scope string) AuthenticationAPIGetTokenRequest {
	r.scope = &scope
	return r
}

func (r AuthenticationAPIGetTokenRequest) Execute() (*OAuth2TokenResponse, *http.Response, error) {
	return r.ApiService.GetTokenExecute(r)
}

/*
GetToken Authenticate with the identity server

<p>This is required to access Oracle Hospitality OPERA Cloud REST APIs.  </p><h3>Obtaining a token</h3><p>To obtain a token include the following headers:</p> <ul><li>A Basic authentication header using the base64 hash of your Client ID and Client Secret in the format <code>ClientID:ClientSecret</code> - base64 encoded to the Basic Access Authorization standard</li> <li>Your application key in the <code>x-app-key</code> header</li></ul> <p>And the following body parameters:</p> <h4>Body parameters for obtaining your initial access token</h4> <ul><li><strong>grant_type</strong>.  Required to be "password" or "client_credentials"</strong></li><li><strong>username</strong>.  If grant_type is password, set this to your OPERA Cloud integration username.</strong></li><li><strong>password</strong>.  If grant_type is password, set this to your OPERA Cloud integration user's password.</li> <li><strong>scope</strong>. If grant_type is client_credentials, set this to your assigned scope. </li> </strong></li></ul> <h3>JSON Web Token (JWT)</h3><p> An open standard (<a href="https://tools.ietf.org/html/rfc7519" title="Definition of RFC7519, the standard for JWT tokens">RFC 7519</a>) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.</p><p><strong>OperationId:</strong>getToken</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthenticationAPIGetTokenRequest
*/
func (a *AuthenticationAPIService) GetToken(ctx context.Context) AuthenticationAPIGetTokenRequest {
	return AuthenticationAPIGetTokenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OAuth2TokenResponse
func (a *AuthenticationAPIService) GetTokenExecute(r AuthenticationAPIGetTokenRequest) (*OAuth2TokenResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OAuth2TokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationAPIService.GetToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/tokens"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.enterpriseId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "enterpriseId", r.enterpriseId, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "grant_type", r.grantType, "")
	if r.username != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "username", r.username, "")
	}
	if r.password != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "password", r.password, "")
	}
	if r.scope != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "scope", r.scope, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
