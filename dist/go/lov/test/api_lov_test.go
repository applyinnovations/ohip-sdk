/*
OPERA Cloud List of Values Management API

Testing LOVAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lov

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/lov"
)

func Test_lov_LOVAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LOVAPIService GetADSEchoTokenLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var errorType string

		resp, httpRes, err := apiClient.LOVAPI.GetADSEchoTokenLOV(context.Background(), errorType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetADSStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var errorType string

		resp, httpRes, err := apiClient.LOVAPI.GetADSStatusLOV(context.Background(), errorType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetARAccountTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetARAccountTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetARCreditCardsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetARCreditCardsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetActionTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var module string

		resp, httpRes, err := apiClient.LOVAPI.GetActionTypesLOV(context.Background(), module).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetActivitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetActivitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetActivityConfigTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetActivityConfigTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetActivityLocationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetActivityLocationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetActivityStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetActivityStatusLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetActivityTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAddressFormatElementsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var salesFormat string

		resp, httpRes, err := apiClient.LOVAPI.GetAddressFormatElementsLOV(context.Background(), salesFormat).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAgentAccountsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAgentAccountsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAgentSourceCitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAgentSourceCitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAgentSourceResvCitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAgentSourceResvCitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAlertCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAlertCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAllRevenueTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.LOVAPI.GetAllRevenueTypesLOV(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAllowedHotelInterfaceRightsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceRowId string
		var interfaceType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAllowedHotelInterfaceRightsLOV(context.Background(), interfaceRowId, interfaceType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAlternateHotelCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAlternateHotelCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAmenitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAmenitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetApplicationModulesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var relModuleName string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetApplicationModulesLOV(context.Background(), relModuleName, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetApplicationSettingsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var settingName string
		var levelCode string

		resp, httpRes, err := apiClient.LOVAPI.GetApplicationSettingsLOV(context.Background(), settingName, levelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetArrangementCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetArrangementCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetArrangementCodesNumberLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVAPI.GetArrangementCodesNumberLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetArticleCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetArticleCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAssignRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var room string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAssignRoomsLOV(context.Background(), room, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAttractionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAttractionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAuthorizerLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAuthorizerLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAutoNumberGeneratorLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var number string

		resp, httpRes, err := apiClient.LOVAPI.GetAutoNumberGeneratorLOV(context.Background(), number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAutoTraceExpressionFieldsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceGroup string
		var tableName string

		resp, httpRes, err := apiClient.LOVAPI.GetAutoTraceExpressionFieldsLOV(context.Background(), traceGroup, tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAvailableExportTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileGroup string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAvailableExportTemplatesLOV(context.Background(), fileGroup, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAvailableProfileOwnerRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAvailableProfileOwnerRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAvailableRoomComponentsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomNumber string
		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAvailableRoomComponentsLOV(context.Background(), roomNumber, roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAvailableRoomTypeComponentsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAvailableRoomTypeComponentsLOV(context.Background(), roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAvailableScriptLanguagesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAvailableScriptLanguagesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAwardCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAwardCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAwardCodesMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAwardCodesMultiHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAwardMktgCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAwardMktgCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetAwardPaymentLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetAwardPaymentLOV(context.Background(), membershipType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBankAccountsForReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBankAccountsForReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBankAccountsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBankAccountsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBanquetPrintingMethodLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBanquetPrintingMethodLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBillingInstructionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBillingInstructionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockBookingStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockBookingStatusesLOV(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockCatNextStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catStatus string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockCatNextStatusesLOV(context.Background(), catStatus).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockCodesByArrivalDateLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var arrivalDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockCodesByArrivalDateLOV(context.Background(), arrivalDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockCodesFinOperationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockCodesFinOperationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockCodesLOV(context.Background(), endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockCurrentStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockCurrentStatusesLOV(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockEventIdsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockEventIdsLOV(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockEventsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockEventsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockIdsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockIdsLOV(context.Background(), endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockModeLovLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockModeLovLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockNextStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingStatus string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockNextStatusesLOV(context.Background(), bookingStatus).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockPaymentMethodsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockPaymentMethodsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var negotiatedOnly string
		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockRateCodesLOV(context.Background(), negotiatedOnly, endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var departure string
		var arrival string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockRatesLOV(context.Background(), blockId, departure, arrival, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBlockReservationTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingStatus string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBlockReservationTypesLOV(context.Background(), bookingStatus, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBookingChannelRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channel string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBookingChannelRatePlansLOV(context.Background(), channel, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBookingChannelRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channel string

		resp, httpRes, err := apiClient.LOVAPI.GetBookingChannelRoomTypesLOV(context.Background(), channel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBookingTypesIndividualsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBookingTypesIndividualsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBudgetForecastCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBudgetForecastCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBudgetRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBudgetRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBusinessEventActionTypeExtDBLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var databaseId string
		var extSystem string
		var module string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBusinessEventActionTypeExtDBLOV(context.Background(), databaseId, extSystem, module, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetBusinessEventActionTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var module string
		var extSystem string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetBusinessEventActionTypeLOV(context.Background(), module, extSystem, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCampaignActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCampaignActivityTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCashRegisterIDLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCashRegisterIDLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCashierHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.LOVAPI.GetCashierHotelsLOV(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCatBudgetTypeEventCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCatBudgetTypeEventCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCatBudgetTypeMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCatBudgetTypeMarketCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCatBudgetTypeMealCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCatBudgetTypeMealCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCatBudgetTypeRevenueCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCatBudgetTypeRevenueCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringBudgetTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var active string
		var catering string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringBudgetTypesLOV(context.Background(), active, catering).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var codeType string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringCodesLOV(context.Background(), codeType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringEventStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitList string
		var newEvent string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringEventStatusLOV(context.Background(), waitList, newEvent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringPackageCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var radioType string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringPackageCodesLOV(context.Background(), hotelId, radioType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringPackagePriceCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringPackagePriceCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringPackageRevenueConfigEventTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pkgLinkId string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringPackageRevenueConfigEventTypeLOV(context.Background(), pkgLinkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringPackageRevenueEventTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pkgId string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringPackageRevenueEventTypeLOV(context.Background(), pkgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringSetupStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var space string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringSetupStylesLOV(context.Background(), space, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCateringStatusCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exclusionList string

		resp, httpRes, err := apiClient.LOVAPI.GetCateringStatusCodesLOV(context.Background(), exclusionList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetChainLanguagesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainCode string

		resp, httpRes, err := apiClient.LOVAPI.GetChainLanguagesLOV(context.Background(), chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetChannelCardTypeMappingCardTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetChannelCardTypeMappingCardTypeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetChannelCardTypeMappingChannelCardTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardType string
		var gdsHost string

		resp, httpRes, err := apiClient.LOVAPI.GetChannelCardTypeMappingChannelCardTypeLOV(context.Background(), cardType, gdsHost).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetChannelCardTypeMappingGdsHostLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetChannelCardTypeMappingGdsHostLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetChannelConfigRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var bookingChannelCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetChannelConfigRateCodesLOV(context.Background(), roomType, bookingChannelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetChannelParametersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string
		var settingName string
		var levelType string
		var levelCode string

		resp, httpRes, err := apiClient.LOVAPI.GetChannelParametersLOV(context.Background(), channelCode, settingName, levelType, levelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetClaimMembershipDetailsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVAPI.GetClaimMembershipDetailsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCommissionCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCommissionCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCommissionTxnCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCommissionTxnCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCompAuthorizersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCompAuthorizersLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCompTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCompTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCompaniesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCompaniesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetConfLetterReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetConfLetterReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetConfigAdvDynamicBaseRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var daily string
		var tiered string
		var currentRateCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetConfigAdvDynamicBaseRatePlansLOV(context.Background(), daily, tiered, currentRateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetConfigBaseRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tiered string
		var daily string
		var currencyCode string
		var currentRateCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetConfigBaseRatePlansLOV(context.Background(), tiered, daily, currencyCode, currentRateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetConfigDynamicBaseRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var currentRateCode string
		var tiered string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetConfigDynamicBaseRatePlansLOV(context.Background(), currentRateCode, tiered, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetConfigReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		resp, httpRes, err := apiClient.LOVAPI.GetConfigReportsLOV(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetConnectingSuitesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomNumber string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetConnectingSuitesLOV(context.Background(), roomNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCreditCardTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCreditCardTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCroUsersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.LOVAPI.GetCroUsersLOV(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCurrencyExchangeRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exchangeType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCurrencyExchangeRatesLOV(context.Background(), exchangeType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCurrencyFormatsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var decimal string

		resp, httpRes, err := apiClient.LOVAPI.GetCurrencyFormatsLOV(context.Background(), decimal).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCustomNumberConfigCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCustomNumberConfigCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetCustomRoomTranslationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dbfLogo string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetCustomRoomTranslationLOV(context.Background(), dbfLogo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetDepositCancelRulesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetDepositCancelRulesLOV(context.Background(), policyType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetDepositCancelRulesMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyType string

		resp, httpRes, err := apiClient.LOVAPI.GetDepositCancelRulesMultiHotelLOV(context.Background(), policyType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetDeviceCodeMappingValuesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCode string
		var codeType string
		var deviceCode string
		var deviceType string

		resp, httpRes, err := apiClient.LOVAPI.GetDeviceCodeMappingValuesLOV(context.Background(), externalCode, codeType, deviceCode, deviceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetDeviceLocationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetDeviceLocationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetDietaryPreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetDietaryPreferencesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetDistributionTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var location string
		var locationType string

		resp, httpRes, err := apiClient.LOVAPI.GetDistributionTemplatesLOV(context.Background(), location, locationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetECertificateGroupEntityLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entityName string

		resp, httpRes, err := apiClient.LOVAPI.GetECertificateGroupEntityLOV(context.Background(), entityName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetECouponLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetECouponLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetECouponRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetECouponRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEcouponResvRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetEcouponResvRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEndOfDayReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var beforeIncomeAudit string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetEndOfDayReportsLOV(context.Background(), beforeIncomeAudit, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEnrollmentMatchCommunicationTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVAPI.GetEnrollmentMatchCommunicationTypeLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEventGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetEventGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEventLocationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetEventLocationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEventRateCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var space string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetEventRateCodeLOV(context.Background(), space, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEventSetupStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var room string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetEventSetupStylesLOV(context.Background(), room, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetEventStatusCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exclusionList string

		resp, httpRes, err := apiClient.LOVAPI.GetEventStatusCodesLOV(context.Background(), exclusionList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetExchangeTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var currencyCode string

		resp, httpRes, err := apiClient.LOVAPI.GetExchangeTypesLOV(context.Background(), currencyCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetExportMappingCodesToLinkLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetExportMappingCodesToLinkLOV(context.Background(), configType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetExportMappingTypeCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetExportMappingTypeCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetExternalDatabaseAvailableResortsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var databaseId string
		var interfaceType string

		resp, httpRes, err := apiClient.LOVAPI.GetExternalDatabaseAvailableResortsLOV(context.Background(), databaseId, interfaceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetExternalReferenceTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetExternalReferenceTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFacilityCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFacilityCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFacilityCodesReservationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var facilityTask string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFacilityCodesReservationLOV(context.Background(), facilityTask, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFacilityTasksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFacilityTasksLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFacilityTasksRoomTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeLabel string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFacilityTasksRoomTypeLOV(context.Background(), roomTypeLabel, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFieldNameLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var changeSource string

		resp, httpRes, err := apiClient.LOVAPI.GetFieldNameLOV(context.Background(), changeSource).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFiscalPaymentMethodsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFiscalPaymentMethodsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFixedChargesTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFixedChargesTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFloorsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFloorsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFolioGroupingCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVAPI.GetFolioGroupingCodesLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFolioGroupingTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mode string

		resp, httpRes, err := apiClient.LOVAPI.GetFolioGroupingTransactionCodesLOV(context.Background(), mode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFolioStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFolioStylesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFolioTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFolioTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetForecastGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetForecastGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetForeignCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exchangeType string
		var sell string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetForeignCurrenciesLOV(context.Background(), exchangeType, sell, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFormatLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var method string
		var moduleName string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFormatLOV(context.Background(), method, moduleName, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFrequencyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var defaultDepartureTask string
		var guestRequested string

		resp, httpRes, err := apiClient.LOVAPI.GetFrequencyLOV(context.Background(), defaultDepartureTask, guestRequested).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFrequencyTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var defaultDepartureTask string
		var guestRequested string

		resp, httpRes, err := apiClient.LOVAPI.GetFrequencyTypeLOV(context.Background(), defaultDepartureTask, guestRequested).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetFromRoomNumberLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetFromRoomNumberLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGdsConvAmenityCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCodes string
		var featureType string

		resp, httpRes, err := apiClient.LOVAPI.GetGdsConvAmenityCodesLOV(context.Background(), bookingChannelCodes, featureType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGdsGuaranteeCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVAPI.GetGdsGuaranteeCodesLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGdsHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelType string

		resp, httpRes, err := apiClient.LOVAPI.GetGdsHotelsLOV(context.Background(), channelType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGdsRateCategoriesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVAPI.GetGdsRateCategoriesLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGdsRateLevelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVAPI.GetGdsRateLevelsLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGdsRoomCategoryTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCodes string

		resp, httpRes, err := apiClient.LOVAPI.GetGdsRoomCategoryTemplatesLOV(context.Background(), bookingChannelCodes).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGemMenuItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetGemMenuItemsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGenericReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetGenericReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGlobalAlertFieldQueryLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceId string

		resp, httpRes, err := apiClient.LOVAPI.GetGlobalAlertFieldQueryLOV(context.Background(), sourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGlobalAlertFunctionLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fieldType string

		resp, httpRes, err := apiClient.LOVAPI.GetGlobalAlertFunctionLOV(context.Background(), fieldType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGlobalAlertOperatorLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableName string
		var fieldName string
		var fieldType string
		var sourceIdIn string

		resp, httpRes, err := apiClient.LOVAPI.GetGlobalAlertOperatorLOV(context.Background(), tableName, fieldName, fieldType, sourceIdIn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGridTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingStatus string

		resp, httpRes, err := apiClient.LOVAPI.GetGridTypesLOV(context.Background(), bookingStatus).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGroupArrivalsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetGroupArrivalsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGuestMessagesMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetGuestMessagesMultiHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetGuestMessagesQuickTextsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetGuestMessagesQuickTextsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHKAttendantsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHKAttendantsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHKAttendantsMobileLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHKAttendantsMobileLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHKScheduledAttendantsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHKScheduledAttendantsLOV(context.Background(), businessDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHKTaskBreakOutLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHKTaskBreakOutLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHKTaskCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHKTaskCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHKTaskSheetsNoLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var breakOutId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHKTaskSheetsNoLOV(context.Background(), breakOutId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHKTaskTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHKTaskTemplatesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHkFloorsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHkFloorsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHkRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHkRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHkRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHkRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHotelContactCommMethodLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHotelContactCommMethodLOV(context.Background(), contactType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHotelEventTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHotelEventTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHotelInterfaceDataLineTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var logo string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHotelInterfaceDataLineTypesLOV(context.Background(), logo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHotelInterfaceImportRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHotelInterfaceImportRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHotelRateTierLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHotelRateTierLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHotelsForARProfileLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVAPI.GetHotelsForARProfileLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHotelsForSnCLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringEvents string

		resp, httpRes, err := apiClient.LOVAPI.GetHotelsForSnCLOV(context.Background(), cateringEvents).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHouseKeepingRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHouseKeepingRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHouseKeepingSectionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHouseKeepingSectionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetHousekeepingCreditRulesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetHousekeepingCreditRulesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetIfcRightsViewLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var category string
		var ifcId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetIfcRightsViewLOV(context.Background(), category, ifcId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetImbalanceVerificationTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetImbalanceVerificationTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceAutoBalanceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceAutoBalanceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceDataRequestMarketCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceDataRequestMarketCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceDataRequestMarketGroupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceDataRequestMarketGroupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceDataRequestRoomClassLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceDataRequestRoomClassLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceDataRequestRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceDataRequestRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceDataRequestSourceCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceDataRequestSourceCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceDataRequestSourceGroupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceDataRequestSourceGroupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfacePseudoRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfacePseudoRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceResyncFunctionSpaceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceResyncFunctionSpaceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceResyncOwnerContractLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceResyncOwnerContractLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceResyncOwnerContractRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceResyncOwnerContractRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceResyncProductsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceResyncProductsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceRevenueCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var logo string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceRevenueCodeLOV(context.Background(), logo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceTabColumnsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceTabColumnsLOV(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceTrxCodesAllChargesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceTrxCodesAllChargesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInterfaceTrxCodesMinibarLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInterfaceTrxCodesMinibarLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInvItemsClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInvItemsClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInvItemsPoolsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInvItemsPoolsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInventoryItemAttributesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInventoryItemAttributesLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInventoryItemRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInventoryItemRatesLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInventoryItemTemplateItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInventoryItemTemplateItemsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetInventoryItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sellInEvent string
		var sellInReservation string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetInventoryItemsLOV(context.Background(), sellInEvent, sellInReservation, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetItemClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetItemClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetItemCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetItemCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetItemPriceCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetItemPriceCodeLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetItemVendorLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetItemVendorLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetJobTitlesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetJobTitlesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetKeyOptionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetKeyOptionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetLOVNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LOVAPI.GetLOVNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetLicensesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetLicensesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetListOfValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.LOVAPI.GetListOfValues(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetLocatorQuickTextsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetLocatorQuickTextsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMailGenericLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceIdIn string

		resp, httpRes, err := apiClient.LOVAPI.GetMailGenericLOV(context.Background(), sourceIdIn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetManagerReportDetailsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetManagerReportDetailsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetManagersReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetManagersReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMarketGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMarketGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMarketSegmentLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMarketSegmentLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMasterBlockLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMasterBlockLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipAwardFinTrxLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipAwardFinTrxLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipAwardProductsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipAwardProductsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipAwardRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipAwardRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipAwardUpgradeRoomGroupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipAwardUpgradeRoomGroupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipAwardUpgradeRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipAwardUpgradeRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipBenefitProgramLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipBenefitProgramLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipBenefitsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipBenefitsLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipCardFeeAmountLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipLevel string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipCardFeeAmountLOV(context.Background(), membershipLevel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipClassTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loyalty string
		var airlines string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipClassTypesLOV(context.Background(), loyalty, airlines).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipMaxDowngradeLevelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string
		var membershipLevelRank string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipMaxDowngradeLevelLOV(context.Background(), membershipType, membershipLevelRank).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipPointsRuleCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipPointsRuleCodesLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipPromotionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipPromotionsLOV(context.Background(), membershipId, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipStatementBatchListLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipStatementBatchListLOV(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipTotalPointsAvailableLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipTotalPointsAvailableLOV(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMembershipTransferPointsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVAPI.GetMembershipTransferPointsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMenuClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMenuClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMenuItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetMenuItemsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetMenuLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var menuClassId string

		resp, httpRes, err := apiClient.LOVAPI.GetMenuLOV(context.Background(), menuClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetNegotiatedRateHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVAPI.GetNegotiatedRateHotelsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetNegotiatedRatesHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var rateCode string

		resp, httpRes, err := apiClient.LOVAPI.GetNegotiatedRatesHotelsLOV(context.Background(), profileId, rateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetNoteTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentType string

		resp, httpRes, err := apiClient.LOVAPI.GetNoteTypesLOV(context.Background(), departmentType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetOSAActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetOSAActivityTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetOXIInterfaceReferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetOXIInterfaceReferencesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetOXIInterfaceResortsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetOXIInterfaceResortsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetOXIInterfacesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetOXIInterfacesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetOXIResortsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.LOVAPI.GetOXIResortsLOV(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetOrganizationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionTask string
		var chainCode string
		var roles string

		resp, httpRes, err := apiClient.LOVAPI.GetOrganizationsLOV(context.Background(), actionTask, chainCode, roles).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPackForecastGroupCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPackForecastGroupCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPackageArrangementAssociationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var arrangementCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPackageArrangementAssociationLOV(context.Background(), arrangementCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetParameterActiveUnderChainLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainCode string
		var parameter string

		resp, httpRes, err := apiClient.LOVAPI.GetParameterActiveUnderChainLOV(context.Background(), chainCode, parameter).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPaymentMethodsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPaymentMethodsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPaymentTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPaymentTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPeriodSetupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPeriodSetupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPeriodsSetupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPeriodsSetupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPostalCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var country string

		resp, httpRes, err := apiClient.LOVAPI.GetPostalCodesLOV(context.Background(), country).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPostingRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPostingRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPostingTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPostingTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPreferenceSubgroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceGroup string
		var chainCode string

		resp, httpRes, err := apiClient.LOVAPI.GetPreferenceSubgroupsLOV(context.Background(), preferenceGroup, chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPreferencesMultiHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceGroup string

		resp, httpRes, err := apiClient.LOVAPI.GetPreferencesMultiHotelsLOV(context.Background(), preferenceGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPrepaidCardInterfacesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPrepaidCardInterfacesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPrintersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertPrinters string

		resp, httpRes, err := apiClient.LOVAPI.GetPrintersLOV(context.Background(), alertPrinters).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPrioritiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPrioritiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetProfileCommunicationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVAPI.GetProfileCommunicationsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetProfileEnrollmentMatchCriteriaLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameType string

		resp, httpRes, err := apiClient.LOVAPI.GetProfileEnrollmentMatchCriteriaLOV(context.Background(), nameType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetProfileEnrollmentRuleDoNotMergeCriteriaLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameType string

		resp, httpRes, err := apiClient.LOVAPI.GetProfileEnrollmentRuleDoNotMergeCriteriaLOV(context.Background(), nameType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetProfileEnrollmentRuleFilterCriteriaLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameType string

		resp, httpRes, err := apiClient.LOVAPI.GetProfileEnrollmentRuleFilterCriteriaLOV(context.Background(), nameType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetProfileHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxTypeCheck string
		var profileId string

		resp, httpRes, err := apiClient.LOVAPI.GetProfileHotelsLOV(context.Background(), taxTypeCheck, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetProfileIdentificationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetProfileIdentificationsLOV(context.Background(), profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetProfileNameValidationsTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operaParam string

		resp, httpRes, err := apiClient.LOVAPI.GetProfileNameValidationsTypeLOV(context.Background(), operaParam).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPromoGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPromoGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPromoRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promoCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPromoRatesLOV(context.Background(), promoCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPropertyAmenitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetPropertyAmenitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetPublisherPropertiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriber string

		resp, httpRes, err := apiClient.LOVAPI.GetPublisherPropertiesLOV(context.Background(), subscriber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetQueueNameLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodeList string

		resp, httpRes, err := apiClient.LOVAPI.GetQueueNameLOV(context.Background(), hotelCodeList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetQuickTextsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetQuickTextsLOV(context.Background(), departmentId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRateCategoriesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRateCategoriesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRateCodeGlobalDescEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRateCodeGlobalDescEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRateCodesByTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCodeType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRateCodesByTypeLOV(context.Background(), rateCodeType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRateCodesValidLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRateCodesValidLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRateCommissionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRateCommissionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRateConfigCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRateConfigCurrenciesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRateGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRateGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRatePlanForMassRateLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCodeType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRatePlanForMassRateLOV(context.Background(), rateCodeType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRatePlansForYieldAsConfigLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRatePlansForYieldAsConfigLOV(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRatePlansLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepBlockCodesParamOffLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepBlockCodesParamOffLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepBlockCodesParamOnLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepBlockCodesParamOnLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepCalendarMonthsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var year string

		resp, httpRes, err := apiClient.LOVAPI.GetRepCalendarMonthsLOV(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepCalendarWeeksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var year string

		resp, httpRes, err := apiClient.LOVAPI.GetRepCalendarWeeksLOV(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepCalendarYearsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var period string

		resp, httpRes, err := apiClient.LOVAPI.GetRepCalendarYearsLOV(context.Background(), period).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepCashiersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepCashiersLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepContactListLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepContactListLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepCurrenciesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepDepartmentsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepDepartmentsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepFiscalMonthsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalYearId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepFiscalMonthsLOV(context.Background(), fiscalYearId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepFiscalWeeksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalYearId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepFiscalWeeksLOV(context.Background(), fiscalYearId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepFiscalYearsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepFiscalYearsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepForeignCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepForeignCurrenciesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepGroupReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.LOVAPI.GetRepGroupReportsLOV(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepInventoryItemPoolsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepInventoryItemPoolsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepMarketCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepOwnerCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodesList string

		resp, httpRes, err := apiClient.LOVAPI.GetRepOwnerCodesLOV(context.Background(), hotelCodesList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var propertyList string

		resp, httpRes, err := apiClient.LOVAPI.GetRepRatePlansLOV(context.Background(), propertyList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepRoomStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepRoomStatusesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepRoomTypeMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodeList string

		resp, httpRes, err := apiClient.LOVAPI.GetRepRoomTypeMultiHotelLOV(context.Background(), hotelCodeList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepRoomsStatLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toDate string
		var fromDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepRoomsStatLOV(context.Background(), toDate, fromDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepServiceRequestCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepServiceRequestCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRepTraveAgtCalendarYearLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRepTraveAgtCalendarYearLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReportsGenericLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var parameter string
		var moduleId string

		resp, httpRes, err := apiClient.LOVAPI.GetReportsGenericLOV(context.Background(), parameter, moduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResStatReportRateCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResStatReportRateCodeLOV(context.Background(), endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationBasedBlocksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationBasedBlocksLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationBasedProfilesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationBasedProfilesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationPackagesGroupItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var group string
		var arrival string
		var children string
		var adults string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationPackagesGroupItemsLOV(context.Background(), group, arrival, children, adults, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationPackagesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departure string
		var arrival string
		var children string
		var adults string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationPackagesLOV(context.Background(), departure, arrival, children, adults, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationPreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationPreferencesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationStatusesHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationStatusesHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationTicketsCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departure string
		var arrival string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationTicketsCodesLOV(context.Background(), departure, arrival, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetReservationTicketsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resvNameId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetReservationTicketsLOV(context.Background(), resvNameId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortAirportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortAirportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortCROsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortCROsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortGuaranteeCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortGuaranteeCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortInventoryItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sellInEvent string
		var sellInReservation string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortInventoryItemsLOV(context.Background(), sellInEvent, sellInReservation, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortMarketCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortRateClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortRateClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortRestrictionStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortRestrictionStatusesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortRoomNumbersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortRoomNumbersLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResortTransportationLabelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResortTransportationLabelsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResourceItemClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResourceItemClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResvAutoAttachRulesCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResvAutoAttachRulesCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResvAutoAttachRulesRuleTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResvAutoAttachRulesRuleTypeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResvBasedProfilesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResvBasedProfilesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetResvTransactionDiversionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resvNameId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetResvTransactionDiversionCodesLOV(context.Background(), resvNameId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRevenueBucketTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRevenueBucketTrxCodesLOV(context.Background(), bucketType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRevenueBucketsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVAPI.GetRevenueBucketsLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRevenueTypeMappingSpaceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRevenueTypeMappingSpaceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRevenueTypeMappingTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRevenueTypeMappingTrxCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRolesForLevelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelCode string
		var roleLevel string

		resp, httpRes, err := apiClient.LOVAPI.GetRolesForLevelLOV(context.Background(), levelCode, roleLevel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomClassCategoriesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomClassCategoriesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomClassMultiPropertyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodeList string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomClassMultiPropertyLOV(context.Background(), hotelCodeList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomFeaturesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomFeaturesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomHierarchyClassesCopyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomHierarchyClassesCopyLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomHierarchyRoomClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomHierarchyRoomClassesLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomHierarchyRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomHierarchyRoomTypesLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomHierarchyTypesCopyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomHierarchyTypesCopyLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomHoldConditionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomHoldConditionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomMaintenanceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomMaintenanceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomPoolRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomPool string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomPoolRoomTypesLOV(context.Background(), roomPool, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomPoolsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomPoolsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var room string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomRatesLOV(context.Background(), room, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomReservationStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeDayUse string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomReservationStatusLOV(context.Background(), includeDayUse).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomRevenueTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomRevenueTrxCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomRotationGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomRotationGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomRotationUnitGradesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomRotationUnitGradesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomSpecialsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomSpecialsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomTypePoolLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomTypePoolLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomTypesForMassRateLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCodes string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomTypesForMassRateLOV(context.Background(), ratePlanCodes, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomingListHKRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departure string
		var arrival string
		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomingListHKRoomsLOV(context.Background(), departure, arrival, roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomsKeyGenerationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomsKeyGenerationLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetRoutingInstructionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetRoutingInstructionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSalesManagerGoalPeriodLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSalesManagerGoalPeriodLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetScheduledReportsExportLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetScheduledReportsExportLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetScreenCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var screenArea string
		var screenType string
		var chainCode string

		resp, httpRes, err := apiClient.LOVAPI.GetScreenCodesLOV(context.Background(), screenArea, screenType, chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetScreenStyleCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var screenCode string
		var chainCode string

		resp, httpRes, err := apiClient.LOVAPI.GetScreenStyleCodesLOV(context.Background(), screenCode, chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetServiceNameLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var protocol string
		var outboundType string

		resp, httpRes, err := apiClient.LOVAPI.GetServiceNameLOV(context.Background(), protocol, outboundType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetServiceRequestCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetServiceRequestCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSetupStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSetupStylesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetShiftReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetShiftReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetShiftReportsNoParamLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shiftGroupId string

		resp, httpRes, err := apiClient.LOVAPI.GetShiftReportsNoParamLOV(context.Background(), shiftGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSitePlanSectionTypeLinksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sectionType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSitePlanSectionTypeLinksLOV(context.Background(), sectionType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSitePlanSectionTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteType string

		resp, httpRes, err := apiClient.LOVAPI.GetSitePlanSectionTypesLOV(context.Background(), siteType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSitePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSitePlansLOV(context.Background(), siteType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSourceGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSourceGroupsLOV(context.Background(), includeInactive, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSpacesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSpacesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSpecialRequestsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSpecialRequestsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSpecialsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSpecialsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetStageProfilesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var criteria string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetStageProfilesLOV(context.Background(), criteria, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetStagedProfilePreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resortNameId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetStagedProfilePreferencesLOV(context.Background(), resortNameId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetStatisticsYearsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var year string

		resp, httpRes, err := apiClient.LOVAPI.GetStatisticsYearsLOV(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetStoredValueRedeemTrxLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetStoredValueRedeemTrxLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSubBlockLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var superBlock string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSubBlockLOV(context.Background(), superBlock, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSummaryRefreshLogLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSummaryRefreshLogLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetSynchronizeRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetSynchronizeRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTaskBreakOutLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTaskBreakOutLOV(context.Background(), fromDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTaskSheetDeptLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelCode string

		resp, httpRes, err := apiClient.LOVAPI.GetTaskSheetDeptLOV(context.Background(), levelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTaskSheetLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var breakOutId string

		resp, httpRes, err := apiClient.LOVAPI.GetTaskSheetLOV(context.Background(), breakOutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTaskSheetRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetNo string
		var taskCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTaskSheetRoomsLOV(context.Background(), taskSheetNo, taskCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTaxTransactionCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTaxTransactionCodeLOV(context.Background(), taxCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTaxTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTaxTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTelephoneCategoryLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTelephoneCategoryLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateBookingChannelRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateBookingChannelRoomTypesLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateFiscalFolioParametersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateCode string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateFiscalFolioParametersLOV(context.Background(), templateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateMarketCodesLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateMarketGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateMarketGroupsLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplatePolicyCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyType string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplatePolicyCodesLOV(context.Background(), policyType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplatePreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeGlobals string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplatePreferencesLOV(context.Background(), includeGlobals).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateRoomClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateRoomClassesLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateSourceCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateSourceCodesLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateSourceGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateSourceGroupsLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTemplateTransactionSubgroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fetchOnlyUniqueValues string

		resp, httpRes, err := apiClient.LOVAPI.GetTemplateTransactionSubgroupsLOV(context.Background(), fetchOnlyUniqueValues).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTestUpsellRulesRateCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomCategory string
		var arrivalDate string
		var nights string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTestUpsellRulesRateCodeLOV(context.Background(), roomCategory, arrivalDate, nights, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetToPostalCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var country string

		resp, httpRes, err := apiClient.LOVAPI.GetToPostalCodesLOV(context.Background(), country).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTraceDateCalcLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var view string

		resp, httpRes, err := apiClient.LOVAPI.GetTraceDateCalcLOV(context.Background(), view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTraceFieldLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var view string

		resp, httpRes, err := apiClient.LOVAPI.GetTraceFieldLOV(context.Background(), view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionAdjustmentReasonCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionAdjustmentReasonCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionCodesConsumptionLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionCodesConsumptionLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionCodesPaymentLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionCodesPaymentLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionDeleteReasonCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionDeleteReasonCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionDiversionRuleRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionDiversionRuleRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransactionSubgroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransactionSubgroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransportTypesHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransportTypesHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTransportTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTransportTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTravelAgentSourceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTravelAgentSourceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTravelAgentSourceResvLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTravelAgentSourceResvLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTrxCodeArrangementLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVAPI.GetTrxCodeArrangementLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetTurnawayCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetTurnawayCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUDFMappingsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		resp, httpRes, err := apiClient.LOVAPI.GetUDFMappingsLOV(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUdfAttributesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfCategory string
		var udfType string

		resp, httpRes, err := apiClient.LOVAPI.GetUdfAttributesLOV(context.Background(), udfCategory, udfType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellDefaultTrxCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellDefaultTrxCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellFromRoomClassEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellFromRoomClassEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellFromRoomTypeEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellFromRoomTypeEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellHierarchyLevelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellHierarchyLevelsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellMembershipLevelsOnlyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellMembershipLevelsOnlyLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellOccupancyLevelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeBlank string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellOccupancyLevelsLOV(context.Background(), includeBlank, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellRateCategoriesEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellRateCategoriesEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellRoomClassViewLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellRoomClassViewLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellRoomTypeViewLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellRoomTypeViewLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellRuleLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellRuleLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellToRoomClassEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromRoomClass string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellToRoomClassEditLOV(context.Background(), fromRoomClass, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellToRoomTypeEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromRoomTypeLabel string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellToRoomTypeEditLOV(context.Background(), fromRoomTypeLabel, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUpsellTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUpsellTrxCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUserDbFunctionArgsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var category string
		var functionName string

		resp, httpRes, err := apiClient.LOVAPI.GetUserDbFunctionArgsLOV(context.Background(), category, functionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUserDbFunctionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var category string

		resp, httpRes, err := apiClient.LOVAPI.GetUserDbFunctionsLOV(context.Background(), category).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUserLogActivityGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUserLogActivityGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUserLogActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityGroup string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUserLogActivityTypesLOV(context.Background(), activityGroup, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetUserRolesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleWithDepartment string
		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetUserRolesLOV(context.Background(), roleWithDepartment, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetYearSetupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetYearSetupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService GetYieldMarketsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVAPI.GetYieldMarketsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService PingLOVService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LOVAPI.PingLOVService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVAPIService ValidateListOfValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LOVAPI.ValidateListOfValues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
