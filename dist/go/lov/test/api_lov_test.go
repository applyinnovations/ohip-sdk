/*
OPERA Cloud List of Values Management API

Testing LOVApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lov

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/lov"
)

func Test_lov_LOVApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LOVApiService GetADSEchoTokenLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var errorType string

		resp, httpRes, err := apiClient.LOVApi.GetADSEchoTokenLOV(context.Background(), errorType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetADSStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var errorType string

		resp, httpRes, err := apiClient.LOVApi.GetADSStatusLOV(context.Background(), errorType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetARAccountTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetARAccountTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetARCreditCardsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetARCreditCardsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetActionTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var module string

		resp, httpRes, err := apiClient.LOVApi.GetActionTypesLOV(context.Background(), module).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetActivitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetActivitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetActivityConfigTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetActivityConfigTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetActivityLocationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetActivityLocationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetActivityStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetActivityStatusLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetActivityTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAddressFormatElementsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var salesFormat string

		resp, httpRes, err := apiClient.LOVApi.GetAddressFormatElementsLOV(context.Background(), salesFormat).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAgentAccountsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAgentAccountsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAgentSourceCitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAgentSourceCitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAgentSourceResvCitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAgentSourceResvCitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAlertCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAlertCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAllRevenueTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.LOVApi.GetAllRevenueTypesLOV(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAllowedHotelInterfaceRightsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceRowId string
		var interfaceType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAllowedHotelInterfaceRightsLOV(context.Background(), interfaceRowId, interfaceType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAlternateHotelCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAlternateHotelCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAmenitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAmenitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetApplicationModulesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var relModuleName string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetApplicationModulesLOV(context.Background(), relModuleName, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetApplicationSettingsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var settingName string
		var levelCode string

		resp, httpRes, err := apiClient.LOVApi.GetApplicationSettingsLOV(context.Background(), settingName, levelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetArrangementCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetArrangementCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetArrangementCodesNumberLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVApi.GetArrangementCodesNumberLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetArticleCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetArticleCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAssignRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var room string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAssignRoomsLOV(context.Background(), room, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAttractionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAttractionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAuthorizerLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAuthorizerLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAutoNumberGeneratorLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var number string

		resp, httpRes, err := apiClient.LOVApi.GetAutoNumberGeneratorLOV(context.Background(), number).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAutoTraceExpressionFieldsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var traceGroup string
		var tableName string

		resp, httpRes, err := apiClient.LOVApi.GetAutoTraceExpressionFieldsLOV(context.Background(), traceGroup, tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAvailableExportTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileGroup string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAvailableExportTemplatesLOV(context.Background(), fileGroup, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAvailableProfileOwnerRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAvailableProfileOwnerRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAvailableRoomComponentsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomNumber string
		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAvailableRoomComponentsLOV(context.Background(), roomNumber, roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAvailableRoomTypeComponentsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAvailableRoomTypeComponentsLOV(context.Background(), roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAvailableScriptLanguagesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAvailableScriptLanguagesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAwardCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAwardCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAwardCodesMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAwardCodesMultiHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetAwardMktgCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetAwardMktgCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBankAccountsForReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBankAccountsForReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBankAccountsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBankAccountsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBanquetPrintingMethodLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBanquetPrintingMethodLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBillingInstructionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBillingInstructionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockBookingStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockBookingStatusesLOV(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockCatNextStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catStatus string

		resp, httpRes, err := apiClient.LOVApi.GetBlockCatNextStatusesLOV(context.Background(), catStatus).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockCodesByArrivalDateLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var arrivalDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockCodesByArrivalDateLOV(context.Background(), arrivalDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockCodesFinOperationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockCodesFinOperationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockCodesLOV(context.Background(), endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockCurrentStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockCurrentStatusesLOV(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockEventIdsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockEventIdsLOV(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockEventsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockEventsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockIdsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockIdsLOV(context.Background(), endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockModeLovLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockModeLovLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockNextStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingStatus string

		resp, httpRes, err := apiClient.LOVApi.GetBlockNextStatusesLOV(context.Background(), bookingStatus).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockPaymentMethodsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockPaymentMethodsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var negotiatedOnly string
		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockRateCodesLOV(context.Background(), negotiatedOnly, endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var departure string
		var arrival string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockRatesLOV(context.Background(), blockId, departure, arrival, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBlockReservationTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingStatus string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBlockReservationTypesLOV(context.Background(), bookingStatus, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBookingChannelRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channel string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBookingChannelRatePlansLOV(context.Background(), channel, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBookingChannelRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channel string

		resp, httpRes, err := apiClient.LOVApi.GetBookingChannelRoomTypesLOV(context.Background(), channel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBookingTypesIndividualsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBookingTypesIndividualsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBudgetForecastCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBudgetForecastCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBudgetRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBudgetRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBusinessEventActionTypeExtDBLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var databaseId string
		var extSystem string
		var module string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBusinessEventActionTypeExtDBLOV(context.Background(), databaseId, extSystem, module, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetBusinessEventActionTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var module string
		var extSystem string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetBusinessEventActionTypeLOV(context.Background(), module, extSystem, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCampaignActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCampaignActivityTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCashRegisterIDLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCashRegisterIDLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCashierHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cashierId string

		resp, httpRes, err := apiClient.LOVApi.GetCashierHotelsLOV(context.Background(), cashierId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCatBudgetTypeEventCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCatBudgetTypeEventCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCatBudgetTypeMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCatBudgetTypeMarketCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCatBudgetTypeMealCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCatBudgetTypeMealCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCatBudgetTypeRevenueCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var catBudgetType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCatBudgetTypeRevenueCodesLOV(context.Background(), catBudgetType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringBudgetTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var active string
		var catering string

		resp, httpRes, err := apiClient.LOVApi.GetCateringBudgetTypesLOV(context.Background(), active, catering).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var codeType string

		resp, httpRes, err := apiClient.LOVApi.GetCateringCodesLOV(context.Background(), codeType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringEventStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitList string
		var newEvent string

		resp, httpRes, err := apiClient.LOVApi.GetCateringEventStatusLOV(context.Background(), waitList, newEvent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringPackageCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var radioType string

		resp, httpRes, err := apiClient.LOVApi.GetCateringPackageCodesLOV(context.Background(), hotelId, radioType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringPackagePriceCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCateringPackagePriceCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringPackageRevenueConfigEventTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pkgLinkId string

		resp, httpRes, err := apiClient.LOVApi.GetCateringPackageRevenueConfigEventTypeLOV(context.Background(), pkgLinkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringPackageRevenueEventTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pkgId string

		resp, httpRes, err := apiClient.LOVApi.GetCateringPackageRevenueEventTypeLOV(context.Background(), pkgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringSetupStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var space string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCateringSetupStylesLOV(context.Background(), space, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCateringStatusCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exclusionList string

		resp, httpRes, err := apiClient.LOVApi.GetCateringStatusCodesLOV(context.Background(), exclusionList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetChainLanguagesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainCode string

		resp, httpRes, err := apiClient.LOVApi.GetChainLanguagesLOV(context.Background(), chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetChannelCardTypeMappingCardTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetChannelCardTypeMappingCardTypeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetChannelCardTypeMappingChannelCardTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cardType string
		var gdsHost string

		resp, httpRes, err := apiClient.LOVApi.GetChannelCardTypeMappingChannelCardTypeLOV(context.Background(), cardType, gdsHost).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetChannelCardTypeMappingGdsHostLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetChannelCardTypeMappingGdsHostLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetChannelConfigRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var bookingChannelCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetChannelConfigRateCodesLOV(context.Background(), roomType, bookingChannelCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetChannelParametersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelCode string
		var settingName string
		var levelType string
		var levelCode string

		resp, httpRes, err := apiClient.LOVApi.GetChannelParametersLOV(context.Background(), channelCode, settingName, levelType, levelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetClaimMembershipDetailsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVApi.GetClaimMembershipDetailsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCommissionCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCommissionCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCommissionTxnCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCommissionTxnCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCompAuthorizersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCompAuthorizersLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCompTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCompTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCompaniesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCompaniesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetConfLetterReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetConfLetterReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetConfigAdvDynamicBaseRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var daily string
		var tiered string
		var currentRateCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetConfigAdvDynamicBaseRatePlansLOV(context.Background(), daily, tiered, currentRateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetConfigBaseRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tiered string
		var daily string
		var currencyCode string
		var currentRateCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetConfigBaseRatePlansLOV(context.Background(), tiered, daily, currencyCode, currentRateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetConfigDynamicBaseRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var currentRateCode string
		var tiered string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetConfigDynamicBaseRatePlansLOV(context.Background(), currentRateCode, tiered, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetConfigReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		resp, httpRes, err := apiClient.LOVApi.GetConfigReportsLOV(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetConnectingSuitesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomNumber string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetConnectingSuitesLOV(context.Background(), roomNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCreditCardTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCreditCardTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCroUsersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.LOVApi.GetCroUsersLOV(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCurrencyExchangeRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exchangeType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCurrencyExchangeRatesLOV(context.Background(), exchangeType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCurrencyFormatsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var decimal string

		resp, httpRes, err := apiClient.LOVApi.GetCurrencyFormatsLOV(context.Background(), decimal).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCustomNumberConfigCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCustomNumberConfigCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetCustomRoomTranslationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dbfLogo string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetCustomRoomTranslationLOV(context.Background(), dbfLogo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetDepositCancelRulesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetDepositCancelRulesLOV(context.Background(), policyType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetDepositCancelRulesMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyType string

		resp, httpRes, err := apiClient.LOVApi.GetDepositCancelRulesMultiHotelLOV(context.Background(), policyType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetDeviceCodeMappingValuesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalCode string
		var codeType string
		var deviceCode string
		var deviceType string

		resp, httpRes, err := apiClient.LOVApi.GetDeviceCodeMappingValuesLOV(context.Background(), externalCode, codeType, deviceCode, deviceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetDeviceLocationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetDeviceLocationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetDietaryPreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetDietaryPreferencesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetDistributionTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var location string
		var locationType string

		resp, httpRes, err := apiClient.LOVApi.GetDistributionTemplatesLOV(context.Background(), location, locationType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetECertificateGroupEntityLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entityName string

		resp, httpRes, err := apiClient.LOVApi.GetECertificateGroupEntityLOV(context.Background(), entityName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetECouponLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetECouponLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetECouponRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetECouponRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEcouponResvRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetEcouponResvRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEndOfDayReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var beforeIncomeAudit string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetEndOfDayReportsLOV(context.Background(), beforeIncomeAudit, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEnrollmentMatchCommunicationTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVApi.GetEnrollmentMatchCommunicationTypeLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEventGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetEventGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEventLocationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetEventLocationsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEventRateCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var space string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetEventRateCodeLOV(context.Background(), space, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEventSetupStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var room string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetEventSetupStylesLOV(context.Background(), room, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetEventStatusCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exclusionList string

		resp, httpRes, err := apiClient.LOVApi.GetEventStatusCodesLOV(context.Background(), exclusionList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetExchangeTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var currencyCode string

		resp, httpRes, err := apiClient.LOVApi.GetExchangeTypesLOV(context.Background(), currencyCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetExportMappingCodesToLinkLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetExportMappingCodesToLinkLOV(context.Background(), configType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetExportMappingTypeCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetExportMappingTypeCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetExternalDatabaseAvailableResortsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var databaseId string
		var interfaceType string

		resp, httpRes, err := apiClient.LOVApi.GetExternalDatabaseAvailableResortsLOV(context.Background(), databaseId, interfaceType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetExternalReferenceTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetExternalReferenceTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFacilityCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFacilityCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFacilityCodesReservationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var facilityTask string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFacilityCodesReservationLOV(context.Background(), facilityTask, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFacilityTasksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFacilityTasksLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFacilityTasksRoomTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomTypeLabel string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFacilityTasksRoomTypeLOV(context.Background(), roomTypeLabel, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFieldNameLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var changeSource string

		resp, httpRes, err := apiClient.LOVApi.GetFieldNameLOV(context.Background(), changeSource).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFiscalPaymentMethodsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFiscalPaymentMethodsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFixedChargesTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFixedChargesTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFloorsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFloorsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFolioGroupingCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVApi.GetFolioGroupingCodesLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFolioGroupingTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mode string

		resp, httpRes, err := apiClient.LOVApi.GetFolioGroupingTransactionCodesLOV(context.Background(), mode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFolioStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFolioStylesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFolioTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFolioTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetForecastGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetForecastGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetForeignCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exchangeType string
		var sell string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetForeignCurrenciesLOV(context.Background(), exchangeType, sell, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFormatLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var method string
		var moduleName string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFormatLOV(context.Background(), method, moduleName, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFrequencyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var defaultDepartureTask string
		var guestRequested string

		resp, httpRes, err := apiClient.LOVApi.GetFrequencyLOV(context.Background(), defaultDepartureTask, guestRequested).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFrequencyTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var defaultDepartureTask string
		var guestRequested string

		resp, httpRes, err := apiClient.LOVApi.GetFrequencyTypeLOV(context.Background(), defaultDepartureTask, guestRequested).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetFromRoomNumberLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetFromRoomNumberLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGdsConvAmenityCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCodes string
		var featureType string

		resp, httpRes, err := apiClient.LOVApi.GetGdsConvAmenityCodesLOV(context.Background(), bookingChannelCodes, featureType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGdsGuaranteeCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVApi.GetGdsGuaranteeCodesLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGdsHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var channelType string

		resp, httpRes, err := apiClient.LOVApi.GetGdsHotelsLOV(context.Background(), channelType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGdsRateCategoriesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVApi.GetGdsRateCategoriesLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGdsRateLevelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVApi.GetGdsRateLevelsLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGdsRoomCategoryTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCodes string

		resp, httpRes, err := apiClient.LOVApi.GetGdsRoomCategoryTemplatesLOV(context.Background(), bookingChannelCodes).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGemMenuItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetGemMenuItemsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGenericReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetGenericReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGlobalAlertFieldQueryLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceId string

		resp, httpRes, err := apiClient.LOVApi.GetGlobalAlertFieldQueryLOV(context.Background(), sourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGlobalAlertFunctionLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fieldType string

		resp, httpRes, err := apiClient.LOVApi.GetGlobalAlertFunctionLOV(context.Background(), fieldType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGlobalAlertOperatorLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableName string
		var fieldName string
		var fieldType string
		var sourceIdIn string

		resp, httpRes, err := apiClient.LOVApi.GetGlobalAlertOperatorLOV(context.Background(), tableName, fieldName, fieldType, sourceIdIn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGridTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingStatus string

		resp, httpRes, err := apiClient.LOVApi.GetGridTypesLOV(context.Background(), bookingStatus).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGroupArrivalsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetGroupArrivalsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGuestMessagesMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetGuestMessagesMultiHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetGuestMessagesQuickTextsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetGuestMessagesQuickTextsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHKAttendantsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHKAttendantsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHKAttendantsMobileLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHKAttendantsMobileLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHKScheduledAttendantsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHKScheduledAttendantsLOV(context.Background(), businessDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHKTaskBreakOutLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHKTaskBreakOutLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHKTaskCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHKTaskCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHKTaskSheetsNoLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var breakOutId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHKTaskSheetsNoLOV(context.Background(), breakOutId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHKTaskTemplatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHKTaskTemplatesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHkFloorsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHkFloorsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHkRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHkRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHkRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHkRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHotelContactCommMethodLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHotelContactCommMethodLOV(context.Background(), contactType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHotelEventTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHotelEventTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHotelInterfaceDataLineTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var logo string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHotelInterfaceDataLineTypesLOV(context.Background(), logo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHotelInterfaceImportRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHotelInterfaceImportRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHotelRateTierLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHotelRateTierLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHotelsForARProfileLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVApi.GetHotelsForARProfileLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHotelsForSnCLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringEvents string

		resp, httpRes, err := apiClient.LOVApi.GetHotelsForSnCLOV(context.Background(), cateringEvents).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHouseKeepingRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHouseKeepingRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHouseKeepingSectionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHouseKeepingSectionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetHousekeepingCreditRulesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetHousekeepingCreditRulesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetIfcRightsViewLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var category string
		var ifcId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetIfcRightsViewLOV(context.Background(), category, ifcId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetImbalanceVerificationTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetImbalanceVerificationTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceAutoBalanceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceAutoBalanceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceDataRequestMarketCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceDataRequestMarketCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceDataRequestMarketGroupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceDataRequestMarketGroupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceDataRequestRoomClassLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceDataRequestRoomClassLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceDataRequestRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceDataRequestRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceDataRequestSourceCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceDataRequestSourceCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceDataRequestSourceGroupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceDataRequestSourceGroupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfacePseudoRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfacePseudoRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceResyncFunctionSpaceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceResyncFunctionSpaceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceResyncOwnerContractLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceResyncOwnerContractLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceResyncOwnerContractRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceResyncOwnerContractRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceResyncProductsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceResyncProductsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceRevenueCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var logo string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceRevenueCodeLOV(context.Background(), logo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceTabColumnsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tableName string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceTabColumnsLOV(context.Background(), tableName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceTrxCodesAllChargesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceTrxCodesAllChargesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInterfaceTrxCodesMinibarLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInterfaceTrxCodesMinibarLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInvItemsClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInvItemsClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInvItemsPoolsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInvItemsPoolsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInventoryItemAttributesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInventoryItemAttributesLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInventoryItemRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInventoryItemRatesLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInventoryItemTemplateItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInventoryItemTemplateItemsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetInventoryItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sellInEvent string
		var sellInReservation string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetInventoryItemsLOV(context.Background(), sellInEvent, sellInReservation, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetItemClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetItemClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetItemCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetItemCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetItemPriceCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetItemPriceCodeLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetItemVendorLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetItemVendorLOV(context.Background(), itemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetJobTitlesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetJobTitlesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetKeyOptionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetKeyOptionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetLOVNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LOVApi.GetLOVNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetLicensesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetLicensesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetListOfValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.LOVApi.GetListOfValues(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetLocatorQuickTextsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetLocatorQuickTextsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMailGenericLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceIdIn string

		resp, httpRes, err := apiClient.LOVApi.GetMailGenericLOV(context.Background(), sourceIdIn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetManagerReportDetailsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetManagerReportDetailsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetManagersReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetManagersReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMarketGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMarketGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMarketSegmentLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMarketSegmentLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMasterBlockLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMasterBlockLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipAwardFinTrxLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipAwardFinTrxLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipAwardProductsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipAwardProductsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipAwardRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipAwardRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipAwardUpgradeRoomGroupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipAwardUpgradeRoomGroupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipAwardUpgradeRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipAwardUpgradeRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipBenefitProgramLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipBenefitProgramLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipBenefitsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipBenefitsLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipCardFeeAmountLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipLevel string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipCardFeeAmountLOV(context.Background(), membershipLevel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipClassTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var loyalty string
		var airlines string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipClassTypesLOV(context.Background(), loyalty, airlines).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipMaxDowngradeLevelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string
		var membershipLevelRank string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipMaxDowngradeLevelLOV(context.Background(), membershipType, membershipLevelRank).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipPointsRuleCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipPointsRuleCodesLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipPromotionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipPromotionsLOV(context.Background(), membershipId, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipStatementBatchListLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipStatementBatchListLOV(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipTotalPointsAvailableLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipTotalPointsAvailableLOV(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMembershipTransferPointsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVApi.GetMembershipTransferPointsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMenuClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMenuClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMenuItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetMenuItemsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetMenuLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var menuClassId string

		resp, httpRes, err := apiClient.LOVApi.GetMenuLOV(context.Background(), menuClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetNegotiatedRateHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVApi.GetNegotiatedRateHotelsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetNegotiatedRatesHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var rateCode string

		resp, httpRes, err := apiClient.LOVApi.GetNegotiatedRatesHotelsLOV(context.Background(), profileId, rateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetNoteTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentType string

		resp, httpRes, err := apiClient.LOVApi.GetNoteTypesLOV(context.Background(), departmentType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetOSAActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetOSAActivityTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetOXIInterfaceReferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetOXIInterfaceReferencesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetOXIInterfaceResortsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetOXIInterfaceResortsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetOXIInterfacesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetOXIInterfacesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetOXIResortsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string

		resp, httpRes, err := apiClient.LOVApi.GetOXIResortsLOV(context.Background(), interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetOrganizationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionTask string
		var chainCode string
		var roles string

		resp, httpRes, err := apiClient.LOVApi.GetOrganizationsLOV(context.Background(), actionTask, chainCode, roles).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPackForecastGroupCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPackForecastGroupCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPackageArrangementAssociationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var arrangementCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPackageArrangementAssociationLOV(context.Background(), arrangementCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetParameterActiveUnderChainLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainCode string
		var parameter string

		resp, httpRes, err := apiClient.LOVApi.GetParameterActiveUnderChainLOV(context.Background(), chainCode, parameter).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPaymentMethodsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPaymentMethodsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPaymentTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPaymentTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPeriodSetupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPeriodSetupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPeriodsSetupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPeriodsSetupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPostalCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var country string

		resp, httpRes, err := apiClient.LOVApi.GetPostalCodesLOV(context.Background(), country).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPostingRoomLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPostingRoomLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPostingTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPostingTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPreferenceSubgroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceGroup string
		var chainCode string

		resp, httpRes, err := apiClient.LOVApi.GetPreferenceSubgroupsLOV(context.Background(), preferenceGroup, chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPreferencesMultiHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceGroup string

		resp, httpRes, err := apiClient.LOVApi.GetPreferencesMultiHotelsLOV(context.Background(), preferenceGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPrepaidCardInterfacesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPrepaidCardInterfacesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPrintersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alertPrinters string

		resp, httpRes, err := apiClient.LOVApi.GetPrintersLOV(context.Background(), alertPrinters).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPrioritiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPrioritiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetProfileCommunicationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.LOVApi.GetProfileCommunicationsLOV(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetProfileEnrollmentMatchCriteriaLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameType string

		resp, httpRes, err := apiClient.LOVApi.GetProfileEnrollmentMatchCriteriaLOV(context.Background(), nameType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetProfileEnrollmentRuleDoNotMergeCriteriaLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameType string

		resp, httpRes, err := apiClient.LOVApi.GetProfileEnrollmentRuleDoNotMergeCriteriaLOV(context.Background(), nameType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetProfileEnrollmentRuleFilterCriteriaLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nameType string

		resp, httpRes, err := apiClient.LOVApi.GetProfileEnrollmentRuleFilterCriteriaLOV(context.Background(), nameType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetProfileHotelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxTypeCheck string
		var profileId string

		resp, httpRes, err := apiClient.LOVApi.GetProfileHotelsLOV(context.Background(), taxTypeCheck, profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetProfileIdentificationsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetProfileIdentificationsLOV(context.Background(), profileId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetProfileNameValidationsTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operaParam string

		resp, httpRes, err := apiClient.LOVApi.GetProfileNameValidationsTypeLOV(context.Background(), operaParam).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPromoGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPromoGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPromoRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promoCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPromoRatesLOV(context.Background(), promoCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPropertyAmenitiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetPropertyAmenitiesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetPublisherPropertiesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subscriber string

		resp, httpRes, err := apiClient.LOVApi.GetPublisherPropertiesLOV(context.Background(), subscriber).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetQueueNameLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodeList string

		resp, httpRes, err := apiClient.LOVApi.GetQueueNameLOV(context.Background(), hotelCodeList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetQuickTextsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetQuickTextsLOV(context.Background(), departmentId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRateCategoriesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRateCategoriesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRateCodeGlobalDescEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRateCodeGlobalDescEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRateCodesByTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCodeType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRateCodesByTypeLOV(context.Background(), rateCodeType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRateCodesValidLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRateCodesValidLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRateCommissionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRateCommissionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRateConfigCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRateConfigCurrenciesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRateGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRateGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRatePlanForMassRateLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCodeType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRatePlanForMassRateLOV(context.Background(), rateCodeType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRatePlansForYieldAsConfigLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var rateCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRatePlansForYieldAsConfigLOV(context.Background(), rateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRatePlansLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepBlockCodesParamOffLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepBlockCodesParamOffLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepBlockCodesParamOnLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepBlockCodesParamOnLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepCalendarMonthsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var year string

		resp, httpRes, err := apiClient.LOVApi.GetRepCalendarMonthsLOV(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepCalendarWeeksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var year string

		resp, httpRes, err := apiClient.LOVApi.GetRepCalendarWeeksLOV(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepCalendarYearsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var period string

		resp, httpRes, err := apiClient.LOVApi.GetRepCalendarYearsLOV(context.Background(), period).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepCashiersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepCashiersLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepContactListLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepContactListLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepCurrenciesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepDepartmentsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepDepartmentsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepFiscalMonthsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalYearId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepFiscalMonthsLOV(context.Background(), fiscalYearId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepFiscalWeeksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalYearId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepFiscalWeeksLOV(context.Background(), fiscalYearId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepFiscalYearsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepFiscalYearsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepForeignCurrenciesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepForeignCurrenciesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepGroupReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.LOVApi.GetRepGroupReportsLOV(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepInventoryItemPoolsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepInventoryItemPoolsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepMarketCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepOwnerCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodesList string

		resp, httpRes, err := apiClient.LOVApi.GetRepOwnerCodesLOV(context.Background(), hotelCodesList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepRatePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var propertyList string

		resp, httpRes, err := apiClient.LOVApi.GetRepRatePlansLOV(context.Background(), propertyList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepRoomStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepRoomStatusesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepRoomTypeMultiHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodeList string

		resp, httpRes, err := apiClient.LOVApi.GetRepRoomTypeMultiHotelLOV(context.Background(), hotelCodeList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepRoomsStatLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toDate string
		var fromDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepRoomsStatLOV(context.Background(), toDate, fromDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepServiceRequestCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepServiceRequestCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRepTraveAgtCalendarYearLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRepTraveAgtCalendarYearLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReportsGenericLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var parameter string
		var moduleId string

		resp, httpRes, err := apiClient.LOVApi.GetReportsGenericLOV(context.Background(), parameter, moduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResStatReportRateCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var endDate string
		var beginDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResStatReportRateCodeLOV(context.Background(), endDate, beginDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationBasedBlocksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationBasedBlocksLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationBasedProfilesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationBasedProfilesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationPackagesGroupItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var group string
		var arrival string
		var children string
		var adults string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationPackagesGroupItemsLOV(context.Background(), group, arrival, children, adults, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationPackagesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departure string
		var arrival string
		var children string
		var adults string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationPackagesLOV(context.Background(), departure, arrival, children, adults, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationPreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationPreferencesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationStatusesHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationStatusesHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationTicketsCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departure string
		var arrival string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationTicketsCodesLOV(context.Background(), departure, arrival, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetReservationTicketsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resvNameId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetReservationTicketsLOV(context.Background(), resvNameId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortAirportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortAirportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortCROsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortCROsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortGuaranteeCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortGuaranteeCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortInventoryItemsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sellInEvent string
		var sellInReservation string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortInventoryItemsLOV(context.Background(), sellInEvent, sellInReservation, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortMarketCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortRateClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortRateClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortRestrictionStatusesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortRestrictionStatusesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortRoomNumbersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortRoomNumbersLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResortTransportationLabelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResortTransportationLabelsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResourceItemClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResourceItemClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResvAutoAttachRulesCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResvAutoAttachRulesCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResvAutoAttachRulesRuleTypeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResvAutoAttachRulesRuleTypeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResvBasedProfilesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResvBasedProfilesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetResvTransactionDiversionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resvNameId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetResvTransactionDiversionCodesLOV(context.Background(), resvNameId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRevenueBucketTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRevenueBucketTrxCodesLOV(context.Background(), bucketType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRevenueBucketsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVApi.GetRevenueBucketsLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRevenueTypeMappingSpaceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRevenueTypeMappingSpaceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRevenueTypeMappingTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRevenueTypeMappingTrxCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRolesForLevelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelCode string
		var roleLevel string

		resp, httpRes, err := apiClient.LOVApi.GetRolesForLevelLOV(context.Background(), levelCode, roleLevel).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomClassCategoriesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomClassCategoriesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomClassMultiPropertyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelCodeList string

		resp, httpRes, err := apiClient.LOVApi.GetRoomClassMultiPropertyLOV(context.Background(), hotelCodeList).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomClassesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomFeaturesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomFeaturesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomHierarchyClassesCopyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVApi.GetRoomHierarchyClassesCopyLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomHierarchyRoomClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVApi.GetRoomHierarchyRoomClassesLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomHierarchyRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVApi.GetRoomHierarchyRoomTypesLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomHierarchyTypesCopyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var property string

		resp, httpRes, err := apiClient.LOVApi.GetRoomHierarchyTypesCopyLOV(context.Background(), property).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomHoldConditionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomHoldConditionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomMaintenanceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomMaintenanceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomPoolRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomPool string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomPoolRoomTypesLOV(context.Background(), roomPool, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomPoolsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomPoolsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomRatesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var room string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomRatesLOV(context.Background(), room, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomReservationStatusLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeDayUse string

		resp, httpRes, err := apiClient.LOVApi.GetRoomReservationStatusLOV(context.Background(), includeDayUse).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomRevenueTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomRevenueTrxCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomRotationGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomRotationGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomRotationUnitGradesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomRotationUnitGradesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomSpecialsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomSpecialsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomTypePoolLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomTypePoolLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomTypesForMassRateLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ratePlanCodes string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomTypesForMassRateLOV(context.Background(), ratePlanCodes, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomingListHKRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departure string
		var arrival string
		var roomType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomingListHKRoomsLOV(context.Background(), departure, arrival, roomType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomsKeyGenerationLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomsKeyGenerationLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetRoutingInstructionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetRoutingInstructionsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSalesManagerGoalPeriodLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSalesManagerGoalPeriodLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetScheduledReportsExportLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetScheduledReportsExportLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetScreenCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var screenArea string
		var screenType string
		var chainCode string

		resp, httpRes, err := apiClient.LOVApi.GetScreenCodesLOV(context.Background(), screenArea, screenType, chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetScreenStyleCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var screenCode string
		var chainCode string

		resp, httpRes, err := apiClient.LOVApi.GetScreenStyleCodesLOV(context.Background(), screenCode, chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetServiceNameLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var protocol string
		var outboundType string

		resp, httpRes, err := apiClient.LOVApi.GetServiceNameLOV(context.Background(), protocol, outboundType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetServiceRequestCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetServiceRequestCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSetupStylesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSetupStylesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetShiftReportsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetShiftReportsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetShiftReportsNoParamLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var shiftGroupId string

		resp, httpRes, err := apiClient.LOVApi.GetShiftReportsNoParamLOV(context.Background(), shiftGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSitePlanSectionTypeLinksLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sectionType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSitePlanSectionTypeLinksLOV(context.Background(), sectionType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSitePlanSectionTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteType string

		resp, httpRes, err := apiClient.LOVApi.GetSitePlanSectionTypesLOV(context.Background(), siteType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSitePlansLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var siteType string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSitePlansLOV(context.Background(), siteType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSourceGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSourceGroupsLOV(context.Background(), includeInactive, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSpacesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSpacesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSpecialRequestsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSpecialRequestsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSpecialsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSpecialsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetStageProfilesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var criteria string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetStageProfilesLOV(context.Background(), criteria, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetStagedProfilePreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resortNameId string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetStagedProfilePreferencesLOV(context.Background(), resortNameId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetStatisticsYearsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var year string

		resp, httpRes, err := apiClient.LOVApi.GetStatisticsYearsLOV(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetStoredValueRedeemTrxLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetStoredValueRedeemTrxLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSubBlockLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var superBlock string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSubBlockLOV(context.Background(), superBlock, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSummaryRefreshLogLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSummaryRefreshLogLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetSynchronizeRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetSynchronizeRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTaskBreakOutLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromDate string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTaskBreakOutLOV(context.Background(), fromDate, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTaskSheetDeptLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var levelCode string

		resp, httpRes, err := apiClient.LOVApi.GetTaskSheetDeptLOV(context.Background(), levelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTaskSheetLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var breakOutId string

		resp, httpRes, err := apiClient.LOVApi.GetTaskSheetLOV(context.Background(), breakOutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTaskSheetRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetNo string
		var taskCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTaskSheetRoomsLOV(context.Background(), taskSheetNo, taskCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTaxTransactionCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxCode string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTaxTransactionCodeLOV(context.Background(), taxCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTaxTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTaxTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTelephoneCategoryLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTelephoneCategoryLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateBookingChannelRoomTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingChannelCode string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateBookingChannelRoomTypesLOV(context.Background(), bookingChannelCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateFiscalFolioParametersLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateCode string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateFiscalFolioParametersLOV(context.Background(), templateCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateMarketCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateMarketCodesLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateMarketGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateMarketGroupsLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplatePolicyCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyType string

		resp, httpRes, err := apiClient.LOVApi.GetTemplatePolicyCodesLOV(context.Background(), policyType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplatePreferencesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeGlobals string

		resp, httpRes, err := apiClient.LOVApi.GetTemplatePreferencesLOV(context.Background(), includeGlobals).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateRoomClassesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateRoomClassesLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateSourceCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateSourceCodesLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateSourceGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeInactive string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateSourceGroupsLOV(context.Background(), includeInactive).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTemplateTransactionSubgroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fetchOnlyUniqueValues string

		resp, httpRes, err := apiClient.LOVApi.GetTemplateTransactionSubgroupsLOV(context.Background(), fetchOnlyUniqueValues).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTestUpsellRulesRateCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomCategory string
		var arrivalDate string
		var nights string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTestUpsellRulesRateCodeLOV(context.Background(), roomCategory, arrivalDate, nights, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetToPostalCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var country string

		resp, httpRes, err := apiClient.LOVApi.GetToPostalCodesLOV(context.Background(), country).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTraceDateCalcLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var view string

		resp, httpRes, err := apiClient.LOVApi.GetTraceDateCalcLOV(context.Background(), view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTraceFieldLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var view string

		resp, httpRes, err := apiClient.LOVApi.GetTraceFieldLOV(context.Background(), view).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionAdjustmentReasonCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionAdjustmentReasonCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionCodesConsumptionLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionCodesConsumptionLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionCodesPaymentLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionCodesPaymentLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionDeleteReasonCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionDeleteReasonCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionDiversionRuleRoomsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionDiversionRuleRoomsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransactionSubgroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransactionSubgroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransportTypesHotelLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransportTypesHotelLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTransportTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTransportTypesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTravelAgentSourceLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTravelAgentSourceLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTravelAgentSourceResvLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTravelAgentSourceResvLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTrxCodeArrangementLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.LOVApi.GetTrxCodeArrangementLOV(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetTurnawayCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetTurnawayCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUDFMappingsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moduleName string

		resp, httpRes, err := apiClient.LOVApi.GetUDFMappingsLOV(context.Background(), moduleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUdfAttributesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfCategory string
		var udfType string

		resp, httpRes, err := apiClient.LOVApi.GetUdfAttributesLOV(context.Background(), udfCategory, udfType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellDefaultTrxCodeLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellDefaultTrxCodeLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellFromRoomClassEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellFromRoomClassEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellFromRoomTypeEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellFromRoomTypeEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellHierarchyLevelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellHierarchyLevelsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellMembershipLevelsOnlyLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipType string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellMembershipLevelsOnlyLOV(context.Background(), membershipType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellOccupancyLevelsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var includeBlank string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellOccupancyLevelsLOV(context.Background(), includeBlank, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellRateCategoriesEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellRateCategoriesEditLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellRateCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellRateCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellRoomClassViewLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellRoomClassViewLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellRoomTypeViewLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellRoomTypeViewLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellRuleLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellRuleLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellToRoomClassEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromRoomClass string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellToRoomClassEditLOV(context.Background(), fromRoomClass, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellToRoomTypeEditLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromRoomTypeLabel string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellToRoomTypeEditLOV(context.Background(), fromRoomTypeLabel, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUpsellTrxCodesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUpsellTrxCodesLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUserDbFunctionArgsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var category string
		var functionName string

		resp, httpRes, err := apiClient.LOVApi.GetUserDbFunctionArgsLOV(context.Background(), category, functionName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUserDbFunctionsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var category string

		resp, httpRes, err := apiClient.LOVApi.GetUserDbFunctionsLOV(context.Background(), category).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUserLogActivityGroupsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUserLogActivityGroupsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUserLogActivityTypesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityGroup string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUserLogActivityTypesLOV(context.Background(), activityGroup, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetUserRolesLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleWithDepartment string
		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetUserRolesLOV(context.Background(), roleWithDepartment, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetYearSetupLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetYearSetupLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService GetYieldMarketsLOV", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.LOVApi.GetYieldMarketsLOV(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService PingLOVService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LOVApi.PingLOVService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LOVApiService ValidateListOfValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LOVApi.ValidateListOfValues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
