/*
OPERA Cloud List of Values Management API

APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lov

import (
	"encoding/json"
)

// checks if the ListOfValueNames type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOfValueNames{}

// ListOfValueNames struct for ListOfValueNames
type ListOfValueNames struct {
	// List of List of Value names along with all parameters applicable for the LOV.
	LOVNames []LOVNameType `json:"lOVNames,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewListOfValueNames instantiates a new ListOfValueNames object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOfValueNames() *ListOfValueNames {
	this := ListOfValueNames{}
	return &this
}

// NewListOfValueNamesWithDefaults instantiates a new ListOfValueNames object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOfValueNamesWithDefaults() *ListOfValueNames {
	this := ListOfValueNames{}
	return &this
}

// GetLOVNames returns the LOVNames field value if set, zero value otherwise.
func (o *ListOfValueNames) GetLOVNames() []LOVNameType {
	if o == nil || IsNil(o.LOVNames) {
		var ret []LOVNameType
		return ret
	}
	return o.LOVNames
}

// GetLOVNamesOk returns a tuple with the LOVNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOfValueNames) GetLOVNamesOk() ([]LOVNameType, bool) {
	if o == nil || IsNil(o.LOVNames) {
		return nil, false
	}
	return o.LOVNames, true
}

// HasLOVNames returns a boolean if a field has been set.
func (o *ListOfValueNames) HasLOVNames() bool {
	if o != nil && !IsNil(o.LOVNames) {
		return true
	}

	return false
}

// SetLOVNames gets a reference to the given []LOVNameType and assigns it to the LOVNames field.
func (o *ListOfValueNames) SetLOVNames(v []LOVNameType) {
	o.LOVNames = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ListOfValueNames) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOfValueNames) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ListOfValueNames) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ListOfValueNames) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ListOfValueNames) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOfValueNames) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ListOfValueNames) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ListOfValueNames) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ListOfValueNames) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOfValueNames) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LOVNames) {
		toSerialize["lOVNames"] = o.LOVNames
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableListOfValueNames struct {
	value *ListOfValueNames
	isSet bool
}

func (v NullableListOfValueNames) Get() *ListOfValueNames {
	return v.value
}

func (v *NullableListOfValueNames) Set(val *ListOfValueNames) {
	v.value = val
	v.isSet = true
}

func (v NullableListOfValueNames) IsSet() bool {
	return v.isSet
}

func (v *NullableListOfValueNames) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOfValueNames(val *ListOfValueNames) *NullableListOfValueNames {
	return &NullableListOfValueNames{value: val, isSet: true}
}

func (v NullableListOfValueNames) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOfValueNames) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


