/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the CreateRestrictionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRestrictionType{}

// CreateRestrictionType struct for CreateRestrictionType
type CreateRestrictionType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	// Booking channel on request.
	BookingChannelOnRequest *string `json:"bookingChannelOnRequest,omitempty"`
	// Booking channel.
	BookingChannels []string `json:"bookingChannels,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	Friday *bool `json:"friday,omitempty"`
	// The property to which the restriction is applied.
	HotelId *string `json:"hotelId,omitempty"`
	Monday *bool `json:"monday,omitempty"`
	// The rate class for which the restriction will be applied.
	RateClasses []string `json:"rateClasses,omitempty"`
	// The rate category for which the restriction will be applied.
	RatePlanCategories []string `json:"ratePlanCategories,omitempty"`
	// The rate code for which the restriction will be applied.
	RatePlanCodes []string `json:"ratePlanCodes,omitempty"`
	RestrictionStatus *RestrictionStatusType `json:"restrictionStatus,omitempty"`
	// The room class for which the restriction will be applied.
	RoomClasses []string `json:"roomClasses,omitempty"`
	// The room type for which the restriction will be applied.
	RoomTypes []string `json:"roomTypes,omitempty"`
	Saturday *bool `json:"saturday,omitempty"`
	// The season code during which the restrictions are valid.
	SeasonCode *string `json:"seasonCode,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	Sunday *bool `json:"sunday,omitempty"`
	Thursday *bool `json:"thursday,omitempty"`
	Tuesday *bool `json:"tuesday,omitempty"`
	Wednesday *bool `json:"wednesday,omitempty"`
	YieldStatus *RoomTypeYieldableType `json:"yieldStatus,omitempty"`
}

// NewCreateRestrictionType instantiates a new CreateRestrictionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRestrictionType() *CreateRestrictionType {
	this := CreateRestrictionType{}
	return &this
}

// NewCreateRestrictionTypeWithDefaults instantiates a new CreateRestrictionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRestrictionTypeWithDefaults() *CreateRestrictionType {
	this := CreateRestrictionType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *CreateRestrictionType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetBookingChannelOnRequest returns the BookingChannelOnRequest field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetBookingChannelOnRequest() string {
	if o == nil || IsNil(o.BookingChannelOnRequest) {
		var ret string
		return ret
	}
	return *o.BookingChannelOnRequest
}

// GetBookingChannelOnRequestOk returns a tuple with the BookingChannelOnRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetBookingChannelOnRequestOk() (*string, bool) {
	if o == nil || IsNil(o.BookingChannelOnRequest) {
		return nil, false
	}
	return o.BookingChannelOnRequest, true
}

// HasBookingChannelOnRequest returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasBookingChannelOnRequest() bool {
	if o != nil && !IsNil(o.BookingChannelOnRequest) {
		return true
	}

	return false
}

// SetBookingChannelOnRequest gets a reference to the given string and assigns it to the BookingChannelOnRequest field.
func (o *CreateRestrictionType) SetBookingChannelOnRequest(v string) {
	o.BookingChannelOnRequest = &v
}

// GetBookingChannels returns the BookingChannels field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetBookingChannels() []string {
	if o == nil || IsNil(o.BookingChannels) {
		var ret []string
		return ret
	}
	return o.BookingChannels
}

// GetBookingChannelsOk returns a tuple with the BookingChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetBookingChannelsOk() ([]string, bool) {
	if o == nil || IsNil(o.BookingChannels) {
		return nil, false
	}
	return o.BookingChannels, true
}

// HasBookingChannels returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasBookingChannels() bool {
	if o != nil && !IsNil(o.BookingChannels) {
		return true
	}

	return false
}

// SetBookingChannels gets a reference to the given []string and assigns it to the BookingChannels field.
func (o *CreateRestrictionType) SetBookingChannels(v []string) {
	o.BookingChannels = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *CreateRestrictionType) SetEnd(v string) {
	o.End = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetFriday() bool {
	if o == nil || IsNil(o.Friday) {
		var ret bool
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetFridayOk() (*bool, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given bool and assigns it to the Friday field.
func (o *CreateRestrictionType) SetFriday(v bool) {
	o.Friday = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CreateRestrictionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetMonday() bool {
	if o == nil || IsNil(o.Monday) {
		var ret bool
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetMondayOk() (*bool, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given bool and assigns it to the Monday field.
func (o *CreateRestrictionType) SetMonday(v bool) {
	o.Monday = &v
}

// GetRateClasses returns the RateClasses field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetRateClasses() []string {
	if o == nil || IsNil(o.RateClasses) {
		var ret []string
		return ret
	}
	return o.RateClasses
}

// GetRateClassesOk returns a tuple with the RateClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetRateClassesOk() ([]string, bool) {
	if o == nil || IsNil(o.RateClasses) {
		return nil, false
	}
	return o.RateClasses, true
}

// HasRateClasses returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasRateClasses() bool {
	if o != nil && !IsNil(o.RateClasses) {
		return true
	}

	return false
}

// SetRateClasses gets a reference to the given []string and assigns it to the RateClasses field.
func (o *CreateRestrictionType) SetRateClasses(v []string) {
	o.RateClasses = v
}

// GetRatePlanCategories returns the RatePlanCategories field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetRatePlanCategories() []string {
	if o == nil || IsNil(o.RatePlanCategories) {
		var ret []string
		return ret
	}
	return o.RatePlanCategories
}

// GetRatePlanCategoriesOk returns a tuple with the RatePlanCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetRatePlanCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlanCategories) {
		return nil, false
	}
	return o.RatePlanCategories, true
}

// HasRatePlanCategories returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasRatePlanCategories() bool {
	if o != nil && !IsNil(o.RatePlanCategories) {
		return true
	}

	return false
}

// SetRatePlanCategories gets a reference to the given []string and assigns it to the RatePlanCategories field.
func (o *CreateRestrictionType) SetRatePlanCategories(v []string) {
	o.RatePlanCategories = v
}

// GetRatePlanCodes returns the RatePlanCodes field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetRatePlanCodes() []string {
	if o == nil || IsNil(o.RatePlanCodes) {
		var ret []string
		return ret
	}
	return o.RatePlanCodes
}

// GetRatePlanCodesOk returns a tuple with the RatePlanCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetRatePlanCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlanCodes) {
		return nil, false
	}
	return o.RatePlanCodes, true
}

// HasRatePlanCodes returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasRatePlanCodes() bool {
	if o != nil && !IsNil(o.RatePlanCodes) {
		return true
	}

	return false
}

// SetRatePlanCodes gets a reference to the given []string and assigns it to the RatePlanCodes field.
func (o *CreateRestrictionType) SetRatePlanCodes(v []string) {
	o.RatePlanCodes = v
}

// GetRestrictionStatus returns the RestrictionStatus field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetRestrictionStatus() RestrictionStatusType {
	if o == nil || IsNil(o.RestrictionStatus) {
		var ret RestrictionStatusType
		return ret
	}
	return *o.RestrictionStatus
}

// GetRestrictionStatusOk returns a tuple with the RestrictionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetRestrictionStatusOk() (*RestrictionStatusType, bool) {
	if o == nil || IsNil(o.RestrictionStatus) {
		return nil, false
	}
	return o.RestrictionStatus, true
}

// HasRestrictionStatus returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasRestrictionStatus() bool {
	if o != nil && !IsNil(o.RestrictionStatus) {
		return true
	}

	return false
}

// SetRestrictionStatus gets a reference to the given RestrictionStatusType and assigns it to the RestrictionStatus field.
func (o *CreateRestrictionType) SetRestrictionStatus(v RestrictionStatusType) {
	o.RestrictionStatus = &v
}

// GetRoomClasses returns the RoomClasses field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetRoomClasses() []string {
	if o == nil || IsNil(o.RoomClasses) {
		var ret []string
		return ret
	}
	return o.RoomClasses
}

// GetRoomClassesOk returns a tuple with the RoomClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetRoomClassesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomClasses) {
		return nil, false
	}
	return o.RoomClasses, true
}

// HasRoomClasses returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasRoomClasses() bool {
	if o != nil && !IsNil(o.RoomClasses) {
		return true
	}

	return false
}

// SetRoomClasses gets a reference to the given []string and assigns it to the RoomClasses field.
func (o *CreateRestrictionType) SetRoomClasses(v []string) {
	o.RoomClasses = v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *CreateRestrictionType) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetSaturday() bool {
	if o == nil || IsNil(o.Saturday) {
		var ret bool
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetSaturdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given bool and assigns it to the Saturday field.
func (o *CreateRestrictionType) SetSaturday(v bool) {
	o.Saturday = &v
}

// GetSeasonCode returns the SeasonCode field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetSeasonCode() string {
	if o == nil || IsNil(o.SeasonCode) {
		var ret string
		return ret
	}
	return *o.SeasonCode
}

// GetSeasonCodeOk returns a tuple with the SeasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetSeasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonCode) {
		return nil, false
	}
	return o.SeasonCode, true
}

// HasSeasonCode returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasSeasonCode() bool {
	if o != nil && !IsNil(o.SeasonCode) {
		return true
	}

	return false
}

// SetSeasonCode gets a reference to the given string and assigns it to the SeasonCode field.
func (o *CreateRestrictionType) SetSeasonCode(v string) {
	o.SeasonCode = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *CreateRestrictionType) SetStart(v string) {
	o.Start = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetSunday() bool {
	if o == nil || IsNil(o.Sunday) {
		var ret bool
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetSundayOk() (*bool, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given bool and assigns it to the Sunday field.
func (o *CreateRestrictionType) SetSunday(v bool) {
	o.Sunday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetThursday() bool {
	if o == nil || IsNil(o.Thursday) {
		var ret bool
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetThursdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given bool and assigns it to the Thursday field.
func (o *CreateRestrictionType) SetThursday(v bool) {
	o.Thursday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetTuesday() bool {
	if o == nil || IsNil(o.Tuesday) {
		var ret bool
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetTuesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given bool and assigns it to the Tuesday field.
func (o *CreateRestrictionType) SetTuesday(v bool) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetWednesday() bool {
	if o == nil || IsNil(o.Wednesday) {
		var ret bool
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetWednesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given bool and assigns it to the Wednesday field.
func (o *CreateRestrictionType) SetWednesday(v bool) {
	o.Wednesday = &v
}

// GetYieldStatus returns the YieldStatus field value if set, zero value otherwise.
func (o *CreateRestrictionType) GetYieldStatus() RoomTypeYieldableType {
	if o == nil || IsNil(o.YieldStatus) {
		var ret RoomTypeYieldableType
		return ret
	}
	return *o.YieldStatus
}

// GetYieldStatusOk returns a tuple with the YieldStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictionType) GetYieldStatusOk() (*RoomTypeYieldableType, bool) {
	if o == nil || IsNil(o.YieldStatus) {
		return nil, false
	}
	return o.YieldStatus, true
}

// HasYieldStatus returns a boolean if a field has been set.
func (o *CreateRestrictionType) HasYieldStatus() bool {
	if o != nil && !IsNil(o.YieldStatus) {
		return true
	}

	return false
}

// SetYieldStatus gets a reference to the given RoomTypeYieldableType and assigns it to the YieldStatus field.
func (o *CreateRestrictionType) SetYieldStatus(v RoomTypeYieldableType) {
	o.YieldStatus = &v
}

func (o CreateRestrictionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRestrictionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.BookingChannelOnRequest) {
		toSerialize["bookingChannelOnRequest"] = o.BookingChannelOnRequest
	}
	if !IsNil(o.BookingChannels) {
		toSerialize["bookingChannels"] = o.BookingChannels
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.RateClasses) {
		toSerialize["rateClasses"] = o.RateClasses
	}
	if !IsNil(o.RatePlanCategories) {
		toSerialize["ratePlanCategories"] = o.RatePlanCategories
	}
	if !IsNil(o.RatePlanCodes) {
		toSerialize["ratePlanCodes"] = o.RatePlanCodes
	}
	if !IsNil(o.RestrictionStatus) {
		toSerialize["restrictionStatus"] = o.RestrictionStatus
	}
	if !IsNil(o.RoomClasses) {
		toSerialize["roomClasses"] = o.RoomClasses
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	if !IsNil(o.SeasonCode) {
		toSerialize["seasonCode"] = o.SeasonCode
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}
	if !IsNil(o.YieldStatus) {
		toSerialize["yieldStatus"] = o.YieldStatus
	}
	return toSerialize, nil
}

type NullableCreateRestrictionType struct {
	value *CreateRestrictionType
	isSet bool
}

func (v NullableCreateRestrictionType) Get() *CreateRestrictionType {
	return v.value
}

func (v *NullableCreateRestrictionType) Set(val *CreateRestrictionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRestrictionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRestrictionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRestrictionType(val *CreateRestrictionType) *NullableCreateRestrictionType {
	return &NullableCreateRestrictionType{value: val, isSet: true}
}

func (v NullableCreateRestrictionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRestrictionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


