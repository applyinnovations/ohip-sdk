/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the PrimaryCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrimaryCodeType{}

// PrimaryCodeType Primary flag with code and description.
type PrimaryCodeType struct {
	CodeDescription *CodeDescriptionType `json:"codeDescription,omitempty"`
	Primary *bool `json:"primary,omitempty"`
}

// NewPrimaryCodeType instantiates a new PrimaryCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimaryCodeType() *PrimaryCodeType {
	this := PrimaryCodeType{}
	return &this
}

// NewPrimaryCodeTypeWithDefaults instantiates a new PrimaryCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimaryCodeTypeWithDefaults() *PrimaryCodeType {
	this := PrimaryCodeType{}
	return &this
}

// GetCodeDescription returns the CodeDescription field value if set, zero value otherwise.
func (o *PrimaryCodeType) GetCodeDescription() CodeDescriptionType {
	if o == nil || IsNil(o.CodeDescription) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.CodeDescription
}

// GetCodeDescriptionOk returns a tuple with the CodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryCodeType) GetCodeDescriptionOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.CodeDescription) {
		return nil, false
	}
	return o.CodeDescription, true
}

// HasCodeDescription returns a boolean if a field has been set.
func (o *PrimaryCodeType) HasCodeDescription() bool {
	if o != nil && !IsNil(o.CodeDescription) {
		return true
	}

	return false
}

// SetCodeDescription gets a reference to the given CodeDescriptionType and assigns it to the CodeDescription field.
func (o *PrimaryCodeType) SetCodeDescription(v CodeDescriptionType) {
	o.CodeDescription = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *PrimaryCodeType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryCodeType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *PrimaryCodeType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *PrimaryCodeType) SetPrimary(v bool) {
	o.Primary = &v
}

func (o PrimaryCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrimaryCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeDescription) {
		toSerialize["codeDescription"] = o.CodeDescription
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	return toSerialize, nil
}

type NullablePrimaryCodeType struct {
	value *PrimaryCodeType
	isSet bool
}

func (v NullablePrimaryCodeType) Get() *PrimaryCodeType {
	return v.value
}

func (v *NullablePrimaryCodeType) Set(val *PrimaryCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimaryCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimaryCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimaryCodeType(val *PrimaryCodeType) *NullablePrimaryCodeType {
	return &NullablePrimaryCodeType{value: val, isSet: true}
}

func (v NullablePrimaryCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimaryCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


