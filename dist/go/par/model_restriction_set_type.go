/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the RestrictionSetType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestrictionSetType{}

// RestrictionSetType Indicates Restriction set applicable for the date range.
type RestrictionSetType struct {
	RestrictionControl *RestrictionControlType `json:"restrictionControl,omitempty"`
	RestrictionStatus *RestrictionStatusType `json:"restrictionStatus,omitempty"`
	ActualTimeSpan *TimeSpanType `json:"actualTimeSpan,omitempty"`
	// Indicates whether the Closed restriction is flagged as On Request.
	OnRequest *bool `json:"onRequest,omitempty"`
	// Indicates the action performed on restriction
	ActionType *string `json:"actionType,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	Sunday *bool `json:"sunday,omitempty"`
	Monday *bool `json:"monday,omitempty"`
	Tuesday *bool `json:"tuesday,omitempty"`
	Wednesday *bool `json:"wednesday,omitempty"`
	Thursday *bool `json:"thursday,omitempty"`
	Friday *bool `json:"friday,omitempty"`
	Saturday *bool `json:"saturday,omitempty"`
}

// NewRestrictionSetType instantiates a new RestrictionSetType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictionSetType() *RestrictionSetType {
	this := RestrictionSetType{}
	return &this
}

// NewRestrictionSetTypeWithDefaults instantiates a new RestrictionSetType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictionSetTypeWithDefaults() *RestrictionSetType {
	this := RestrictionSetType{}
	return &this
}

// GetRestrictionControl returns the RestrictionControl field value if set, zero value otherwise.
func (o *RestrictionSetType) GetRestrictionControl() RestrictionControlType {
	if o == nil || IsNil(o.RestrictionControl) {
		var ret RestrictionControlType
		return ret
	}
	return *o.RestrictionControl
}

// GetRestrictionControlOk returns a tuple with the RestrictionControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetRestrictionControlOk() (*RestrictionControlType, bool) {
	if o == nil || IsNil(o.RestrictionControl) {
		return nil, false
	}
	return o.RestrictionControl, true
}

// HasRestrictionControl returns a boolean if a field has been set.
func (o *RestrictionSetType) HasRestrictionControl() bool {
	if o != nil && !IsNil(o.RestrictionControl) {
		return true
	}

	return false
}

// SetRestrictionControl gets a reference to the given RestrictionControlType and assigns it to the RestrictionControl field.
func (o *RestrictionSetType) SetRestrictionControl(v RestrictionControlType) {
	o.RestrictionControl = &v
}

// GetRestrictionStatus returns the RestrictionStatus field value if set, zero value otherwise.
func (o *RestrictionSetType) GetRestrictionStatus() RestrictionStatusType {
	if o == nil || IsNil(o.RestrictionStatus) {
		var ret RestrictionStatusType
		return ret
	}
	return *o.RestrictionStatus
}

// GetRestrictionStatusOk returns a tuple with the RestrictionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetRestrictionStatusOk() (*RestrictionStatusType, bool) {
	if o == nil || IsNil(o.RestrictionStatus) {
		return nil, false
	}
	return o.RestrictionStatus, true
}

// HasRestrictionStatus returns a boolean if a field has been set.
func (o *RestrictionSetType) HasRestrictionStatus() bool {
	if o != nil && !IsNil(o.RestrictionStatus) {
		return true
	}

	return false
}

// SetRestrictionStatus gets a reference to the given RestrictionStatusType and assigns it to the RestrictionStatus field.
func (o *RestrictionSetType) SetRestrictionStatus(v RestrictionStatusType) {
	o.RestrictionStatus = &v
}

// GetActualTimeSpan returns the ActualTimeSpan field value if set, zero value otherwise.
func (o *RestrictionSetType) GetActualTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.ActualTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.ActualTimeSpan
}

// GetActualTimeSpanOk returns a tuple with the ActualTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetActualTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.ActualTimeSpan) {
		return nil, false
	}
	return o.ActualTimeSpan, true
}

// HasActualTimeSpan returns a boolean if a field has been set.
func (o *RestrictionSetType) HasActualTimeSpan() bool {
	if o != nil && !IsNil(o.ActualTimeSpan) {
		return true
	}

	return false
}

// SetActualTimeSpan gets a reference to the given TimeSpanType and assigns it to the ActualTimeSpan field.
func (o *RestrictionSetType) SetActualTimeSpan(v TimeSpanType) {
	o.ActualTimeSpan = &v
}

// GetOnRequest returns the OnRequest field value if set, zero value otherwise.
func (o *RestrictionSetType) GetOnRequest() bool {
	if o == nil || IsNil(o.OnRequest) {
		var ret bool
		return ret
	}
	return *o.OnRequest
}

// GetOnRequestOk returns a tuple with the OnRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetOnRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.OnRequest) {
		return nil, false
	}
	return o.OnRequest, true
}

// HasOnRequest returns a boolean if a field has been set.
func (o *RestrictionSetType) HasOnRequest() bool {
	if o != nil && !IsNil(o.OnRequest) {
		return true
	}

	return false
}

// SetOnRequest gets a reference to the given bool and assigns it to the OnRequest field.
func (o *RestrictionSetType) SetOnRequest(v bool) {
	o.OnRequest = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *RestrictionSetType) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *RestrictionSetType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *RestrictionSetType) SetActionType(v string) {
	o.ActionType = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *RestrictionSetType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *RestrictionSetType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *RestrictionSetType) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *RestrictionSetType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *RestrictionSetType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *RestrictionSetType) SetEnd(v string) {
	o.End = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *RestrictionSetType) GetSunday() bool {
	if o == nil || IsNil(o.Sunday) {
		var ret bool
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetSundayOk() (*bool, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *RestrictionSetType) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given bool and assigns it to the Sunday field.
func (o *RestrictionSetType) SetSunday(v bool) {
	o.Sunday = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *RestrictionSetType) GetMonday() bool {
	if o == nil || IsNil(o.Monday) {
		var ret bool
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetMondayOk() (*bool, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *RestrictionSetType) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given bool and assigns it to the Monday field.
func (o *RestrictionSetType) SetMonday(v bool) {
	o.Monday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *RestrictionSetType) GetTuesday() bool {
	if o == nil || IsNil(o.Tuesday) {
		var ret bool
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetTuesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *RestrictionSetType) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given bool and assigns it to the Tuesday field.
func (o *RestrictionSetType) SetTuesday(v bool) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *RestrictionSetType) GetWednesday() bool {
	if o == nil || IsNil(o.Wednesday) {
		var ret bool
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetWednesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *RestrictionSetType) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given bool and assigns it to the Wednesday field.
func (o *RestrictionSetType) SetWednesday(v bool) {
	o.Wednesday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *RestrictionSetType) GetThursday() bool {
	if o == nil || IsNil(o.Thursday) {
		var ret bool
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetThursdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *RestrictionSetType) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given bool and assigns it to the Thursday field.
func (o *RestrictionSetType) SetThursday(v bool) {
	o.Thursday = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *RestrictionSetType) GetFriday() bool {
	if o == nil || IsNil(o.Friday) {
		var ret bool
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetFridayOk() (*bool, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *RestrictionSetType) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given bool and assigns it to the Friday field.
func (o *RestrictionSetType) SetFriday(v bool) {
	o.Friday = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *RestrictionSetType) GetSaturday() bool {
	if o == nil || IsNil(o.Saturday) {
		var ret bool
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetType) GetSaturdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *RestrictionSetType) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given bool and assigns it to the Saturday field.
func (o *RestrictionSetType) SetSaturday(v bool) {
	o.Saturday = &v
}

func (o RestrictionSetType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestrictionSetType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RestrictionControl) {
		toSerialize["restrictionControl"] = o.RestrictionControl
	}
	if !IsNil(o.RestrictionStatus) {
		toSerialize["restrictionStatus"] = o.RestrictionStatus
	}
	if !IsNil(o.ActualTimeSpan) {
		toSerialize["actualTimeSpan"] = o.ActualTimeSpan
	}
	if !IsNil(o.OnRequest) {
		toSerialize["onRequest"] = o.OnRequest
	}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	return toSerialize, nil
}

type NullableRestrictionSetType struct {
	value *RestrictionSetType
	isSet bool
}

func (v NullableRestrictionSetType) Get() *RestrictionSetType {
	return v.value
}

func (v *NullableRestrictionSetType) Set(val *RestrictionSetType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictionSetType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictionSetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictionSetType(val *RestrictionSetType) *NullableRestrictionSetType {
	return &NullableRestrictionSetType{value: val, isSet: true}
}

func (v NullableRestrictionSetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictionSetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


