/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the RestrictionsHistoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestrictionsHistoryType{}

// RestrictionsHistoryType Restriction history for the requested Hotel.
type RestrictionsHistoryType struct {
	// Restriction set for a date range.
	RestrictionSets []RestrictionSetHistoryType `json:"restrictionSets,omitempty"`
	// The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
	ChainCode *string `json:"chainCode,omitempty"`
	// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
	HotelId *string `json:"hotelId,omitempty"`
	// The IATA city code; for example DCA, ORD.
	HotelCityCode *string `json:"hotelCityCode,omitempty"`
	// A text field used to communicate the proper name of the hotel.
	HotelName *string `json:"hotelName,omitempty"`
	// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
	HotelCodeContext *string `json:"hotelCodeContext,omitempty"`
	// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
	ChainName *string `json:"chainName,omitempty"`
}

// NewRestrictionsHistoryType instantiates a new RestrictionsHistoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictionsHistoryType() *RestrictionsHistoryType {
	this := RestrictionsHistoryType{}
	return &this
}

// NewRestrictionsHistoryTypeWithDefaults instantiates a new RestrictionsHistoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictionsHistoryTypeWithDefaults() *RestrictionsHistoryType {
	this := RestrictionsHistoryType{}
	return &this
}

// GetRestrictionSets returns the RestrictionSets field value if set, zero value otherwise.
func (o *RestrictionsHistoryType) GetRestrictionSets() []RestrictionSetHistoryType {
	if o == nil || IsNil(o.RestrictionSets) {
		var ret []RestrictionSetHistoryType
		return ret
	}
	return o.RestrictionSets
}

// GetRestrictionSetsOk returns a tuple with the RestrictionSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionsHistoryType) GetRestrictionSetsOk() ([]RestrictionSetHistoryType, bool) {
	if o == nil || IsNil(o.RestrictionSets) {
		return nil, false
	}
	return o.RestrictionSets, true
}

// HasRestrictionSets returns a boolean if a field has been set.
func (o *RestrictionsHistoryType) HasRestrictionSets() bool {
	if o != nil && !IsNil(o.RestrictionSets) {
		return true
	}

	return false
}

// SetRestrictionSets gets a reference to the given []RestrictionSetHistoryType and assigns it to the RestrictionSets field.
func (o *RestrictionsHistoryType) SetRestrictionSets(v []RestrictionSetHistoryType) {
	o.RestrictionSets = v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *RestrictionsHistoryType) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionsHistoryType) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *RestrictionsHistoryType) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *RestrictionsHistoryType) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RestrictionsHistoryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionsHistoryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RestrictionsHistoryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RestrictionsHistoryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHotelCityCode returns the HotelCityCode field value if set, zero value otherwise.
func (o *RestrictionsHistoryType) GetHotelCityCode() string {
	if o == nil || IsNil(o.HotelCityCode) {
		var ret string
		return ret
	}
	return *o.HotelCityCode
}

// GetHotelCityCodeOk returns a tuple with the HotelCityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionsHistoryType) GetHotelCityCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCityCode) {
		return nil, false
	}
	return o.HotelCityCode, true
}

// HasHotelCityCode returns a boolean if a field has been set.
func (o *RestrictionsHistoryType) HasHotelCityCode() bool {
	if o != nil && !IsNil(o.HotelCityCode) {
		return true
	}

	return false
}

// SetHotelCityCode gets a reference to the given string and assigns it to the HotelCityCode field.
func (o *RestrictionsHistoryType) SetHotelCityCode(v string) {
	o.HotelCityCode = &v
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *RestrictionsHistoryType) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionsHistoryType) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *RestrictionsHistoryType) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *RestrictionsHistoryType) SetHotelName(v string) {
	o.HotelName = &v
}

// GetHotelCodeContext returns the HotelCodeContext field value if set, zero value otherwise.
func (o *RestrictionsHistoryType) GetHotelCodeContext() string {
	if o == nil || IsNil(o.HotelCodeContext) {
		var ret string
		return ret
	}
	return *o.HotelCodeContext
}

// GetHotelCodeContextOk returns a tuple with the HotelCodeContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionsHistoryType) GetHotelCodeContextOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCodeContext) {
		return nil, false
	}
	return o.HotelCodeContext, true
}

// HasHotelCodeContext returns a boolean if a field has been set.
func (o *RestrictionsHistoryType) HasHotelCodeContext() bool {
	if o != nil && !IsNil(o.HotelCodeContext) {
		return true
	}

	return false
}

// SetHotelCodeContext gets a reference to the given string and assigns it to the HotelCodeContext field.
func (o *RestrictionsHistoryType) SetHotelCodeContext(v string) {
	o.HotelCodeContext = &v
}

// GetChainName returns the ChainName field value if set, zero value otherwise.
func (o *RestrictionsHistoryType) GetChainName() string {
	if o == nil || IsNil(o.ChainName) {
		var ret string
		return ret
	}
	return *o.ChainName
}

// GetChainNameOk returns a tuple with the ChainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionsHistoryType) GetChainNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChainName) {
		return nil, false
	}
	return o.ChainName, true
}

// HasChainName returns a boolean if a field has been set.
func (o *RestrictionsHistoryType) HasChainName() bool {
	if o != nil && !IsNil(o.ChainName) {
		return true
	}

	return false
}

// SetChainName gets a reference to the given string and assigns it to the ChainName field.
func (o *RestrictionsHistoryType) SetChainName(v string) {
	o.ChainName = &v
}

func (o RestrictionsHistoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestrictionsHistoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RestrictionSets) {
		toSerialize["restrictionSets"] = o.RestrictionSets
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HotelCityCode) {
		toSerialize["hotelCityCode"] = o.HotelCityCode
	}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.HotelCodeContext) {
		toSerialize["hotelCodeContext"] = o.HotelCodeContext
	}
	if !IsNil(o.ChainName) {
		toSerialize["chainName"] = o.ChainName
	}
	return toSerialize, nil
}

type NullableRestrictionsHistoryType struct {
	value *RestrictionsHistoryType
	isSet bool
}

func (v NullableRestrictionsHistoryType) Get() *RestrictionsHistoryType {
	return v.value
}

func (v *NullableRestrictionsHistoryType) Set(val *RestrictionsHistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictionsHistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictionsHistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictionsHistoryType(val *RestrictionsHistoryType) *NullableRestrictionsHistoryType {
	return &NullableRestrictionsHistoryType{value: val, isSet: true}
}

func (v NullableRestrictionsHistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictionsHistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


