/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the RoomStaySearchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomStaySearchType{}

// RoomStaySearchType struct for RoomStaySearchType
type RoomStaySearchType struct {
	GuestCounts *GuestCountsType `json:"guestCounts,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewRoomStaySearchType instantiates a new RoomStaySearchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomStaySearchType() *RoomStaySearchType {
	this := RoomStaySearchType{}
	return &this
}

// NewRoomStaySearchTypeWithDefaults instantiates a new RoomStaySearchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomStaySearchTypeWithDefaults() *RoomStaySearchType {
	this := RoomStaySearchType{}
	return &this
}

// GetGuestCounts returns the GuestCounts field value if set, zero value otherwise.
func (o *RoomStaySearchType) GetGuestCounts() GuestCountsType {
	if o == nil || IsNil(o.GuestCounts) {
		var ret GuestCountsType
		return ret
	}
	return *o.GuestCounts
}

// GetGuestCountsOk returns a tuple with the GuestCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStaySearchType) GetGuestCountsOk() (*GuestCountsType, bool) {
	if o == nil || IsNil(o.GuestCounts) {
		return nil, false
	}
	return o.GuestCounts, true
}

// HasGuestCounts returns a boolean if a field has been set.
func (o *RoomStaySearchType) HasGuestCounts() bool {
	if o != nil && !IsNil(o.GuestCounts) {
		return true
	}

	return false
}

// SetGuestCounts gets a reference to the given GuestCountsType and assigns it to the GuestCounts field.
func (o *RoomStaySearchType) SetGuestCounts(v GuestCountsType) {
	o.GuestCounts = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *RoomStaySearchType) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStaySearchType) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *RoomStaySearchType) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *RoomStaySearchType) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *RoomStaySearchType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStaySearchType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *RoomStaySearchType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *RoomStaySearchType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o RoomStaySearchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomStaySearchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GuestCounts) {
		toSerialize["guestCounts"] = o.GuestCounts
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableRoomStaySearchType struct {
	value *RoomStaySearchType
	isSet bool
}

func (v NullableRoomStaySearchType) Get() *RoomStaySearchType {
	return v.value
}

func (v *NullableRoomStaySearchType) Set(val *RoomStaySearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomStaySearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomStaySearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomStaySearchType(val *RoomStaySearchType) *NullableRoomStaySearchType {
	return &NullableRoomStaySearchType{value: val, isSet: true}
}

func (v NullableRoomStaySearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomStaySearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


