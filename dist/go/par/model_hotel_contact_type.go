/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the HotelContactType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelContactType{}

// HotelContactType Contact identification details.
type HotelContactType struct {
	NameId *UniqueIDType `json:"nameId,omitempty"`
	// The code of the hotel.
	HotelId *string `json:"hotelId,omitempty"`
	// Name of the hotel contact.
	Name *string `json:"name,omitempty"`
	// Lists of HotelContactRoles of the hotel.
	Roles []HotelContactRoleType `json:"roles,omitempty"`
	// The contact's code in the hotel.
	OwnerCode *string `json:"ownerCode,omitempty"`
	// The preferred method of communication for the contact.
	CommunicationMethod *string `json:"communicationMethod,omitempty"`
	// Details about the preferred communication method. Example: email address, fax number, etc.
	CommunicationAddress *string `json:"communicationAddress,omitempty"`
	// Primary flag.
	Primary *bool `json:"primary,omitempty"`
}

// NewHotelContactType instantiates a new HotelContactType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelContactType() *HotelContactType {
	this := HotelContactType{}
	return &this
}

// NewHotelContactTypeWithDefaults instantiates a new HotelContactType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelContactTypeWithDefaults() *HotelContactType {
	this := HotelContactType{}
	return &this
}

// GetNameId returns the NameId field value if set, zero value otherwise.
func (o *HotelContactType) GetNameId() UniqueIDType {
	if o == nil || IsNil(o.NameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.NameId
}

// GetNameIdOk returns a tuple with the NameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.NameId) {
		return nil, false
	}
	return o.NameId, true
}

// HasNameId returns a boolean if a field has been set.
func (o *HotelContactType) HasNameId() bool {
	if o != nil && !IsNil(o.NameId) {
		return true
	}

	return false
}

// SetNameId gets a reference to the given UniqueIDType and assigns it to the NameId field.
func (o *HotelContactType) SetNameId(v UniqueIDType) {
	o.NameId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelContactType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelContactType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelContactType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HotelContactType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HotelContactType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HotelContactType) SetName(v string) {
	o.Name = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *HotelContactType) GetRoles() []HotelContactRoleType {
	if o == nil || IsNil(o.Roles) {
		var ret []HotelContactRoleType
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetRolesOk() ([]HotelContactRoleType, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *HotelContactType) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []HotelContactRoleType and assigns it to the Roles field.
func (o *HotelContactType) SetRoles(v []HotelContactRoleType) {
	o.Roles = v
}

// GetOwnerCode returns the OwnerCode field value if set, zero value otherwise.
func (o *HotelContactType) GetOwnerCode() string {
	if o == nil || IsNil(o.OwnerCode) {
		var ret string
		return ret
	}
	return *o.OwnerCode
}

// GetOwnerCodeOk returns a tuple with the OwnerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetOwnerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerCode) {
		return nil, false
	}
	return o.OwnerCode, true
}

// HasOwnerCode returns a boolean if a field has been set.
func (o *HotelContactType) HasOwnerCode() bool {
	if o != nil && !IsNil(o.OwnerCode) {
		return true
	}

	return false
}

// SetOwnerCode gets a reference to the given string and assigns it to the OwnerCode field.
func (o *HotelContactType) SetOwnerCode(v string) {
	o.OwnerCode = &v
}

// GetCommunicationMethod returns the CommunicationMethod field value if set, zero value otherwise.
func (o *HotelContactType) GetCommunicationMethod() string {
	if o == nil || IsNil(o.CommunicationMethod) {
		var ret string
		return ret
	}
	return *o.CommunicationMethod
}

// GetCommunicationMethodOk returns a tuple with the CommunicationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetCommunicationMethodOk() (*string, bool) {
	if o == nil || IsNil(o.CommunicationMethod) {
		return nil, false
	}
	return o.CommunicationMethod, true
}

// HasCommunicationMethod returns a boolean if a field has been set.
func (o *HotelContactType) HasCommunicationMethod() bool {
	if o != nil && !IsNil(o.CommunicationMethod) {
		return true
	}

	return false
}

// SetCommunicationMethod gets a reference to the given string and assigns it to the CommunicationMethod field.
func (o *HotelContactType) SetCommunicationMethod(v string) {
	o.CommunicationMethod = &v
}

// GetCommunicationAddress returns the CommunicationAddress field value if set, zero value otherwise.
func (o *HotelContactType) GetCommunicationAddress() string {
	if o == nil || IsNil(o.CommunicationAddress) {
		var ret string
		return ret
	}
	return *o.CommunicationAddress
}

// GetCommunicationAddressOk returns a tuple with the CommunicationAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetCommunicationAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CommunicationAddress) {
		return nil, false
	}
	return o.CommunicationAddress, true
}

// HasCommunicationAddress returns a boolean if a field has been set.
func (o *HotelContactType) HasCommunicationAddress() bool {
	if o != nil && !IsNil(o.CommunicationAddress) {
		return true
	}

	return false
}

// SetCommunicationAddress gets a reference to the given string and assigns it to the CommunicationAddress field.
func (o *HotelContactType) SetCommunicationAddress(v string) {
	o.CommunicationAddress = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *HotelContactType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelContactType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *HotelContactType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *HotelContactType) SetPrimary(v bool) {
	o.Primary = &v
}

func (o HotelContactType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelContactType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NameId) {
		toSerialize["nameId"] = o.NameId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.OwnerCode) {
		toSerialize["ownerCode"] = o.OwnerCode
	}
	if !IsNil(o.CommunicationMethod) {
		toSerialize["communicationMethod"] = o.CommunicationMethod
	}
	if !IsNil(o.CommunicationAddress) {
		toSerialize["communicationAddress"] = o.CommunicationAddress
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	return toSerialize, nil
}

type NullableHotelContactType struct {
	value *HotelContactType
	isSet bool
}

func (v NullableHotelContactType) Get() *HotelContactType {
	return v.value
}

func (v *NullableHotelContactType) Set(val *HotelContactType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelContactType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelContactType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelContactType(val *HotelContactType) *NullableHotelContactType {
	return &NullableHotelContactType{value: val, isSet: true}
}

func (v NullableHotelContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelContactType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


