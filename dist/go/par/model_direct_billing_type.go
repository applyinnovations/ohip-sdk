/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the DirectBillingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DirectBillingType{}

// DirectBillingType This is the preconfigured routing instruction type.
type DirectBillingType struct {
	// Hotel Code for which the details of direct billing is provided for a profile.
	HotelId *string `json:"hotelId,omitempty"`
	// Hotel Code for which the details of direct billing is provided for a profile.
	ARNumber *string `json:"aRNumber,omitempty"`
}

// NewDirectBillingType instantiates a new DirectBillingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectBillingType() *DirectBillingType {
	this := DirectBillingType{}
	return &this
}

// NewDirectBillingTypeWithDefaults instantiates a new DirectBillingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectBillingTypeWithDefaults() *DirectBillingType {
	this := DirectBillingType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *DirectBillingType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectBillingType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *DirectBillingType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *DirectBillingType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetARNumber returns the ARNumber field value if set, zero value otherwise.
func (o *DirectBillingType) GetARNumber() string {
	if o == nil || IsNil(o.ARNumber) {
		var ret string
		return ret
	}
	return *o.ARNumber
}

// GetARNumberOk returns a tuple with the ARNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirectBillingType) GetARNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ARNumber) {
		return nil, false
	}
	return o.ARNumber, true
}

// HasARNumber returns a boolean if a field has been set.
func (o *DirectBillingType) HasARNumber() bool {
	if o != nil && !IsNil(o.ARNumber) {
		return true
	}

	return false
}

// SetARNumber gets a reference to the given string and assigns it to the ARNumber field.
func (o *DirectBillingType) SetARNumber(v string) {
	o.ARNumber = &v
}

func (o DirectBillingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DirectBillingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ARNumber) {
		toSerialize["aRNumber"] = o.ARNumber
	}
	return toSerialize, nil
}

type NullableDirectBillingType struct {
	value *DirectBillingType
	isSet bool
}

func (v NullableDirectBillingType) Get() *DirectBillingType {
	return v.value
}

func (v *NullableDirectBillingType) Set(val *DirectBillingType) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectBillingType) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectBillingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectBillingType(val *DirectBillingType) *NullableDirectBillingType {
	return &NullableDirectBillingType{value: val, isSet: true}
}

func (v NullableDirectBillingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectBillingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


