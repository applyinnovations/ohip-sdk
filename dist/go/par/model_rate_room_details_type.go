/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the RateRoomDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateRoomDetailsType{}

// RateRoomDetailsType struct for RateRoomDetailsType
type RateRoomDetailsType struct {
	// Detail regarding customer loyalty program.
	Memberships []MembershipSearchType `json:"memberships,omitempty"`
	RestrictionType *MasterRestrictionStatusesType `json:"restrictionType,omitempty"`
	// Room stay information.
	RoomStays []RoomStayType `json:"roomStays,omitempty"`
}

// NewRateRoomDetailsType instantiates a new RateRoomDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateRoomDetailsType() *RateRoomDetailsType {
	this := RateRoomDetailsType{}
	return &this
}

// NewRateRoomDetailsTypeWithDefaults instantiates a new RateRoomDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateRoomDetailsTypeWithDefaults() *RateRoomDetailsType {
	this := RateRoomDetailsType{}
	return &this
}

// GetMemberships returns the Memberships field value if set, zero value otherwise.
func (o *RateRoomDetailsType) GetMemberships() []MembershipSearchType {
	if o == nil || IsNil(o.Memberships) {
		var ret []MembershipSearchType
		return ret
	}
	return o.Memberships
}

// GetMembershipsOk returns a tuple with the Memberships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateRoomDetailsType) GetMembershipsOk() ([]MembershipSearchType, bool) {
	if o == nil || IsNil(o.Memberships) {
		return nil, false
	}
	return o.Memberships, true
}

// HasMemberships returns a boolean if a field has been set.
func (o *RateRoomDetailsType) HasMemberships() bool {
	if o != nil && !IsNil(o.Memberships) {
		return true
	}

	return false
}

// SetMemberships gets a reference to the given []MembershipSearchType and assigns it to the Memberships field.
func (o *RateRoomDetailsType) SetMemberships(v []MembershipSearchType) {
	o.Memberships = v
}

// GetRestrictionType returns the RestrictionType field value if set, zero value otherwise.
func (o *RateRoomDetailsType) GetRestrictionType() MasterRestrictionStatusesType {
	if o == nil || IsNil(o.RestrictionType) {
		var ret MasterRestrictionStatusesType
		return ret
	}
	return *o.RestrictionType
}

// GetRestrictionTypeOk returns a tuple with the RestrictionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateRoomDetailsType) GetRestrictionTypeOk() (*MasterRestrictionStatusesType, bool) {
	if o == nil || IsNil(o.RestrictionType) {
		return nil, false
	}
	return o.RestrictionType, true
}

// HasRestrictionType returns a boolean if a field has been set.
func (o *RateRoomDetailsType) HasRestrictionType() bool {
	if o != nil && !IsNil(o.RestrictionType) {
		return true
	}

	return false
}

// SetRestrictionType gets a reference to the given MasterRestrictionStatusesType and assigns it to the RestrictionType field.
func (o *RateRoomDetailsType) SetRestrictionType(v MasterRestrictionStatusesType) {
	o.RestrictionType = &v
}

// GetRoomStays returns the RoomStays field value if set, zero value otherwise.
func (o *RateRoomDetailsType) GetRoomStays() []RoomStayType {
	if o == nil || IsNil(o.RoomStays) {
		var ret []RoomStayType
		return ret
	}
	return o.RoomStays
}

// GetRoomStaysOk returns a tuple with the RoomStays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateRoomDetailsType) GetRoomStaysOk() ([]RoomStayType, bool) {
	if o == nil || IsNil(o.RoomStays) {
		return nil, false
	}
	return o.RoomStays, true
}

// HasRoomStays returns a boolean if a field has been set.
func (o *RateRoomDetailsType) HasRoomStays() bool {
	if o != nil && !IsNil(o.RoomStays) {
		return true
	}

	return false
}

// SetRoomStays gets a reference to the given []RoomStayType and assigns it to the RoomStays field.
func (o *RateRoomDetailsType) SetRoomStays(v []RoomStayType) {
	o.RoomStays = v
}

func (o RateRoomDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateRoomDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Memberships) {
		toSerialize["memberships"] = o.Memberships
	}
	if !IsNil(o.RestrictionType) {
		toSerialize["restrictionType"] = o.RestrictionType
	}
	if !IsNil(o.RoomStays) {
		toSerialize["roomStays"] = o.RoomStays
	}
	return toSerialize, nil
}

type NullableRateRoomDetailsType struct {
	value *RateRoomDetailsType
	isSet bool
}

func (v NullableRateRoomDetailsType) Get() *RateRoomDetailsType {
	return v.value
}

func (v *NullableRateRoomDetailsType) Set(val *RateRoomDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateRoomDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateRoomDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateRoomDetailsType(val *RateRoomDetailsType) *NullableRateRoomDetailsType {
	return &NullableRateRoomDetailsType{value: val, isSet: true}
}

func (v NullableRateRoomDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateRoomDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


