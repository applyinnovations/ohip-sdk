/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the HotelEventSpacesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelEventSpacesType{}

// HotelEventSpacesType The Detail and Summary info of event space about the hotel
type HotelEventSpacesType struct {
	// List of detail info of hotel event space
	EventSpaceDetails []HotelEventSpaceDetailType `json:"eventSpaceDetails,omitempty"`
	// List of summary info of hotel event space
	EventSpaceSummaries []HotelEventSpaceSummaryType `json:"eventSpaceSummaries,omitempty"`
	// List of event space setup style codes.
	SetupStyles []string `json:"setupStyles,omitempty"`
}

// NewHotelEventSpacesType instantiates a new HotelEventSpacesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelEventSpacesType() *HotelEventSpacesType {
	this := HotelEventSpacesType{}
	return &this
}

// NewHotelEventSpacesTypeWithDefaults instantiates a new HotelEventSpacesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelEventSpacesTypeWithDefaults() *HotelEventSpacesType {
	this := HotelEventSpacesType{}
	return &this
}

// GetEventSpaceDetails returns the EventSpaceDetails field value if set, zero value otherwise.
func (o *HotelEventSpacesType) GetEventSpaceDetails() []HotelEventSpaceDetailType {
	if o == nil || IsNil(o.EventSpaceDetails) {
		var ret []HotelEventSpaceDetailType
		return ret
	}
	return o.EventSpaceDetails
}

// GetEventSpaceDetailsOk returns a tuple with the EventSpaceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelEventSpacesType) GetEventSpaceDetailsOk() ([]HotelEventSpaceDetailType, bool) {
	if o == nil || IsNil(o.EventSpaceDetails) {
		return nil, false
	}
	return o.EventSpaceDetails, true
}

// HasEventSpaceDetails returns a boolean if a field has been set.
func (o *HotelEventSpacesType) HasEventSpaceDetails() bool {
	if o != nil && !IsNil(o.EventSpaceDetails) {
		return true
	}

	return false
}

// SetEventSpaceDetails gets a reference to the given []HotelEventSpaceDetailType and assigns it to the EventSpaceDetails field.
func (o *HotelEventSpacesType) SetEventSpaceDetails(v []HotelEventSpaceDetailType) {
	o.EventSpaceDetails = v
}

// GetEventSpaceSummaries returns the EventSpaceSummaries field value if set, zero value otherwise.
func (o *HotelEventSpacesType) GetEventSpaceSummaries() []HotelEventSpaceSummaryType {
	if o == nil || IsNil(o.EventSpaceSummaries) {
		var ret []HotelEventSpaceSummaryType
		return ret
	}
	return o.EventSpaceSummaries
}

// GetEventSpaceSummariesOk returns a tuple with the EventSpaceSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelEventSpacesType) GetEventSpaceSummariesOk() ([]HotelEventSpaceSummaryType, bool) {
	if o == nil || IsNil(o.EventSpaceSummaries) {
		return nil, false
	}
	return o.EventSpaceSummaries, true
}

// HasEventSpaceSummaries returns a boolean if a field has been set.
func (o *HotelEventSpacesType) HasEventSpaceSummaries() bool {
	if o != nil && !IsNil(o.EventSpaceSummaries) {
		return true
	}

	return false
}

// SetEventSpaceSummaries gets a reference to the given []HotelEventSpaceSummaryType and assigns it to the EventSpaceSummaries field.
func (o *HotelEventSpacesType) SetEventSpaceSummaries(v []HotelEventSpaceSummaryType) {
	o.EventSpaceSummaries = v
}

// GetSetupStyles returns the SetupStyles field value if set, zero value otherwise.
func (o *HotelEventSpacesType) GetSetupStyles() []string {
	if o == nil || IsNil(o.SetupStyles) {
		var ret []string
		return ret
	}
	return o.SetupStyles
}

// GetSetupStylesOk returns a tuple with the SetupStyles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelEventSpacesType) GetSetupStylesOk() ([]string, bool) {
	if o == nil || IsNil(o.SetupStyles) {
		return nil, false
	}
	return o.SetupStyles, true
}

// HasSetupStyles returns a boolean if a field has been set.
func (o *HotelEventSpacesType) HasSetupStyles() bool {
	if o != nil && !IsNil(o.SetupStyles) {
		return true
	}

	return false
}

// SetSetupStyles gets a reference to the given []string and assigns it to the SetupStyles field.
func (o *HotelEventSpacesType) SetSetupStyles(v []string) {
	o.SetupStyles = v
}

func (o HotelEventSpacesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelEventSpacesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventSpaceDetails) {
		toSerialize["eventSpaceDetails"] = o.EventSpaceDetails
	}
	if !IsNil(o.EventSpaceSummaries) {
		toSerialize["eventSpaceSummaries"] = o.EventSpaceSummaries
	}
	if !IsNil(o.SetupStyles) {
		toSerialize["setupStyles"] = o.SetupStyles
	}
	return toSerialize, nil
}

type NullableHotelEventSpacesType struct {
	value *HotelEventSpacesType
	isSet bool
}

func (v NullableHotelEventSpacesType) Get() *HotelEventSpacesType {
	return v.value
}

func (v *NullableHotelEventSpacesType) Set(val *HotelEventSpacesType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelEventSpacesType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelEventSpacesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelEventSpacesType(val *HotelEventSpacesType) *NullableHotelEventSpacesType {
	return &NullableHotelEventSpacesType{value: val, isSet: true}
}

func (v NullableHotelEventSpacesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelEventSpacesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


