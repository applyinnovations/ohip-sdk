/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the RestrictionSetHistoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestrictionSetHistoryType{}

// RestrictionSetHistoryType Indicates Restriction set applicable for the date range.
type RestrictionSetHistoryType struct {
	// Indicates the action performed on restriction
	ActionType *string `json:"actionType,omitempty"`
	ActualTimeSpan *TimeSpanType `json:"actualTimeSpan,omitempty"`
	AppliedDate *string `json:"appliedDate,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	Friday *bool `json:"friday,omitempty"`
	LogUserId *int32 `json:"logUserId,omitempty"`
	LogUserName *string `json:"logUserName,omitempty"`
	Monday *bool `json:"monday,omitempty"`
	// Indicates whether the Closed restriction is flagged as On Request.
	OnRequest *bool `json:"onRequest,omitempty"`
	RestrictionControl *RestrictionControlType `json:"restrictionControl,omitempty"`
	RestrictionStatus *RestrictionStatusType `json:"restrictionStatus,omitempty"`
	Saturday *bool `json:"saturday,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	Sunday *bool `json:"sunday,omitempty"`
	Thursday *bool `json:"thursday,omitempty"`
	Tuesday *bool `json:"tuesday,omitempty"`
	Wednesday *bool `json:"wednesday,omitempty"`
}

// NewRestrictionSetHistoryType instantiates a new RestrictionSetHistoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictionSetHistoryType() *RestrictionSetHistoryType {
	this := RestrictionSetHistoryType{}
	return &this
}

// NewRestrictionSetHistoryTypeWithDefaults instantiates a new RestrictionSetHistoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictionSetHistoryTypeWithDefaults() *RestrictionSetHistoryType {
	this := RestrictionSetHistoryType{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *RestrictionSetHistoryType) SetActionType(v string) {
	o.ActionType = &v
}

// GetActualTimeSpan returns the ActualTimeSpan field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetActualTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.ActualTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.ActualTimeSpan
}

// GetActualTimeSpanOk returns a tuple with the ActualTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetActualTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.ActualTimeSpan) {
		return nil, false
	}
	return o.ActualTimeSpan, true
}

// HasActualTimeSpan returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasActualTimeSpan() bool {
	if o != nil && !IsNil(o.ActualTimeSpan) {
		return true
	}

	return false
}

// SetActualTimeSpan gets a reference to the given TimeSpanType and assigns it to the ActualTimeSpan field.
func (o *RestrictionSetHistoryType) SetActualTimeSpan(v TimeSpanType) {
	o.ActualTimeSpan = &v
}

// GetAppliedDate returns the AppliedDate field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetAppliedDate() string {
	if o == nil || IsNil(o.AppliedDate) {
		var ret string
		return ret
	}
	return *o.AppliedDate
}

// GetAppliedDateOk returns a tuple with the AppliedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetAppliedDateOk() (*string, bool) {
	if o == nil || IsNil(o.AppliedDate) {
		return nil, false
	}
	return o.AppliedDate, true
}

// HasAppliedDate returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasAppliedDate() bool {
	if o != nil && !IsNil(o.AppliedDate) {
		return true
	}

	return false
}

// SetAppliedDate gets a reference to the given string and assigns it to the AppliedDate field.
func (o *RestrictionSetHistoryType) SetAppliedDate(v string) {
	o.AppliedDate = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *RestrictionSetHistoryType) SetEnd(v string) {
	o.End = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetFriday() bool {
	if o == nil || IsNil(o.Friday) {
		var ret bool
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetFridayOk() (*bool, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given bool and assigns it to the Friday field.
func (o *RestrictionSetHistoryType) SetFriday(v bool) {
	o.Friday = &v
}

// GetLogUserId returns the LogUserId field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetLogUserId() int32 {
	if o == nil || IsNil(o.LogUserId) {
		var ret int32
		return ret
	}
	return *o.LogUserId
}

// GetLogUserIdOk returns a tuple with the LogUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetLogUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LogUserId) {
		return nil, false
	}
	return o.LogUserId, true
}

// HasLogUserId returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasLogUserId() bool {
	if o != nil && !IsNil(o.LogUserId) {
		return true
	}

	return false
}

// SetLogUserId gets a reference to the given int32 and assigns it to the LogUserId field.
func (o *RestrictionSetHistoryType) SetLogUserId(v int32) {
	o.LogUserId = &v
}

// GetLogUserName returns the LogUserName field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetLogUserName() string {
	if o == nil || IsNil(o.LogUserName) {
		var ret string
		return ret
	}
	return *o.LogUserName
}

// GetLogUserNameOk returns a tuple with the LogUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetLogUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.LogUserName) {
		return nil, false
	}
	return o.LogUserName, true
}

// HasLogUserName returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasLogUserName() bool {
	if o != nil && !IsNil(o.LogUserName) {
		return true
	}

	return false
}

// SetLogUserName gets a reference to the given string and assigns it to the LogUserName field.
func (o *RestrictionSetHistoryType) SetLogUserName(v string) {
	o.LogUserName = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetMonday() bool {
	if o == nil || IsNil(o.Monday) {
		var ret bool
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetMondayOk() (*bool, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given bool and assigns it to the Monday field.
func (o *RestrictionSetHistoryType) SetMonday(v bool) {
	o.Monday = &v
}

// GetOnRequest returns the OnRequest field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetOnRequest() bool {
	if o == nil || IsNil(o.OnRequest) {
		var ret bool
		return ret
	}
	return *o.OnRequest
}

// GetOnRequestOk returns a tuple with the OnRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetOnRequestOk() (*bool, bool) {
	if o == nil || IsNil(o.OnRequest) {
		return nil, false
	}
	return o.OnRequest, true
}

// HasOnRequest returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasOnRequest() bool {
	if o != nil && !IsNil(o.OnRequest) {
		return true
	}

	return false
}

// SetOnRequest gets a reference to the given bool and assigns it to the OnRequest field.
func (o *RestrictionSetHistoryType) SetOnRequest(v bool) {
	o.OnRequest = &v
}

// GetRestrictionControl returns the RestrictionControl field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetRestrictionControl() RestrictionControlType {
	if o == nil || IsNil(o.RestrictionControl) {
		var ret RestrictionControlType
		return ret
	}
	return *o.RestrictionControl
}

// GetRestrictionControlOk returns a tuple with the RestrictionControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetRestrictionControlOk() (*RestrictionControlType, bool) {
	if o == nil || IsNil(o.RestrictionControl) {
		return nil, false
	}
	return o.RestrictionControl, true
}

// HasRestrictionControl returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasRestrictionControl() bool {
	if o != nil && !IsNil(o.RestrictionControl) {
		return true
	}

	return false
}

// SetRestrictionControl gets a reference to the given RestrictionControlType and assigns it to the RestrictionControl field.
func (o *RestrictionSetHistoryType) SetRestrictionControl(v RestrictionControlType) {
	o.RestrictionControl = &v
}

// GetRestrictionStatus returns the RestrictionStatus field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetRestrictionStatus() RestrictionStatusType {
	if o == nil || IsNil(o.RestrictionStatus) {
		var ret RestrictionStatusType
		return ret
	}
	return *o.RestrictionStatus
}

// GetRestrictionStatusOk returns a tuple with the RestrictionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetRestrictionStatusOk() (*RestrictionStatusType, bool) {
	if o == nil || IsNil(o.RestrictionStatus) {
		return nil, false
	}
	return o.RestrictionStatus, true
}

// HasRestrictionStatus returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasRestrictionStatus() bool {
	if o != nil && !IsNil(o.RestrictionStatus) {
		return true
	}

	return false
}

// SetRestrictionStatus gets a reference to the given RestrictionStatusType and assigns it to the RestrictionStatus field.
func (o *RestrictionSetHistoryType) SetRestrictionStatus(v RestrictionStatusType) {
	o.RestrictionStatus = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetSaturday() bool {
	if o == nil || IsNil(o.Saturday) {
		var ret bool
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetSaturdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given bool and assigns it to the Saturday field.
func (o *RestrictionSetHistoryType) SetSaturday(v bool) {
	o.Saturday = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *RestrictionSetHistoryType) SetStart(v string) {
	o.Start = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetSunday() bool {
	if o == nil || IsNil(o.Sunday) {
		var ret bool
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetSundayOk() (*bool, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given bool and assigns it to the Sunday field.
func (o *RestrictionSetHistoryType) SetSunday(v bool) {
	o.Sunday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetThursday() bool {
	if o == nil || IsNil(o.Thursday) {
		var ret bool
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetThursdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given bool and assigns it to the Thursday field.
func (o *RestrictionSetHistoryType) SetThursday(v bool) {
	o.Thursday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetTuesday() bool {
	if o == nil || IsNil(o.Tuesday) {
		var ret bool
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetTuesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given bool and assigns it to the Tuesday field.
func (o *RestrictionSetHistoryType) SetTuesday(v bool) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *RestrictionSetHistoryType) GetWednesday() bool {
	if o == nil || IsNil(o.Wednesday) {
		var ret bool
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionSetHistoryType) GetWednesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *RestrictionSetHistoryType) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given bool and assigns it to the Wednesday field.
func (o *RestrictionSetHistoryType) SetWednesday(v bool) {
	o.Wednesday = &v
}

func (o RestrictionSetHistoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestrictionSetHistoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.ActualTimeSpan) {
		toSerialize["actualTimeSpan"] = o.ActualTimeSpan
	}
	if !IsNil(o.AppliedDate) {
		toSerialize["appliedDate"] = o.AppliedDate
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.LogUserId) {
		toSerialize["logUserId"] = o.LogUserId
	}
	if !IsNil(o.LogUserName) {
		toSerialize["logUserName"] = o.LogUserName
	}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.OnRequest) {
		toSerialize["onRequest"] = o.OnRequest
	}
	if !IsNil(o.RestrictionControl) {
		toSerialize["restrictionControl"] = o.RestrictionControl
	}
	if !IsNil(o.RestrictionStatus) {
		toSerialize["restrictionStatus"] = o.RestrictionStatus
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}
	return toSerialize, nil
}

type NullableRestrictionSetHistoryType struct {
	value *RestrictionSetHistoryType
	isSet bool
}

func (v NullableRestrictionSetHistoryType) Get() *RestrictionSetHistoryType {
	return v.value
}

func (v *NullableRestrictionSetHistoryType) Set(val *RestrictionSetHistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictionSetHistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictionSetHistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictionSetHistoryType(val *RestrictionSetHistoryType) *NullableRestrictionSetHistoryType {
	return &NullableRestrictionSetHistoryType{value: val, isSet: true}
}

func (v NullableRestrictionSetHistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictionSetHistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


