/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the HotelInfoTypePrimaryDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelInfoTypePrimaryDetails{}

// HotelInfoTypePrimaryDetails Primary Information of the hotel.
type HotelInfoTypePrimaryDetails struct {
	// Legal owner of the hotel.
	LegalOwner *string `json:"legalOwner,omitempty"`
}

// NewHotelInfoTypePrimaryDetails instantiates a new HotelInfoTypePrimaryDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelInfoTypePrimaryDetails() *HotelInfoTypePrimaryDetails {
	this := HotelInfoTypePrimaryDetails{}
	return &this
}

// NewHotelInfoTypePrimaryDetailsWithDefaults instantiates a new HotelInfoTypePrimaryDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelInfoTypePrimaryDetailsWithDefaults() *HotelInfoTypePrimaryDetails {
	this := HotelInfoTypePrimaryDetails{}
	return &this
}

// GetLegalOwner returns the LegalOwner field value if set, zero value otherwise.
func (o *HotelInfoTypePrimaryDetails) GetLegalOwner() string {
	if o == nil || IsNil(o.LegalOwner) {
		var ret string
		return ret
	}
	return *o.LegalOwner
}

// GetLegalOwnerOk returns a tuple with the LegalOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypePrimaryDetails) GetLegalOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.LegalOwner) {
		return nil, false
	}
	return o.LegalOwner, true
}

// HasLegalOwner returns a boolean if a field has been set.
func (o *HotelInfoTypePrimaryDetails) HasLegalOwner() bool {
	if o != nil && !IsNil(o.LegalOwner) {
		return true
	}

	return false
}

// SetLegalOwner gets a reference to the given string and assigns it to the LegalOwner field.
func (o *HotelInfoTypePrimaryDetails) SetLegalOwner(v string) {
	o.LegalOwner = &v
}

func (o HotelInfoTypePrimaryDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelInfoTypePrimaryDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LegalOwner) {
		toSerialize["legalOwner"] = o.LegalOwner
	}
	return toSerialize, nil
}

type NullableHotelInfoTypePrimaryDetails struct {
	value *HotelInfoTypePrimaryDetails
	isSet bool
}

func (v NullableHotelInfoTypePrimaryDetails) Get() *HotelInfoTypePrimaryDetails {
	return v.value
}

func (v *NullableHotelInfoTypePrimaryDetails) Set(val *HotelInfoTypePrimaryDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelInfoTypePrimaryDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelInfoTypePrimaryDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelInfoTypePrimaryDetails(val *HotelInfoTypePrimaryDetails) *NullableHotelInfoTypePrimaryDetails {
	return &NullableHotelInfoTypePrimaryDetails{value: val, isSet: true}
}

func (v NullableHotelInfoTypePrimaryDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelInfoTypePrimaryDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


