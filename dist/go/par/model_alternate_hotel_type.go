/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the AlternateHotelType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlternateHotelType{}

// AlternateHotelType struct for AlternateHotelType
type AlternateHotelType struct {
	Address *AddressType `json:"address,omitempty"`
	Alternate *bool `json:"alternate,omitempty"`
	AlternateHotelCode *string `json:"alternateHotelCode,omitempty"`
	AvailableRooms *int32 `json:"availableRooms,omitempty"`
	// The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
	ChainCode *string `json:"chainCode,omitempty"`
	// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
	ChainName *string `json:"chainName,omitempty"`
	ChannelSummaryInfo *ChannelSummaryInfoType `json:"channelSummaryInfo,omitempty"`
	// Comments of alternate Hotel.
	Comments *string `json:"comments,omitempty"`
	ContactNumbers []TelephoneType `json:"contactNumbers,omitempty"`
	// Exchange Rate information for a currency code.
	CurrencyExchangeRates []CurrencyExchangeRateType `json:"currencyExchangeRates,omitempty"`
	// Compass direction to the attraction from the hotel (North/South, etc).
	Direction *string `json:"direction,omitempty"`
	DisplayOrder *float32 `json:"displayOrder,omitempty"`
	// True if the hotel has any scheduled events within the requested date range.
	Event *bool `json:"event,omitempty"`
	HotelAmenities []HotelAmenityType `json:"hotelAmenities,omitempty"`
	// The IATA city code; for example DCA, ORD.
	HotelCityCode *string `json:"hotelCityCode,omitempty"`
	// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
	HotelCodeContext *string `json:"hotelCodeContext,omitempty"`
	// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
	HotelId *string `json:"hotelId,omitempty"`
	// A text field used to communicate the proper name of the hotel.
	HotelName *string `json:"hotelName,omitempty"`
	HotelType *string `json:"hotelType,omitempty"`
	InventoryRooms *int32 `json:"inventoryRooms,omitempty"`
	MaxRate *CurrencyAmountType `json:"maxRate,omitempty"`
	MinRate *CurrencyAmountType `json:"minRate,omitempty"`
	Negotiated *bool `json:"negotiated,omitempty"`
	NewAlternateHotelCode *string `json:"newAlternateHotelCode,omitempty"`
	RateRoomDetails *RateRoomDetailsType `json:"rateRoomDetails,omitempty"`
	// whether the alternate relationship should be applied to the alternate hotel as well. If this flag is true, not only will the AlternateHotelCode hotel be an alternate for HotelCode hotel, but HotelCode hotel will also be an alternate for AlternateHotelCode hotel.
	ReciprocalRelationship *bool `json:"reciprocalRelationship,omitempty"`
	RelativePosition *RelativePositionType `json:"relativePosition,omitempty"`
	SellMessages *SellMessagesType `json:"sellMessages,omitempty"`
}

// NewAlternateHotelType instantiates a new AlternateHotelType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlternateHotelType() *AlternateHotelType {
	this := AlternateHotelType{}
	return &this
}

// NewAlternateHotelTypeWithDefaults instantiates a new AlternateHotelType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlternateHotelTypeWithDefaults() *AlternateHotelType {
	this := AlternateHotelType{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *AlternateHotelType) GetAddress() AddressType {
	if o == nil || IsNil(o.Address) {
		var ret AddressType
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetAddressOk() (*AddressType, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *AlternateHotelType) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given AddressType and assigns it to the Address field.
func (o *AlternateHotelType) SetAddress(v AddressType) {
	o.Address = &v
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *AlternateHotelType) GetAlternate() bool {
	if o == nil || IsNil(o.Alternate) {
		var ret bool
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetAlternateOk() (*bool, bool) {
	if o == nil || IsNil(o.Alternate) {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *AlternateHotelType) HasAlternate() bool {
	if o != nil && !IsNil(o.Alternate) {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given bool and assigns it to the Alternate field.
func (o *AlternateHotelType) SetAlternate(v bool) {
	o.Alternate = &v
}

// GetAlternateHotelCode returns the AlternateHotelCode field value if set, zero value otherwise.
func (o *AlternateHotelType) GetAlternateHotelCode() string {
	if o == nil || IsNil(o.AlternateHotelCode) {
		var ret string
		return ret
	}
	return *o.AlternateHotelCode
}

// GetAlternateHotelCodeOk returns a tuple with the AlternateHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetAlternateHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AlternateHotelCode) {
		return nil, false
	}
	return o.AlternateHotelCode, true
}

// HasAlternateHotelCode returns a boolean if a field has been set.
func (o *AlternateHotelType) HasAlternateHotelCode() bool {
	if o != nil && !IsNil(o.AlternateHotelCode) {
		return true
	}

	return false
}

// SetAlternateHotelCode gets a reference to the given string and assigns it to the AlternateHotelCode field.
func (o *AlternateHotelType) SetAlternateHotelCode(v string) {
	o.AlternateHotelCode = &v
}

// GetAvailableRooms returns the AvailableRooms field value if set, zero value otherwise.
func (o *AlternateHotelType) GetAvailableRooms() int32 {
	if o == nil || IsNil(o.AvailableRooms) {
		var ret int32
		return ret
	}
	return *o.AvailableRooms
}

// GetAvailableRoomsOk returns a tuple with the AvailableRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetAvailableRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableRooms) {
		return nil, false
	}
	return o.AvailableRooms, true
}

// HasAvailableRooms returns a boolean if a field has been set.
func (o *AlternateHotelType) HasAvailableRooms() bool {
	if o != nil && !IsNil(o.AvailableRooms) {
		return true
	}

	return false
}

// SetAvailableRooms gets a reference to the given int32 and assigns it to the AvailableRooms field.
func (o *AlternateHotelType) SetAvailableRooms(v int32) {
	o.AvailableRooms = &v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *AlternateHotelType) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *AlternateHotelType) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *AlternateHotelType) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetChainName returns the ChainName field value if set, zero value otherwise.
func (o *AlternateHotelType) GetChainName() string {
	if o == nil || IsNil(o.ChainName) {
		var ret string
		return ret
	}
	return *o.ChainName
}

// GetChainNameOk returns a tuple with the ChainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetChainNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChainName) {
		return nil, false
	}
	return o.ChainName, true
}

// HasChainName returns a boolean if a field has been set.
func (o *AlternateHotelType) HasChainName() bool {
	if o != nil && !IsNil(o.ChainName) {
		return true
	}

	return false
}

// SetChainName gets a reference to the given string and assigns it to the ChainName field.
func (o *AlternateHotelType) SetChainName(v string) {
	o.ChainName = &v
}

// GetChannelSummaryInfo returns the ChannelSummaryInfo field value if set, zero value otherwise.
func (o *AlternateHotelType) GetChannelSummaryInfo() ChannelSummaryInfoType {
	if o == nil || IsNil(o.ChannelSummaryInfo) {
		var ret ChannelSummaryInfoType
		return ret
	}
	return *o.ChannelSummaryInfo
}

// GetChannelSummaryInfoOk returns a tuple with the ChannelSummaryInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetChannelSummaryInfoOk() (*ChannelSummaryInfoType, bool) {
	if o == nil || IsNil(o.ChannelSummaryInfo) {
		return nil, false
	}
	return o.ChannelSummaryInfo, true
}

// HasChannelSummaryInfo returns a boolean if a field has been set.
func (o *AlternateHotelType) HasChannelSummaryInfo() bool {
	if o != nil && !IsNil(o.ChannelSummaryInfo) {
		return true
	}

	return false
}

// SetChannelSummaryInfo gets a reference to the given ChannelSummaryInfoType and assigns it to the ChannelSummaryInfo field.
func (o *AlternateHotelType) SetChannelSummaryInfo(v ChannelSummaryInfoType) {
	o.ChannelSummaryInfo = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *AlternateHotelType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *AlternateHotelType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *AlternateHotelType) SetComments(v string) {
	o.Comments = &v
}

// GetContactNumbers returns the ContactNumbers field value if set, zero value otherwise.
func (o *AlternateHotelType) GetContactNumbers() []TelephoneType {
	if o == nil || IsNil(o.ContactNumbers) {
		var ret []TelephoneType
		return ret
	}
	return o.ContactNumbers
}

// GetContactNumbersOk returns a tuple with the ContactNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetContactNumbersOk() ([]TelephoneType, bool) {
	if o == nil || IsNil(o.ContactNumbers) {
		return nil, false
	}
	return o.ContactNumbers, true
}

// HasContactNumbers returns a boolean if a field has been set.
func (o *AlternateHotelType) HasContactNumbers() bool {
	if o != nil && !IsNil(o.ContactNumbers) {
		return true
	}

	return false
}

// SetContactNumbers gets a reference to the given []TelephoneType and assigns it to the ContactNumbers field.
func (o *AlternateHotelType) SetContactNumbers(v []TelephoneType) {
	o.ContactNumbers = v
}

// GetCurrencyExchangeRates returns the CurrencyExchangeRates field value if set, zero value otherwise.
func (o *AlternateHotelType) GetCurrencyExchangeRates() []CurrencyExchangeRateType {
	if o == nil || IsNil(o.CurrencyExchangeRates) {
		var ret []CurrencyExchangeRateType
		return ret
	}
	return o.CurrencyExchangeRates
}

// GetCurrencyExchangeRatesOk returns a tuple with the CurrencyExchangeRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetCurrencyExchangeRatesOk() ([]CurrencyExchangeRateType, bool) {
	if o == nil || IsNil(o.CurrencyExchangeRates) {
		return nil, false
	}
	return o.CurrencyExchangeRates, true
}

// HasCurrencyExchangeRates returns a boolean if a field has been set.
func (o *AlternateHotelType) HasCurrencyExchangeRates() bool {
	if o != nil && !IsNil(o.CurrencyExchangeRates) {
		return true
	}

	return false
}

// SetCurrencyExchangeRates gets a reference to the given []CurrencyExchangeRateType and assigns it to the CurrencyExchangeRates field.
func (o *AlternateHotelType) SetCurrencyExchangeRates(v []CurrencyExchangeRateType) {
	o.CurrencyExchangeRates = v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *AlternateHotelType) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *AlternateHotelType) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *AlternateHotelType) SetDirection(v string) {
	o.Direction = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *AlternateHotelType) GetDisplayOrder() float32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret float32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetDisplayOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *AlternateHotelType) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given float32 and assigns it to the DisplayOrder field.
func (o *AlternateHotelType) SetDisplayOrder(v float32) {
	o.DisplayOrder = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *AlternateHotelType) GetEvent() bool {
	if o == nil || IsNil(o.Event) {
		var ret bool
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetEventOk() (*bool, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *AlternateHotelType) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given bool and assigns it to the Event field.
func (o *AlternateHotelType) SetEvent(v bool) {
	o.Event = &v
}

// GetHotelAmenities returns the HotelAmenities field value if set, zero value otherwise.
func (o *AlternateHotelType) GetHotelAmenities() []HotelAmenityType {
	if o == nil || IsNil(o.HotelAmenities) {
		var ret []HotelAmenityType
		return ret
	}
	return o.HotelAmenities
}

// GetHotelAmenitiesOk returns a tuple with the HotelAmenities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetHotelAmenitiesOk() ([]HotelAmenityType, bool) {
	if o == nil || IsNil(o.HotelAmenities) {
		return nil, false
	}
	return o.HotelAmenities, true
}

// HasHotelAmenities returns a boolean if a field has been set.
func (o *AlternateHotelType) HasHotelAmenities() bool {
	if o != nil && !IsNil(o.HotelAmenities) {
		return true
	}

	return false
}

// SetHotelAmenities gets a reference to the given []HotelAmenityType and assigns it to the HotelAmenities field.
func (o *AlternateHotelType) SetHotelAmenities(v []HotelAmenityType) {
	o.HotelAmenities = v
}

// GetHotelCityCode returns the HotelCityCode field value if set, zero value otherwise.
func (o *AlternateHotelType) GetHotelCityCode() string {
	if o == nil || IsNil(o.HotelCityCode) {
		var ret string
		return ret
	}
	return *o.HotelCityCode
}

// GetHotelCityCodeOk returns a tuple with the HotelCityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetHotelCityCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCityCode) {
		return nil, false
	}
	return o.HotelCityCode, true
}

// HasHotelCityCode returns a boolean if a field has been set.
func (o *AlternateHotelType) HasHotelCityCode() bool {
	if o != nil && !IsNil(o.HotelCityCode) {
		return true
	}

	return false
}

// SetHotelCityCode gets a reference to the given string and assigns it to the HotelCityCode field.
func (o *AlternateHotelType) SetHotelCityCode(v string) {
	o.HotelCityCode = &v
}

// GetHotelCodeContext returns the HotelCodeContext field value if set, zero value otherwise.
func (o *AlternateHotelType) GetHotelCodeContext() string {
	if o == nil || IsNil(o.HotelCodeContext) {
		var ret string
		return ret
	}
	return *o.HotelCodeContext
}

// GetHotelCodeContextOk returns a tuple with the HotelCodeContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetHotelCodeContextOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCodeContext) {
		return nil, false
	}
	return o.HotelCodeContext, true
}

// HasHotelCodeContext returns a boolean if a field has been set.
func (o *AlternateHotelType) HasHotelCodeContext() bool {
	if o != nil && !IsNil(o.HotelCodeContext) {
		return true
	}

	return false
}

// SetHotelCodeContext gets a reference to the given string and assigns it to the HotelCodeContext field.
func (o *AlternateHotelType) SetHotelCodeContext(v string) {
	o.HotelCodeContext = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AlternateHotelType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AlternateHotelType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AlternateHotelType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *AlternateHotelType) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *AlternateHotelType) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *AlternateHotelType) SetHotelName(v string) {
	o.HotelName = &v
}

// GetHotelType returns the HotelType field value if set, zero value otherwise.
func (o *AlternateHotelType) GetHotelType() string {
	if o == nil || IsNil(o.HotelType) {
		var ret string
		return ret
	}
	return *o.HotelType
}

// GetHotelTypeOk returns a tuple with the HotelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetHotelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelType) {
		return nil, false
	}
	return o.HotelType, true
}

// HasHotelType returns a boolean if a field has been set.
func (o *AlternateHotelType) HasHotelType() bool {
	if o != nil && !IsNil(o.HotelType) {
		return true
	}

	return false
}

// SetHotelType gets a reference to the given string and assigns it to the HotelType field.
func (o *AlternateHotelType) SetHotelType(v string) {
	o.HotelType = &v
}

// GetInventoryRooms returns the InventoryRooms field value if set, zero value otherwise.
func (o *AlternateHotelType) GetInventoryRooms() int32 {
	if o == nil || IsNil(o.InventoryRooms) {
		var ret int32
		return ret
	}
	return *o.InventoryRooms
}

// GetInventoryRoomsOk returns a tuple with the InventoryRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetInventoryRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.InventoryRooms) {
		return nil, false
	}
	return o.InventoryRooms, true
}

// HasInventoryRooms returns a boolean if a field has been set.
func (o *AlternateHotelType) HasInventoryRooms() bool {
	if o != nil && !IsNil(o.InventoryRooms) {
		return true
	}

	return false
}

// SetInventoryRooms gets a reference to the given int32 and assigns it to the InventoryRooms field.
func (o *AlternateHotelType) SetInventoryRooms(v int32) {
	o.InventoryRooms = &v
}

// GetMaxRate returns the MaxRate field value if set, zero value otherwise.
func (o *AlternateHotelType) GetMaxRate() CurrencyAmountType {
	if o == nil || IsNil(o.MaxRate) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.MaxRate
}

// GetMaxRateOk returns a tuple with the MaxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetMaxRateOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.MaxRate) {
		return nil, false
	}
	return o.MaxRate, true
}

// HasMaxRate returns a boolean if a field has been set.
func (o *AlternateHotelType) HasMaxRate() bool {
	if o != nil && !IsNil(o.MaxRate) {
		return true
	}

	return false
}

// SetMaxRate gets a reference to the given CurrencyAmountType and assigns it to the MaxRate field.
func (o *AlternateHotelType) SetMaxRate(v CurrencyAmountType) {
	o.MaxRate = &v
}

// GetMinRate returns the MinRate field value if set, zero value otherwise.
func (o *AlternateHotelType) GetMinRate() CurrencyAmountType {
	if o == nil || IsNil(o.MinRate) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.MinRate
}

// GetMinRateOk returns a tuple with the MinRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetMinRateOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.MinRate) {
		return nil, false
	}
	return o.MinRate, true
}

// HasMinRate returns a boolean if a field has been set.
func (o *AlternateHotelType) HasMinRate() bool {
	if o != nil && !IsNil(o.MinRate) {
		return true
	}

	return false
}

// SetMinRate gets a reference to the given CurrencyAmountType and assigns it to the MinRate field.
func (o *AlternateHotelType) SetMinRate(v CurrencyAmountType) {
	o.MinRate = &v
}

// GetNegotiated returns the Negotiated field value if set, zero value otherwise.
func (o *AlternateHotelType) GetNegotiated() bool {
	if o == nil || IsNil(o.Negotiated) {
		var ret bool
		return ret
	}
	return *o.Negotiated
}

// GetNegotiatedOk returns a tuple with the Negotiated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetNegotiatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Negotiated) {
		return nil, false
	}
	return o.Negotiated, true
}

// HasNegotiated returns a boolean if a field has been set.
func (o *AlternateHotelType) HasNegotiated() bool {
	if o != nil && !IsNil(o.Negotiated) {
		return true
	}

	return false
}

// SetNegotiated gets a reference to the given bool and assigns it to the Negotiated field.
func (o *AlternateHotelType) SetNegotiated(v bool) {
	o.Negotiated = &v
}

// GetNewAlternateHotelCode returns the NewAlternateHotelCode field value if set, zero value otherwise.
func (o *AlternateHotelType) GetNewAlternateHotelCode() string {
	if o == nil || IsNil(o.NewAlternateHotelCode) {
		var ret string
		return ret
	}
	return *o.NewAlternateHotelCode
}

// GetNewAlternateHotelCodeOk returns a tuple with the NewAlternateHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetNewAlternateHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.NewAlternateHotelCode) {
		return nil, false
	}
	return o.NewAlternateHotelCode, true
}

// HasNewAlternateHotelCode returns a boolean if a field has been set.
func (o *AlternateHotelType) HasNewAlternateHotelCode() bool {
	if o != nil && !IsNil(o.NewAlternateHotelCode) {
		return true
	}

	return false
}

// SetNewAlternateHotelCode gets a reference to the given string and assigns it to the NewAlternateHotelCode field.
func (o *AlternateHotelType) SetNewAlternateHotelCode(v string) {
	o.NewAlternateHotelCode = &v
}

// GetRateRoomDetails returns the RateRoomDetails field value if set, zero value otherwise.
func (o *AlternateHotelType) GetRateRoomDetails() RateRoomDetailsType {
	if o == nil || IsNil(o.RateRoomDetails) {
		var ret RateRoomDetailsType
		return ret
	}
	return *o.RateRoomDetails
}

// GetRateRoomDetailsOk returns a tuple with the RateRoomDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetRateRoomDetailsOk() (*RateRoomDetailsType, bool) {
	if o == nil || IsNil(o.RateRoomDetails) {
		return nil, false
	}
	return o.RateRoomDetails, true
}

// HasRateRoomDetails returns a boolean if a field has been set.
func (o *AlternateHotelType) HasRateRoomDetails() bool {
	if o != nil && !IsNil(o.RateRoomDetails) {
		return true
	}

	return false
}

// SetRateRoomDetails gets a reference to the given RateRoomDetailsType and assigns it to the RateRoomDetails field.
func (o *AlternateHotelType) SetRateRoomDetails(v RateRoomDetailsType) {
	o.RateRoomDetails = &v
}

// GetReciprocalRelationship returns the ReciprocalRelationship field value if set, zero value otherwise.
func (o *AlternateHotelType) GetReciprocalRelationship() bool {
	if o == nil || IsNil(o.ReciprocalRelationship) {
		var ret bool
		return ret
	}
	return *o.ReciprocalRelationship
}

// GetReciprocalRelationshipOk returns a tuple with the ReciprocalRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetReciprocalRelationshipOk() (*bool, bool) {
	if o == nil || IsNil(o.ReciprocalRelationship) {
		return nil, false
	}
	return o.ReciprocalRelationship, true
}

// HasReciprocalRelationship returns a boolean if a field has been set.
func (o *AlternateHotelType) HasReciprocalRelationship() bool {
	if o != nil && !IsNil(o.ReciprocalRelationship) {
		return true
	}

	return false
}

// SetReciprocalRelationship gets a reference to the given bool and assigns it to the ReciprocalRelationship field.
func (o *AlternateHotelType) SetReciprocalRelationship(v bool) {
	o.ReciprocalRelationship = &v
}

// GetRelativePosition returns the RelativePosition field value if set, zero value otherwise.
func (o *AlternateHotelType) GetRelativePosition() RelativePositionType {
	if o == nil || IsNil(o.RelativePosition) {
		var ret RelativePositionType
		return ret
	}
	return *o.RelativePosition
}

// GetRelativePositionOk returns a tuple with the RelativePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetRelativePositionOk() (*RelativePositionType, bool) {
	if o == nil || IsNil(o.RelativePosition) {
		return nil, false
	}
	return o.RelativePosition, true
}

// HasRelativePosition returns a boolean if a field has been set.
func (o *AlternateHotelType) HasRelativePosition() bool {
	if o != nil && !IsNil(o.RelativePosition) {
		return true
	}

	return false
}

// SetRelativePosition gets a reference to the given RelativePositionType and assigns it to the RelativePosition field.
func (o *AlternateHotelType) SetRelativePosition(v RelativePositionType) {
	o.RelativePosition = &v
}

// GetSellMessages returns the SellMessages field value if set, zero value otherwise.
func (o *AlternateHotelType) GetSellMessages() SellMessagesType {
	if o == nil || IsNil(o.SellMessages) {
		var ret SellMessagesType
		return ret
	}
	return *o.SellMessages
}

// GetSellMessagesOk returns a tuple with the SellMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateHotelType) GetSellMessagesOk() (*SellMessagesType, bool) {
	if o == nil || IsNil(o.SellMessages) {
		return nil, false
	}
	return o.SellMessages, true
}

// HasSellMessages returns a boolean if a field has been set.
func (o *AlternateHotelType) HasSellMessages() bool {
	if o != nil && !IsNil(o.SellMessages) {
		return true
	}

	return false
}

// SetSellMessages gets a reference to the given SellMessagesType and assigns it to the SellMessages field.
func (o *AlternateHotelType) SetSellMessages(v SellMessagesType) {
	o.SellMessages = &v
}

func (o AlternateHotelType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlternateHotelType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Alternate) {
		toSerialize["alternate"] = o.Alternate
	}
	if !IsNil(o.AlternateHotelCode) {
		toSerialize["alternateHotelCode"] = o.AlternateHotelCode
	}
	if !IsNil(o.AvailableRooms) {
		toSerialize["availableRooms"] = o.AvailableRooms
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.ChainName) {
		toSerialize["chainName"] = o.ChainName
	}
	if !IsNil(o.ChannelSummaryInfo) {
		toSerialize["channelSummaryInfo"] = o.ChannelSummaryInfo
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.ContactNumbers) {
		toSerialize["contactNumbers"] = o.ContactNumbers
	}
	if !IsNil(o.CurrencyExchangeRates) {
		toSerialize["currencyExchangeRates"] = o.CurrencyExchangeRates
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.HotelAmenities) {
		toSerialize["hotelAmenities"] = o.HotelAmenities
	}
	if !IsNil(o.HotelCityCode) {
		toSerialize["hotelCityCode"] = o.HotelCityCode
	}
	if !IsNil(o.HotelCodeContext) {
		toSerialize["hotelCodeContext"] = o.HotelCodeContext
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.HotelType) {
		toSerialize["hotelType"] = o.HotelType
	}
	if !IsNil(o.InventoryRooms) {
		toSerialize["inventoryRooms"] = o.InventoryRooms
	}
	if !IsNil(o.MaxRate) {
		toSerialize["maxRate"] = o.MaxRate
	}
	if !IsNil(o.MinRate) {
		toSerialize["minRate"] = o.MinRate
	}
	if !IsNil(o.Negotiated) {
		toSerialize["negotiated"] = o.Negotiated
	}
	if !IsNil(o.NewAlternateHotelCode) {
		toSerialize["newAlternateHotelCode"] = o.NewAlternateHotelCode
	}
	if !IsNil(o.RateRoomDetails) {
		toSerialize["rateRoomDetails"] = o.RateRoomDetails
	}
	if !IsNil(o.ReciprocalRelationship) {
		toSerialize["reciprocalRelationship"] = o.ReciprocalRelationship
	}
	if !IsNil(o.RelativePosition) {
		toSerialize["relativePosition"] = o.RelativePosition
	}
	if !IsNil(o.SellMessages) {
		toSerialize["sellMessages"] = o.SellMessages
	}
	return toSerialize, nil
}

type NullableAlternateHotelType struct {
	value *AlternateHotelType
	isSet bool
}

func (v NullableAlternateHotelType) Get() *AlternateHotelType {
	return v.value
}

func (v *NullableAlternateHotelType) Set(val *AlternateHotelType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlternateHotelType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlternateHotelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlternateHotelType(val *AlternateHotelType) *NullableAlternateHotelType {
	return &NullableAlternateHotelType{value: val, isSet: true}
}

func (v NullableAlternateHotelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlternateHotelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


