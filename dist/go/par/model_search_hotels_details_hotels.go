/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the SearchHotelsDetailsHotels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchHotelsDetailsHotels{}

// SearchHotelsDetailsHotels struct for SearchHotelsDetailsHotels
type SearchHotelsDetailsHotels struct {
	Hotel []HotelSummaryInfoType `json:"hotel,omitempty"`
}

// NewSearchHotelsDetailsHotels instantiates a new SearchHotelsDetailsHotels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchHotelsDetailsHotels() *SearchHotelsDetailsHotels {
	this := SearchHotelsDetailsHotels{}
	return &this
}

// NewSearchHotelsDetailsHotelsWithDefaults instantiates a new SearchHotelsDetailsHotels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchHotelsDetailsHotelsWithDefaults() *SearchHotelsDetailsHotels {
	this := SearchHotelsDetailsHotels{}
	return &this
}

// GetHotel returns the Hotel field value if set, zero value otherwise.
func (o *SearchHotelsDetailsHotels) GetHotel() []HotelSummaryInfoType {
	if o == nil || IsNil(o.Hotel) {
		var ret []HotelSummaryInfoType
		return ret
	}
	return o.Hotel
}

// GetHotelOk returns a tuple with the Hotel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchHotelsDetailsHotels) GetHotelOk() ([]HotelSummaryInfoType, bool) {
	if o == nil || IsNil(o.Hotel) {
		return nil, false
	}
	return o.Hotel, true
}

// HasHotel returns a boolean if a field has been set.
func (o *SearchHotelsDetailsHotels) HasHotel() bool {
	if o != nil && !IsNil(o.Hotel) {
		return true
	}

	return false
}

// SetHotel gets a reference to the given []HotelSummaryInfoType and assigns it to the Hotel field.
func (o *SearchHotelsDetailsHotels) SetHotel(v []HotelSummaryInfoType) {
	o.Hotel = v
}

func (o SearchHotelsDetailsHotels) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchHotelsDetailsHotels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hotel) {
		toSerialize["hotel"] = o.Hotel
	}
	return toSerialize, nil
}

type NullableSearchHotelsDetailsHotels struct {
	value *SearchHotelsDetailsHotels
	isSet bool
}

func (v NullableSearchHotelsDetailsHotels) Get() *SearchHotelsDetailsHotels {
	return v.value
}

func (v *NullableSearchHotelsDetailsHotels) Set(val *SearchHotelsDetailsHotels) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchHotelsDetailsHotels) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchHotelsDetailsHotels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchHotelsDetailsHotels(val *SearchHotelsDetailsHotels) *NullableSearchHotelsDetailsHotels {
	return &NullableSearchHotelsDetailsHotels{value: val, isSet: true}
}

func (v NullableSearchHotelsDetailsHotels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchHotelsDetailsHotels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


