/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
	"fmt"
)

// RestrictionStatusesType the model 'RestrictionStatusesType'
type RestrictionStatusesType string

// List of restrictionStatusesType
const (
	RESTRICTIONSTATUSESTYPE_CLOSED RestrictionStatusesType = "Closed"
	RESTRICTIONSTATUSESTYPE_CLOSED_FOR_ARRIVAL RestrictionStatusesType = "ClosedForArrival"
	RESTRICTIONSTATUSESTYPE_CLOSED_FOR_DEPARTURE RestrictionStatusesType = "ClosedForDeparture"
	RESTRICTIONSTATUSESTYPE_MINIMUM_STAY_THROUGH RestrictionStatusesType = "MinimumStayThrough"
	RESTRICTIONSTATUSESTYPE_MAXIMUM_STAY_THROUGH RestrictionStatusesType = "MaximumStayThrough"
	RESTRICTIONSTATUSESTYPE_MINIMUM_LENGTH_OF_STAY RestrictionStatusesType = "MinimumLengthOfStay"
	RESTRICTIONSTATUSESTYPE_MAXIMUM_LENGTH_OF_STAY RestrictionStatusesType = "MaximumLengthOfStay"
	RESTRICTIONSTATUSESTYPE_LOS_NOT_AVAILABLE RestrictionStatusesType = "LOSNotAvailable"
	RESTRICTIONSTATUSESTYPE_MINIMUM_ADVANCE_BOOKING RestrictionStatusesType = "MinimumAdvanceBooking"
	RESTRICTIONSTATUSESTYPE_MAXIMUM_ADVANCE_BOOKING RestrictionStatusesType = "MaximumAdvanceBooking"
	RESTRICTIONSTATUSESTYPE_OPEN RestrictionStatusesType = "Open"
	RESTRICTIONSTATUSESTYPE_OPEN_FOR_ARRIVAL RestrictionStatusesType = "OpenForArrival"
	RESTRICTIONSTATUSESTYPE_OPEN_FOR_DEPARTURE RestrictionStatusesType = "OpenForDeparture"
)

// All allowed values of RestrictionStatusesType enum
var AllowedRestrictionStatusesTypeEnumValues = []RestrictionStatusesType{
	"Closed",
	"ClosedForArrival",
	"ClosedForDeparture",
	"MinimumStayThrough",
	"MaximumStayThrough",
	"MinimumLengthOfStay",
	"MaximumLengthOfStay",
	"LOSNotAvailable",
	"MinimumAdvanceBooking",
	"MaximumAdvanceBooking",
	"Open",
	"OpenForArrival",
	"OpenForDeparture",
}

func (v *RestrictionStatusesType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RestrictionStatusesType(value)
	for _, existing := range AllowedRestrictionStatusesTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RestrictionStatusesType", value)
}

// NewRestrictionStatusesTypeFromValue returns a pointer to a valid RestrictionStatusesType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRestrictionStatusesTypeFromValue(v string) (*RestrictionStatusesType, error) {
	ev := RestrictionStatusesType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RestrictionStatusesType: valid values are %v", v, AllowedRestrictionStatusesTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RestrictionStatusesType) IsValid() bool {
	for _, existing := range AllowedRestrictionStatusesTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to restrictionStatusesType value
func (v RestrictionStatusesType) Ptr() *RestrictionStatusesType {
	return &v
}

type NullableRestrictionStatusesType struct {
	value *RestrictionStatusesType
	isSet bool
}

func (v NullableRestrictionStatusesType) Get() *RestrictionStatusesType {
	return v.value
}

func (v *NullableRestrictionStatusesType) Set(val *RestrictionStatusesType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictionStatusesType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictionStatusesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictionStatusesType(val *RestrictionStatusesType) *NullableRestrictionStatusesType {
	return &NullableRestrictionStatusesType{value: val, isSet: true}
}

func (v NullableRestrictionStatusesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictionStatusesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

