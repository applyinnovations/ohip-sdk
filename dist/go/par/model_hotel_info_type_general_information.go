/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the HotelInfoTypeGeneralInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelInfoTypeGeneralInformation{}

// HotelInfoTypeGeneralInformation General Information of the hotel.
type HotelInfoTypeGeneralInformation struct {
	BaseLanguage *string `json:"baseLanguage,omitempty"`
	// The total number of beds in the Hotel.
	BedCount *int32 `json:"bedCount,omitempty"`
	// The official check in time of the Hotel.
	CheckInTime *string `json:"checkInTime,omitempty"`
	// The official check out time of the Hotel.
	CheckOutTime *string `json:"checkOutTime,omitempty"`
	// The total number of floors of the Hotel.
	FloorCount *int32 `json:"floorCount,omitempty"`
	HotelInfoWebsite *URLType `json:"hotelInfoWebsite,omitempty"`
	// The type of the Hotel.
	HotelType *string `json:"hotelType,omitempty"`
	// Latitude of the hotel.
	Latitude *float32 `json:"latitude,omitempty"`
	// Longitude of the hotel.
	Longitude *float32 `json:"longitude,omitempty"`
	// The total number of rooms in the Hotel.
	RoomCount *int32 `json:"roomCount,omitempty"`
}

// NewHotelInfoTypeGeneralInformation instantiates a new HotelInfoTypeGeneralInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelInfoTypeGeneralInformation() *HotelInfoTypeGeneralInformation {
	this := HotelInfoTypeGeneralInformation{}
	return &this
}

// NewHotelInfoTypeGeneralInformationWithDefaults instantiates a new HotelInfoTypeGeneralInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelInfoTypeGeneralInformationWithDefaults() *HotelInfoTypeGeneralInformation {
	this := HotelInfoTypeGeneralInformation{}
	return &this
}

// GetBaseLanguage returns the BaseLanguage field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetBaseLanguage() string {
	if o == nil || IsNil(o.BaseLanguage) {
		var ret string
		return ret
	}
	return *o.BaseLanguage
}

// GetBaseLanguageOk returns a tuple with the BaseLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetBaseLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.BaseLanguage) {
		return nil, false
	}
	return o.BaseLanguage, true
}

// HasBaseLanguage returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasBaseLanguage() bool {
	if o != nil && !IsNil(o.BaseLanguage) {
		return true
	}

	return false
}

// SetBaseLanguage gets a reference to the given string and assigns it to the BaseLanguage field.
func (o *HotelInfoTypeGeneralInformation) SetBaseLanguage(v string) {
	o.BaseLanguage = &v
}

// GetBedCount returns the BedCount field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetBedCount() int32 {
	if o == nil || IsNil(o.BedCount) {
		var ret int32
		return ret
	}
	return *o.BedCount
}

// GetBedCountOk returns a tuple with the BedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetBedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BedCount) {
		return nil, false
	}
	return o.BedCount, true
}

// HasBedCount returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasBedCount() bool {
	if o != nil && !IsNil(o.BedCount) {
		return true
	}

	return false
}

// SetBedCount gets a reference to the given int32 and assigns it to the BedCount field.
func (o *HotelInfoTypeGeneralInformation) SetBedCount(v int32) {
	o.BedCount = &v
}

// GetCheckInTime returns the CheckInTime field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetCheckInTime() string {
	if o == nil || IsNil(o.CheckInTime) {
		var ret string
		return ret
	}
	return *o.CheckInTime
}

// GetCheckInTimeOk returns a tuple with the CheckInTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetCheckInTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CheckInTime) {
		return nil, false
	}
	return o.CheckInTime, true
}

// HasCheckInTime returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasCheckInTime() bool {
	if o != nil && !IsNil(o.CheckInTime) {
		return true
	}

	return false
}

// SetCheckInTime gets a reference to the given string and assigns it to the CheckInTime field.
func (o *HotelInfoTypeGeneralInformation) SetCheckInTime(v string) {
	o.CheckInTime = &v
}

// GetCheckOutTime returns the CheckOutTime field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetCheckOutTime() string {
	if o == nil || IsNil(o.CheckOutTime) {
		var ret string
		return ret
	}
	return *o.CheckOutTime
}

// GetCheckOutTimeOk returns a tuple with the CheckOutTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetCheckOutTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CheckOutTime) {
		return nil, false
	}
	return o.CheckOutTime, true
}

// HasCheckOutTime returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasCheckOutTime() bool {
	if o != nil && !IsNil(o.CheckOutTime) {
		return true
	}

	return false
}

// SetCheckOutTime gets a reference to the given string and assigns it to the CheckOutTime field.
func (o *HotelInfoTypeGeneralInformation) SetCheckOutTime(v string) {
	o.CheckOutTime = &v
}

// GetFloorCount returns the FloorCount field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetFloorCount() int32 {
	if o == nil || IsNil(o.FloorCount) {
		var ret int32
		return ret
	}
	return *o.FloorCount
}

// GetFloorCountOk returns a tuple with the FloorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetFloorCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FloorCount) {
		return nil, false
	}
	return o.FloorCount, true
}

// HasFloorCount returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasFloorCount() bool {
	if o != nil && !IsNil(o.FloorCount) {
		return true
	}

	return false
}

// SetFloorCount gets a reference to the given int32 and assigns it to the FloorCount field.
func (o *HotelInfoTypeGeneralInformation) SetFloorCount(v int32) {
	o.FloorCount = &v
}

// GetHotelInfoWebsite returns the HotelInfoWebsite field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetHotelInfoWebsite() URLType {
	if o == nil || IsNil(o.HotelInfoWebsite) {
		var ret URLType
		return ret
	}
	return *o.HotelInfoWebsite
}

// GetHotelInfoWebsiteOk returns a tuple with the HotelInfoWebsite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetHotelInfoWebsiteOk() (*URLType, bool) {
	if o == nil || IsNil(o.HotelInfoWebsite) {
		return nil, false
	}
	return o.HotelInfoWebsite, true
}

// HasHotelInfoWebsite returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasHotelInfoWebsite() bool {
	if o != nil && !IsNil(o.HotelInfoWebsite) {
		return true
	}

	return false
}

// SetHotelInfoWebsite gets a reference to the given URLType and assigns it to the HotelInfoWebsite field.
func (o *HotelInfoTypeGeneralInformation) SetHotelInfoWebsite(v URLType) {
	o.HotelInfoWebsite = &v
}

// GetHotelType returns the HotelType field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetHotelType() string {
	if o == nil || IsNil(o.HotelType) {
		var ret string
		return ret
	}
	return *o.HotelType
}

// GetHotelTypeOk returns a tuple with the HotelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetHotelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelType) {
		return nil, false
	}
	return o.HotelType, true
}

// HasHotelType returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasHotelType() bool {
	if o != nil && !IsNil(o.HotelType) {
		return true
	}

	return false
}

// SetHotelType gets a reference to the given string and assigns it to the HotelType field.
func (o *HotelInfoTypeGeneralInformation) SetHotelType(v string) {
	o.HotelType = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *HotelInfoTypeGeneralInformation) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *HotelInfoTypeGeneralInformation) SetLongitude(v float32) {
	o.Longitude = &v
}

// GetRoomCount returns the RoomCount field value if set, zero value otherwise.
func (o *HotelInfoTypeGeneralInformation) GetRoomCount() int32 {
	if o == nil || IsNil(o.RoomCount) {
		var ret int32
		return ret
	}
	return *o.RoomCount
}

// GetRoomCountOk returns a tuple with the RoomCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInfoTypeGeneralInformation) GetRoomCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomCount) {
		return nil, false
	}
	return o.RoomCount, true
}

// HasRoomCount returns a boolean if a field has been set.
func (o *HotelInfoTypeGeneralInformation) HasRoomCount() bool {
	if o != nil && !IsNil(o.RoomCount) {
		return true
	}

	return false
}

// SetRoomCount gets a reference to the given int32 and assigns it to the RoomCount field.
func (o *HotelInfoTypeGeneralInformation) SetRoomCount(v int32) {
	o.RoomCount = &v
}

func (o HotelInfoTypeGeneralInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelInfoTypeGeneralInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseLanguage) {
		toSerialize["baseLanguage"] = o.BaseLanguage
	}
	if !IsNil(o.BedCount) {
		toSerialize["bedCount"] = o.BedCount
	}
	if !IsNil(o.CheckInTime) {
		toSerialize["checkInTime"] = o.CheckInTime
	}
	if !IsNil(o.CheckOutTime) {
		toSerialize["checkOutTime"] = o.CheckOutTime
	}
	if !IsNil(o.FloorCount) {
		toSerialize["floorCount"] = o.FloorCount
	}
	if !IsNil(o.HotelInfoWebsite) {
		toSerialize["hotelInfoWebsite"] = o.HotelInfoWebsite
	}
	if !IsNil(o.HotelType) {
		toSerialize["hotelType"] = o.HotelType
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.RoomCount) {
		toSerialize["roomCount"] = o.RoomCount
	}
	return toSerialize, nil
}

type NullableHotelInfoTypeGeneralInformation struct {
	value *HotelInfoTypeGeneralInformation
	isSet bool
}

func (v NullableHotelInfoTypeGeneralInformation) Get() *HotelInfoTypeGeneralInformation {
	return v.value
}

func (v *NullableHotelInfoTypeGeneralInformation) Set(val *HotelInfoTypeGeneralInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelInfoTypeGeneralInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelInfoTypeGeneralInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelInfoTypeGeneralInformation(val *HotelInfoTypeGeneralInformation) *NullableHotelInfoTypeGeneralInformation {
	return &NullableHotelInfoTypeGeneralInformation{value: val, isSet: true}
}

func (v NullableHotelInfoTypeGeneralInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelInfoTypeGeneralInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


