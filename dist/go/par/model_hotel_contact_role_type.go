/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
	"fmt"
)

// HotelContactRoleType The contact's role in the hotel. Possible values are Lead, General, and Contract.
type HotelContactRoleType string

// List of hotelContactRoleType
const (
	HOTELCONTACTROLETYPE_LEAD HotelContactRoleType = "Lead"
	HOTELCONTACTROLETYPE_GENERAL HotelContactRoleType = "General"
	HOTELCONTACTROLETYPE_CONTRACT HotelContactRoleType = "Contract"
)

// All allowed values of HotelContactRoleType enum
var AllowedHotelContactRoleTypeEnumValues = []HotelContactRoleType{
	"Lead",
	"General",
	"Contract",
}

func (v *HotelContactRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HotelContactRoleType(value)
	for _, existing := range AllowedHotelContactRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HotelContactRoleType", value)
}

// NewHotelContactRoleTypeFromValue returns a pointer to a valid HotelContactRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHotelContactRoleTypeFromValue(v string) (*HotelContactRoleType, error) {
	ev := HotelContactRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HotelContactRoleType: valid values are %v", v, AllowedHotelContactRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HotelContactRoleType) IsValid() bool {
	for _, existing := range AllowedHotelContactRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hotelContactRoleType value
func (v HotelContactRoleType) Ptr() *HotelContactRoleType {
	return &v
}

type NullableHotelContactRoleType struct {
	value *HotelContactRoleType
	isSet bool
}

func (v NullableHotelContactRoleType) Get() *HotelContactRoleType {
	return v.value
}

func (v *NullableHotelContactRoleType) Set(val *HotelContactRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelContactRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelContactRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelContactRoleType(val *HotelContactRoleType) *NullableHotelContactRoleType {
	return &NullableHotelContactRoleType{value: val, isSet: true}
}

func (v NullableHotelContactRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelContactRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

