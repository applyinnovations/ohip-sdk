/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the AlternateAvailDateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlternateAvailDateType{}

// AlternateAvailDateType Type containing information about an alternate date.
type AlternateAvailDateType struct {
	RateAmount *CurrencyAmountType `json:"rateAmount,omitempty"`
	// A specific date from the alternate dates.
	Date *string `json:"date,omitempty"`
	Status *AvailabilityStatusType `json:"status,omitempty"`
}

// NewAlternateAvailDateType instantiates a new AlternateAvailDateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlternateAvailDateType() *AlternateAvailDateType {
	this := AlternateAvailDateType{}
	return &this
}

// NewAlternateAvailDateTypeWithDefaults instantiates a new AlternateAvailDateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlternateAvailDateTypeWithDefaults() *AlternateAvailDateType {
	this := AlternateAvailDateType{}
	return &this
}

// GetRateAmount returns the RateAmount field value if set, zero value otherwise.
func (o *AlternateAvailDateType) GetRateAmount() CurrencyAmountType {
	if o == nil || IsNil(o.RateAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RateAmount
}

// GetRateAmountOk returns a tuple with the RateAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateAvailDateType) GetRateAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RateAmount) {
		return nil, false
	}
	return o.RateAmount, true
}

// HasRateAmount returns a boolean if a field has been set.
func (o *AlternateAvailDateType) HasRateAmount() bool {
	if o != nil && !IsNil(o.RateAmount) {
		return true
	}

	return false
}

// SetRateAmount gets a reference to the given CurrencyAmountType and assigns it to the RateAmount field.
func (o *AlternateAvailDateType) SetRateAmount(v CurrencyAmountType) {
	o.RateAmount = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AlternateAvailDateType) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateAvailDateType) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AlternateAvailDateType) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *AlternateAvailDateType) SetDate(v string) {
	o.Date = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AlternateAvailDateType) GetStatus() AvailabilityStatusType {
	if o == nil || IsNil(o.Status) {
		var ret AvailabilityStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlternateAvailDateType) GetStatusOk() (*AvailabilityStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AlternateAvailDateType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AvailabilityStatusType and assigns it to the Status field.
func (o *AlternateAvailDateType) SetStatus(v AvailabilityStatusType) {
	o.Status = &v
}

func (o AlternateAvailDateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlternateAvailDateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RateAmount) {
		toSerialize["rateAmount"] = o.RateAmount
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableAlternateAvailDateType struct {
	value *AlternateAvailDateType
	isSet bool
}

func (v NullableAlternateAvailDateType) Get() *AlternateAvailDateType {
	return v.value
}

func (v *NullableAlternateAvailDateType) Set(val *AlternateAvailDateType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlternateAvailDateType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlternateAvailDateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlternateAvailDateType(val *AlternateAvailDateType) *NullableAlternateAvailDateType {
	return &NullableAlternateAvailDateType{value: val, isSet: true}
}

func (v NullableAlternateAvailDateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlternateAvailDateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


