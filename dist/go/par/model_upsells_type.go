/*
OPERA Cloud Price Availability Rate API

APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package par

import (
	"encoding/json"
)

// checks if the UpsellsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsellsType{}

// UpsellsType List of upsell information
type UpsellsType struct {
	// Holds upsell information
	Upsell []UpsellType `json:"upsell,omitempty"`
	AvailableAmount *AmountPointsType `json:"availableAmount,omitempty"`
}

// NewUpsellsType instantiates a new UpsellsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsellsType() *UpsellsType {
	this := UpsellsType{}
	return &this
}

// NewUpsellsTypeWithDefaults instantiates a new UpsellsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsellsTypeWithDefaults() *UpsellsType {
	this := UpsellsType{}
	return &this
}

// GetUpsell returns the Upsell field value if set, zero value otherwise.
func (o *UpsellsType) GetUpsell() []UpsellType {
	if o == nil || IsNil(o.Upsell) {
		var ret []UpsellType
		return ret
	}
	return o.Upsell
}

// GetUpsellOk returns a tuple with the Upsell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsellsType) GetUpsellOk() ([]UpsellType, bool) {
	if o == nil || IsNil(o.Upsell) {
		return nil, false
	}
	return o.Upsell, true
}

// HasUpsell returns a boolean if a field has been set.
func (o *UpsellsType) HasUpsell() bool {
	if o != nil && !IsNil(o.Upsell) {
		return true
	}

	return false
}

// SetUpsell gets a reference to the given []UpsellType and assigns it to the Upsell field.
func (o *UpsellsType) SetUpsell(v []UpsellType) {
	o.Upsell = v
}

// GetAvailableAmount returns the AvailableAmount field value if set, zero value otherwise.
func (o *UpsellsType) GetAvailableAmount() AmountPointsType {
	if o == nil || IsNil(o.AvailableAmount) {
		var ret AmountPointsType
		return ret
	}
	return *o.AvailableAmount
}

// GetAvailableAmountOk returns a tuple with the AvailableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsellsType) GetAvailableAmountOk() (*AmountPointsType, bool) {
	if o == nil || IsNil(o.AvailableAmount) {
		return nil, false
	}
	return o.AvailableAmount, true
}

// HasAvailableAmount returns a boolean if a field has been set.
func (o *UpsellsType) HasAvailableAmount() bool {
	if o != nil && !IsNil(o.AvailableAmount) {
		return true
	}

	return false
}

// SetAvailableAmount gets a reference to the given AmountPointsType and assigns it to the AvailableAmount field.
func (o *UpsellsType) SetAvailableAmount(v AmountPointsType) {
	o.AvailableAmount = &v
}

func (o UpsellsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsellsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Upsell) {
		toSerialize["upsell"] = o.Upsell
	}
	if !IsNil(o.AvailableAmount) {
		toSerialize["availableAmount"] = o.AvailableAmount
	}
	return toSerialize, nil
}

type NullableUpsellsType struct {
	value *UpsellsType
	isSet bool
}

func (v NullableUpsellsType) Get() *UpsellsType {
	return v.value
}

func (v *NullableUpsellsType) Set(val *UpsellsType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsellsType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsellsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsellsType(val *UpsellsType) *NullableUpsellsType {
	return &NullableUpsellsType{value: val, isSet: true}
}

func (v NullableUpsellsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsellsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


