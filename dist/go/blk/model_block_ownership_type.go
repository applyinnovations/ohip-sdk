/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// BlockOwnershipType Specifies the type of the owner associated with the business block(Block/Rooms/Catering).
type BlockOwnershipType string

// List of blockOwnershipType
const (
	BLOCKOWNERSHIPTYPE_BLOCK BlockOwnershipType = "Block"
	BLOCKOWNERSHIPTYPE_ROOMS BlockOwnershipType = "Rooms"
	BLOCKOWNERSHIPTYPE_CATERING BlockOwnershipType = "Catering"
)

// All allowed values of BlockOwnershipType enum
var AllowedBlockOwnershipTypeEnumValues = []BlockOwnershipType{
	"Block",
	"Rooms",
	"Catering",
}

func (v *BlockOwnershipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockOwnershipType(value)
	for _, existing := range AllowedBlockOwnershipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockOwnershipType", value)
}

// NewBlockOwnershipTypeFromValue returns a pointer to a valid BlockOwnershipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockOwnershipTypeFromValue(v string) (*BlockOwnershipType, error) {
	ev := BlockOwnershipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockOwnershipType: valid values are %v", v, AllowedBlockOwnershipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockOwnershipType) IsValid() bool {
	for _, existing := range AllowedBlockOwnershipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockOwnershipType value
func (v BlockOwnershipType) Ptr() *BlockOwnershipType {
	return &v
}

type NullableBlockOwnershipType struct {
	value *BlockOwnershipType
	isSet bool
}

func (v NullableBlockOwnershipType) Get() *BlockOwnershipType {
	return v.value
}

func (v *NullableBlockOwnershipType) Set(val *BlockOwnershipType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockOwnershipType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockOwnershipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockOwnershipType(val *BlockOwnershipType) *NullableBlockOwnershipType {
	return &NullableBlockOwnershipType{value: val, isSet: true}
}

func (v NullableBlockOwnershipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockOwnershipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

