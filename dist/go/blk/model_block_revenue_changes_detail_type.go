/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockRevenueChangesDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRevenueChangesDetailType{}

// BlockRevenueChangesDetailType struct for BlockRevenueChangesDetailType
type BlockRevenueChangesDetailType struct {
	// Unique Code to identify the owner.
	BlockOwner []BlockOwnersType `json:"blockOwner,omitempty"`
	// Change date.
	ChangeDate *string `json:"changeDate,omitempty"`
	// Number of nights room is occupied.
	Nights *int32 `json:"nights,omitempty"`
	RoomRevenue *CurrencyAmountType `json:"roomRevenue,omitempty"`
	// Unique Code to identify room status.
	RoomStatus *string `json:"roomStatus,omitempty"`
	// Date of stay.
	StayDate *string `json:"stayDate,omitempty"`
	UserDetails *LogUserInfoType `json:"userDetails,omitempty"`
}

// NewBlockRevenueChangesDetailType instantiates a new BlockRevenueChangesDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRevenueChangesDetailType() *BlockRevenueChangesDetailType {
	this := BlockRevenueChangesDetailType{}
	return &this
}

// NewBlockRevenueChangesDetailTypeWithDefaults instantiates a new BlockRevenueChangesDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRevenueChangesDetailTypeWithDefaults() *BlockRevenueChangesDetailType {
	this := BlockRevenueChangesDetailType{}
	return &this
}

// GetBlockOwner returns the BlockOwner field value if set, zero value otherwise.
func (o *BlockRevenueChangesDetailType) GetBlockOwner() []BlockOwnersType {
	if o == nil || IsNil(o.BlockOwner) {
		var ret []BlockOwnersType
		return ret
	}
	return o.BlockOwner
}

// GetBlockOwnerOk returns a tuple with the BlockOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRevenueChangesDetailType) GetBlockOwnerOk() ([]BlockOwnersType, bool) {
	if o == nil || IsNil(o.BlockOwner) {
		return nil, false
	}
	return o.BlockOwner, true
}

// HasBlockOwner returns a boolean if a field has been set.
func (o *BlockRevenueChangesDetailType) HasBlockOwner() bool {
	if o != nil && !IsNil(o.BlockOwner) {
		return true
	}

	return false
}

// SetBlockOwner gets a reference to the given []BlockOwnersType and assigns it to the BlockOwner field.
func (o *BlockRevenueChangesDetailType) SetBlockOwner(v []BlockOwnersType) {
	o.BlockOwner = v
}

// GetChangeDate returns the ChangeDate field value if set, zero value otherwise.
func (o *BlockRevenueChangesDetailType) GetChangeDate() string {
	if o == nil || IsNil(o.ChangeDate) {
		var ret string
		return ret
	}
	return *o.ChangeDate
}

// GetChangeDateOk returns a tuple with the ChangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRevenueChangesDetailType) GetChangeDateOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeDate) {
		return nil, false
	}
	return o.ChangeDate, true
}

// HasChangeDate returns a boolean if a field has been set.
func (o *BlockRevenueChangesDetailType) HasChangeDate() bool {
	if o != nil && !IsNil(o.ChangeDate) {
		return true
	}

	return false
}

// SetChangeDate gets a reference to the given string and assigns it to the ChangeDate field.
func (o *BlockRevenueChangesDetailType) SetChangeDate(v string) {
	o.ChangeDate = &v
}

// GetNights returns the Nights field value if set, zero value otherwise.
func (o *BlockRevenueChangesDetailType) GetNights() int32 {
	if o == nil || IsNil(o.Nights) {
		var ret int32
		return ret
	}
	return *o.Nights
}

// GetNightsOk returns a tuple with the Nights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRevenueChangesDetailType) GetNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.Nights) {
		return nil, false
	}
	return o.Nights, true
}

// HasNights returns a boolean if a field has been set.
func (o *BlockRevenueChangesDetailType) HasNights() bool {
	if o != nil && !IsNil(o.Nights) {
		return true
	}

	return false
}

// SetNights gets a reference to the given int32 and assigns it to the Nights field.
func (o *BlockRevenueChangesDetailType) SetNights(v int32) {
	o.Nights = &v
}

// GetRoomRevenue returns the RoomRevenue field value if set, zero value otherwise.
func (o *BlockRevenueChangesDetailType) GetRoomRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.RoomRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RoomRevenue
}

// GetRoomRevenueOk returns a tuple with the RoomRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRevenueChangesDetailType) GetRoomRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RoomRevenue) {
		return nil, false
	}
	return o.RoomRevenue, true
}

// HasRoomRevenue returns a boolean if a field has been set.
func (o *BlockRevenueChangesDetailType) HasRoomRevenue() bool {
	if o != nil && !IsNil(o.RoomRevenue) {
		return true
	}

	return false
}

// SetRoomRevenue gets a reference to the given CurrencyAmountType and assigns it to the RoomRevenue field.
func (o *BlockRevenueChangesDetailType) SetRoomRevenue(v CurrencyAmountType) {
	o.RoomRevenue = &v
}

// GetRoomStatus returns the RoomStatus field value if set, zero value otherwise.
func (o *BlockRevenueChangesDetailType) GetRoomStatus() string {
	if o == nil || IsNil(o.RoomStatus) {
		var ret string
		return ret
	}
	return *o.RoomStatus
}

// GetRoomStatusOk returns a tuple with the RoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRevenueChangesDetailType) GetRoomStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RoomStatus) {
		return nil, false
	}
	return o.RoomStatus, true
}

// HasRoomStatus returns a boolean if a field has been set.
func (o *BlockRevenueChangesDetailType) HasRoomStatus() bool {
	if o != nil && !IsNil(o.RoomStatus) {
		return true
	}

	return false
}

// SetRoomStatus gets a reference to the given string and assigns it to the RoomStatus field.
func (o *BlockRevenueChangesDetailType) SetRoomStatus(v string) {
	o.RoomStatus = &v
}

// GetStayDate returns the StayDate field value if set, zero value otherwise.
func (o *BlockRevenueChangesDetailType) GetStayDate() string {
	if o == nil || IsNil(o.StayDate) {
		var ret string
		return ret
	}
	return *o.StayDate
}

// GetStayDateOk returns a tuple with the StayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRevenueChangesDetailType) GetStayDateOk() (*string, bool) {
	if o == nil || IsNil(o.StayDate) {
		return nil, false
	}
	return o.StayDate, true
}

// HasStayDate returns a boolean if a field has been set.
func (o *BlockRevenueChangesDetailType) HasStayDate() bool {
	if o != nil && !IsNil(o.StayDate) {
		return true
	}

	return false
}

// SetStayDate gets a reference to the given string and assigns it to the StayDate field.
func (o *BlockRevenueChangesDetailType) SetStayDate(v string) {
	o.StayDate = &v
}

// GetUserDetails returns the UserDetails field value if set, zero value otherwise.
func (o *BlockRevenueChangesDetailType) GetUserDetails() LogUserInfoType {
	if o == nil || IsNil(o.UserDetails) {
		var ret LogUserInfoType
		return ret
	}
	return *o.UserDetails
}

// GetUserDetailsOk returns a tuple with the UserDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRevenueChangesDetailType) GetUserDetailsOk() (*LogUserInfoType, bool) {
	if o == nil || IsNil(o.UserDetails) {
		return nil, false
	}
	return o.UserDetails, true
}

// HasUserDetails returns a boolean if a field has been set.
func (o *BlockRevenueChangesDetailType) HasUserDetails() bool {
	if o != nil && !IsNil(o.UserDetails) {
		return true
	}

	return false
}

// SetUserDetails gets a reference to the given LogUserInfoType and assigns it to the UserDetails field.
func (o *BlockRevenueChangesDetailType) SetUserDetails(v LogUserInfoType) {
	o.UserDetails = &v
}

func (o BlockRevenueChangesDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRevenueChangesDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockOwner) {
		toSerialize["blockOwner"] = o.BlockOwner
	}
	if !IsNil(o.ChangeDate) {
		toSerialize["changeDate"] = o.ChangeDate
	}
	if !IsNil(o.Nights) {
		toSerialize["nights"] = o.Nights
	}
	if !IsNil(o.RoomRevenue) {
		toSerialize["roomRevenue"] = o.RoomRevenue
	}
	if !IsNil(o.RoomStatus) {
		toSerialize["roomStatus"] = o.RoomStatus
	}
	if !IsNil(o.StayDate) {
		toSerialize["stayDate"] = o.StayDate
	}
	if !IsNil(o.UserDetails) {
		toSerialize["userDetails"] = o.UserDetails
	}
	return toSerialize, nil
}

type NullableBlockRevenueChangesDetailType struct {
	value *BlockRevenueChangesDetailType
	isSet bool
}

func (v NullableBlockRevenueChangesDetailType) Get() *BlockRevenueChangesDetailType {
	return v.value
}

func (v *NullableBlockRevenueChangesDetailType) Set(val *BlockRevenueChangesDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRevenueChangesDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRevenueChangesDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRevenueChangesDetailType(val *BlockRevenueChangesDetailType) *NullableBlockRevenueChangesDetailType {
	return &NullableBlockRevenueChangesDetailType{value: val, isSet: true}
}

func (v NullableBlockRevenueChangesDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRevenueChangesDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


