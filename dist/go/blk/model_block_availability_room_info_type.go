/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAvailabilityRoomInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAvailabilityRoomInfoType{}

// BlockAvailabilityRoomInfoType Captures occupancy and rate information for a room type.
type BlockAvailabilityRoomInfoType struct {
	// Total occupancy allotted for the room type and stay date.
	Inventory *int32 `json:"inventory,omitempty"`
	// The derived rate amount for the room type, stay date and number of adults.
	Rate *float32 `json:"rate,omitempty"`
	RoomType *string `json:"roomType,omitempty"`
	RoomTypeAttributes *RoomTypeAttributesType `json:"roomTypeAttributes,omitempty"`
	// Available Sell Limit rooms for a Sell Limit block.
	SellLimit *int32 `json:"sellLimit,omitempty"`
	// Amount of an additional product or service that is sold as part of the rate or in addition to the rate.
	Package *float32 `json:"package,omitempty"`
	// Amount of tax generated separately on the revenue and package.
	Tax *float32 `json:"tax,omitempty"`
	// Amount of revenue and package excluding tax.
	Gross *float32 `json:"gross,omitempty"`
	// Amount of revenue and package including tax.
	Net *float32 `json:"net,omitempty"`
	DepositPolicy *DepositPolicyType `json:"depositPolicy,omitempty"`
	CancelPenalty *CancelPenaltyType `json:"cancelPenalty,omitempty"`
}

// NewBlockAvailabilityRoomInfoType instantiates a new BlockAvailabilityRoomInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAvailabilityRoomInfoType() *BlockAvailabilityRoomInfoType {
	this := BlockAvailabilityRoomInfoType{}
	return &this
}

// NewBlockAvailabilityRoomInfoTypeWithDefaults instantiates a new BlockAvailabilityRoomInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAvailabilityRoomInfoTypeWithDefaults() *BlockAvailabilityRoomInfoType {
	this := BlockAvailabilityRoomInfoType{}
	return &this
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetInventory() int32 {
	if o == nil || IsNil(o.Inventory) {
		var ret int32
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetInventoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given int32 and assigns it to the Inventory field.
func (o *BlockAvailabilityRoomInfoType) SetInventory(v int32) {
	o.Inventory = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetRate() float32 {
	if o == nil || IsNil(o.Rate) {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetRateOk() (*float32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *BlockAvailabilityRoomInfoType) SetRate(v float32) {
	o.Rate = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *BlockAvailabilityRoomInfoType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetRoomTypeAttributes returns the RoomTypeAttributes field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetRoomTypeAttributes() RoomTypeAttributesType {
	if o == nil || IsNil(o.RoomTypeAttributes) {
		var ret RoomTypeAttributesType
		return ret
	}
	return *o.RoomTypeAttributes
}

// GetRoomTypeAttributesOk returns a tuple with the RoomTypeAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetRoomTypeAttributesOk() (*RoomTypeAttributesType, bool) {
	if o == nil || IsNil(o.RoomTypeAttributes) {
		return nil, false
	}
	return o.RoomTypeAttributes, true
}

// HasRoomTypeAttributes returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasRoomTypeAttributes() bool {
	if o != nil && !IsNil(o.RoomTypeAttributes) {
		return true
	}

	return false
}

// SetRoomTypeAttributes gets a reference to the given RoomTypeAttributesType and assigns it to the RoomTypeAttributes field.
func (o *BlockAvailabilityRoomInfoType) SetRoomTypeAttributes(v RoomTypeAttributesType) {
	o.RoomTypeAttributes = &v
}

// GetSellLimit returns the SellLimit field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetSellLimit() int32 {
	if o == nil || IsNil(o.SellLimit) {
		var ret int32
		return ret
	}
	return *o.SellLimit
}

// GetSellLimitOk returns a tuple with the SellLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetSellLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.SellLimit) {
		return nil, false
	}
	return o.SellLimit, true
}

// HasSellLimit returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasSellLimit() bool {
	if o != nil && !IsNil(o.SellLimit) {
		return true
	}

	return false
}

// SetSellLimit gets a reference to the given int32 and assigns it to the SellLimit field.
func (o *BlockAvailabilityRoomInfoType) SetSellLimit(v int32) {
	o.SellLimit = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetPackage() float32 {
	if o == nil || IsNil(o.Package) {
		var ret float32
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetPackageOk() (*float32, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given float32 and assigns it to the Package field.
func (o *BlockAvailabilityRoomInfoType) SetPackage(v float32) {
	o.Package = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetTax() float32 {
	if o == nil || IsNil(o.Tax) {
		var ret float32
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.Tax) {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasTax() bool {
	if o != nil && !IsNil(o.Tax) {
		return true
	}

	return false
}

// SetTax gets a reference to the given float32 and assigns it to the Tax field.
func (o *BlockAvailabilityRoomInfoType) SetTax(v float32) {
	o.Tax = &v
}

// GetGross returns the Gross field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetGross() float32 {
	if o == nil || IsNil(o.Gross) {
		var ret float32
		return ret
	}
	return *o.Gross
}

// GetGrossOk returns a tuple with the Gross field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetGrossOk() (*float32, bool) {
	if o == nil || IsNil(o.Gross) {
		return nil, false
	}
	return o.Gross, true
}

// HasGross returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasGross() bool {
	if o != nil && !IsNil(o.Gross) {
		return true
	}

	return false
}

// SetGross gets a reference to the given float32 and assigns it to the Gross field.
func (o *BlockAvailabilityRoomInfoType) SetGross(v float32) {
	o.Gross = &v
}

// GetNet returns the Net field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetNet() float32 {
	if o == nil || IsNil(o.Net) {
		var ret float32
		return ret
	}
	return *o.Net
}

// GetNetOk returns a tuple with the Net field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetNetOk() (*float32, bool) {
	if o == nil || IsNil(o.Net) {
		return nil, false
	}
	return o.Net, true
}

// HasNet returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasNet() bool {
	if o != nil && !IsNil(o.Net) {
		return true
	}

	return false
}

// SetNet gets a reference to the given float32 and assigns it to the Net field.
func (o *BlockAvailabilityRoomInfoType) SetNet(v float32) {
	o.Net = &v
}

// GetDepositPolicy returns the DepositPolicy field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetDepositPolicy() DepositPolicyType {
	if o == nil || IsNil(o.DepositPolicy) {
		var ret DepositPolicyType
		return ret
	}
	return *o.DepositPolicy
}

// GetDepositPolicyOk returns a tuple with the DepositPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetDepositPolicyOk() (*DepositPolicyType, bool) {
	if o == nil || IsNil(o.DepositPolicy) {
		return nil, false
	}
	return o.DepositPolicy, true
}

// HasDepositPolicy returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasDepositPolicy() bool {
	if o != nil && !IsNil(o.DepositPolicy) {
		return true
	}

	return false
}

// SetDepositPolicy gets a reference to the given DepositPolicyType and assigns it to the DepositPolicy field.
func (o *BlockAvailabilityRoomInfoType) SetDepositPolicy(v DepositPolicyType) {
	o.DepositPolicy = &v
}

// GetCancelPenalty returns the CancelPenalty field value if set, zero value otherwise.
func (o *BlockAvailabilityRoomInfoType) GetCancelPenalty() CancelPenaltyType {
	if o == nil || IsNil(o.CancelPenalty) {
		var ret CancelPenaltyType
		return ret
	}
	return *o.CancelPenalty
}

// GetCancelPenaltyOk returns a tuple with the CancelPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityRoomInfoType) GetCancelPenaltyOk() (*CancelPenaltyType, bool) {
	if o == nil || IsNil(o.CancelPenalty) {
		return nil, false
	}
	return o.CancelPenalty, true
}

// HasCancelPenalty returns a boolean if a field has been set.
func (o *BlockAvailabilityRoomInfoType) HasCancelPenalty() bool {
	if o != nil && !IsNil(o.CancelPenalty) {
		return true
	}

	return false
}

// SetCancelPenalty gets a reference to the given CancelPenaltyType and assigns it to the CancelPenalty field.
func (o *BlockAvailabilityRoomInfoType) SetCancelPenalty(v CancelPenaltyType) {
	o.CancelPenalty = &v
}

func (o BlockAvailabilityRoomInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAvailabilityRoomInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.RoomTypeAttributes) {
		toSerialize["roomTypeAttributes"] = o.RoomTypeAttributes
	}
	if !IsNil(o.SellLimit) {
		toSerialize["sellLimit"] = o.SellLimit
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.Tax) {
		toSerialize["tax"] = o.Tax
	}
	if !IsNil(o.Gross) {
		toSerialize["gross"] = o.Gross
	}
	if !IsNil(o.Net) {
		toSerialize["net"] = o.Net
	}
	if !IsNil(o.DepositPolicy) {
		toSerialize["depositPolicy"] = o.DepositPolicy
	}
	if !IsNil(o.CancelPenalty) {
		toSerialize["cancelPenalty"] = o.CancelPenalty
	}
	return toSerialize, nil
}

type NullableBlockAvailabilityRoomInfoType struct {
	value *BlockAvailabilityRoomInfoType
	isSet bool
}

func (v NullableBlockAvailabilityRoomInfoType) Get() *BlockAvailabilityRoomInfoType {
	return v.value
}

func (v *NullableBlockAvailabilityRoomInfoType) Set(val *BlockAvailabilityRoomInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAvailabilityRoomInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAvailabilityRoomInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAvailabilityRoomInfoType(val *BlockAvailabilityRoomInfoType) *NullableBlockAvailabilityRoomInfoType {
	return &NullableBlockAvailabilityRoomInfoType{value: val, isSet: true}
}

func (v NullableBlockAvailabilityRoomInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAvailabilityRoomInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


