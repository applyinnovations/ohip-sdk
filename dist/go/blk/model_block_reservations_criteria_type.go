/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockReservationsCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockReservationsCriteriaType{}

// BlockReservationsCriteriaType Indicates the filter criteria to identify the block reservations that should implement the same changes as the reference reservation.
type BlockReservationsCriteriaType struct {
	ApplyChangesTo *BlockApplyChangesToType `json:"applyChangesTo,omitempty"`
	// Unique identifier for a block reservation.
	Reservations []BlockReservationId `json:"reservations,omitempty"`
	StayOn *BlockReservationsCriteriaTypeStayOn `json:"stayOn,omitempty"`
}

// NewBlockReservationsCriteriaType instantiates a new BlockReservationsCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockReservationsCriteriaType() *BlockReservationsCriteriaType {
	this := BlockReservationsCriteriaType{}
	return &this
}

// NewBlockReservationsCriteriaTypeWithDefaults instantiates a new BlockReservationsCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockReservationsCriteriaTypeWithDefaults() *BlockReservationsCriteriaType {
	this := BlockReservationsCriteriaType{}
	return &this
}

// GetApplyChangesTo returns the ApplyChangesTo field value if set, zero value otherwise.
func (o *BlockReservationsCriteriaType) GetApplyChangesTo() BlockApplyChangesToType {
	if o == nil || IsNil(o.ApplyChangesTo) {
		var ret BlockApplyChangesToType
		return ret
	}
	return *o.ApplyChangesTo
}

// GetApplyChangesToOk returns a tuple with the ApplyChangesTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockReservationsCriteriaType) GetApplyChangesToOk() (*BlockApplyChangesToType, bool) {
	if o == nil || IsNil(o.ApplyChangesTo) {
		return nil, false
	}
	return o.ApplyChangesTo, true
}

// HasApplyChangesTo returns a boolean if a field has been set.
func (o *BlockReservationsCriteriaType) HasApplyChangesTo() bool {
	if o != nil && !IsNil(o.ApplyChangesTo) {
		return true
	}

	return false
}

// SetApplyChangesTo gets a reference to the given BlockApplyChangesToType and assigns it to the ApplyChangesTo field.
func (o *BlockReservationsCriteriaType) SetApplyChangesTo(v BlockApplyChangesToType) {
	o.ApplyChangesTo = &v
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *BlockReservationsCriteriaType) GetReservations() []BlockReservationId {
	if o == nil || IsNil(o.Reservations) {
		var ret []BlockReservationId
		return ret
	}
	return o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockReservationsCriteriaType) GetReservationsOk() ([]BlockReservationId, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *BlockReservationsCriteriaType) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given []BlockReservationId and assigns it to the Reservations field.
func (o *BlockReservationsCriteriaType) SetReservations(v []BlockReservationId) {
	o.Reservations = v
}

// GetStayOn returns the StayOn field value if set, zero value otherwise.
func (o *BlockReservationsCriteriaType) GetStayOn() BlockReservationsCriteriaTypeStayOn {
	if o == nil || IsNil(o.StayOn) {
		var ret BlockReservationsCriteriaTypeStayOn
		return ret
	}
	return *o.StayOn
}

// GetStayOnOk returns a tuple with the StayOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockReservationsCriteriaType) GetStayOnOk() (*BlockReservationsCriteriaTypeStayOn, bool) {
	if o == nil || IsNil(o.StayOn) {
		return nil, false
	}
	return o.StayOn, true
}

// HasStayOn returns a boolean if a field has been set.
func (o *BlockReservationsCriteriaType) HasStayOn() bool {
	if o != nil && !IsNil(o.StayOn) {
		return true
	}

	return false
}

// SetStayOn gets a reference to the given BlockReservationsCriteriaTypeStayOn and assigns it to the StayOn field.
func (o *BlockReservationsCriteriaType) SetStayOn(v BlockReservationsCriteriaTypeStayOn) {
	o.StayOn = &v
}

func (o BlockReservationsCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockReservationsCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplyChangesTo) {
		toSerialize["applyChangesTo"] = o.ApplyChangesTo
	}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	if !IsNil(o.StayOn) {
		toSerialize["stayOn"] = o.StayOn
	}
	return toSerialize, nil
}

type NullableBlockReservationsCriteriaType struct {
	value *BlockReservationsCriteriaType
	isSet bool
}

func (v NullableBlockReservationsCriteriaType) Get() *BlockReservationsCriteriaType {
	return v.value
}

func (v *NullableBlockReservationsCriteriaType) Set(val *BlockReservationsCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockReservationsCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockReservationsCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockReservationsCriteriaType(val *BlockReservationsCriteriaType) *NullableBlockReservationsCriteriaType {
	return &NullableBlockReservationsCriteriaType{value: val, isSet: true}
}

func (v NullableBlockReservationsCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockReservationsCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


