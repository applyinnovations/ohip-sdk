/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockDetailsTypeShoulderRatePlanCode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDetailsTypeShoulderRatePlanCode{}

// BlockDetailsTypeShoulderRatePlanCode The shoulder rate plans which cover the block shoulder start and end dates.
type BlockDetailsTypeShoulderRatePlanCode struct {
	// The Rate Plan(s) for the days between the shoulder start date and the actual block start date.
	ShoulderStart []BlockRatePlanInfoType `json:"shoulderStart,omitempty"`
	// The Rate Plan(s) for the days between the actual block end date and the shoulder end date.
	ShoulderEnd []BlockRatePlanInfoType `json:"shoulderEnd,omitempty"`
}

// NewBlockDetailsTypeShoulderRatePlanCode instantiates a new BlockDetailsTypeShoulderRatePlanCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDetailsTypeShoulderRatePlanCode() *BlockDetailsTypeShoulderRatePlanCode {
	this := BlockDetailsTypeShoulderRatePlanCode{}
	return &this
}

// NewBlockDetailsTypeShoulderRatePlanCodeWithDefaults instantiates a new BlockDetailsTypeShoulderRatePlanCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDetailsTypeShoulderRatePlanCodeWithDefaults() *BlockDetailsTypeShoulderRatePlanCode {
	this := BlockDetailsTypeShoulderRatePlanCode{}
	return &this
}

// GetShoulderStart returns the ShoulderStart field value if set, zero value otherwise.
func (o *BlockDetailsTypeShoulderRatePlanCode) GetShoulderStart() []BlockRatePlanInfoType {
	if o == nil || IsNil(o.ShoulderStart) {
		var ret []BlockRatePlanInfoType
		return ret
	}
	return o.ShoulderStart
}

// GetShoulderStartOk returns a tuple with the ShoulderStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypeShoulderRatePlanCode) GetShoulderStartOk() ([]BlockRatePlanInfoType, bool) {
	if o == nil || IsNil(o.ShoulderStart) {
		return nil, false
	}
	return o.ShoulderStart, true
}

// HasShoulderStart returns a boolean if a field has been set.
func (o *BlockDetailsTypeShoulderRatePlanCode) HasShoulderStart() bool {
	if o != nil && !IsNil(o.ShoulderStart) {
		return true
	}

	return false
}

// SetShoulderStart gets a reference to the given []BlockRatePlanInfoType and assigns it to the ShoulderStart field.
func (o *BlockDetailsTypeShoulderRatePlanCode) SetShoulderStart(v []BlockRatePlanInfoType) {
	o.ShoulderStart = v
}

// GetShoulderEnd returns the ShoulderEnd field value if set, zero value otherwise.
func (o *BlockDetailsTypeShoulderRatePlanCode) GetShoulderEnd() []BlockRatePlanInfoType {
	if o == nil || IsNil(o.ShoulderEnd) {
		var ret []BlockRatePlanInfoType
		return ret
	}
	return o.ShoulderEnd
}

// GetShoulderEndOk returns a tuple with the ShoulderEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailsTypeShoulderRatePlanCode) GetShoulderEndOk() ([]BlockRatePlanInfoType, bool) {
	if o == nil || IsNil(o.ShoulderEnd) {
		return nil, false
	}
	return o.ShoulderEnd, true
}

// HasShoulderEnd returns a boolean if a field has been set.
func (o *BlockDetailsTypeShoulderRatePlanCode) HasShoulderEnd() bool {
	if o != nil && !IsNil(o.ShoulderEnd) {
		return true
	}

	return false
}

// SetShoulderEnd gets a reference to the given []BlockRatePlanInfoType and assigns it to the ShoulderEnd field.
func (o *BlockDetailsTypeShoulderRatePlanCode) SetShoulderEnd(v []BlockRatePlanInfoType) {
	o.ShoulderEnd = v
}

func (o BlockDetailsTypeShoulderRatePlanCode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDetailsTypeShoulderRatePlanCode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShoulderStart) {
		toSerialize["shoulderStart"] = o.ShoulderStart
	}
	if !IsNil(o.ShoulderEnd) {
		toSerialize["shoulderEnd"] = o.ShoulderEnd
	}
	return toSerialize, nil
}

type NullableBlockDetailsTypeShoulderRatePlanCode struct {
	value *BlockDetailsTypeShoulderRatePlanCode
	isSet bool
}

func (v NullableBlockDetailsTypeShoulderRatePlanCode) Get() *BlockDetailsTypeShoulderRatePlanCode {
	return v.value
}

func (v *NullableBlockDetailsTypeShoulderRatePlanCode) Set(val *BlockDetailsTypeShoulderRatePlanCode) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDetailsTypeShoulderRatePlanCode) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDetailsTypeShoulderRatePlanCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDetailsTypeShoulderRatePlanCode(val *BlockDetailsTypeShoulderRatePlanCode) *NullableBlockDetailsTypeShoulderRatePlanCode {
	return &NullableBlockDetailsTypeShoulderRatePlanCode{value: val, isSet: true}
}

func (v NullableBlockDetailsTypeShoulderRatePlanCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDetailsTypeShoulderRatePlanCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


