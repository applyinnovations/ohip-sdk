/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockBasicInfos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockBasicInfos{}

// BlockBasicInfos Collection of basic block informatioin
type BlockBasicInfos struct {
	// Contains a collection of basic block information
	Blocks []BlockBasicInfo `json:"blocks,omitempty"`
}

// NewBlockBasicInfos instantiates a new BlockBasicInfos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockBasicInfos() *BlockBasicInfos {
	this := BlockBasicInfos{}
	return &this
}

// NewBlockBasicInfosWithDefaults instantiates a new BlockBasicInfos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockBasicInfosWithDefaults() *BlockBasicInfos {
	this := BlockBasicInfos{}
	return &this
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *BlockBasicInfos) GetBlocks() []BlockBasicInfo {
	if o == nil || IsNil(o.Blocks) {
		var ret []BlockBasicInfo
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockBasicInfos) GetBlocksOk() ([]BlockBasicInfo, bool) {
	if o == nil || IsNil(o.Blocks) {
		return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *BlockBasicInfos) HasBlocks() bool {
	if o != nil && !IsNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []BlockBasicInfo and assigns it to the Blocks field.
func (o *BlockBasicInfos) SetBlocks(v []BlockBasicInfo) {
	o.Blocks = v
}

func (o BlockBasicInfos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockBasicInfos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	return toSerialize, nil
}

type NullableBlockBasicInfos struct {
	value *BlockBasicInfos
	isSet bool
}

func (v NullableBlockBasicInfos) Get() *BlockBasicInfos {
	return v.value
}

func (v *NullableBlockBasicInfos) Set(val *BlockBasicInfos) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockBasicInfos) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockBasicInfos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockBasicInfos(val *BlockBasicInfos) *NullableBlockBasicInfos {
	return &NullableBlockBasicInfos{value: val, isSet: true}
}

func (v NullableBlockBasicInfos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockBasicInfos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


