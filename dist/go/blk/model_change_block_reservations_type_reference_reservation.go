/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ChangeBlockReservationsTypeReferenceReservation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeBlockReservationsTypeReferenceReservation{}

// ChangeBlockReservationsTypeReferenceReservation Contains the pre-change and post-change snapshot of the reference reservation.
type ChangeBlockReservationsTypeReferenceReservation struct {
	PostChangeSnapshot *ReservationSnapshotType `json:"postChangeSnapshot,omitempty"`
	PreChangeSnapshot *ReservationSnapshotType `json:"preChangeSnapshot,omitempty"`
}

// NewChangeBlockReservationsTypeReferenceReservation instantiates a new ChangeBlockReservationsTypeReferenceReservation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeBlockReservationsTypeReferenceReservation() *ChangeBlockReservationsTypeReferenceReservation {
	this := ChangeBlockReservationsTypeReferenceReservation{}
	return &this
}

// NewChangeBlockReservationsTypeReferenceReservationWithDefaults instantiates a new ChangeBlockReservationsTypeReferenceReservation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeBlockReservationsTypeReferenceReservationWithDefaults() *ChangeBlockReservationsTypeReferenceReservation {
	this := ChangeBlockReservationsTypeReferenceReservation{}
	return &this
}

// GetPostChangeSnapshot returns the PostChangeSnapshot field value if set, zero value otherwise.
func (o *ChangeBlockReservationsTypeReferenceReservation) GetPostChangeSnapshot() ReservationSnapshotType {
	if o == nil || IsNil(o.PostChangeSnapshot) {
		var ret ReservationSnapshotType
		return ret
	}
	return *o.PostChangeSnapshot
}

// GetPostChangeSnapshotOk returns a tuple with the PostChangeSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsTypeReferenceReservation) GetPostChangeSnapshotOk() (*ReservationSnapshotType, bool) {
	if o == nil || IsNil(o.PostChangeSnapshot) {
		return nil, false
	}
	return o.PostChangeSnapshot, true
}

// HasPostChangeSnapshot returns a boolean if a field has been set.
func (o *ChangeBlockReservationsTypeReferenceReservation) HasPostChangeSnapshot() bool {
	if o != nil && !IsNil(o.PostChangeSnapshot) {
		return true
	}

	return false
}

// SetPostChangeSnapshot gets a reference to the given ReservationSnapshotType and assigns it to the PostChangeSnapshot field.
func (o *ChangeBlockReservationsTypeReferenceReservation) SetPostChangeSnapshot(v ReservationSnapshotType) {
	o.PostChangeSnapshot = &v
}

// GetPreChangeSnapshot returns the PreChangeSnapshot field value if set, zero value otherwise.
func (o *ChangeBlockReservationsTypeReferenceReservation) GetPreChangeSnapshot() ReservationSnapshotType {
	if o == nil || IsNil(o.PreChangeSnapshot) {
		var ret ReservationSnapshotType
		return ret
	}
	return *o.PreChangeSnapshot
}

// GetPreChangeSnapshotOk returns a tuple with the PreChangeSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsTypeReferenceReservation) GetPreChangeSnapshotOk() (*ReservationSnapshotType, bool) {
	if o == nil || IsNil(o.PreChangeSnapshot) {
		return nil, false
	}
	return o.PreChangeSnapshot, true
}

// HasPreChangeSnapshot returns a boolean if a field has been set.
func (o *ChangeBlockReservationsTypeReferenceReservation) HasPreChangeSnapshot() bool {
	if o != nil && !IsNil(o.PreChangeSnapshot) {
		return true
	}

	return false
}

// SetPreChangeSnapshot gets a reference to the given ReservationSnapshotType and assigns it to the PreChangeSnapshot field.
func (o *ChangeBlockReservationsTypeReferenceReservation) SetPreChangeSnapshot(v ReservationSnapshotType) {
	o.PreChangeSnapshot = &v
}

func (o ChangeBlockReservationsTypeReferenceReservation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeBlockReservationsTypeReferenceReservation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PostChangeSnapshot) {
		toSerialize["postChangeSnapshot"] = o.PostChangeSnapshot
	}
	if !IsNil(o.PreChangeSnapshot) {
		toSerialize["preChangeSnapshot"] = o.PreChangeSnapshot
	}
	return toSerialize, nil
}

type NullableChangeBlockReservationsTypeReferenceReservation struct {
	value *ChangeBlockReservationsTypeReferenceReservation
	isSet bool
}

func (v NullableChangeBlockReservationsTypeReferenceReservation) Get() *ChangeBlockReservationsTypeReferenceReservation {
	return v.value
}

func (v *NullableChangeBlockReservationsTypeReferenceReservation) Set(val *ChangeBlockReservationsTypeReferenceReservation) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeBlockReservationsTypeReferenceReservation) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeBlockReservationsTypeReferenceReservation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeBlockReservationsTypeReferenceReservation(val *ChangeBlockReservationsTypeReferenceReservation) *NullableChangeBlockReservationsTypeReferenceReservation {
	return &NullableChangeBlockReservationsTypeReferenceReservation{value: val, isSet: true}
}

func (v NullableChangeBlockReservationsTypeReferenceReservation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeBlockReservationsTypeReferenceReservation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


