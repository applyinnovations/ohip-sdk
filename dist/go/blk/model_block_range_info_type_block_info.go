/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockRangeInfoTypeBlockInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRangeInfoTypeBlockInfo{}

// BlockRangeInfoTypeBlockInfo Block information needed to perform range operation on the block.
type BlockRangeInfoTypeBlockInfo struct {
	// Block Code
	BlockCode *string `json:"blockCode,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
	// Block Status.
	BlockStatus *string `json:"blockStatus,omitempty"`
	// Block End Date
	EndDate *string `json:"endDate,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	InventoryControl *BlockInventoryControlType `json:"inventoryControl,omitempty"`
	// Block Rate Code.
	RateCode *string `json:"rateCode,omitempty"`
	// Block Shoulder End Date.
	ShoulderEndDate *string `json:"shoulderEndDate,omitempty"`
	// Block Shoulder Start Date.
	ShoulderStartDate *string `json:"shoulderStartDate,omitempty"`
	// Block Start Date
	StartDate *string `json:"startDate,omitempty"`
}

// NewBlockRangeInfoTypeBlockInfo instantiates a new BlockRangeInfoTypeBlockInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRangeInfoTypeBlockInfo() *BlockRangeInfoTypeBlockInfo {
	this := BlockRangeInfoTypeBlockInfo{}
	return &this
}

// NewBlockRangeInfoTypeBlockInfoWithDefaults instantiates a new BlockRangeInfoTypeBlockInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRangeInfoTypeBlockInfoWithDefaults() *BlockRangeInfoTypeBlockInfo {
	this := BlockRangeInfoTypeBlockInfo{}
	return &this
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *BlockRangeInfoTypeBlockInfo) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *BlockRangeInfoTypeBlockInfo) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetBlockStatus returns the BlockStatus field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetBlockStatus() string {
	if o == nil || IsNil(o.BlockStatus) {
		var ret string
		return ret
	}
	return *o.BlockStatus
}

// GetBlockStatusOk returns a tuple with the BlockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetBlockStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BlockStatus) {
		return nil, false
	}
	return o.BlockStatus, true
}

// HasBlockStatus returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasBlockStatus() bool {
	if o != nil && !IsNil(o.BlockStatus) {
		return true
	}

	return false
}

// SetBlockStatus gets a reference to the given string and assigns it to the BlockStatus field.
func (o *BlockRangeInfoTypeBlockInfo) SetBlockStatus(v string) {
	o.BlockStatus = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BlockRangeInfoTypeBlockInfo) SetEndDate(v string) {
	o.EndDate = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockRangeInfoTypeBlockInfo) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInventoryControl returns the InventoryControl field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetInventoryControl() BlockInventoryControlType {
	if o == nil || IsNil(o.InventoryControl) {
		var ret BlockInventoryControlType
		return ret
	}
	return *o.InventoryControl
}

// GetInventoryControlOk returns a tuple with the InventoryControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetInventoryControlOk() (*BlockInventoryControlType, bool) {
	if o == nil || IsNil(o.InventoryControl) {
		return nil, false
	}
	return o.InventoryControl, true
}

// HasInventoryControl returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasInventoryControl() bool {
	if o != nil && !IsNil(o.InventoryControl) {
		return true
	}

	return false
}

// SetInventoryControl gets a reference to the given BlockInventoryControlType and assigns it to the InventoryControl field.
func (o *BlockRangeInfoTypeBlockInfo) SetInventoryControl(v BlockInventoryControlType) {
	o.InventoryControl = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *BlockRangeInfoTypeBlockInfo) SetRateCode(v string) {
	o.RateCode = &v
}

// GetShoulderEndDate returns the ShoulderEndDate field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetShoulderEndDate() string {
	if o == nil || IsNil(o.ShoulderEndDate) {
		var ret string
		return ret
	}
	return *o.ShoulderEndDate
}

// GetShoulderEndDateOk returns a tuple with the ShoulderEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetShoulderEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShoulderEndDate) {
		return nil, false
	}
	return o.ShoulderEndDate, true
}

// HasShoulderEndDate returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasShoulderEndDate() bool {
	if o != nil && !IsNil(o.ShoulderEndDate) {
		return true
	}

	return false
}

// SetShoulderEndDate gets a reference to the given string and assigns it to the ShoulderEndDate field.
func (o *BlockRangeInfoTypeBlockInfo) SetShoulderEndDate(v string) {
	o.ShoulderEndDate = &v
}

// GetShoulderStartDate returns the ShoulderStartDate field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetShoulderStartDate() string {
	if o == nil || IsNil(o.ShoulderStartDate) {
		var ret string
		return ret
	}
	return *o.ShoulderStartDate
}

// GetShoulderStartDateOk returns a tuple with the ShoulderStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetShoulderStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShoulderStartDate) {
		return nil, false
	}
	return o.ShoulderStartDate, true
}

// HasShoulderStartDate returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasShoulderStartDate() bool {
	if o != nil && !IsNil(o.ShoulderStartDate) {
		return true
	}

	return false
}

// SetShoulderStartDate gets a reference to the given string and assigns it to the ShoulderStartDate field.
func (o *BlockRangeInfoTypeBlockInfo) SetShoulderStartDate(v string) {
	o.ShoulderStartDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BlockRangeInfoTypeBlockInfo) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoTypeBlockInfo) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BlockRangeInfoTypeBlockInfo) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BlockRangeInfoTypeBlockInfo) SetStartDate(v string) {
	o.StartDate = &v
}

func (o BlockRangeInfoTypeBlockInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRangeInfoTypeBlockInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.BlockStatus) {
		toSerialize["blockStatus"] = o.BlockStatus
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InventoryControl) {
		toSerialize["inventoryControl"] = o.InventoryControl
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.ShoulderEndDate) {
		toSerialize["shoulderEndDate"] = o.ShoulderEndDate
	}
	if !IsNil(o.ShoulderStartDate) {
		toSerialize["shoulderStartDate"] = o.ShoulderStartDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableBlockRangeInfoTypeBlockInfo struct {
	value *BlockRangeInfoTypeBlockInfo
	isSet bool
}

func (v NullableBlockRangeInfoTypeBlockInfo) Get() *BlockRangeInfoTypeBlockInfo {
	return v.value
}

func (v *NullableBlockRangeInfoTypeBlockInfo) Set(val *BlockRangeInfoTypeBlockInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRangeInfoTypeBlockInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRangeInfoTypeBlockInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRangeInfoTypeBlockInfo(val *BlockRangeInfoTypeBlockInfo) *NullableBlockRangeInfoTypeBlockInfo {
	return &NullableBlockRangeInfoTypeBlockInfo{value: val, isSet: true}
}

func (v NullableBlockRangeInfoTypeBlockInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRangeInfoTypeBlockInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


