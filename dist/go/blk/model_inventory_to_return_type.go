/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the InventoryToReturnType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryToReturnType{}

// InventoryToReturnType This holds the number of rooms for each date that will be returned to the room destination type provided.
type InventoryToReturnType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	// The date on which rooms need to be returned for the block either to another room type in the block or to House if the borrowed room was from House.
	ReturnDate *string `json:"returnDate,omitempty"`
	// Specifies the collection of number of rooms to be returned to room types or House.
	ReturnRooms []ReturnRoomType `json:"returnRooms,omitempty"`
}

// NewInventoryToReturnType instantiates a new InventoryToReturnType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryToReturnType() *InventoryToReturnType {
	this := InventoryToReturnType{}
	return &this
}

// NewInventoryToReturnTypeWithDefaults instantiates a new InventoryToReturnType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryToReturnTypeWithDefaults() *InventoryToReturnType {
	this := InventoryToReturnType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *InventoryToReturnType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryToReturnType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *InventoryToReturnType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *InventoryToReturnType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetReturnDate returns the ReturnDate field value if set, zero value otherwise.
func (o *InventoryToReturnType) GetReturnDate() string {
	if o == nil || IsNil(o.ReturnDate) {
		var ret string
		return ret
	}
	return *o.ReturnDate
}

// GetReturnDateOk returns a tuple with the ReturnDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryToReturnType) GetReturnDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReturnDate) {
		return nil, false
	}
	return o.ReturnDate, true
}

// HasReturnDate returns a boolean if a field has been set.
func (o *InventoryToReturnType) HasReturnDate() bool {
	if o != nil && !IsNil(o.ReturnDate) {
		return true
	}

	return false
}

// SetReturnDate gets a reference to the given string and assigns it to the ReturnDate field.
func (o *InventoryToReturnType) SetReturnDate(v string) {
	o.ReturnDate = &v
}

// GetReturnRooms returns the ReturnRooms field value if set, zero value otherwise.
func (o *InventoryToReturnType) GetReturnRooms() []ReturnRoomType {
	if o == nil || IsNil(o.ReturnRooms) {
		var ret []ReturnRoomType
		return ret
	}
	return o.ReturnRooms
}

// GetReturnRoomsOk returns a tuple with the ReturnRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryToReturnType) GetReturnRoomsOk() ([]ReturnRoomType, bool) {
	if o == nil || IsNil(o.ReturnRooms) {
		return nil, false
	}
	return o.ReturnRooms, true
}

// HasReturnRooms returns a boolean if a field has been set.
func (o *InventoryToReturnType) HasReturnRooms() bool {
	if o != nil && !IsNil(o.ReturnRooms) {
		return true
	}

	return false
}

// SetReturnRooms gets a reference to the given []ReturnRoomType and assigns it to the ReturnRooms field.
func (o *InventoryToReturnType) SetReturnRooms(v []ReturnRoomType) {
	o.ReturnRooms = v
}

func (o InventoryToReturnType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryToReturnType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.ReturnDate) {
		toSerialize["returnDate"] = o.ReturnDate
	}
	if !IsNil(o.ReturnRooms) {
		toSerialize["returnRooms"] = o.ReturnRooms
	}
	return toSerialize, nil
}

type NullableInventoryToReturnType struct {
	value *InventoryToReturnType
	isSet bool
}

func (v NullableInventoryToReturnType) Get() *InventoryToReturnType {
	return v.value
}

func (v *NullableInventoryToReturnType) Set(val *InventoryToReturnType) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryToReturnType) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryToReturnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryToReturnType(val *InventoryToReturnType) *NullableInventoryToReturnType {
	return &NullableInventoryToReturnType{value: val, isSet: true}
}

func (v NullableInventoryToReturnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryToReturnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


