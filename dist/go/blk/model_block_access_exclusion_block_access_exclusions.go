/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAccessExclusionBlockAccessExclusions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAccessExclusionBlockAccessExclusions{}

// BlockAccessExclusionBlockAccessExclusions List of all access exclusion permissions for this block.
type BlockAccessExclusionBlockAccessExclusions struct {
	AccessExclusionMessage *BlockAccessExclusionMessageType `json:"accessExclusionMessage,omitempty"`
	BlockAccessExclusion []BlockAccessExclusionType `json:"blockAccessExclusion,omitempty"`
	// Hotel code to which the block belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Used to identify the source of the identifier (e.g., IATA, ABTA).
	IdContext *string `json:"idContext,omitempty"`
	// Additional identifying value assigned by the creating system.
	IdExtension *int32 `json:"idExtension,omitempty"`
	// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
	Instance *string `json:"instance,omitempty"`
	// Indicates whether to overlay the list of existing access exclusions with the new list.
	Overlay *bool `json:"overlay,omitempty"`
	// A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
	Type *string `json:"type,omitempty"`
	// URL that identifies the location associated with the record identified by the UniqueID.
	Url *string `json:"url,omitempty"`
}

// NewBlockAccessExclusionBlockAccessExclusions instantiates a new BlockAccessExclusionBlockAccessExclusions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAccessExclusionBlockAccessExclusions() *BlockAccessExclusionBlockAccessExclusions {
	this := BlockAccessExclusionBlockAccessExclusions{}
	return &this
}

// NewBlockAccessExclusionBlockAccessExclusionsWithDefaults instantiates a new BlockAccessExclusionBlockAccessExclusions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAccessExclusionBlockAccessExclusionsWithDefaults() *BlockAccessExclusionBlockAccessExclusions {
	this := BlockAccessExclusionBlockAccessExclusions{}
	return &this
}

// GetAccessExclusionMessage returns the AccessExclusionMessage field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetAccessExclusionMessage() BlockAccessExclusionMessageType {
	if o == nil || IsNil(o.AccessExclusionMessage) {
		var ret BlockAccessExclusionMessageType
		return ret
	}
	return *o.AccessExclusionMessage
}

// GetAccessExclusionMessageOk returns a tuple with the AccessExclusionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetAccessExclusionMessageOk() (*BlockAccessExclusionMessageType, bool) {
	if o == nil || IsNil(o.AccessExclusionMessage) {
		return nil, false
	}
	return o.AccessExclusionMessage, true
}

// HasAccessExclusionMessage returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasAccessExclusionMessage() bool {
	if o != nil && !IsNil(o.AccessExclusionMessage) {
		return true
	}

	return false
}

// SetAccessExclusionMessage gets a reference to the given BlockAccessExclusionMessageType and assigns it to the AccessExclusionMessage field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetAccessExclusionMessage(v BlockAccessExclusionMessageType) {
	o.AccessExclusionMessage = &v
}

// GetBlockAccessExclusion returns the BlockAccessExclusion field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetBlockAccessExclusion() []BlockAccessExclusionType {
	if o == nil || IsNil(o.BlockAccessExclusion) {
		var ret []BlockAccessExclusionType
		return ret
	}
	return o.BlockAccessExclusion
}

// GetBlockAccessExclusionOk returns a tuple with the BlockAccessExclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetBlockAccessExclusionOk() ([]BlockAccessExclusionType, bool) {
	if o == nil || IsNil(o.BlockAccessExclusion) {
		return nil, false
	}
	return o.BlockAccessExclusion, true
}

// HasBlockAccessExclusion returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasBlockAccessExclusion() bool {
	if o != nil && !IsNil(o.BlockAccessExclusion) {
		return true
	}

	return false
}

// SetBlockAccessExclusion gets a reference to the given []BlockAccessExclusionType and assigns it to the BlockAccessExclusion field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetBlockAccessExclusion(v []BlockAccessExclusionType) {
	o.BlockAccessExclusion = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetHotelId(v string) {
	o.HotelId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetId(v string) {
	o.Id = &v
}

// GetIdContext returns the IdContext field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetIdContext() string {
	if o == nil || IsNil(o.IdContext) {
		var ret string
		return ret
	}
	return *o.IdContext
}

// GetIdContextOk returns a tuple with the IdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetIdContextOk() (*string, bool) {
	if o == nil || IsNil(o.IdContext) {
		return nil, false
	}
	return o.IdContext, true
}

// HasIdContext returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasIdContext() bool {
	if o != nil && !IsNil(o.IdContext) {
		return true
	}

	return false
}

// SetIdContext gets a reference to the given string and assigns it to the IdContext field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetIdContext(v string) {
	o.IdContext = &v
}

// GetIdExtension returns the IdExtension field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetIdExtension() int32 {
	if o == nil || IsNil(o.IdExtension) {
		var ret int32
		return ret
	}
	return *o.IdExtension
}

// GetIdExtensionOk returns a tuple with the IdExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetIdExtensionOk() (*int32, bool) {
	if o == nil || IsNil(o.IdExtension) {
		return nil, false
	}
	return o.IdExtension, true
}

// HasIdExtension returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasIdExtension() bool {
	if o != nil && !IsNil(o.IdExtension) {
		return true
	}

	return false
}

// SetIdExtension gets a reference to the given int32 and assigns it to the IdExtension field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetIdExtension(v int32) {
	o.IdExtension = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetInstance(v string) {
	o.Instance = &v
}

// GetOverlay returns the Overlay field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetOverlay() bool {
	if o == nil || IsNil(o.Overlay) {
		var ret bool
		return ret
	}
	return *o.Overlay
}

// GetOverlayOk returns a tuple with the Overlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.Overlay) {
		return nil, false
	}
	return o.Overlay, true
}

// HasOverlay returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasOverlay() bool {
	if o != nil && !IsNil(o.Overlay) {
		return true
	}

	return false
}

// SetOverlay gets a reference to the given bool and assigns it to the Overlay field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetOverlay(v bool) {
	o.Overlay = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *BlockAccessExclusionBlockAccessExclusions) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *BlockAccessExclusionBlockAccessExclusions) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *BlockAccessExclusionBlockAccessExclusions) SetUrl(v string) {
	o.Url = &v
}

func (o BlockAccessExclusionBlockAccessExclusions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAccessExclusionBlockAccessExclusions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessExclusionMessage) {
		toSerialize["accessExclusionMessage"] = o.AccessExclusionMessage
	}
	if !IsNil(o.BlockAccessExclusion) {
		toSerialize["blockAccessExclusion"] = o.BlockAccessExclusion
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdContext) {
		toSerialize["idContext"] = o.IdContext
	}
	if !IsNil(o.IdExtension) {
		toSerialize["idExtension"] = o.IdExtension
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.Overlay) {
		toSerialize["overlay"] = o.Overlay
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableBlockAccessExclusionBlockAccessExclusions struct {
	value *BlockAccessExclusionBlockAccessExclusions
	isSet bool
}

func (v NullableBlockAccessExclusionBlockAccessExclusions) Get() *BlockAccessExclusionBlockAccessExclusions {
	return v.value
}

func (v *NullableBlockAccessExclusionBlockAccessExclusions) Set(val *BlockAccessExclusionBlockAccessExclusions) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAccessExclusionBlockAccessExclusions) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAccessExclusionBlockAccessExclusions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAccessExclusionBlockAccessExclusions(val *BlockAccessExclusionBlockAccessExclusions) *NullableBlockAccessExclusionBlockAccessExclusions {
	return &NullableBlockAccessExclusionBlockAccessExclusions{value: val, isSet: true}
}

func (v NullableBlockAccessExclusionBlockAccessExclusions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAccessExclusionBlockAccessExclusions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


