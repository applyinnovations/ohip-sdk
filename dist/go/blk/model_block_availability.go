/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAvailability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAvailability{}

// BlockAvailability Response for FetchBlockAvailability operation.
type BlockAvailability struct {
	BlockAvailability *BlockAvailabilityType `json:"blockAvailability,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewBlockAvailability instantiates a new BlockAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAvailability() *BlockAvailability {
	this := BlockAvailability{}
	return &this
}

// NewBlockAvailabilityWithDefaults instantiates a new BlockAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAvailabilityWithDefaults() *BlockAvailability {
	this := BlockAvailability{}
	return &this
}

// GetBlockAvailability returns the BlockAvailability field value if set, zero value otherwise.
func (o *BlockAvailability) GetBlockAvailability() BlockAvailabilityType {
	if o == nil || IsNil(o.BlockAvailability) {
		var ret BlockAvailabilityType
		return ret
	}
	return *o.BlockAvailability
}

// GetBlockAvailabilityOk returns a tuple with the BlockAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailability) GetBlockAvailabilityOk() (*BlockAvailabilityType, bool) {
	if o == nil || IsNil(o.BlockAvailability) {
		return nil, false
	}
	return o.BlockAvailability, true
}

// HasBlockAvailability returns a boolean if a field has been set.
func (o *BlockAvailability) HasBlockAvailability() bool {
	if o != nil && !IsNil(o.BlockAvailability) {
		return true
	}

	return false
}

// SetBlockAvailability gets a reference to the given BlockAvailabilityType and assigns it to the BlockAvailability field.
func (o *BlockAvailability) SetBlockAvailability(v BlockAvailabilityType) {
	o.BlockAvailability = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BlockAvailability) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailability) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BlockAvailability) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *BlockAvailability) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BlockAvailability) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailability) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BlockAvailability) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *BlockAvailability) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o BlockAvailability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAvailability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockAvailability) {
		toSerialize["blockAvailability"] = o.BlockAvailability
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBlockAvailability struct {
	value *BlockAvailability
	isSet bool
}

func (v NullableBlockAvailability) Get() *BlockAvailability {
	return v.value
}

func (v *NullableBlockAvailability) Set(val *BlockAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAvailability(val *BlockAvailability) *NullableBlockAvailability {
	return &NullableBlockAvailability{value: val, isSet: true}
}

func (v NullableBlockAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


