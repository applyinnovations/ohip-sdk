/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockDailyStatisticsDateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDailyStatisticsDateType{}

// BlockDailyStatisticsDateType Holds the room type or generic room type(Room Pool) level statistics for an allotment date.
type BlockDailyStatisticsDateType struct {
	// Collection of room type level statistics.
	RoomTypeStatisticsList []BlockDailyRoomStatisticsType `json:"roomTypeStatisticsList,omitempty"`
	// Collection of room type level statistics.
	GenericRoomTypeStatisticsList []BlockDailyRoomStatisticsType `json:"genericRoomTypeStatisticsList,omitempty"`
	Date *string `json:"date,omitempty"`
}

// NewBlockDailyStatisticsDateType instantiates a new BlockDailyStatisticsDateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDailyStatisticsDateType() *BlockDailyStatisticsDateType {
	this := BlockDailyStatisticsDateType{}
	return &this
}

// NewBlockDailyStatisticsDateTypeWithDefaults instantiates a new BlockDailyStatisticsDateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDailyStatisticsDateTypeWithDefaults() *BlockDailyStatisticsDateType {
	this := BlockDailyStatisticsDateType{}
	return &this
}

// GetRoomTypeStatisticsList returns the RoomTypeStatisticsList field value if set, zero value otherwise.
func (o *BlockDailyStatisticsDateType) GetRoomTypeStatisticsList() []BlockDailyRoomStatisticsType {
	if o == nil || IsNil(o.RoomTypeStatisticsList) {
		var ret []BlockDailyRoomStatisticsType
		return ret
	}
	return o.RoomTypeStatisticsList
}

// GetRoomTypeStatisticsListOk returns a tuple with the RoomTypeStatisticsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDailyStatisticsDateType) GetRoomTypeStatisticsListOk() ([]BlockDailyRoomStatisticsType, bool) {
	if o == nil || IsNil(o.RoomTypeStatisticsList) {
		return nil, false
	}
	return o.RoomTypeStatisticsList, true
}

// HasRoomTypeStatisticsList returns a boolean if a field has been set.
func (o *BlockDailyStatisticsDateType) HasRoomTypeStatisticsList() bool {
	if o != nil && !IsNil(o.RoomTypeStatisticsList) {
		return true
	}

	return false
}

// SetRoomTypeStatisticsList gets a reference to the given []BlockDailyRoomStatisticsType and assigns it to the RoomTypeStatisticsList field.
func (o *BlockDailyStatisticsDateType) SetRoomTypeStatisticsList(v []BlockDailyRoomStatisticsType) {
	o.RoomTypeStatisticsList = v
}

// GetGenericRoomTypeStatisticsList returns the GenericRoomTypeStatisticsList field value if set, zero value otherwise.
func (o *BlockDailyStatisticsDateType) GetGenericRoomTypeStatisticsList() []BlockDailyRoomStatisticsType {
	if o == nil || IsNil(o.GenericRoomTypeStatisticsList) {
		var ret []BlockDailyRoomStatisticsType
		return ret
	}
	return o.GenericRoomTypeStatisticsList
}

// GetGenericRoomTypeStatisticsListOk returns a tuple with the GenericRoomTypeStatisticsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDailyStatisticsDateType) GetGenericRoomTypeStatisticsListOk() ([]BlockDailyRoomStatisticsType, bool) {
	if o == nil || IsNil(o.GenericRoomTypeStatisticsList) {
		return nil, false
	}
	return o.GenericRoomTypeStatisticsList, true
}

// HasGenericRoomTypeStatisticsList returns a boolean if a field has been set.
func (o *BlockDailyStatisticsDateType) HasGenericRoomTypeStatisticsList() bool {
	if o != nil && !IsNil(o.GenericRoomTypeStatisticsList) {
		return true
	}

	return false
}

// SetGenericRoomTypeStatisticsList gets a reference to the given []BlockDailyRoomStatisticsType and assigns it to the GenericRoomTypeStatisticsList field.
func (o *BlockDailyStatisticsDateType) SetGenericRoomTypeStatisticsList(v []BlockDailyRoomStatisticsType) {
	o.GenericRoomTypeStatisticsList = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BlockDailyStatisticsDateType) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDailyStatisticsDateType) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BlockDailyStatisticsDateType) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BlockDailyStatisticsDateType) SetDate(v string) {
	o.Date = &v
}

func (o BlockDailyStatisticsDateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDailyStatisticsDateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomTypeStatisticsList) {
		toSerialize["roomTypeStatisticsList"] = o.RoomTypeStatisticsList
	}
	if !IsNil(o.GenericRoomTypeStatisticsList) {
		toSerialize["genericRoomTypeStatisticsList"] = o.GenericRoomTypeStatisticsList
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableBlockDailyStatisticsDateType struct {
	value *BlockDailyStatisticsDateType
	isSet bool
}

func (v NullableBlockDailyStatisticsDateType) Get() *BlockDailyStatisticsDateType {
	return v.value
}

func (v *NullableBlockDailyStatisticsDateType) Set(val *BlockDailyStatisticsDateType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDailyStatisticsDateType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDailyStatisticsDateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDailyStatisticsDateType(val *BlockDailyStatisticsDateType) *NullableBlockDailyStatisticsDateType {
	return &NullableBlockDailyStatisticsDateType{value: val, isSet: true}
}

func (v NullableBlockDailyStatisticsDateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDailyStatisticsDateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


