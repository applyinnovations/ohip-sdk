/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the CateringEventsProcessedInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringEventsProcessedInfoType{}

// CateringEventsProcessedInfoType Status/Info of the processed events.
type CateringEventsProcessedInfoType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	// Date of the event
	EventDate *string `json:"eventDate,omitempty"`
	// Name of event.
	EventName *string `json:"eventName,omitempty"`
	// Type of event.
	EventType *string `json:"eventType,omitempty"`
	// Hotel code where event will be copied.
	HotelId *string `json:"hotelId,omitempty"`
	// Erorr/Warning code for not processing th event.
	ProcessingInfoCode *string `json:"processingInfoCode,omitempty"`
	// Flag to indicate the warning messages from the API
	ProcessingInfoType *string `json:"processingInfoType,omitempty"`
	// Reason for not processing the event.
	Reason *string `json:"reason,omitempty"`
	Room *CodeDescriptionType `json:"room,omitempty"`
	// Status of the processed event. e.g Completed, Not Processed.
	Status *string `json:"status,omitempty"`
}

// NewCateringEventsProcessedInfoType instantiates a new CateringEventsProcessedInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringEventsProcessedInfoType() *CateringEventsProcessedInfoType {
	this := CateringEventsProcessedInfoType{}
	return &this
}

// NewCateringEventsProcessedInfoTypeWithDefaults instantiates a new CateringEventsProcessedInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringEventsProcessedInfoTypeWithDefaults() *CateringEventsProcessedInfoType {
	this := CateringEventsProcessedInfoType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *CateringEventsProcessedInfoType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetEventDate returns the EventDate field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetEventDate() string {
	if o == nil || IsNil(o.EventDate) {
		var ret string
		return ret
	}
	return *o.EventDate
}

// GetEventDateOk returns a tuple with the EventDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetEventDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventDate) {
		return nil, false
	}
	return o.EventDate, true
}

// HasEventDate returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasEventDate() bool {
	if o != nil && !IsNil(o.EventDate) {
		return true
	}

	return false
}

// SetEventDate gets a reference to the given string and assigns it to the EventDate field.
func (o *CateringEventsProcessedInfoType) SetEventDate(v string) {
	o.EventDate = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *CateringEventsProcessedInfoType) SetEventName(v string) {
	o.EventName = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *CateringEventsProcessedInfoType) SetEventType(v string) {
	o.EventType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CateringEventsProcessedInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetProcessingInfoCode returns the ProcessingInfoCode field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetProcessingInfoCode() string {
	if o == nil || IsNil(o.ProcessingInfoCode) {
		var ret string
		return ret
	}
	return *o.ProcessingInfoCode
}

// GetProcessingInfoCodeOk returns a tuple with the ProcessingInfoCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetProcessingInfoCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingInfoCode) {
		return nil, false
	}
	return o.ProcessingInfoCode, true
}

// HasProcessingInfoCode returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasProcessingInfoCode() bool {
	if o != nil && !IsNil(o.ProcessingInfoCode) {
		return true
	}

	return false
}

// SetProcessingInfoCode gets a reference to the given string and assigns it to the ProcessingInfoCode field.
func (o *CateringEventsProcessedInfoType) SetProcessingInfoCode(v string) {
	o.ProcessingInfoCode = &v
}

// GetProcessingInfoType returns the ProcessingInfoType field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetProcessingInfoType() string {
	if o == nil || IsNil(o.ProcessingInfoType) {
		var ret string
		return ret
	}
	return *o.ProcessingInfoType
}

// GetProcessingInfoTypeOk returns a tuple with the ProcessingInfoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetProcessingInfoTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingInfoType) {
		return nil, false
	}
	return o.ProcessingInfoType, true
}

// HasProcessingInfoType returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasProcessingInfoType() bool {
	if o != nil && !IsNil(o.ProcessingInfoType) {
		return true
	}

	return false
}

// SetProcessingInfoType gets a reference to the given string and assigns it to the ProcessingInfoType field.
func (o *CateringEventsProcessedInfoType) SetProcessingInfoType(v string) {
	o.ProcessingInfoType = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CateringEventsProcessedInfoType) SetReason(v string) {
	o.Reason = &v
}

// GetRoom returns the Room field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetRoom() CodeDescriptionType {
	if o == nil || IsNil(o.Room) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Room
}

// GetRoomOk returns a tuple with the Room field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetRoomOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Room) {
		return nil, false
	}
	return o.Room, true
}

// HasRoom returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasRoom() bool {
	if o != nil && !IsNil(o.Room) {
		return true
	}

	return false
}

// SetRoom gets a reference to the given CodeDescriptionType and assigns it to the Room field.
func (o *CateringEventsProcessedInfoType) SetRoom(v CodeDescriptionType) {
	o.Room = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CateringEventsProcessedInfoType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsProcessedInfoType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CateringEventsProcessedInfoType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CateringEventsProcessedInfoType) SetStatus(v string) {
	o.Status = &v
}

func (o CateringEventsProcessedInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringEventsProcessedInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.EventDate) {
		toSerialize["eventDate"] = o.EventDate
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ProcessingInfoCode) {
		toSerialize["processingInfoCode"] = o.ProcessingInfoCode
	}
	if !IsNil(o.ProcessingInfoType) {
		toSerialize["processingInfoType"] = o.ProcessingInfoType
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Room) {
		toSerialize["room"] = o.Room
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCateringEventsProcessedInfoType struct {
	value *CateringEventsProcessedInfoType
	isSet bool
}

func (v NullableCateringEventsProcessedInfoType) Get() *CateringEventsProcessedInfoType {
	return v.value
}

func (v *NullableCateringEventsProcessedInfoType) Set(val *CateringEventsProcessedInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventsProcessedInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventsProcessedInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventsProcessedInfoType(val *CateringEventsProcessedInfoType) *NullableCateringEventsProcessedInfoType {
	return &NullableCateringEventsProcessedInfoType{value: val, isSet: true}
}

func (v NullableCateringEventsProcessedInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventsProcessedInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


