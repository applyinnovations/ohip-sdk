/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the PorterageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PorterageType{}

// PorterageType Information about porterage charges.
type PorterageType struct {
	// Indicates if the room rate quoted includes any porterage cost.
	PorterageIncluded *bool `json:"porterageIncluded,omitempty"`
	Price *CurrencyAmountType `json:"price,omitempty"`
}

// NewPorterageType instantiates a new PorterageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPorterageType() *PorterageType {
	this := PorterageType{}
	return &this
}

// NewPorterageTypeWithDefaults instantiates a new PorterageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPorterageTypeWithDefaults() *PorterageType {
	this := PorterageType{}
	return &this
}

// GetPorterageIncluded returns the PorterageIncluded field value if set, zero value otherwise.
func (o *PorterageType) GetPorterageIncluded() bool {
	if o == nil || IsNil(o.PorterageIncluded) {
		var ret bool
		return ret
	}
	return *o.PorterageIncluded
}

// GetPorterageIncludedOk returns a tuple with the PorterageIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PorterageType) GetPorterageIncludedOk() (*bool, bool) {
	if o == nil || IsNil(o.PorterageIncluded) {
		return nil, false
	}
	return o.PorterageIncluded, true
}

// HasPorterageIncluded returns a boolean if a field has been set.
func (o *PorterageType) HasPorterageIncluded() bool {
	if o != nil && !IsNil(o.PorterageIncluded) {
		return true
	}

	return false
}

// SetPorterageIncluded gets a reference to the given bool and assigns it to the PorterageIncluded field.
func (o *PorterageType) SetPorterageIncluded(v bool) {
	o.PorterageIncluded = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PorterageType) GetPrice() CurrencyAmountType {
	if o == nil || IsNil(o.Price) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PorterageType) GetPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PorterageType) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given CurrencyAmountType and assigns it to the Price field.
func (o *PorterageType) SetPrice(v CurrencyAmountType) {
	o.Price = &v
}

func (o PorterageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PorterageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PorterageIncluded) {
		toSerialize["porterageIncluded"] = o.PorterageIncluded
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullablePorterageType struct {
	value *PorterageType
	isSet bool
}

func (v NullablePorterageType) Get() *PorterageType {
	return v.value
}

func (v *NullablePorterageType) Set(val *PorterageType) {
	v.value = val
	v.isSet = true
}

func (v NullablePorterageType) IsSet() bool {
	return v.isSet
}

func (v *NullablePorterageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePorterageType(val *PorterageType) *NullablePorterageType {
	return &NullablePorterageType{value: val, isSet: true}
}

func (v NullablePorterageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePorterageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


