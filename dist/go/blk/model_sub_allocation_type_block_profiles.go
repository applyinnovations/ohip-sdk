/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the SubAllocationTypeBlockProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubAllocationTypeBlockProfiles{}

// SubAllocationTypeBlockProfiles A collection of all the profiles associated to this block. Please note that during a change operation this performs a full overlay if the attribute FullOverlay is set to true. In a full overlay, all the profiles that should be associated to the block should be provided during a change operation. Any profiles not provided will be detached from this block. By default the full overlay is considered false if this tag is left blank. If values are provided for profiles, only the full overlay functionality is provided at this time.
type SubAllocationTypeBlockProfiles struct {
	// The list of profiles associated with the block.
	BlockProfile []BlockProfilesType `json:"blockProfile,omitempty"`
	// Indicates whether to perform a full overlay for the profiles. Currently only the Fulloverlay functionality is provided.
	FullOverlay *bool `json:"fullOverlay,omitempty"`
}

// NewSubAllocationTypeBlockProfiles instantiates a new SubAllocationTypeBlockProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubAllocationTypeBlockProfiles() *SubAllocationTypeBlockProfiles {
	this := SubAllocationTypeBlockProfiles{}
	return &this
}

// NewSubAllocationTypeBlockProfilesWithDefaults instantiates a new SubAllocationTypeBlockProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubAllocationTypeBlockProfilesWithDefaults() *SubAllocationTypeBlockProfiles {
	this := SubAllocationTypeBlockProfiles{}
	return &this
}

// GetBlockProfile returns the BlockProfile field value if set, zero value otherwise.
func (o *SubAllocationTypeBlockProfiles) GetBlockProfile() []BlockProfilesType {
	if o == nil || IsNil(o.BlockProfile) {
		var ret []BlockProfilesType
		return ret
	}
	return o.BlockProfile
}

// GetBlockProfileOk returns a tuple with the BlockProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubAllocationTypeBlockProfiles) GetBlockProfileOk() ([]BlockProfilesType, bool) {
	if o == nil || IsNil(o.BlockProfile) {
		return nil, false
	}
	return o.BlockProfile, true
}

// HasBlockProfile returns a boolean if a field has been set.
func (o *SubAllocationTypeBlockProfiles) HasBlockProfile() bool {
	if o != nil && !IsNil(o.BlockProfile) {
		return true
	}

	return false
}

// SetBlockProfile gets a reference to the given []BlockProfilesType and assigns it to the BlockProfile field.
func (o *SubAllocationTypeBlockProfiles) SetBlockProfile(v []BlockProfilesType) {
	o.BlockProfile = v
}

// GetFullOverlay returns the FullOverlay field value if set, zero value otherwise.
func (o *SubAllocationTypeBlockProfiles) GetFullOverlay() bool {
	if o == nil || IsNil(o.FullOverlay) {
		var ret bool
		return ret
	}
	return *o.FullOverlay
}

// GetFullOverlayOk returns a tuple with the FullOverlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubAllocationTypeBlockProfiles) GetFullOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.FullOverlay) {
		return nil, false
	}
	return o.FullOverlay, true
}

// HasFullOverlay returns a boolean if a field has been set.
func (o *SubAllocationTypeBlockProfiles) HasFullOverlay() bool {
	if o != nil && !IsNil(o.FullOverlay) {
		return true
	}

	return false
}

// SetFullOverlay gets a reference to the given bool and assigns it to the FullOverlay field.
func (o *SubAllocationTypeBlockProfiles) SetFullOverlay(v bool) {
	o.FullOverlay = &v
}

func (o SubAllocationTypeBlockProfiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubAllocationTypeBlockProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockProfile) {
		toSerialize["blockProfile"] = o.BlockProfile
	}
	if !IsNil(o.FullOverlay) {
		toSerialize["fullOverlay"] = o.FullOverlay
	}
	return toSerialize, nil
}

type NullableSubAllocationTypeBlockProfiles struct {
	value *SubAllocationTypeBlockProfiles
	isSet bool
}

func (v NullableSubAllocationTypeBlockProfiles) Get() *SubAllocationTypeBlockProfiles {
	return v.value
}

func (v *NullableSubAllocationTypeBlockProfiles) Set(val *SubAllocationTypeBlockProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableSubAllocationTypeBlockProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableSubAllocationTypeBlockProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubAllocationTypeBlockProfiles(val *SubAllocationTypeBlockProfiles) *NullableSubAllocationTypeBlockProfiles {
	return &NullableSubAllocationTypeBlockProfiles{value: val, isSet: true}
}

func (v NullableSubAllocationTypeBlockProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubAllocationTypeBlockProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


