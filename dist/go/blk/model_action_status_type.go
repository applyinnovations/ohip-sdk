/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// ActionStatusType Action status of the Track It item(Open, Closed).
type ActionStatusType string

// List of actionStatusType
const (
	ACTIONSTATUSTYPE_OPEN ActionStatusType = "Open"
	ACTIONSTATUSTYPE_CLOSED ActionStatusType = "Closed"
)

// All allowed values of ActionStatusType enum
var AllowedActionStatusTypeEnumValues = []ActionStatusType{
	"Open",
	"Closed",
}

func (v *ActionStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionStatusType(value)
	for _, existing := range AllowedActionStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionStatusType", value)
}

// NewActionStatusTypeFromValue returns a pointer to a valid ActionStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionStatusTypeFromValue(v string) (*ActionStatusType, error) {
	ev := ActionStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionStatusType: valid values are %v", v, AllowedActionStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionStatusType) IsValid() bool {
	for _, existing := range AllowedActionStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to actionStatusType value
func (v ActionStatusType) Ptr() *ActionStatusType {
	return &v
}

type NullableActionStatusType struct {
	value *ActionStatusType
	isSet bool
}

func (v NullableActionStatusType) Get() *ActionStatusType {
	return v.value
}

func (v *NullableActionStatusType) Set(val *ActionStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableActionStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableActionStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionStatusType(val *ActionStatusType) *NullableActionStatusType {
	return &NullableActionStatusType{value: val, isSet: true}
}

func (v NullableActionStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

