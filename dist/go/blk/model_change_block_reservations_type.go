/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ChangeBlockReservationsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeBlockReservationsType{}

// ChangeBlockReservationsType Criteria used to perform batch changes to reservations that belong to a block.
type ChangeBlockReservationsType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	// Indicates whether to borrow inventory from the house and overbook if required for any inventory needed to complete the apply to all operation.
	BorrowForAll *bool `json:"borrowForAll,omitempty"`
	// Change instructions to be used.
	ChangeBlockReservationsInstructions []ChangeBlockResvInstructionType `json:"changeBlockReservationsInstructions,omitempty"`
	// Opera Hotel code that the block belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	ReferenceReservation *ChangeBlockReservationsTypeReferenceReservation `json:"referenceReservation,omitempty"`
	ReservationFilter *BlockReservationsCriteriaType `json:"reservationFilter,omitempty"`
}

// NewChangeBlockReservationsType instantiates a new ChangeBlockReservationsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeBlockReservationsType() *ChangeBlockReservationsType {
	this := ChangeBlockReservationsType{}
	return &this
}

// NewChangeBlockReservationsTypeWithDefaults instantiates a new ChangeBlockReservationsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeBlockReservationsTypeWithDefaults() *ChangeBlockReservationsType {
	this := ChangeBlockReservationsType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *ChangeBlockReservationsType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *ChangeBlockReservationsType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *ChangeBlockReservationsType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetBorrowForAll returns the BorrowForAll field value if set, zero value otherwise.
func (o *ChangeBlockReservationsType) GetBorrowForAll() bool {
	if o == nil || IsNil(o.BorrowForAll) {
		var ret bool
		return ret
	}
	return *o.BorrowForAll
}

// GetBorrowForAllOk returns a tuple with the BorrowForAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsType) GetBorrowForAllOk() (*bool, bool) {
	if o == nil || IsNil(o.BorrowForAll) {
		return nil, false
	}
	return o.BorrowForAll, true
}

// HasBorrowForAll returns a boolean if a field has been set.
func (o *ChangeBlockReservationsType) HasBorrowForAll() bool {
	if o != nil && !IsNil(o.BorrowForAll) {
		return true
	}

	return false
}

// SetBorrowForAll gets a reference to the given bool and assigns it to the BorrowForAll field.
func (o *ChangeBlockReservationsType) SetBorrowForAll(v bool) {
	o.BorrowForAll = &v
}

// GetChangeBlockReservationsInstructions returns the ChangeBlockReservationsInstructions field value if set, zero value otherwise.
func (o *ChangeBlockReservationsType) GetChangeBlockReservationsInstructions() []ChangeBlockResvInstructionType {
	if o == nil || IsNil(o.ChangeBlockReservationsInstructions) {
		var ret []ChangeBlockResvInstructionType
		return ret
	}
	return o.ChangeBlockReservationsInstructions
}

// GetChangeBlockReservationsInstructionsOk returns a tuple with the ChangeBlockReservationsInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsType) GetChangeBlockReservationsInstructionsOk() ([]ChangeBlockResvInstructionType, bool) {
	if o == nil || IsNil(o.ChangeBlockReservationsInstructions) {
		return nil, false
	}
	return o.ChangeBlockReservationsInstructions, true
}

// HasChangeBlockReservationsInstructions returns a boolean if a field has been set.
func (o *ChangeBlockReservationsType) HasChangeBlockReservationsInstructions() bool {
	if o != nil && !IsNil(o.ChangeBlockReservationsInstructions) {
		return true
	}

	return false
}

// SetChangeBlockReservationsInstructions gets a reference to the given []ChangeBlockResvInstructionType and assigns it to the ChangeBlockReservationsInstructions field.
func (o *ChangeBlockReservationsType) SetChangeBlockReservationsInstructions(v []ChangeBlockResvInstructionType) {
	o.ChangeBlockReservationsInstructions = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChangeBlockReservationsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChangeBlockReservationsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChangeBlockReservationsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReferenceReservation returns the ReferenceReservation field value if set, zero value otherwise.
func (o *ChangeBlockReservationsType) GetReferenceReservation() ChangeBlockReservationsTypeReferenceReservation {
	if o == nil || IsNil(o.ReferenceReservation) {
		var ret ChangeBlockReservationsTypeReferenceReservation
		return ret
	}
	return *o.ReferenceReservation
}

// GetReferenceReservationOk returns a tuple with the ReferenceReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsType) GetReferenceReservationOk() (*ChangeBlockReservationsTypeReferenceReservation, bool) {
	if o == nil || IsNil(o.ReferenceReservation) {
		return nil, false
	}
	return o.ReferenceReservation, true
}

// HasReferenceReservation returns a boolean if a field has been set.
func (o *ChangeBlockReservationsType) HasReferenceReservation() bool {
	if o != nil && !IsNil(o.ReferenceReservation) {
		return true
	}

	return false
}

// SetReferenceReservation gets a reference to the given ChangeBlockReservationsTypeReferenceReservation and assigns it to the ReferenceReservation field.
func (o *ChangeBlockReservationsType) SetReferenceReservation(v ChangeBlockReservationsTypeReferenceReservation) {
	o.ReferenceReservation = &v
}

// GetReservationFilter returns the ReservationFilter field value if set, zero value otherwise.
func (o *ChangeBlockReservationsType) GetReservationFilter() BlockReservationsCriteriaType {
	if o == nil || IsNil(o.ReservationFilter) {
		var ret BlockReservationsCriteriaType
		return ret
	}
	return *o.ReservationFilter
}

// GetReservationFilterOk returns a tuple with the ReservationFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationsType) GetReservationFilterOk() (*BlockReservationsCriteriaType, bool) {
	if o == nil || IsNil(o.ReservationFilter) {
		return nil, false
	}
	return o.ReservationFilter, true
}

// HasReservationFilter returns a boolean if a field has been set.
func (o *ChangeBlockReservationsType) HasReservationFilter() bool {
	if o != nil && !IsNil(o.ReservationFilter) {
		return true
	}

	return false
}

// SetReservationFilter gets a reference to the given BlockReservationsCriteriaType and assigns it to the ReservationFilter field.
func (o *ChangeBlockReservationsType) SetReservationFilter(v BlockReservationsCriteriaType) {
	o.ReservationFilter = &v
}

func (o ChangeBlockReservationsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeBlockReservationsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.BorrowForAll) {
		toSerialize["borrowForAll"] = o.BorrowForAll
	}
	if !IsNil(o.ChangeBlockReservationsInstructions) {
		toSerialize["changeBlockReservationsInstructions"] = o.ChangeBlockReservationsInstructions
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReferenceReservation) {
		toSerialize["referenceReservation"] = o.ReferenceReservation
	}
	if !IsNil(o.ReservationFilter) {
		toSerialize["reservationFilter"] = o.ReservationFilter
	}
	return toSerialize, nil
}

type NullableChangeBlockReservationsType struct {
	value *ChangeBlockReservationsType
	isSet bool
}

func (v NullableChangeBlockReservationsType) Get() *ChangeBlockReservationsType {
	return v.value
}

func (v *NullableChangeBlockReservationsType) Set(val *ChangeBlockReservationsType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeBlockReservationsType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeBlockReservationsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeBlockReservationsType(val *ChangeBlockReservationsType) *NullableChangeBlockReservationsType {
	return &NullableChangeBlockReservationsType{value: val, isSet: true}
}

func (v NullableChangeBlockReservationsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeBlockReservationsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


