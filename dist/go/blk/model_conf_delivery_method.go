/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// ConfDeliveryMethod the model 'ConfDeliveryMethod'
type ConfDeliveryMethod string

// List of confDeliveryMethod
const (
	CONFDELIVERYMETHOD_PRINT ConfDeliveryMethod = "Print"
	CONFDELIVERYMETHOD_EMAIL ConfDeliveryMethod = "Email"
	CONFDELIVERYMETHOD_FAX ConfDeliveryMethod = "Fax"
	CONFDELIVERYMETHOD_TEXT ConfDeliveryMethod = "Text"
	CONFDELIVERYMETHOD_NOT_CONFIGURED ConfDeliveryMethod = "NotConfigured"
)

// All allowed values of ConfDeliveryMethod enum
var AllowedConfDeliveryMethodEnumValues = []ConfDeliveryMethod{
	"Print",
	"Email",
	"Fax",
	"Text",
	"NotConfigured",
}

func (v *ConfDeliveryMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfDeliveryMethod(value)
	for _, existing := range AllowedConfDeliveryMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfDeliveryMethod", value)
}

// NewConfDeliveryMethodFromValue returns a pointer to a valid ConfDeliveryMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfDeliveryMethodFromValue(v string) (*ConfDeliveryMethod, error) {
	ev := ConfDeliveryMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfDeliveryMethod: valid values are %v", v, AllowedConfDeliveryMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfDeliveryMethod) IsValid() bool {
	for _, existing := range AllowedConfDeliveryMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to confDeliveryMethod value
func (v ConfDeliveryMethod) Ptr() *ConfDeliveryMethod {
	return &v
}

type NullableConfDeliveryMethod struct {
	value *ConfDeliveryMethod
	isSet bool
}

func (v NullableConfDeliveryMethod) Get() *ConfDeliveryMethod {
	return v.value
}

func (v *NullableConfDeliveryMethod) Set(val *ConfDeliveryMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableConfDeliveryMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableConfDeliveryMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfDeliveryMethod(val *ConfDeliveryMethod) *NullableConfDeliveryMethod {
	return &NullableConfDeliveryMethod{value: val, isSet: true}
}

func (v NullableConfDeliveryMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfDeliveryMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

