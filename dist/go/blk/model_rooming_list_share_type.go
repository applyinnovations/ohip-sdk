/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RoomingListShareType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomingListShareType{}

// RoomingListShareType Specifies a group of two or more rooming list reservations that need to be created as shared reservations.
type RoomingListShareType struct {
	// Contains information about the rooming list reservation that is to be shared and specifies the type of share that is to be created.
	Reservation []RoomingListShareReservationType `json:"reservation,omitempty"`
	// Collection of effective rate amount per guest on specific dates.
	EffectiveRates []EffectiveRateType `json:"effectiveRates,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewRoomingListShareType instantiates a new RoomingListShareType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomingListShareType() *RoomingListShareType {
	this := RoomingListShareType{}
	return &this
}

// NewRoomingListShareTypeWithDefaults instantiates a new RoomingListShareType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomingListShareTypeWithDefaults() *RoomingListShareType {
	this := RoomingListShareType{}
	return &this
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *RoomingListShareType) GetReservation() []RoomingListShareReservationType {
	if o == nil || IsNil(o.Reservation) {
		var ret []RoomingListShareReservationType
		return ret
	}
	return o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingListShareType) GetReservationOk() ([]RoomingListShareReservationType, bool) {
	if o == nil || IsNil(o.Reservation) {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *RoomingListShareType) HasReservation() bool {
	if o != nil && !IsNil(o.Reservation) {
		return true
	}

	return false
}

// SetReservation gets a reference to the given []RoomingListShareReservationType and assigns it to the Reservation field.
func (o *RoomingListShareType) SetReservation(v []RoomingListShareReservationType) {
	o.Reservation = v
}

// GetEffectiveRates returns the EffectiveRates field value if set, zero value otherwise.
func (o *RoomingListShareType) GetEffectiveRates() []EffectiveRateType {
	if o == nil || IsNil(o.EffectiveRates) {
		var ret []EffectiveRateType
		return ret
	}
	return o.EffectiveRates
}

// GetEffectiveRatesOk returns a tuple with the EffectiveRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingListShareType) GetEffectiveRatesOk() ([]EffectiveRateType, bool) {
	if o == nil || IsNil(o.EffectiveRates) {
		return nil, false
	}
	return o.EffectiveRates, true
}

// HasEffectiveRates returns a boolean if a field has been set.
func (o *RoomingListShareType) HasEffectiveRates() bool {
	if o != nil && !IsNil(o.EffectiveRates) {
		return true
	}

	return false
}

// SetEffectiveRates gets a reference to the given []EffectiveRateType and assigns it to the EffectiveRates field.
func (o *RoomingListShareType) SetEffectiveRates(v []EffectiveRateType) {
	o.EffectiveRates = v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *RoomingListShareType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomingListShareType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *RoomingListShareType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *RoomingListShareType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o RoomingListShareType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomingListShareType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reservation) {
		toSerialize["reservation"] = o.Reservation
	}
	if !IsNil(o.EffectiveRates) {
		toSerialize["effectiveRates"] = o.EffectiveRates
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableRoomingListShareType struct {
	value *RoomingListShareType
	isSet bool
}

func (v NullableRoomingListShareType) Get() *RoomingListShareType {
	return v.value
}

func (v *NullableRoomingListShareType) Set(val *RoomingListShareType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomingListShareType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomingListShareType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomingListShareType(val *RoomingListShareType) *NullableRoomingListShareType {
	return &NullableRoomingListShareType{value: val, isSet: true}
}

func (v NullableRoomingListShareType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomingListShareType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


