/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the CustomFieldsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomFieldsType{}

// CustomFieldsType A common type used to hold custom user defined fields(UDFs). This type should be used to handle custom UDFs on RReservation, Profiles, tc.
type CustomFieldsType struct {
	// Used to hold collection of custom user defined fields of Character/String Type.
	CustomCharUDFs []CharacterUDFType `json:"customCharUDFs,omitempty"`
	// Used to hold collection of custom user defined fields of Date Type.
	CustomDateUDFs []DateUDFType `json:"customDateUDFs,omitempty"`
	// Used to hold collection of custom user defined fields of Numeric Type.
	CustomNumericUDFs []NumericUDFType `json:"customNumericUDFs,omitempty"`
}

// NewCustomFieldsType instantiates a new CustomFieldsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFieldsType() *CustomFieldsType {
	this := CustomFieldsType{}
	return &this
}

// NewCustomFieldsTypeWithDefaults instantiates a new CustomFieldsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldsTypeWithDefaults() *CustomFieldsType {
	this := CustomFieldsType{}
	return &this
}

// GetCustomCharUDFs returns the CustomCharUDFs field value if set, zero value otherwise.
func (o *CustomFieldsType) GetCustomCharUDFs() []CharacterUDFType {
	if o == nil || IsNil(o.CustomCharUDFs) {
		var ret []CharacterUDFType
		return ret
	}
	return o.CustomCharUDFs
}

// GetCustomCharUDFsOk returns a tuple with the CustomCharUDFs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldsType) GetCustomCharUDFsOk() ([]CharacterUDFType, bool) {
	if o == nil || IsNil(o.CustomCharUDFs) {
		return nil, false
	}
	return o.CustomCharUDFs, true
}

// HasCustomCharUDFs returns a boolean if a field has been set.
func (o *CustomFieldsType) HasCustomCharUDFs() bool {
	if o != nil && !IsNil(o.CustomCharUDFs) {
		return true
	}

	return false
}

// SetCustomCharUDFs gets a reference to the given []CharacterUDFType and assigns it to the CustomCharUDFs field.
func (o *CustomFieldsType) SetCustomCharUDFs(v []CharacterUDFType) {
	o.CustomCharUDFs = v
}

// GetCustomDateUDFs returns the CustomDateUDFs field value if set, zero value otherwise.
func (o *CustomFieldsType) GetCustomDateUDFs() []DateUDFType {
	if o == nil || IsNil(o.CustomDateUDFs) {
		var ret []DateUDFType
		return ret
	}
	return o.CustomDateUDFs
}

// GetCustomDateUDFsOk returns a tuple with the CustomDateUDFs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldsType) GetCustomDateUDFsOk() ([]DateUDFType, bool) {
	if o == nil || IsNil(o.CustomDateUDFs) {
		return nil, false
	}
	return o.CustomDateUDFs, true
}

// HasCustomDateUDFs returns a boolean if a field has been set.
func (o *CustomFieldsType) HasCustomDateUDFs() bool {
	if o != nil && !IsNil(o.CustomDateUDFs) {
		return true
	}

	return false
}

// SetCustomDateUDFs gets a reference to the given []DateUDFType and assigns it to the CustomDateUDFs field.
func (o *CustomFieldsType) SetCustomDateUDFs(v []DateUDFType) {
	o.CustomDateUDFs = v
}

// GetCustomNumericUDFs returns the CustomNumericUDFs field value if set, zero value otherwise.
func (o *CustomFieldsType) GetCustomNumericUDFs() []NumericUDFType {
	if o == nil || IsNil(o.CustomNumericUDFs) {
		var ret []NumericUDFType
		return ret
	}
	return o.CustomNumericUDFs
}

// GetCustomNumericUDFsOk returns a tuple with the CustomNumericUDFs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldsType) GetCustomNumericUDFsOk() ([]NumericUDFType, bool) {
	if o == nil || IsNil(o.CustomNumericUDFs) {
		return nil, false
	}
	return o.CustomNumericUDFs, true
}

// HasCustomNumericUDFs returns a boolean if a field has been set.
func (o *CustomFieldsType) HasCustomNumericUDFs() bool {
	if o != nil && !IsNil(o.CustomNumericUDFs) {
		return true
	}

	return false
}

// SetCustomNumericUDFs gets a reference to the given []NumericUDFType and assigns it to the CustomNumericUDFs field.
func (o *CustomFieldsType) SetCustomNumericUDFs(v []NumericUDFType) {
	o.CustomNumericUDFs = v
}

func (o CustomFieldsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFieldsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomCharUDFs) {
		toSerialize["customCharUDFs"] = o.CustomCharUDFs
	}
	if !IsNil(o.CustomDateUDFs) {
		toSerialize["customDateUDFs"] = o.CustomDateUDFs
	}
	if !IsNil(o.CustomNumericUDFs) {
		toSerialize["customNumericUDFs"] = o.CustomNumericUDFs
	}
	return toSerialize, nil
}

type NullableCustomFieldsType struct {
	value *CustomFieldsType
	isSet bool
}

func (v NullableCustomFieldsType) Get() *CustomFieldsType {
	return v.value
}

func (v *NullableCustomFieldsType) Set(val *CustomFieldsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldsType(val *CustomFieldsType) *NullableCustomFieldsType {
	return &NullableCustomFieldsType{value: val, isSet: true}
}

func (v NullableCustomFieldsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


