/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAvailabilityMasterInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAvailabilityMasterInfoType{}

// BlockAvailabilityMasterInfoType Holds master information for block availability.
type BlockAvailabilityMasterInfoType struct {
	// Currency exchange rate information.
	CurrencyExchangeRates []CurrencyExchangeRateType `json:"currencyExchangeRates,omitempty"`
	// Details pertaining to a room type.
	FetchedRoomTypes []BlockAvailabilityRoomTypeInfo `json:"fetchedRoomTypes,omitempty"`
	MasterRoomTypes []string `json:"masterRoomTypes,omitempty"`
	// Rate plan code details for the block.
	RatePlans []BlockAvailabilityRatePlanInfo `json:"ratePlans,omitempty"`
}

// NewBlockAvailabilityMasterInfoType instantiates a new BlockAvailabilityMasterInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAvailabilityMasterInfoType() *BlockAvailabilityMasterInfoType {
	this := BlockAvailabilityMasterInfoType{}
	return &this
}

// NewBlockAvailabilityMasterInfoTypeWithDefaults instantiates a new BlockAvailabilityMasterInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAvailabilityMasterInfoTypeWithDefaults() *BlockAvailabilityMasterInfoType {
	this := BlockAvailabilityMasterInfoType{}
	return &this
}

// GetCurrencyExchangeRates returns the CurrencyExchangeRates field value if set, zero value otherwise.
func (o *BlockAvailabilityMasterInfoType) GetCurrencyExchangeRates() []CurrencyExchangeRateType {
	if o == nil || IsNil(o.CurrencyExchangeRates) {
		var ret []CurrencyExchangeRateType
		return ret
	}
	return o.CurrencyExchangeRates
}

// GetCurrencyExchangeRatesOk returns a tuple with the CurrencyExchangeRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityMasterInfoType) GetCurrencyExchangeRatesOk() ([]CurrencyExchangeRateType, bool) {
	if o == nil || IsNil(o.CurrencyExchangeRates) {
		return nil, false
	}
	return o.CurrencyExchangeRates, true
}

// HasCurrencyExchangeRates returns a boolean if a field has been set.
func (o *BlockAvailabilityMasterInfoType) HasCurrencyExchangeRates() bool {
	if o != nil && !IsNil(o.CurrencyExchangeRates) {
		return true
	}

	return false
}

// SetCurrencyExchangeRates gets a reference to the given []CurrencyExchangeRateType and assigns it to the CurrencyExchangeRates field.
func (o *BlockAvailabilityMasterInfoType) SetCurrencyExchangeRates(v []CurrencyExchangeRateType) {
	o.CurrencyExchangeRates = v
}

// GetFetchedRoomTypes returns the FetchedRoomTypes field value if set, zero value otherwise.
func (o *BlockAvailabilityMasterInfoType) GetFetchedRoomTypes() []BlockAvailabilityRoomTypeInfo {
	if o == nil || IsNil(o.FetchedRoomTypes) {
		var ret []BlockAvailabilityRoomTypeInfo
		return ret
	}
	return o.FetchedRoomTypes
}

// GetFetchedRoomTypesOk returns a tuple with the FetchedRoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityMasterInfoType) GetFetchedRoomTypesOk() ([]BlockAvailabilityRoomTypeInfo, bool) {
	if o == nil || IsNil(o.FetchedRoomTypes) {
		return nil, false
	}
	return o.FetchedRoomTypes, true
}

// HasFetchedRoomTypes returns a boolean if a field has been set.
func (o *BlockAvailabilityMasterInfoType) HasFetchedRoomTypes() bool {
	if o != nil && !IsNil(o.FetchedRoomTypes) {
		return true
	}

	return false
}

// SetFetchedRoomTypes gets a reference to the given []BlockAvailabilityRoomTypeInfo and assigns it to the FetchedRoomTypes field.
func (o *BlockAvailabilityMasterInfoType) SetFetchedRoomTypes(v []BlockAvailabilityRoomTypeInfo) {
	o.FetchedRoomTypes = v
}

// GetMasterRoomTypes returns the MasterRoomTypes field value if set, zero value otherwise.
func (o *BlockAvailabilityMasterInfoType) GetMasterRoomTypes() []string {
	if o == nil || IsNil(o.MasterRoomTypes) {
		var ret []string
		return ret
	}
	return o.MasterRoomTypes
}

// GetMasterRoomTypesOk returns a tuple with the MasterRoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityMasterInfoType) GetMasterRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.MasterRoomTypes) {
		return nil, false
	}
	return o.MasterRoomTypes, true
}

// HasMasterRoomTypes returns a boolean if a field has been set.
func (o *BlockAvailabilityMasterInfoType) HasMasterRoomTypes() bool {
	if o != nil && !IsNil(o.MasterRoomTypes) {
		return true
	}

	return false
}

// SetMasterRoomTypes gets a reference to the given []string and assigns it to the MasterRoomTypes field.
func (o *BlockAvailabilityMasterInfoType) SetMasterRoomTypes(v []string) {
	o.MasterRoomTypes = v
}

// GetRatePlans returns the RatePlans field value if set, zero value otherwise.
func (o *BlockAvailabilityMasterInfoType) GetRatePlans() []BlockAvailabilityRatePlanInfo {
	if o == nil || IsNil(o.RatePlans) {
		var ret []BlockAvailabilityRatePlanInfo
		return ret
	}
	return o.RatePlans
}

// GetRatePlansOk returns a tuple with the RatePlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityMasterInfoType) GetRatePlansOk() ([]BlockAvailabilityRatePlanInfo, bool) {
	if o == nil || IsNil(o.RatePlans) {
		return nil, false
	}
	return o.RatePlans, true
}

// HasRatePlans returns a boolean if a field has been set.
func (o *BlockAvailabilityMasterInfoType) HasRatePlans() bool {
	if o != nil && !IsNil(o.RatePlans) {
		return true
	}

	return false
}

// SetRatePlans gets a reference to the given []BlockAvailabilityRatePlanInfo and assigns it to the RatePlans field.
func (o *BlockAvailabilityMasterInfoType) SetRatePlans(v []BlockAvailabilityRatePlanInfo) {
	o.RatePlans = v
}

func (o BlockAvailabilityMasterInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAvailabilityMasterInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyExchangeRates) {
		toSerialize["currencyExchangeRates"] = o.CurrencyExchangeRates
	}
	if !IsNil(o.FetchedRoomTypes) {
		toSerialize["fetchedRoomTypes"] = o.FetchedRoomTypes
	}
	if !IsNil(o.MasterRoomTypes) {
		toSerialize["masterRoomTypes"] = o.MasterRoomTypes
	}
	if !IsNil(o.RatePlans) {
		toSerialize["ratePlans"] = o.RatePlans
	}
	return toSerialize, nil
}

type NullableBlockAvailabilityMasterInfoType struct {
	value *BlockAvailabilityMasterInfoType
	isSet bool
}

func (v NullableBlockAvailabilityMasterInfoType) Get() *BlockAvailabilityMasterInfoType {
	return v.value
}

func (v *NullableBlockAvailabilityMasterInfoType) Set(val *BlockAvailabilityMasterInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAvailabilityMasterInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAvailabilityMasterInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAvailabilityMasterInfoType(val *BlockAvailabilityMasterInfoType) *NullableBlockAvailabilityMasterInfoType {
	return &NullableBlockAvailabilityMasterInfoType{value: val, isSet: true}
}

func (v NullableBlockAvailabilityMasterInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAvailabilityMasterInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


