/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAvailabilityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAvailabilityType{}

// BlockAvailabilityType Holds block availability information.
type BlockAvailabilityType struct {
	// Provides room allocation/availability information for a stay date.
	BlockAvailability []BlockAvailabilityInfoType `json:"blockAvailability,omitempty"`
	BlockAvailabilityMasterInfo *BlockAvailabilityMasterInfoType `json:"blockAvailabilityMasterInfo,omitempty"`
	BlockHeaderInfo *BlockHeaderInfoType `json:"blockHeaderInfo,omitempty"`
}

// NewBlockAvailabilityType instantiates a new BlockAvailabilityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAvailabilityType() *BlockAvailabilityType {
	this := BlockAvailabilityType{}
	return &this
}

// NewBlockAvailabilityTypeWithDefaults instantiates a new BlockAvailabilityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAvailabilityTypeWithDefaults() *BlockAvailabilityType {
	this := BlockAvailabilityType{}
	return &this
}

// GetBlockAvailability returns the BlockAvailability field value if set, zero value otherwise.
func (o *BlockAvailabilityType) GetBlockAvailability() []BlockAvailabilityInfoType {
	if o == nil || IsNil(o.BlockAvailability) {
		var ret []BlockAvailabilityInfoType
		return ret
	}
	return o.BlockAvailability
}

// GetBlockAvailabilityOk returns a tuple with the BlockAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityType) GetBlockAvailabilityOk() ([]BlockAvailabilityInfoType, bool) {
	if o == nil || IsNil(o.BlockAvailability) {
		return nil, false
	}
	return o.BlockAvailability, true
}

// HasBlockAvailability returns a boolean if a field has been set.
func (o *BlockAvailabilityType) HasBlockAvailability() bool {
	if o != nil && !IsNil(o.BlockAvailability) {
		return true
	}

	return false
}

// SetBlockAvailability gets a reference to the given []BlockAvailabilityInfoType and assigns it to the BlockAvailability field.
func (o *BlockAvailabilityType) SetBlockAvailability(v []BlockAvailabilityInfoType) {
	o.BlockAvailability = v
}

// GetBlockAvailabilityMasterInfo returns the BlockAvailabilityMasterInfo field value if set, zero value otherwise.
func (o *BlockAvailabilityType) GetBlockAvailabilityMasterInfo() BlockAvailabilityMasterInfoType {
	if o == nil || IsNil(o.BlockAvailabilityMasterInfo) {
		var ret BlockAvailabilityMasterInfoType
		return ret
	}
	return *o.BlockAvailabilityMasterInfo
}

// GetBlockAvailabilityMasterInfoOk returns a tuple with the BlockAvailabilityMasterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityType) GetBlockAvailabilityMasterInfoOk() (*BlockAvailabilityMasterInfoType, bool) {
	if o == nil || IsNil(o.BlockAvailabilityMasterInfo) {
		return nil, false
	}
	return o.BlockAvailabilityMasterInfo, true
}

// HasBlockAvailabilityMasterInfo returns a boolean if a field has been set.
func (o *BlockAvailabilityType) HasBlockAvailabilityMasterInfo() bool {
	if o != nil && !IsNil(o.BlockAvailabilityMasterInfo) {
		return true
	}

	return false
}

// SetBlockAvailabilityMasterInfo gets a reference to the given BlockAvailabilityMasterInfoType and assigns it to the BlockAvailabilityMasterInfo field.
func (o *BlockAvailabilityType) SetBlockAvailabilityMasterInfo(v BlockAvailabilityMasterInfoType) {
	o.BlockAvailabilityMasterInfo = &v
}

// GetBlockHeaderInfo returns the BlockHeaderInfo field value if set, zero value otherwise.
func (o *BlockAvailabilityType) GetBlockHeaderInfo() BlockHeaderInfoType {
	if o == nil || IsNil(o.BlockHeaderInfo) {
		var ret BlockHeaderInfoType
		return ret
	}
	return *o.BlockHeaderInfo
}

// GetBlockHeaderInfoOk returns a tuple with the BlockHeaderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAvailabilityType) GetBlockHeaderInfoOk() (*BlockHeaderInfoType, bool) {
	if o == nil || IsNil(o.BlockHeaderInfo) {
		return nil, false
	}
	return o.BlockHeaderInfo, true
}

// HasBlockHeaderInfo returns a boolean if a field has been set.
func (o *BlockAvailabilityType) HasBlockHeaderInfo() bool {
	if o != nil && !IsNil(o.BlockHeaderInfo) {
		return true
	}

	return false
}

// SetBlockHeaderInfo gets a reference to the given BlockHeaderInfoType and assigns it to the BlockHeaderInfo field.
func (o *BlockAvailabilityType) SetBlockHeaderInfo(v BlockHeaderInfoType) {
	o.BlockHeaderInfo = &v
}

func (o BlockAvailabilityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAvailabilityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockAvailability) {
		toSerialize["blockAvailability"] = o.BlockAvailability
	}
	if !IsNil(o.BlockAvailabilityMasterInfo) {
		toSerialize["blockAvailabilityMasterInfo"] = o.BlockAvailabilityMasterInfo
	}
	if !IsNil(o.BlockHeaderInfo) {
		toSerialize["blockHeaderInfo"] = o.BlockHeaderInfo
	}
	return toSerialize, nil
}

type NullableBlockAvailabilityType struct {
	value *BlockAvailabilityType
	isSet bool
}

func (v NullableBlockAvailabilityType) Get() *BlockAvailabilityType {
	return v.value
}

func (v *NullableBlockAvailabilityType) Set(val *BlockAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAvailabilityType(val *BlockAvailabilityType) *NullableBlockAvailabilityType {
	return &NullableBlockAvailabilityType{value: val, isSet: true}
}

func (v NullableBlockAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


