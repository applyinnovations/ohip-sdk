/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the SetBlockGridInvType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetBlockGridInvType{}

// SetBlockGridInvType Indicates the inventory values ( occupancy or availability ) per person occupancy.
type SetBlockGridInvType struct {
	// Indicates the one person inventory value ( occupancy or availability ).
	OnePerson *int32 `json:"onePerson,omitempty"`
	// Indicates the two person inventory value ( occupancy or availability ).
	TwoPerson *int32 `json:"twoPerson,omitempty"`
	// Indicates the three person inventory value ( occupancy or availability ).
	ThreePerson *int32 `json:"threePerson,omitempty"`
	// Indicates the four person inventory value ( occupancy or availability ).
	FourPerson *int32 `json:"fourPerson,omitempty"`
	// Indicates the sell limit
	SellLimit *int32 `json:"sellLimit,omitempty"`
	// Indicates the cutoff date.Date when inventory left in the block will be cut-off.
	CutoffDate *string `json:"cutoffDate,omitempty"`
	// Indicates whether to overbook the rooms in case there are not enough rooms at the house or room type level.
	ForceOverbook *bool `json:"forceOverbook,omitempty"`
}

// NewSetBlockGridInvType instantiates a new SetBlockGridInvType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetBlockGridInvType() *SetBlockGridInvType {
	this := SetBlockGridInvType{}
	return &this
}

// NewSetBlockGridInvTypeWithDefaults instantiates a new SetBlockGridInvType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetBlockGridInvTypeWithDefaults() *SetBlockGridInvType {
	this := SetBlockGridInvType{}
	return &this
}

// GetOnePerson returns the OnePerson field value if set, zero value otherwise.
func (o *SetBlockGridInvType) GetOnePerson() int32 {
	if o == nil || IsNil(o.OnePerson) {
		var ret int32
		return ret
	}
	return *o.OnePerson
}

// GetOnePersonOk returns a tuple with the OnePerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlockGridInvType) GetOnePersonOk() (*int32, bool) {
	if o == nil || IsNil(o.OnePerson) {
		return nil, false
	}
	return o.OnePerson, true
}

// HasOnePerson returns a boolean if a field has been set.
func (o *SetBlockGridInvType) HasOnePerson() bool {
	if o != nil && !IsNil(o.OnePerson) {
		return true
	}

	return false
}

// SetOnePerson gets a reference to the given int32 and assigns it to the OnePerson field.
func (o *SetBlockGridInvType) SetOnePerson(v int32) {
	o.OnePerson = &v
}

// GetTwoPerson returns the TwoPerson field value if set, zero value otherwise.
func (o *SetBlockGridInvType) GetTwoPerson() int32 {
	if o == nil || IsNil(o.TwoPerson) {
		var ret int32
		return ret
	}
	return *o.TwoPerson
}

// GetTwoPersonOk returns a tuple with the TwoPerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlockGridInvType) GetTwoPersonOk() (*int32, bool) {
	if o == nil || IsNil(o.TwoPerson) {
		return nil, false
	}
	return o.TwoPerson, true
}

// HasTwoPerson returns a boolean if a field has been set.
func (o *SetBlockGridInvType) HasTwoPerson() bool {
	if o != nil && !IsNil(o.TwoPerson) {
		return true
	}

	return false
}

// SetTwoPerson gets a reference to the given int32 and assigns it to the TwoPerson field.
func (o *SetBlockGridInvType) SetTwoPerson(v int32) {
	o.TwoPerson = &v
}

// GetThreePerson returns the ThreePerson field value if set, zero value otherwise.
func (o *SetBlockGridInvType) GetThreePerson() int32 {
	if o == nil || IsNil(o.ThreePerson) {
		var ret int32
		return ret
	}
	return *o.ThreePerson
}

// GetThreePersonOk returns a tuple with the ThreePerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlockGridInvType) GetThreePersonOk() (*int32, bool) {
	if o == nil || IsNil(o.ThreePerson) {
		return nil, false
	}
	return o.ThreePerson, true
}

// HasThreePerson returns a boolean if a field has been set.
func (o *SetBlockGridInvType) HasThreePerson() bool {
	if o != nil && !IsNil(o.ThreePerson) {
		return true
	}

	return false
}

// SetThreePerson gets a reference to the given int32 and assigns it to the ThreePerson field.
func (o *SetBlockGridInvType) SetThreePerson(v int32) {
	o.ThreePerson = &v
}

// GetFourPerson returns the FourPerson field value if set, zero value otherwise.
func (o *SetBlockGridInvType) GetFourPerson() int32 {
	if o == nil || IsNil(o.FourPerson) {
		var ret int32
		return ret
	}
	return *o.FourPerson
}

// GetFourPersonOk returns a tuple with the FourPerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlockGridInvType) GetFourPersonOk() (*int32, bool) {
	if o == nil || IsNil(o.FourPerson) {
		return nil, false
	}
	return o.FourPerson, true
}

// HasFourPerson returns a boolean if a field has been set.
func (o *SetBlockGridInvType) HasFourPerson() bool {
	if o != nil && !IsNil(o.FourPerson) {
		return true
	}

	return false
}

// SetFourPerson gets a reference to the given int32 and assigns it to the FourPerson field.
func (o *SetBlockGridInvType) SetFourPerson(v int32) {
	o.FourPerson = &v
}

// GetSellLimit returns the SellLimit field value if set, zero value otherwise.
func (o *SetBlockGridInvType) GetSellLimit() int32 {
	if o == nil || IsNil(o.SellLimit) {
		var ret int32
		return ret
	}
	return *o.SellLimit
}

// GetSellLimitOk returns a tuple with the SellLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlockGridInvType) GetSellLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.SellLimit) {
		return nil, false
	}
	return o.SellLimit, true
}

// HasSellLimit returns a boolean if a field has been set.
func (o *SetBlockGridInvType) HasSellLimit() bool {
	if o != nil && !IsNil(o.SellLimit) {
		return true
	}

	return false
}

// SetSellLimit gets a reference to the given int32 and assigns it to the SellLimit field.
func (o *SetBlockGridInvType) SetSellLimit(v int32) {
	o.SellLimit = &v
}

// GetCutoffDate returns the CutoffDate field value if set, zero value otherwise.
func (o *SetBlockGridInvType) GetCutoffDate() string {
	if o == nil || IsNil(o.CutoffDate) {
		var ret string
		return ret
	}
	return *o.CutoffDate
}

// GetCutoffDateOk returns a tuple with the CutoffDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlockGridInvType) GetCutoffDateOk() (*string, bool) {
	if o == nil || IsNil(o.CutoffDate) {
		return nil, false
	}
	return o.CutoffDate, true
}

// HasCutoffDate returns a boolean if a field has been set.
func (o *SetBlockGridInvType) HasCutoffDate() bool {
	if o != nil && !IsNil(o.CutoffDate) {
		return true
	}

	return false
}

// SetCutoffDate gets a reference to the given string and assigns it to the CutoffDate field.
func (o *SetBlockGridInvType) SetCutoffDate(v string) {
	o.CutoffDate = &v
}

// GetForceOverbook returns the ForceOverbook field value if set, zero value otherwise.
func (o *SetBlockGridInvType) GetForceOverbook() bool {
	if o == nil || IsNil(o.ForceOverbook) {
		var ret bool
		return ret
	}
	return *o.ForceOverbook
}

// GetForceOverbookOk returns a tuple with the ForceOverbook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetBlockGridInvType) GetForceOverbookOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceOverbook) {
		return nil, false
	}
	return o.ForceOverbook, true
}

// HasForceOverbook returns a boolean if a field has been set.
func (o *SetBlockGridInvType) HasForceOverbook() bool {
	if o != nil && !IsNil(o.ForceOverbook) {
		return true
	}

	return false
}

// SetForceOverbook gets a reference to the given bool and assigns it to the ForceOverbook field.
func (o *SetBlockGridInvType) SetForceOverbook(v bool) {
	o.ForceOverbook = &v
}

func (o SetBlockGridInvType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetBlockGridInvType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnePerson) {
		toSerialize["onePerson"] = o.OnePerson
	}
	if !IsNil(o.TwoPerson) {
		toSerialize["twoPerson"] = o.TwoPerson
	}
	if !IsNil(o.ThreePerson) {
		toSerialize["threePerson"] = o.ThreePerson
	}
	if !IsNil(o.FourPerson) {
		toSerialize["fourPerson"] = o.FourPerson
	}
	if !IsNil(o.SellLimit) {
		toSerialize["sellLimit"] = o.SellLimit
	}
	if !IsNil(o.CutoffDate) {
		toSerialize["cutoffDate"] = o.CutoffDate
	}
	if !IsNil(o.ForceOverbook) {
		toSerialize["forceOverbook"] = o.ForceOverbook
	}
	return toSerialize, nil
}

type NullableSetBlockGridInvType struct {
	value *SetBlockGridInvType
	isSet bool
}

func (v NullableSetBlockGridInvType) Get() *SetBlockGridInvType {
	return v.value
}

func (v *NullableSetBlockGridInvType) Set(val *SetBlockGridInvType) {
	v.value = val
	v.isSet = true
}

func (v NullableSetBlockGridInvType) IsSet() bool {
	return v.isSet
}

func (v *NullableSetBlockGridInvType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetBlockGridInvType(val *SetBlockGridInvType) *NullableSetBlockGridInvType {
	return &NullableSetBlockGridInvType{value: val, isSet: true}
}

func (v NullableSetBlockGridInvType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetBlockGridInvType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


