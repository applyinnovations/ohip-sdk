/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockPostingMaster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockPostingMaster{}

// BlockPostingMaster Request object for creating a new Posting Master Reservation.
type BlockPostingMaster struct {
	Criteria *CreateBlockPostingMasterCriteria `json:"criteria,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewBlockPostingMaster instantiates a new BlockPostingMaster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockPostingMaster() *BlockPostingMaster {
	this := BlockPostingMaster{}
	return &this
}

// NewBlockPostingMasterWithDefaults instantiates a new BlockPostingMaster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockPostingMasterWithDefaults() *BlockPostingMaster {
	this := BlockPostingMaster{}
	return &this
}

// GetCriteria returns the Criteria field value if set, zero value otherwise.
func (o *BlockPostingMaster) GetCriteria() CreateBlockPostingMasterCriteria {
	if o == nil || IsNil(o.Criteria) {
		var ret CreateBlockPostingMasterCriteria
		return ret
	}
	return *o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPostingMaster) GetCriteriaOk() (*CreateBlockPostingMasterCriteria, bool) {
	if o == nil || IsNil(o.Criteria) {
		return nil, false
	}
	return o.Criteria, true
}

// HasCriteria returns a boolean if a field has been set.
func (o *BlockPostingMaster) HasCriteria() bool {
	if o != nil && !IsNil(o.Criteria) {
		return true
	}

	return false
}

// SetCriteria gets a reference to the given CreateBlockPostingMasterCriteria and assigns it to the Criteria field.
func (o *BlockPostingMaster) SetCriteria(v CreateBlockPostingMasterCriteria) {
	o.Criteria = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BlockPostingMaster) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPostingMaster) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BlockPostingMaster) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *BlockPostingMaster) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BlockPostingMaster) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPostingMaster) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BlockPostingMaster) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *BlockPostingMaster) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o BlockPostingMaster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockPostingMaster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Criteria) {
		toSerialize["criteria"] = o.Criteria
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBlockPostingMaster struct {
	value *BlockPostingMaster
	isSet bool
}

func (v NullableBlockPostingMaster) Get() *BlockPostingMaster {
	return v.value
}

func (v *NullableBlockPostingMaster) Set(val *BlockPostingMaster) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockPostingMaster) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockPostingMaster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockPostingMaster(val *BlockPostingMaster) *NullableBlockPostingMaster {
	return &NullableBlockPostingMaster{value: val, isSet: true}
}

func (v NullableBlockPostingMaster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockPostingMaster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


