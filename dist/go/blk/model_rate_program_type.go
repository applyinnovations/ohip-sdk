/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RateProgramType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateProgramType{}

// RateProgramType Rate Programs for the Block.
type RateProgramType struct {
	// Block Rate Program Rates.
	Rates []RateProgramRateType `json:"rates,omitempty"`
	// Room Pool Code.
	RoomPool *string `json:"roomPool,omitempty"`
}

// NewRateProgramType instantiates a new RateProgramType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateProgramType() *RateProgramType {
	this := RateProgramType{}
	return &this
}

// NewRateProgramTypeWithDefaults instantiates a new RateProgramType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateProgramTypeWithDefaults() *RateProgramType {
	this := RateProgramType{}
	return &this
}

// GetRates returns the Rates field value if set, zero value otherwise.
func (o *RateProgramType) GetRates() []RateProgramRateType {
	if o == nil || IsNil(o.Rates) {
		var ret []RateProgramRateType
		return ret
	}
	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramType) GetRatesOk() ([]RateProgramRateType, bool) {
	if o == nil || IsNil(o.Rates) {
		return nil, false
	}
	return o.Rates, true
}

// HasRates returns a boolean if a field has been set.
func (o *RateProgramType) HasRates() bool {
	if o != nil && !IsNil(o.Rates) {
		return true
	}

	return false
}

// SetRates gets a reference to the given []RateProgramRateType and assigns it to the Rates field.
func (o *RateProgramType) SetRates(v []RateProgramRateType) {
	o.Rates = v
}

// GetRoomPool returns the RoomPool field value if set, zero value otherwise.
func (o *RateProgramType) GetRoomPool() string {
	if o == nil || IsNil(o.RoomPool) {
		var ret string
		return ret
	}
	return *o.RoomPool
}

// GetRoomPoolOk returns a tuple with the RoomPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateProgramType) GetRoomPoolOk() (*string, bool) {
	if o == nil || IsNil(o.RoomPool) {
		return nil, false
	}
	return o.RoomPool, true
}

// HasRoomPool returns a boolean if a field has been set.
func (o *RateProgramType) HasRoomPool() bool {
	if o != nil && !IsNil(o.RoomPool) {
		return true
	}

	return false
}

// SetRoomPool gets a reference to the given string and assigns it to the RoomPool field.
func (o *RateProgramType) SetRoomPool(v string) {
	o.RoomPool = &v
}

func (o RateProgramType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateProgramType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rates) {
		toSerialize["rates"] = o.Rates
	}
	if !IsNil(o.RoomPool) {
		toSerialize["roomPool"] = o.RoomPool
	}
	return toSerialize, nil
}

type NullableRateProgramType struct {
	value *RateProgramType
	isSet bool
}

func (v NullableRateProgramType) Get() *RateProgramType {
	return v.value
}

func (v *NullableRateProgramType) Set(val *RateProgramType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateProgramType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateProgramType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateProgramType(val *RateProgramType) *NullableRateProgramType {
	return &NullableRateProgramType{value: val, isSet: true}
}

func (v NullableRateProgramType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateProgramType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


