/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockTotalAvailabilityInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockTotalAvailabilityInfoType{}

// BlockTotalAvailabilityInfoType Captures total room availability information for the block by room type for the entire stay.
type BlockTotalAvailabilityInfoType struct {
	// Stay Start Date.
	StayStartDate *string `json:"stayStartDate,omitempty"`
	// Stay End Date.
	StayEndDate *string `json:"stayEndDate,omitempty"`
	// Total number of rooms.
	Rooms *float32 `json:"rooms,omitempty"`
	// Total Block Availability per room type.
	RoomInfo []BlockAvailabilityRoomInfoType `json:"roomInfo,omitempty"`
}

// NewBlockTotalAvailabilityInfoType instantiates a new BlockTotalAvailabilityInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockTotalAvailabilityInfoType() *BlockTotalAvailabilityInfoType {
	this := BlockTotalAvailabilityInfoType{}
	return &this
}

// NewBlockTotalAvailabilityInfoTypeWithDefaults instantiates a new BlockTotalAvailabilityInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockTotalAvailabilityInfoTypeWithDefaults() *BlockTotalAvailabilityInfoType {
	this := BlockTotalAvailabilityInfoType{}
	return &this
}

// GetStayStartDate returns the StayStartDate field value if set, zero value otherwise.
func (o *BlockTotalAvailabilityInfoType) GetStayStartDate() string {
	if o == nil || IsNil(o.StayStartDate) {
		var ret string
		return ret
	}
	return *o.StayStartDate
}

// GetStayStartDateOk returns a tuple with the StayStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTotalAvailabilityInfoType) GetStayStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StayStartDate) {
		return nil, false
	}
	return o.StayStartDate, true
}

// HasStayStartDate returns a boolean if a field has been set.
func (o *BlockTotalAvailabilityInfoType) HasStayStartDate() bool {
	if o != nil && !IsNil(o.StayStartDate) {
		return true
	}

	return false
}

// SetStayStartDate gets a reference to the given string and assigns it to the StayStartDate field.
func (o *BlockTotalAvailabilityInfoType) SetStayStartDate(v string) {
	o.StayStartDate = &v
}

// GetStayEndDate returns the StayEndDate field value if set, zero value otherwise.
func (o *BlockTotalAvailabilityInfoType) GetStayEndDate() string {
	if o == nil || IsNil(o.StayEndDate) {
		var ret string
		return ret
	}
	return *o.StayEndDate
}

// GetStayEndDateOk returns a tuple with the StayEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTotalAvailabilityInfoType) GetStayEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.StayEndDate) {
		return nil, false
	}
	return o.StayEndDate, true
}

// HasStayEndDate returns a boolean if a field has been set.
func (o *BlockTotalAvailabilityInfoType) HasStayEndDate() bool {
	if o != nil && !IsNil(o.StayEndDate) {
		return true
	}

	return false
}

// SetStayEndDate gets a reference to the given string and assigns it to the StayEndDate field.
func (o *BlockTotalAvailabilityInfoType) SetStayEndDate(v string) {
	o.StayEndDate = &v
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *BlockTotalAvailabilityInfoType) GetRooms() float32 {
	if o == nil || IsNil(o.Rooms) {
		var ret float32
		return ret
	}
	return *o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTotalAvailabilityInfoType) GetRoomsOk() (*float32, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *BlockTotalAvailabilityInfoType) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given float32 and assigns it to the Rooms field.
func (o *BlockTotalAvailabilityInfoType) SetRooms(v float32) {
	o.Rooms = &v
}

// GetRoomInfo returns the RoomInfo field value if set, zero value otherwise.
func (o *BlockTotalAvailabilityInfoType) GetRoomInfo() []BlockAvailabilityRoomInfoType {
	if o == nil || IsNil(o.RoomInfo) {
		var ret []BlockAvailabilityRoomInfoType
		return ret
	}
	return o.RoomInfo
}

// GetRoomInfoOk returns a tuple with the RoomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockTotalAvailabilityInfoType) GetRoomInfoOk() ([]BlockAvailabilityRoomInfoType, bool) {
	if o == nil || IsNil(o.RoomInfo) {
		return nil, false
	}
	return o.RoomInfo, true
}

// HasRoomInfo returns a boolean if a field has been set.
func (o *BlockTotalAvailabilityInfoType) HasRoomInfo() bool {
	if o != nil && !IsNil(o.RoomInfo) {
		return true
	}

	return false
}

// SetRoomInfo gets a reference to the given []BlockAvailabilityRoomInfoType and assigns it to the RoomInfo field.
func (o *BlockTotalAvailabilityInfoType) SetRoomInfo(v []BlockAvailabilityRoomInfoType) {
	o.RoomInfo = v
}

func (o BlockTotalAvailabilityInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockTotalAvailabilityInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StayStartDate) {
		toSerialize["stayStartDate"] = o.StayStartDate
	}
	if !IsNil(o.StayEndDate) {
		toSerialize["stayEndDate"] = o.StayEndDate
	}
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	if !IsNil(o.RoomInfo) {
		toSerialize["roomInfo"] = o.RoomInfo
	}
	return toSerialize, nil
}

type NullableBlockTotalAvailabilityInfoType struct {
	value *BlockTotalAvailabilityInfoType
	isSet bool
}

func (v NullableBlockTotalAvailabilityInfoType) Get() *BlockTotalAvailabilityInfoType {
	return v.value
}

func (v *NullableBlockTotalAvailabilityInfoType) Set(val *BlockTotalAvailabilityInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockTotalAvailabilityInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockTotalAvailabilityInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockTotalAvailabilityInfoType(val *BlockTotalAvailabilityInfoType) *NullableBlockTotalAvailabilityInfoType {
	return &NullableBlockTotalAvailabilityInfoType{value: val, isSet: true}
}

func (v NullableBlockTotalAvailabilityInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockTotalAvailabilityInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


