/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockSummaryType{}

// BlockSummaryType struct for BlockSummaryType
type BlockSummaryType struct {
	// Inventory held for the block's reservations.
	ActualRooms *int32 `json:"actualRooms,omitempty"`
	BlockClassification *BlockClassificationType `json:"blockClassification,omitempty"`
	// Block code for this block.
	BlockCode *string `json:"blockCode,omitempty"`
	// Collection of lamp indicators.
	BlockIndicators []IndicatorType `json:"blockIndicators,omitempty"`
	// Block name for this block.
	BlockName *string `json:"blockName,omitempty"`
	BlockStatus *BookingStatusType `json:"blockStatus,omitempty"`
	// Number of Attendees for Catering Event
	CateringAttendees *int32 `json:"cateringAttendees,omitempty"`
	// Indicates if blocked catering events are deducted from inventory.
	CateringDeductInventory *bool `json:"cateringDeductInventory,omitempty"`
	// Indicates if this is a catering only block.
	CateringOnlyBlock *bool `json:"cateringOnlyBlock,omitempty"`
	CateringStatus *BookingStatusType `json:"cateringStatus,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	CustomFields *CustomFieldsType `json:"customFields,omitempty"`
	// Date after which unused block rooms should be returned to house.
	CutoffDate *string `json:"cutoffDate,omitempty"`
	// Contains information about the date by which the group must make a decision on the block.
	DecisionDate *string `json:"decisionDate,omitempty"`
	// Indicates if blocked rooms are deducted from inventory.
	DeductInventory *bool `json:"deductInventory,omitempty"`
	// End date for this block.
	EndDate *string `json:"endDate,omitempty"`
	// Indicates if alternate dates are allowed for the booking.
	FlexibleDates *bool `json:"flexibleDates,omitempty"`
	// Contains information to follow up on the block.
	FollowupDate *string `json:"followupDate,omitempty"`
	// Group name for this block.
	GroupName *string `json:"groupName,omitempty"`
	// Hotel code for this block.
	HotelId *string `json:"hotelId,omitempty"`
	HotelUse *HotelUseType `json:"hotelUse,omitempty"`
	InventoryControl *BlockInventoryControlType `json:"inventoryControl,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	PrimaryOwners *BlockOwnersType `json:"primaryOwners,omitempty"`
	// Rate code assigned to block.
	RateCode *string `json:"rateCode,omitempty"`
	// Reservation type of the business block.
	ReservationType *string `json:"reservationType,omitempty"`
	// Inventory held for the business block.
	Rooms *int32 `json:"rooms,omitempty"`
	// List of Generic Name-Value-Pair Parameters used for super search matches.
	SearchMatches []SearchMatchType `json:"searchMatches,omitempty"`
	// Shoulder end date for this block.
	ShoulderEndDate *string `json:"shoulderEndDate,omitempty"`
	// Shoulder begin date for this block.
	ShoulderStartDate *string `json:"shoulderStartDate,omitempty"`
	// Start date for this block.
	StartDate *string `json:"startDate,omitempty"`
	// Internal status for the block.
	Status *string `json:"status,omitempty"`
	// Indicate if Master/Sub Blocks are Synchronized.
	Synchronized *bool `json:"synchronized,omitempty"`
	// If tentative block, block inventory is not deducted from hotel inventory else block inventory is deducted.
	TentativeBlock *bool `json:"tentativeBlock,omitempty"`
	// The tour code that this block belongs to, if the block is a part of a tour series.
	TourCode *string `json:"tourCode,omitempty"`
}

// NewBlockSummaryType instantiates a new BlockSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockSummaryType() *BlockSummaryType {
	this := BlockSummaryType{}
	return &this
}

// NewBlockSummaryTypeWithDefaults instantiates a new BlockSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockSummaryTypeWithDefaults() *BlockSummaryType {
	this := BlockSummaryType{}
	return &this
}

// GetActualRooms returns the ActualRooms field value if set, zero value otherwise.
func (o *BlockSummaryType) GetActualRooms() int32 {
	if o == nil || IsNil(o.ActualRooms) {
		var ret int32
		return ret
	}
	return *o.ActualRooms
}

// GetActualRoomsOk returns a tuple with the ActualRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetActualRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.ActualRooms) {
		return nil, false
	}
	return o.ActualRooms, true
}

// HasActualRooms returns a boolean if a field has been set.
func (o *BlockSummaryType) HasActualRooms() bool {
	if o != nil && !IsNil(o.ActualRooms) {
		return true
	}

	return false
}

// SetActualRooms gets a reference to the given int32 and assigns it to the ActualRooms field.
func (o *BlockSummaryType) SetActualRooms(v int32) {
	o.ActualRooms = &v
}

// GetBlockClassification returns the BlockClassification field value if set, zero value otherwise.
func (o *BlockSummaryType) GetBlockClassification() BlockClassificationType {
	if o == nil || IsNil(o.BlockClassification) {
		var ret BlockClassificationType
		return ret
	}
	return *o.BlockClassification
}

// GetBlockClassificationOk returns a tuple with the BlockClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetBlockClassificationOk() (*BlockClassificationType, bool) {
	if o == nil || IsNil(o.BlockClassification) {
		return nil, false
	}
	return o.BlockClassification, true
}

// HasBlockClassification returns a boolean if a field has been set.
func (o *BlockSummaryType) HasBlockClassification() bool {
	if o != nil && !IsNil(o.BlockClassification) {
		return true
	}

	return false
}

// SetBlockClassification gets a reference to the given BlockClassificationType and assigns it to the BlockClassification field.
func (o *BlockSummaryType) SetBlockClassification(v BlockClassificationType) {
	o.BlockClassification = &v
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *BlockSummaryType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *BlockSummaryType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *BlockSummaryType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetBlockIndicators returns the BlockIndicators field value if set, zero value otherwise.
func (o *BlockSummaryType) GetBlockIndicators() []IndicatorType {
	if o == nil || IsNil(o.BlockIndicators) {
		var ret []IndicatorType
		return ret
	}
	return o.BlockIndicators
}

// GetBlockIndicatorsOk returns a tuple with the BlockIndicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetBlockIndicatorsOk() ([]IndicatorType, bool) {
	if o == nil || IsNil(o.BlockIndicators) {
		return nil, false
	}
	return o.BlockIndicators, true
}

// HasBlockIndicators returns a boolean if a field has been set.
func (o *BlockSummaryType) HasBlockIndicators() bool {
	if o != nil && !IsNil(o.BlockIndicators) {
		return true
	}

	return false
}

// SetBlockIndicators gets a reference to the given []IndicatorType and assigns it to the BlockIndicators field.
func (o *BlockSummaryType) SetBlockIndicators(v []IndicatorType) {
	o.BlockIndicators = v
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *BlockSummaryType) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *BlockSummaryType) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *BlockSummaryType) SetBlockName(v string) {
	o.BlockName = &v
}

// GetBlockStatus returns the BlockStatus field value if set, zero value otherwise.
func (o *BlockSummaryType) GetBlockStatus() BookingStatusType {
	if o == nil || IsNil(o.BlockStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.BlockStatus
}

// GetBlockStatusOk returns a tuple with the BlockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetBlockStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.BlockStatus) {
		return nil, false
	}
	return o.BlockStatus, true
}

// HasBlockStatus returns a boolean if a field has been set.
func (o *BlockSummaryType) HasBlockStatus() bool {
	if o != nil && !IsNil(o.BlockStatus) {
		return true
	}

	return false
}

// SetBlockStatus gets a reference to the given BookingStatusType and assigns it to the BlockStatus field.
func (o *BlockSummaryType) SetBlockStatus(v BookingStatusType) {
	o.BlockStatus = &v
}

// GetCateringAttendees returns the CateringAttendees field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCateringAttendees() int32 {
	if o == nil || IsNil(o.CateringAttendees) {
		var ret int32
		return ret
	}
	return *o.CateringAttendees
}

// GetCateringAttendeesOk returns a tuple with the CateringAttendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCateringAttendeesOk() (*int32, bool) {
	if o == nil || IsNil(o.CateringAttendees) {
		return nil, false
	}
	return o.CateringAttendees, true
}

// HasCateringAttendees returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCateringAttendees() bool {
	if o != nil && !IsNil(o.CateringAttendees) {
		return true
	}

	return false
}

// SetCateringAttendees gets a reference to the given int32 and assigns it to the CateringAttendees field.
func (o *BlockSummaryType) SetCateringAttendees(v int32) {
	o.CateringAttendees = &v
}

// GetCateringDeductInventory returns the CateringDeductInventory field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCateringDeductInventory() bool {
	if o == nil || IsNil(o.CateringDeductInventory) {
		var ret bool
		return ret
	}
	return *o.CateringDeductInventory
}

// GetCateringDeductInventoryOk returns a tuple with the CateringDeductInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCateringDeductInventoryOk() (*bool, bool) {
	if o == nil || IsNil(o.CateringDeductInventory) {
		return nil, false
	}
	return o.CateringDeductInventory, true
}

// HasCateringDeductInventory returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCateringDeductInventory() bool {
	if o != nil && !IsNil(o.CateringDeductInventory) {
		return true
	}

	return false
}

// SetCateringDeductInventory gets a reference to the given bool and assigns it to the CateringDeductInventory field.
func (o *BlockSummaryType) SetCateringDeductInventory(v bool) {
	o.CateringDeductInventory = &v
}

// GetCateringOnlyBlock returns the CateringOnlyBlock field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCateringOnlyBlock() bool {
	if o == nil || IsNil(o.CateringOnlyBlock) {
		var ret bool
		return ret
	}
	return *o.CateringOnlyBlock
}

// GetCateringOnlyBlockOk returns a tuple with the CateringOnlyBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCateringOnlyBlockOk() (*bool, bool) {
	if o == nil || IsNil(o.CateringOnlyBlock) {
		return nil, false
	}
	return o.CateringOnlyBlock, true
}

// HasCateringOnlyBlock returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCateringOnlyBlock() bool {
	if o != nil && !IsNil(o.CateringOnlyBlock) {
		return true
	}

	return false
}

// SetCateringOnlyBlock gets a reference to the given bool and assigns it to the CateringOnlyBlock field.
func (o *BlockSummaryType) SetCateringOnlyBlock(v bool) {
	o.CateringOnlyBlock = &v
}

// GetCateringStatus returns the CateringStatus field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCateringStatus() BookingStatusType {
	if o == nil || IsNil(o.CateringStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.CateringStatus
}

// GetCateringStatusOk returns a tuple with the CateringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCateringStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.CateringStatus) {
		return nil, false
	}
	return o.CateringStatus, true
}

// HasCateringStatus returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCateringStatus() bool {
	if o != nil && !IsNil(o.CateringStatus) {
		return true
	}

	return false
}

// SetCateringStatus gets a reference to the given BookingStatusType and assigns it to the CateringStatus field.
func (o *BlockSummaryType) SetCateringStatus(v BookingStatusType) {
	o.CateringStatus = &v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *BlockSummaryType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *BlockSummaryType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCustomFields() CustomFieldsType {
	if o == nil || IsNil(o.CustomFields) {
		var ret CustomFieldsType
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCustomFieldsOk() (*CustomFieldsType, bool) {
	if o == nil || IsNil(o.CustomFields) {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCustomFields() bool {
	if o != nil && !IsNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given CustomFieldsType and assigns it to the CustomFields field.
func (o *BlockSummaryType) SetCustomFields(v CustomFieldsType) {
	o.CustomFields = &v
}

// GetCutoffDate returns the CutoffDate field value if set, zero value otherwise.
func (o *BlockSummaryType) GetCutoffDate() string {
	if o == nil || IsNil(o.CutoffDate) {
		var ret string
		return ret
	}
	return *o.CutoffDate
}

// GetCutoffDateOk returns a tuple with the CutoffDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetCutoffDateOk() (*string, bool) {
	if o == nil || IsNil(o.CutoffDate) {
		return nil, false
	}
	return o.CutoffDate, true
}

// HasCutoffDate returns a boolean if a field has been set.
func (o *BlockSummaryType) HasCutoffDate() bool {
	if o != nil && !IsNil(o.CutoffDate) {
		return true
	}

	return false
}

// SetCutoffDate gets a reference to the given string and assigns it to the CutoffDate field.
func (o *BlockSummaryType) SetCutoffDate(v string) {
	o.CutoffDate = &v
}

// GetDecisionDate returns the DecisionDate field value if set, zero value otherwise.
func (o *BlockSummaryType) GetDecisionDate() string {
	if o == nil || IsNil(o.DecisionDate) {
		var ret string
		return ret
	}
	return *o.DecisionDate
}

// GetDecisionDateOk returns a tuple with the DecisionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetDecisionDateOk() (*string, bool) {
	if o == nil || IsNil(o.DecisionDate) {
		return nil, false
	}
	return o.DecisionDate, true
}

// HasDecisionDate returns a boolean if a field has been set.
func (o *BlockSummaryType) HasDecisionDate() bool {
	if o != nil && !IsNil(o.DecisionDate) {
		return true
	}

	return false
}

// SetDecisionDate gets a reference to the given string and assigns it to the DecisionDate field.
func (o *BlockSummaryType) SetDecisionDate(v string) {
	o.DecisionDate = &v
}

// GetDeductInventory returns the DeductInventory field value if set, zero value otherwise.
func (o *BlockSummaryType) GetDeductInventory() bool {
	if o == nil || IsNil(o.DeductInventory) {
		var ret bool
		return ret
	}
	return *o.DeductInventory
}

// GetDeductInventoryOk returns a tuple with the DeductInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetDeductInventoryOk() (*bool, bool) {
	if o == nil || IsNil(o.DeductInventory) {
		return nil, false
	}
	return o.DeductInventory, true
}

// HasDeductInventory returns a boolean if a field has been set.
func (o *BlockSummaryType) HasDeductInventory() bool {
	if o != nil && !IsNil(o.DeductInventory) {
		return true
	}

	return false
}

// SetDeductInventory gets a reference to the given bool and assigns it to the DeductInventory field.
func (o *BlockSummaryType) SetDeductInventory(v bool) {
	o.DeductInventory = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BlockSummaryType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BlockSummaryType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BlockSummaryType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetFlexibleDates returns the FlexibleDates field value if set, zero value otherwise.
func (o *BlockSummaryType) GetFlexibleDates() bool {
	if o == nil || IsNil(o.FlexibleDates) {
		var ret bool
		return ret
	}
	return *o.FlexibleDates
}

// GetFlexibleDatesOk returns a tuple with the FlexibleDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetFlexibleDatesOk() (*bool, bool) {
	if o == nil || IsNil(o.FlexibleDates) {
		return nil, false
	}
	return o.FlexibleDates, true
}

// HasFlexibleDates returns a boolean if a field has been set.
func (o *BlockSummaryType) HasFlexibleDates() bool {
	if o != nil && !IsNil(o.FlexibleDates) {
		return true
	}

	return false
}

// SetFlexibleDates gets a reference to the given bool and assigns it to the FlexibleDates field.
func (o *BlockSummaryType) SetFlexibleDates(v bool) {
	o.FlexibleDates = &v
}

// GetFollowupDate returns the FollowupDate field value if set, zero value otherwise.
func (o *BlockSummaryType) GetFollowupDate() string {
	if o == nil || IsNil(o.FollowupDate) {
		var ret string
		return ret
	}
	return *o.FollowupDate
}

// GetFollowupDateOk returns a tuple with the FollowupDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetFollowupDateOk() (*string, bool) {
	if o == nil || IsNil(o.FollowupDate) {
		return nil, false
	}
	return o.FollowupDate, true
}

// HasFollowupDate returns a boolean if a field has been set.
func (o *BlockSummaryType) HasFollowupDate() bool {
	if o != nil && !IsNil(o.FollowupDate) {
		return true
	}

	return false
}

// SetFollowupDate gets a reference to the given string and assigns it to the FollowupDate field.
func (o *BlockSummaryType) SetFollowupDate(v string) {
	o.FollowupDate = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *BlockSummaryType) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *BlockSummaryType) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *BlockSummaryType) SetGroupName(v string) {
	o.GroupName = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockSummaryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockSummaryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockSummaryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHotelUse returns the HotelUse field value if set, zero value otherwise.
func (o *BlockSummaryType) GetHotelUse() HotelUseType {
	if o == nil || IsNil(o.HotelUse) {
		var ret HotelUseType
		return ret
	}
	return *o.HotelUse
}

// GetHotelUseOk returns a tuple with the HotelUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetHotelUseOk() (*HotelUseType, bool) {
	if o == nil || IsNil(o.HotelUse) {
		return nil, false
	}
	return o.HotelUse, true
}

// HasHotelUse returns a boolean if a field has been set.
func (o *BlockSummaryType) HasHotelUse() bool {
	if o != nil && !IsNil(o.HotelUse) {
		return true
	}

	return false
}

// SetHotelUse gets a reference to the given HotelUseType and assigns it to the HotelUse field.
func (o *BlockSummaryType) SetHotelUse(v HotelUseType) {
	o.HotelUse = &v
}

// GetInventoryControl returns the InventoryControl field value if set, zero value otherwise.
func (o *BlockSummaryType) GetInventoryControl() BlockInventoryControlType {
	if o == nil || IsNil(o.InventoryControl) {
		var ret BlockInventoryControlType
		return ret
	}
	return *o.InventoryControl
}

// GetInventoryControlOk returns a tuple with the InventoryControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetInventoryControlOk() (*BlockInventoryControlType, bool) {
	if o == nil || IsNil(o.InventoryControl) {
		return nil, false
	}
	return o.InventoryControl, true
}

// HasInventoryControl returns a boolean if a field has been set.
func (o *BlockSummaryType) HasInventoryControl() bool {
	if o != nil && !IsNil(o.InventoryControl) {
		return true
	}

	return false
}

// SetInventoryControl gets a reference to the given BlockInventoryControlType and assigns it to the InventoryControl field.
func (o *BlockSummaryType) SetInventoryControl(v BlockInventoryControlType) {
	o.InventoryControl = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *BlockSummaryType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *BlockSummaryType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *BlockSummaryType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *BlockSummaryType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *BlockSummaryType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *BlockSummaryType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetPrimaryOwners returns the PrimaryOwners field value if set, zero value otherwise.
func (o *BlockSummaryType) GetPrimaryOwners() BlockOwnersType {
	if o == nil || IsNil(o.PrimaryOwners) {
		var ret BlockOwnersType
		return ret
	}
	return *o.PrimaryOwners
}

// GetPrimaryOwnersOk returns a tuple with the PrimaryOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetPrimaryOwnersOk() (*BlockOwnersType, bool) {
	if o == nil || IsNil(o.PrimaryOwners) {
		return nil, false
	}
	return o.PrimaryOwners, true
}

// HasPrimaryOwners returns a boolean if a field has been set.
func (o *BlockSummaryType) HasPrimaryOwners() bool {
	if o != nil && !IsNil(o.PrimaryOwners) {
		return true
	}

	return false
}

// SetPrimaryOwners gets a reference to the given BlockOwnersType and assigns it to the PrimaryOwners field.
func (o *BlockSummaryType) SetPrimaryOwners(v BlockOwnersType) {
	o.PrimaryOwners = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *BlockSummaryType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *BlockSummaryType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *BlockSummaryType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetReservationType returns the ReservationType field value if set, zero value otherwise.
func (o *BlockSummaryType) GetReservationType() string {
	if o == nil || IsNil(o.ReservationType) {
		var ret string
		return ret
	}
	return *o.ReservationType
}

// GetReservationTypeOk returns a tuple with the ReservationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetReservationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReservationType) {
		return nil, false
	}
	return o.ReservationType, true
}

// HasReservationType returns a boolean if a field has been set.
func (o *BlockSummaryType) HasReservationType() bool {
	if o != nil && !IsNil(o.ReservationType) {
		return true
	}

	return false
}

// SetReservationType gets a reference to the given string and assigns it to the ReservationType field.
func (o *BlockSummaryType) SetReservationType(v string) {
	o.ReservationType = &v
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *BlockSummaryType) GetRooms() int32 {
	if o == nil || IsNil(o.Rooms) {
		var ret int32
		return ret
	}
	return *o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *BlockSummaryType) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given int32 and assigns it to the Rooms field.
func (o *BlockSummaryType) SetRooms(v int32) {
	o.Rooms = &v
}

// GetSearchMatches returns the SearchMatches field value if set, zero value otherwise.
func (o *BlockSummaryType) GetSearchMatches() []SearchMatchType {
	if o == nil || IsNil(o.SearchMatches) {
		var ret []SearchMatchType
		return ret
	}
	return o.SearchMatches
}

// GetSearchMatchesOk returns a tuple with the SearchMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetSearchMatchesOk() ([]SearchMatchType, bool) {
	if o == nil || IsNil(o.SearchMatches) {
		return nil, false
	}
	return o.SearchMatches, true
}

// HasSearchMatches returns a boolean if a field has been set.
func (o *BlockSummaryType) HasSearchMatches() bool {
	if o != nil && !IsNil(o.SearchMatches) {
		return true
	}

	return false
}

// SetSearchMatches gets a reference to the given []SearchMatchType and assigns it to the SearchMatches field.
func (o *BlockSummaryType) SetSearchMatches(v []SearchMatchType) {
	o.SearchMatches = v
}

// GetShoulderEndDate returns the ShoulderEndDate field value if set, zero value otherwise.
func (o *BlockSummaryType) GetShoulderEndDate() string {
	if o == nil || IsNil(o.ShoulderEndDate) {
		var ret string
		return ret
	}
	return *o.ShoulderEndDate
}

// GetShoulderEndDateOk returns a tuple with the ShoulderEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetShoulderEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShoulderEndDate) {
		return nil, false
	}
	return o.ShoulderEndDate, true
}

// HasShoulderEndDate returns a boolean if a field has been set.
func (o *BlockSummaryType) HasShoulderEndDate() bool {
	if o != nil && !IsNil(o.ShoulderEndDate) {
		return true
	}

	return false
}

// SetShoulderEndDate gets a reference to the given string and assigns it to the ShoulderEndDate field.
func (o *BlockSummaryType) SetShoulderEndDate(v string) {
	o.ShoulderEndDate = &v
}

// GetShoulderStartDate returns the ShoulderStartDate field value if set, zero value otherwise.
func (o *BlockSummaryType) GetShoulderStartDate() string {
	if o == nil || IsNil(o.ShoulderStartDate) {
		var ret string
		return ret
	}
	return *o.ShoulderStartDate
}

// GetShoulderStartDateOk returns a tuple with the ShoulderStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetShoulderStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShoulderStartDate) {
		return nil, false
	}
	return o.ShoulderStartDate, true
}

// HasShoulderStartDate returns a boolean if a field has been set.
func (o *BlockSummaryType) HasShoulderStartDate() bool {
	if o != nil && !IsNil(o.ShoulderStartDate) {
		return true
	}

	return false
}

// SetShoulderStartDate gets a reference to the given string and assigns it to the ShoulderStartDate field.
func (o *BlockSummaryType) SetShoulderStartDate(v string) {
	o.ShoulderStartDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BlockSummaryType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BlockSummaryType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BlockSummaryType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BlockSummaryType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BlockSummaryType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *BlockSummaryType) SetStatus(v string) {
	o.Status = &v
}

// GetSynchronized returns the Synchronized field value if set, zero value otherwise.
func (o *BlockSummaryType) GetSynchronized() bool {
	if o == nil || IsNil(o.Synchronized) {
		var ret bool
		return ret
	}
	return *o.Synchronized
}

// GetSynchronizedOk returns a tuple with the Synchronized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetSynchronizedOk() (*bool, bool) {
	if o == nil || IsNil(o.Synchronized) {
		return nil, false
	}
	return o.Synchronized, true
}

// HasSynchronized returns a boolean if a field has been set.
func (o *BlockSummaryType) HasSynchronized() bool {
	if o != nil && !IsNil(o.Synchronized) {
		return true
	}

	return false
}

// SetSynchronized gets a reference to the given bool and assigns it to the Synchronized field.
func (o *BlockSummaryType) SetSynchronized(v bool) {
	o.Synchronized = &v
}

// GetTentativeBlock returns the TentativeBlock field value if set, zero value otherwise.
func (o *BlockSummaryType) GetTentativeBlock() bool {
	if o == nil || IsNil(o.TentativeBlock) {
		var ret bool
		return ret
	}
	return *o.TentativeBlock
}

// GetTentativeBlockOk returns a tuple with the TentativeBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetTentativeBlockOk() (*bool, bool) {
	if o == nil || IsNil(o.TentativeBlock) {
		return nil, false
	}
	return o.TentativeBlock, true
}

// HasTentativeBlock returns a boolean if a field has been set.
func (o *BlockSummaryType) HasTentativeBlock() bool {
	if o != nil && !IsNil(o.TentativeBlock) {
		return true
	}

	return false
}

// SetTentativeBlock gets a reference to the given bool and assigns it to the TentativeBlock field.
func (o *BlockSummaryType) SetTentativeBlock(v bool) {
	o.TentativeBlock = &v
}

// GetTourCode returns the TourCode field value if set, zero value otherwise.
func (o *BlockSummaryType) GetTourCode() string {
	if o == nil || IsNil(o.TourCode) {
		var ret string
		return ret
	}
	return *o.TourCode
}

// GetTourCodeOk returns a tuple with the TourCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaryType) GetTourCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TourCode) {
		return nil, false
	}
	return o.TourCode, true
}

// HasTourCode returns a boolean if a field has been set.
func (o *BlockSummaryType) HasTourCode() bool {
	if o != nil && !IsNil(o.TourCode) {
		return true
	}

	return false
}

// SetTourCode gets a reference to the given string and assigns it to the TourCode field.
func (o *BlockSummaryType) SetTourCode(v string) {
	o.TourCode = &v
}

func (o BlockSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActualRooms) {
		toSerialize["actualRooms"] = o.ActualRooms
	}
	if !IsNil(o.BlockClassification) {
		toSerialize["blockClassification"] = o.BlockClassification
	}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.BlockIndicators) {
		toSerialize["blockIndicators"] = o.BlockIndicators
	}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.BlockStatus) {
		toSerialize["blockStatus"] = o.BlockStatus
	}
	if !IsNil(o.CateringAttendees) {
		toSerialize["cateringAttendees"] = o.CateringAttendees
	}
	if !IsNil(o.CateringDeductInventory) {
		toSerialize["cateringDeductInventory"] = o.CateringDeductInventory
	}
	if !IsNil(o.CateringOnlyBlock) {
		toSerialize["cateringOnlyBlock"] = o.CateringOnlyBlock
	}
	if !IsNil(o.CateringStatus) {
		toSerialize["cateringStatus"] = o.CateringStatus
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !IsNil(o.CutoffDate) {
		toSerialize["cutoffDate"] = o.CutoffDate
	}
	if !IsNil(o.DecisionDate) {
		toSerialize["decisionDate"] = o.DecisionDate
	}
	if !IsNil(o.DeductInventory) {
		toSerialize["deductInventory"] = o.DeductInventory
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.FlexibleDates) {
		toSerialize["flexibleDates"] = o.FlexibleDates
	}
	if !IsNil(o.FollowupDate) {
		toSerialize["followupDate"] = o.FollowupDate
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HotelUse) {
		toSerialize["hotelUse"] = o.HotelUse
	}
	if !IsNil(o.InventoryControl) {
		toSerialize["inventoryControl"] = o.InventoryControl
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.PrimaryOwners) {
		toSerialize["primaryOwners"] = o.PrimaryOwners
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.ReservationType) {
		toSerialize["reservationType"] = o.ReservationType
	}
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	if !IsNil(o.SearchMatches) {
		toSerialize["searchMatches"] = o.SearchMatches
	}
	if !IsNil(o.ShoulderEndDate) {
		toSerialize["shoulderEndDate"] = o.ShoulderEndDate
	}
	if !IsNil(o.ShoulderStartDate) {
		toSerialize["shoulderStartDate"] = o.ShoulderStartDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Synchronized) {
		toSerialize["synchronized"] = o.Synchronized
	}
	if !IsNil(o.TentativeBlock) {
		toSerialize["tentativeBlock"] = o.TentativeBlock
	}
	if !IsNil(o.TourCode) {
		toSerialize["tourCode"] = o.TourCode
	}
	return toSerialize, nil
}

type NullableBlockSummaryType struct {
	value *BlockSummaryType
	isSet bool
}

func (v NullableBlockSummaryType) Get() *BlockSummaryType {
	return v.value
}

func (v *NullableBlockSummaryType) Set(val *BlockSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockSummaryType(val *BlockSummaryType) *NullableBlockSummaryType {
	return &NullableBlockSummaryType{value: val, isSet: true}
}

func (v NullableBlockSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


