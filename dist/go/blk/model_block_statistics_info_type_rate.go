/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockStatisticsInfoTypeRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockStatisticsInfoTypeRate{}

// BlockStatisticsInfoTypeRate struct for BlockStatisticsInfoTypeRate
type BlockStatisticsInfoTypeRate struct {
	FourPerson *float32 `json:"fourPerson,omitempty"`
	OnePerson *float32 `json:"onePerson,omitempty"`
	ThreePerson *float32 `json:"threePerson,omitempty"`
	TwoPerson *float32 `json:"twoPerson,omitempty"`
}

// NewBlockStatisticsInfoTypeRate instantiates a new BlockStatisticsInfoTypeRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockStatisticsInfoTypeRate() *BlockStatisticsInfoTypeRate {
	this := BlockStatisticsInfoTypeRate{}
	return &this
}

// NewBlockStatisticsInfoTypeRateWithDefaults instantiates a new BlockStatisticsInfoTypeRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockStatisticsInfoTypeRateWithDefaults() *BlockStatisticsInfoTypeRate {
	this := BlockStatisticsInfoTypeRate{}
	return &this
}

// GetFourPerson returns the FourPerson field value if set, zero value otherwise.
func (o *BlockStatisticsInfoTypeRate) GetFourPerson() float32 {
	if o == nil || IsNil(o.FourPerson) {
		var ret float32
		return ret
	}
	return *o.FourPerson
}

// GetFourPersonOk returns a tuple with the FourPerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsInfoTypeRate) GetFourPersonOk() (*float32, bool) {
	if o == nil || IsNil(o.FourPerson) {
		return nil, false
	}
	return o.FourPerson, true
}

// HasFourPerson returns a boolean if a field has been set.
func (o *BlockStatisticsInfoTypeRate) HasFourPerson() bool {
	if o != nil && !IsNil(o.FourPerson) {
		return true
	}

	return false
}

// SetFourPerson gets a reference to the given float32 and assigns it to the FourPerson field.
func (o *BlockStatisticsInfoTypeRate) SetFourPerson(v float32) {
	o.FourPerson = &v
}

// GetOnePerson returns the OnePerson field value if set, zero value otherwise.
func (o *BlockStatisticsInfoTypeRate) GetOnePerson() float32 {
	if o == nil || IsNil(o.OnePerson) {
		var ret float32
		return ret
	}
	return *o.OnePerson
}

// GetOnePersonOk returns a tuple with the OnePerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsInfoTypeRate) GetOnePersonOk() (*float32, bool) {
	if o == nil || IsNil(o.OnePerson) {
		return nil, false
	}
	return o.OnePerson, true
}

// HasOnePerson returns a boolean if a field has been set.
func (o *BlockStatisticsInfoTypeRate) HasOnePerson() bool {
	if o != nil && !IsNil(o.OnePerson) {
		return true
	}

	return false
}

// SetOnePerson gets a reference to the given float32 and assigns it to the OnePerson field.
func (o *BlockStatisticsInfoTypeRate) SetOnePerson(v float32) {
	o.OnePerson = &v
}

// GetThreePerson returns the ThreePerson field value if set, zero value otherwise.
func (o *BlockStatisticsInfoTypeRate) GetThreePerson() float32 {
	if o == nil || IsNil(o.ThreePerson) {
		var ret float32
		return ret
	}
	return *o.ThreePerson
}

// GetThreePersonOk returns a tuple with the ThreePerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsInfoTypeRate) GetThreePersonOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreePerson) {
		return nil, false
	}
	return o.ThreePerson, true
}

// HasThreePerson returns a boolean if a field has been set.
func (o *BlockStatisticsInfoTypeRate) HasThreePerson() bool {
	if o != nil && !IsNil(o.ThreePerson) {
		return true
	}

	return false
}

// SetThreePerson gets a reference to the given float32 and assigns it to the ThreePerson field.
func (o *BlockStatisticsInfoTypeRate) SetThreePerson(v float32) {
	o.ThreePerson = &v
}

// GetTwoPerson returns the TwoPerson field value if set, zero value otherwise.
func (o *BlockStatisticsInfoTypeRate) GetTwoPerson() float32 {
	if o == nil || IsNil(o.TwoPerson) {
		var ret float32
		return ret
	}
	return *o.TwoPerson
}

// GetTwoPersonOk returns a tuple with the TwoPerson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsInfoTypeRate) GetTwoPersonOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoPerson) {
		return nil, false
	}
	return o.TwoPerson, true
}

// HasTwoPerson returns a boolean if a field has been set.
func (o *BlockStatisticsInfoTypeRate) HasTwoPerson() bool {
	if o != nil && !IsNil(o.TwoPerson) {
		return true
	}

	return false
}

// SetTwoPerson gets a reference to the given float32 and assigns it to the TwoPerson field.
func (o *BlockStatisticsInfoTypeRate) SetTwoPerson(v float32) {
	o.TwoPerson = &v
}

func (o BlockStatisticsInfoTypeRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockStatisticsInfoTypeRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FourPerson) {
		toSerialize["fourPerson"] = o.FourPerson
	}
	if !IsNil(o.OnePerson) {
		toSerialize["onePerson"] = o.OnePerson
	}
	if !IsNil(o.ThreePerson) {
		toSerialize["threePerson"] = o.ThreePerson
	}
	if !IsNil(o.TwoPerson) {
		toSerialize["twoPerson"] = o.TwoPerson
	}
	return toSerialize, nil
}

type NullableBlockStatisticsInfoTypeRate struct {
	value *BlockStatisticsInfoTypeRate
	isSet bool
}

func (v NullableBlockStatisticsInfoTypeRate) Get() *BlockStatisticsInfoTypeRate {
	return v.value
}

func (v *NullableBlockStatisticsInfoTypeRate) Set(val *BlockStatisticsInfoTypeRate) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatisticsInfoTypeRate) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatisticsInfoTypeRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatisticsInfoTypeRate(val *BlockStatisticsInfoTypeRate) *NullableBlockStatisticsInfoTypeRate {
	return &NullableBlockStatisticsInfoTypeRate{value: val, isSet: true}
}

func (v NullableBlockStatisticsInfoTypeRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatisticsInfoTypeRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


