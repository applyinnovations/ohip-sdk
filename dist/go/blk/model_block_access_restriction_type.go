/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// BlockAccessRestrictionType Simple type for block access exclusion/restriction types.
type BlockAccessRestrictionType string

// List of blockAccessRestrictionType
const (
	BLOCKACCESSRESTRICTIONTYPE_AVAILABILITY BlockAccessRestrictionType = "Availability"
	BLOCKACCESSRESTRICTIONTYPE_CREATE BlockAccessRestrictionType = "Create"
	BLOCKACCESSRESTRICTIONTYPE_MODIFY BlockAccessRestrictionType = "Modify"
	BLOCKACCESSRESTRICTIONTYPE_CANCEL BlockAccessRestrictionType = "Cancel"
)

// All allowed values of BlockAccessRestrictionType enum
var AllowedBlockAccessRestrictionTypeEnumValues = []BlockAccessRestrictionType{
	"Availability",
	"Create",
	"Modify",
	"Cancel",
}

func (v *BlockAccessRestrictionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockAccessRestrictionType(value)
	for _, existing := range AllowedBlockAccessRestrictionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockAccessRestrictionType", value)
}

// NewBlockAccessRestrictionTypeFromValue returns a pointer to a valid BlockAccessRestrictionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockAccessRestrictionTypeFromValue(v string) (*BlockAccessRestrictionType, error) {
	ev := BlockAccessRestrictionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockAccessRestrictionType: valid values are %v", v, AllowedBlockAccessRestrictionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockAccessRestrictionType) IsValid() bool {
	for _, existing := range AllowedBlockAccessRestrictionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockAccessRestrictionType value
func (v BlockAccessRestrictionType) Ptr() *BlockAccessRestrictionType {
	return &v
}

type NullableBlockAccessRestrictionType struct {
	value *BlockAccessRestrictionType
	isSet bool
}

func (v NullableBlockAccessRestrictionType) Get() *BlockAccessRestrictionType {
	return v.value
}

func (v *NullableBlockAccessRestrictionType) Set(val *BlockAccessRestrictionType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAccessRestrictionType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAccessRestrictionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAccessRestrictionType(val *BlockAccessRestrictionType) *NullableBlockAccessRestrictionType {
	return &NullableBlockAccessRestrictionType{value: val, isSet: true}
}

func (v NullableBlockAccessRestrictionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAccessRestrictionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

