/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RoutingInfoTypeComp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingInfoTypeComp{}

// RoutingInfoTypeComp Comp Accounting Routing Info
type RoutingInfoTypeComp struct {
	CompRequestInfo *CompRoutingRequestType `json:"compRequestInfo,omitempty"`
	PayeeInfo *PayeeInfoType `json:"payeeInfo,omitempty"`
	// Set of routing instructions associated to this routing type.
	Instructions []RoutingInstructionType `json:"instructions,omitempty"`
	FolioWindowNo *int32 `json:"folioWindowNo,omitempty"`
}

// NewRoutingInfoTypeComp instantiates a new RoutingInfoTypeComp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingInfoTypeComp() *RoutingInfoTypeComp {
	this := RoutingInfoTypeComp{}
	return &this
}

// NewRoutingInfoTypeCompWithDefaults instantiates a new RoutingInfoTypeComp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingInfoTypeCompWithDefaults() *RoutingInfoTypeComp {
	this := RoutingInfoTypeComp{}
	return &this
}

// GetCompRequestInfo returns the CompRequestInfo field value if set, zero value otherwise.
func (o *RoutingInfoTypeComp) GetCompRequestInfo() CompRoutingRequestType {
	if o == nil || IsNil(o.CompRequestInfo) {
		var ret CompRoutingRequestType
		return ret
	}
	return *o.CompRequestInfo
}

// GetCompRequestInfoOk returns a tuple with the CompRequestInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeComp) GetCompRequestInfoOk() (*CompRoutingRequestType, bool) {
	if o == nil || IsNil(o.CompRequestInfo) {
		return nil, false
	}
	return o.CompRequestInfo, true
}

// HasCompRequestInfo returns a boolean if a field has been set.
func (o *RoutingInfoTypeComp) HasCompRequestInfo() bool {
	if o != nil && !IsNil(o.CompRequestInfo) {
		return true
	}

	return false
}

// SetCompRequestInfo gets a reference to the given CompRoutingRequestType and assigns it to the CompRequestInfo field.
func (o *RoutingInfoTypeComp) SetCompRequestInfo(v CompRoutingRequestType) {
	o.CompRequestInfo = &v
}

// GetPayeeInfo returns the PayeeInfo field value if set, zero value otherwise.
func (o *RoutingInfoTypeComp) GetPayeeInfo() PayeeInfoType {
	if o == nil || IsNil(o.PayeeInfo) {
		var ret PayeeInfoType
		return ret
	}
	return *o.PayeeInfo
}

// GetPayeeInfoOk returns a tuple with the PayeeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeComp) GetPayeeInfoOk() (*PayeeInfoType, bool) {
	if o == nil || IsNil(o.PayeeInfo) {
		return nil, false
	}
	return o.PayeeInfo, true
}

// HasPayeeInfo returns a boolean if a field has been set.
func (o *RoutingInfoTypeComp) HasPayeeInfo() bool {
	if o != nil && !IsNil(o.PayeeInfo) {
		return true
	}

	return false
}

// SetPayeeInfo gets a reference to the given PayeeInfoType and assigns it to the PayeeInfo field.
func (o *RoutingInfoTypeComp) SetPayeeInfo(v PayeeInfoType) {
	o.PayeeInfo = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *RoutingInfoTypeComp) GetInstructions() []RoutingInstructionType {
	if o == nil || IsNil(o.Instructions) {
		var ret []RoutingInstructionType
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeComp) GetInstructionsOk() ([]RoutingInstructionType, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *RoutingInfoTypeComp) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []RoutingInstructionType and assigns it to the Instructions field.
func (o *RoutingInfoTypeComp) SetInstructions(v []RoutingInstructionType) {
	o.Instructions = v
}

// GetFolioWindowNo returns the FolioWindowNo field value if set, zero value otherwise.
func (o *RoutingInfoTypeComp) GetFolioWindowNo() int32 {
	if o == nil || IsNil(o.FolioWindowNo) {
		var ret int32
		return ret
	}
	return *o.FolioWindowNo
}

// GetFolioWindowNoOk returns a tuple with the FolioWindowNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeComp) GetFolioWindowNoOk() (*int32, bool) {
	if o == nil || IsNil(o.FolioWindowNo) {
		return nil, false
	}
	return o.FolioWindowNo, true
}

// HasFolioWindowNo returns a boolean if a field has been set.
func (o *RoutingInfoTypeComp) HasFolioWindowNo() bool {
	if o != nil && !IsNil(o.FolioWindowNo) {
		return true
	}

	return false
}

// SetFolioWindowNo gets a reference to the given int32 and assigns it to the FolioWindowNo field.
func (o *RoutingInfoTypeComp) SetFolioWindowNo(v int32) {
	o.FolioWindowNo = &v
}

func (o RoutingInfoTypeComp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingInfoTypeComp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompRequestInfo) {
		toSerialize["compRequestInfo"] = o.CompRequestInfo
	}
	if !IsNil(o.PayeeInfo) {
		toSerialize["payeeInfo"] = o.PayeeInfo
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	if !IsNil(o.FolioWindowNo) {
		toSerialize["folioWindowNo"] = o.FolioWindowNo
	}
	return toSerialize, nil
}

type NullableRoutingInfoTypeComp struct {
	value *RoutingInfoTypeComp
	isSet bool
}

func (v NullableRoutingInfoTypeComp) Get() *RoutingInfoTypeComp {
	return v.value
}

func (v *NullableRoutingInfoTypeComp) Set(val *RoutingInfoTypeComp) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingInfoTypeComp) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingInfoTypeComp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingInfoTypeComp(val *RoutingInfoTypeComp) *NullableRoutingInfoTypeComp {
	return &NullableRoutingInfoTypeComp{value: val, isSet: true}
}

func (v NullableRoutingInfoTypeComp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingInfoTypeComp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


