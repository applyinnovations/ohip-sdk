/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ChangeCateringStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeCateringStatusType{}

// ChangeCateringStatusType This holds the information required to change the catering status of the business block.
type ChangeCateringStatusType struct {
	// Opera Hotel code for the change block status operation.
	HotelId *string `json:"hotelId,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
	// Current catering status of the business block.
	CurrentCateringStatus *string `json:"currentCateringStatus,omitempty"`
	// New catering status of the business block.
	NewCateringStatus *string `json:"newCateringStatus,omitempty"`
	CancellationDetails *CancellationDetailsType `json:"cancellationDetails,omitempty"`
	MasterSubBlockInfo *MasterBlockInfoType `json:"masterSubBlockInfo,omitempty"`
	EventAttendees *EventAttendeesType `json:"eventAttendees,omitempty"`
	// Indicates whether to ignore any warning during applying the changes to the events associated with the current block.
	OverrideEventsProcessingWarnings *bool `json:"overrideEventsProcessingWarnings,omitempty"`
}

// NewChangeCateringStatusType instantiates a new ChangeCateringStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeCateringStatusType() *ChangeCateringStatusType {
	this := ChangeCateringStatusType{}
	return &this
}

// NewChangeCateringStatusTypeWithDefaults instantiates a new ChangeCateringStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeCateringStatusTypeWithDefaults() *ChangeCateringStatusType {
	this := ChangeCateringStatusType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ChangeCateringStatusType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *ChangeCateringStatusType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetCurrentCateringStatus returns the CurrentCateringStatus field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetCurrentCateringStatus() string {
	if o == nil || IsNil(o.CurrentCateringStatus) {
		var ret string
		return ret
	}
	return *o.CurrentCateringStatus
}

// GetCurrentCateringStatusOk returns a tuple with the CurrentCateringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetCurrentCateringStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentCateringStatus) {
		return nil, false
	}
	return o.CurrentCateringStatus, true
}

// HasCurrentCateringStatus returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasCurrentCateringStatus() bool {
	if o != nil && !IsNil(o.CurrentCateringStatus) {
		return true
	}

	return false
}

// SetCurrentCateringStatus gets a reference to the given string and assigns it to the CurrentCateringStatus field.
func (o *ChangeCateringStatusType) SetCurrentCateringStatus(v string) {
	o.CurrentCateringStatus = &v
}

// GetNewCateringStatus returns the NewCateringStatus field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetNewCateringStatus() string {
	if o == nil || IsNil(o.NewCateringStatus) {
		var ret string
		return ret
	}
	return *o.NewCateringStatus
}

// GetNewCateringStatusOk returns a tuple with the NewCateringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetNewCateringStatusOk() (*string, bool) {
	if o == nil || IsNil(o.NewCateringStatus) {
		return nil, false
	}
	return o.NewCateringStatus, true
}

// HasNewCateringStatus returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasNewCateringStatus() bool {
	if o != nil && !IsNil(o.NewCateringStatus) {
		return true
	}

	return false
}

// SetNewCateringStatus gets a reference to the given string and assigns it to the NewCateringStatus field.
func (o *ChangeCateringStatusType) SetNewCateringStatus(v string) {
	o.NewCateringStatus = &v
}

// GetCancellationDetails returns the CancellationDetails field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetCancellationDetails() CancellationDetailsType {
	if o == nil || IsNil(o.CancellationDetails) {
		var ret CancellationDetailsType
		return ret
	}
	return *o.CancellationDetails
}

// GetCancellationDetailsOk returns a tuple with the CancellationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetCancellationDetailsOk() (*CancellationDetailsType, bool) {
	if o == nil || IsNil(o.CancellationDetails) {
		return nil, false
	}
	return o.CancellationDetails, true
}

// HasCancellationDetails returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasCancellationDetails() bool {
	if o != nil && !IsNil(o.CancellationDetails) {
		return true
	}

	return false
}

// SetCancellationDetails gets a reference to the given CancellationDetailsType and assigns it to the CancellationDetails field.
func (o *ChangeCateringStatusType) SetCancellationDetails(v CancellationDetailsType) {
	o.CancellationDetails = &v
}

// GetMasterSubBlockInfo returns the MasterSubBlockInfo field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetMasterSubBlockInfo() MasterBlockInfoType {
	if o == nil || IsNil(o.MasterSubBlockInfo) {
		var ret MasterBlockInfoType
		return ret
	}
	return *o.MasterSubBlockInfo
}

// GetMasterSubBlockInfoOk returns a tuple with the MasterSubBlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetMasterSubBlockInfoOk() (*MasterBlockInfoType, bool) {
	if o == nil || IsNil(o.MasterSubBlockInfo) {
		return nil, false
	}
	return o.MasterSubBlockInfo, true
}

// HasMasterSubBlockInfo returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasMasterSubBlockInfo() bool {
	if o != nil && !IsNil(o.MasterSubBlockInfo) {
		return true
	}

	return false
}

// SetMasterSubBlockInfo gets a reference to the given MasterBlockInfoType and assigns it to the MasterSubBlockInfo field.
func (o *ChangeCateringStatusType) SetMasterSubBlockInfo(v MasterBlockInfoType) {
	o.MasterSubBlockInfo = &v
}

// GetEventAttendees returns the EventAttendees field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetEventAttendees() EventAttendeesType {
	if o == nil || IsNil(o.EventAttendees) {
		var ret EventAttendeesType
		return ret
	}
	return *o.EventAttendees
}

// GetEventAttendeesOk returns a tuple with the EventAttendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetEventAttendeesOk() (*EventAttendeesType, bool) {
	if o == nil || IsNil(o.EventAttendees) {
		return nil, false
	}
	return o.EventAttendees, true
}

// HasEventAttendees returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasEventAttendees() bool {
	if o != nil && !IsNil(o.EventAttendees) {
		return true
	}

	return false
}

// SetEventAttendees gets a reference to the given EventAttendeesType and assigns it to the EventAttendees field.
func (o *ChangeCateringStatusType) SetEventAttendees(v EventAttendeesType) {
	o.EventAttendees = &v
}

// GetOverrideEventsProcessingWarnings returns the OverrideEventsProcessingWarnings field value if set, zero value otherwise.
func (o *ChangeCateringStatusType) GetOverrideEventsProcessingWarnings() bool {
	if o == nil || IsNil(o.OverrideEventsProcessingWarnings) {
		var ret bool
		return ret
	}
	return *o.OverrideEventsProcessingWarnings
}

// GetOverrideEventsProcessingWarningsOk returns a tuple with the OverrideEventsProcessingWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeCateringStatusType) GetOverrideEventsProcessingWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideEventsProcessingWarnings) {
		return nil, false
	}
	return o.OverrideEventsProcessingWarnings, true
}

// HasOverrideEventsProcessingWarnings returns a boolean if a field has been set.
func (o *ChangeCateringStatusType) HasOverrideEventsProcessingWarnings() bool {
	if o != nil && !IsNil(o.OverrideEventsProcessingWarnings) {
		return true
	}

	return false
}

// SetOverrideEventsProcessingWarnings gets a reference to the given bool and assigns it to the OverrideEventsProcessingWarnings field.
func (o *ChangeCateringStatusType) SetOverrideEventsProcessingWarnings(v bool) {
	o.OverrideEventsProcessingWarnings = &v
}

func (o ChangeCateringStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeCateringStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.CurrentCateringStatus) {
		toSerialize["currentCateringStatus"] = o.CurrentCateringStatus
	}
	if !IsNil(o.NewCateringStatus) {
		toSerialize["newCateringStatus"] = o.NewCateringStatus
	}
	if !IsNil(o.CancellationDetails) {
		toSerialize["cancellationDetails"] = o.CancellationDetails
	}
	if !IsNil(o.MasterSubBlockInfo) {
		toSerialize["masterSubBlockInfo"] = o.MasterSubBlockInfo
	}
	if !IsNil(o.EventAttendees) {
		toSerialize["eventAttendees"] = o.EventAttendees
	}
	if !IsNil(o.OverrideEventsProcessingWarnings) {
		toSerialize["overrideEventsProcessingWarnings"] = o.OverrideEventsProcessingWarnings
	}
	return toSerialize, nil
}

type NullableChangeCateringStatusType struct {
	value *ChangeCateringStatusType
	isSet bool
}

func (v NullableChangeCateringStatusType) Get() *ChangeCateringStatusType {
	return v.value
}

func (v *NullableChangeCateringStatusType) Set(val *ChangeCateringStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeCateringStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeCateringStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeCateringStatusType(val *ChangeCateringStatusType) *NullableChangeCateringStatusType {
	return &NullableChangeCateringStatusType{value: val, isSet: true}
}

func (v NullableChangeCateringStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeCateringStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


