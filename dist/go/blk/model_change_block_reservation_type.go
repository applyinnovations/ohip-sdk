/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ChangeBlockReservationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeBlockReservationType{}

// ChangeBlockReservationType Information about the block reservation being changed.
type ChangeBlockReservationType struct {
	// An error that occurred during the processing of a message.
	Errors []ErrorType `json:"errors,omitempty"`
	ReservationInfo *ReservationInfoType `json:"reservationInfo,omitempty"`
	// Returning an empty element of this type indicates the successful processing of an message. This is used in conjunction with the Warning Type to report any warnings or business errors.
	Success map[string]interface{} `json:"success,omitempty"`
}

// NewChangeBlockReservationType instantiates a new ChangeBlockReservationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeBlockReservationType() *ChangeBlockReservationType {
	this := ChangeBlockReservationType{}
	return &this
}

// NewChangeBlockReservationTypeWithDefaults instantiates a new ChangeBlockReservationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeBlockReservationTypeWithDefaults() *ChangeBlockReservationType {
	this := ChangeBlockReservationType{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ChangeBlockReservationType) GetErrors() []ErrorType {
	if o == nil || IsNil(o.Errors) {
		var ret []ErrorType
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationType) GetErrorsOk() ([]ErrorType, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ChangeBlockReservationType) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorType and assigns it to the Errors field.
func (o *ChangeBlockReservationType) SetErrors(v []ErrorType) {
	o.Errors = v
}

// GetReservationInfo returns the ReservationInfo field value if set, zero value otherwise.
func (o *ChangeBlockReservationType) GetReservationInfo() ReservationInfoType {
	if o == nil || IsNil(o.ReservationInfo) {
		var ret ReservationInfoType
		return ret
	}
	return *o.ReservationInfo
}

// GetReservationInfoOk returns a tuple with the ReservationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationType) GetReservationInfoOk() (*ReservationInfoType, bool) {
	if o == nil || IsNil(o.ReservationInfo) {
		return nil, false
	}
	return o.ReservationInfo, true
}

// HasReservationInfo returns a boolean if a field has been set.
func (o *ChangeBlockReservationType) HasReservationInfo() bool {
	if o != nil && !IsNil(o.ReservationInfo) {
		return true
	}

	return false
}

// SetReservationInfo gets a reference to the given ReservationInfoType and assigns it to the ReservationInfo field.
func (o *ChangeBlockReservationType) SetReservationInfo(v ReservationInfoType) {
	o.ReservationInfo = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ChangeBlockReservationType) GetSuccess() map[string]interface{} {
	if o == nil || IsNil(o.Success) {
		var ret map[string]interface{}
		return ret
	}
	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeBlockReservationType) GetSuccessOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Success) {
		return map[string]interface{}{}, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ChangeBlockReservationType) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given map[string]interface{} and assigns it to the Success field.
func (o *ChangeBlockReservationType) SetSuccess(v map[string]interface{}) {
	o.Success = v
}

func (o ChangeBlockReservationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeBlockReservationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.ReservationInfo) {
		toSerialize["reservationInfo"] = o.ReservationInfo
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableChangeBlockReservationType struct {
	value *ChangeBlockReservationType
	isSet bool
}

func (v NullableChangeBlockReservationType) Get() *ChangeBlockReservationType {
	return v.value
}

func (v *NullableChangeBlockReservationType) Set(val *ChangeBlockReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeBlockReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeBlockReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeBlockReservationType(val *ChangeBlockReservationType) *NullableChangeBlockReservationType {
	return &NullableChangeBlockReservationType{value: val, isSet: true}
}

func (v NullableChangeBlockReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeBlockReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


