/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockBasicInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockBasicInfo{}

// BlockBasicInfo Common Type used to store basic information of a block
type BlockBasicInfo struct {
	// Name of the block. This is used for generating the default block code
	BlockName *string `json:"blockName,omitempty"`
	// Start date of the block. This is used for generatting the default block code
	StartDate *string `json:"startDate,omitempty"`
	// Hotel where the block will be created
	HotelId *string `json:"hotelId,omitempty"`
	// Format in which the Block Code should be generated.
	BlockCodeTemplate *string `json:"blockCodeTemplate,omitempty"`
	// Response object that returns a default block code based on template
	BlockCode *string `json:"blockCode,omitempty"`
}

// NewBlockBasicInfo instantiates a new BlockBasicInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockBasicInfo() *BlockBasicInfo {
	this := BlockBasicInfo{}
	return &this
}

// NewBlockBasicInfoWithDefaults instantiates a new BlockBasicInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockBasicInfoWithDefaults() *BlockBasicInfo {
	this := BlockBasicInfo{}
	return &this
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *BlockBasicInfo) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockBasicInfo) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *BlockBasicInfo) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *BlockBasicInfo) SetBlockName(v string) {
	o.BlockName = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BlockBasicInfo) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockBasicInfo) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BlockBasicInfo) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BlockBasicInfo) SetStartDate(v string) {
	o.StartDate = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockBasicInfo) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockBasicInfo) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockBasicInfo) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockBasicInfo) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBlockCodeTemplate returns the BlockCodeTemplate field value if set, zero value otherwise.
func (o *BlockBasicInfo) GetBlockCodeTemplate() string {
	if o == nil || IsNil(o.BlockCodeTemplate) {
		var ret string
		return ret
	}
	return *o.BlockCodeTemplate
}

// GetBlockCodeTemplateOk returns a tuple with the BlockCodeTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockBasicInfo) GetBlockCodeTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCodeTemplate) {
		return nil, false
	}
	return o.BlockCodeTemplate, true
}

// HasBlockCodeTemplate returns a boolean if a field has been set.
func (o *BlockBasicInfo) HasBlockCodeTemplate() bool {
	if o != nil && !IsNil(o.BlockCodeTemplate) {
		return true
	}

	return false
}

// SetBlockCodeTemplate gets a reference to the given string and assigns it to the BlockCodeTemplate field.
func (o *BlockBasicInfo) SetBlockCodeTemplate(v string) {
	o.BlockCodeTemplate = &v
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *BlockBasicInfo) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockBasicInfo) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *BlockBasicInfo) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *BlockBasicInfo) SetBlockCode(v string) {
	o.BlockCode = &v
}

func (o BlockBasicInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockBasicInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BlockCodeTemplate) {
		toSerialize["blockCodeTemplate"] = o.BlockCodeTemplate
	}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	return toSerialize, nil
}

type NullableBlockBasicInfo struct {
	value *BlockBasicInfo
	isSet bool
}

func (v NullableBlockBasicInfo) Get() *BlockBasicInfo {
	return v.value
}

func (v *NullableBlockBasicInfo) Set(val *BlockBasicInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockBasicInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockBasicInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockBasicInfo(val *BlockBasicInfo) *NullableBlockBasicInfo {
	return &NullableBlockBasicInfo{value: val, isSet: true}
}

func (v NullableBlockBasicInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockBasicInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


