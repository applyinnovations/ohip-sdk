/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the NextBlockStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NextBlockStatus{}

// NextBlockStatus Response object for FetchNextBlockStatus operation.
type NextBlockStatus struct {
	// Next booking status of the business block.
	BlockNextStatusList []BookingStatusDetailType `json:"blockNextStatusList,omitempty"`
	// Next catering status of the business block.
	CateringNextStatusList []BookingStatusDetailType `json:"cateringNextStatusList,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewNextBlockStatus instantiates a new NextBlockStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextBlockStatus() *NextBlockStatus {
	this := NextBlockStatus{}
	return &this
}

// NewNextBlockStatusWithDefaults instantiates a new NextBlockStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextBlockStatusWithDefaults() *NextBlockStatus {
	this := NextBlockStatus{}
	return &this
}

// GetBlockNextStatusList returns the BlockNextStatusList field value if set, zero value otherwise.
func (o *NextBlockStatus) GetBlockNextStatusList() []BookingStatusDetailType {
	if o == nil || IsNil(o.BlockNextStatusList) {
		var ret []BookingStatusDetailType
		return ret
	}
	return o.BlockNextStatusList
}

// GetBlockNextStatusListOk returns a tuple with the BlockNextStatusList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatus) GetBlockNextStatusListOk() ([]BookingStatusDetailType, bool) {
	if o == nil || IsNil(o.BlockNextStatusList) {
		return nil, false
	}
	return o.BlockNextStatusList, true
}

// HasBlockNextStatusList returns a boolean if a field has been set.
func (o *NextBlockStatus) HasBlockNextStatusList() bool {
	if o != nil && !IsNil(o.BlockNextStatusList) {
		return true
	}

	return false
}

// SetBlockNextStatusList gets a reference to the given []BookingStatusDetailType and assigns it to the BlockNextStatusList field.
func (o *NextBlockStatus) SetBlockNextStatusList(v []BookingStatusDetailType) {
	o.BlockNextStatusList = v
}

// GetCateringNextStatusList returns the CateringNextStatusList field value if set, zero value otherwise.
func (o *NextBlockStatus) GetCateringNextStatusList() []BookingStatusDetailType {
	if o == nil || IsNil(o.CateringNextStatusList) {
		var ret []BookingStatusDetailType
		return ret
	}
	return o.CateringNextStatusList
}

// GetCateringNextStatusListOk returns a tuple with the CateringNextStatusList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatus) GetCateringNextStatusListOk() ([]BookingStatusDetailType, bool) {
	if o == nil || IsNil(o.CateringNextStatusList) {
		return nil, false
	}
	return o.CateringNextStatusList, true
}

// HasCateringNextStatusList returns a boolean if a field has been set.
func (o *NextBlockStatus) HasCateringNextStatusList() bool {
	if o != nil && !IsNil(o.CateringNextStatusList) {
		return true
	}

	return false
}

// SetCateringNextStatusList gets a reference to the given []BookingStatusDetailType and assigns it to the CateringNextStatusList field.
func (o *NextBlockStatus) SetCateringNextStatusList(v []BookingStatusDetailType) {
	o.CateringNextStatusList = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NextBlockStatus) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatus) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NextBlockStatus) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *NextBlockStatus) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *NextBlockStatus) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatus) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *NextBlockStatus) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *NextBlockStatus) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o NextBlockStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NextBlockStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockNextStatusList) {
		toSerialize["blockNextStatusList"] = o.BlockNextStatusList
	}
	if !IsNil(o.CateringNextStatusList) {
		toSerialize["cateringNextStatusList"] = o.CateringNextStatusList
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableNextBlockStatus struct {
	value *NextBlockStatus
	isSet bool
}

func (v NullableNextBlockStatus) Get() *NextBlockStatus {
	return v.value
}

func (v *NullableNextBlockStatus) Set(val *NextBlockStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNextBlockStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNextBlockStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextBlockStatus(val *NextBlockStatus) *NullableNextBlockStatus {
	return &NullableNextBlockStatus{value: val, isSet: true}
}

func (v NullableNextBlockStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextBlockStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


