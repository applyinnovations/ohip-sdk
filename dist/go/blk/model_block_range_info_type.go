/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockRangeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRangeInfoType{}

// BlockRangeInfoType Block Information needed to perform a range operation.
type BlockRangeInfoType struct {
	BlockInfo *BlockRangeInfoTypeBlockInfo `json:"blockInfo,omitempty"`
	// List of all room types for the hotel.
	RoomTypes []string `json:"roomTypes,omitempty"`
}

// NewBlockRangeInfoType instantiates a new BlockRangeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRangeInfoType() *BlockRangeInfoType {
	this := BlockRangeInfoType{}
	return &this
}

// NewBlockRangeInfoTypeWithDefaults instantiates a new BlockRangeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRangeInfoTypeWithDefaults() *BlockRangeInfoType {
	this := BlockRangeInfoType{}
	return &this
}

// GetBlockInfo returns the BlockInfo field value if set, zero value otherwise.
func (o *BlockRangeInfoType) GetBlockInfo() BlockRangeInfoTypeBlockInfo {
	if o == nil || IsNil(o.BlockInfo) {
		var ret BlockRangeInfoTypeBlockInfo
		return ret
	}
	return *o.BlockInfo
}

// GetBlockInfoOk returns a tuple with the BlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoType) GetBlockInfoOk() (*BlockRangeInfoTypeBlockInfo, bool) {
	if o == nil || IsNil(o.BlockInfo) {
		return nil, false
	}
	return o.BlockInfo, true
}

// HasBlockInfo returns a boolean if a field has been set.
func (o *BlockRangeInfoType) HasBlockInfo() bool {
	if o != nil && !IsNil(o.BlockInfo) {
		return true
	}

	return false
}

// SetBlockInfo gets a reference to the given BlockRangeInfoTypeBlockInfo and assigns it to the BlockInfo field.
func (o *BlockRangeInfoType) SetBlockInfo(v BlockRangeInfoTypeBlockInfo) {
	o.BlockInfo = &v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *BlockRangeInfoType) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRangeInfoType) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *BlockRangeInfoType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *BlockRangeInfoType) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

func (o BlockRangeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRangeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockInfo) {
		toSerialize["blockInfo"] = o.BlockInfo
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	return toSerialize, nil
}

type NullableBlockRangeInfoType struct {
	value *BlockRangeInfoType
	isSet bool
}

func (v NullableBlockRangeInfoType) Get() *BlockRangeInfoType {
	return v.value
}

func (v *NullableBlockRangeInfoType) Set(val *BlockRangeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRangeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRangeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRangeInfoType(val *BlockRangeInfoType) *NullableBlockRangeInfoType {
	return &NullableBlockRangeInfoType{value: val, isSet: true}
}

func (v NullableBlockRangeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRangeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


