/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockStatisticsDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockStatisticsDetailsType{}

// BlockStatisticsDetailsType Collection of statistics details for every statistic type.
type BlockStatisticsDetailsType struct {
	NumberOfDays *int32 `json:"numberOfDays,omitempty"`
	StartDate *string `json:"startDate,omitempty"`
	StatisticsDetail []BlockStatisticsDetailType `json:"statisticsDetail,omitempty"`
}

// NewBlockStatisticsDetailsType instantiates a new BlockStatisticsDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockStatisticsDetailsType() *BlockStatisticsDetailsType {
	this := BlockStatisticsDetailsType{}
	return &this
}

// NewBlockStatisticsDetailsTypeWithDefaults instantiates a new BlockStatisticsDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockStatisticsDetailsTypeWithDefaults() *BlockStatisticsDetailsType {
	this := BlockStatisticsDetailsType{}
	return &this
}

// GetNumberOfDays returns the NumberOfDays field value if set, zero value otherwise.
func (o *BlockStatisticsDetailsType) GetNumberOfDays() int32 {
	if o == nil || IsNil(o.NumberOfDays) {
		var ret int32
		return ret
	}
	return *o.NumberOfDays
}

// GetNumberOfDaysOk returns a tuple with the NumberOfDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDetailsType) GetNumberOfDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfDays) {
		return nil, false
	}
	return o.NumberOfDays, true
}

// HasNumberOfDays returns a boolean if a field has been set.
func (o *BlockStatisticsDetailsType) HasNumberOfDays() bool {
	if o != nil && !IsNil(o.NumberOfDays) {
		return true
	}

	return false
}

// SetNumberOfDays gets a reference to the given int32 and assigns it to the NumberOfDays field.
func (o *BlockStatisticsDetailsType) SetNumberOfDays(v int32) {
	o.NumberOfDays = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BlockStatisticsDetailsType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDetailsType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BlockStatisticsDetailsType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BlockStatisticsDetailsType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStatisticsDetail returns the StatisticsDetail field value if set, zero value otherwise.
func (o *BlockStatisticsDetailsType) GetStatisticsDetail() []BlockStatisticsDetailType {
	if o == nil || IsNil(o.StatisticsDetail) {
		var ret []BlockStatisticsDetailType
		return ret
	}
	return o.StatisticsDetail
}

// GetStatisticsDetailOk returns a tuple with the StatisticsDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDetailsType) GetStatisticsDetailOk() ([]BlockStatisticsDetailType, bool) {
	if o == nil || IsNil(o.StatisticsDetail) {
		return nil, false
	}
	return o.StatisticsDetail, true
}

// HasStatisticsDetail returns a boolean if a field has been set.
func (o *BlockStatisticsDetailsType) HasStatisticsDetail() bool {
	if o != nil && !IsNil(o.StatisticsDetail) {
		return true
	}

	return false
}

// SetStatisticsDetail gets a reference to the given []BlockStatisticsDetailType and assigns it to the StatisticsDetail field.
func (o *BlockStatisticsDetailsType) SetStatisticsDetail(v []BlockStatisticsDetailType) {
	o.StatisticsDetail = v
}

func (o BlockStatisticsDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockStatisticsDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NumberOfDays) {
		toSerialize["numberOfDays"] = o.NumberOfDays
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.StatisticsDetail) {
		toSerialize["statisticsDetail"] = o.StatisticsDetail
	}
	return toSerialize, nil
}

type NullableBlockStatisticsDetailsType struct {
	value *BlockStatisticsDetailsType
	isSet bool
}

func (v NullableBlockStatisticsDetailsType) Get() *BlockStatisticsDetailsType {
	return v.value
}

func (v *NullableBlockStatisticsDetailsType) Set(val *BlockStatisticsDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatisticsDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatisticsDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatisticsDetailsType(val *BlockStatisticsDetailsType) *NullableBlockStatisticsDetailsType {
	return &NullableBlockStatisticsDetailsType{value: val, isSet: true}
}

func (v NullableBlockStatisticsDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatisticsDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


