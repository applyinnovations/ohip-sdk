/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RoomAllocationTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomAllocationTypeType{}

// RoomAllocationTypeType A collection of Allocation objects for a block, such as Current Rooms, Original Rooms, Rate Amounts, etc.
type RoomAllocationTypeType struct {
	// Allocation objects for a block.
	RoomAllocationInfo []RoomAllocationInfoType `json:"roomAllocationInfo,omitempty"`
	Allocation *AllocationType `json:"allocation,omitempty"`
}

// NewRoomAllocationTypeType instantiates a new RoomAllocationTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomAllocationTypeType() *RoomAllocationTypeType {
	this := RoomAllocationTypeType{}
	return &this
}

// NewRoomAllocationTypeTypeWithDefaults instantiates a new RoomAllocationTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomAllocationTypeTypeWithDefaults() *RoomAllocationTypeType {
	this := RoomAllocationTypeType{}
	return &this
}

// GetRoomAllocationInfo returns the RoomAllocationInfo field value if set, zero value otherwise.
func (o *RoomAllocationTypeType) GetRoomAllocationInfo() []RoomAllocationInfoType {
	if o == nil || IsNil(o.RoomAllocationInfo) {
		var ret []RoomAllocationInfoType
		return ret
	}
	return o.RoomAllocationInfo
}

// GetRoomAllocationInfoOk returns a tuple with the RoomAllocationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomAllocationTypeType) GetRoomAllocationInfoOk() ([]RoomAllocationInfoType, bool) {
	if o == nil || IsNil(o.RoomAllocationInfo) {
		return nil, false
	}
	return o.RoomAllocationInfo, true
}

// HasRoomAllocationInfo returns a boolean if a field has been set.
func (o *RoomAllocationTypeType) HasRoomAllocationInfo() bool {
	if o != nil && !IsNil(o.RoomAllocationInfo) {
		return true
	}

	return false
}

// SetRoomAllocationInfo gets a reference to the given []RoomAllocationInfoType and assigns it to the RoomAllocationInfo field.
func (o *RoomAllocationTypeType) SetRoomAllocationInfo(v []RoomAllocationInfoType) {
	o.RoomAllocationInfo = v
}

// GetAllocation returns the Allocation field value if set, zero value otherwise.
func (o *RoomAllocationTypeType) GetAllocation() AllocationType {
	if o == nil || IsNil(o.Allocation) {
		var ret AllocationType
		return ret
	}
	return *o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomAllocationTypeType) GetAllocationOk() (*AllocationType, bool) {
	if o == nil || IsNil(o.Allocation) {
		return nil, false
	}
	return o.Allocation, true
}

// HasAllocation returns a boolean if a field has been set.
func (o *RoomAllocationTypeType) HasAllocation() bool {
	if o != nil && !IsNil(o.Allocation) {
		return true
	}

	return false
}

// SetAllocation gets a reference to the given AllocationType and assigns it to the Allocation field.
func (o *RoomAllocationTypeType) SetAllocation(v AllocationType) {
	o.Allocation = &v
}

func (o RoomAllocationTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomAllocationTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomAllocationInfo) {
		toSerialize["roomAllocationInfo"] = o.RoomAllocationInfo
	}
	if !IsNil(o.Allocation) {
		toSerialize["allocation"] = o.Allocation
	}
	return toSerialize, nil
}

type NullableRoomAllocationTypeType struct {
	value *RoomAllocationTypeType
	isSet bool
}

func (v NullableRoomAllocationTypeType) Get() *RoomAllocationTypeType {
	return v.value
}

func (v *NullableRoomAllocationTypeType) Set(val *RoomAllocationTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomAllocationTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomAllocationTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomAllocationTypeType(val *RoomAllocationTypeType) *NullableRoomAllocationTypeType {
	return &NullableRoomAllocationTypeType{value: val, isSet: true}
}

func (v NullableRoomAllocationTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomAllocationTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


