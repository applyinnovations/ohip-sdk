/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the CateringRevenueToChange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringRevenueToChange{}

// CateringRevenueToChange Request object for changing the catering revenue for a business block.
type CateringRevenueToChange struct {
	EventId *EventId `json:"eventId,omitempty"`
	// Indicates if the expected revenue will be corrected.
	ExpectedRevenue *bool `json:"expectedRevenue,omitempty"`
	// Indicates if the guaranteed revenue will be corrected.
	GuaranteedRevenue *bool `json:"guaranteedRevenue,omitempty"`
	// Indicates if the actual revenue will be corrected.
	ActualRevenue *bool `json:"actualRevenue,omitempty"`
	// Indicates if the billed revenue will be corrected.
	BilledRevenue *bool `json:"billedRevenue,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCateringRevenueToChange instantiates a new CateringRevenueToChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringRevenueToChange() *CateringRevenueToChange {
	this := CateringRevenueToChange{}
	return &this
}

// NewCateringRevenueToChangeWithDefaults instantiates a new CateringRevenueToChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringRevenueToChangeWithDefaults() *CateringRevenueToChange {
	this := CateringRevenueToChange{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *CateringRevenueToChange) GetEventId() EventId {
	if o == nil || IsNil(o.EventId) {
		var ret EventId
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringRevenueToChange) GetEventIdOk() (*EventId, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *CateringRevenueToChange) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given EventId and assigns it to the EventId field.
func (o *CateringRevenueToChange) SetEventId(v EventId) {
	o.EventId = &v
}

// GetExpectedRevenue returns the ExpectedRevenue field value if set, zero value otherwise.
func (o *CateringRevenueToChange) GetExpectedRevenue() bool {
	if o == nil || IsNil(o.ExpectedRevenue) {
		var ret bool
		return ret
	}
	return *o.ExpectedRevenue
}

// GetExpectedRevenueOk returns a tuple with the ExpectedRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringRevenueToChange) GetExpectedRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpectedRevenue) {
		return nil, false
	}
	return o.ExpectedRevenue, true
}

// HasExpectedRevenue returns a boolean if a field has been set.
func (o *CateringRevenueToChange) HasExpectedRevenue() bool {
	if o != nil && !IsNil(o.ExpectedRevenue) {
		return true
	}

	return false
}

// SetExpectedRevenue gets a reference to the given bool and assigns it to the ExpectedRevenue field.
func (o *CateringRevenueToChange) SetExpectedRevenue(v bool) {
	o.ExpectedRevenue = &v
}

// GetGuaranteedRevenue returns the GuaranteedRevenue field value if set, zero value otherwise.
func (o *CateringRevenueToChange) GetGuaranteedRevenue() bool {
	if o == nil || IsNil(o.GuaranteedRevenue) {
		var ret bool
		return ret
	}
	return *o.GuaranteedRevenue
}

// GetGuaranteedRevenueOk returns a tuple with the GuaranteedRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringRevenueToChange) GetGuaranteedRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.GuaranteedRevenue) {
		return nil, false
	}
	return o.GuaranteedRevenue, true
}

// HasGuaranteedRevenue returns a boolean if a field has been set.
func (o *CateringRevenueToChange) HasGuaranteedRevenue() bool {
	if o != nil && !IsNil(o.GuaranteedRevenue) {
		return true
	}

	return false
}

// SetGuaranteedRevenue gets a reference to the given bool and assigns it to the GuaranteedRevenue field.
func (o *CateringRevenueToChange) SetGuaranteedRevenue(v bool) {
	o.GuaranteedRevenue = &v
}

// GetActualRevenue returns the ActualRevenue field value if set, zero value otherwise.
func (o *CateringRevenueToChange) GetActualRevenue() bool {
	if o == nil || IsNil(o.ActualRevenue) {
		var ret bool
		return ret
	}
	return *o.ActualRevenue
}

// GetActualRevenueOk returns a tuple with the ActualRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringRevenueToChange) GetActualRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.ActualRevenue) {
		return nil, false
	}
	return o.ActualRevenue, true
}

// HasActualRevenue returns a boolean if a field has been set.
func (o *CateringRevenueToChange) HasActualRevenue() bool {
	if o != nil && !IsNil(o.ActualRevenue) {
		return true
	}

	return false
}

// SetActualRevenue gets a reference to the given bool and assigns it to the ActualRevenue field.
func (o *CateringRevenueToChange) SetActualRevenue(v bool) {
	o.ActualRevenue = &v
}

// GetBilledRevenue returns the BilledRevenue field value if set, zero value otherwise.
func (o *CateringRevenueToChange) GetBilledRevenue() bool {
	if o == nil || IsNil(o.BilledRevenue) {
		var ret bool
		return ret
	}
	return *o.BilledRevenue
}

// GetBilledRevenueOk returns a tuple with the BilledRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringRevenueToChange) GetBilledRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.BilledRevenue) {
		return nil, false
	}
	return o.BilledRevenue, true
}

// HasBilledRevenue returns a boolean if a field has been set.
func (o *CateringRevenueToChange) HasBilledRevenue() bool {
	if o != nil && !IsNil(o.BilledRevenue) {
		return true
	}

	return false
}

// SetBilledRevenue gets a reference to the given bool and assigns it to the BilledRevenue field.
func (o *CateringRevenueToChange) SetBilledRevenue(v bool) {
	o.BilledRevenue = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CateringRevenueToChange) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringRevenueToChange) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CateringRevenueToChange) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CateringRevenueToChange) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CateringRevenueToChange) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringRevenueToChange) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CateringRevenueToChange) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CateringRevenueToChange) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CateringRevenueToChange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringRevenueToChange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.ExpectedRevenue) {
		toSerialize["expectedRevenue"] = o.ExpectedRevenue
	}
	if !IsNil(o.GuaranteedRevenue) {
		toSerialize["guaranteedRevenue"] = o.GuaranteedRevenue
	}
	if !IsNil(o.ActualRevenue) {
		toSerialize["actualRevenue"] = o.ActualRevenue
	}
	if !IsNil(o.BilledRevenue) {
		toSerialize["billedRevenue"] = o.BilledRevenue
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCateringRevenueToChange struct {
	value *CateringRevenueToChange
	isSet bool
}

func (v NullableCateringRevenueToChange) Get() *CateringRevenueToChange {
	return v.value
}

func (v *NullableCateringRevenueToChange) Set(val *CateringRevenueToChange) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringRevenueToChange) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringRevenueToChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringRevenueToChange(val *CateringRevenueToChange) *NullableCateringRevenueToChange {
	return &NullableCateringRevenueToChange{value: val, isSet: true}
}

func (v NullableCateringRevenueToChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringRevenueToChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


