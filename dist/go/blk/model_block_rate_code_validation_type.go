/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockRateCodeValidationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRateCodeValidationType{}

// BlockRateCodeValidationType Information for validation of block rate code.
type BlockRateCodeValidationType struct {
	// Hotel code for which rate code should be validated.
	HotelId *string `json:"hotelId,omitempty"`
	// Rate code
	RateCode *string `json:"rateCode,omitempty"`
	// Start date for the rate code validation.
	StartDate *string `json:"startDate,omitempty"`
	// End date for the rate code validation.
	EndDate *string `json:"endDate,omitempty"`
}

// NewBlockRateCodeValidationType instantiates a new BlockRateCodeValidationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRateCodeValidationType() *BlockRateCodeValidationType {
	this := BlockRateCodeValidationType{}
	return &this
}

// NewBlockRateCodeValidationTypeWithDefaults instantiates a new BlockRateCodeValidationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRateCodeValidationTypeWithDefaults() *BlockRateCodeValidationType {
	this := BlockRateCodeValidationType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockRateCodeValidationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRateCodeValidationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockRateCodeValidationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockRateCodeValidationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *BlockRateCodeValidationType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRateCodeValidationType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *BlockRateCodeValidationType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *BlockRateCodeValidationType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BlockRateCodeValidationType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRateCodeValidationType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BlockRateCodeValidationType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BlockRateCodeValidationType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BlockRateCodeValidationType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRateCodeValidationType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BlockRateCodeValidationType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BlockRateCodeValidationType) SetEndDate(v string) {
	o.EndDate = &v
}

func (o BlockRateCodeValidationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRateCodeValidationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	return toSerialize, nil
}

type NullableBlockRateCodeValidationType struct {
	value *BlockRateCodeValidationType
	isSet bool
}

func (v NullableBlockRateCodeValidationType) Get() *BlockRateCodeValidationType {
	return v.value
}

func (v *NullableBlockRateCodeValidationType) Set(val *BlockRateCodeValidationType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRateCodeValidationType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRateCodeValidationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRateCodeValidationType(val *BlockRateCodeValidationType) *NullableBlockRateCodeValidationType {
	return &NullableBlockRateCodeValidationType{value: val, isSet: true}
}

func (v NullableBlockRateCodeValidationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRateCodeValidationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


