/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// BlockProfileTypeType Simple type for block profile types.
type BlockProfileTypeType string

// List of blockProfileTypeType
const (
	BLOCKPROFILETYPETYPE_COMPANY BlockProfileTypeType = "Company"
	BLOCKPROFILETYPETYPE_GROUP BlockProfileTypeType = "Group"
	BLOCKPROFILETYPETYPE_AGENT BlockProfileTypeType = "Agent"
	BLOCKPROFILETYPETYPE_SOURCE BlockProfileTypeType = "Source"
	BLOCKPROFILETYPETYPE_COMPANY_CONTACT BlockProfileTypeType = "CompanyContact"
	BLOCKPROFILETYPETYPE_AGENT_CONTACT BlockProfileTypeType = "AgentContact"
	BLOCKPROFILETYPETYPE_SOURCE_CONTACT BlockProfileTypeType = "SourceContact"
)

// All allowed values of BlockProfileTypeType enum
var AllowedBlockProfileTypeTypeEnumValues = []BlockProfileTypeType{
	"Company",
	"Group",
	"Agent",
	"Source",
	"CompanyContact",
	"AgentContact",
	"SourceContact",
}

func (v *BlockProfileTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockProfileTypeType(value)
	for _, existing := range AllowedBlockProfileTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockProfileTypeType", value)
}

// NewBlockProfileTypeTypeFromValue returns a pointer to a valid BlockProfileTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockProfileTypeTypeFromValue(v string) (*BlockProfileTypeType, error) {
	ev := BlockProfileTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockProfileTypeType: valid values are %v", v, AllowedBlockProfileTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockProfileTypeType) IsValid() bool {
	for _, existing := range AllowedBlockProfileTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockProfileTypeType value
func (v BlockProfileTypeType) Ptr() *BlockProfileTypeType {
	return &v
}

type NullableBlockProfileTypeType struct {
	value *BlockProfileTypeType
	isSet bool
}

func (v NullableBlockProfileTypeType) Get() *BlockProfileTypeType {
	return v.value
}

func (v *NullableBlockProfileTypeType) Set(val *BlockProfileTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockProfileTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockProfileTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockProfileTypeType(val *BlockProfileTypeType) *NullableBlockProfileTypeType {
	return &NullableBlockProfileTypeType{value: val, isSet: true}
}

func (v NullableBlockProfileTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockProfileTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

