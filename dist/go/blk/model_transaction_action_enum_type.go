/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// TransactionActionEnumType the model 'TransactionActionEnumType'
type TransactionActionEnumType string

// List of transactionActionEnumType
const (
	TRANSACTIONACTIONENUMTYPE_CREATE TransactionActionEnumType = "CREATE"
	TRANSACTIONACTIONENUMTYPE_UPDATE TransactionActionEnumType = "UPDATE"
	TRANSACTIONACTIONENUMTYPE_DELETE TransactionActionEnumType = "DELETE"
	TRANSACTIONACTIONENUMTYPE_NONE TransactionActionEnumType = "NONE"
)

// All allowed values of TransactionActionEnumType enum
var AllowedTransactionActionEnumTypeEnumValues = []TransactionActionEnumType{
	"CREATE",
	"UPDATE",
	"DELETE",
	"NONE",
}

func (v *TransactionActionEnumType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionActionEnumType(value)
	for _, existing := range AllowedTransactionActionEnumTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionActionEnumType", value)
}

// NewTransactionActionEnumTypeFromValue returns a pointer to a valid TransactionActionEnumType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionActionEnumTypeFromValue(v string) (*TransactionActionEnumType, error) {
	ev := TransactionActionEnumType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionActionEnumType: valid values are %v", v, AllowedTransactionActionEnumTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionActionEnumType) IsValid() bool {
	for _, existing := range AllowedTransactionActionEnumTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transactionActionEnumType value
func (v TransactionActionEnumType) Ptr() *TransactionActionEnumType {
	return &v
}

type NullableTransactionActionEnumType struct {
	value *TransactionActionEnumType
	isSet bool
}

func (v NullableTransactionActionEnumType) Get() *TransactionActionEnumType {
	return v.value
}

func (v *NullableTransactionActionEnumType) Set(val *TransactionActionEnumType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionActionEnumType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionActionEnumType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionActionEnumType(val *TransactionActionEnumType) *NullableTransactionActionEnumType {
	return &NullableTransactionActionEnumType{value: val, isSet: true}
}

func (v NullableTransactionActionEnumType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionActionEnumType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

