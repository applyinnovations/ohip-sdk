/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockSummaries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockSummaries{}

// BlockSummaries It also contains Success,Warnings and Errors related to this operation.
type BlockSummaries struct {
	BlockSummaries *BlockSummariesType `json:"blockSummaries,omitempty"`
	// Refer to Generic common types document.
	MasterInfoList []MasterInfoType `json:"masterInfoList,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewBlockSummaries instantiates a new BlockSummaries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockSummaries() *BlockSummaries {
	this := BlockSummaries{}
	return &this
}

// NewBlockSummariesWithDefaults instantiates a new BlockSummaries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockSummariesWithDefaults() *BlockSummaries {
	this := BlockSummaries{}
	return &this
}

// GetBlockSummaries returns the BlockSummaries field value if set, zero value otherwise.
func (o *BlockSummaries) GetBlockSummaries() BlockSummariesType {
	if o == nil || IsNil(o.BlockSummaries) {
		var ret BlockSummariesType
		return ret
	}
	return *o.BlockSummaries
}

// GetBlockSummariesOk returns a tuple with the BlockSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaries) GetBlockSummariesOk() (*BlockSummariesType, bool) {
	if o == nil || IsNil(o.BlockSummaries) {
		return nil, false
	}
	return o.BlockSummaries, true
}

// HasBlockSummaries returns a boolean if a field has been set.
func (o *BlockSummaries) HasBlockSummaries() bool {
	if o != nil && !IsNil(o.BlockSummaries) {
		return true
	}

	return false
}

// SetBlockSummaries gets a reference to the given BlockSummariesType and assigns it to the BlockSummaries field.
func (o *BlockSummaries) SetBlockSummaries(v BlockSummariesType) {
	o.BlockSummaries = &v
}

// GetMasterInfoList returns the MasterInfoList field value if set, zero value otherwise.
func (o *BlockSummaries) GetMasterInfoList() []MasterInfoType {
	if o == nil || IsNil(o.MasterInfoList) {
		var ret []MasterInfoType
		return ret
	}
	return o.MasterInfoList
}

// GetMasterInfoListOk returns a tuple with the MasterInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaries) GetMasterInfoListOk() ([]MasterInfoType, bool) {
	if o == nil || IsNil(o.MasterInfoList) {
		return nil, false
	}
	return o.MasterInfoList, true
}

// HasMasterInfoList returns a boolean if a field has been set.
func (o *BlockSummaries) HasMasterInfoList() bool {
	if o != nil && !IsNil(o.MasterInfoList) {
		return true
	}

	return false
}

// SetMasterInfoList gets a reference to the given []MasterInfoType and assigns it to the MasterInfoList field.
func (o *BlockSummaries) SetMasterInfoList(v []MasterInfoType) {
	o.MasterInfoList = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BlockSummaries) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaries) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BlockSummaries) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *BlockSummaries) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BlockSummaries) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSummaries) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BlockSummaries) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *BlockSummaries) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o BlockSummaries) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockSummaries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockSummaries) {
		toSerialize["blockSummaries"] = o.BlockSummaries
	}
	if !IsNil(o.MasterInfoList) {
		toSerialize["masterInfoList"] = o.MasterInfoList
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBlockSummaries struct {
	value *BlockSummaries
	isSet bool
}

func (v NullableBlockSummaries) Get() *BlockSummaries {
	return v.value
}

func (v *NullableBlockSummaries) Set(val *BlockSummaries) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockSummaries) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockSummaries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockSummaries(val *BlockSummaries) *NullableBlockSummaries {
	return &NullableBlockSummaries{value: val, isSet: true}
}

func (v NullableBlockSummaries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockSummaries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


