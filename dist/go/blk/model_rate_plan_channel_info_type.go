/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RatePlanChannelInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatePlanChannelInfoType{}

// RatePlanChannelInfoType struct for RatePlanChannelInfoType
type RatePlanChannelInfoType struct {
	// All rate codes are associated with rate plan level ( or rate category )for Channels. So if rate plans are given in the request, get all rate codes associated with the rate plan level.
	RatePlanLevel *string `json:"ratePlanLevel,omitempty"`
	RatePlanId *RatePlanChannelInfoTypeRatePlanId `json:"ratePlanId,omitempty"`
	// To populate the RatePlanName, setup for the channel.
	RatePlanWebName *string `json:"ratePlanWebName,omitempty"`
}

// NewRatePlanChannelInfoType instantiates a new RatePlanChannelInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatePlanChannelInfoType() *RatePlanChannelInfoType {
	this := RatePlanChannelInfoType{}
	return &this
}

// NewRatePlanChannelInfoTypeWithDefaults instantiates a new RatePlanChannelInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatePlanChannelInfoTypeWithDefaults() *RatePlanChannelInfoType {
	this := RatePlanChannelInfoType{}
	return &this
}

// GetRatePlanLevel returns the RatePlanLevel field value if set, zero value otherwise.
func (o *RatePlanChannelInfoType) GetRatePlanLevel() string {
	if o == nil || IsNil(o.RatePlanLevel) {
		var ret string
		return ret
	}
	return *o.RatePlanLevel
}

// GetRatePlanLevelOk returns a tuple with the RatePlanLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanChannelInfoType) GetRatePlanLevelOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanLevel) {
		return nil, false
	}
	return o.RatePlanLevel, true
}

// HasRatePlanLevel returns a boolean if a field has been set.
func (o *RatePlanChannelInfoType) HasRatePlanLevel() bool {
	if o != nil && !IsNil(o.RatePlanLevel) {
		return true
	}

	return false
}

// SetRatePlanLevel gets a reference to the given string and assigns it to the RatePlanLevel field.
func (o *RatePlanChannelInfoType) SetRatePlanLevel(v string) {
	o.RatePlanLevel = &v
}

// GetRatePlanId returns the RatePlanId field value if set, zero value otherwise.
func (o *RatePlanChannelInfoType) GetRatePlanId() RatePlanChannelInfoTypeRatePlanId {
	if o == nil || IsNil(o.RatePlanId) {
		var ret RatePlanChannelInfoTypeRatePlanId
		return ret
	}
	return *o.RatePlanId
}

// GetRatePlanIdOk returns a tuple with the RatePlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanChannelInfoType) GetRatePlanIdOk() (*RatePlanChannelInfoTypeRatePlanId, bool) {
	if o == nil || IsNil(o.RatePlanId) {
		return nil, false
	}
	return o.RatePlanId, true
}

// HasRatePlanId returns a boolean if a field has been set.
func (o *RatePlanChannelInfoType) HasRatePlanId() bool {
	if o != nil && !IsNil(o.RatePlanId) {
		return true
	}

	return false
}

// SetRatePlanId gets a reference to the given RatePlanChannelInfoTypeRatePlanId and assigns it to the RatePlanId field.
func (o *RatePlanChannelInfoType) SetRatePlanId(v RatePlanChannelInfoTypeRatePlanId) {
	o.RatePlanId = &v
}

// GetRatePlanWebName returns the RatePlanWebName field value if set, zero value otherwise.
func (o *RatePlanChannelInfoType) GetRatePlanWebName() string {
	if o == nil || IsNil(o.RatePlanWebName) {
		var ret string
		return ret
	}
	return *o.RatePlanWebName
}

// GetRatePlanWebNameOk returns a tuple with the RatePlanWebName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatePlanChannelInfoType) GetRatePlanWebNameOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanWebName) {
		return nil, false
	}
	return o.RatePlanWebName, true
}

// HasRatePlanWebName returns a boolean if a field has been set.
func (o *RatePlanChannelInfoType) HasRatePlanWebName() bool {
	if o != nil && !IsNil(o.RatePlanWebName) {
		return true
	}

	return false
}

// SetRatePlanWebName gets a reference to the given string and assigns it to the RatePlanWebName field.
func (o *RatePlanChannelInfoType) SetRatePlanWebName(v string) {
	o.RatePlanWebName = &v
}

func (o RatePlanChannelInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatePlanChannelInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatePlanLevel) {
		toSerialize["ratePlanLevel"] = o.RatePlanLevel
	}
	if !IsNil(o.RatePlanId) {
		toSerialize["ratePlanId"] = o.RatePlanId
	}
	if !IsNil(o.RatePlanWebName) {
		toSerialize["ratePlanWebName"] = o.RatePlanWebName
	}
	return toSerialize, nil
}

type NullableRatePlanChannelInfoType struct {
	value *RatePlanChannelInfoType
	isSet bool
}

func (v NullableRatePlanChannelInfoType) Get() *RatePlanChannelInfoType {
	return v.value
}

func (v *NullableRatePlanChannelInfoType) Set(val *RatePlanChannelInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRatePlanChannelInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRatePlanChannelInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatePlanChannelInfoType(val *RatePlanChannelInfoType) *NullableRatePlanChannelInfoType {
	return &NullableRatePlanChannelInfoType{value: val, isSet: true}
}

func (v NullableRatePlanChannelInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatePlanChannelInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


