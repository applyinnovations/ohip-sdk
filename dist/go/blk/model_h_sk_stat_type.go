/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the HSKStatType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HSKStatType{}

// HSKStatType Since the statistical value can be represented in different measure of units, this element will provide a flexible definition for the supported Opera9 statistical units.
type HSKStatType struct {
	// Unit of measurement or the actual code that defines the value. Eg. CurrencyCode for the Amount Category.
	UnitType *string `json:"unitType,omitempty"`
	// Statistical value.
	UnitValue *float32 `json:"unitValue,omitempty"`
	UnitCategory *StatUnitCategoryType `json:"unitCategory,omitempty"`
	Code *HSKStatCodeType `json:"code,omitempty"`
}

// NewHSKStatType instantiates a new HSKStatType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHSKStatType() *HSKStatType {
	this := HSKStatType{}
	return &this
}

// NewHSKStatTypeWithDefaults instantiates a new HSKStatType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHSKStatTypeWithDefaults() *HSKStatType {
	this := HSKStatType{}
	return &this
}

// GetUnitType returns the UnitType field value if set, zero value otherwise.
func (o *HSKStatType) GetUnitType() string {
	if o == nil || IsNil(o.UnitType) {
		var ret string
		return ret
	}
	return *o.UnitType
}

// GetUnitTypeOk returns a tuple with the UnitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HSKStatType) GetUnitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitType) {
		return nil, false
	}
	return o.UnitType, true
}

// HasUnitType returns a boolean if a field has been set.
func (o *HSKStatType) HasUnitType() bool {
	if o != nil && !IsNil(o.UnitType) {
		return true
	}

	return false
}

// SetUnitType gets a reference to the given string and assigns it to the UnitType field.
func (o *HSKStatType) SetUnitType(v string) {
	o.UnitType = &v
}

// GetUnitValue returns the UnitValue field value if set, zero value otherwise.
func (o *HSKStatType) GetUnitValue() float32 {
	if o == nil || IsNil(o.UnitValue) {
		var ret float32
		return ret
	}
	return *o.UnitValue
}

// GetUnitValueOk returns a tuple with the UnitValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HSKStatType) GetUnitValueOk() (*float32, bool) {
	if o == nil || IsNil(o.UnitValue) {
		return nil, false
	}
	return o.UnitValue, true
}

// HasUnitValue returns a boolean if a field has been set.
func (o *HSKStatType) HasUnitValue() bool {
	if o != nil && !IsNil(o.UnitValue) {
		return true
	}

	return false
}

// SetUnitValue gets a reference to the given float32 and assigns it to the UnitValue field.
func (o *HSKStatType) SetUnitValue(v float32) {
	o.UnitValue = &v
}

// GetUnitCategory returns the UnitCategory field value if set, zero value otherwise.
func (o *HSKStatType) GetUnitCategory() StatUnitCategoryType {
	if o == nil || IsNil(o.UnitCategory) {
		var ret StatUnitCategoryType
		return ret
	}
	return *o.UnitCategory
}

// GetUnitCategoryOk returns a tuple with the UnitCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HSKStatType) GetUnitCategoryOk() (*StatUnitCategoryType, bool) {
	if o == nil || IsNil(o.UnitCategory) {
		return nil, false
	}
	return o.UnitCategory, true
}

// HasUnitCategory returns a boolean if a field has been set.
func (o *HSKStatType) HasUnitCategory() bool {
	if o != nil && !IsNil(o.UnitCategory) {
		return true
	}

	return false
}

// SetUnitCategory gets a reference to the given StatUnitCategoryType and assigns it to the UnitCategory field.
func (o *HSKStatType) SetUnitCategory(v StatUnitCategoryType) {
	o.UnitCategory = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *HSKStatType) GetCode() HSKStatCodeType {
	if o == nil || IsNil(o.Code) {
		var ret HSKStatCodeType
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HSKStatType) GetCodeOk() (*HSKStatCodeType, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *HSKStatType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given HSKStatCodeType and assigns it to the Code field.
func (o *HSKStatType) SetCode(v HSKStatCodeType) {
	o.Code = &v
}

func (o HSKStatType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HSKStatType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnitType) {
		toSerialize["unitType"] = o.UnitType
	}
	if !IsNil(o.UnitValue) {
		toSerialize["unitValue"] = o.UnitValue
	}
	if !IsNil(o.UnitCategory) {
		toSerialize["unitCategory"] = o.UnitCategory
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableHSKStatType struct {
	value *HSKStatType
	isSet bool
}

func (v NullableHSKStatType) Get() *HSKStatType {
	return v.value
}

func (v *NullableHSKStatType) Set(val *HSKStatType) {
	v.value = val
	v.isSet = true
}

func (v NullableHSKStatType) IsSet() bool {
	return v.isSet
}

func (v *NullableHSKStatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHSKStatType(val *HSKStatType) *NullableHSKStatType {
	return &NullableHSKStatType{value: val, isSet: true}
}

func (v NullableHSKStatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHSKStatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


