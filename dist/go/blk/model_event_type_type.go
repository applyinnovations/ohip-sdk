/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// EventTypeType Contract type.
type EventTypeType string

// List of eventTypeType
const (
	EVENTTYPETYPE_CONVENTION EventTypeType = "Convention"
	EVENTTYPETYPE_CONTRACT EventTypeType = "Contract"
)

// All allowed values of EventTypeType enum
var AllowedEventTypeTypeEnumValues = []EventTypeType{
	"Convention",
	"Contract",
}

func (v *EventTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventTypeType(value)
	for _, existing := range AllowedEventTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventTypeType", value)
}

// NewEventTypeTypeFromValue returns a pointer to a valid EventTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventTypeTypeFromValue(v string) (*EventTypeType, error) {
	ev := EventTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventTypeType: valid values are %v", v, AllowedEventTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventTypeType) IsValid() bool {
	for _, existing := range AllowedEventTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to eventTypeType value
func (v EventTypeType) Ptr() *EventTypeType {
	return &v
}

type NullableEventTypeType struct {
	value *EventTypeType
	isSet bool
}

func (v NullableEventTypeType) Get() *EventTypeType {
	return v.value
}

func (v *NullableEventTypeType) Set(val *EventTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeType(val *EventTypeType) *NullableEventTypeType {
	return &NullableEventTypeType{value: val, isSet: true}
}

func (v NullableEventTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

