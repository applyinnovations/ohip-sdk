/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the CopySubBlockDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopySubBlockDetail{}

// CopySubBlockDetail Details of sub blocks that will be copied along with the Source Master Block.
type CopySubBlockDetail struct {
	SourceSubBlockId *UniqueIDType `json:"sourceSubBlockId,omitempty"`
	// The start date of the new sub block.
	StartDate *string `json:"startDate,omitempty"`
	// The hotel code of the new sub block.
	HotelId *string `json:"hotelId,omitempty"`
	// The block code of the new sub block.
	Blockcode *string `json:"blockcode,omitempty"`
}

// NewCopySubBlockDetail instantiates a new CopySubBlockDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopySubBlockDetail() *CopySubBlockDetail {
	this := CopySubBlockDetail{}
	return &this
}

// NewCopySubBlockDetailWithDefaults instantiates a new CopySubBlockDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopySubBlockDetailWithDefaults() *CopySubBlockDetail {
	this := CopySubBlockDetail{}
	return &this
}

// GetSourceSubBlockId returns the SourceSubBlockId field value if set, zero value otherwise.
func (o *CopySubBlockDetail) GetSourceSubBlockId() UniqueIDType {
	if o == nil || IsNil(o.SourceSubBlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.SourceSubBlockId
}

// GetSourceSubBlockIdOk returns a tuple with the SourceSubBlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopySubBlockDetail) GetSourceSubBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.SourceSubBlockId) {
		return nil, false
	}
	return o.SourceSubBlockId, true
}

// HasSourceSubBlockId returns a boolean if a field has been set.
func (o *CopySubBlockDetail) HasSourceSubBlockId() bool {
	if o != nil && !IsNil(o.SourceSubBlockId) {
		return true
	}

	return false
}

// SetSourceSubBlockId gets a reference to the given UniqueIDType and assigns it to the SourceSubBlockId field.
func (o *CopySubBlockDetail) SetSourceSubBlockId(v UniqueIDType) {
	o.SourceSubBlockId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CopySubBlockDetail) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopySubBlockDetail) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CopySubBlockDetail) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CopySubBlockDetail) SetStartDate(v string) {
	o.StartDate = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopySubBlockDetail) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopySubBlockDetail) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopySubBlockDetail) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopySubBlockDetail) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBlockcode returns the Blockcode field value if set, zero value otherwise.
func (o *CopySubBlockDetail) GetBlockcode() string {
	if o == nil || IsNil(o.Blockcode) {
		var ret string
		return ret
	}
	return *o.Blockcode
}

// GetBlockcodeOk returns a tuple with the Blockcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopySubBlockDetail) GetBlockcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Blockcode) {
		return nil, false
	}
	return o.Blockcode, true
}

// HasBlockcode returns a boolean if a field has been set.
func (o *CopySubBlockDetail) HasBlockcode() bool {
	if o != nil && !IsNil(o.Blockcode) {
		return true
	}

	return false
}

// SetBlockcode gets a reference to the given string and assigns it to the Blockcode field.
func (o *CopySubBlockDetail) SetBlockcode(v string) {
	o.Blockcode = &v
}

func (o CopySubBlockDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopySubBlockDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceSubBlockId) {
		toSerialize["sourceSubBlockId"] = o.SourceSubBlockId
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Blockcode) {
		toSerialize["blockcode"] = o.Blockcode
	}
	return toSerialize, nil
}

type NullableCopySubBlockDetail struct {
	value *CopySubBlockDetail
	isSet bool
}

func (v NullableCopySubBlockDetail) Get() *CopySubBlockDetail {
	return v.value
}

func (v *NullableCopySubBlockDetail) Set(val *CopySubBlockDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableCopySubBlockDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableCopySubBlockDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopySubBlockDetail(val *CopySubBlockDetail) *NullableCopySubBlockDetail {
	return &NullableCopySubBlockDetail{value: val, isSet: true}
}

func (v NullableCopySubBlockDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopySubBlockDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


