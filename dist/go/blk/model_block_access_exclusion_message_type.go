/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockAccessExclusionMessageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockAccessExclusionMessageType{}

// BlockAccessExclusionMessageType Access exclusion message.
type BlockAccessExclusionMessageType struct {
	// Access Exclusion message for the block.
	ExclusionMessage *string `json:"exclusionMessage,omitempty"`
}

// NewBlockAccessExclusionMessageType instantiates a new BlockAccessExclusionMessageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockAccessExclusionMessageType() *BlockAccessExclusionMessageType {
	this := BlockAccessExclusionMessageType{}
	return &this
}

// NewBlockAccessExclusionMessageTypeWithDefaults instantiates a new BlockAccessExclusionMessageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockAccessExclusionMessageTypeWithDefaults() *BlockAccessExclusionMessageType {
	this := BlockAccessExclusionMessageType{}
	return &this
}

// GetExclusionMessage returns the ExclusionMessage field value if set, zero value otherwise.
func (o *BlockAccessExclusionMessageType) GetExclusionMessage() string {
	if o == nil || IsNil(o.ExclusionMessage) {
		var ret string
		return ret
	}
	return *o.ExclusionMessage
}

// GetExclusionMessageOk returns a tuple with the ExclusionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockAccessExclusionMessageType) GetExclusionMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ExclusionMessage) {
		return nil, false
	}
	return o.ExclusionMessage, true
}

// HasExclusionMessage returns a boolean if a field has been set.
func (o *BlockAccessExclusionMessageType) HasExclusionMessage() bool {
	if o != nil && !IsNil(o.ExclusionMessage) {
		return true
	}

	return false
}

// SetExclusionMessage gets a reference to the given string and assigns it to the ExclusionMessage field.
func (o *BlockAccessExclusionMessageType) SetExclusionMessage(v string) {
	o.ExclusionMessage = &v
}

func (o BlockAccessExclusionMessageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockAccessExclusionMessageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExclusionMessage) {
		toSerialize["exclusionMessage"] = o.ExclusionMessage
	}
	return toSerialize, nil
}

type NullableBlockAccessExclusionMessageType struct {
	value *BlockAccessExclusionMessageType
	isSet bool
}

func (v NullableBlockAccessExclusionMessageType) Get() *BlockAccessExclusionMessageType {
	return v.value
}

func (v *NullableBlockAccessExclusionMessageType) Set(val *BlockAccessExclusionMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockAccessExclusionMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockAccessExclusionMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockAccessExclusionMessageType(val *BlockAccessExclusionMessageType) *NullableBlockAccessExclusionMessageType {
	return &NullableBlockAccessExclusionMessageType{value: val, isSet: true}
}

func (v NullableBlockAccessExclusionMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockAccessExclusionMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


