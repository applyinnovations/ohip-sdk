/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RestrictionStatusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestrictionStatusType{}

// RestrictionStatusType The RestrictionStatusType is used to indicate the type of restriction applied. An enumerated restriction type is defined in the attribute group.
type RestrictionStatusType struct {
	Code *RestrictionStatusesType `json:"code,omitempty"`
	// Defines restriction in conjunction with Restriction Code. Value must be specified for Restriction Codes MinimumStayThrough, MaximumStayThrough, MinimumLengthOfStay, MaximumLengthOfStay, MinimumAdvanceBooking, MaximumAdvanceBooking.
	Unit *int32 `json:"unit,omitempty"`
}

// NewRestrictionStatusType instantiates a new RestrictionStatusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictionStatusType() *RestrictionStatusType {
	this := RestrictionStatusType{}
	return &this
}

// NewRestrictionStatusTypeWithDefaults instantiates a new RestrictionStatusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictionStatusTypeWithDefaults() *RestrictionStatusType {
	this := RestrictionStatusType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RestrictionStatusType) GetCode() RestrictionStatusesType {
	if o == nil || IsNil(o.Code) {
		var ret RestrictionStatusesType
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionStatusType) GetCodeOk() (*RestrictionStatusesType, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RestrictionStatusType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given RestrictionStatusesType and assigns it to the Code field.
func (o *RestrictionStatusType) SetCode(v RestrictionStatusesType) {
	o.Code = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *RestrictionStatusType) GetUnit() int32 {
	if o == nil || IsNil(o.Unit) {
		var ret int32
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestrictionStatusType) GetUnitOk() (*int32, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *RestrictionStatusType) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given int32 and assigns it to the Unit field.
func (o *RestrictionStatusType) SetUnit(v int32) {
	o.Unit = &v
}

func (o RestrictionStatusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestrictionStatusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableRestrictionStatusType struct {
	value *RestrictionStatusType
	isSet bool
}

func (v NullableRestrictionStatusType) Get() *RestrictionStatusType {
	return v.value
}

func (v *NullableRestrictionStatusType) Set(val *RestrictionStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictionStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictionStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictionStatusType(val *RestrictionStatusType) *NullableRestrictionStatusType {
	return &NullableRestrictionStatusType{value: val, isSet: true}
}

func (v NullableRestrictionStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictionStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


