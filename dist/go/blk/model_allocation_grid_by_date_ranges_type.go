/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the AllocationGridByDateRangesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllocationGridByDateRangesType{}

// AllocationGridByDateRangesType A collection of Allocation objects for a block, such as Current Rooms, Original Rooms, Rate Amounts, etc.
type AllocationGridByDateRangesType struct {
	// Indicates the type of the Allocation objects.
	Allocation *string `json:"allocation,omitempty"`
	// Allocation objects for a block.
	RoomAllocationInfo []AllocationGridByDateRangeType `json:"roomAllocationInfo,omitempty"`
}

// NewAllocationGridByDateRangesType instantiates a new AllocationGridByDateRangesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationGridByDateRangesType() *AllocationGridByDateRangesType {
	this := AllocationGridByDateRangesType{}
	return &this
}

// NewAllocationGridByDateRangesTypeWithDefaults instantiates a new AllocationGridByDateRangesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationGridByDateRangesTypeWithDefaults() *AllocationGridByDateRangesType {
	this := AllocationGridByDateRangesType{}
	return &this
}

// GetAllocation returns the Allocation field value if set, zero value otherwise.
func (o *AllocationGridByDateRangesType) GetAllocation() string {
	if o == nil || IsNil(o.Allocation) {
		var ret string
		return ret
	}
	return *o.Allocation
}

// GetAllocationOk returns a tuple with the Allocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationGridByDateRangesType) GetAllocationOk() (*string, bool) {
	if o == nil || IsNil(o.Allocation) {
		return nil, false
	}
	return o.Allocation, true
}

// HasAllocation returns a boolean if a field has been set.
func (o *AllocationGridByDateRangesType) HasAllocation() bool {
	if o != nil && !IsNil(o.Allocation) {
		return true
	}

	return false
}

// SetAllocation gets a reference to the given string and assigns it to the Allocation field.
func (o *AllocationGridByDateRangesType) SetAllocation(v string) {
	o.Allocation = &v
}

// GetRoomAllocationInfo returns the RoomAllocationInfo field value if set, zero value otherwise.
func (o *AllocationGridByDateRangesType) GetRoomAllocationInfo() []AllocationGridByDateRangeType {
	if o == nil || IsNil(o.RoomAllocationInfo) {
		var ret []AllocationGridByDateRangeType
		return ret
	}
	return o.RoomAllocationInfo
}

// GetRoomAllocationInfoOk returns a tuple with the RoomAllocationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationGridByDateRangesType) GetRoomAllocationInfoOk() ([]AllocationGridByDateRangeType, bool) {
	if o == nil || IsNil(o.RoomAllocationInfo) {
		return nil, false
	}
	return o.RoomAllocationInfo, true
}

// HasRoomAllocationInfo returns a boolean if a field has been set.
func (o *AllocationGridByDateRangesType) HasRoomAllocationInfo() bool {
	if o != nil && !IsNil(o.RoomAllocationInfo) {
		return true
	}

	return false
}

// SetRoomAllocationInfo gets a reference to the given []AllocationGridByDateRangeType and assigns it to the RoomAllocationInfo field.
func (o *AllocationGridByDateRangesType) SetRoomAllocationInfo(v []AllocationGridByDateRangeType) {
	o.RoomAllocationInfo = v
}

func (o AllocationGridByDateRangesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllocationGridByDateRangesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Allocation) {
		toSerialize["allocation"] = o.Allocation
	}
	if !IsNil(o.RoomAllocationInfo) {
		toSerialize["roomAllocationInfo"] = o.RoomAllocationInfo
	}
	return toSerialize, nil
}

type NullableAllocationGridByDateRangesType struct {
	value *AllocationGridByDateRangesType
	isSet bool
}

func (v NullableAllocationGridByDateRangesType) Get() *AllocationGridByDateRangesType {
	return v.value
}

func (v *NullableAllocationGridByDateRangesType) Set(val *AllocationGridByDateRangesType) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationGridByDateRangesType) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationGridByDateRangesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationGridByDateRangesType(val *AllocationGridByDateRangesType) *NullableAllocationGridByDateRangesType {
	return &NullableAllocationGridByDateRangesType{value: val, isSet: true}
}

func (v NullableAllocationGridByDateRangesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationGridByDateRangesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


