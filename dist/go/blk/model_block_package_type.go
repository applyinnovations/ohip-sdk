/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockPackageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockPackageType{}

// BlockPackageType This contains the full information and schedule of the block package.
type BlockPackageType struct {
	ConsumptionDetails *PackageConsumptionType `json:"consumptionDetails,omitempty"`
	// Required value when changing a package. If the original end date was null, then null is required.
	EndDate *string `json:"endDate,omitempty"`
	NewTimeSpan *TimeSpanType `json:"newTimeSpan,omitempty"`
	// Package code. This is the unique code used for the package and is a required element.
	PackageCode *string `json:"packageCode,omitempty"`
	// Package group code. If this package is part of a package group, the group code is indicated here. This is a required element and is part of the key to fetch the correct package record .
	PackageGroup *string `json:"packageGroup,omitempty"`
	PackageHeaderType *PackageCodeHeaderType `json:"packageHeaderType,omitempty"`
	// The rate code which contains this package. If the package is not part of a rate code, this will be empty. Required element and part of the key to fetch the correct package record.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// Required value when changing a package. If the original start date was null, then null is required.
	StartDate *string `json:"startDate,omitempty"`
}

// NewBlockPackageType instantiates a new BlockPackageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockPackageType() *BlockPackageType {
	this := BlockPackageType{}
	return &this
}

// NewBlockPackageTypeWithDefaults instantiates a new BlockPackageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockPackageTypeWithDefaults() *BlockPackageType {
	this := BlockPackageType{}
	return &this
}

// GetConsumptionDetails returns the ConsumptionDetails field value if set, zero value otherwise.
func (o *BlockPackageType) GetConsumptionDetails() PackageConsumptionType {
	if o == nil || IsNil(o.ConsumptionDetails) {
		var ret PackageConsumptionType
		return ret
	}
	return *o.ConsumptionDetails
}

// GetConsumptionDetailsOk returns a tuple with the ConsumptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetConsumptionDetailsOk() (*PackageConsumptionType, bool) {
	if o == nil || IsNil(o.ConsumptionDetails) {
		return nil, false
	}
	return o.ConsumptionDetails, true
}

// HasConsumptionDetails returns a boolean if a field has been set.
func (o *BlockPackageType) HasConsumptionDetails() bool {
	if o != nil && !IsNil(o.ConsumptionDetails) {
		return true
	}

	return false
}

// SetConsumptionDetails gets a reference to the given PackageConsumptionType and assigns it to the ConsumptionDetails field.
func (o *BlockPackageType) SetConsumptionDetails(v PackageConsumptionType) {
	o.ConsumptionDetails = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BlockPackageType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BlockPackageType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BlockPackageType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetNewTimeSpan returns the NewTimeSpan field value if set, zero value otherwise.
func (o *BlockPackageType) GetNewTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.NewTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.NewTimeSpan
}

// GetNewTimeSpanOk returns a tuple with the NewTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetNewTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.NewTimeSpan) {
		return nil, false
	}
	return o.NewTimeSpan, true
}

// HasNewTimeSpan returns a boolean if a field has been set.
func (o *BlockPackageType) HasNewTimeSpan() bool {
	if o != nil && !IsNil(o.NewTimeSpan) {
		return true
	}

	return false
}

// SetNewTimeSpan gets a reference to the given TimeSpanType and assigns it to the NewTimeSpan field.
func (o *BlockPackageType) SetNewTimeSpan(v TimeSpanType) {
	o.NewTimeSpan = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *BlockPackageType) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *BlockPackageType) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *BlockPackageType) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetPackageGroup returns the PackageGroup field value if set, zero value otherwise.
func (o *BlockPackageType) GetPackageGroup() string {
	if o == nil || IsNil(o.PackageGroup) {
		var ret string
		return ret
	}
	return *o.PackageGroup
}

// GetPackageGroupOk returns a tuple with the PackageGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetPackageGroupOk() (*string, bool) {
	if o == nil || IsNil(o.PackageGroup) {
		return nil, false
	}
	return o.PackageGroup, true
}

// HasPackageGroup returns a boolean if a field has been set.
func (o *BlockPackageType) HasPackageGroup() bool {
	if o != nil && !IsNil(o.PackageGroup) {
		return true
	}

	return false
}

// SetPackageGroup gets a reference to the given string and assigns it to the PackageGroup field.
func (o *BlockPackageType) SetPackageGroup(v string) {
	o.PackageGroup = &v
}

// GetPackageHeaderType returns the PackageHeaderType field value if set, zero value otherwise.
func (o *BlockPackageType) GetPackageHeaderType() PackageCodeHeaderType {
	if o == nil || IsNil(o.PackageHeaderType) {
		var ret PackageCodeHeaderType
		return ret
	}
	return *o.PackageHeaderType
}

// GetPackageHeaderTypeOk returns a tuple with the PackageHeaderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetPackageHeaderTypeOk() (*PackageCodeHeaderType, bool) {
	if o == nil || IsNil(o.PackageHeaderType) {
		return nil, false
	}
	return o.PackageHeaderType, true
}

// HasPackageHeaderType returns a boolean if a field has been set.
func (o *BlockPackageType) HasPackageHeaderType() bool {
	if o != nil && !IsNil(o.PackageHeaderType) {
		return true
	}

	return false
}

// SetPackageHeaderType gets a reference to the given PackageCodeHeaderType and assigns it to the PackageHeaderType field.
func (o *BlockPackageType) SetPackageHeaderType(v PackageCodeHeaderType) {
	o.PackageHeaderType = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *BlockPackageType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *BlockPackageType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *BlockPackageType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BlockPackageType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockPackageType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BlockPackageType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BlockPackageType) SetStartDate(v string) {
	o.StartDate = &v
}

func (o BlockPackageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockPackageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsumptionDetails) {
		toSerialize["consumptionDetails"] = o.ConsumptionDetails
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.NewTimeSpan) {
		toSerialize["newTimeSpan"] = o.NewTimeSpan
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.PackageGroup) {
		toSerialize["packageGroup"] = o.PackageGroup
	}
	if !IsNil(o.PackageHeaderType) {
		toSerialize["packageHeaderType"] = o.PackageHeaderType
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableBlockPackageType struct {
	value *BlockPackageType
	isSet bool
}

func (v NullableBlockPackageType) Get() *BlockPackageType {
	return v.value
}

func (v *NullableBlockPackageType) Set(val *BlockPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockPackageType(val *BlockPackageType) *NullableBlockPackageType {
	return &NullableBlockPackageType{value: val, isSet: true}
}

func (v NullableBlockPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


