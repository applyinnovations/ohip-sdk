/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the RoomsStatusSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomsStatusSummaryType{}

// RoomsStatusSummaryType Contains Block's room status summary info.
type RoomsStatusSummaryType struct {
	Assigned *int32 `json:"assigned,omitempty"`
	Clean *int32 `json:"clean,omitempty"`
	Dirty *int32 `json:"dirty,omitempty"`
	Inspected *int32 `json:"inspected,omitempty"`
	OutOfService *int32 `json:"outOfService,omitempty"`
	Pickup *int32 `json:"pickup,omitempty"`
	Unassigned *int32 `json:"unassigned,omitempty"`
}

// NewRoomsStatusSummaryType instantiates a new RoomsStatusSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomsStatusSummaryType() *RoomsStatusSummaryType {
	this := RoomsStatusSummaryType{}
	return &this
}

// NewRoomsStatusSummaryTypeWithDefaults instantiates a new RoomsStatusSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomsStatusSummaryTypeWithDefaults() *RoomsStatusSummaryType {
	this := RoomsStatusSummaryType{}
	return &this
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *RoomsStatusSummaryType) GetAssigned() int32 {
	if o == nil || IsNil(o.Assigned) {
		var ret int32
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsStatusSummaryType) GetAssignedOk() (*int32, bool) {
	if o == nil || IsNil(o.Assigned) {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *RoomsStatusSummaryType) HasAssigned() bool {
	if o != nil && !IsNil(o.Assigned) {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given int32 and assigns it to the Assigned field.
func (o *RoomsStatusSummaryType) SetAssigned(v int32) {
	o.Assigned = &v
}

// GetClean returns the Clean field value if set, zero value otherwise.
func (o *RoomsStatusSummaryType) GetClean() int32 {
	if o == nil || IsNil(o.Clean) {
		var ret int32
		return ret
	}
	return *o.Clean
}

// GetCleanOk returns a tuple with the Clean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsStatusSummaryType) GetCleanOk() (*int32, bool) {
	if o == nil || IsNil(o.Clean) {
		return nil, false
	}
	return o.Clean, true
}

// HasClean returns a boolean if a field has been set.
func (o *RoomsStatusSummaryType) HasClean() bool {
	if o != nil && !IsNil(o.Clean) {
		return true
	}

	return false
}

// SetClean gets a reference to the given int32 and assigns it to the Clean field.
func (o *RoomsStatusSummaryType) SetClean(v int32) {
	o.Clean = &v
}

// GetDirty returns the Dirty field value if set, zero value otherwise.
func (o *RoomsStatusSummaryType) GetDirty() int32 {
	if o == nil || IsNil(o.Dirty) {
		var ret int32
		return ret
	}
	return *o.Dirty
}

// GetDirtyOk returns a tuple with the Dirty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsStatusSummaryType) GetDirtyOk() (*int32, bool) {
	if o == nil || IsNil(o.Dirty) {
		return nil, false
	}
	return o.Dirty, true
}

// HasDirty returns a boolean if a field has been set.
func (o *RoomsStatusSummaryType) HasDirty() bool {
	if o != nil && !IsNil(o.Dirty) {
		return true
	}

	return false
}

// SetDirty gets a reference to the given int32 and assigns it to the Dirty field.
func (o *RoomsStatusSummaryType) SetDirty(v int32) {
	o.Dirty = &v
}

// GetInspected returns the Inspected field value if set, zero value otherwise.
func (o *RoomsStatusSummaryType) GetInspected() int32 {
	if o == nil || IsNil(o.Inspected) {
		var ret int32
		return ret
	}
	return *o.Inspected
}

// GetInspectedOk returns a tuple with the Inspected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsStatusSummaryType) GetInspectedOk() (*int32, bool) {
	if o == nil || IsNil(o.Inspected) {
		return nil, false
	}
	return o.Inspected, true
}

// HasInspected returns a boolean if a field has been set.
func (o *RoomsStatusSummaryType) HasInspected() bool {
	if o != nil && !IsNil(o.Inspected) {
		return true
	}

	return false
}

// SetInspected gets a reference to the given int32 and assigns it to the Inspected field.
func (o *RoomsStatusSummaryType) SetInspected(v int32) {
	o.Inspected = &v
}

// GetOutOfService returns the OutOfService field value if set, zero value otherwise.
func (o *RoomsStatusSummaryType) GetOutOfService() int32 {
	if o == nil || IsNil(o.OutOfService) {
		var ret int32
		return ret
	}
	return *o.OutOfService
}

// GetOutOfServiceOk returns a tuple with the OutOfService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsStatusSummaryType) GetOutOfServiceOk() (*int32, bool) {
	if o == nil || IsNil(o.OutOfService) {
		return nil, false
	}
	return o.OutOfService, true
}

// HasOutOfService returns a boolean if a field has been set.
func (o *RoomsStatusSummaryType) HasOutOfService() bool {
	if o != nil && !IsNil(o.OutOfService) {
		return true
	}

	return false
}

// SetOutOfService gets a reference to the given int32 and assigns it to the OutOfService field.
func (o *RoomsStatusSummaryType) SetOutOfService(v int32) {
	o.OutOfService = &v
}

// GetPickup returns the Pickup field value if set, zero value otherwise.
func (o *RoomsStatusSummaryType) GetPickup() int32 {
	if o == nil || IsNil(o.Pickup) {
		var ret int32
		return ret
	}
	return *o.Pickup
}

// GetPickupOk returns a tuple with the Pickup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsStatusSummaryType) GetPickupOk() (*int32, bool) {
	if o == nil || IsNil(o.Pickup) {
		return nil, false
	}
	return o.Pickup, true
}

// HasPickup returns a boolean if a field has been set.
func (o *RoomsStatusSummaryType) HasPickup() bool {
	if o != nil && !IsNil(o.Pickup) {
		return true
	}

	return false
}

// SetPickup gets a reference to the given int32 and assigns it to the Pickup field.
func (o *RoomsStatusSummaryType) SetPickup(v int32) {
	o.Pickup = &v
}

// GetUnassigned returns the Unassigned field value if set, zero value otherwise.
func (o *RoomsStatusSummaryType) GetUnassigned() int32 {
	if o == nil || IsNil(o.Unassigned) {
		var ret int32
		return ret
	}
	return *o.Unassigned
}

// GetUnassignedOk returns a tuple with the Unassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsStatusSummaryType) GetUnassignedOk() (*int32, bool) {
	if o == nil || IsNil(o.Unassigned) {
		return nil, false
	}
	return o.Unassigned, true
}

// HasUnassigned returns a boolean if a field has been set.
func (o *RoomsStatusSummaryType) HasUnassigned() bool {
	if o != nil && !IsNil(o.Unassigned) {
		return true
	}

	return false
}

// SetUnassigned gets a reference to the given int32 and assigns it to the Unassigned field.
func (o *RoomsStatusSummaryType) SetUnassigned(v int32) {
	o.Unassigned = &v
}

func (o RoomsStatusSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomsStatusSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assigned) {
		toSerialize["assigned"] = o.Assigned
	}
	if !IsNil(o.Clean) {
		toSerialize["clean"] = o.Clean
	}
	if !IsNil(o.Dirty) {
		toSerialize["dirty"] = o.Dirty
	}
	if !IsNil(o.Inspected) {
		toSerialize["inspected"] = o.Inspected
	}
	if !IsNil(o.OutOfService) {
		toSerialize["outOfService"] = o.OutOfService
	}
	if !IsNil(o.Pickup) {
		toSerialize["pickup"] = o.Pickup
	}
	if !IsNil(o.Unassigned) {
		toSerialize["unassigned"] = o.Unassigned
	}
	return toSerialize, nil
}

type NullableRoomsStatusSummaryType struct {
	value *RoomsStatusSummaryType
	isSet bool
}

func (v NullableRoomsStatusSummaryType) Get() *RoomsStatusSummaryType {
	return v.value
}

func (v *NullableRoomsStatusSummaryType) Set(val *RoomsStatusSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomsStatusSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomsStatusSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomsStatusSummaryType(val *RoomsStatusSummaryType) *NullableRoomsStatusSummaryType {
	return &NullableRoomsStatusSummaryType{value: val, isSet: true}
}

func (v NullableRoomsStatusSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomsStatusSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


