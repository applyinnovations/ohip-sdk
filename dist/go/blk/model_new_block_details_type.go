/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the NewBlockDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewBlockDetailsType{}

// NewBlockDetailsType This is used when creating a copy of a block.
type NewBlockDetailsType struct {
	// Stores the value for no of attendees.
	Attendees *int32 `json:"attendees,omitempty"`
	// The block code of the new block.
	BlockCode *string `json:"blockCode,omitempty"`
	BlockDatesRange *DateRangeType `json:"blockDatesRange,omitempty"`
	// Origin information of the block PMS/ORS/SC/SFA
	BlockOrigin *string `json:"blockOrigin,omitempty"`
	// The booking status of the new block.
	BlockStatus *string `json:"blockStatus,omitempty"`
	// The value in this field will be applied as the catering status of the new Block and all its events.
	CateringStatus *string `json:"cateringStatus,omitempty"`
	GridCategory []string `json:"gridCategory,omitempty"`
	// This is the source grid type, like Original, Current, Pickup, which will be copied to the target Business Block.
	GridType *string `json:"gridType,omitempty"`
	// The hotel code of the new block.
	HotelId *string `json:"hotelId,omitempty"`
	// This is used to pass the market code when a block copy is done to a different property.
	MarketCode *string `json:"marketCode,omitempty"`
	// This is used to pass the Source code when a block copy is done to a different property.
	RateCode *string `json:"rateCode,omitempty"`
	// This is used to pass the Source code when a block copy is done to a different property.
	SourceCode *string `json:"sourceCode,omitempty"`
	SourceDateRangeToCopy *DateRangeType `json:"sourceDateRangeToCopy,omitempty"`
	// The start date of the new block.
	StartDate *string `json:"startDate,omitempty"`
}

// NewNewBlockDetailsType instantiates a new NewBlockDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewBlockDetailsType() *NewBlockDetailsType {
	this := NewBlockDetailsType{}
	return &this
}

// NewNewBlockDetailsTypeWithDefaults instantiates a new NewBlockDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewBlockDetailsTypeWithDefaults() *NewBlockDetailsType {
	this := NewBlockDetailsType{}
	return &this
}

// GetAttendees returns the Attendees field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetAttendees() int32 {
	if o == nil || IsNil(o.Attendees) {
		var ret int32
		return ret
	}
	return *o.Attendees
}

// GetAttendeesOk returns a tuple with the Attendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetAttendeesOk() (*int32, bool) {
	if o == nil || IsNil(o.Attendees) {
		return nil, false
	}
	return o.Attendees, true
}

// HasAttendees returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasAttendees() bool {
	if o != nil && !IsNil(o.Attendees) {
		return true
	}

	return false
}

// SetAttendees gets a reference to the given int32 and assigns it to the Attendees field.
func (o *NewBlockDetailsType) SetAttendees(v int32) {
	o.Attendees = &v
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *NewBlockDetailsType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetBlockDatesRange returns the BlockDatesRange field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetBlockDatesRange() DateRangeType {
	if o == nil || IsNil(o.BlockDatesRange) {
		var ret DateRangeType
		return ret
	}
	return *o.BlockDatesRange
}

// GetBlockDatesRangeOk returns a tuple with the BlockDatesRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetBlockDatesRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.BlockDatesRange) {
		return nil, false
	}
	return o.BlockDatesRange, true
}

// HasBlockDatesRange returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasBlockDatesRange() bool {
	if o != nil && !IsNil(o.BlockDatesRange) {
		return true
	}

	return false
}

// SetBlockDatesRange gets a reference to the given DateRangeType and assigns it to the BlockDatesRange field.
func (o *NewBlockDetailsType) SetBlockDatesRange(v DateRangeType) {
	o.BlockDatesRange = &v
}

// GetBlockOrigin returns the BlockOrigin field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetBlockOrigin() string {
	if o == nil || IsNil(o.BlockOrigin) {
		var ret string
		return ret
	}
	return *o.BlockOrigin
}

// GetBlockOriginOk returns a tuple with the BlockOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetBlockOriginOk() (*string, bool) {
	if o == nil || IsNil(o.BlockOrigin) {
		return nil, false
	}
	return o.BlockOrigin, true
}

// HasBlockOrigin returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasBlockOrigin() bool {
	if o != nil && !IsNil(o.BlockOrigin) {
		return true
	}

	return false
}

// SetBlockOrigin gets a reference to the given string and assigns it to the BlockOrigin field.
func (o *NewBlockDetailsType) SetBlockOrigin(v string) {
	o.BlockOrigin = &v
}

// GetBlockStatus returns the BlockStatus field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetBlockStatus() string {
	if o == nil || IsNil(o.BlockStatus) {
		var ret string
		return ret
	}
	return *o.BlockStatus
}

// GetBlockStatusOk returns a tuple with the BlockStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetBlockStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BlockStatus) {
		return nil, false
	}
	return o.BlockStatus, true
}

// HasBlockStatus returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasBlockStatus() bool {
	if o != nil && !IsNil(o.BlockStatus) {
		return true
	}

	return false
}

// SetBlockStatus gets a reference to the given string and assigns it to the BlockStatus field.
func (o *NewBlockDetailsType) SetBlockStatus(v string) {
	o.BlockStatus = &v
}

// GetCateringStatus returns the CateringStatus field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetCateringStatus() string {
	if o == nil || IsNil(o.CateringStatus) {
		var ret string
		return ret
	}
	return *o.CateringStatus
}

// GetCateringStatusOk returns a tuple with the CateringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetCateringStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CateringStatus) {
		return nil, false
	}
	return o.CateringStatus, true
}

// HasCateringStatus returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasCateringStatus() bool {
	if o != nil && !IsNil(o.CateringStatus) {
		return true
	}

	return false
}

// SetCateringStatus gets a reference to the given string and assigns it to the CateringStatus field.
func (o *NewBlockDetailsType) SetCateringStatus(v string) {
	o.CateringStatus = &v
}

// GetGridCategory returns the GridCategory field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetGridCategory() []string {
	if o == nil || IsNil(o.GridCategory) {
		var ret []string
		return ret
	}
	return o.GridCategory
}

// GetGridCategoryOk returns a tuple with the GridCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetGridCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.GridCategory) {
		return nil, false
	}
	return o.GridCategory, true
}

// HasGridCategory returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasGridCategory() bool {
	if o != nil && !IsNil(o.GridCategory) {
		return true
	}

	return false
}

// SetGridCategory gets a reference to the given []string and assigns it to the GridCategory field.
func (o *NewBlockDetailsType) SetGridCategory(v []string) {
	o.GridCategory = v
}

// GetGridType returns the GridType field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetGridType() string {
	if o == nil || IsNil(o.GridType) {
		var ret string
		return ret
	}
	return *o.GridType
}

// GetGridTypeOk returns a tuple with the GridType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetGridTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GridType) {
		return nil, false
	}
	return o.GridType, true
}

// HasGridType returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasGridType() bool {
	if o != nil && !IsNil(o.GridType) {
		return true
	}

	return false
}

// SetGridType gets a reference to the given string and assigns it to the GridType field.
func (o *NewBlockDetailsType) SetGridType(v string) {
	o.GridType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *NewBlockDetailsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *NewBlockDetailsType) SetMarketCode(v string) {
	o.MarketCode = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *NewBlockDetailsType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetSourceCode returns the SourceCode field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetSourceCode() string {
	if o == nil || IsNil(o.SourceCode) {
		var ret string
		return ret
	}
	return *o.SourceCode
}

// GetSourceCodeOk returns a tuple with the SourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetSourceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCode) {
		return nil, false
	}
	return o.SourceCode, true
}

// HasSourceCode returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasSourceCode() bool {
	if o != nil && !IsNil(o.SourceCode) {
		return true
	}

	return false
}

// SetSourceCode gets a reference to the given string and assigns it to the SourceCode field.
func (o *NewBlockDetailsType) SetSourceCode(v string) {
	o.SourceCode = &v
}

// GetSourceDateRangeToCopy returns the SourceDateRangeToCopy field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetSourceDateRangeToCopy() DateRangeType {
	if o == nil || IsNil(o.SourceDateRangeToCopy) {
		var ret DateRangeType
		return ret
	}
	return *o.SourceDateRangeToCopy
}

// GetSourceDateRangeToCopyOk returns a tuple with the SourceDateRangeToCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetSourceDateRangeToCopyOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.SourceDateRangeToCopy) {
		return nil, false
	}
	return o.SourceDateRangeToCopy, true
}

// HasSourceDateRangeToCopy returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasSourceDateRangeToCopy() bool {
	if o != nil && !IsNil(o.SourceDateRangeToCopy) {
		return true
	}

	return false
}

// SetSourceDateRangeToCopy gets a reference to the given DateRangeType and assigns it to the SourceDateRangeToCopy field.
func (o *NewBlockDetailsType) SetSourceDateRangeToCopy(v DateRangeType) {
	o.SourceDateRangeToCopy = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *NewBlockDetailsType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewBlockDetailsType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *NewBlockDetailsType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *NewBlockDetailsType) SetStartDate(v string) {
	o.StartDate = &v
}

func (o NewBlockDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewBlockDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attendees) {
		toSerialize["attendees"] = o.Attendees
	}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.BlockDatesRange) {
		toSerialize["blockDatesRange"] = o.BlockDatesRange
	}
	if !IsNil(o.BlockOrigin) {
		toSerialize["blockOrigin"] = o.BlockOrigin
	}
	if !IsNil(o.BlockStatus) {
		toSerialize["blockStatus"] = o.BlockStatus
	}
	if !IsNil(o.CateringStatus) {
		toSerialize["cateringStatus"] = o.CateringStatus
	}
	if !IsNil(o.GridCategory) {
		toSerialize["gridCategory"] = o.GridCategory
	}
	if !IsNil(o.GridType) {
		toSerialize["gridType"] = o.GridType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.SourceCode) {
		toSerialize["sourceCode"] = o.SourceCode
	}
	if !IsNil(o.SourceDateRangeToCopy) {
		toSerialize["sourceDateRangeToCopy"] = o.SourceDateRangeToCopy
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableNewBlockDetailsType struct {
	value *NewBlockDetailsType
	isSet bool
}

func (v NullableNewBlockDetailsType) Get() *NewBlockDetailsType {
	return v.value
}

func (v *NullableNewBlockDetailsType) Set(val *NewBlockDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableNewBlockDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableNewBlockDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewBlockDetailsType(val *NewBlockDetailsType) *NullableNewBlockDetailsType {
	return &NullableNewBlockDetailsType{value: val, isSet: true}
}

func (v NullableNewBlockDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewBlockDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


