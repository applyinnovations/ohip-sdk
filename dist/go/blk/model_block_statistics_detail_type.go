/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockStatisticsDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockStatisticsDetailType{}

// BlockStatisticsDetailType Statistics Detail for a statistic type.
type BlockStatisticsDetailType struct {
	StatisticType *StatisticsType `json:"statisticType,omitempty"`
	StatisticsDates [][]BlockStatisticsDateType `json:"statisticsDates,omitempty"`
}

// NewBlockStatisticsDetailType instantiates a new BlockStatisticsDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockStatisticsDetailType() *BlockStatisticsDetailType {
	this := BlockStatisticsDetailType{}
	return &this
}

// NewBlockStatisticsDetailTypeWithDefaults instantiates a new BlockStatisticsDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockStatisticsDetailTypeWithDefaults() *BlockStatisticsDetailType {
	this := BlockStatisticsDetailType{}
	return &this
}

// GetStatisticType returns the StatisticType field value if set, zero value otherwise.
func (o *BlockStatisticsDetailType) GetStatisticType() StatisticsType {
	if o == nil || IsNil(o.StatisticType) {
		var ret StatisticsType
		return ret
	}
	return *o.StatisticType
}

// GetStatisticTypeOk returns a tuple with the StatisticType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDetailType) GetStatisticTypeOk() (*StatisticsType, bool) {
	if o == nil || IsNil(o.StatisticType) {
		return nil, false
	}
	return o.StatisticType, true
}

// HasStatisticType returns a boolean if a field has been set.
func (o *BlockStatisticsDetailType) HasStatisticType() bool {
	if o != nil && !IsNil(o.StatisticType) {
		return true
	}

	return false
}

// SetStatisticType gets a reference to the given StatisticsType and assigns it to the StatisticType field.
func (o *BlockStatisticsDetailType) SetStatisticType(v StatisticsType) {
	o.StatisticType = &v
}

// GetStatisticsDates returns the StatisticsDates field value if set, zero value otherwise.
func (o *BlockStatisticsDetailType) GetStatisticsDates() [][]BlockStatisticsDateType {
	if o == nil || IsNil(o.StatisticsDates) {
		var ret [][]BlockStatisticsDateType
		return ret
	}
	return o.StatisticsDates
}

// GetStatisticsDatesOk returns a tuple with the StatisticsDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatisticsDetailType) GetStatisticsDatesOk() ([][]BlockStatisticsDateType, bool) {
	if o == nil || IsNil(o.StatisticsDates) {
		return nil, false
	}
	return o.StatisticsDates, true
}

// HasStatisticsDates returns a boolean if a field has been set.
func (o *BlockStatisticsDetailType) HasStatisticsDates() bool {
	if o != nil && !IsNil(o.StatisticsDates) {
		return true
	}

	return false
}

// SetStatisticsDates gets a reference to the given [][]BlockStatisticsDateType and assigns it to the StatisticsDates field.
func (o *BlockStatisticsDetailType) SetStatisticsDates(v [][]BlockStatisticsDateType) {
	o.StatisticsDates = v
}

func (o BlockStatisticsDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockStatisticsDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StatisticType) {
		toSerialize["statisticType"] = o.StatisticType
	}
	if !IsNil(o.StatisticsDates) {
		toSerialize["statisticsDates"] = o.StatisticsDates
	}
	return toSerialize, nil
}

type NullableBlockStatisticsDetailType struct {
	value *BlockStatisticsDetailType
	isSet bool
}

func (v NullableBlockStatisticsDetailType) Get() *BlockStatisticsDetailType {
	return v.value
}

func (v *NullableBlockStatisticsDetailType) Set(val *BlockStatisticsDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatisticsDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatisticsDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatisticsDetailType(val *BlockStatisticsDetailType) *NullableBlockStatisticsDetailType {
	return &NullableBlockStatisticsDetailType{value: val, isSet: true}
}

func (v NullableBlockStatisticsDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatisticsDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


