/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ExternalIdType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalIdType{}

// ExternalIdType struct for ExternalIdType
type ExternalIdType struct {
	// This is the Interface Id of the System which sent/Received the Business Block
	ExternalSystem *string `json:"externalSystem,omitempty"`
	// Id on external system.
	ExternalId *string `json:"externalId,omitempty"`
}

// NewExternalIdType instantiates a new ExternalIdType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalIdType() *ExternalIdType {
	this := ExternalIdType{}
	return &this
}

// NewExternalIdTypeWithDefaults instantiates a new ExternalIdType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalIdTypeWithDefaults() *ExternalIdType {
	this := ExternalIdType{}
	return &this
}

// GetExternalSystem returns the ExternalSystem field value if set, zero value otherwise.
func (o *ExternalIdType) GetExternalSystem() string {
	if o == nil || IsNil(o.ExternalSystem) {
		var ret string
		return ret
	}
	return *o.ExternalSystem
}

// GetExternalSystemOk returns a tuple with the ExternalSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalIdType) GetExternalSystemOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalSystem) {
		return nil, false
	}
	return o.ExternalSystem, true
}

// HasExternalSystem returns a boolean if a field has been set.
func (o *ExternalIdType) HasExternalSystem() bool {
	if o != nil && !IsNil(o.ExternalSystem) {
		return true
	}

	return false
}

// SetExternalSystem gets a reference to the given string and assigns it to the ExternalSystem field.
func (o *ExternalIdType) SetExternalSystem(v string) {
	o.ExternalSystem = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ExternalIdType) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalIdType) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ExternalIdType) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ExternalIdType) SetExternalId(v string) {
	o.ExternalId = &v
}

func (o ExternalIdType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalIdType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalSystem) {
		toSerialize["externalSystem"] = o.ExternalSystem
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	return toSerialize, nil
}

type NullableExternalIdType struct {
	value *ExternalIdType
	isSet bool
}

func (v NullableExternalIdType) Get() *ExternalIdType {
	return v.value
}

func (v *NullableExternalIdType) Set(val *ExternalIdType) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalIdType) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalIdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalIdType(val *ExternalIdType) *NullableExternalIdType {
	return &NullableExternalIdType{value: val, isSet: true}
}

func (v NullableExternalIdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalIdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


