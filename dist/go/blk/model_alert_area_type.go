/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// AlertAreaType the model 'AlertAreaType'
type AlertAreaType string

// List of alertAreaType
const (
	ALERTAREATYPE_CHECK_IN AlertAreaType = "CheckIn"
	ALERTAREATYPE_CHECK_OUT AlertAreaType = "CheckOut"
	ALERTAREATYPE_RESERVATION AlertAreaType = "Reservation"
	ALERTAREATYPE_BILLING AlertAreaType = "Billing"
	ALERTAREATYPE_IN_HOUSE AlertAreaType = "InHouse"
)

// All allowed values of AlertAreaType enum
var AllowedAlertAreaTypeEnumValues = []AlertAreaType{
	"CheckIn",
	"CheckOut",
	"Reservation",
	"Billing",
	"InHouse",
}

func (v *AlertAreaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertAreaType(value)
	for _, existing := range AllowedAlertAreaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertAreaType", value)
}

// NewAlertAreaTypeFromValue returns a pointer to a valid AlertAreaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertAreaTypeFromValue(v string) (*AlertAreaType, error) {
	ev := AlertAreaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertAreaType: valid values are %v", v, AllowedAlertAreaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertAreaType) IsValid() bool {
	for _, existing := range AllowedAlertAreaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to alertAreaType value
func (v AlertAreaType) Ptr() *AlertAreaType {
	return &v
}

type NullableAlertAreaType struct {
	value *AlertAreaType
	isSet bool
}

func (v NullableAlertAreaType) Get() *AlertAreaType {
	return v.value
}

func (v *NullableAlertAreaType) Set(val *AlertAreaType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertAreaType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertAreaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertAreaType(val *AlertAreaType) *NullableAlertAreaType {
	return &NullableAlertAreaType{value: val, isSet: true}
}

func (v NullableAlertAreaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertAreaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

