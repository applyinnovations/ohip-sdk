/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockRestrictionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockRestrictionType{}

// BlockRestrictionType Restriction details for a block.
type BlockRestrictionType struct {
	RestrictionDate *TimeSpanDaysOfWeekType `json:"restrictionDate,omitempty"`
	// Room Type selected for the block restriction.
	RoomType *string `json:"roomType,omitempty"`
	BlockRestrictionStatus *RestrictionStatusType `json:"blockRestrictionStatus,omitempty"`
	ActualTimeSpan *TimeSpanType `json:"actualTimeSpan,omitempty"`
}

// NewBlockRestrictionType instantiates a new BlockRestrictionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockRestrictionType() *BlockRestrictionType {
	this := BlockRestrictionType{}
	return &this
}

// NewBlockRestrictionTypeWithDefaults instantiates a new BlockRestrictionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockRestrictionTypeWithDefaults() *BlockRestrictionType {
	this := BlockRestrictionType{}
	return &this
}

// GetRestrictionDate returns the RestrictionDate field value if set, zero value otherwise.
func (o *BlockRestrictionType) GetRestrictionDate() TimeSpanDaysOfWeekType {
	if o == nil || IsNil(o.RestrictionDate) {
		var ret TimeSpanDaysOfWeekType
		return ret
	}
	return *o.RestrictionDate
}

// GetRestrictionDateOk returns a tuple with the RestrictionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRestrictionType) GetRestrictionDateOk() (*TimeSpanDaysOfWeekType, bool) {
	if o == nil || IsNil(o.RestrictionDate) {
		return nil, false
	}
	return o.RestrictionDate, true
}

// HasRestrictionDate returns a boolean if a field has been set.
func (o *BlockRestrictionType) HasRestrictionDate() bool {
	if o != nil && !IsNil(o.RestrictionDate) {
		return true
	}

	return false
}

// SetRestrictionDate gets a reference to the given TimeSpanDaysOfWeekType and assigns it to the RestrictionDate field.
func (o *BlockRestrictionType) SetRestrictionDate(v TimeSpanDaysOfWeekType) {
	o.RestrictionDate = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *BlockRestrictionType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRestrictionType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *BlockRestrictionType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *BlockRestrictionType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetBlockRestrictionStatus returns the BlockRestrictionStatus field value if set, zero value otherwise.
func (o *BlockRestrictionType) GetBlockRestrictionStatus() RestrictionStatusType {
	if o == nil || IsNil(o.BlockRestrictionStatus) {
		var ret RestrictionStatusType
		return ret
	}
	return *o.BlockRestrictionStatus
}

// GetBlockRestrictionStatusOk returns a tuple with the BlockRestrictionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRestrictionType) GetBlockRestrictionStatusOk() (*RestrictionStatusType, bool) {
	if o == nil || IsNil(o.BlockRestrictionStatus) {
		return nil, false
	}
	return o.BlockRestrictionStatus, true
}

// HasBlockRestrictionStatus returns a boolean if a field has been set.
func (o *BlockRestrictionType) HasBlockRestrictionStatus() bool {
	if o != nil && !IsNil(o.BlockRestrictionStatus) {
		return true
	}

	return false
}

// SetBlockRestrictionStatus gets a reference to the given RestrictionStatusType and assigns it to the BlockRestrictionStatus field.
func (o *BlockRestrictionType) SetBlockRestrictionStatus(v RestrictionStatusType) {
	o.BlockRestrictionStatus = &v
}

// GetActualTimeSpan returns the ActualTimeSpan field value if set, zero value otherwise.
func (o *BlockRestrictionType) GetActualTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.ActualTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.ActualTimeSpan
}

// GetActualTimeSpanOk returns a tuple with the ActualTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockRestrictionType) GetActualTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.ActualTimeSpan) {
		return nil, false
	}
	return o.ActualTimeSpan, true
}

// HasActualTimeSpan returns a boolean if a field has been set.
func (o *BlockRestrictionType) HasActualTimeSpan() bool {
	if o != nil && !IsNil(o.ActualTimeSpan) {
		return true
	}

	return false
}

// SetActualTimeSpan gets a reference to the given TimeSpanType and assigns it to the ActualTimeSpan field.
func (o *BlockRestrictionType) SetActualTimeSpan(v TimeSpanType) {
	o.ActualTimeSpan = &v
}

func (o BlockRestrictionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockRestrictionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RestrictionDate) {
		toSerialize["restrictionDate"] = o.RestrictionDate
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.BlockRestrictionStatus) {
		toSerialize["blockRestrictionStatus"] = o.BlockRestrictionStatus
	}
	if !IsNil(o.ActualTimeSpan) {
		toSerialize["actualTimeSpan"] = o.ActualTimeSpan
	}
	return toSerialize, nil
}

type NullableBlockRestrictionType struct {
	value *BlockRestrictionType
	isSet bool
}

func (v NullableBlockRestrictionType) Get() *BlockRestrictionType {
	return v.value
}

func (v *NullableBlockRestrictionType) Set(val *BlockRestrictionType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRestrictionType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRestrictionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRestrictionType(val *BlockRestrictionType) *NullableBlockRestrictionType {
	return &NullableBlockRestrictionType{value: val, isSet: true}
}

func (v NullableBlockRestrictionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRestrictionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


