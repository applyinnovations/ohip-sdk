/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the AllocationGridByRoomTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllocationGridByRoomTypeType{}

// AllocationGridByRoomTypeType A collection of Allocation objects for a block defined by room type.
type AllocationGridByRoomTypeType struct {
	// Allocation objects for a block by date ranges.
	AllocationGridDates []AllocationGridByDateRangesType `json:"allocationGridDates,omitempty"`
	// Sell limits for a block by date ranges.
	SellLimitGridDates []SellLimitGridByDateRangeType `json:"sellLimitGridDates,omitempty"`
	// Indicates the room type of the Allocation objects.
	RoomType *string `json:"roomType,omitempty"`
}

// NewAllocationGridByRoomTypeType instantiates a new AllocationGridByRoomTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationGridByRoomTypeType() *AllocationGridByRoomTypeType {
	this := AllocationGridByRoomTypeType{}
	return &this
}

// NewAllocationGridByRoomTypeTypeWithDefaults instantiates a new AllocationGridByRoomTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationGridByRoomTypeTypeWithDefaults() *AllocationGridByRoomTypeType {
	this := AllocationGridByRoomTypeType{}
	return &this
}

// GetAllocationGridDates returns the AllocationGridDates field value if set, zero value otherwise.
func (o *AllocationGridByRoomTypeType) GetAllocationGridDates() []AllocationGridByDateRangesType {
	if o == nil || IsNil(o.AllocationGridDates) {
		var ret []AllocationGridByDateRangesType
		return ret
	}
	return o.AllocationGridDates
}

// GetAllocationGridDatesOk returns a tuple with the AllocationGridDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationGridByRoomTypeType) GetAllocationGridDatesOk() ([]AllocationGridByDateRangesType, bool) {
	if o == nil || IsNil(o.AllocationGridDates) {
		return nil, false
	}
	return o.AllocationGridDates, true
}

// HasAllocationGridDates returns a boolean if a field has been set.
func (o *AllocationGridByRoomTypeType) HasAllocationGridDates() bool {
	if o != nil && !IsNil(o.AllocationGridDates) {
		return true
	}

	return false
}

// SetAllocationGridDates gets a reference to the given []AllocationGridByDateRangesType and assigns it to the AllocationGridDates field.
func (o *AllocationGridByRoomTypeType) SetAllocationGridDates(v []AllocationGridByDateRangesType) {
	o.AllocationGridDates = v
}

// GetSellLimitGridDates returns the SellLimitGridDates field value if set, zero value otherwise.
func (o *AllocationGridByRoomTypeType) GetSellLimitGridDates() []SellLimitGridByDateRangeType {
	if o == nil || IsNil(o.SellLimitGridDates) {
		var ret []SellLimitGridByDateRangeType
		return ret
	}
	return o.SellLimitGridDates
}

// GetSellLimitGridDatesOk returns a tuple with the SellLimitGridDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationGridByRoomTypeType) GetSellLimitGridDatesOk() ([]SellLimitGridByDateRangeType, bool) {
	if o == nil || IsNil(o.SellLimitGridDates) {
		return nil, false
	}
	return o.SellLimitGridDates, true
}

// HasSellLimitGridDates returns a boolean if a field has been set.
func (o *AllocationGridByRoomTypeType) HasSellLimitGridDates() bool {
	if o != nil && !IsNil(o.SellLimitGridDates) {
		return true
	}

	return false
}

// SetSellLimitGridDates gets a reference to the given []SellLimitGridByDateRangeType and assigns it to the SellLimitGridDates field.
func (o *AllocationGridByRoomTypeType) SetSellLimitGridDates(v []SellLimitGridByDateRangeType) {
	o.SellLimitGridDates = v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *AllocationGridByRoomTypeType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocationGridByRoomTypeType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *AllocationGridByRoomTypeType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *AllocationGridByRoomTypeType) SetRoomType(v string) {
	o.RoomType = &v
}

func (o AllocationGridByRoomTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllocationGridByRoomTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocationGridDates) {
		toSerialize["allocationGridDates"] = o.AllocationGridDates
	}
	if !IsNil(o.SellLimitGridDates) {
		toSerialize["sellLimitGridDates"] = o.SellLimitGridDates
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

type NullableAllocationGridByRoomTypeType struct {
	value *AllocationGridByRoomTypeType
	isSet bool
}

func (v NullableAllocationGridByRoomTypeType) Get() *AllocationGridByRoomTypeType {
	return v.value
}

func (v *NullableAllocationGridByRoomTypeType) Set(val *AllocationGridByRoomTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationGridByRoomTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationGridByRoomTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationGridByRoomTypeType(val *AllocationGridByRoomTypeType) *NullableAllocationGridByRoomTypeType {
	return &NullableAllocationGridByRoomTypeType{value: val, isSet: true}
}

func (v NullableAllocationGridByRoomTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationGridByRoomTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


