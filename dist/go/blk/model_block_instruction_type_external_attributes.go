/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockInstructionTypeExternalAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockInstructionTypeExternalAttributes{}

// BlockInstructionTypeExternalAttributes Block attributes used for external systems. Only available if configured in OPERA Cloud.
type BlockInstructionTypeExternalAttributes struct {
	EventType *EventTypeType `json:"eventType,omitempty"`
	// Group IATA number validated by an external system and block can't be saved unless confirmed that GIID is valid. Only available if configured in OPERA Cloud.
	GIId *string `json:"gIId,omitempty"`
	// Only available if configured in OPERA Cloud.
	HousingProtected *bool `json:"housingProtected,omitempty"`
	// When this flag is set it will be used to roll Block End Date and Block Rate Program End Date in the night audit process. Only available if configured in OPERA Cloud.
	RollEndDate *bool `json:"rollEndDate,omitempty"`
}

// NewBlockInstructionTypeExternalAttributes instantiates a new BlockInstructionTypeExternalAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockInstructionTypeExternalAttributes() *BlockInstructionTypeExternalAttributes {
	this := BlockInstructionTypeExternalAttributes{}
	return &this
}

// NewBlockInstructionTypeExternalAttributesWithDefaults instantiates a new BlockInstructionTypeExternalAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockInstructionTypeExternalAttributesWithDefaults() *BlockInstructionTypeExternalAttributes {
	this := BlockInstructionTypeExternalAttributes{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *BlockInstructionTypeExternalAttributes) GetEventType() EventTypeType {
	if o == nil || IsNil(o.EventType) {
		var ret EventTypeType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionTypeExternalAttributes) GetEventTypeOk() (*EventTypeType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *BlockInstructionTypeExternalAttributes) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given EventTypeType and assigns it to the EventType field.
func (o *BlockInstructionTypeExternalAttributes) SetEventType(v EventTypeType) {
	o.EventType = &v
}

// GetGIId returns the GIId field value if set, zero value otherwise.
func (o *BlockInstructionTypeExternalAttributes) GetGIId() string {
	if o == nil || IsNil(o.GIId) {
		var ret string
		return ret
	}
	return *o.GIId
}

// GetGIIdOk returns a tuple with the GIId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionTypeExternalAttributes) GetGIIdOk() (*string, bool) {
	if o == nil || IsNil(o.GIId) {
		return nil, false
	}
	return o.GIId, true
}

// HasGIId returns a boolean if a field has been set.
func (o *BlockInstructionTypeExternalAttributes) HasGIId() bool {
	if o != nil && !IsNil(o.GIId) {
		return true
	}

	return false
}

// SetGIId gets a reference to the given string and assigns it to the GIId field.
func (o *BlockInstructionTypeExternalAttributes) SetGIId(v string) {
	o.GIId = &v
}

// GetHousingProtected returns the HousingProtected field value if set, zero value otherwise.
func (o *BlockInstructionTypeExternalAttributes) GetHousingProtected() bool {
	if o == nil || IsNil(o.HousingProtected) {
		var ret bool
		return ret
	}
	return *o.HousingProtected
}

// GetHousingProtectedOk returns a tuple with the HousingProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionTypeExternalAttributes) GetHousingProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.HousingProtected) {
		return nil, false
	}
	return o.HousingProtected, true
}

// HasHousingProtected returns a boolean if a field has been set.
func (o *BlockInstructionTypeExternalAttributes) HasHousingProtected() bool {
	if o != nil && !IsNil(o.HousingProtected) {
		return true
	}

	return false
}

// SetHousingProtected gets a reference to the given bool and assigns it to the HousingProtected field.
func (o *BlockInstructionTypeExternalAttributes) SetHousingProtected(v bool) {
	o.HousingProtected = &v
}

// GetRollEndDate returns the RollEndDate field value if set, zero value otherwise.
func (o *BlockInstructionTypeExternalAttributes) GetRollEndDate() bool {
	if o == nil || IsNil(o.RollEndDate) {
		var ret bool
		return ret
	}
	return *o.RollEndDate
}

// GetRollEndDateOk returns a tuple with the RollEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionTypeExternalAttributes) GetRollEndDateOk() (*bool, bool) {
	if o == nil || IsNil(o.RollEndDate) {
		return nil, false
	}
	return o.RollEndDate, true
}

// HasRollEndDate returns a boolean if a field has been set.
func (o *BlockInstructionTypeExternalAttributes) HasRollEndDate() bool {
	if o != nil && !IsNil(o.RollEndDate) {
		return true
	}

	return false
}

// SetRollEndDate gets a reference to the given bool and assigns it to the RollEndDate field.
func (o *BlockInstructionTypeExternalAttributes) SetRollEndDate(v bool) {
	o.RollEndDate = &v
}

func (o BlockInstructionTypeExternalAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockInstructionTypeExternalAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.GIId) {
		toSerialize["gIId"] = o.GIId
	}
	if !IsNil(o.HousingProtected) {
		toSerialize["housingProtected"] = o.HousingProtected
	}
	if !IsNil(o.RollEndDate) {
		toSerialize["rollEndDate"] = o.RollEndDate
	}
	return toSerialize, nil
}

type NullableBlockInstructionTypeExternalAttributes struct {
	value *BlockInstructionTypeExternalAttributes
	isSet bool
}

func (v NullableBlockInstructionTypeExternalAttributes) Get() *BlockInstructionTypeExternalAttributes {
	return v.value
}

func (v *NullableBlockInstructionTypeExternalAttributes) Set(val *BlockInstructionTypeExternalAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockInstructionTypeExternalAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockInstructionTypeExternalAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockInstructionTypeExternalAttributes(val *BlockInstructionTypeExternalAttributes) *NullableBlockInstructionTypeExternalAttributes {
	return &NullableBlockInstructionTypeExternalAttributes{value: val, isSet: true}
}

func (v NullableBlockInstructionTypeExternalAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockInstructionTypeExternalAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


