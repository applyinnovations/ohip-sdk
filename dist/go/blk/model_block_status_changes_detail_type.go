/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockStatusChangesDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockStatusChangesDetailType{}

// BlockStatusChangesDetailType struct for BlockStatusChangesDetailType
type BlockStatusChangesDetailType struct {
	// Change date for this block .
	ChangeDate *string `json:"changeDate,omitempty"`
	// Current Status for this block .
	CurrentStatus *string `json:"currentStatus,omitempty"`
	// Prior Status for this block .
	PriorStatus *string `json:"priorStatus,omitempty"`
	Revenue *RevenueSummaryType `json:"revenue,omitempty"`
	Rooms *RoomStatisticsType `json:"rooms,omitempty"`
	UserDetails *LogUserInfoType `json:"userDetails,omitempty"`
}

// NewBlockStatusChangesDetailType instantiates a new BlockStatusChangesDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockStatusChangesDetailType() *BlockStatusChangesDetailType {
	this := BlockStatusChangesDetailType{}
	return &this
}

// NewBlockStatusChangesDetailTypeWithDefaults instantiates a new BlockStatusChangesDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockStatusChangesDetailTypeWithDefaults() *BlockStatusChangesDetailType {
	this := BlockStatusChangesDetailType{}
	return &this
}

// GetChangeDate returns the ChangeDate field value if set, zero value otherwise.
func (o *BlockStatusChangesDetailType) GetChangeDate() string {
	if o == nil || IsNil(o.ChangeDate) {
		var ret string
		return ret
	}
	return *o.ChangeDate
}

// GetChangeDateOk returns a tuple with the ChangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusChangesDetailType) GetChangeDateOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeDate) {
		return nil, false
	}
	return o.ChangeDate, true
}

// HasChangeDate returns a boolean if a field has been set.
func (o *BlockStatusChangesDetailType) HasChangeDate() bool {
	if o != nil && !IsNil(o.ChangeDate) {
		return true
	}

	return false
}

// SetChangeDate gets a reference to the given string and assigns it to the ChangeDate field.
func (o *BlockStatusChangesDetailType) SetChangeDate(v string) {
	o.ChangeDate = &v
}

// GetCurrentStatus returns the CurrentStatus field value if set, zero value otherwise.
func (o *BlockStatusChangesDetailType) GetCurrentStatus() string {
	if o == nil || IsNil(o.CurrentStatus) {
		var ret string
		return ret
	}
	return *o.CurrentStatus
}

// GetCurrentStatusOk returns a tuple with the CurrentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusChangesDetailType) GetCurrentStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentStatus) {
		return nil, false
	}
	return o.CurrentStatus, true
}

// HasCurrentStatus returns a boolean if a field has been set.
func (o *BlockStatusChangesDetailType) HasCurrentStatus() bool {
	if o != nil && !IsNil(o.CurrentStatus) {
		return true
	}

	return false
}

// SetCurrentStatus gets a reference to the given string and assigns it to the CurrentStatus field.
func (o *BlockStatusChangesDetailType) SetCurrentStatus(v string) {
	o.CurrentStatus = &v
}

// GetPriorStatus returns the PriorStatus field value if set, zero value otherwise.
func (o *BlockStatusChangesDetailType) GetPriorStatus() string {
	if o == nil || IsNil(o.PriorStatus) {
		var ret string
		return ret
	}
	return *o.PriorStatus
}

// GetPriorStatusOk returns a tuple with the PriorStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusChangesDetailType) GetPriorStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PriorStatus) {
		return nil, false
	}
	return o.PriorStatus, true
}

// HasPriorStatus returns a boolean if a field has been set.
func (o *BlockStatusChangesDetailType) HasPriorStatus() bool {
	if o != nil && !IsNil(o.PriorStatus) {
		return true
	}

	return false
}

// SetPriorStatus gets a reference to the given string and assigns it to the PriorStatus field.
func (o *BlockStatusChangesDetailType) SetPriorStatus(v string) {
	o.PriorStatus = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *BlockStatusChangesDetailType) GetRevenue() RevenueSummaryType {
	if o == nil || IsNil(o.Revenue) {
		var ret RevenueSummaryType
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusChangesDetailType) GetRevenueOk() (*RevenueSummaryType, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *BlockStatusChangesDetailType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given RevenueSummaryType and assigns it to the Revenue field.
func (o *BlockStatusChangesDetailType) SetRevenue(v RevenueSummaryType) {
	o.Revenue = &v
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *BlockStatusChangesDetailType) GetRooms() RoomStatisticsType {
	if o == nil || IsNil(o.Rooms) {
		var ret RoomStatisticsType
		return ret
	}
	return *o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusChangesDetailType) GetRoomsOk() (*RoomStatisticsType, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *BlockStatusChangesDetailType) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given RoomStatisticsType and assigns it to the Rooms field.
func (o *BlockStatusChangesDetailType) SetRooms(v RoomStatisticsType) {
	o.Rooms = &v
}

// GetUserDetails returns the UserDetails field value if set, zero value otherwise.
func (o *BlockStatusChangesDetailType) GetUserDetails() LogUserInfoType {
	if o == nil || IsNil(o.UserDetails) {
		var ret LogUserInfoType
		return ret
	}
	return *o.UserDetails
}

// GetUserDetailsOk returns a tuple with the UserDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusChangesDetailType) GetUserDetailsOk() (*LogUserInfoType, bool) {
	if o == nil || IsNil(o.UserDetails) {
		return nil, false
	}
	return o.UserDetails, true
}

// HasUserDetails returns a boolean if a field has been set.
func (o *BlockStatusChangesDetailType) HasUserDetails() bool {
	if o != nil && !IsNil(o.UserDetails) {
		return true
	}

	return false
}

// SetUserDetails gets a reference to the given LogUserInfoType and assigns it to the UserDetails field.
func (o *BlockStatusChangesDetailType) SetUserDetails(v LogUserInfoType) {
	o.UserDetails = &v
}

func (o BlockStatusChangesDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockStatusChangesDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeDate) {
		toSerialize["changeDate"] = o.ChangeDate
	}
	if !IsNil(o.CurrentStatus) {
		toSerialize["currentStatus"] = o.CurrentStatus
	}
	if !IsNil(o.PriorStatus) {
		toSerialize["priorStatus"] = o.PriorStatus
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	if !IsNil(o.UserDetails) {
		toSerialize["userDetails"] = o.UserDetails
	}
	return toSerialize, nil
}

type NullableBlockStatusChangesDetailType struct {
	value *BlockStatusChangesDetailType
	isSet bool
}

func (v NullableBlockStatusChangesDetailType) Get() *BlockStatusChangesDetailType {
	return v.value
}

func (v *NullableBlockStatusChangesDetailType) Set(val *BlockStatusChangesDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatusChangesDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatusChangesDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatusChangesDetailType(val *BlockStatusChangesDetailType) *NullableBlockStatusChangesDetailType {
	return &NullableBlockStatusChangesDetailType{value: val, isSet: true}
}

func (v NullableBlockStatusChangesDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatusChangesDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


