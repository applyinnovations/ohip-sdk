/*
OPERA Cloud Block API

Testing BlockAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package blk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/blk"
)

func Test_blk_BlockAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlockAPIService ChangeRateOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.ChangeRateOverride(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService DeleteAlternateDates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.DeleteAlternateDates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService DeleteBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.DeleteBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService DeleteBlockAccessExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.DeleteBlockAccessExclusion(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService DeleteBlockAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attachId string
		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.DeleteBlockAttachment(context.Background(), attachId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService DeleteBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.DeleteBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService DeleteBlockRestriction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.DeleteBlockRestriction(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService DeleteBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.DeleteBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockAccessExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockAccessExclusion(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetBlockActivityLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockAttachments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockAttachments(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockAvailability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockAvailability(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockDailyStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetBlockDailyStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockPMReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockPMReservations(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockPMReservationsByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockPMReservationsByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockRangeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockRangeInfo(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockReservations(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockRestrictions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockRestrictions(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockRevenueChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockRevenueChanges(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockRoomTypes(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockRoomsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockRoomsStatus(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockStatistics(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockStatusChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockStatusChanges(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockWashInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetBlockWashInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.GetBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetBlocks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetDefaultBlockCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetDefaultBlockCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetInventoryToBorrow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetInventoryToBorrow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetNextBlockStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetNextBlockStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetRecentlyAccessedBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetRecentlyAccessedBlocks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetSalesAllowances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.GetSalesAllowances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService GetTracesByDateRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.GetTracesByDateRange(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostAlternateDates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PostAlternateDates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PostBlock(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PostBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostBlockPostingMaster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PostBlockPostingMaster(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostBlockRestriction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PostBlockRestriction(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostBlockValidate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.PostBlockValidate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PostBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostCancelBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PostCancelBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostCopyBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceBlockId string

		resp, httpRes, err := apiClient.BlockAPI.PostCopyBlock(context.Background(), sourceBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostRoomingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PostRoomingList(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostSubAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.PostSubAllocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostSubBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PostSubBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostSubBlockByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PostSubBlockByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PostTourSeries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PostTourSeries(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutAlternateDates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutAlternateDates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockAccessExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockAccessExclusion(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockAllocation(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockAllocationByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockAllocationByExtId(context.Background(), roomType, blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockAllocationRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockAllocationRange(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockAllocationRangeByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockAllocationRangeByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockAllocationWash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.PutBlockAllocationWash(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockCutoff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockCutoff(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockRates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockReservations(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockShift", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockShift(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockStatus(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockStatusByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockStatusByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockStatusToOpen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockStatusToOpen(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutCateringStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.BlockAPI.PutCateringStatus(context.Background(), eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutClearAllRestrictions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutClearAllRestrictions(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutContractDefaults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.PutContractDefaults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutInventory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.PutInventory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutReleasedInventory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockAPI.PutReleasedInventory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutRoomTypeOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockAPI.PutRoomTypeOrder(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockAPIService PutValidateBlockCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockCode string

		resp, httpRes, err := apiClient.BlockAPI.PutValidateBlockCode(context.Background(), blockCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
