/*
OPERA Cloud Block API

Testing BlockApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package blk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/blk"
)

func Test_blk_BlockApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlockApiService ChangeRateOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.ChangeRateOverride(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService DeleteAlternateDates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.DeleteAlternateDates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService DeleteBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.DeleteBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService DeleteBlockAccessExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.DeleteBlockAccessExclusion(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService DeleteBlockAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attachId string
		var blockId string

		resp, httpRes, err := apiClient.BlockApi.DeleteBlockAttachment(context.Background(), attachId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService DeleteBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.DeleteBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService DeleteBlockRestriction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.DeleteBlockRestriction(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService DeleteBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.DeleteBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockAccessExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockAccessExclusion(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetBlockActivityLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockAttachments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockAttachments(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockAvailability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockAvailability(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockDailyStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetBlockDailyStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockPMReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockPMReservations(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockPMReservationsByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockPMReservationsByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockRangeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockRangeInfo(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockReservations(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockRestrictions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockRestrictions(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockRevenueChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockRevenueChanges(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockRoomTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockRoomTypes(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockRoomsStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockRoomsStatus(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockStatistics(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockStatusChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockStatusChanges(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockWashInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetBlockWashInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetBlocks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetDefaultBlockCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetDefaultBlockCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetInventoryToBorrow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetInventoryToBorrow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetNextBlockStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetNextBlockStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetRecentlyAccessedBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetRecentlyAccessedBlocks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetSalesAllowances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetSalesAllowances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetTracesByDateRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetTracesByDateRange(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostAlternateDates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PostAlternateDates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PostBlock(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PostBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostBlockPostingMaster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PostBlockPostingMaster(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostBlockRestriction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PostBlockRestriction(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostBlockValidate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.PostBlockValidate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PostBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostCancelBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PostCancelBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostCopyBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceBlockId string

		resp, httpRes, err := apiClient.BlockApi.PostCopyBlock(context.Background(), sourceBlockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostRoomingList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PostRoomingList(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostSubAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.PostSubAllocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostSubBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PostSubBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostSubBlockByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PostSubBlockByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostTourSeries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PostTourSeries(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutAlternateDates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutAlternateDates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockAccessExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockAccessExclusion(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockAllocation(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockAllocationByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomType string
		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockAllocationByExtId(context.Background(), roomType, blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockAllocationRange", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockAllocationRange(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockAllocationRangeByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockAllocationRangeByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockAllocationWash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.PutBlockAllocationWash(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockCutoff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockCutoff(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockOwners(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockRates(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockReservations(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockShift", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockShift(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockStatus(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockStatusByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockStatusByExtId(context.Background(), blockExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockStatusToOpen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockStatusToOpen(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockWashSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockWashSchedules(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutCateringStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.BlockApi.PutCateringStatus(context.Background(), eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutClearAllRestrictions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutClearAllRestrictions(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutContractDefaults", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.PutContractDefaults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutInventory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.PutInventory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutReleasedInventory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.PutReleasedInventory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutRoomTypeOrder", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.PutRoomTypeOrder(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutValidateBlockCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockCode string

		resp, httpRes, err := apiClient.BlockApi.PutValidateBlockCode(context.Background(), blockCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
