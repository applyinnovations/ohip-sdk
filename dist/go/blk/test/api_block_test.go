/*
OPERA Cloud Block API

Testing BlockApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package blk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/blk"
)

func Test_blk_BlockApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BlockApiService GetBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockAvailability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockAvailability(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockDailyStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetBlockDailyStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockPMReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockPMReservations(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockRevenueChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockRevenueChanges(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlockStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.BlockApi.GetBlockStatistics(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService GetBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BlockApi.GetBlocks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PostBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PostBlock(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BlockApiService PutBlockAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.BlockApi.PutBlockAllocation(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
