/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// BlockRangeModeType Enumerates range operation modes.
type BlockRangeModeType string

// List of blockRangeModeType
const (
	BLOCKRANGEMODETYPE_CORE BlockRangeModeType = "Core"
	BLOCKRANGEMODETYPE_SHOULDER_START BlockRangeModeType = "ShoulderStart"
	BLOCKRANGEMODETYPE_SHOULDER_END BlockRangeModeType = "ShoulderEnd"
)

// All allowed values of BlockRangeModeType enum
var AllowedBlockRangeModeTypeEnumValues = []BlockRangeModeType{
	"Core",
	"ShoulderStart",
	"ShoulderEnd",
}

func (v *BlockRangeModeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockRangeModeType(value)
	for _, existing := range AllowedBlockRangeModeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockRangeModeType", value)
}

// NewBlockRangeModeTypeFromValue returns a pointer to a valid BlockRangeModeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockRangeModeTypeFromValue(v string) (*BlockRangeModeType, error) {
	ev := BlockRangeModeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockRangeModeType: valid values are %v", v, AllowedBlockRangeModeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockRangeModeType) IsValid() bool {
	for _, existing := range AllowedBlockRangeModeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to blockRangeModeType value
func (v BlockRangeModeType) Ptr() *BlockRangeModeType {
	return &v
}

type NullableBlockRangeModeType struct {
	value *BlockRangeModeType
	isSet bool
}

func (v NullableBlockRangeModeType) Get() *BlockRangeModeType {
	return v.value
}

func (v *NullableBlockRangeModeType) Set(val *BlockRangeModeType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockRangeModeType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockRangeModeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockRangeModeType(val *BlockRangeModeType) *NullableBlockRangeModeType {
	return &NullableBlockRangeModeType{value: val, isSet: true}
}

func (v NullableBlockRangeModeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockRangeModeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

