/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
	"fmt"
)

// RoomRateAvailReasonType Indicates the Room Rate is not available due to unavailability of enough items for the rate code.
type RoomRateAvailReasonType string

// List of roomRateAvailReasonType
const (
	ROOMRATEAVAILREASONTYPE_AVAILABLE RoomRateAvailReasonType = "Available"
	ROOMRATEAVAILREASONTYPE_RESTRICTED RoomRateAvailReasonType = "Restricted"
	ROOMRATEAVAILREASONTYPE_RESTRICTED_DUE_TO_INVENTORY RoomRateAvailReasonType = "RestrictedDueToInventory"
	ROOMRATEAVAILREASONTYPE_RESTRICTED_DUE_TO_OCCUPANCY RoomRateAvailReasonType = "RestrictedDueToOccupancy"
	ROOMRATEAVAILREASONTYPE_RESTRICTED_DUE_TO_ITEM_INVENTORY RoomRateAvailReasonType = "RestrictedDueToItemInventory"
)

// All allowed values of RoomRateAvailReasonType enum
var AllowedRoomRateAvailReasonTypeEnumValues = []RoomRateAvailReasonType{
	"Available",
	"Restricted",
	"RestrictedDueToInventory",
	"RestrictedDueToOccupancy",
	"RestrictedDueToItemInventory",
}

func (v *RoomRateAvailReasonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoomRateAvailReasonType(value)
	for _, existing := range AllowedRoomRateAvailReasonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoomRateAvailReasonType", value)
}

// NewRoomRateAvailReasonTypeFromValue returns a pointer to a valid RoomRateAvailReasonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoomRateAvailReasonTypeFromValue(v string) (*RoomRateAvailReasonType, error) {
	ev := RoomRateAvailReasonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoomRateAvailReasonType: valid values are %v", v, AllowedRoomRateAvailReasonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoomRateAvailReasonType) IsValid() bool {
	for _, existing := range AllowedRoomRateAvailReasonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roomRateAvailReasonType value
func (v RoomRateAvailReasonType) Ptr() *RoomRateAvailReasonType {
	return &v
}

type NullableRoomRateAvailReasonType struct {
	value *RoomRateAvailReasonType
	isSet bool
}

func (v NullableRoomRateAvailReasonType) Get() *RoomRateAvailReasonType {
	return v.value
}

func (v *NullableRoomRateAvailReasonType) Set(val *RoomRateAvailReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomRateAvailReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomRateAvailReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomRateAvailReasonType(val *RoomRateAvailReasonType) *NullableRoomRateAvailReasonType {
	return &NullableRoomRateAvailReasonType{value: val, isSet: true}
}

func (v NullableRoomRateAvailReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomRateAvailReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

