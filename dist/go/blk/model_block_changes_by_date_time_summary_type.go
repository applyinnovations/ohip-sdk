/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockChangesByDateTimeSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockChangesByDateTimeSummaryType{}

// BlockChangesByDateTimeSummaryType Block information for changed blocks by date time
type BlockChangesByDateTimeSummaryType struct {
	// The hotel code for changed block by date time.
	HotelId *string `json:"hotelId,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
	// The block code for changed block by date time.
	BlockCode *string `json:"blockCode,omitempty"`
	// List of external references.
	ExternalIdList []ExternalIdType `json:"externalIdList,omitempty"`
	// The start date for changed block by date time.
	StartDate *string `json:"startDate,omitempty"`
	// The end date for changed block by date time.
	EndDate *string `json:"endDate,omitempty"`
	// The booking status of the block.
	RoomStatus *string `json:"roomStatus,omitempty"`
	// Status of the block and all its events.
	CateringStatus *string `json:"cateringStatus,omitempty"`
	// Last change date and time for this block.
	LastChangeDateTime *string `json:"lastChangeDateTime,omitempty"`
	ActionType *TransactionActionEnumType `json:"actionType,omitempty"`
	// Indicates whether there are any catering events, linked to the business block, that have been changed, deleted, or created within the timeframe.
	EventsChanged *bool `json:"eventsChanged,omitempty"`
}

// NewBlockChangesByDateTimeSummaryType instantiates a new BlockChangesByDateTimeSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockChangesByDateTimeSummaryType() *BlockChangesByDateTimeSummaryType {
	this := BlockChangesByDateTimeSummaryType{}
	return &this
}

// NewBlockChangesByDateTimeSummaryTypeWithDefaults instantiates a new BlockChangesByDateTimeSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockChangesByDateTimeSummaryTypeWithDefaults() *BlockChangesByDateTimeSummaryType {
	this := BlockChangesByDateTimeSummaryType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockChangesByDateTimeSummaryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *BlockChangesByDateTimeSummaryType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *BlockChangesByDateTimeSummaryType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetExternalIdList returns the ExternalIdList field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetExternalIdList() []ExternalIdType {
	if o == nil || IsNil(o.ExternalIdList) {
		var ret []ExternalIdType
		return ret
	}
	return o.ExternalIdList
}

// GetExternalIdListOk returns a tuple with the ExternalIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetExternalIdListOk() ([]ExternalIdType, bool) {
	if o == nil || IsNil(o.ExternalIdList) {
		return nil, false
	}
	return o.ExternalIdList, true
}

// HasExternalIdList returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasExternalIdList() bool {
	if o != nil && !IsNil(o.ExternalIdList) {
		return true
	}

	return false
}

// SetExternalIdList gets a reference to the given []ExternalIdType and assigns it to the ExternalIdList field.
func (o *BlockChangesByDateTimeSummaryType) SetExternalIdList(v []ExternalIdType) {
	o.ExternalIdList = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BlockChangesByDateTimeSummaryType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BlockChangesByDateTimeSummaryType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetRoomStatus returns the RoomStatus field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetRoomStatus() string {
	if o == nil || IsNil(o.RoomStatus) {
		var ret string
		return ret
	}
	return *o.RoomStatus
}

// GetRoomStatusOk returns a tuple with the RoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetRoomStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RoomStatus) {
		return nil, false
	}
	return o.RoomStatus, true
}

// HasRoomStatus returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasRoomStatus() bool {
	if o != nil && !IsNil(o.RoomStatus) {
		return true
	}

	return false
}

// SetRoomStatus gets a reference to the given string and assigns it to the RoomStatus field.
func (o *BlockChangesByDateTimeSummaryType) SetRoomStatus(v string) {
	o.RoomStatus = &v
}

// GetCateringStatus returns the CateringStatus field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetCateringStatus() string {
	if o == nil || IsNil(o.CateringStatus) {
		var ret string
		return ret
	}
	return *o.CateringStatus
}

// GetCateringStatusOk returns a tuple with the CateringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetCateringStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CateringStatus) {
		return nil, false
	}
	return o.CateringStatus, true
}

// HasCateringStatus returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasCateringStatus() bool {
	if o != nil && !IsNil(o.CateringStatus) {
		return true
	}

	return false
}

// SetCateringStatus gets a reference to the given string and assigns it to the CateringStatus field.
func (o *BlockChangesByDateTimeSummaryType) SetCateringStatus(v string) {
	o.CateringStatus = &v
}

// GetLastChangeDateTime returns the LastChangeDateTime field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetLastChangeDateTime() string {
	if o == nil || IsNil(o.LastChangeDateTime) {
		var ret string
		return ret
	}
	return *o.LastChangeDateTime
}

// GetLastChangeDateTimeOk returns a tuple with the LastChangeDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetLastChangeDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastChangeDateTime) {
		return nil, false
	}
	return o.LastChangeDateTime, true
}

// HasLastChangeDateTime returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasLastChangeDateTime() bool {
	if o != nil && !IsNil(o.LastChangeDateTime) {
		return true
	}

	return false
}

// SetLastChangeDateTime gets a reference to the given string and assigns it to the LastChangeDateTime field.
func (o *BlockChangesByDateTimeSummaryType) SetLastChangeDateTime(v string) {
	o.LastChangeDateTime = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetActionType() TransactionActionEnumType {
	if o == nil || IsNil(o.ActionType) {
		var ret TransactionActionEnumType
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetActionTypeOk() (*TransactionActionEnumType, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given TransactionActionEnumType and assigns it to the ActionType field.
func (o *BlockChangesByDateTimeSummaryType) SetActionType(v TransactionActionEnumType) {
	o.ActionType = &v
}

// GetEventsChanged returns the EventsChanged field value if set, zero value otherwise.
func (o *BlockChangesByDateTimeSummaryType) GetEventsChanged() bool {
	if o == nil || IsNil(o.EventsChanged) {
		var ret bool
		return ret
	}
	return *o.EventsChanged
}

// GetEventsChangedOk returns a tuple with the EventsChanged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockChangesByDateTimeSummaryType) GetEventsChangedOk() (*bool, bool) {
	if o == nil || IsNil(o.EventsChanged) {
		return nil, false
	}
	return o.EventsChanged, true
}

// HasEventsChanged returns a boolean if a field has been set.
func (o *BlockChangesByDateTimeSummaryType) HasEventsChanged() bool {
	if o != nil && !IsNil(o.EventsChanged) {
		return true
	}

	return false
}

// SetEventsChanged gets a reference to the given bool and assigns it to the EventsChanged field.
func (o *BlockChangesByDateTimeSummaryType) SetEventsChanged(v bool) {
	o.EventsChanged = &v
}

func (o BlockChangesByDateTimeSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockChangesByDateTimeSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.ExternalIdList) {
		toSerialize["externalIdList"] = o.ExternalIdList
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.RoomStatus) {
		toSerialize["roomStatus"] = o.RoomStatus
	}
	if !IsNil(o.CateringStatus) {
		toSerialize["cateringStatus"] = o.CateringStatus
	}
	if !IsNil(o.LastChangeDateTime) {
		toSerialize["lastChangeDateTime"] = o.LastChangeDateTime
	}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.EventsChanged) {
		toSerialize["eventsChanged"] = o.EventsChanged
	}
	return toSerialize, nil
}

type NullableBlockChangesByDateTimeSummaryType struct {
	value *BlockChangesByDateTimeSummaryType
	isSet bool
}

func (v NullableBlockChangesByDateTimeSummaryType) Get() *BlockChangesByDateTimeSummaryType {
	return v.value
}

func (v *NullableBlockChangesByDateTimeSummaryType) Set(val *BlockChangesByDateTimeSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockChangesByDateTimeSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockChangesByDateTimeSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockChangesByDateTimeSummaryType(val *BlockChangesByDateTimeSummaryType) *NullableBlockChangesByDateTimeSummaryType {
	return &NullableBlockChangesByDateTimeSummaryType{value: val, isSet: true}
}

func (v NullableBlockChangesByDateTimeSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockChangesByDateTimeSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


