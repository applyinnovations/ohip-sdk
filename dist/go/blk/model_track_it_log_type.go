/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the TrackItLogType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackItLogType{}

// TrackItLogType Individual activity log related to the Track It ticket.
type TrackItLogType struct {
	BusinessDate *string `json:"businessDate,omitempty"`
	Description *string `json:"description,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	LogDate *string `json:"logDate,omitempty"`
	LogUserId *int32 `json:"logUserId,omitempty"`
	LogUserName *string `json:"logUserName,omitempty"`
	TrackItId *TrackItId `json:"trackItId,omitempty"`
	TrackItLogId *UniqueIDType `json:"trackItLogId,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewTrackItLogType instantiates a new TrackItLogType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackItLogType() *TrackItLogType {
	this := TrackItLogType{}
	return &this
}

// NewTrackItLogTypeWithDefaults instantiates a new TrackItLogType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackItLogTypeWithDefaults() *TrackItLogType {
	this := TrackItLogType{}
	return &this
}

// GetBusinessDate returns the BusinessDate field value if set, zero value otherwise.
func (o *TrackItLogType) GetBusinessDate() string {
	if o == nil || IsNil(o.BusinessDate) {
		var ret string
		return ret
	}
	return *o.BusinessDate
}

// GetBusinessDateOk returns a tuple with the BusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetBusinessDateOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessDate) {
		return nil, false
	}
	return o.BusinessDate, true
}

// HasBusinessDate returns a boolean if a field has been set.
func (o *TrackItLogType) HasBusinessDate() bool {
	if o != nil && !IsNil(o.BusinessDate) {
		return true
	}

	return false
}

// SetBusinessDate gets a reference to the given string and assigns it to the BusinessDate field.
func (o *TrackItLogType) SetBusinessDate(v string) {
	o.BusinessDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TrackItLogType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TrackItLogType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TrackItLogType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *TrackItLogType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *TrackItLogType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *TrackItLogType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogDate returns the LogDate field value if set, zero value otherwise.
func (o *TrackItLogType) GetLogDate() string {
	if o == nil || IsNil(o.LogDate) {
		var ret string
		return ret
	}
	return *o.LogDate
}

// GetLogDateOk returns a tuple with the LogDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetLogDateOk() (*string, bool) {
	if o == nil || IsNil(o.LogDate) {
		return nil, false
	}
	return o.LogDate, true
}

// HasLogDate returns a boolean if a field has been set.
func (o *TrackItLogType) HasLogDate() bool {
	if o != nil && !IsNil(o.LogDate) {
		return true
	}

	return false
}

// SetLogDate gets a reference to the given string and assigns it to the LogDate field.
func (o *TrackItLogType) SetLogDate(v string) {
	o.LogDate = &v
}

// GetLogUserId returns the LogUserId field value if set, zero value otherwise.
func (o *TrackItLogType) GetLogUserId() int32 {
	if o == nil || IsNil(o.LogUserId) {
		var ret int32
		return ret
	}
	return *o.LogUserId
}

// GetLogUserIdOk returns a tuple with the LogUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetLogUserIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LogUserId) {
		return nil, false
	}
	return o.LogUserId, true
}

// HasLogUserId returns a boolean if a field has been set.
func (o *TrackItLogType) HasLogUserId() bool {
	if o != nil && !IsNil(o.LogUserId) {
		return true
	}

	return false
}

// SetLogUserId gets a reference to the given int32 and assigns it to the LogUserId field.
func (o *TrackItLogType) SetLogUserId(v int32) {
	o.LogUserId = &v
}

// GetLogUserName returns the LogUserName field value if set, zero value otherwise.
func (o *TrackItLogType) GetLogUserName() string {
	if o == nil || IsNil(o.LogUserName) {
		var ret string
		return ret
	}
	return *o.LogUserName
}

// GetLogUserNameOk returns a tuple with the LogUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetLogUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.LogUserName) {
		return nil, false
	}
	return o.LogUserName, true
}

// HasLogUserName returns a boolean if a field has been set.
func (o *TrackItLogType) HasLogUserName() bool {
	if o != nil && !IsNil(o.LogUserName) {
		return true
	}

	return false
}

// SetLogUserName gets a reference to the given string and assigns it to the LogUserName field.
func (o *TrackItLogType) SetLogUserName(v string) {
	o.LogUserName = &v
}

// GetTrackItId returns the TrackItId field value if set, zero value otherwise.
func (o *TrackItLogType) GetTrackItId() TrackItId {
	if o == nil || IsNil(o.TrackItId) {
		var ret TrackItId
		return ret
	}
	return *o.TrackItId
}

// GetTrackItIdOk returns a tuple with the TrackItId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetTrackItIdOk() (*TrackItId, bool) {
	if o == nil || IsNil(o.TrackItId) {
		return nil, false
	}
	return o.TrackItId, true
}

// HasTrackItId returns a boolean if a field has been set.
func (o *TrackItLogType) HasTrackItId() bool {
	if o != nil && !IsNil(o.TrackItId) {
		return true
	}

	return false
}

// SetTrackItId gets a reference to the given TrackItId and assigns it to the TrackItId field.
func (o *TrackItLogType) SetTrackItId(v TrackItId) {
	o.TrackItId = &v
}

// GetTrackItLogId returns the TrackItLogId field value if set, zero value otherwise.
func (o *TrackItLogType) GetTrackItLogId() UniqueIDType {
	if o == nil || IsNil(o.TrackItLogId) {
		var ret UniqueIDType
		return ret
	}
	return *o.TrackItLogId
}

// GetTrackItLogIdOk returns a tuple with the TrackItLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetTrackItLogIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.TrackItLogId) {
		return nil, false
	}
	return o.TrackItLogId, true
}

// HasTrackItLogId returns a boolean if a field has been set.
func (o *TrackItLogType) HasTrackItLogId() bool {
	if o != nil && !IsNil(o.TrackItLogId) {
		return true
	}

	return false
}

// SetTrackItLogId gets a reference to the given UniqueIDType and assigns it to the TrackItLogId field.
func (o *TrackItLogType) SetTrackItLogId(v UniqueIDType) {
	o.TrackItLogId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TrackItLogType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackItLogType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TrackItLogType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TrackItLogType) SetType(v string) {
	o.Type = &v
}

func (o TrackItLogType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackItLogType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BusinessDate) {
		toSerialize["businessDate"] = o.BusinessDate
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.LogDate) {
		toSerialize["logDate"] = o.LogDate
	}
	if !IsNil(o.LogUserId) {
		toSerialize["logUserId"] = o.LogUserId
	}
	if !IsNil(o.LogUserName) {
		toSerialize["logUserName"] = o.LogUserName
	}
	if !IsNil(o.TrackItId) {
		toSerialize["trackItId"] = o.TrackItId
	}
	if !IsNil(o.TrackItLogId) {
		toSerialize["trackItLogId"] = o.TrackItLogId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableTrackItLogType struct {
	value *TrackItLogType
	isSet bool
}

func (v NullableTrackItLogType) Get() *TrackItLogType {
	return v.value
}

func (v *NullableTrackItLogType) Set(val *TrackItLogType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackItLogType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackItLogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackItLogType(val *TrackItLogType) *NullableTrackItLogType {
	return &NullableTrackItLogType{value: val, isSet: true}
}

func (v NullableTrackItLogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackItLogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


