/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the ResInventoryItemsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResInventoryItemsType{}

// ResInventoryItemsType Defines a collection of inventory items attached to a reservation.
type ResInventoryItemsType struct {
	// Inventory item attached to a reservation.
	Item []ResInventoryItemType `json:"item,omitempty"`
	// The Item Class ID which the item belongs to.
	ItemClassCode *string `json:"itemClassCode,omitempty"`
}

// NewResInventoryItemsType instantiates a new ResInventoryItemsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResInventoryItemsType() *ResInventoryItemsType {
	this := ResInventoryItemsType{}
	return &this
}

// NewResInventoryItemsTypeWithDefaults instantiates a new ResInventoryItemsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResInventoryItemsTypeWithDefaults() *ResInventoryItemsType {
	this := ResInventoryItemsType{}
	return &this
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *ResInventoryItemsType) GetItem() []ResInventoryItemType {
	if o == nil || IsNil(o.Item) {
		var ret []ResInventoryItemType
		return ret
	}
	return o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResInventoryItemsType) GetItemOk() ([]ResInventoryItemType, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *ResInventoryItemsType) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given []ResInventoryItemType and assigns it to the Item field.
func (o *ResInventoryItemsType) SetItem(v []ResInventoryItemType) {
	o.Item = v
}

// GetItemClassCode returns the ItemClassCode field value if set, zero value otherwise.
func (o *ResInventoryItemsType) GetItemClassCode() string {
	if o == nil || IsNil(o.ItemClassCode) {
		var ret string
		return ret
	}
	return *o.ItemClassCode
}

// GetItemClassCodeOk returns a tuple with the ItemClassCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResInventoryItemsType) GetItemClassCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemClassCode) {
		return nil, false
	}
	return o.ItemClassCode, true
}

// HasItemClassCode returns a boolean if a field has been set.
func (o *ResInventoryItemsType) HasItemClassCode() bool {
	if o != nil && !IsNil(o.ItemClassCode) {
		return true
	}

	return false
}

// SetItemClassCode gets a reference to the given string and assigns it to the ItemClassCode field.
func (o *ResInventoryItemsType) SetItemClassCode(v string) {
	o.ItemClassCode = &v
}

func (o ResInventoryItemsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResInventoryItemsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !IsNil(o.ItemClassCode) {
		toSerialize["itemClassCode"] = o.ItemClassCode
	}
	return toSerialize, nil
}

type NullableResInventoryItemsType struct {
	value *ResInventoryItemsType
	isSet bool
}

func (v NullableResInventoryItemsType) Get() *ResInventoryItemsType {
	return v.value
}

func (v *NullableResInventoryItemsType) Set(val *ResInventoryItemsType) {
	v.value = val
	v.isSet = true
}

func (v NullableResInventoryItemsType) IsSet() bool {
	return v.isSet
}

func (v *NullableResInventoryItemsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResInventoryItemsType(val *ResInventoryItemsType) *NullableResInventoryItemsType {
	return &NullableResInventoryItemsType{value: val, isSet: true}
}

func (v NullableResInventoryItemsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResInventoryItemsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


