/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BlockInstructionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockInstructionType{}

// BlockInstructionType Extended Block object to hold additional instructions along with the block. This should be used during create/update operations on a block.
type BlockInstructionType struct {
	// Unique Id that references an object uniquely in the system.
	BlockIdList []UniqueIDType `json:"blockIdList,omitempty"`
	// This type contains unique information of external reference.
	ExternalReferences []ExternalReferenceType `json:"externalReferences,omitempty"`
	BlockDetails *BlockDetailsType `json:"blockDetails,omitempty"`
	BlockOwners *BlockOwnersType `json:"blockOwners,omitempty"`
	MasterBlockInfo *MasterBlockInfoType `json:"masterBlockInfo,omitempty"`
	// A list of reservation policies.
	ReservationPolicies []ReservationPoliciesType `json:"reservationPolicies,omitempty"`
	ReservationDetails *BlockReservationDetailsType `json:"reservationDetails,omitempty"`
	Catering *CateringType `json:"catering,omitempty"`
	BlockProfiles *SubAllocationTypeBlockProfiles `json:"blockProfiles,omitempty"`
	// A Block Package represents a non-room product provided to guests. Block Pacakges may have associated inventory and charges.
	BlockPackages []BlockPackageType `json:"blockPackages,omitempty"`
	// Inventory item attached to a block.
	InventoryItems []BlockInventoryItemType `json:"inventoryItems,omitempty"`
	BlockStatistics *BlockStatisticsType `json:"blockStatistics,omitempty"`
	Comments *SubAllocationTypeComments `json:"comments,omitempty"`
	RoomAllocations *SubAllocationTypeRoomAllocations `json:"roomAllocations,omitempty"`
	UserDefinedFields *UserDefinedFieldsType `json:"userDefinedFields,omitempty"`
	// Collection of lamp indicators.
	BlockIndicators []IndicatorType `json:"blockIndicators,omitempty"`
	// List of Block traces.
	Traces []BlockTraceType `json:"traces,omitempty"`
	// Statistics summary information including Rooms Sold, Room Revenue, Food and Beverage Revenue, Average Room Rate,etc.
	Statistics []BlockStatisticsSummaryType `json:"statistics,omitempty"`
	BlockSecurity *SubAllocationTypeBlockSecurity `json:"blockSecurity,omitempty"`
	// Rate Program contains rate information required for block creation, like room pool, rate amount, market code, etc. Only available if configured in OPERA Cloud.
	RatePrograms []RateProgramType `json:"ratePrograms,omitempty"`
	ExternalAttributes *SubAllocationTypeExternalAttributes `json:"externalAttributes,omitempty"`
	GenericRoomAllocations *SubAllocationTypeGenericRoomAllocations `json:"genericRoomAllocations,omitempty"`
	// Alternate Date information for the Block.
	AlternateDates []BlockAlternateDateType `json:"alternateDates,omitempty"`
	SellMessages *SellMessageConfigsType `json:"sellMessages,omitempty"`
	// Attachment List.
	Attachments []AttachmentType `json:"attachments,omitempty"`
	// Wash Schedule attached to the block, which allows to release inventory based on selected wash schedule type.
	WashSchedules []BlockWashScheduleType `json:"washSchedules,omitempty"`
	Restrictions *BlockRestrictionsType `json:"restrictions,omitempty"`
	AccessExclusions *BlockAccessExclusionsType `json:"accessExclusions,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	// Indicates whether to update the linked activities or not. If true and primary block profile and owners information is updated, then all associated linked activities will be updated with the new information.
	UpdateLinkedActivities *bool `json:"updateLinkedActivities,omitempty"`
	// Mark this block as recently accessed.
	MarkAsRecentlyAccessed *bool `json:"markAsRecentlyAccessed,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
	ResponseInstructions *BlockInstructionTypeResponseInstructions `json:"responseInstructions,omitempty"`
}

// NewBlockInstructionType instantiates a new BlockInstructionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockInstructionType() *BlockInstructionType {
	this := BlockInstructionType{}
	return &this
}

// NewBlockInstructionTypeWithDefaults instantiates a new BlockInstructionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockInstructionTypeWithDefaults() *BlockInstructionType {
	this := BlockInstructionType{}
	return &this
}

// GetBlockIdList returns the BlockIdList field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockIdList() []UniqueIDType {
	if o == nil || IsNil(o.BlockIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.BlockIdList
}

// GetBlockIdListOk returns a tuple with the BlockIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.BlockIdList) {
		return nil, false
	}
	return o.BlockIdList, true
}

// HasBlockIdList returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockIdList() bool {
	if o != nil && !IsNil(o.BlockIdList) {
		return true
	}

	return false
}

// SetBlockIdList gets a reference to the given []UniqueIDType and assigns it to the BlockIdList field.
func (o *BlockInstructionType) SetBlockIdList(v []UniqueIDType) {
	o.BlockIdList = v
}

// GetExternalReferences returns the ExternalReferences field value if set, zero value otherwise.
func (o *BlockInstructionType) GetExternalReferences() []ExternalReferenceType {
	if o == nil || IsNil(o.ExternalReferences) {
		var ret []ExternalReferenceType
		return ret
	}
	return o.ExternalReferences
}

// GetExternalReferencesOk returns a tuple with the ExternalReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetExternalReferencesOk() ([]ExternalReferenceType, bool) {
	if o == nil || IsNil(o.ExternalReferences) {
		return nil, false
	}
	return o.ExternalReferences, true
}

// HasExternalReferences returns a boolean if a field has been set.
func (o *BlockInstructionType) HasExternalReferences() bool {
	if o != nil && !IsNil(o.ExternalReferences) {
		return true
	}

	return false
}

// SetExternalReferences gets a reference to the given []ExternalReferenceType and assigns it to the ExternalReferences field.
func (o *BlockInstructionType) SetExternalReferences(v []ExternalReferenceType) {
	o.ExternalReferences = v
}

// GetBlockDetails returns the BlockDetails field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockDetails() BlockDetailsType {
	if o == nil || IsNil(o.BlockDetails) {
		var ret BlockDetailsType
		return ret
	}
	return *o.BlockDetails
}

// GetBlockDetailsOk returns a tuple with the BlockDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockDetailsOk() (*BlockDetailsType, bool) {
	if o == nil || IsNil(o.BlockDetails) {
		return nil, false
	}
	return o.BlockDetails, true
}

// HasBlockDetails returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockDetails() bool {
	if o != nil && !IsNil(o.BlockDetails) {
		return true
	}

	return false
}

// SetBlockDetails gets a reference to the given BlockDetailsType and assigns it to the BlockDetails field.
func (o *BlockInstructionType) SetBlockDetails(v BlockDetailsType) {
	o.BlockDetails = &v
}

// GetBlockOwners returns the BlockOwners field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockOwners() BlockOwnersType {
	if o == nil || IsNil(o.BlockOwners) {
		var ret BlockOwnersType
		return ret
	}
	return *o.BlockOwners
}

// GetBlockOwnersOk returns a tuple with the BlockOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockOwnersOk() (*BlockOwnersType, bool) {
	if o == nil || IsNil(o.BlockOwners) {
		return nil, false
	}
	return o.BlockOwners, true
}

// HasBlockOwners returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockOwners() bool {
	if o != nil && !IsNil(o.BlockOwners) {
		return true
	}

	return false
}

// SetBlockOwners gets a reference to the given BlockOwnersType and assigns it to the BlockOwners field.
func (o *BlockInstructionType) SetBlockOwners(v BlockOwnersType) {
	o.BlockOwners = &v
}

// GetMasterBlockInfo returns the MasterBlockInfo field value if set, zero value otherwise.
func (o *BlockInstructionType) GetMasterBlockInfo() MasterBlockInfoType {
	if o == nil || IsNil(o.MasterBlockInfo) {
		var ret MasterBlockInfoType
		return ret
	}
	return *o.MasterBlockInfo
}

// GetMasterBlockInfoOk returns a tuple with the MasterBlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetMasterBlockInfoOk() (*MasterBlockInfoType, bool) {
	if o == nil || IsNil(o.MasterBlockInfo) {
		return nil, false
	}
	return o.MasterBlockInfo, true
}

// HasMasterBlockInfo returns a boolean if a field has been set.
func (o *BlockInstructionType) HasMasterBlockInfo() bool {
	if o != nil && !IsNil(o.MasterBlockInfo) {
		return true
	}

	return false
}

// SetMasterBlockInfo gets a reference to the given MasterBlockInfoType and assigns it to the MasterBlockInfo field.
func (o *BlockInstructionType) SetMasterBlockInfo(v MasterBlockInfoType) {
	o.MasterBlockInfo = &v
}

// GetReservationPolicies returns the ReservationPolicies field value if set, zero value otherwise.
func (o *BlockInstructionType) GetReservationPolicies() []ReservationPoliciesType {
	if o == nil || IsNil(o.ReservationPolicies) {
		var ret []ReservationPoliciesType
		return ret
	}
	return o.ReservationPolicies
}

// GetReservationPoliciesOk returns a tuple with the ReservationPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetReservationPoliciesOk() ([]ReservationPoliciesType, bool) {
	if o == nil || IsNil(o.ReservationPolicies) {
		return nil, false
	}
	return o.ReservationPolicies, true
}

// HasReservationPolicies returns a boolean if a field has been set.
func (o *BlockInstructionType) HasReservationPolicies() bool {
	if o != nil && !IsNil(o.ReservationPolicies) {
		return true
	}

	return false
}

// SetReservationPolicies gets a reference to the given []ReservationPoliciesType and assigns it to the ReservationPolicies field.
func (o *BlockInstructionType) SetReservationPolicies(v []ReservationPoliciesType) {
	o.ReservationPolicies = v
}

// GetReservationDetails returns the ReservationDetails field value if set, zero value otherwise.
func (o *BlockInstructionType) GetReservationDetails() BlockReservationDetailsType {
	if o == nil || IsNil(o.ReservationDetails) {
		var ret BlockReservationDetailsType
		return ret
	}
	return *o.ReservationDetails
}

// GetReservationDetailsOk returns a tuple with the ReservationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetReservationDetailsOk() (*BlockReservationDetailsType, bool) {
	if o == nil || IsNil(o.ReservationDetails) {
		return nil, false
	}
	return o.ReservationDetails, true
}

// HasReservationDetails returns a boolean if a field has been set.
func (o *BlockInstructionType) HasReservationDetails() bool {
	if o != nil && !IsNil(o.ReservationDetails) {
		return true
	}

	return false
}

// SetReservationDetails gets a reference to the given BlockReservationDetailsType and assigns it to the ReservationDetails field.
func (o *BlockInstructionType) SetReservationDetails(v BlockReservationDetailsType) {
	o.ReservationDetails = &v
}

// GetCatering returns the Catering field value if set, zero value otherwise.
func (o *BlockInstructionType) GetCatering() CateringType {
	if o == nil || IsNil(o.Catering) {
		var ret CateringType
		return ret
	}
	return *o.Catering
}

// GetCateringOk returns a tuple with the Catering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetCateringOk() (*CateringType, bool) {
	if o == nil || IsNil(o.Catering) {
		return nil, false
	}
	return o.Catering, true
}

// HasCatering returns a boolean if a field has been set.
func (o *BlockInstructionType) HasCatering() bool {
	if o != nil && !IsNil(o.Catering) {
		return true
	}

	return false
}

// SetCatering gets a reference to the given CateringType and assigns it to the Catering field.
func (o *BlockInstructionType) SetCatering(v CateringType) {
	o.Catering = &v
}

// GetBlockProfiles returns the BlockProfiles field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockProfiles() SubAllocationTypeBlockProfiles {
	if o == nil || IsNil(o.BlockProfiles) {
		var ret SubAllocationTypeBlockProfiles
		return ret
	}
	return *o.BlockProfiles
}

// GetBlockProfilesOk returns a tuple with the BlockProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockProfilesOk() (*SubAllocationTypeBlockProfiles, bool) {
	if o == nil || IsNil(o.BlockProfiles) {
		return nil, false
	}
	return o.BlockProfiles, true
}

// HasBlockProfiles returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockProfiles() bool {
	if o != nil && !IsNil(o.BlockProfiles) {
		return true
	}

	return false
}

// SetBlockProfiles gets a reference to the given SubAllocationTypeBlockProfiles and assigns it to the BlockProfiles field.
func (o *BlockInstructionType) SetBlockProfiles(v SubAllocationTypeBlockProfiles) {
	o.BlockProfiles = &v
}

// GetBlockPackages returns the BlockPackages field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockPackages() []BlockPackageType {
	if o == nil || IsNil(o.BlockPackages) {
		var ret []BlockPackageType
		return ret
	}
	return o.BlockPackages
}

// GetBlockPackagesOk returns a tuple with the BlockPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockPackagesOk() ([]BlockPackageType, bool) {
	if o == nil || IsNil(o.BlockPackages) {
		return nil, false
	}
	return o.BlockPackages, true
}

// HasBlockPackages returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockPackages() bool {
	if o != nil && !IsNil(o.BlockPackages) {
		return true
	}

	return false
}

// SetBlockPackages gets a reference to the given []BlockPackageType and assigns it to the BlockPackages field.
func (o *BlockInstructionType) SetBlockPackages(v []BlockPackageType) {
	o.BlockPackages = v
}

// GetInventoryItems returns the InventoryItems field value if set, zero value otherwise.
func (o *BlockInstructionType) GetInventoryItems() []BlockInventoryItemType {
	if o == nil || IsNil(o.InventoryItems) {
		var ret []BlockInventoryItemType
		return ret
	}
	return o.InventoryItems
}

// GetInventoryItemsOk returns a tuple with the InventoryItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetInventoryItemsOk() ([]BlockInventoryItemType, bool) {
	if o == nil || IsNil(o.InventoryItems) {
		return nil, false
	}
	return o.InventoryItems, true
}

// HasInventoryItems returns a boolean if a field has been set.
func (o *BlockInstructionType) HasInventoryItems() bool {
	if o != nil && !IsNil(o.InventoryItems) {
		return true
	}

	return false
}

// SetInventoryItems gets a reference to the given []BlockInventoryItemType and assigns it to the InventoryItems field.
func (o *BlockInstructionType) SetInventoryItems(v []BlockInventoryItemType) {
	o.InventoryItems = v
}

// GetBlockStatistics returns the BlockStatistics field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockStatistics() BlockStatisticsType {
	if o == nil || IsNil(o.BlockStatistics) {
		var ret BlockStatisticsType
		return ret
	}
	return *o.BlockStatistics
}

// GetBlockStatisticsOk returns a tuple with the BlockStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockStatisticsOk() (*BlockStatisticsType, bool) {
	if o == nil || IsNil(o.BlockStatistics) {
		return nil, false
	}
	return o.BlockStatistics, true
}

// HasBlockStatistics returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockStatistics() bool {
	if o != nil && !IsNil(o.BlockStatistics) {
		return true
	}

	return false
}

// SetBlockStatistics gets a reference to the given BlockStatisticsType and assigns it to the BlockStatistics field.
func (o *BlockInstructionType) SetBlockStatistics(v BlockStatisticsType) {
	o.BlockStatistics = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *BlockInstructionType) GetComments() SubAllocationTypeComments {
	if o == nil || IsNil(o.Comments) {
		var ret SubAllocationTypeComments
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetCommentsOk() (*SubAllocationTypeComments, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *BlockInstructionType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given SubAllocationTypeComments and assigns it to the Comments field.
func (o *BlockInstructionType) SetComments(v SubAllocationTypeComments) {
	o.Comments = &v
}

// GetRoomAllocations returns the RoomAllocations field value if set, zero value otherwise.
func (o *BlockInstructionType) GetRoomAllocations() SubAllocationTypeRoomAllocations {
	if o == nil || IsNil(o.RoomAllocations) {
		var ret SubAllocationTypeRoomAllocations
		return ret
	}
	return *o.RoomAllocations
}

// GetRoomAllocationsOk returns a tuple with the RoomAllocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetRoomAllocationsOk() (*SubAllocationTypeRoomAllocations, bool) {
	if o == nil || IsNil(o.RoomAllocations) {
		return nil, false
	}
	return o.RoomAllocations, true
}

// HasRoomAllocations returns a boolean if a field has been set.
func (o *BlockInstructionType) HasRoomAllocations() bool {
	if o != nil && !IsNil(o.RoomAllocations) {
		return true
	}

	return false
}

// SetRoomAllocations gets a reference to the given SubAllocationTypeRoomAllocations and assigns it to the RoomAllocations field.
func (o *BlockInstructionType) SetRoomAllocations(v SubAllocationTypeRoomAllocations) {
	o.RoomAllocations = &v
}

// GetUserDefinedFields returns the UserDefinedFields field value if set, zero value otherwise.
func (o *BlockInstructionType) GetUserDefinedFields() UserDefinedFieldsType {
	if o == nil || IsNil(o.UserDefinedFields) {
		var ret UserDefinedFieldsType
		return ret
	}
	return *o.UserDefinedFields
}

// GetUserDefinedFieldsOk returns a tuple with the UserDefinedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetUserDefinedFieldsOk() (*UserDefinedFieldsType, bool) {
	if o == nil || IsNil(o.UserDefinedFields) {
		return nil, false
	}
	return o.UserDefinedFields, true
}

// HasUserDefinedFields returns a boolean if a field has been set.
func (o *BlockInstructionType) HasUserDefinedFields() bool {
	if o != nil && !IsNil(o.UserDefinedFields) {
		return true
	}

	return false
}

// SetUserDefinedFields gets a reference to the given UserDefinedFieldsType and assigns it to the UserDefinedFields field.
func (o *BlockInstructionType) SetUserDefinedFields(v UserDefinedFieldsType) {
	o.UserDefinedFields = &v
}

// GetBlockIndicators returns the BlockIndicators field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockIndicators() []IndicatorType {
	if o == nil || IsNil(o.BlockIndicators) {
		var ret []IndicatorType
		return ret
	}
	return o.BlockIndicators
}

// GetBlockIndicatorsOk returns a tuple with the BlockIndicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockIndicatorsOk() ([]IndicatorType, bool) {
	if o == nil || IsNil(o.BlockIndicators) {
		return nil, false
	}
	return o.BlockIndicators, true
}

// HasBlockIndicators returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockIndicators() bool {
	if o != nil && !IsNil(o.BlockIndicators) {
		return true
	}

	return false
}

// SetBlockIndicators gets a reference to the given []IndicatorType and assigns it to the BlockIndicators field.
func (o *BlockInstructionType) SetBlockIndicators(v []IndicatorType) {
	o.BlockIndicators = v
}

// GetTraces returns the Traces field value if set, zero value otherwise.
func (o *BlockInstructionType) GetTraces() []BlockTraceType {
	if o == nil || IsNil(o.Traces) {
		var ret []BlockTraceType
		return ret
	}
	return o.Traces
}

// GetTracesOk returns a tuple with the Traces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetTracesOk() ([]BlockTraceType, bool) {
	if o == nil || IsNil(o.Traces) {
		return nil, false
	}
	return o.Traces, true
}

// HasTraces returns a boolean if a field has been set.
func (o *BlockInstructionType) HasTraces() bool {
	if o != nil && !IsNil(o.Traces) {
		return true
	}

	return false
}

// SetTraces gets a reference to the given []BlockTraceType and assigns it to the Traces field.
func (o *BlockInstructionType) SetTraces(v []BlockTraceType) {
	o.Traces = v
}

// GetStatistics returns the Statistics field value if set, zero value otherwise.
func (o *BlockInstructionType) GetStatistics() []BlockStatisticsSummaryType {
	if o == nil || IsNil(o.Statistics) {
		var ret []BlockStatisticsSummaryType
		return ret
	}
	return o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetStatisticsOk() ([]BlockStatisticsSummaryType, bool) {
	if o == nil || IsNil(o.Statistics) {
		return nil, false
	}
	return o.Statistics, true
}

// HasStatistics returns a boolean if a field has been set.
func (o *BlockInstructionType) HasStatistics() bool {
	if o != nil && !IsNil(o.Statistics) {
		return true
	}

	return false
}

// SetStatistics gets a reference to the given []BlockStatisticsSummaryType and assigns it to the Statistics field.
func (o *BlockInstructionType) SetStatistics(v []BlockStatisticsSummaryType) {
	o.Statistics = v
}

// GetBlockSecurity returns the BlockSecurity field value if set, zero value otherwise.
func (o *BlockInstructionType) GetBlockSecurity() SubAllocationTypeBlockSecurity {
	if o == nil || IsNil(o.BlockSecurity) {
		var ret SubAllocationTypeBlockSecurity
		return ret
	}
	return *o.BlockSecurity
}

// GetBlockSecurityOk returns a tuple with the BlockSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetBlockSecurityOk() (*SubAllocationTypeBlockSecurity, bool) {
	if o == nil || IsNil(o.BlockSecurity) {
		return nil, false
	}
	return o.BlockSecurity, true
}

// HasBlockSecurity returns a boolean if a field has been set.
func (o *BlockInstructionType) HasBlockSecurity() bool {
	if o != nil && !IsNil(o.BlockSecurity) {
		return true
	}

	return false
}

// SetBlockSecurity gets a reference to the given SubAllocationTypeBlockSecurity and assigns it to the BlockSecurity field.
func (o *BlockInstructionType) SetBlockSecurity(v SubAllocationTypeBlockSecurity) {
	o.BlockSecurity = &v
}

// GetRatePrograms returns the RatePrograms field value if set, zero value otherwise.
func (o *BlockInstructionType) GetRatePrograms() []RateProgramType {
	if o == nil || IsNil(o.RatePrograms) {
		var ret []RateProgramType
		return ret
	}
	return o.RatePrograms
}

// GetRateProgramsOk returns a tuple with the RatePrograms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetRateProgramsOk() ([]RateProgramType, bool) {
	if o == nil || IsNil(o.RatePrograms) {
		return nil, false
	}
	return o.RatePrograms, true
}

// HasRatePrograms returns a boolean if a field has been set.
func (o *BlockInstructionType) HasRatePrograms() bool {
	if o != nil && !IsNil(o.RatePrograms) {
		return true
	}

	return false
}

// SetRatePrograms gets a reference to the given []RateProgramType and assigns it to the RatePrograms field.
func (o *BlockInstructionType) SetRatePrograms(v []RateProgramType) {
	o.RatePrograms = v
}

// GetExternalAttributes returns the ExternalAttributes field value if set, zero value otherwise.
func (o *BlockInstructionType) GetExternalAttributes() SubAllocationTypeExternalAttributes {
	if o == nil || IsNil(o.ExternalAttributes) {
		var ret SubAllocationTypeExternalAttributes
		return ret
	}
	return *o.ExternalAttributes
}

// GetExternalAttributesOk returns a tuple with the ExternalAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetExternalAttributesOk() (*SubAllocationTypeExternalAttributes, bool) {
	if o == nil || IsNil(o.ExternalAttributes) {
		return nil, false
	}
	return o.ExternalAttributes, true
}

// HasExternalAttributes returns a boolean if a field has been set.
func (o *BlockInstructionType) HasExternalAttributes() bool {
	if o != nil && !IsNil(o.ExternalAttributes) {
		return true
	}

	return false
}

// SetExternalAttributes gets a reference to the given SubAllocationTypeExternalAttributes and assigns it to the ExternalAttributes field.
func (o *BlockInstructionType) SetExternalAttributes(v SubAllocationTypeExternalAttributes) {
	o.ExternalAttributes = &v
}

// GetGenericRoomAllocations returns the GenericRoomAllocations field value if set, zero value otherwise.
func (o *BlockInstructionType) GetGenericRoomAllocations() SubAllocationTypeGenericRoomAllocations {
	if o == nil || IsNil(o.GenericRoomAllocations) {
		var ret SubAllocationTypeGenericRoomAllocations
		return ret
	}
	return *o.GenericRoomAllocations
}

// GetGenericRoomAllocationsOk returns a tuple with the GenericRoomAllocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetGenericRoomAllocationsOk() (*SubAllocationTypeGenericRoomAllocations, bool) {
	if o == nil || IsNil(o.GenericRoomAllocations) {
		return nil, false
	}
	return o.GenericRoomAllocations, true
}

// HasGenericRoomAllocations returns a boolean if a field has been set.
func (o *BlockInstructionType) HasGenericRoomAllocations() bool {
	if o != nil && !IsNil(o.GenericRoomAllocations) {
		return true
	}

	return false
}

// SetGenericRoomAllocations gets a reference to the given SubAllocationTypeGenericRoomAllocations and assigns it to the GenericRoomAllocations field.
func (o *BlockInstructionType) SetGenericRoomAllocations(v SubAllocationTypeGenericRoomAllocations) {
	o.GenericRoomAllocations = &v
}

// GetAlternateDates returns the AlternateDates field value if set, zero value otherwise.
func (o *BlockInstructionType) GetAlternateDates() []BlockAlternateDateType {
	if o == nil || IsNil(o.AlternateDates) {
		var ret []BlockAlternateDateType
		return ret
	}
	return o.AlternateDates
}

// GetAlternateDatesOk returns a tuple with the AlternateDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetAlternateDatesOk() ([]BlockAlternateDateType, bool) {
	if o == nil || IsNil(o.AlternateDates) {
		return nil, false
	}
	return o.AlternateDates, true
}

// HasAlternateDates returns a boolean if a field has been set.
func (o *BlockInstructionType) HasAlternateDates() bool {
	if o != nil && !IsNil(o.AlternateDates) {
		return true
	}

	return false
}

// SetAlternateDates gets a reference to the given []BlockAlternateDateType and assigns it to the AlternateDates field.
func (o *BlockInstructionType) SetAlternateDates(v []BlockAlternateDateType) {
	o.AlternateDates = v
}

// GetSellMessages returns the SellMessages field value if set, zero value otherwise.
func (o *BlockInstructionType) GetSellMessages() SellMessageConfigsType {
	if o == nil || IsNil(o.SellMessages) {
		var ret SellMessageConfigsType
		return ret
	}
	return *o.SellMessages
}

// GetSellMessagesOk returns a tuple with the SellMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetSellMessagesOk() (*SellMessageConfigsType, bool) {
	if o == nil || IsNil(o.SellMessages) {
		return nil, false
	}
	return o.SellMessages, true
}

// HasSellMessages returns a boolean if a field has been set.
func (o *BlockInstructionType) HasSellMessages() bool {
	if o != nil && !IsNil(o.SellMessages) {
		return true
	}

	return false
}

// SetSellMessages gets a reference to the given SellMessageConfigsType and assigns it to the SellMessages field.
func (o *BlockInstructionType) SetSellMessages(v SellMessageConfigsType) {
	o.SellMessages = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *BlockInstructionType) GetAttachments() []AttachmentType {
	if o == nil || IsNil(o.Attachments) {
		var ret []AttachmentType
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetAttachmentsOk() ([]AttachmentType, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *BlockInstructionType) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []AttachmentType and assigns it to the Attachments field.
func (o *BlockInstructionType) SetAttachments(v []AttachmentType) {
	o.Attachments = v
}

// GetWashSchedules returns the WashSchedules field value if set, zero value otherwise.
func (o *BlockInstructionType) GetWashSchedules() []BlockWashScheduleType {
	if o == nil || IsNil(o.WashSchedules) {
		var ret []BlockWashScheduleType
		return ret
	}
	return o.WashSchedules
}

// GetWashSchedulesOk returns a tuple with the WashSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetWashSchedulesOk() ([]BlockWashScheduleType, bool) {
	if o == nil || IsNil(o.WashSchedules) {
		return nil, false
	}
	return o.WashSchedules, true
}

// HasWashSchedules returns a boolean if a field has been set.
func (o *BlockInstructionType) HasWashSchedules() bool {
	if o != nil && !IsNil(o.WashSchedules) {
		return true
	}

	return false
}

// SetWashSchedules gets a reference to the given []BlockWashScheduleType and assigns it to the WashSchedules field.
func (o *BlockInstructionType) SetWashSchedules(v []BlockWashScheduleType) {
	o.WashSchedules = v
}

// GetRestrictions returns the Restrictions field value if set, zero value otherwise.
func (o *BlockInstructionType) GetRestrictions() BlockRestrictionsType {
	if o == nil || IsNil(o.Restrictions) {
		var ret BlockRestrictionsType
		return ret
	}
	return *o.Restrictions
}

// GetRestrictionsOk returns a tuple with the Restrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetRestrictionsOk() (*BlockRestrictionsType, bool) {
	if o == nil || IsNil(o.Restrictions) {
		return nil, false
	}
	return o.Restrictions, true
}

// HasRestrictions returns a boolean if a field has been set.
func (o *BlockInstructionType) HasRestrictions() bool {
	if o != nil && !IsNil(o.Restrictions) {
		return true
	}

	return false
}

// SetRestrictions gets a reference to the given BlockRestrictionsType and assigns it to the Restrictions field.
func (o *BlockInstructionType) SetRestrictions(v BlockRestrictionsType) {
	o.Restrictions = &v
}

// GetAccessExclusions returns the AccessExclusions field value if set, zero value otherwise.
func (o *BlockInstructionType) GetAccessExclusions() BlockAccessExclusionsType {
	if o == nil || IsNil(o.AccessExclusions) {
		var ret BlockAccessExclusionsType
		return ret
	}
	return *o.AccessExclusions
}

// GetAccessExclusionsOk returns a tuple with the AccessExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetAccessExclusionsOk() (*BlockAccessExclusionsType, bool) {
	if o == nil || IsNil(o.AccessExclusions) {
		return nil, false
	}
	return o.AccessExclusions, true
}

// HasAccessExclusions returns a boolean if a field has been set.
func (o *BlockInstructionType) HasAccessExclusions() bool {
	if o != nil && !IsNil(o.AccessExclusions) {
		return true
	}

	return false
}

// SetAccessExclusions gets a reference to the given BlockAccessExclusionsType and assigns it to the AccessExclusions field.
func (o *BlockInstructionType) SetAccessExclusions(v BlockAccessExclusionsType) {
	o.AccessExclusions = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockInstructionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockInstructionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockInstructionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetUpdateLinkedActivities returns the UpdateLinkedActivities field value if set, zero value otherwise.
func (o *BlockInstructionType) GetUpdateLinkedActivities() bool {
	if o == nil || IsNil(o.UpdateLinkedActivities) {
		var ret bool
		return ret
	}
	return *o.UpdateLinkedActivities
}

// GetUpdateLinkedActivitiesOk returns a tuple with the UpdateLinkedActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetUpdateLinkedActivitiesOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateLinkedActivities) {
		return nil, false
	}
	return o.UpdateLinkedActivities, true
}

// HasUpdateLinkedActivities returns a boolean if a field has been set.
func (o *BlockInstructionType) HasUpdateLinkedActivities() bool {
	if o != nil && !IsNil(o.UpdateLinkedActivities) {
		return true
	}

	return false
}

// SetUpdateLinkedActivities gets a reference to the given bool and assigns it to the UpdateLinkedActivities field.
func (o *BlockInstructionType) SetUpdateLinkedActivities(v bool) {
	o.UpdateLinkedActivities = &v
}

// GetMarkAsRecentlyAccessed returns the MarkAsRecentlyAccessed field value if set, zero value otherwise.
func (o *BlockInstructionType) GetMarkAsRecentlyAccessed() bool {
	if o == nil || IsNil(o.MarkAsRecentlyAccessed) {
		var ret bool
		return ret
	}
	return *o.MarkAsRecentlyAccessed
}

// GetMarkAsRecentlyAccessedOk returns a tuple with the MarkAsRecentlyAccessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetMarkAsRecentlyAccessedOk() (*bool, bool) {
	if o == nil || IsNil(o.MarkAsRecentlyAccessed) {
		return nil, false
	}
	return o.MarkAsRecentlyAccessed, true
}

// HasMarkAsRecentlyAccessed returns a boolean if a field has been set.
func (o *BlockInstructionType) HasMarkAsRecentlyAccessed() bool {
	if o != nil && !IsNil(o.MarkAsRecentlyAccessed) {
		return true
	}

	return false
}

// SetMarkAsRecentlyAccessed gets a reference to the given bool and assigns it to the MarkAsRecentlyAccessed field.
func (o *BlockInstructionType) SetMarkAsRecentlyAccessed(v bool) {
	o.MarkAsRecentlyAccessed = &v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *BlockInstructionType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *BlockInstructionType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *BlockInstructionType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *BlockInstructionType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *BlockInstructionType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *BlockInstructionType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *BlockInstructionType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *BlockInstructionType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *BlockInstructionType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *BlockInstructionType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *BlockInstructionType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *BlockInstructionType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *BlockInstructionType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *BlockInstructionType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *BlockInstructionType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

// GetResponseInstructions returns the ResponseInstructions field value if set, zero value otherwise.
func (o *BlockInstructionType) GetResponseInstructions() BlockInstructionTypeResponseInstructions {
	if o == nil || IsNil(o.ResponseInstructions) {
		var ret BlockInstructionTypeResponseInstructions
		return ret
	}
	return *o.ResponseInstructions
}

// GetResponseInstructionsOk returns a tuple with the ResponseInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInstructionType) GetResponseInstructionsOk() (*BlockInstructionTypeResponseInstructions, bool) {
	if o == nil || IsNil(o.ResponseInstructions) {
		return nil, false
	}
	return o.ResponseInstructions, true
}

// HasResponseInstructions returns a boolean if a field has been set.
func (o *BlockInstructionType) HasResponseInstructions() bool {
	if o != nil && !IsNil(o.ResponseInstructions) {
		return true
	}

	return false
}

// SetResponseInstructions gets a reference to the given BlockInstructionTypeResponseInstructions and assigns it to the ResponseInstructions field.
func (o *BlockInstructionType) SetResponseInstructions(v BlockInstructionTypeResponseInstructions) {
	o.ResponseInstructions = &v
}

func (o BlockInstructionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockInstructionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockIdList) {
		toSerialize["blockIdList"] = o.BlockIdList
	}
	if !IsNil(o.ExternalReferences) {
		toSerialize["externalReferences"] = o.ExternalReferences
	}
	if !IsNil(o.BlockDetails) {
		toSerialize["blockDetails"] = o.BlockDetails
	}
	if !IsNil(o.BlockOwners) {
		toSerialize["blockOwners"] = o.BlockOwners
	}
	if !IsNil(o.MasterBlockInfo) {
		toSerialize["masterBlockInfo"] = o.MasterBlockInfo
	}
	if !IsNil(o.ReservationPolicies) {
		toSerialize["reservationPolicies"] = o.ReservationPolicies
	}
	if !IsNil(o.ReservationDetails) {
		toSerialize["reservationDetails"] = o.ReservationDetails
	}
	if !IsNil(o.Catering) {
		toSerialize["catering"] = o.Catering
	}
	if !IsNil(o.BlockProfiles) {
		toSerialize["blockProfiles"] = o.BlockProfiles
	}
	if !IsNil(o.BlockPackages) {
		toSerialize["blockPackages"] = o.BlockPackages
	}
	if !IsNil(o.InventoryItems) {
		toSerialize["inventoryItems"] = o.InventoryItems
	}
	if !IsNil(o.BlockStatistics) {
		toSerialize["blockStatistics"] = o.BlockStatistics
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.RoomAllocations) {
		toSerialize["roomAllocations"] = o.RoomAllocations
	}
	if !IsNil(o.UserDefinedFields) {
		toSerialize["userDefinedFields"] = o.UserDefinedFields
	}
	if !IsNil(o.BlockIndicators) {
		toSerialize["blockIndicators"] = o.BlockIndicators
	}
	if !IsNil(o.Traces) {
		toSerialize["traces"] = o.Traces
	}
	if !IsNil(o.Statistics) {
		toSerialize["statistics"] = o.Statistics
	}
	if !IsNil(o.BlockSecurity) {
		toSerialize["blockSecurity"] = o.BlockSecurity
	}
	if !IsNil(o.RatePrograms) {
		toSerialize["ratePrograms"] = o.RatePrograms
	}
	if !IsNil(o.ExternalAttributes) {
		toSerialize["externalAttributes"] = o.ExternalAttributes
	}
	if !IsNil(o.GenericRoomAllocations) {
		toSerialize["genericRoomAllocations"] = o.GenericRoomAllocations
	}
	if !IsNil(o.AlternateDates) {
		toSerialize["alternateDates"] = o.AlternateDates
	}
	if !IsNil(o.SellMessages) {
		toSerialize["sellMessages"] = o.SellMessages
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.WashSchedules) {
		toSerialize["washSchedules"] = o.WashSchedules
	}
	if !IsNil(o.Restrictions) {
		toSerialize["restrictions"] = o.Restrictions
	}
	if !IsNil(o.AccessExclusions) {
		toSerialize["accessExclusions"] = o.AccessExclusions
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.UpdateLinkedActivities) {
		toSerialize["updateLinkedActivities"] = o.UpdateLinkedActivities
	}
	if !IsNil(o.MarkAsRecentlyAccessed) {
		toSerialize["markAsRecentlyAccessed"] = o.MarkAsRecentlyAccessed
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	if !IsNil(o.ResponseInstructions) {
		toSerialize["responseInstructions"] = o.ResponseInstructions
	}
	return toSerialize, nil
}

type NullableBlockInstructionType struct {
	value *BlockInstructionType
	isSet bool
}

func (v NullableBlockInstructionType) Get() *BlockInstructionType {
	return v.value
}

func (v *NullableBlockInstructionType) Set(val *BlockInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockInstructionType(val *BlockInstructionType) *NullableBlockInstructionType {
	return &NullableBlockInstructionType{value: val, isSet: true}
}

func (v NullableBlockInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


