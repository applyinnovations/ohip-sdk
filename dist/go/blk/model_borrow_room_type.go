/*
OPERA Cloud Block API

APIs to cater for Business Block functionality in OPERA Cloud. <br /><br /> A block is a group of rooms held for guests who are attending an event, meeting, or function. You can create blocks for family reunions, business conferences, weddings, and so on. You can also set aside rooms for the event (block).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blk

import (
	"encoding/json"
)

// checks if the BorrowRoomType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BorrowRoomType{}

// BorrowRoomType Specifies the number of rooms to be borrowed from the room type or House.
type BorrowRoomType struct {
	// Returning an empty element of this type indicates the this is a House type. This is used in conjunction with the Borrow operations for Blocks where rooms are to be borrowed from House.
	House map[string]interface{} `json:"house,omitempty"`
	// Indicates the room type from which the rooms will be borrowed.
	RoomType *string `json:"roomType,omitempty"`
	// The number of rooms that need to be borrowed.
	RoomsToBorrow *int32 `json:"roomsToBorrow,omitempty"`
}

// NewBorrowRoomType instantiates a new BorrowRoomType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBorrowRoomType() *BorrowRoomType {
	this := BorrowRoomType{}
	return &this
}

// NewBorrowRoomTypeWithDefaults instantiates a new BorrowRoomType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBorrowRoomTypeWithDefaults() *BorrowRoomType {
	this := BorrowRoomType{}
	return &this
}

// GetHouse returns the House field value if set, zero value otherwise.
func (o *BorrowRoomType) GetHouse() map[string]interface{} {
	if o == nil || IsNil(o.House) {
		var ret map[string]interface{}
		return ret
	}
	return o.House
}

// GetHouseOk returns a tuple with the House field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BorrowRoomType) GetHouseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.House) {
		return map[string]interface{}{}, false
	}
	return o.House, true
}

// HasHouse returns a boolean if a field has been set.
func (o *BorrowRoomType) HasHouse() bool {
	if o != nil && !IsNil(o.House) {
		return true
	}

	return false
}

// SetHouse gets a reference to the given map[string]interface{} and assigns it to the House field.
func (o *BorrowRoomType) SetHouse(v map[string]interface{}) {
	o.House = v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *BorrowRoomType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BorrowRoomType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *BorrowRoomType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *BorrowRoomType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetRoomsToBorrow returns the RoomsToBorrow field value if set, zero value otherwise.
func (o *BorrowRoomType) GetRoomsToBorrow() int32 {
	if o == nil || IsNil(o.RoomsToBorrow) {
		var ret int32
		return ret
	}
	return *o.RoomsToBorrow
}

// GetRoomsToBorrowOk returns a tuple with the RoomsToBorrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BorrowRoomType) GetRoomsToBorrowOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomsToBorrow) {
		return nil, false
	}
	return o.RoomsToBorrow, true
}

// HasRoomsToBorrow returns a boolean if a field has been set.
func (o *BorrowRoomType) HasRoomsToBorrow() bool {
	if o != nil && !IsNil(o.RoomsToBorrow) {
		return true
	}

	return false
}

// SetRoomsToBorrow gets a reference to the given int32 and assigns it to the RoomsToBorrow field.
func (o *BorrowRoomType) SetRoomsToBorrow(v int32) {
	o.RoomsToBorrow = &v
}

func (o BorrowRoomType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BorrowRoomType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.House) {
		toSerialize["house"] = o.House
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.RoomsToBorrow) {
		toSerialize["roomsToBorrow"] = o.RoomsToBorrow
	}
	return toSerialize, nil
}

type NullableBorrowRoomType struct {
	value *BorrowRoomType
	isSet bool
}

func (v NullableBorrowRoomType) Get() *BorrowRoomType {
	return v.value
}

func (v *NullableBorrowRoomType) Set(val *BorrowRoomType) {
	v.value = val
	v.isSet = true
}

func (v NullableBorrowRoomType) IsSet() bool {
	return v.isSet
}

func (v *NullableBorrowRoomType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBorrowRoomType(val *BorrowRoomType) *NullableBorrowRoomType {
	return &NullableBorrowRoomType{value: val, isSet: true}
}

func (v NullableBorrowRoomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBorrowRoomType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


