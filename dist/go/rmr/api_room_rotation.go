/*
OPERA Cloud Room Rotation Service API

APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmr

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// RoomRotationApiService RoomRotationApi service
type RoomRotationApiService service

type RoomRotationApiGetReservationRotationPointsRequest struct {
	ctx context.Context
	ApiService *RoomRotationApiService
	hotelId string
	departureStartDate string
	departureEndDate string
	roomIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	confirmationNumber *string
	surname *string
	givenName *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// List of Room Ids for which to return Reservation Rotation Points.
func (r RoomRotationApiGetReservationRotationPointsRequest) RoomIds(roomIds []string) RoomRotationApiGetReservationRotationPointsRequest {
	r.roomIds = &roomIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationApiGetReservationRotationPointsRequest) Authorization(authorization string) RoomRotationApiGetReservationRotationPointsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationApiGetReservationRotationPointsRequest) XAppKey(xAppKey string) RoomRotationApiGetReservationRotationPointsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationApiGetReservationRotationPointsRequest) XHotelid(xHotelid string) RoomRotationApiGetReservationRotationPointsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r RoomRotationApiGetReservationRotationPointsRequest) ConfirmationNumber(confirmationNumber string) RoomRotationApiGetReservationRotationPointsRequest {
	r.confirmationNumber = &confirmationNumber
	return r
}

// Family name, last name.
func (r RoomRotationApiGetReservationRotationPointsRequest) Surname(surname string) RoomRotationApiGetReservationRotationPointsRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r RoomRotationApiGetReservationRotationPointsRequest) GivenName(givenName string) RoomRotationApiGetReservationRotationPointsRequest {
	r.givenName = &givenName
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r RoomRotationApiGetReservationRotationPointsRequest) Limit(limit int32) RoomRotationApiGetReservationRotationPointsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RoomRotationApiGetReservationRotationPointsRequest) Offset(offset int32) RoomRotationApiGetReservationRotationPointsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r RoomRotationApiGetReservationRotationPointsRequest) XExternalsystem(xExternalsystem string) RoomRotationApiGetReservationRotationPointsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationApiGetReservationRotationPointsRequest) AcceptLanguage(acceptLanguage string) RoomRotationApiGetReservationRotationPointsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationApiGetReservationRotationPointsRequest) Execute() (*GetReservationRotationPoints, *http.Response, error) {
	return r.ApiService.GetReservationRotationPointsExecute(r)
}

/*
GetReservationRotationPoints Get list of reservations and the associated rotations points

This API will allow a user to retrieve list of reservations and the number of rotation points associated with a given reservation for requested hotel, departure start date, departure end date, and room numbers. <p><strong>OperationId:</strong>getReservationRotationPoints</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique Id for the Hotel
 @param departureStartDate Departure Start Date of the reservation to be searched.
 @param departureEndDate Departure End Date of the reservation to be searched.
 @return RoomRotationApiGetReservationRotationPointsRequest
*/
func (a *RoomRotationApiService) GetReservationRotationPoints(ctx context.Context, hotelId string, departureStartDate string, departureEndDate string) RoomRotationApiGetReservationRotationPointsRequest {
	return RoomRotationApiGetReservationRotationPointsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		departureStartDate: departureStartDate,
		departureEndDate: departureEndDate,
	}
}

// Execute executes the request
//  @return GetReservationRotationPoints
func (a *RoomRotationApiService) GetReservationRotationPointsExecute(r RoomRotationApiGetReservationRotationPointsRequest) (*GetReservationRotationPoints, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReservationRotationPoints
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationApiService.GetReservationRotationPoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/departureStartDate/{departureStartDate}/departureEndDate/{departureEndDate}/reservationRotationPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"departureStartDate"+"}", url.PathEscape(parameterValueToString(r.departureStartDate, "departureStartDate")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"departureEndDate"+"}", url.PathEscape(parameterValueToString(r.departureEndDate, "departureEndDate")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}
	if len(*r.roomIds) > 5 {
		return localVarReturnValue, nil, reportError("roomIds must have less than 5 elements")
	}

	{
		t := *r.roomIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomIds", t, "multi")
		}
	}
	if r.confirmationNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNumber", r.confirmationNumber, "")
	}
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
	}
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationApiGetReservationRotationPointsDetailsRequest struct {
	ctx context.Context
	ApiService *RoomRotationApiService
	hotelId string
	reservationId string
	roomId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeAdjustmentLog *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationApiGetReservationRotationPointsDetailsRequest) Authorization(authorization string) RoomRotationApiGetReservationRotationPointsDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationApiGetReservationRotationPointsDetailsRequest) XAppKey(xAppKey string) RoomRotationApiGetReservationRotationPointsDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationApiGetReservationRotationPointsDetailsRequest) XHotelid(xHotelid string) RoomRotationApiGetReservationRotationPointsDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Include adjustment log details in the response.
func (r RoomRotationApiGetReservationRotationPointsDetailsRequest) IncludeAdjustmentLog(includeAdjustmentLog bool) RoomRotationApiGetReservationRotationPointsDetailsRequest {
	r.includeAdjustmentLog = &includeAdjustmentLog
	return r
}

// External system code.
func (r RoomRotationApiGetReservationRotationPointsDetailsRequest) XExternalsystem(xExternalsystem string) RoomRotationApiGetReservationRotationPointsDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationApiGetReservationRotationPointsDetailsRequest) AcceptLanguage(acceptLanguage string) RoomRotationApiGetReservationRotationPointsDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationApiGetReservationRotationPointsDetailsRequest) Execute() (*GetReservationRotationPointsDetails, *http.Response, error) {
	return r.ApiService.GetReservationRotationPointsDetailsExecute(r)
}

/*
GetReservationRotationPointsDetails Get list of rotation points details associated with a reservation with adjustment log.

This API will allow a user to retrieve list of rotation points details along with adjustment log for requested hotel, reservation Id and room number. <p><strong>OperationId:</strong>getReservationRotationPointsDetails</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique Id of the Hotel for the reservation.
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param roomId Room number of the reservation.
 @return RoomRotationApiGetReservationRotationPointsDetailsRequest
*/
func (a *RoomRotationApiService) GetReservationRotationPointsDetails(ctx context.Context, hotelId string, reservationId string, roomId string) RoomRotationApiGetReservationRotationPointsDetailsRequest {
	return RoomRotationApiGetReservationRotationPointsDetailsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		reservationId: reservationId,
		roomId: roomId,
	}
}

// Execute executes the request
//  @return GetReservationRotationPointsDetails
func (a *RoomRotationApiService) GetReservationRotationPointsDetailsExecute(r RoomRotationApiGetReservationRotationPointsDetailsRequest) (*GetReservationRotationPointsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReservationRotationPointsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationApiService.GetReservationRotationPointsDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/rooms/{roomId}/reservationRotationPointsDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 20 {
		return localVarReturnValue, nil, reportError("roomId must have less than 20 elements")
	}

	if r.includeAdjustmentLog != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAdjustmentLog", r.includeAdjustmentLog, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationApiGetRoomOwnersRequest struct {
	ctx context.Context
	ApiService *RoomRotationApiService
	hotelIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	surname *string
	givenName *string
	startDateFrom *string
	startDateTo *string
	endDateFrom *string
	endDateTo *string
	roomClasses *[]string
	roomTypes *[]string
	roomIds *[]string
	contractNumber *string
	includeInactive *bool
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Unique Id(s) for the Hotel(s) queried.
func (r RoomRotationApiGetRoomOwnersRequest) HotelIds(hotelIds []string) RoomRotationApiGetRoomOwnersRequest {
	r.hotelIds = &hotelIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationApiGetRoomOwnersRequest) Authorization(authorization string) RoomRotationApiGetRoomOwnersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationApiGetRoomOwnersRequest) XAppKey(xAppKey string) RoomRotationApiGetRoomOwnersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationApiGetRoomOwnersRequest) XHotelid(xHotelid string) RoomRotationApiGetRoomOwnersRequest {
	r.xHotelid = &xHotelid
	return r
}

// Family name, last name.
func (r RoomRotationApiGetRoomOwnersRequest) Surname(surname string) RoomRotationApiGetRoomOwnersRequest {
	r.surname = &surname
	return r
}

// Given name, first name or names
func (r RoomRotationApiGetRoomOwnersRequest) GivenName(givenName string) RoomRotationApiGetRoomOwnersRequest {
	r.givenName = &givenName
	return r
}

// The starting value of the start date range.
func (r RoomRotationApiGetRoomOwnersRequest) StartDateFrom(startDateFrom string) RoomRotationApiGetRoomOwnersRequest {
	r.startDateFrom = &startDateFrom
	return r
}

// The ending value of the start date range.
func (r RoomRotationApiGetRoomOwnersRequest) StartDateTo(startDateTo string) RoomRotationApiGetRoomOwnersRequest {
	r.startDateTo = &startDateTo
	return r
}

// The starting value of the end date range.
func (r RoomRotationApiGetRoomOwnersRequest) EndDateFrom(endDateFrom string) RoomRotationApiGetRoomOwnersRequest {
	r.endDateFrom = &endDateFrom
	return r
}

// The ending value of the end date range.
func (r RoomRotationApiGetRoomOwnersRequest) EndDateTo(endDateTo string) RoomRotationApiGetRoomOwnersRequest {
	r.endDateTo = &endDateTo
	return r
}

// List of Room Classes for which to return Room Owners. Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationApiGetRoomOwnersRequest) RoomClasses(roomClasses []string) RoomRotationApiGetRoomOwnersRequest {
	r.roomClasses = &roomClasses
	return r
}

// List of Room Types for which to return Room Owners. Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationApiGetRoomOwnersRequest) RoomTypes(roomTypes []string) RoomRotationApiGetRoomOwnersRequest {
	r.roomTypes = &roomTypes
	return r
}

// List of Room Ids for which to return Room Owners. Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationApiGetRoomOwnersRequest) RoomIds(roomIds []string) RoomRotationApiGetRoomOwnersRequest {
	r.roomIds = &roomIds
	return r
}

// Contract Number of the Ownership Record.
func (r RoomRotationApiGetRoomOwnersRequest) ContractNumber(contractNumber string) RoomRotationApiGetRoomOwnersRequest {
	r.contractNumber = &contractNumber
	return r
}

// Indicates whether to return inactive records. Records are considered inactive when the end date of the ownership record is prior to the currrent property business date.
func (r RoomRotationApiGetRoomOwnersRequest) IncludeInactive(includeInactive bool) RoomRotationApiGetRoomOwnersRequest {
	r.includeInactive = &includeInactive
	return r
}

// Indicates maximum number of records the API should return.
func (r RoomRotationApiGetRoomOwnersRequest) Limit(limit int32) RoomRotationApiGetRoomOwnersRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RoomRotationApiGetRoomOwnersRequest) Offset(offset int32) RoomRotationApiGetRoomOwnersRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r RoomRotationApiGetRoomOwnersRequest) XExternalsystem(xExternalsystem string) RoomRotationApiGetRoomOwnersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationApiGetRoomOwnersRequest) AcceptLanguage(acceptLanguage string) RoomRotationApiGetRoomOwnersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationApiGetRoomOwnersRequest) Execute() (*RoomOwnersListDetails, *http.Response, error) {
	return r.ApiService.GetRoomOwnersExecute(r)
}

/*
GetRoomOwners Get Room Owners Details

Get Room Ownership details for specific room(s) or owners. Hotel Id(s) and at least one other search criteria is required. <p><strong>OperationId:</strong>getRoomOwners</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RoomRotationApiGetRoomOwnersRequest
*/
func (a *RoomRotationApiService) GetRoomOwners(ctx context.Context) RoomRotationApiGetRoomOwnersRequest {
	return RoomRotationApiGetRoomOwnersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RoomOwnersListDetails
func (a *RoomRotationApiService) GetRoomOwnersExecute(r RoomRotationApiGetRoomOwnersRequest) (*RoomOwnersListDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomOwnersListDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationApiService.GetRoomOwners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/roomOwners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if len(*r.hotelIds) < 1 {
		return localVarReturnValue, nil, reportError("hotelIds must have at least 1 elements")
	}
	if len(*r.hotelIds) > 5 {
		return localVarReturnValue, nil, reportError("hotelIds must have less than 5 elements")
	}

	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
	}
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
	}
	if r.startDateFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDateFrom", r.startDateFrom, "")
	}
	if r.startDateTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDateTo", r.startDateTo, "")
	}
	if r.endDateFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDateFrom", r.endDateFrom, "")
	}
	if r.endDateTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDateTo", r.endDateTo, "")
	}
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
	}
	if r.roomTypes != nil {
		t := *r.roomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", t, "multi")
		}
	}
	if r.roomIds != nil {
		t := *r.roomIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomIds", t, "multi")
		}
	}
	if r.contractNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contractNumber", r.contractNumber, "")
	}
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationApiGetRoomOwnershipsRequest struct {
	ctx context.Context
	ApiService *RoomRotationApiService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	startDate *string
	endDate *string
	includeReferral *bool
	includeAvailableRoomsOnly *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationApiGetRoomOwnershipsRequest) Authorization(authorization string) RoomRotationApiGetRoomOwnershipsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationApiGetRoomOwnershipsRequest) XAppKey(xAppKey string) RoomRotationApiGetRoomOwnershipsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationApiGetRoomOwnershipsRequest) XHotelid(xHotelid string) RoomRotationApiGetRoomOwnershipsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Unique Id(s) for the Hotel(s). Multiple Hotels can be entered by adding multiple query parameters.
func (r RoomRotationApiGetRoomOwnershipsRequest) HotelIds(hotelIds []string) RoomRotationApiGetRoomOwnershipsRequest {
	r.hotelIds = &hotelIds
	return r
}

// The starting value of the date range.
func (r RoomRotationApiGetRoomOwnershipsRequest) StartDate(startDate string) RoomRotationApiGetRoomOwnershipsRequest {
	r.startDate = &startDate
	return r
}

// The ending value of the date range.
func (r RoomRotationApiGetRoomOwnershipsRequest) EndDate(endDate string) RoomRotationApiGetRoomOwnershipsRequest {
	r.endDate = &endDate
	return r
}

// Include Owner Referral in response flag.
func (r RoomRotationApiGetRoomOwnershipsRequest) IncludeReferral(includeReferral bool) RoomRotationApiGetRoomOwnershipsRequest {
	r.includeReferral = &includeReferral
	return r
}

// Flag indicating if only rooms available for booking during the date range specified should be included in response.
func (r RoomRotationApiGetRoomOwnershipsRequest) IncludeAvailableRoomsOnly(includeAvailableRoomsOnly bool) RoomRotationApiGetRoomOwnershipsRequest {
	r.includeAvailableRoomsOnly = &includeAvailableRoomsOnly
	return r
}

// External system code.
func (r RoomRotationApiGetRoomOwnershipsRequest) XExternalsystem(xExternalsystem string) RoomRotationApiGetRoomOwnershipsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationApiGetRoomOwnershipsRequest) AcceptLanguage(acceptLanguage string) RoomRotationApiGetRoomOwnershipsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationApiGetRoomOwnershipsRequest) Execute() (*AssociatedRoomOwnershipListDetails, *http.Response, error) {
	return r.ApiService.GetRoomOwnershipsExecute(r)
}

/*
GetRoomOwnerships Get Profile Room Owners Details

Use this API to fetch profile Rooms with Room Ownership or Owner Referral records associated. <p><strong>OperationId:</strong>getRoomOwnerships</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Unique ID of profile.
 @return RoomRotationApiGetRoomOwnershipsRequest
*/
func (a *RoomRotationApiService) GetRoomOwnerships(ctx context.Context, profileId string) RoomRotationApiGetRoomOwnershipsRequest {
	return RoomRotationApiGetRoomOwnershipsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return AssociatedRoomOwnershipListDetails
func (a *RoomRotationApiService) GetRoomOwnershipsExecute(r RoomRotationApiGetRoomOwnershipsRequest) (*AssociatedRoomOwnershipListDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AssociatedRoomOwnershipListDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationApiService.GetRoomOwnerships")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/roomOwnerships"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.includeReferral != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeReferral", r.includeReferral, "")
	}
	if r.includeAvailableRoomsOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAvailableRoomsOnly", r.includeAvailableRoomsOnly, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationApiGetRoomRotationPointsRequest struct {
	ctx context.Context
	ApiService *RoomRotationApiService
	hotelId string
	roomRotationPointsDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	roomClasses *[]string
	roomTypes *[]string
	roomIds *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// The date for which the Room Rotation Points are being requested
func (r RoomRotationApiGetRoomRotationPointsRequest) RoomRotationPointsDate(roomRotationPointsDate string) RoomRotationApiGetRoomRotationPointsRequest {
	r.roomRotationPointsDate = &roomRotationPointsDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationApiGetRoomRotationPointsRequest) Authorization(authorization string) RoomRotationApiGetRoomRotationPointsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationApiGetRoomRotationPointsRequest) XAppKey(xAppKey string) RoomRotationApiGetRoomRotationPointsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationApiGetRoomRotationPointsRequest) XHotelid(xHotelid string) RoomRotationApiGetRoomRotationPointsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records the API should return.
func (r RoomRotationApiGetRoomRotationPointsRequest) Limit(limit int32) RoomRotationApiGetRoomRotationPointsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r RoomRotationApiGetRoomRotationPointsRequest) Offset(offset int32) RoomRotationApiGetRoomRotationPointsRequest {
	r.offset = &offset
	return r
}

// List of Room Classes for which to return Room Rotation Points. Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationApiGetRoomRotationPointsRequest) RoomClasses(roomClasses []string) RoomRotationApiGetRoomRotationPointsRequest {
	r.roomClasses = &roomClasses
	return r
}

// List of Room Types for which to return Room Rotation Points. Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationApiGetRoomRotationPointsRequest) RoomTypes(roomTypes []string) RoomRotationApiGetRoomRotationPointsRequest {
	r.roomTypes = &roomTypes
	return r
}

// List of Room Ids for which to return Room Rotation Points. Multiple values can be entered by adding multiple query parameters.
func (r RoomRotationApiGetRoomRotationPointsRequest) RoomIds(roomIds []string) RoomRotationApiGetRoomRotationPointsRequest {
	r.roomIds = &roomIds
	return r
}

// External system code.
func (r RoomRotationApiGetRoomRotationPointsRequest) XExternalsystem(xExternalsystem string) RoomRotationApiGetRoomRotationPointsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationApiGetRoomRotationPointsRequest) AcceptLanguage(acceptLanguage string) RoomRotationApiGetRoomRotationPointsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationApiGetRoomRotationPointsRequest) Execute() (*GetRoomRotationPoints, *http.Response, error) {
	return r.ApiService.GetRoomRotationPointsExecute(r)
}

/*
GetRoomRotationPoints Get Room Rotation Points

Use this API to fetch the individual units' rotation points.<p><strong>OperationId:</strong>getRoomRotationPoints</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique Id for the Hotel
 @return RoomRotationApiGetRoomRotationPointsRequest
*/
func (a *RoomRotationApiService) GetRoomRotationPoints(ctx context.Context, hotelId string) RoomRotationApiGetRoomRotationPointsRequest {
	return RoomRotationApiGetRoomRotationPointsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GetRoomRotationPoints
func (a *RoomRotationApiService) GetRoomRotationPointsExecute(r RoomRotationApiGetRoomRotationPointsRequest) (*GetRoomRotationPoints, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetRoomRotationPoints
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationApiService.GetRoomRotationPoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/roomRotationPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "roomRotationPointsDate", r.roomRotationPointsDate, "")
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
	}
	if r.roomTypes != nil {
		t := *r.roomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", t, "multi")
		}
	}
	if r.roomIds != nil {
		t := *r.roomIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomIds", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationApiPutReservationRotationPointsDetailsRequest struct {
	ctx context.Context
	ApiService *RoomRotationApiService
	hotelId string
	reservationId string
	roomId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationRotationPoints *PutReservationRotationPointsDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationApiPutReservationRotationPointsDetailsRequest) Authorization(authorization string) RoomRotationApiPutReservationRotationPointsDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationApiPutReservationRotationPointsDetailsRequest) XAppKey(xAppKey string) RoomRotationApiPutReservationRotationPointsDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationApiPutReservationRotationPointsDetailsRequest) XHotelid(xHotelid string) RoomRotationApiPutReservationRotationPointsDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Collection of Reservation Rotation Points Details
func (r RoomRotationApiPutReservationRotationPointsDetailsRequest) ReservationRotationPoints(reservationRotationPoints PutReservationRotationPointsDetails) RoomRotationApiPutReservationRotationPointsDetailsRequest {
	r.reservationRotationPoints = &reservationRotationPoints
	return r
}

// External system code.
func (r RoomRotationApiPutReservationRotationPointsDetailsRequest) XExternalsystem(xExternalsystem string) RoomRotationApiPutReservationRotationPointsDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationApiPutReservationRotationPointsDetailsRequest) AcceptLanguage(acceptLanguage string) RoomRotationApiPutReservationRotationPointsDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationApiPutReservationRotationPointsDetailsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutReservationRotationPointsDetailsExecute(r)
}

/*
PutReservationRotationPointsDetails Update Rotation Points Details associated with a reservation.

This API will allow a user to modify rotation points for the requested hotel, reservation Id and room number. <p><strong>OperationId:</strong>putReservationRotationPointsDetails</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique Id of the Hotel for the reservation.
 @param reservationId Unique OPERA reservation ID which is used to find reservation from OPERA. This ID is a primary identification of a reservation in OPERA.
 @param roomId Room number of the reservation.
 @return RoomRotationApiPutReservationRotationPointsDetailsRequest
*/
func (a *RoomRotationApiService) PutReservationRotationPointsDetails(ctx context.Context, hotelId string, reservationId string, roomId string) RoomRotationApiPutReservationRotationPointsDetailsRequest {
	return RoomRotationApiPutReservationRotationPointsDetailsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		reservationId: reservationId,
		roomId: roomId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationApiService) PutReservationRotationPointsDetailsExecute(r RoomRotationApiPutReservationRotationPointsDetailsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationApiService.PutReservationRotationPointsDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/rooms/{roomId}/reservationRotationPointsDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 20 {
		return localVarReturnValue, nil, reportError("roomId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.reservationRotationPoints
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RoomRotationApiPutRoomRotationPointsRequest struct {
	ctx context.Context
	ApiService *RoomRotationApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomRotationPointsAdjustment *RoomRotationPointsAdjustment
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RoomRotationApiPutRoomRotationPointsRequest) Authorization(authorization string) RoomRotationApiPutRoomRotationPointsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RoomRotationApiPutRoomRotationPointsRequest) XAppKey(xAppKey string) RoomRotationApiPutRoomRotationPointsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RoomRotationApiPutRoomRotationPointsRequest) XHotelid(xHotelid string) RoomRotationApiPutRoomRotationPointsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request details containing room, balance forward and adjusted points to update.
func (r RoomRotationApiPutRoomRotationPointsRequest) RoomRotationPointsAdjustment(roomRotationPointsAdjustment RoomRotationPointsAdjustment) RoomRotationApiPutRoomRotationPointsRequest {
	r.roomRotationPointsAdjustment = &roomRotationPointsAdjustment
	return r
}

// External system code.
func (r RoomRotationApiPutRoomRotationPointsRequest) XExternalsystem(xExternalsystem string) RoomRotationApiPutRoomRotationPointsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RoomRotationApiPutRoomRotationPointsRequest) AcceptLanguage(acceptLanguage string) RoomRotationApiPutRoomRotationPointsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RoomRotationApiPutRoomRotationPointsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRoomRotationPointsExecute(r)
}

/*
PutRoomRotationPoints Update Rotation Points by Room Numbers

Use this operation to update balance forward and adjusted points of individual rooms. <p><strong>OperationId:</strong>putRoomRotationPoints</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique Id for the Hotel
 @return RoomRotationApiPutRoomRotationPointsRequest
*/
func (a *RoomRotationApiService) PutRoomRotationPoints(ctx context.Context, hotelId string) RoomRotationApiPutRoomRotationPointsRequest {
	return RoomRotationApiPutRoomRotationPointsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *RoomRotationApiService) PutRoomRotationPointsExecute(r RoomRotationApiPutRoomRotationPointsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoomRotationApiService.PutRoomRotationPoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/roomRotationPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomRotationPointsAdjustment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
