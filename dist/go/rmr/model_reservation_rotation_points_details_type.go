/*
OPERA Cloud Room Rotation Service API

APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmr

import (
	"encoding/json"
)

// checks if the ReservationRotationPointsDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationRotationPointsDetailsType{}

// ReservationRotationPointsDetailsType Rotation Points Details of a reservation
type ReservationRotationPointsDetailsType struct {
	// Start date of reservation
	StartDate *string `json:"startDate,omitempty"`
	// End date of reservation
	EndDate *string `json:"endDate,omitempty"`
	Type *RotationRuleCalculationRuleType `json:"type,omitempty"`
	// Current applicable points for the shown calculation rule for the reservation.
	CurrentPoints *float32 `json:"currentPoints,omitempty"`
	// Override the current points and enter a new value for the respective calculation rule up to 5 decimal places.
	AdjustPointsTo *float32 `json:"adjustPointsTo,omitempty"`
	AdjustmentReason *ReservationRotationPointsAdjustmentReasonType `json:"adjustmentReason,omitempty"`
}

// NewReservationRotationPointsDetailsType instantiates a new ReservationRotationPointsDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationRotationPointsDetailsType() *ReservationRotationPointsDetailsType {
	this := ReservationRotationPointsDetailsType{}
	return &this
}

// NewReservationRotationPointsDetailsTypeWithDefaults instantiates a new ReservationRotationPointsDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationRotationPointsDetailsTypeWithDefaults() *ReservationRotationPointsDetailsType {
	this := ReservationRotationPointsDetailsType{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReservationRotationPointsDetailsType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsDetailsType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReservationRotationPointsDetailsType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ReservationRotationPointsDetailsType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ReservationRotationPointsDetailsType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsDetailsType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ReservationRotationPointsDetailsType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ReservationRotationPointsDetailsType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReservationRotationPointsDetailsType) GetType() RotationRuleCalculationRuleType {
	if o == nil || IsNil(o.Type) {
		var ret RotationRuleCalculationRuleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsDetailsType) GetTypeOk() (*RotationRuleCalculationRuleType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReservationRotationPointsDetailsType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RotationRuleCalculationRuleType and assigns it to the Type field.
func (o *ReservationRotationPointsDetailsType) SetType(v RotationRuleCalculationRuleType) {
	o.Type = &v
}

// GetCurrentPoints returns the CurrentPoints field value if set, zero value otherwise.
func (o *ReservationRotationPointsDetailsType) GetCurrentPoints() float32 {
	if o == nil || IsNil(o.CurrentPoints) {
		var ret float32
		return ret
	}
	return *o.CurrentPoints
}

// GetCurrentPointsOk returns a tuple with the CurrentPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsDetailsType) GetCurrentPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentPoints) {
		return nil, false
	}
	return o.CurrentPoints, true
}

// HasCurrentPoints returns a boolean if a field has been set.
func (o *ReservationRotationPointsDetailsType) HasCurrentPoints() bool {
	if o != nil && !IsNil(o.CurrentPoints) {
		return true
	}

	return false
}

// SetCurrentPoints gets a reference to the given float32 and assigns it to the CurrentPoints field.
func (o *ReservationRotationPointsDetailsType) SetCurrentPoints(v float32) {
	o.CurrentPoints = &v
}

// GetAdjustPointsTo returns the AdjustPointsTo field value if set, zero value otherwise.
func (o *ReservationRotationPointsDetailsType) GetAdjustPointsTo() float32 {
	if o == nil || IsNil(o.AdjustPointsTo) {
		var ret float32
		return ret
	}
	return *o.AdjustPointsTo
}

// GetAdjustPointsToOk returns a tuple with the AdjustPointsTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsDetailsType) GetAdjustPointsToOk() (*float32, bool) {
	if o == nil || IsNil(o.AdjustPointsTo) {
		return nil, false
	}
	return o.AdjustPointsTo, true
}

// HasAdjustPointsTo returns a boolean if a field has been set.
func (o *ReservationRotationPointsDetailsType) HasAdjustPointsTo() bool {
	if o != nil && !IsNil(o.AdjustPointsTo) {
		return true
	}

	return false
}

// SetAdjustPointsTo gets a reference to the given float32 and assigns it to the AdjustPointsTo field.
func (o *ReservationRotationPointsDetailsType) SetAdjustPointsTo(v float32) {
	o.AdjustPointsTo = &v
}

// GetAdjustmentReason returns the AdjustmentReason field value if set, zero value otherwise.
func (o *ReservationRotationPointsDetailsType) GetAdjustmentReason() ReservationRotationPointsAdjustmentReasonType {
	if o == nil || IsNil(o.AdjustmentReason) {
		var ret ReservationRotationPointsAdjustmentReasonType
		return ret
	}
	return *o.AdjustmentReason
}

// GetAdjustmentReasonOk returns a tuple with the AdjustmentReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRotationPointsDetailsType) GetAdjustmentReasonOk() (*ReservationRotationPointsAdjustmentReasonType, bool) {
	if o == nil || IsNil(o.AdjustmentReason) {
		return nil, false
	}
	return o.AdjustmentReason, true
}

// HasAdjustmentReason returns a boolean if a field has been set.
func (o *ReservationRotationPointsDetailsType) HasAdjustmentReason() bool {
	if o != nil && !IsNil(o.AdjustmentReason) {
		return true
	}

	return false
}

// SetAdjustmentReason gets a reference to the given ReservationRotationPointsAdjustmentReasonType and assigns it to the AdjustmentReason field.
func (o *ReservationRotationPointsDetailsType) SetAdjustmentReason(v ReservationRotationPointsAdjustmentReasonType) {
	o.AdjustmentReason = &v
}

func (o ReservationRotationPointsDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationRotationPointsDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CurrentPoints) {
		toSerialize["currentPoints"] = o.CurrentPoints
	}
	if !IsNil(o.AdjustPointsTo) {
		toSerialize["adjustPointsTo"] = o.AdjustPointsTo
	}
	if !IsNil(o.AdjustmentReason) {
		toSerialize["adjustmentReason"] = o.AdjustmentReason
	}
	return toSerialize, nil
}

type NullableReservationRotationPointsDetailsType struct {
	value *ReservationRotationPointsDetailsType
	isSet bool
}

func (v NullableReservationRotationPointsDetailsType) Get() *ReservationRotationPointsDetailsType {
	return v.value
}

func (v *NullableReservationRotationPointsDetailsType) Set(val *ReservationRotationPointsDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationRotationPointsDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationRotationPointsDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationRotationPointsDetailsType(val *ReservationRotationPointsDetailsType) *NullableReservationRotationPointsDetailsType {
	return &NullableReservationRotationPointsDetailsType{value: val, isSet: true}
}

func (v NullableReservationRotationPointsDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationRotationPointsDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


