/*
OPERA Cloud Room Rotation Service API

APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rmr

import (
	"encoding/json"
	"fmt"
)

// AssociatedRoomOwnershipType Indicates if the associated room is an Owner or Referral room.
type AssociatedRoomOwnershipType string

// List of associatedRoomOwnershipType
const (
	ASSOCIATEDROOMOWNERSHIPTYPE_OWNER AssociatedRoomOwnershipType = "Owner"
	ASSOCIATEDROOMOWNERSHIPTYPE_REFERRAL AssociatedRoomOwnershipType = "Referral"
)

// All allowed values of AssociatedRoomOwnershipType enum
var AllowedAssociatedRoomOwnershipTypeEnumValues = []AssociatedRoomOwnershipType{
	"Owner",
	"Referral",
}

func (v *AssociatedRoomOwnershipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssociatedRoomOwnershipType(value)
	for _, existing := range AllowedAssociatedRoomOwnershipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssociatedRoomOwnershipType", value)
}

// NewAssociatedRoomOwnershipTypeFromValue returns a pointer to a valid AssociatedRoomOwnershipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssociatedRoomOwnershipTypeFromValue(v string) (*AssociatedRoomOwnershipType, error) {
	ev := AssociatedRoomOwnershipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssociatedRoomOwnershipType: valid values are %v", v, AllowedAssociatedRoomOwnershipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssociatedRoomOwnershipType) IsValid() bool {
	for _, existing := range AllowedAssociatedRoomOwnershipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to associatedRoomOwnershipType value
func (v AssociatedRoomOwnershipType) Ptr() *AssociatedRoomOwnershipType {
	return &v
}

type NullableAssociatedRoomOwnershipType struct {
	value *AssociatedRoomOwnershipType
	isSet bool
}

func (v NullableAssociatedRoomOwnershipType) Get() *AssociatedRoomOwnershipType {
	return v.value
}

func (v *NullableAssociatedRoomOwnershipType) Set(val *AssociatedRoomOwnershipType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociatedRoomOwnershipType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociatedRoomOwnershipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociatedRoomOwnershipType(val *AssociatedRoomOwnershipType) *NullableAssociatedRoomOwnershipType {
	return &NullableAssociatedRoomOwnershipType{value: val, isSet: true}
}

func (v NullableAssociatedRoomOwnershipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociatedRoomOwnershipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

