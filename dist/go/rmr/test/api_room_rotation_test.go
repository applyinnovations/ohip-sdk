/*
OPERA Cloud Room Rotation Service API

Testing RoomRotationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rmr

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rmr"
)

func Test_rmr_RoomRotationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RoomRotationAPIService GetReservationRotationPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var departureStartDate string
		var departureEndDate string

		resp, httpRes, err := apiClient.RoomRotationAPI.GetReservationRotationPoints(context.Background(), hotelId, departureStartDate, departureEndDate).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationAPIService GetReservationRotationPointsDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string
		var roomId string

		resp, httpRes, err := apiClient.RoomRotationAPI.GetReservationRotationPointsDetails(context.Background(), hotelId, reservationId, roomId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationAPIService GetRoomOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RoomRotationAPI.GetRoomOwners(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationAPIService GetRoomOwnerships", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.RoomRotationAPI.GetRoomOwnerships(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationAPIService GetRoomRotationPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationAPI.GetRoomRotationPoints(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationAPIService PutReservationRotationPointsDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var reservationId string
		var roomId string

		resp, httpRes, err := apiClient.RoomRotationAPI.PutReservationRotationPointsDetails(context.Background(), hotelId, reservationId, roomId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RoomRotationAPIService PutRoomRotationPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.RoomRotationAPI.PutRoomRotationPoints(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
