/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelDayTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelDayTypeType{}

// HotelDayTypeType Details of Day Type to be used to set day types for a hotel.
type HotelDayTypeType struct {
	// Day type code selected.
	HotelId *string `json:"hotelId,omitempty"`
	// Day type code selected.
	DayTypeCode *string `json:"dayTypeCode,omitempty"`
	DateRange *TimeSpanDaysOfWeekType `json:"dateRange,omitempty"`
}

// NewHotelDayTypeType instantiates a new HotelDayTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelDayTypeType() *HotelDayTypeType {
	this := HotelDayTypeType{}
	return &this
}

// NewHotelDayTypeTypeWithDefaults instantiates a new HotelDayTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelDayTypeTypeWithDefaults() *HotelDayTypeType {
	this := HotelDayTypeType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelDayTypeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelDayTypeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelDayTypeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelDayTypeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetDayTypeCode returns the DayTypeCode field value if set, zero value otherwise.
func (o *HotelDayTypeType) GetDayTypeCode() string {
	if o == nil || IsNil(o.DayTypeCode) {
		var ret string
		return ret
	}
	return *o.DayTypeCode
}

// GetDayTypeCodeOk returns a tuple with the DayTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelDayTypeType) GetDayTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DayTypeCode) {
		return nil, false
	}
	return o.DayTypeCode, true
}

// HasDayTypeCode returns a boolean if a field has been set.
func (o *HotelDayTypeType) HasDayTypeCode() bool {
	if o != nil && !IsNil(o.DayTypeCode) {
		return true
	}

	return false
}

// SetDayTypeCode gets a reference to the given string and assigns it to the DayTypeCode field.
func (o *HotelDayTypeType) SetDayTypeCode(v string) {
	o.DayTypeCode = &v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *HotelDayTypeType) GetDateRange() TimeSpanDaysOfWeekType {
	if o == nil || IsNil(o.DateRange) {
		var ret TimeSpanDaysOfWeekType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelDayTypeType) GetDateRangeOk() (*TimeSpanDaysOfWeekType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *HotelDayTypeType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given TimeSpanDaysOfWeekType and assigns it to the DateRange field.
func (o *HotelDayTypeType) SetDateRange(v TimeSpanDaysOfWeekType) {
	o.DateRange = &v
}

func (o HotelDayTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelDayTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.DayTypeCode) {
		toSerialize["dayTypeCode"] = o.DayTypeCode
	}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	return toSerialize, nil
}

type NullableHotelDayTypeType struct {
	value *HotelDayTypeType
	isSet bool
}

func (v NullableHotelDayTypeType) Get() *HotelDayTypeType {
	return v.value
}

func (v *NullableHotelDayTypeType) Set(val *HotelDayTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelDayTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelDayTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelDayTypeType(val *HotelDayTypeType) *NullableHotelDayTypeType {
	return &NullableHotelDayTypeType{value: val, isSet: true}
}

func (v NullableHotelDayTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelDayTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


