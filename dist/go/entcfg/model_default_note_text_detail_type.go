/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the DefaultNoteTextDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultNoteTextDetailType{}

// DefaultNoteTextDetailType Default Note Text Information Type.
type DefaultNoteTextDetailType struct {
	// Indicates the Property for which the Default Note Text is specified.
	HotelId *string `json:"hotelId,omitempty"`
	// Default Note Text if Note Type has default note.
	DefaultNoteText *string `json:"defaultNoteText,omitempty"`
}

// NewDefaultNoteTextDetailType instantiates a new DefaultNoteTextDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultNoteTextDetailType() *DefaultNoteTextDetailType {
	this := DefaultNoteTextDetailType{}
	return &this
}

// NewDefaultNoteTextDetailTypeWithDefaults instantiates a new DefaultNoteTextDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultNoteTextDetailTypeWithDefaults() *DefaultNoteTextDetailType {
	this := DefaultNoteTextDetailType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *DefaultNoteTextDetailType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultNoteTextDetailType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *DefaultNoteTextDetailType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *DefaultNoteTextDetailType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetDefaultNoteText returns the DefaultNoteText field value if set, zero value otherwise.
func (o *DefaultNoteTextDetailType) GetDefaultNoteText() string {
	if o == nil || IsNil(o.DefaultNoteText) {
		var ret string
		return ret
	}
	return *o.DefaultNoteText
}

// GetDefaultNoteTextOk returns a tuple with the DefaultNoteText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultNoteTextDetailType) GetDefaultNoteTextOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultNoteText) {
		return nil, false
	}
	return o.DefaultNoteText, true
}

// HasDefaultNoteText returns a boolean if a field has been set.
func (o *DefaultNoteTextDetailType) HasDefaultNoteText() bool {
	if o != nil && !IsNil(o.DefaultNoteText) {
		return true
	}

	return false
}

// SetDefaultNoteText gets a reference to the given string and assigns it to the DefaultNoteText field.
func (o *DefaultNoteTextDetailType) SetDefaultNoteText(v string) {
	o.DefaultNoteText = &v
}

func (o DefaultNoteTextDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultNoteTextDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.DefaultNoteText) {
		toSerialize["defaultNoteText"] = o.DefaultNoteText
	}
	return toSerialize, nil
}

type NullableDefaultNoteTextDetailType struct {
	value *DefaultNoteTextDetailType
	isSet bool
}

func (v NullableDefaultNoteTextDetailType) Get() *DefaultNoteTextDetailType {
	return v.value
}

func (v *NullableDefaultNoteTextDetailType) Set(val *DefaultNoteTextDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultNoteTextDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultNoteTextDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultNoteTextDetailType(val *DefaultNoteTextDetailType) *NullableDefaultNoteTextDetailType {
	return &NullableDefaultNoteTextDetailType{value: val, isSet: true}
}

func (v NullableDefaultNoteTextDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultNoteTextDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


