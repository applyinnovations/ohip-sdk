/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the AttractionCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttractionCodeType{}

// AttractionCodeType Information about the attractions near the hotel.
type AttractionCodeType struct {
	Name *TranslationTextType2000 `json:"name,omitempty"`
	// The type of the attraction.
	Type *string `json:"type,omitempty"`
	// The class of the attraction.
	Class *string `json:"class,omitempty"`
	// Directions to the attraction from the hotel.
	GeneralDirections *string `json:"generalDirections,omitempty"`
	RelativePosition *RelativePositionType `json:"relativePosition,omitempty"`
	Address *AddressType `json:"address,omitempty"`
	Website *URLType `json:"website,omitempty"`
	// Price range for the attraction.
	PriceRange *string `json:"priceRange,omitempty"`
	// Price range for the attraction.
	OperationHours *string `json:"operationHours,omitempty"`
	// Display sequence of the attraction.
	DisplaySeq *int32 `json:"displaySeq,omitempty"`
	Code *string `json:"code,omitempty"`
	// The region in which this attraction is located.
	Region *string `json:"region,omitempty"`
	// The date the record was marked as inactive.
	InactiveDate *string `json:"inactiveDate,omitempty"`
	Latitude *float32 `json:"latitude,omitempty"`
	// The longitude of the location from which the organism or observation was collected, expressed in decimal degrees. Positive values are East of the Greenwich Meridian, negative values are West of the Greenwich Meridian.
	Longitude *float32 `json:"longitude,omitempty"`
	// Hotel Code for attraction.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewAttractionCodeType instantiates a new AttractionCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttractionCodeType() *AttractionCodeType {
	this := AttractionCodeType{}
	return &this
}

// NewAttractionCodeTypeWithDefaults instantiates a new AttractionCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttractionCodeTypeWithDefaults() *AttractionCodeType {
	this := AttractionCodeType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AttractionCodeType) GetName() TranslationTextType2000 {
	if o == nil || IsNil(o.Name) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetNameOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AttractionCodeType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given TranslationTextType2000 and assigns it to the Name field.
func (o *AttractionCodeType) SetName(v TranslationTextType2000) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttractionCodeType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttractionCodeType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AttractionCodeType) SetType(v string) {
	o.Type = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *AttractionCodeType) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *AttractionCodeType) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *AttractionCodeType) SetClass(v string) {
	o.Class = &v
}

// GetGeneralDirections returns the GeneralDirections field value if set, zero value otherwise.
func (o *AttractionCodeType) GetGeneralDirections() string {
	if o == nil || IsNil(o.GeneralDirections) {
		var ret string
		return ret
	}
	return *o.GeneralDirections
}

// GetGeneralDirectionsOk returns a tuple with the GeneralDirections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetGeneralDirectionsOk() (*string, bool) {
	if o == nil || IsNil(o.GeneralDirections) {
		return nil, false
	}
	return o.GeneralDirections, true
}

// HasGeneralDirections returns a boolean if a field has been set.
func (o *AttractionCodeType) HasGeneralDirections() bool {
	if o != nil && !IsNil(o.GeneralDirections) {
		return true
	}

	return false
}

// SetGeneralDirections gets a reference to the given string and assigns it to the GeneralDirections field.
func (o *AttractionCodeType) SetGeneralDirections(v string) {
	o.GeneralDirections = &v
}

// GetRelativePosition returns the RelativePosition field value if set, zero value otherwise.
func (o *AttractionCodeType) GetRelativePosition() RelativePositionType {
	if o == nil || IsNil(o.RelativePosition) {
		var ret RelativePositionType
		return ret
	}
	return *o.RelativePosition
}

// GetRelativePositionOk returns a tuple with the RelativePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetRelativePositionOk() (*RelativePositionType, bool) {
	if o == nil || IsNil(o.RelativePosition) {
		return nil, false
	}
	return o.RelativePosition, true
}

// HasRelativePosition returns a boolean if a field has been set.
func (o *AttractionCodeType) HasRelativePosition() bool {
	if o != nil && !IsNil(o.RelativePosition) {
		return true
	}

	return false
}

// SetRelativePosition gets a reference to the given RelativePositionType and assigns it to the RelativePosition field.
func (o *AttractionCodeType) SetRelativePosition(v RelativePositionType) {
	o.RelativePosition = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *AttractionCodeType) GetAddress() AddressType {
	if o == nil || IsNil(o.Address) {
		var ret AddressType
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetAddressOk() (*AddressType, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *AttractionCodeType) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given AddressType and assigns it to the Address field.
func (o *AttractionCodeType) SetAddress(v AddressType) {
	o.Address = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *AttractionCodeType) GetWebsite() URLType {
	if o == nil || IsNil(o.Website) {
		var ret URLType
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetWebsiteOk() (*URLType, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *AttractionCodeType) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given URLType and assigns it to the Website field.
func (o *AttractionCodeType) SetWebsite(v URLType) {
	o.Website = &v
}

// GetPriceRange returns the PriceRange field value if set, zero value otherwise.
func (o *AttractionCodeType) GetPriceRange() string {
	if o == nil || IsNil(o.PriceRange) {
		var ret string
		return ret
	}
	return *o.PriceRange
}

// GetPriceRangeOk returns a tuple with the PriceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetPriceRangeOk() (*string, bool) {
	if o == nil || IsNil(o.PriceRange) {
		return nil, false
	}
	return o.PriceRange, true
}

// HasPriceRange returns a boolean if a field has been set.
func (o *AttractionCodeType) HasPriceRange() bool {
	if o != nil && !IsNil(o.PriceRange) {
		return true
	}

	return false
}

// SetPriceRange gets a reference to the given string and assigns it to the PriceRange field.
func (o *AttractionCodeType) SetPriceRange(v string) {
	o.PriceRange = &v
}

// GetOperationHours returns the OperationHours field value if set, zero value otherwise.
func (o *AttractionCodeType) GetOperationHours() string {
	if o == nil || IsNil(o.OperationHours) {
		var ret string
		return ret
	}
	return *o.OperationHours
}

// GetOperationHoursOk returns a tuple with the OperationHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetOperationHoursOk() (*string, bool) {
	if o == nil || IsNil(o.OperationHours) {
		return nil, false
	}
	return o.OperationHours, true
}

// HasOperationHours returns a boolean if a field has been set.
func (o *AttractionCodeType) HasOperationHours() bool {
	if o != nil && !IsNil(o.OperationHours) {
		return true
	}

	return false
}

// SetOperationHours gets a reference to the given string and assigns it to the OperationHours field.
func (o *AttractionCodeType) SetOperationHours(v string) {
	o.OperationHours = &v
}

// GetDisplaySeq returns the DisplaySeq field value if set, zero value otherwise.
func (o *AttractionCodeType) GetDisplaySeq() int32 {
	if o == nil || IsNil(o.DisplaySeq) {
		var ret int32
		return ret
	}
	return *o.DisplaySeq
}

// GetDisplaySeqOk returns a tuple with the DisplaySeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetDisplaySeqOk() (*int32, bool) {
	if o == nil || IsNil(o.DisplaySeq) {
		return nil, false
	}
	return o.DisplaySeq, true
}

// HasDisplaySeq returns a boolean if a field has been set.
func (o *AttractionCodeType) HasDisplaySeq() bool {
	if o != nil && !IsNil(o.DisplaySeq) {
		return true
	}

	return false
}

// SetDisplaySeq gets a reference to the given int32 and assigns it to the DisplaySeq field.
func (o *AttractionCodeType) SetDisplaySeq(v int32) {
	o.DisplaySeq = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AttractionCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AttractionCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AttractionCodeType) SetCode(v string) {
	o.Code = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *AttractionCodeType) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *AttractionCodeType) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *AttractionCodeType) SetRegion(v string) {
	o.Region = &v
}

// GetInactiveDate returns the InactiveDate field value if set, zero value otherwise.
func (o *AttractionCodeType) GetInactiveDate() string {
	if o == nil || IsNil(o.InactiveDate) {
		var ret string
		return ret
	}
	return *o.InactiveDate
}

// GetInactiveDateOk returns a tuple with the InactiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetInactiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.InactiveDate) {
		return nil, false
	}
	return o.InactiveDate, true
}

// HasInactiveDate returns a boolean if a field has been set.
func (o *AttractionCodeType) HasInactiveDate() bool {
	if o != nil && !IsNil(o.InactiveDate) {
		return true
	}

	return false
}

// SetInactiveDate gets a reference to the given string and assigns it to the InactiveDate field.
func (o *AttractionCodeType) SetInactiveDate(v string) {
	o.InactiveDate = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *AttractionCodeType) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *AttractionCodeType) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *AttractionCodeType) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *AttractionCodeType) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *AttractionCodeType) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *AttractionCodeType) SetLongitude(v float32) {
	o.Longitude = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AttractionCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttractionCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AttractionCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AttractionCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o AttractionCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttractionCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.GeneralDirections) {
		toSerialize["generalDirections"] = o.GeneralDirections
	}
	if !IsNil(o.RelativePosition) {
		toSerialize["relativePosition"] = o.RelativePosition
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	if !IsNil(o.PriceRange) {
		toSerialize["priceRange"] = o.PriceRange
	}
	if !IsNil(o.OperationHours) {
		toSerialize["operationHours"] = o.OperationHours
	}
	if !IsNil(o.DisplaySeq) {
		toSerialize["displaySeq"] = o.DisplaySeq
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.InactiveDate) {
		toSerialize["inactiveDate"] = o.InactiveDate
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableAttractionCodeType struct {
	value *AttractionCodeType
	isSet bool
}

func (v NullableAttractionCodeType) Get() *AttractionCodeType {
	return v.value
}

func (v *NullableAttractionCodeType) Set(val *AttractionCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttractionCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttractionCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttractionCodeType(val *AttractionCodeType) *NullableAttractionCodeType {
	return &NullableAttractionCodeType{value: val, isSet: true}
}

func (v NullableAttractionCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttractionCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


