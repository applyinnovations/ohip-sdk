/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the UserDefinedFieldGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefinedFieldGroupType{}

// UserDefinedFieldGroupType Information representation of User Defined Field Group.
type UserDefinedFieldGroupType struct {
	// The Code of User Defined Field Group.
	GroupCode *string `json:"groupCode,omitempty"`
	// The Description of User Defined Field Group.
	Description *string `json:"description,omitempty"`
	DataType *UserDefinedFieldGroupDataType `json:"dataType,omitempty"`
	// Length of field values of User Defined Field Group.
	DataLength *float32 `json:"dataLength,omitempty"`
	// Indicates that if the group could be deleted. This is a readonly element an it is only used in the fetch operation.
	Protected *bool `json:"protected,omitempty"`
}

// NewUserDefinedFieldGroupType instantiates a new UserDefinedFieldGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefinedFieldGroupType() *UserDefinedFieldGroupType {
	this := UserDefinedFieldGroupType{}
	return &this
}

// NewUserDefinedFieldGroupTypeWithDefaults instantiates a new UserDefinedFieldGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefinedFieldGroupTypeWithDefaults() *UserDefinedFieldGroupType {
	this := UserDefinedFieldGroupType{}
	return &this
}

// GetGroupCode returns the GroupCode field value if set, zero value otherwise.
func (o *UserDefinedFieldGroupType) GetGroupCode() string {
	if o == nil || IsNil(o.GroupCode) {
		var ret string
		return ret
	}
	return *o.GroupCode
}

// GetGroupCodeOk returns a tuple with the GroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldGroupType) GetGroupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupCode) {
		return nil, false
	}
	return o.GroupCode, true
}

// HasGroupCode returns a boolean if a field has been set.
func (o *UserDefinedFieldGroupType) HasGroupCode() bool {
	if o != nil && !IsNil(o.GroupCode) {
		return true
	}

	return false
}

// SetGroupCode gets a reference to the given string and assigns it to the GroupCode field.
func (o *UserDefinedFieldGroupType) SetGroupCode(v string) {
	o.GroupCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserDefinedFieldGroupType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldGroupType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserDefinedFieldGroupType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserDefinedFieldGroupType) SetDescription(v string) {
	o.Description = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *UserDefinedFieldGroupType) GetDataType() UserDefinedFieldGroupDataType {
	if o == nil || IsNil(o.DataType) {
		var ret UserDefinedFieldGroupDataType
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldGroupType) GetDataTypeOk() (*UserDefinedFieldGroupDataType, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *UserDefinedFieldGroupType) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given UserDefinedFieldGroupDataType and assigns it to the DataType field.
func (o *UserDefinedFieldGroupType) SetDataType(v UserDefinedFieldGroupDataType) {
	o.DataType = &v
}

// GetDataLength returns the DataLength field value if set, zero value otherwise.
func (o *UserDefinedFieldGroupType) GetDataLength() float32 {
	if o == nil || IsNil(o.DataLength) {
		var ret float32
		return ret
	}
	return *o.DataLength
}

// GetDataLengthOk returns a tuple with the DataLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldGroupType) GetDataLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.DataLength) {
		return nil, false
	}
	return o.DataLength, true
}

// HasDataLength returns a boolean if a field has been set.
func (o *UserDefinedFieldGroupType) HasDataLength() bool {
	if o != nil && !IsNil(o.DataLength) {
		return true
	}

	return false
}

// SetDataLength gets a reference to the given float32 and assigns it to the DataLength field.
func (o *UserDefinedFieldGroupType) SetDataLength(v float32) {
	o.DataLength = &v
}

// GetProtected returns the Protected field value if set, zero value otherwise.
func (o *UserDefinedFieldGroupType) GetProtected() bool {
	if o == nil || IsNil(o.Protected) {
		var ret bool
		return ret
	}
	return *o.Protected
}

// GetProtectedOk returns a tuple with the Protected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedFieldGroupType) GetProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.Protected) {
		return nil, false
	}
	return o.Protected, true
}

// HasProtected returns a boolean if a field has been set.
func (o *UserDefinedFieldGroupType) HasProtected() bool {
	if o != nil && !IsNil(o.Protected) {
		return true
	}

	return false
}

// SetProtected gets a reference to the given bool and assigns it to the Protected field.
func (o *UserDefinedFieldGroupType) SetProtected(v bool) {
	o.Protected = &v
}

func (o UserDefinedFieldGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefinedFieldGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupCode) {
		toSerialize["groupCode"] = o.GroupCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.DataLength) {
		toSerialize["dataLength"] = o.DataLength
	}
	if !IsNil(o.Protected) {
		toSerialize["protected"] = o.Protected
	}
	return toSerialize, nil
}

type NullableUserDefinedFieldGroupType struct {
	value *UserDefinedFieldGroupType
	isSet bool
}

func (v NullableUserDefinedFieldGroupType) Get() *UserDefinedFieldGroupType {
	return v.value
}

func (v *NullableUserDefinedFieldGroupType) Set(val *UserDefinedFieldGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedFieldGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedFieldGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedFieldGroupType(val *UserDefinedFieldGroupType) *NullableUserDefinedFieldGroupType {
	return &NullableUserDefinedFieldGroupType{value: val, isSet: true}
}

func (v NullableUserDefinedFieldGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedFieldGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


