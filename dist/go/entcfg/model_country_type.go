/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the CountryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryType{}

// CountryType Base details of the country.
type CountryType struct {
	// Defines the mode used to invoke address doctor service.
	AddressDoctorMode *string `json:"addressDoctorMode,omitempty"`
	// Country code identifying the country.
	CountryCode *string `json:"countryCode,omitempty"`
	// Indicates if the country flag should be displayed.
	DisplayFlag *bool `json:"displayFlag,omitempty"`
	// Sequence number for displaying the countries.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Guest Address format Codes for confirmation letter.
	GuestAddressFormat *string `json:"guestAddressFormat,omitempty"`
	// Hotel code the country belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// ISO standard code for country.
	IsoCode *string `json:"isoCode,omitempty"`
	// ISO standard name for country.
	IsoName *string `json:"isoName,omitempty"`
	// Main Group of Country. Used in statistic reports.
	MainGroup *string `json:"mainGroup,omitempty"`
	// Name for the country.
	Name *string `json:"name,omitempty"`
	// Print Sequence number for report.
	PrintSequence *float32 `json:"printSequence,omitempty"`
	// Regin to which the Country belongs.
	RegionCode *string `json:"regionCode,omitempty"`
	// Statistic code for the country.
	StatisticCode *string `json:"statisticCode,omitempty"`
}

// NewCountryType instantiates a new CountryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryType() *CountryType {
	this := CountryType{}
	return &this
}

// NewCountryTypeWithDefaults instantiates a new CountryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryTypeWithDefaults() *CountryType {
	this := CountryType{}
	return &this
}

// GetAddressDoctorMode returns the AddressDoctorMode field value if set, zero value otherwise.
func (o *CountryType) GetAddressDoctorMode() string {
	if o == nil || IsNil(o.AddressDoctorMode) {
		var ret string
		return ret
	}
	return *o.AddressDoctorMode
}

// GetAddressDoctorModeOk returns a tuple with the AddressDoctorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetAddressDoctorModeOk() (*string, bool) {
	if o == nil || IsNil(o.AddressDoctorMode) {
		return nil, false
	}
	return o.AddressDoctorMode, true
}

// HasAddressDoctorMode returns a boolean if a field has been set.
func (o *CountryType) HasAddressDoctorMode() bool {
	if o != nil && !IsNil(o.AddressDoctorMode) {
		return true
	}

	return false
}

// SetAddressDoctorMode gets a reference to the given string and assigns it to the AddressDoctorMode field.
func (o *CountryType) SetAddressDoctorMode(v string) {
	o.AddressDoctorMode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *CountryType) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *CountryType) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *CountryType) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetDisplayFlag returns the DisplayFlag field value if set, zero value otherwise.
func (o *CountryType) GetDisplayFlag() bool {
	if o == nil || IsNil(o.DisplayFlag) {
		var ret bool
		return ret
	}
	return *o.DisplayFlag
}

// GetDisplayFlagOk returns a tuple with the DisplayFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetDisplayFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayFlag) {
		return nil, false
	}
	return o.DisplayFlag, true
}

// HasDisplayFlag returns a boolean if a field has been set.
func (o *CountryType) HasDisplayFlag() bool {
	if o != nil && !IsNil(o.DisplayFlag) {
		return true
	}

	return false
}

// SetDisplayFlag gets a reference to the given bool and assigns it to the DisplayFlag field.
func (o *CountryType) SetDisplayFlag(v bool) {
	o.DisplayFlag = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *CountryType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *CountryType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *CountryType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetGuestAddressFormat returns the GuestAddressFormat field value if set, zero value otherwise.
func (o *CountryType) GetGuestAddressFormat() string {
	if o == nil || IsNil(o.GuestAddressFormat) {
		var ret string
		return ret
	}
	return *o.GuestAddressFormat
}

// GetGuestAddressFormatOk returns a tuple with the GuestAddressFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetGuestAddressFormatOk() (*string, bool) {
	if o == nil || IsNil(o.GuestAddressFormat) {
		return nil, false
	}
	return o.GuestAddressFormat, true
}

// HasGuestAddressFormat returns a boolean if a field has been set.
func (o *CountryType) HasGuestAddressFormat() bool {
	if o != nil && !IsNil(o.GuestAddressFormat) {
		return true
	}

	return false
}

// SetGuestAddressFormat gets a reference to the given string and assigns it to the GuestAddressFormat field.
func (o *CountryType) SetGuestAddressFormat(v string) {
	o.GuestAddressFormat = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CountryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CountryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CountryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetIsoCode returns the IsoCode field value if set, zero value otherwise.
func (o *CountryType) GetIsoCode() string {
	if o == nil || IsNil(o.IsoCode) {
		var ret string
		return ret
	}
	return *o.IsoCode
}

// GetIsoCodeOk returns a tuple with the IsoCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetIsoCodeOk() (*string, bool) {
	if o == nil || IsNil(o.IsoCode) {
		return nil, false
	}
	return o.IsoCode, true
}

// HasIsoCode returns a boolean if a field has been set.
func (o *CountryType) HasIsoCode() bool {
	if o != nil && !IsNil(o.IsoCode) {
		return true
	}

	return false
}

// SetIsoCode gets a reference to the given string and assigns it to the IsoCode field.
func (o *CountryType) SetIsoCode(v string) {
	o.IsoCode = &v
}

// GetIsoName returns the IsoName field value if set, zero value otherwise.
func (o *CountryType) GetIsoName() string {
	if o == nil || IsNil(o.IsoName) {
		var ret string
		return ret
	}
	return *o.IsoName
}

// GetIsoNameOk returns a tuple with the IsoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetIsoNameOk() (*string, bool) {
	if o == nil || IsNil(o.IsoName) {
		return nil, false
	}
	return o.IsoName, true
}

// HasIsoName returns a boolean if a field has been set.
func (o *CountryType) HasIsoName() bool {
	if o != nil && !IsNil(o.IsoName) {
		return true
	}

	return false
}

// SetIsoName gets a reference to the given string and assigns it to the IsoName field.
func (o *CountryType) SetIsoName(v string) {
	o.IsoName = &v
}

// GetMainGroup returns the MainGroup field value if set, zero value otherwise.
func (o *CountryType) GetMainGroup() string {
	if o == nil || IsNil(o.MainGroup) {
		var ret string
		return ret
	}
	return *o.MainGroup
}

// GetMainGroupOk returns a tuple with the MainGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetMainGroupOk() (*string, bool) {
	if o == nil || IsNil(o.MainGroup) {
		return nil, false
	}
	return o.MainGroup, true
}

// HasMainGroup returns a boolean if a field has been set.
func (o *CountryType) HasMainGroup() bool {
	if o != nil && !IsNil(o.MainGroup) {
		return true
	}

	return false
}

// SetMainGroup gets a reference to the given string and assigns it to the MainGroup field.
func (o *CountryType) SetMainGroup(v string) {
	o.MainGroup = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CountryType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CountryType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CountryType) SetName(v string) {
	o.Name = &v
}

// GetPrintSequence returns the PrintSequence field value if set, zero value otherwise.
func (o *CountryType) GetPrintSequence() float32 {
	if o == nil || IsNil(o.PrintSequence) {
		var ret float32
		return ret
	}
	return *o.PrintSequence
}

// GetPrintSequenceOk returns a tuple with the PrintSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetPrintSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.PrintSequence) {
		return nil, false
	}
	return o.PrintSequence, true
}

// HasPrintSequence returns a boolean if a field has been set.
func (o *CountryType) HasPrintSequence() bool {
	if o != nil && !IsNil(o.PrintSequence) {
		return true
	}

	return false
}

// SetPrintSequence gets a reference to the given float32 and assigns it to the PrintSequence field.
func (o *CountryType) SetPrintSequence(v float32) {
	o.PrintSequence = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *CountryType) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *CountryType) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *CountryType) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetStatisticCode returns the StatisticCode field value if set, zero value otherwise.
func (o *CountryType) GetStatisticCode() string {
	if o == nil || IsNil(o.StatisticCode) {
		var ret string
		return ret
	}
	return *o.StatisticCode
}

// GetStatisticCodeOk returns a tuple with the StatisticCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryType) GetStatisticCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatisticCode) {
		return nil, false
	}
	return o.StatisticCode, true
}

// HasStatisticCode returns a boolean if a field has been set.
func (o *CountryType) HasStatisticCode() bool {
	if o != nil && !IsNil(o.StatisticCode) {
		return true
	}

	return false
}

// SetStatisticCode gets a reference to the given string and assigns it to the StatisticCode field.
func (o *CountryType) SetStatisticCode(v string) {
	o.StatisticCode = &v
}

func (o CountryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressDoctorMode) {
		toSerialize["addressDoctorMode"] = o.AddressDoctorMode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.DisplayFlag) {
		toSerialize["displayFlag"] = o.DisplayFlag
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.GuestAddressFormat) {
		toSerialize["guestAddressFormat"] = o.GuestAddressFormat
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.IsoCode) {
		toSerialize["isoCode"] = o.IsoCode
	}
	if !IsNil(o.IsoName) {
		toSerialize["isoName"] = o.IsoName
	}
	if !IsNil(o.MainGroup) {
		toSerialize["mainGroup"] = o.MainGroup
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PrintSequence) {
		toSerialize["printSequence"] = o.PrintSequence
	}
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	if !IsNil(o.StatisticCode) {
		toSerialize["statisticCode"] = o.StatisticCode
	}
	return toSerialize, nil
}

type NullableCountryType struct {
	value *CountryType
	isSet bool
}

func (v NullableCountryType) Get() *CountryType {
	return v.value
}

func (v *NullableCountryType) Set(val *CountryType) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryType) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryType(val *CountryType) *NullableCountryType {
	return &NullableCountryType{value: val, isSet: true}
}

func (v NullableCountryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


