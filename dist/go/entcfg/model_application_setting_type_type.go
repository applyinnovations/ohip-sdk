/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
	"fmt"
)

// ApplicationSettingTypeType the model 'ApplicationSettingTypeType'
type ApplicationSettingTypeType string

// List of applicationSettingTypeType
const (
	APPLICATIONSETTINGTYPETYPE_FUNCTION ApplicationSettingTypeType = "Function"
	APPLICATIONSETTINGTYPETYPE_PARAMETER ApplicationSettingTypeType = "Parameter"
	APPLICATIONSETTINGTYPETYPE_SETTING ApplicationSettingTypeType = "Setting"
)

// All allowed values of ApplicationSettingTypeType enum
var AllowedApplicationSettingTypeTypeEnumValues = []ApplicationSettingTypeType{
	"Function",
	"Parameter",
	"Setting",
}

func (v *ApplicationSettingTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationSettingTypeType(value)
	for _, existing := range AllowedApplicationSettingTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationSettingTypeType", value)
}

// NewApplicationSettingTypeTypeFromValue returns a pointer to a valid ApplicationSettingTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationSettingTypeTypeFromValue(v string) (*ApplicationSettingTypeType, error) {
	ev := ApplicationSettingTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationSettingTypeType: valid values are %v", v, AllowedApplicationSettingTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationSettingTypeType) IsValid() bool {
	for _, existing := range AllowedApplicationSettingTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to applicationSettingTypeType value
func (v ApplicationSettingTypeType) Ptr() *ApplicationSettingTypeType {
	return &v
}

type NullableApplicationSettingTypeType struct {
	value *ApplicationSettingTypeType
	isSet bool
}

func (v NullableApplicationSettingTypeType) Get() *ApplicationSettingTypeType {
	return v.value
}

func (v *NullableApplicationSettingTypeType) Set(val *ApplicationSettingTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSettingTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSettingTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSettingTypeType(val *ApplicationSettingTypeType) *NullableApplicationSettingTypeType {
	return &NullableApplicationSettingTypeType{value: val, isSet: true}
}

func (v NullableApplicationSettingTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSettingTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

