/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the FlexFieldType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlexFieldType{}

// FlexFieldType Provides the details of a flex field
type FlexFieldType struct {
	Module *FlexFieldModuleType `json:"module,omitempty"`
	// Flex field code
	Code *string `json:"code,omitempty"`
	// Unique ID of the flex field
	FlexFieldId *float32 `json:"flexFieldId,omitempty"`
	// Description of the flex field
	Description *string `json:"description,omitempty"`
	// Sequence of the flex field
	Sequence *float32 `json:"sequence,omitempty"`
	// Name of the flex field LOV
	LovName *string `json:"lovName,omitempty"`
	// Indicates whether the flex field is mandatory or not
	IsMandatory *bool `json:"isMandatory,omitempty"`
	// Indicates whether the flex field is a LOV or not
	IsLov *bool `json:"isLov,omitempty"`
	// Indicates whether the flex field is multi-select or not
	IsMultiSelectLov *bool `json:"isMultiSelectLov,omitempty"`
	// Indicates whether the flex field is active or not
	IsInactive *bool `json:"isInactive,omitempty"`
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
	// Profile Type
	ProfileType *string `json:"profileType,omitempty"`
}

// NewFlexFieldType instantiates a new FlexFieldType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlexFieldType() *FlexFieldType {
	this := FlexFieldType{}
	return &this
}

// NewFlexFieldTypeWithDefaults instantiates a new FlexFieldType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlexFieldTypeWithDefaults() *FlexFieldType {
	this := FlexFieldType{}
	return &this
}

// GetModule returns the Module field value if set, zero value otherwise.
func (o *FlexFieldType) GetModule() FlexFieldModuleType {
	if o == nil || IsNil(o.Module) {
		var ret FlexFieldModuleType
		return ret
	}
	return *o.Module
}

// GetModuleOk returns a tuple with the Module field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetModuleOk() (*FlexFieldModuleType, bool) {
	if o == nil || IsNil(o.Module) {
		return nil, false
	}
	return o.Module, true
}

// HasModule returns a boolean if a field has been set.
func (o *FlexFieldType) HasModule() bool {
	if o != nil && !IsNil(o.Module) {
		return true
	}

	return false
}

// SetModule gets a reference to the given FlexFieldModuleType and assigns it to the Module field.
func (o *FlexFieldType) SetModule(v FlexFieldModuleType) {
	o.Module = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FlexFieldType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FlexFieldType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FlexFieldType) SetCode(v string) {
	o.Code = &v
}

// GetFlexFieldId returns the FlexFieldId field value if set, zero value otherwise.
func (o *FlexFieldType) GetFlexFieldId() float32 {
	if o == nil || IsNil(o.FlexFieldId) {
		var ret float32
		return ret
	}
	return *o.FlexFieldId
}

// GetFlexFieldIdOk returns a tuple with the FlexFieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetFlexFieldIdOk() (*float32, bool) {
	if o == nil || IsNil(o.FlexFieldId) {
		return nil, false
	}
	return o.FlexFieldId, true
}

// HasFlexFieldId returns a boolean if a field has been set.
func (o *FlexFieldType) HasFlexFieldId() bool {
	if o != nil && !IsNil(o.FlexFieldId) {
		return true
	}

	return false
}

// SetFlexFieldId gets a reference to the given float32 and assigns it to the FlexFieldId field.
func (o *FlexFieldType) SetFlexFieldId(v float32) {
	o.FlexFieldId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FlexFieldType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FlexFieldType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FlexFieldType) SetDescription(v string) {
	o.Description = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *FlexFieldType) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *FlexFieldType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *FlexFieldType) SetSequence(v float32) {
	o.Sequence = &v
}

// GetLovName returns the LovName field value if set, zero value otherwise.
func (o *FlexFieldType) GetLovName() string {
	if o == nil || IsNil(o.LovName) {
		var ret string
		return ret
	}
	return *o.LovName
}

// GetLovNameOk returns a tuple with the LovName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetLovNameOk() (*string, bool) {
	if o == nil || IsNil(o.LovName) {
		return nil, false
	}
	return o.LovName, true
}

// HasLovName returns a boolean if a field has been set.
func (o *FlexFieldType) HasLovName() bool {
	if o != nil && !IsNil(o.LovName) {
		return true
	}

	return false
}

// SetLovName gets a reference to the given string and assigns it to the LovName field.
func (o *FlexFieldType) SetLovName(v string) {
	o.LovName = &v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *FlexFieldType) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *FlexFieldType) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *FlexFieldType) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

// GetIsLov returns the IsLov field value if set, zero value otherwise.
func (o *FlexFieldType) GetIsLov() bool {
	if o == nil || IsNil(o.IsLov) {
		var ret bool
		return ret
	}
	return *o.IsLov
}

// GetIsLovOk returns a tuple with the IsLov field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetIsLovOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLov) {
		return nil, false
	}
	return o.IsLov, true
}

// HasIsLov returns a boolean if a field has been set.
func (o *FlexFieldType) HasIsLov() bool {
	if o != nil && !IsNil(o.IsLov) {
		return true
	}

	return false
}

// SetIsLov gets a reference to the given bool and assigns it to the IsLov field.
func (o *FlexFieldType) SetIsLov(v bool) {
	o.IsLov = &v
}

// GetIsMultiSelectLov returns the IsMultiSelectLov field value if set, zero value otherwise.
func (o *FlexFieldType) GetIsMultiSelectLov() bool {
	if o == nil || IsNil(o.IsMultiSelectLov) {
		var ret bool
		return ret
	}
	return *o.IsMultiSelectLov
}

// GetIsMultiSelectLovOk returns a tuple with the IsMultiSelectLov field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetIsMultiSelectLovOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMultiSelectLov) {
		return nil, false
	}
	return o.IsMultiSelectLov, true
}

// HasIsMultiSelectLov returns a boolean if a field has been set.
func (o *FlexFieldType) HasIsMultiSelectLov() bool {
	if o != nil && !IsNil(o.IsMultiSelectLov) {
		return true
	}

	return false
}

// SetIsMultiSelectLov gets a reference to the given bool and assigns it to the IsMultiSelectLov field.
func (o *FlexFieldType) SetIsMultiSelectLov(v bool) {
	o.IsMultiSelectLov = &v
}

// GetIsInactive returns the IsInactive field value if set, zero value otherwise.
func (o *FlexFieldType) GetIsInactive() bool {
	if o == nil || IsNil(o.IsInactive) {
		var ret bool
		return ret
	}
	return *o.IsInactive
}

// GetIsInactiveOk returns a tuple with the IsInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetIsInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInactive) {
		return nil, false
	}
	return o.IsInactive, true
}

// HasIsInactive returns a boolean if a field has been set.
func (o *FlexFieldType) HasIsInactive() bool {
	if o != nil && !IsNil(o.IsInactive) {
		return true
	}

	return false
}

// SetIsInactive gets a reference to the given bool and assigns it to the IsInactive field.
func (o *FlexFieldType) SetIsInactive(v bool) {
	o.IsInactive = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FlexFieldType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FlexFieldType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FlexFieldType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *FlexFieldType) GetProfileType() string {
	if o == nil || IsNil(o.ProfileType) {
		var ret string
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldType) GetProfileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *FlexFieldType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given string and assigns it to the ProfileType field.
func (o *FlexFieldType) SetProfileType(v string) {
	o.ProfileType = &v
}

func (o FlexFieldType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlexFieldType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Module) {
		toSerialize["module"] = o.Module
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.FlexFieldId) {
		toSerialize["flexFieldId"] = o.FlexFieldId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.LovName) {
		toSerialize["lovName"] = o.LovName
	}
	if !IsNil(o.IsMandatory) {
		toSerialize["isMandatory"] = o.IsMandatory
	}
	if !IsNil(o.IsLov) {
		toSerialize["isLov"] = o.IsLov
	}
	if !IsNil(o.IsMultiSelectLov) {
		toSerialize["isMultiSelectLov"] = o.IsMultiSelectLov
	}
	if !IsNil(o.IsInactive) {
		toSerialize["isInactive"] = o.IsInactive
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	return toSerialize, nil
}

type NullableFlexFieldType struct {
	value *FlexFieldType
	isSet bool
}

func (v NullableFlexFieldType) Get() *FlexFieldType {
	return v.value
}

func (v *NullableFlexFieldType) Set(val *FlexFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableFlexFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableFlexFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlexFieldType(val *FlexFieldType) *NullableFlexFieldType {
	return &NullableFlexFieldType{value: val, isSet: true}
}

func (v NullableFlexFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlexFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


