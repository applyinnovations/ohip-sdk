/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the RelativePositionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelativePositionType{}

// RelativePositionType Defines the position of an entity in relation to another entity (e.g. from an airport to a hotel, the relationship is dependent on use).
type RelativePositionType struct {
	// Defines the distance between two points.
	Distance *float32 `json:"distance,omitempty"`
	// The unit of measure in a code format.
	DistanceType *string `json:"distanceType,omitempty"`
	// The driving time in a free text format.
	DrivingTime *string `json:"drivingTime,omitempty"`
}

// NewRelativePositionType instantiates a new RelativePositionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelativePositionType() *RelativePositionType {
	this := RelativePositionType{}
	return &this
}

// NewRelativePositionTypeWithDefaults instantiates a new RelativePositionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelativePositionTypeWithDefaults() *RelativePositionType {
	this := RelativePositionType{}
	return &this
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *RelativePositionType) GetDistance() float32 {
	if o == nil || IsNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativePositionType) GetDistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *RelativePositionType) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *RelativePositionType) SetDistance(v float32) {
	o.Distance = &v
}

// GetDistanceType returns the DistanceType field value if set, zero value otherwise.
func (o *RelativePositionType) GetDistanceType() string {
	if o == nil || IsNil(o.DistanceType) {
		var ret string
		return ret
	}
	return *o.DistanceType
}

// GetDistanceTypeOk returns a tuple with the DistanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativePositionType) GetDistanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DistanceType) {
		return nil, false
	}
	return o.DistanceType, true
}

// HasDistanceType returns a boolean if a field has been set.
func (o *RelativePositionType) HasDistanceType() bool {
	if o != nil && !IsNil(o.DistanceType) {
		return true
	}

	return false
}

// SetDistanceType gets a reference to the given string and assigns it to the DistanceType field.
func (o *RelativePositionType) SetDistanceType(v string) {
	o.DistanceType = &v
}

// GetDrivingTime returns the DrivingTime field value if set, zero value otherwise.
func (o *RelativePositionType) GetDrivingTime() string {
	if o == nil || IsNil(o.DrivingTime) {
		var ret string
		return ret
	}
	return *o.DrivingTime
}

// GetDrivingTimeOk returns a tuple with the DrivingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativePositionType) GetDrivingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DrivingTime) {
		return nil, false
	}
	return o.DrivingTime, true
}

// HasDrivingTime returns a boolean if a field has been set.
func (o *RelativePositionType) HasDrivingTime() bool {
	if o != nil && !IsNil(o.DrivingTime) {
		return true
	}

	return false
}

// SetDrivingTime gets a reference to the given string and assigns it to the DrivingTime field.
func (o *RelativePositionType) SetDrivingTime(v string) {
	o.DrivingTime = &v
}

func (o RelativePositionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelativePositionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.DistanceType) {
		toSerialize["distanceType"] = o.DistanceType
	}
	if !IsNil(o.DrivingTime) {
		toSerialize["drivingTime"] = o.DrivingTime
	}
	return toSerialize, nil
}

type NullableRelativePositionType struct {
	value *RelativePositionType
	isSet bool
}

func (v NullableRelativePositionType) Get() *RelativePositionType {
	return v.value
}

func (v *NullableRelativePositionType) Set(val *RelativePositionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRelativePositionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRelativePositionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelativePositionType(val *RelativePositionType) *NullableRelativePositionType {
	return &NullableRelativePositionType{value: val, isSet: true}
}

func (v NullableRelativePositionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelativePositionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


