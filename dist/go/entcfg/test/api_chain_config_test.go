/*
OPERA Cloud Enterprise Configuration API

Testing ChainConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package entcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/entcfg"
)

func Test_entcfg_ChainConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigAPIService ChangeBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeBrandCodes(context.Background(), brandCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessUnitCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeCorporateBusinessUnits(context.Background(), businessUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeCorporateDepartmentCodes(context.Background(), departmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var divisionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeCorporateDivisions(context.Background(), divisionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingUnitCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeCorporateOperatingUnits(context.Background(), operatingUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeCountryGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeCountryMainGroups(context.Background(), groupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeHotelCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var noteTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeNoteTypes(context.Background(), noteTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangePropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangePropertyDetailCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var regionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeRegionsCode(context.Background(), regionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeTemplateCodes(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfGroupCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeUserDefinedFieldGroups(context.Background(), udfGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfValue string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeUserDefinedFieldValues(context.Background(), udfValue).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionClassCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteAttractionClasses(context.Background(), attractionClassCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteChainConfigServicesCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteChainConfigServicesCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var communicationMethodsEntDetailsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteCommunicationMethodsEntDetails(context.Background(), communicationMethodsEntDetailsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteFlexField", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flexFieldId float32
		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteFlexField(context.Background(), flexFieldId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketingRegionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteMarketingRegions(context.Background(), marketingRegionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeletePropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var propertyTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeletePropertyTypes(context.Background(), propertyTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomAmenitiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteRoomAmenities(context.Background(), roomAmenitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetAttractionClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBrandCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCommunicationMethodsEntDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCorporateBusinessUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCorporateDepartmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCorporateDivisions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCorporateOperatingUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCountryGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCountryMainGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetDefaultNote", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetDefaultNote(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetFlexField", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flexFieldId float32
		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigAPI.GetFlexField(context.Background(), flexFieldId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetFlexFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetFlexFields(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetHotelCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMarketingCitiesByRegion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMarketingCitiesByRegion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMarketingRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetNoteTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetPropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetPropertyDetailCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetPropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetPropertyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetRegionsCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetRoomAmenities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetTemplateCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetUserDefinedFieldGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetUserDefinedFieldValues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PingChainConfigServices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PingChainConfigServices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostAttractionClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBrandCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCommunicationMethodsEntDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCorporateBusinessUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCorporateDepartmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCorporateDivisions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCorporateOperatingUnits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCountryGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCountryMainGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostFlexField", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostFlexField(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostHotelCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostMarketingRegions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostNoteTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostPropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostPropertyDetailCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostPropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostPropertyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostRegionsCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostRoomAmenities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostTemplateCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostUserDefinedFieldGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostUserDefinedFieldValues(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutAttractionClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionClassCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutAttractionClasses(context.Background(), attractionClassCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chainCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutChain(context.Background(), chainCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutCommunicationMethodsEntDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var communicationMethodsEntDetailsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutCommunicationMethodsEntDetails(context.Background(), communicationMethodsEntDetailsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutMarketingRegions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketingRegionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutMarketingRegions(context.Background(), marketingRegionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutPropertyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var propertyTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutPropertyTypes(context.Background(), propertyTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutRoomAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomAmenitiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutRoomAmenities(context.Background(), roomAmenitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveBrandCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var brandCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveBrandCodes(context.Background(), brandCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveCorporateBusinessUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessUnitCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveCorporateBusinessUnits(context.Background(), businessUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveCorporateDepartmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveCorporateDepartmentCodes(context.Background(), departmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveCorporateDivisions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var divisionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveCorporateDivisions(context.Background(), divisionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveCorporateOperatingUnits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var operatingUnitCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveCorporateOperatingUnits(context.Background(), operatingUnitCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveCountryGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveCountryGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveCountryMainGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveCountryMainGroups(context.Background(), groupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveHotelCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveHotelCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveNoteTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var noteTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveNoteTypes(context.Background(), noteTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemovePropertyDetailCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemovePropertyDetailCategories(context.Background(), categoryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveRegionsCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var regionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveRegionsCode(context.Background(), regionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveTemplateCodes(context.Background(), code).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveUserDefinedFieldGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfGroupCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveUserDefinedFieldGroups(context.Background(), udfGroupCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveUserDefinedFieldValues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var udfValue string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveUserDefinedFieldValues(context.Background(), udfValue).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService UpdateFlexField", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flexFieldId float32
		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigAPI.UpdateFlexField(context.Background(), flexFieldId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
