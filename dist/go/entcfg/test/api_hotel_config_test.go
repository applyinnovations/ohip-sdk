/*
OPERA Cloud Enterprise Configuration API

Testing HotelConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package entcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/entcfg"
)

func Test_entcfg_HotelConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HotelConfigAPIService ChangeAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var airportCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeAirports(context.Background(), airportCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeAlternateHotels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alternateHotelId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeAlternateHotels(context.Background(), alternateHotelId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeAmenities(context.Background(), featureCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeAttractionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeAttractionTemplates(context.Background(), attractionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeAttractions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeAttractions(context.Background(), attractionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeCountries(context.Background(), countryCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeCreditCardTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeCreditCardTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeDepartments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeDepartments(context.Background(), departmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHotelContacts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHotelContacts(context.Background(), contactId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHotelDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHotelDayTypeCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHotelNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var noteCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHotelNotes(context.Background(), noteCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHotelRateRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHotelRateRanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeHotelRestaurants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var restaurantCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeHotelRestaurants(context.Background(), restaurantCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobTitleCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeJobTitles(context.Background(), jobTitleCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeLanguages(context.Background(), languageCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cityCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeMarketingCities(context.Background(), cityCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTelephoneBookCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTelephoneBookCategories(context.Background(), categoryCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTelephoneBookEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entryId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTelephoneBookEntries(context.Background(), entryId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var airportCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateAirports(context.Background(), airportCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateAmenities(context.Background(), featureCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateCountries(context.Background(), countryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateDayTypeCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateHotelDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateHotelDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobTitleCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateJobTitles(context.Background(), jobTitleCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTemplateMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cityCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTemplateMarketingCities(context.Background(), cityCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTransportation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transportationCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTransportation(context.Background(), transportationCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeTransportationTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transportationCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeTransportationTemplates(context.Background(), transportationCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeYieldAdjustmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var yieldAdjustmentCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeYieldAdjustmentCodes(context.Background(), yieldAdjustmentCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeYieldCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeYieldCategories(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService ChangeYieldMarketTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.ChangeYieldMarketTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyDepartments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyDepartments(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyHotelDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyHotelDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyMarketingCities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyTemplateCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyTemplateCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyYieldAdjustmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyYieldAdjustmentCodes(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService CopyYieldCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.CopyYieldCategories(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService DeleteHotelConfigServicesCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.DeleteHotelConfigServicesCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetAirports(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetAmenities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetAttractionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetAttractionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetAttractions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetAttractions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetConfigActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetConfigActivityLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetCountries(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetCreditCardTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetCreditCardTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetCurrencyExchangeRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetCurrencyExchangeRates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetDepartments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetDepartments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHotel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHotel(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHotelBrochure", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHotelBrochure(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHotelCalendar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHotelCalendar(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHotelDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHotelDayTypeCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHotelDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHotelDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetHotels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetHotels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetJobTitles(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetLanguages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetMarketingCities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetOperaHotelContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetOperaHotelContext(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetOperaParameters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetOperaParameters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetOperaSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetOperaSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetPropertyCalendar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetPropertyCalendar(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTelephoneBookCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTelephoneBookCategories(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTelephoneBookEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTelephoneBookEntries(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateAirports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateAmenities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateCountries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateDayTypeCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateHotelDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateHotelDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateJobTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTemplateMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTemplateMarketingCities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTransportation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTransportation(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetTransportationTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetTransportationTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetYieldAdjustmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetYieldAdjustmentCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetYieldCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.GetYieldCategories(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService GetYieldMarketTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.GetYieldMarketTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PingHotelConfigServices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PingHotelConfigServices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostAirports(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostAlternateHotels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostAlternateHotels(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostAmenities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostAttractionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostAttractionTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostAttractions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostAttractions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostConfigActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostConfigActivityLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostCreditCardTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostCreditCardTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostDepartments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostDepartments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHotelContacts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHotelContacts(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHotelDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHotelDayTypeCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHotelNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHotelNotes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHotelRateRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHotelRateRanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostHotelRestaurants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostHotelRestaurants(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostJobTitles(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostLanguages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostMarketingCities(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTelephoneBookCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTelephoneBookCategories(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTelephoneBookEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTelephoneBookEntries(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateAirports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateAmenities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateCountries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateDayTypeCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateHotelDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateHotelDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateJobTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTemplateMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTemplateMarketingCities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTransportation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTransportation(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostTransportationTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostTransportationTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostYieldAdjustmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostYieldAdjustmentCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostYieldCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PostYieldCategories(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PostYieldMarketTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.PostYieldMarketTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService PutHotel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.PutHotel(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var airportCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveAirports(context.Background(), airportCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveAlternateHotels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alternateHotelId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveAlternateHotels(context.Background(), alternateHotelId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveAmenities(context.Background(), featureCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveAttractionTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveAttractionTemplates(context.Background(), attractionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveAttractions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveAttractions(context.Background(), attractionCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveAttractionsByCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attractionCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveAttractionsByCode(context.Background(), attractionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveCreditCardTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveCreditCardTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveDayTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dayType string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveDayTypes(context.Background(), dayType).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveDepartments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var departmentCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveDepartments(context.Background(), departmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHotelContacts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHotelContacts(context.Background(), contactId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHotelDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHotelDayTypeCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHotelEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHotelEvents(context.Background(), eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHotelNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var noteCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHotelNotes(context.Background(), noteCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHotelRateRanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHotelRateRanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveHotelRestaurants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var restaurantCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveHotelRestaurants(context.Background(), restaurantCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobTitleCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveJobTitles(context.Background(), jobTitleCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var languageCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveLanguages(context.Background(), languageCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cityCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveMarketingCities(context.Background(), cityCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTelephoneBookCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTelephoneBookCategories(context.Background(), categoryCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTelephoneBookEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entryId string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTelephoneBookEntries(context.Background(), entryId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTelephoneBookEntriesWithoutHotelId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entryId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTelephoneBookEntriesWithoutHotelId(context.Background(), entryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateAirports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var airportCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateAirports(context.Background(), airportCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateAmenities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var featureCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateAmenities(context.Background(), featureCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateCountries(context.Background(), countryCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateDayTypeCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateDayTypeCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateHotelDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateHotelDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateJobTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var jobTitleCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateJobTitles(context.Background(), jobTitleCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTemplateMarketingCities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cityCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTemplateMarketingCities(context.Background(), cityCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTransportation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transportationCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTransportation(context.Background(), transportationCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveTransportationTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transportationCode string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveTransportationTemplates(context.Background(), transportationCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveYieldAdjustmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var yieldAdjustmentCode string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveYieldAdjustmentCodes(context.Background(), yieldAdjustmentCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveYieldCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveYieldCategories(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService RemoveYieldMarketTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var code string
		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.RemoveYieldMarketTypes(context.Background(), code, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService SetDayTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HotelConfigAPI.SetDayTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HotelConfigAPIService SetHotelEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HotelConfigAPI.SetHotelEvents(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
