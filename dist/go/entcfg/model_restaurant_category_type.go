/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
	"fmt"
)

// RestaurantCategoryType Simple type for Hotel Restaurant.
type RestaurantCategoryType string

// List of restaurantCategoryType
const (
	RESTAURANTCATEGORYTYPE_RESTAURANT RestaurantCategoryType = "Restaurant"
	RESTAURANTCATEGORYTYPE_RETAIL RestaurantCategoryType = "Retail"
)

// All allowed values of RestaurantCategoryType enum
var AllowedRestaurantCategoryTypeEnumValues = []RestaurantCategoryType{
	"Restaurant",
	"Retail",
}

func (v *RestaurantCategoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RestaurantCategoryType(value)
	for _, existing := range AllowedRestaurantCategoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RestaurantCategoryType", value)
}

// NewRestaurantCategoryTypeFromValue returns a pointer to a valid RestaurantCategoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRestaurantCategoryTypeFromValue(v string) (*RestaurantCategoryType, error) {
	ev := RestaurantCategoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RestaurantCategoryType: valid values are %v", v, AllowedRestaurantCategoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RestaurantCategoryType) IsValid() bool {
	for _, existing := range AllowedRestaurantCategoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to restaurantCategoryType value
func (v RestaurantCategoryType) Ptr() *RestaurantCategoryType {
	return &v
}

type NullableRestaurantCategoryType struct {
	value *RestaurantCategoryType
	isSet bool
}

func (v NullableRestaurantCategoryType) Get() *RestaurantCategoryType {
	return v.value
}

func (v *NullableRestaurantCategoryType) Set(val *RestaurantCategoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestaurantCategoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestaurantCategoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestaurantCategoryType(val *RestaurantCategoryType) *NullableRestaurantCategoryType {
	return &NullableRestaurantCategoryType{value: val, isSet: true}
}

func (v NullableRestaurantCategoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestaurantCategoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

