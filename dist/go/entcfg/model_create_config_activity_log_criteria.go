/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the CreateConfigActivityLogCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateConfigActivityLogCriteria{}

// CreateConfigActivityLogCriteria Request object for creating Config Activity Logs.
type CreateConfigActivityLogCriteria struct {
	// Changes log record to import/Export/Delete customization operations.
	ConfigActivities []ConfigActivityType `json:"configActivities,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCreateConfigActivityLogCriteria instantiates a new CreateConfigActivityLogCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateConfigActivityLogCriteria() *CreateConfigActivityLogCriteria {
	this := CreateConfigActivityLogCriteria{}
	return &this
}

// NewCreateConfigActivityLogCriteriaWithDefaults instantiates a new CreateConfigActivityLogCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateConfigActivityLogCriteriaWithDefaults() *CreateConfigActivityLogCriteria {
	this := CreateConfigActivityLogCriteria{}
	return &this
}

// GetConfigActivities returns the ConfigActivities field value if set, zero value otherwise.
func (o *CreateConfigActivityLogCriteria) GetConfigActivities() []ConfigActivityType {
	if o == nil || IsNil(o.ConfigActivities) {
		var ret []ConfigActivityType
		return ret
	}
	return o.ConfigActivities
}

// GetConfigActivitiesOk returns a tuple with the ConfigActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConfigActivityLogCriteria) GetConfigActivitiesOk() ([]ConfigActivityType, bool) {
	if o == nil || IsNil(o.ConfigActivities) {
		return nil, false
	}
	return o.ConfigActivities, true
}

// HasConfigActivities returns a boolean if a field has been set.
func (o *CreateConfigActivityLogCriteria) HasConfigActivities() bool {
	if o != nil && !IsNil(o.ConfigActivities) {
		return true
	}

	return false
}

// SetConfigActivities gets a reference to the given []ConfigActivityType and assigns it to the ConfigActivities field.
func (o *CreateConfigActivityLogCriteria) SetConfigActivities(v []ConfigActivityType) {
	o.ConfigActivities = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CreateConfigActivityLogCriteria) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateConfigActivityLogCriteria) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CreateConfigActivityLogCriteria) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CreateConfigActivityLogCriteria) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CreateConfigActivityLogCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateConfigActivityLogCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigActivities) {
		toSerialize["configActivities"] = o.ConfigActivities
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCreateConfigActivityLogCriteria struct {
	value *CreateConfigActivityLogCriteria
	isSet bool
}

func (v NullableCreateConfigActivityLogCriteria) Get() *CreateConfigActivityLogCriteria {
	return v.value
}

func (v *NullableCreateConfigActivityLogCriteria) Set(val *CreateConfigActivityLogCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateConfigActivityLogCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateConfigActivityLogCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateConfigActivityLogCriteria(val *CreateConfigActivityLogCriteria) *NullableCreateConfigActivityLogCriteria {
	return &NullableCreateConfigActivityLogCriteria{value: val, isSet: true}
}

func (v NullableCreateConfigActivityLogCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateConfigActivityLogCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


