/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the TemplateMarketingCityConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateMarketingCityConfigType{}

// TemplateMarketingCityConfigType Base details of the marketing city.
type TemplateMarketingCityConfigType struct {
	// Description of the marketing city.
	Description *string `json:"description,omitempty"`
	// Distance from the hotel to the marketing city.
	Distance *float32 `json:"distance,omitempty"`
	// Unit of distance for the Distance measurement.
	DistanceType *string `json:"distanceType,omitempty"`
	// Driving time from the hotel to the marketing city.
	DrivingTime *string `json:"drivingTime,omitempty"`
	// Direction of the marketing city in relation to the hotel.
	Direction *string `json:"direction,omitempty"`
	// Sequence number for displaying the marketing city.
	Sequence *int32 `json:"sequence,omitempty"`
	// Flag to indicate whether the marketing city is inactive or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Marketing city code.
	MarketingCity *string `json:"marketingCity,omitempty"`
	// Region that the marketing city belongs to.
	RegionCode *string `json:"regionCode,omitempty"`
	// New region code to change the marketing city to. Template marketing cities allow editing of the region code. Because this is a key field we need to retain the original region code to locate the appropriate record to update. The original region code element is located in MarketingCityBaseType.
	NewRegionCode *string `json:"newRegionCode,omitempty"`
}

// NewTemplateMarketingCityConfigType instantiates a new TemplateMarketingCityConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateMarketingCityConfigType() *TemplateMarketingCityConfigType {
	this := TemplateMarketingCityConfigType{}
	return &this
}

// NewTemplateMarketingCityConfigTypeWithDefaults instantiates a new TemplateMarketingCityConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateMarketingCityConfigTypeWithDefaults() *TemplateMarketingCityConfigType {
	this := TemplateMarketingCityConfigType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TemplateMarketingCityConfigType) SetDescription(v string) {
	o.Description = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetDistance() float32 {
	if o == nil || IsNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetDistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *TemplateMarketingCityConfigType) SetDistance(v float32) {
	o.Distance = &v
}

// GetDistanceType returns the DistanceType field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetDistanceType() string {
	if o == nil || IsNil(o.DistanceType) {
		var ret string
		return ret
	}
	return *o.DistanceType
}

// GetDistanceTypeOk returns a tuple with the DistanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetDistanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DistanceType) {
		return nil, false
	}
	return o.DistanceType, true
}

// HasDistanceType returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasDistanceType() bool {
	if o != nil && !IsNil(o.DistanceType) {
		return true
	}

	return false
}

// SetDistanceType gets a reference to the given string and assigns it to the DistanceType field.
func (o *TemplateMarketingCityConfigType) SetDistanceType(v string) {
	o.DistanceType = &v
}

// GetDrivingTime returns the DrivingTime field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetDrivingTime() string {
	if o == nil || IsNil(o.DrivingTime) {
		var ret string
		return ret
	}
	return *o.DrivingTime
}

// GetDrivingTimeOk returns a tuple with the DrivingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetDrivingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DrivingTime) {
		return nil, false
	}
	return o.DrivingTime, true
}

// HasDrivingTime returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasDrivingTime() bool {
	if o != nil && !IsNil(o.DrivingTime) {
		return true
	}

	return false
}

// SetDrivingTime gets a reference to the given string and assigns it to the DrivingTime field.
func (o *TemplateMarketingCityConfigType) SetDrivingTime(v string) {
	o.DrivingTime = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *TemplateMarketingCityConfigType) SetDirection(v string) {
	o.Direction = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *TemplateMarketingCityConfigType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *TemplateMarketingCityConfigType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetMarketingCity returns the MarketingCity field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetMarketingCity() string {
	if o == nil || IsNil(o.MarketingCity) {
		var ret string
		return ret
	}
	return *o.MarketingCity
}

// GetMarketingCityOk returns a tuple with the MarketingCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetMarketingCityOk() (*string, bool) {
	if o == nil || IsNil(o.MarketingCity) {
		return nil, false
	}
	return o.MarketingCity, true
}

// HasMarketingCity returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasMarketingCity() bool {
	if o != nil && !IsNil(o.MarketingCity) {
		return true
	}

	return false
}

// SetMarketingCity gets a reference to the given string and assigns it to the MarketingCity field.
func (o *TemplateMarketingCityConfigType) SetMarketingCity(v string) {
	o.MarketingCity = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetRegionCode() string {
	if o == nil || IsNil(o.RegionCode) {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RegionCode) {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasRegionCode() bool {
	if o != nil && !IsNil(o.RegionCode) {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *TemplateMarketingCityConfigType) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetNewRegionCode returns the NewRegionCode field value if set, zero value otherwise.
func (o *TemplateMarketingCityConfigType) GetNewRegionCode() string {
	if o == nil || IsNil(o.NewRegionCode) {
		var ret string
		return ret
	}
	return *o.NewRegionCode
}

// GetNewRegionCodeOk returns a tuple with the NewRegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateMarketingCityConfigType) GetNewRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.NewRegionCode) {
		return nil, false
	}
	return o.NewRegionCode, true
}

// HasNewRegionCode returns a boolean if a field has been set.
func (o *TemplateMarketingCityConfigType) HasNewRegionCode() bool {
	if o != nil && !IsNil(o.NewRegionCode) {
		return true
	}

	return false
}

// SetNewRegionCode gets a reference to the given string and assigns it to the NewRegionCode field.
func (o *TemplateMarketingCityConfigType) SetNewRegionCode(v string) {
	o.NewRegionCode = &v
}

func (o TemplateMarketingCityConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateMarketingCityConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.DistanceType) {
		toSerialize["distanceType"] = o.DistanceType
	}
	if !IsNil(o.DrivingTime) {
		toSerialize["drivingTime"] = o.DrivingTime
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.MarketingCity) {
		toSerialize["marketingCity"] = o.MarketingCity
	}
	if !IsNil(o.RegionCode) {
		toSerialize["regionCode"] = o.RegionCode
	}
	if !IsNil(o.NewRegionCode) {
		toSerialize["newRegionCode"] = o.NewRegionCode
	}
	return toSerialize, nil
}

type NullableTemplateMarketingCityConfigType struct {
	value *TemplateMarketingCityConfigType
	isSet bool
}

func (v NullableTemplateMarketingCityConfigType) Get() *TemplateMarketingCityConfigType {
	return v.value
}

func (v *NullableTemplateMarketingCityConfigType) Set(val *TemplateMarketingCityConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateMarketingCityConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateMarketingCityConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateMarketingCityConfigType(val *TemplateMarketingCityConfigType) *NullableTemplateMarketingCityConfigType {
	return &NullableTemplateMarketingCityConfigType{value: val, isSet: true}
}

func (v NullableTemplateMarketingCityConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateMarketingCityConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


