/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the PostConfigActivityLogRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostConfigActivityLogRequest{}

// PostConfigActivityLogRequest struct for PostConfigActivityLogRequest
type PostConfigActivityLogRequest struct {
	// Changes log record to import/Export/Delete customization operations.
	ConfigActivities []ConfigActivityType `json:"configActivities,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewPostConfigActivityLogRequest instantiates a new PostConfigActivityLogRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostConfigActivityLogRequest() *PostConfigActivityLogRequest {
	this := PostConfigActivityLogRequest{}
	return &this
}

// NewPostConfigActivityLogRequestWithDefaults instantiates a new PostConfigActivityLogRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostConfigActivityLogRequestWithDefaults() *PostConfigActivityLogRequest {
	this := PostConfigActivityLogRequest{}
	return &this
}

// GetConfigActivities returns the ConfigActivities field value if set, zero value otherwise.
func (o *PostConfigActivityLogRequest) GetConfigActivities() []ConfigActivityType {
	if o == nil || IsNil(o.ConfigActivities) {
		var ret []ConfigActivityType
		return ret
	}
	return o.ConfigActivities
}

// GetConfigActivitiesOk returns a tuple with the ConfigActivities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostConfigActivityLogRequest) GetConfigActivitiesOk() ([]ConfigActivityType, bool) {
	if o == nil || IsNil(o.ConfigActivities) {
		return nil, false
	}
	return o.ConfigActivities, true
}

// HasConfigActivities returns a boolean if a field has been set.
func (o *PostConfigActivityLogRequest) HasConfigActivities() bool {
	if o != nil && !IsNil(o.ConfigActivities) {
		return true
	}

	return false
}

// SetConfigActivities gets a reference to the given []ConfigActivityType and assigns it to the ConfigActivities field.
func (o *PostConfigActivityLogRequest) SetConfigActivities(v []ConfigActivityType) {
	o.ConfigActivities = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostConfigActivityLogRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostConfigActivityLogRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostConfigActivityLogRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *PostConfigActivityLogRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o PostConfigActivityLogRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostConfigActivityLogRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigActivities) {
		toSerialize["configActivities"] = o.ConfigActivities
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostConfigActivityLogRequest struct {
	value *PostConfigActivityLogRequest
	isSet bool
}

func (v NullablePostConfigActivityLogRequest) Get() *PostConfigActivityLogRequest {
	return v.value
}

func (v *NullablePostConfigActivityLogRequest) Set(val *PostConfigActivityLogRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostConfigActivityLogRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostConfigActivityLogRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostConfigActivityLogRequest(val *PostConfigActivityLogRequest) *NullablePostConfigActivityLogRequest {
	return &NullablePostConfigActivityLogRequest{value: val, isSet: true}
}

func (v NullablePostConfigActivityLogRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostConfigActivityLogRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


