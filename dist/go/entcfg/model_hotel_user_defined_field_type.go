/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelUserDefinedFieldType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelUserDefinedFieldType{}

// HotelUserDefinedFieldType User defined information(UDF) for the hotel.
type HotelUserDefinedFieldType struct {
	// The UDF Category for this information.
	Category *string `json:"category,omitempty"`
	// The UDF Type for this information.
	InfoType *string `json:"infoType,omitempty"`
	// The UDF attribute for this information.
	Information *string `json:"information,omitempty"`
}

// NewHotelUserDefinedFieldType instantiates a new HotelUserDefinedFieldType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelUserDefinedFieldType() *HotelUserDefinedFieldType {
	this := HotelUserDefinedFieldType{}
	return &this
}

// NewHotelUserDefinedFieldTypeWithDefaults instantiates a new HotelUserDefinedFieldType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelUserDefinedFieldTypeWithDefaults() *HotelUserDefinedFieldType {
	this := HotelUserDefinedFieldType{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *HotelUserDefinedFieldType) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelUserDefinedFieldType) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *HotelUserDefinedFieldType) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *HotelUserDefinedFieldType) SetCategory(v string) {
	o.Category = &v
}

// GetInfoType returns the InfoType field value if set, zero value otherwise.
func (o *HotelUserDefinedFieldType) GetInfoType() string {
	if o == nil || IsNil(o.InfoType) {
		var ret string
		return ret
	}
	return *o.InfoType
}

// GetInfoTypeOk returns a tuple with the InfoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelUserDefinedFieldType) GetInfoTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InfoType) {
		return nil, false
	}
	return o.InfoType, true
}

// HasInfoType returns a boolean if a field has been set.
func (o *HotelUserDefinedFieldType) HasInfoType() bool {
	if o != nil && !IsNil(o.InfoType) {
		return true
	}

	return false
}

// SetInfoType gets a reference to the given string and assigns it to the InfoType field.
func (o *HotelUserDefinedFieldType) SetInfoType(v string) {
	o.InfoType = &v
}

// GetInformation returns the Information field value if set, zero value otherwise.
func (o *HotelUserDefinedFieldType) GetInformation() string {
	if o == nil || IsNil(o.Information) {
		var ret string
		return ret
	}
	return *o.Information
}

// GetInformationOk returns a tuple with the Information field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelUserDefinedFieldType) GetInformationOk() (*string, bool) {
	if o == nil || IsNil(o.Information) {
		return nil, false
	}
	return o.Information, true
}

// HasInformation returns a boolean if a field has been set.
func (o *HotelUserDefinedFieldType) HasInformation() bool {
	if o != nil && !IsNil(o.Information) {
		return true
	}

	return false
}

// SetInformation gets a reference to the given string and assigns it to the Information field.
func (o *HotelUserDefinedFieldType) SetInformation(v string) {
	o.Information = &v
}

func (o HotelUserDefinedFieldType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelUserDefinedFieldType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.InfoType) {
		toSerialize["infoType"] = o.InfoType
	}
	if !IsNil(o.Information) {
		toSerialize["information"] = o.Information
	}
	return toSerialize, nil
}

type NullableHotelUserDefinedFieldType struct {
	value *HotelUserDefinedFieldType
	isSet bool
}

func (v NullableHotelUserDefinedFieldType) Get() *HotelUserDefinedFieldType {
	return v.value
}

func (v *NullableHotelUserDefinedFieldType) Set(val *HotelUserDefinedFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelUserDefinedFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelUserDefinedFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelUserDefinedFieldType(val *HotelUserDefinedFieldType) *NullableHotelUserDefinedFieldType {
	return &NullableHotelUserDefinedFieldType{value: val, isSet: true}
}

func (v NullableHotelUserDefinedFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelUserDefinedFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


