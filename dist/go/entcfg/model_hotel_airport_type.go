/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelAirportType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelAirportType{}

// HotelAirportType Airport details of the Hotel
type HotelAirportType struct {
	// Description of the airport
	Description *string `json:"description,omitempty"`
	RelativePosition *RelativePositionType `json:"relativePosition,omitempty"`
	// Directions from the airport to the Hotel.
	Direction *string `json:"direction,omitempty"`
	// List of available transportations from airport to get into Hotel.
	TransportationList []TransportationCodeType `json:"transportationList,omitempty"`
	AirportCode *string `json:"airportCode,omitempty"`
	// Display Order sequence.
	OrderSequence *float32 `json:"orderSequence,omitempty"`
}

// NewHotelAirportType instantiates a new HotelAirportType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelAirportType() *HotelAirportType {
	this := HotelAirportType{}
	return &this
}

// NewHotelAirportTypeWithDefaults instantiates a new HotelAirportType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelAirportTypeWithDefaults() *HotelAirportType {
	this := HotelAirportType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HotelAirportType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelAirportType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HotelAirportType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HotelAirportType) SetDescription(v string) {
	o.Description = &v
}

// GetRelativePosition returns the RelativePosition field value if set, zero value otherwise.
func (o *HotelAirportType) GetRelativePosition() RelativePositionType {
	if o == nil || IsNil(o.RelativePosition) {
		var ret RelativePositionType
		return ret
	}
	return *o.RelativePosition
}

// GetRelativePositionOk returns a tuple with the RelativePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelAirportType) GetRelativePositionOk() (*RelativePositionType, bool) {
	if o == nil || IsNil(o.RelativePosition) {
		return nil, false
	}
	return o.RelativePosition, true
}

// HasRelativePosition returns a boolean if a field has been set.
func (o *HotelAirportType) HasRelativePosition() bool {
	if o != nil && !IsNil(o.RelativePosition) {
		return true
	}

	return false
}

// SetRelativePosition gets a reference to the given RelativePositionType and assigns it to the RelativePosition field.
func (o *HotelAirportType) SetRelativePosition(v RelativePositionType) {
	o.RelativePosition = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *HotelAirportType) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelAirportType) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *HotelAirportType) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *HotelAirportType) SetDirection(v string) {
	o.Direction = &v
}

// GetTransportationList returns the TransportationList field value if set, zero value otherwise.
func (o *HotelAirportType) GetTransportationList() []TransportationCodeType {
	if o == nil || IsNil(o.TransportationList) {
		var ret []TransportationCodeType
		return ret
	}
	return o.TransportationList
}

// GetTransportationListOk returns a tuple with the TransportationList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelAirportType) GetTransportationListOk() ([]TransportationCodeType, bool) {
	if o == nil || IsNil(o.TransportationList) {
		return nil, false
	}
	return o.TransportationList, true
}

// HasTransportationList returns a boolean if a field has been set.
func (o *HotelAirportType) HasTransportationList() bool {
	if o != nil && !IsNil(o.TransportationList) {
		return true
	}

	return false
}

// SetTransportationList gets a reference to the given []TransportationCodeType and assigns it to the TransportationList field.
func (o *HotelAirportType) SetTransportationList(v []TransportationCodeType) {
	o.TransportationList = v
}

// GetAirportCode returns the AirportCode field value if set, zero value otherwise.
func (o *HotelAirportType) GetAirportCode() string {
	if o == nil || IsNil(o.AirportCode) {
		var ret string
		return ret
	}
	return *o.AirportCode
}

// GetAirportCodeOk returns a tuple with the AirportCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelAirportType) GetAirportCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AirportCode) {
		return nil, false
	}
	return o.AirportCode, true
}

// HasAirportCode returns a boolean if a field has been set.
func (o *HotelAirportType) HasAirportCode() bool {
	if o != nil && !IsNil(o.AirportCode) {
		return true
	}

	return false
}

// SetAirportCode gets a reference to the given string and assigns it to the AirportCode field.
func (o *HotelAirportType) SetAirportCode(v string) {
	o.AirportCode = &v
}

// GetOrderSequence returns the OrderSequence field value if set, zero value otherwise.
func (o *HotelAirportType) GetOrderSequence() float32 {
	if o == nil || IsNil(o.OrderSequence) {
		var ret float32
		return ret
	}
	return *o.OrderSequence
}

// GetOrderSequenceOk returns a tuple with the OrderSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelAirportType) GetOrderSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderSequence) {
		return nil, false
	}
	return o.OrderSequence, true
}

// HasOrderSequence returns a boolean if a field has been set.
func (o *HotelAirportType) HasOrderSequence() bool {
	if o != nil && !IsNil(o.OrderSequence) {
		return true
	}

	return false
}

// SetOrderSequence gets a reference to the given float32 and assigns it to the OrderSequence field.
func (o *HotelAirportType) SetOrderSequence(v float32) {
	o.OrderSequence = &v
}

func (o HotelAirportType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelAirportType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RelativePosition) {
		toSerialize["relativePosition"] = o.RelativePosition
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.TransportationList) {
		toSerialize["transportationList"] = o.TransportationList
	}
	if !IsNil(o.AirportCode) {
		toSerialize["airportCode"] = o.AirportCode
	}
	if !IsNil(o.OrderSequence) {
		toSerialize["orderSequence"] = o.OrderSequence
	}
	return toSerialize, nil
}

type NullableHotelAirportType struct {
	value *HotelAirportType
	isSet bool
}

func (v NullableHotelAirportType) Get() *HotelAirportType {
	return v.value
}

func (v *NullableHotelAirportType) Set(val *HotelAirportType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelAirportType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelAirportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelAirportType(val *HotelAirportType) *NullableHotelAirportType {
	return &NullableHotelAirportType{value: val, isSet: true}
}

func (v NullableHotelAirportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelAirportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


