/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the TemplateHotelDetailIDType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateHotelDetailIDType{}

// TemplateHotelDetailIDType Base details used for uniquely identifying a hotel detail.
type TemplateHotelDetailIDType struct {
	// Specifies the hotel detail code.
	Code *string `json:"code,omitempty"`
	// Specifies the hotel detail category.
	Category *string `json:"category,omitempty"`
}

// NewTemplateHotelDetailIDType instantiates a new TemplateHotelDetailIDType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateHotelDetailIDType() *TemplateHotelDetailIDType {
	this := TemplateHotelDetailIDType{}
	return &this
}

// NewTemplateHotelDetailIDTypeWithDefaults instantiates a new TemplateHotelDetailIDType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateHotelDetailIDTypeWithDefaults() *TemplateHotelDetailIDType {
	this := TemplateHotelDetailIDType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TemplateHotelDetailIDType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateHotelDetailIDType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TemplateHotelDetailIDType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TemplateHotelDetailIDType) SetCode(v string) {
	o.Code = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *TemplateHotelDetailIDType) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateHotelDetailIDType) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *TemplateHotelDetailIDType) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *TemplateHotelDetailIDType) SetCategory(v string) {
	o.Category = &v
}

func (o TemplateHotelDetailIDType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateHotelDetailIDType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	return toSerialize, nil
}

type NullableTemplateHotelDetailIDType struct {
	value *TemplateHotelDetailIDType
	isSet bool
}

func (v NullableTemplateHotelDetailIDType) Get() *TemplateHotelDetailIDType {
	return v.value
}

func (v *NullableTemplateHotelDetailIDType) Set(val *TemplateHotelDetailIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateHotelDetailIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateHotelDetailIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateHotelDetailIDType(val *TemplateHotelDetailIDType) *NullableTemplateHotelDetailIDType {
	return &NullableTemplateHotelDetailIDType{value: val, isSet: true}
}

func (v NullableTemplateHotelDetailIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateHotelDetailIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


