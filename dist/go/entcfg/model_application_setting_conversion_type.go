/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
	"fmt"
)

// ApplicationSettingConversionType the model 'ApplicationSettingConversionType'
type ApplicationSettingConversionType string

// List of applicationSettingConversionType
const (
	APPLICATIONSETTINGCONVERSIONTYPE_DEFAULT ApplicationSettingConversionType = "Default"
	APPLICATIONSETTINGCONVERSIONTYPE_PARAMETER ApplicationSettingConversionType = "Parameter"
)

// All allowed values of ApplicationSettingConversionType enum
var AllowedApplicationSettingConversionTypeEnumValues = []ApplicationSettingConversionType{
	"Default",
	"Parameter",
}

func (v *ApplicationSettingConversionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApplicationSettingConversionType(value)
	for _, existing := range AllowedApplicationSettingConversionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApplicationSettingConversionType", value)
}

// NewApplicationSettingConversionTypeFromValue returns a pointer to a valid ApplicationSettingConversionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApplicationSettingConversionTypeFromValue(v string) (*ApplicationSettingConversionType, error) {
	ev := ApplicationSettingConversionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApplicationSettingConversionType: valid values are %v", v, AllowedApplicationSettingConversionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApplicationSettingConversionType) IsValid() bool {
	for _, existing := range AllowedApplicationSettingConversionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to applicationSettingConversionType value
func (v ApplicationSettingConversionType) Ptr() *ApplicationSettingConversionType {
	return &v
}

type NullableApplicationSettingConversionType struct {
	value *ApplicationSettingConversionType
	isSet bool
}

func (v NullableApplicationSettingConversionType) Get() *ApplicationSettingConversionType {
	return v.value
}

func (v *NullableApplicationSettingConversionType) Set(val *ApplicationSettingConversionType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSettingConversionType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSettingConversionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSettingConversionType(val *ApplicationSettingConversionType) *NullableApplicationSettingConversionType {
	return &NullableApplicationSettingConversionType{value: val, isSet: true}
}

func (v NullableApplicationSettingConversionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSettingConversionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

