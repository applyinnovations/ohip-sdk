/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelEventCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelEventCodeType{}

// HotelEventCodeType Details of Event to be used to set events for a hotel.
type HotelEventCodeType struct {
	DateRange *TimeSpanDaysOfWeekType `json:"dateRange,omitempty"`
	// Event code selected.
	EventCode *string `json:"eventCode,omitempty"`
	// Code of the hotel for which the events are being set.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewHotelEventCodeType instantiates a new HotelEventCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelEventCodeType() *HotelEventCodeType {
	this := HotelEventCodeType{}
	return &this
}

// NewHotelEventCodeTypeWithDefaults instantiates a new HotelEventCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelEventCodeTypeWithDefaults() *HotelEventCodeType {
	this := HotelEventCodeType{}
	return &this
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *HotelEventCodeType) GetDateRange() TimeSpanDaysOfWeekType {
	if o == nil || IsNil(o.DateRange) {
		var ret TimeSpanDaysOfWeekType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelEventCodeType) GetDateRangeOk() (*TimeSpanDaysOfWeekType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *HotelEventCodeType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given TimeSpanDaysOfWeekType and assigns it to the DateRange field.
func (o *HotelEventCodeType) SetDateRange(v TimeSpanDaysOfWeekType) {
	o.DateRange = &v
}

// GetEventCode returns the EventCode field value if set, zero value otherwise.
func (o *HotelEventCodeType) GetEventCode() string {
	if o == nil || IsNil(o.EventCode) {
		var ret string
		return ret
	}
	return *o.EventCode
}

// GetEventCodeOk returns a tuple with the EventCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelEventCodeType) GetEventCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventCode) {
		return nil, false
	}
	return o.EventCode, true
}

// HasEventCode returns a boolean if a field has been set.
func (o *HotelEventCodeType) HasEventCode() bool {
	if o != nil && !IsNil(o.EventCode) {
		return true
	}

	return false
}

// SetEventCode gets a reference to the given string and assigns it to the EventCode field.
func (o *HotelEventCodeType) SetEventCode(v string) {
	o.EventCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelEventCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelEventCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelEventCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelEventCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o HotelEventCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelEventCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.EventCode) {
		toSerialize["eventCode"] = o.EventCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableHotelEventCodeType struct {
	value *HotelEventCodeType
	isSet bool
}

func (v NullableHotelEventCodeType) Get() *HotelEventCodeType {
	return v.value
}

func (v *NullableHotelEventCodeType) Set(val *HotelEventCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelEventCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelEventCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelEventCodeType(val *HotelEventCodeType) *NullableHotelEventCodeType {
	return &NullableHotelEventCodeType{value: val, isSet: true}
}

func (v NullableHotelEventCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelEventCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


