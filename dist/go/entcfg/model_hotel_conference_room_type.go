/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelConferenceRoomType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelConferenceRoomType{}

// HotelConferenceRoomType Information about the Conference rooms in the hotel.
type HotelConferenceRoomType struct {
	// The name of the Restaurant.
	RoomName *string `json:"roomName,omitempty"`
	// The Type of Restaurant.
	RoomType *string `json:"roomType,omitempty"`
	RoomCode *string `json:"roomCode,omitempty"`
}

// NewHotelConferenceRoomType instantiates a new HotelConferenceRoomType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelConferenceRoomType() *HotelConferenceRoomType {
	this := HotelConferenceRoomType{}
	return &this
}

// NewHotelConferenceRoomTypeWithDefaults instantiates a new HotelConferenceRoomType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelConferenceRoomTypeWithDefaults() *HotelConferenceRoomType {
	this := HotelConferenceRoomType{}
	return &this
}

// GetRoomName returns the RoomName field value if set, zero value otherwise.
func (o *HotelConferenceRoomType) GetRoomName() string {
	if o == nil || IsNil(o.RoomName) {
		var ret string
		return ret
	}
	return *o.RoomName
}

// GetRoomNameOk returns a tuple with the RoomName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelConferenceRoomType) GetRoomNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoomName) {
		return nil, false
	}
	return o.RoomName, true
}

// HasRoomName returns a boolean if a field has been set.
func (o *HotelConferenceRoomType) HasRoomName() bool {
	if o != nil && !IsNil(o.RoomName) {
		return true
	}

	return false
}

// SetRoomName gets a reference to the given string and assigns it to the RoomName field.
func (o *HotelConferenceRoomType) SetRoomName(v string) {
	o.RoomName = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *HotelConferenceRoomType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelConferenceRoomType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *HotelConferenceRoomType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *HotelConferenceRoomType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetRoomCode returns the RoomCode field value if set, zero value otherwise.
func (o *HotelConferenceRoomType) GetRoomCode() string {
	if o == nil || IsNil(o.RoomCode) {
		var ret string
		return ret
	}
	return *o.RoomCode
}

// GetRoomCodeOk returns a tuple with the RoomCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelConferenceRoomType) GetRoomCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomCode) {
		return nil, false
	}
	return o.RoomCode, true
}

// HasRoomCode returns a boolean if a field has been set.
func (o *HotelConferenceRoomType) HasRoomCode() bool {
	if o != nil && !IsNil(o.RoomCode) {
		return true
	}

	return false
}

// SetRoomCode gets a reference to the given string and assigns it to the RoomCode field.
func (o *HotelConferenceRoomType) SetRoomCode(v string) {
	o.RoomCode = &v
}

func (o HotelConferenceRoomType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelConferenceRoomType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomName) {
		toSerialize["roomName"] = o.RoomName
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.RoomCode) {
		toSerialize["roomCode"] = o.RoomCode
	}
	return toSerialize, nil
}

type NullableHotelConferenceRoomType struct {
	value *HotelConferenceRoomType
	isSet bool
}

func (v NullableHotelConferenceRoomType) Get() *HotelConferenceRoomType {
	return v.value
}

func (v *NullableHotelConferenceRoomType) Set(val *HotelConferenceRoomType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelConferenceRoomType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelConferenceRoomType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelConferenceRoomType(val *HotelConferenceRoomType) *NullableHotelConferenceRoomType {
	return &NullableHotelConferenceRoomType{value: val, isSet: true}
}

func (v NullableHotelConferenceRoomType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelConferenceRoomType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


