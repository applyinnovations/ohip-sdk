/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelCorporateInformationsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelCorporateInformationsType{}

// HotelCorporateInformationsType Corporate information details of the property
type HotelCorporateInformationsType struct {
	BrandCode *string `json:"brandCode,omitempty"`
	HotelCategory *string `json:"hotelCategory,omitempty"`
	// List of codes with primary flag
	BusinessUnit []PrimaryCodeType `json:"businessUnit,omitempty"`
	// List of codes with primary flag
	DepartmentCode []PrimaryCodeType `json:"departmentCode,omitempty"`
	// List of codes with primary flag
	Division []PrimaryCodeType `json:"division,omitempty"`
	// List of codes with primary flag
	OpertingUnit []PrimaryCodeType `json:"opertingUnit,omitempty"`
}

// NewHotelCorporateInformationsType instantiates a new HotelCorporateInformationsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelCorporateInformationsType() *HotelCorporateInformationsType {
	this := HotelCorporateInformationsType{}
	return &this
}

// NewHotelCorporateInformationsTypeWithDefaults instantiates a new HotelCorporateInformationsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelCorporateInformationsTypeWithDefaults() *HotelCorporateInformationsType {
	this := HotelCorporateInformationsType{}
	return &this
}

// GetBrandCode returns the BrandCode field value if set, zero value otherwise.
func (o *HotelCorporateInformationsType) GetBrandCode() string {
	if o == nil || IsNil(o.BrandCode) {
		var ret string
		return ret
	}
	return *o.BrandCode
}

// GetBrandCodeOk returns a tuple with the BrandCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCorporateInformationsType) GetBrandCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BrandCode) {
		return nil, false
	}
	return o.BrandCode, true
}

// HasBrandCode returns a boolean if a field has been set.
func (o *HotelCorporateInformationsType) HasBrandCode() bool {
	if o != nil && !IsNil(o.BrandCode) {
		return true
	}

	return false
}

// SetBrandCode gets a reference to the given string and assigns it to the BrandCode field.
func (o *HotelCorporateInformationsType) SetBrandCode(v string) {
	o.BrandCode = &v
}

// GetHotelCategory returns the HotelCategory field value if set, zero value otherwise.
func (o *HotelCorporateInformationsType) GetHotelCategory() string {
	if o == nil || IsNil(o.HotelCategory) {
		var ret string
		return ret
	}
	return *o.HotelCategory
}

// GetHotelCategoryOk returns a tuple with the HotelCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCorporateInformationsType) GetHotelCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCategory) {
		return nil, false
	}
	return o.HotelCategory, true
}

// HasHotelCategory returns a boolean if a field has been set.
func (o *HotelCorporateInformationsType) HasHotelCategory() bool {
	if o != nil && !IsNil(o.HotelCategory) {
		return true
	}

	return false
}

// SetHotelCategory gets a reference to the given string and assigns it to the HotelCategory field.
func (o *HotelCorporateInformationsType) SetHotelCategory(v string) {
	o.HotelCategory = &v
}

// GetBusinessUnit returns the BusinessUnit field value if set, zero value otherwise.
func (o *HotelCorporateInformationsType) GetBusinessUnit() []PrimaryCodeType {
	if o == nil || IsNil(o.BusinessUnit) {
		var ret []PrimaryCodeType
		return ret
	}
	return o.BusinessUnit
}

// GetBusinessUnitOk returns a tuple with the BusinessUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCorporateInformationsType) GetBusinessUnitOk() ([]PrimaryCodeType, bool) {
	if o == nil || IsNil(o.BusinessUnit) {
		return nil, false
	}
	return o.BusinessUnit, true
}

// HasBusinessUnit returns a boolean if a field has been set.
func (o *HotelCorporateInformationsType) HasBusinessUnit() bool {
	if o != nil && !IsNil(o.BusinessUnit) {
		return true
	}

	return false
}

// SetBusinessUnit gets a reference to the given []PrimaryCodeType and assigns it to the BusinessUnit field.
func (o *HotelCorporateInformationsType) SetBusinessUnit(v []PrimaryCodeType) {
	o.BusinessUnit = v
}

// GetDepartmentCode returns the DepartmentCode field value if set, zero value otherwise.
func (o *HotelCorporateInformationsType) GetDepartmentCode() []PrimaryCodeType {
	if o == nil || IsNil(o.DepartmentCode) {
		var ret []PrimaryCodeType
		return ret
	}
	return o.DepartmentCode
}

// GetDepartmentCodeOk returns a tuple with the DepartmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCorporateInformationsType) GetDepartmentCodeOk() ([]PrimaryCodeType, bool) {
	if o == nil || IsNil(o.DepartmentCode) {
		return nil, false
	}
	return o.DepartmentCode, true
}

// HasDepartmentCode returns a boolean if a field has been set.
func (o *HotelCorporateInformationsType) HasDepartmentCode() bool {
	if o != nil && !IsNil(o.DepartmentCode) {
		return true
	}

	return false
}

// SetDepartmentCode gets a reference to the given []PrimaryCodeType and assigns it to the DepartmentCode field.
func (o *HotelCorporateInformationsType) SetDepartmentCode(v []PrimaryCodeType) {
	o.DepartmentCode = v
}

// GetDivision returns the Division field value if set, zero value otherwise.
func (o *HotelCorporateInformationsType) GetDivision() []PrimaryCodeType {
	if o == nil || IsNil(o.Division) {
		var ret []PrimaryCodeType
		return ret
	}
	return o.Division
}

// GetDivisionOk returns a tuple with the Division field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCorporateInformationsType) GetDivisionOk() ([]PrimaryCodeType, bool) {
	if o == nil || IsNil(o.Division) {
		return nil, false
	}
	return o.Division, true
}

// HasDivision returns a boolean if a field has been set.
func (o *HotelCorporateInformationsType) HasDivision() bool {
	if o != nil && !IsNil(o.Division) {
		return true
	}

	return false
}

// SetDivision gets a reference to the given []PrimaryCodeType and assigns it to the Division field.
func (o *HotelCorporateInformationsType) SetDivision(v []PrimaryCodeType) {
	o.Division = v
}

// GetOpertingUnit returns the OpertingUnit field value if set, zero value otherwise.
func (o *HotelCorporateInformationsType) GetOpertingUnit() []PrimaryCodeType {
	if o == nil || IsNil(o.OpertingUnit) {
		var ret []PrimaryCodeType
		return ret
	}
	return o.OpertingUnit
}

// GetOpertingUnitOk returns a tuple with the OpertingUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCorporateInformationsType) GetOpertingUnitOk() ([]PrimaryCodeType, bool) {
	if o == nil || IsNil(o.OpertingUnit) {
		return nil, false
	}
	return o.OpertingUnit, true
}

// HasOpertingUnit returns a boolean if a field has been set.
func (o *HotelCorporateInformationsType) HasOpertingUnit() bool {
	if o != nil && !IsNil(o.OpertingUnit) {
		return true
	}

	return false
}

// SetOpertingUnit gets a reference to the given []PrimaryCodeType and assigns it to the OpertingUnit field.
func (o *HotelCorporateInformationsType) SetOpertingUnit(v []PrimaryCodeType) {
	o.OpertingUnit = v
}

func (o HotelCorporateInformationsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelCorporateInformationsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandCode) {
		toSerialize["brandCode"] = o.BrandCode
	}
	if !IsNil(o.HotelCategory) {
		toSerialize["hotelCategory"] = o.HotelCategory
	}
	if !IsNil(o.BusinessUnit) {
		toSerialize["businessUnit"] = o.BusinessUnit
	}
	if !IsNil(o.DepartmentCode) {
		toSerialize["departmentCode"] = o.DepartmentCode
	}
	if !IsNil(o.Division) {
		toSerialize["division"] = o.Division
	}
	if !IsNil(o.OpertingUnit) {
		toSerialize["opertingUnit"] = o.OpertingUnit
	}
	return toSerialize, nil
}

type NullableHotelCorporateInformationsType struct {
	value *HotelCorporateInformationsType
	isSet bool
}

func (v NullableHotelCorporateInformationsType) Get() *HotelCorporateInformationsType {
	return v.value
}

func (v *NullableHotelCorporateInformationsType) Set(val *HotelCorporateInformationsType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelCorporateInformationsType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelCorporateInformationsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelCorporateInformationsType(val *HotelCorporateInformationsType) *NullableHotelCorporateInformationsType {
	return &NullableHotelCorporateInformationsType{value: val, isSet: true}
}

func (v NullableHotelCorporateInformationsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelCorporateInformationsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


