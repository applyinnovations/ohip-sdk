/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelBanquetSpaceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelBanquetSpaceType{}

// HotelBanquetSpaceType Defines the Banquet and Meeting Area of the Hotel
type HotelBanquetSpaceType struct {
	BanquetSeats *int32 `json:"banquetSeats,omitempty"`
	MeetingRooms *int32 `json:"meetingRooms,omitempty"`
	// Defines the BanquetArea of the Hotel
	BanquetArea *string `json:"banquetArea,omitempty"`
	// Defines the Meeting Area of the hotel
	MeetingArea *float32 `json:"meetingArea,omitempty"`
	// The unit of measure in a code format.
	UnitOfMeasureCode *string `json:"unitOfMeasureCode,omitempty"`
}

// NewHotelBanquetSpaceType instantiates a new HotelBanquetSpaceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelBanquetSpaceType() *HotelBanquetSpaceType {
	this := HotelBanquetSpaceType{}
	return &this
}

// NewHotelBanquetSpaceTypeWithDefaults instantiates a new HotelBanquetSpaceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelBanquetSpaceTypeWithDefaults() *HotelBanquetSpaceType {
	this := HotelBanquetSpaceType{}
	return &this
}

// GetBanquetSeats returns the BanquetSeats field value if set, zero value otherwise.
func (o *HotelBanquetSpaceType) GetBanquetSeats() int32 {
	if o == nil || IsNil(o.BanquetSeats) {
		var ret int32
		return ret
	}
	return *o.BanquetSeats
}

// GetBanquetSeatsOk returns a tuple with the BanquetSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBanquetSpaceType) GetBanquetSeatsOk() (*int32, bool) {
	if o == nil || IsNil(o.BanquetSeats) {
		return nil, false
	}
	return o.BanquetSeats, true
}

// HasBanquetSeats returns a boolean if a field has been set.
func (o *HotelBanquetSpaceType) HasBanquetSeats() bool {
	if o != nil && !IsNil(o.BanquetSeats) {
		return true
	}

	return false
}

// SetBanquetSeats gets a reference to the given int32 and assigns it to the BanquetSeats field.
func (o *HotelBanquetSpaceType) SetBanquetSeats(v int32) {
	o.BanquetSeats = &v
}

// GetMeetingRooms returns the MeetingRooms field value if set, zero value otherwise.
func (o *HotelBanquetSpaceType) GetMeetingRooms() int32 {
	if o == nil || IsNil(o.MeetingRooms) {
		var ret int32
		return ret
	}
	return *o.MeetingRooms
}

// GetMeetingRoomsOk returns a tuple with the MeetingRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBanquetSpaceType) GetMeetingRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.MeetingRooms) {
		return nil, false
	}
	return o.MeetingRooms, true
}

// HasMeetingRooms returns a boolean if a field has been set.
func (o *HotelBanquetSpaceType) HasMeetingRooms() bool {
	if o != nil && !IsNil(o.MeetingRooms) {
		return true
	}

	return false
}

// SetMeetingRooms gets a reference to the given int32 and assigns it to the MeetingRooms field.
func (o *HotelBanquetSpaceType) SetMeetingRooms(v int32) {
	o.MeetingRooms = &v
}

// GetBanquetArea returns the BanquetArea field value if set, zero value otherwise.
func (o *HotelBanquetSpaceType) GetBanquetArea() string {
	if o == nil || IsNil(o.BanquetArea) {
		var ret string
		return ret
	}
	return *o.BanquetArea
}

// GetBanquetAreaOk returns a tuple with the BanquetArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBanquetSpaceType) GetBanquetAreaOk() (*string, bool) {
	if o == nil || IsNil(o.BanquetArea) {
		return nil, false
	}
	return o.BanquetArea, true
}

// HasBanquetArea returns a boolean if a field has been set.
func (o *HotelBanquetSpaceType) HasBanquetArea() bool {
	if o != nil && !IsNil(o.BanquetArea) {
		return true
	}

	return false
}

// SetBanquetArea gets a reference to the given string and assigns it to the BanquetArea field.
func (o *HotelBanquetSpaceType) SetBanquetArea(v string) {
	o.BanquetArea = &v
}

// GetMeetingArea returns the MeetingArea field value if set, zero value otherwise.
func (o *HotelBanquetSpaceType) GetMeetingArea() float32 {
	if o == nil || IsNil(o.MeetingArea) {
		var ret float32
		return ret
	}
	return *o.MeetingArea
}

// GetMeetingAreaOk returns a tuple with the MeetingArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBanquetSpaceType) GetMeetingAreaOk() (*float32, bool) {
	if o == nil || IsNil(o.MeetingArea) {
		return nil, false
	}
	return o.MeetingArea, true
}

// HasMeetingArea returns a boolean if a field has been set.
func (o *HotelBanquetSpaceType) HasMeetingArea() bool {
	if o != nil && !IsNil(o.MeetingArea) {
		return true
	}

	return false
}

// SetMeetingArea gets a reference to the given float32 and assigns it to the MeetingArea field.
func (o *HotelBanquetSpaceType) SetMeetingArea(v float32) {
	o.MeetingArea = &v
}

// GetUnitOfMeasureCode returns the UnitOfMeasureCode field value if set, zero value otherwise.
func (o *HotelBanquetSpaceType) GetUnitOfMeasureCode() string {
	if o == nil || IsNil(o.UnitOfMeasureCode) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasureCode
}

// GetUnitOfMeasureCodeOk returns a tuple with the UnitOfMeasureCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelBanquetSpaceType) GetUnitOfMeasureCodeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasureCode) {
		return nil, false
	}
	return o.UnitOfMeasureCode, true
}

// HasUnitOfMeasureCode returns a boolean if a field has been set.
func (o *HotelBanquetSpaceType) HasUnitOfMeasureCode() bool {
	if o != nil && !IsNil(o.UnitOfMeasureCode) {
		return true
	}

	return false
}

// SetUnitOfMeasureCode gets a reference to the given string and assigns it to the UnitOfMeasureCode field.
func (o *HotelBanquetSpaceType) SetUnitOfMeasureCode(v string) {
	o.UnitOfMeasureCode = &v
}

func (o HotelBanquetSpaceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelBanquetSpaceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BanquetSeats) {
		toSerialize["banquetSeats"] = o.BanquetSeats
	}
	if !IsNil(o.MeetingRooms) {
		toSerialize["meetingRooms"] = o.MeetingRooms
	}
	if !IsNil(o.BanquetArea) {
		toSerialize["banquetArea"] = o.BanquetArea
	}
	if !IsNil(o.MeetingArea) {
		toSerialize["meetingArea"] = o.MeetingArea
	}
	if !IsNil(o.UnitOfMeasureCode) {
		toSerialize["unitOfMeasureCode"] = o.UnitOfMeasureCode
	}
	return toSerialize, nil
}

type NullableHotelBanquetSpaceType struct {
	value *HotelBanquetSpaceType
	isSet bool
}

func (v NullableHotelBanquetSpaceType) Get() *HotelBanquetSpaceType {
	return v.value
}

func (v *NullableHotelBanquetSpaceType) Set(val *HotelBanquetSpaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelBanquetSpaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelBanquetSpaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelBanquetSpaceType(val *HotelBanquetSpaceType) *NullableHotelBanquetSpaceType {
	return &NullableHotelBanquetSpaceType{value: val, isSet: true}
}

func (v NullableHotelBanquetSpaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelBanquetSpaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


