/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelCalendarType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelCalendarType{}

// HotelCalendarType Represents the calendar with individual days having corresponding entries (day type, event, etc.) for a hotel.
type HotelCalendarType struct {
	// Entries for a specific calendar day.
	CalendarDay []HotelCalendarDayType `json:"calendarDay,omitempty"`
	// Indicates a specific hotel for which the calendar is being represented.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewHotelCalendarType instantiates a new HotelCalendarType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelCalendarType() *HotelCalendarType {
	this := HotelCalendarType{}
	return &this
}

// NewHotelCalendarTypeWithDefaults instantiates a new HotelCalendarType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelCalendarTypeWithDefaults() *HotelCalendarType {
	this := HotelCalendarType{}
	return &this
}

// GetCalendarDay returns the CalendarDay field value if set, zero value otherwise.
func (o *HotelCalendarType) GetCalendarDay() []HotelCalendarDayType {
	if o == nil || IsNil(o.CalendarDay) {
		var ret []HotelCalendarDayType
		return ret
	}
	return o.CalendarDay
}

// GetCalendarDayOk returns a tuple with the CalendarDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCalendarType) GetCalendarDayOk() ([]HotelCalendarDayType, bool) {
	if o == nil || IsNil(o.CalendarDay) {
		return nil, false
	}
	return o.CalendarDay, true
}

// HasCalendarDay returns a boolean if a field has been set.
func (o *HotelCalendarType) HasCalendarDay() bool {
	if o != nil && !IsNil(o.CalendarDay) {
		return true
	}

	return false
}

// SetCalendarDay gets a reference to the given []HotelCalendarDayType and assigns it to the CalendarDay field.
func (o *HotelCalendarType) SetCalendarDay(v []HotelCalendarDayType) {
	o.CalendarDay = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelCalendarType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelCalendarType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelCalendarType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelCalendarType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o HotelCalendarType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelCalendarType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalendarDay) {
		toSerialize["calendarDay"] = o.CalendarDay
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableHotelCalendarType struct {
	value *HotelCalendarType
	isSet bool
}

func (v NullableHotelCalendarType) Get() *HotelCalendarType {
	return v.value
}

func (v *NullableHotelCalendarType) Set(val *HotelCalendarType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelCalendarType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelCalendarType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelCalendarType(val *HotelCalendarType) *NullableHotelCalendarType {
	return &NullableHotelCalendarType{value: val, isSet: true}
}

func (v NullableHotelCalendarType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelCalendarType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


