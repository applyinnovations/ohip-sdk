/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the TransportationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransportationType{}

// TransportationType Information about the transportations of the hotel.
type TransportationType struct {
	// Comments about the transportation.
	Comments *string `json:"comments,omitempty"`
	// The description of the transportation.
	Description *string `json:"description,omitempty"`
	// Hotel code for the transportation.
	HotelId *string `json:"hotelId,omitempty"`
	KeyOptions []string `json:"keyOptions,omitempty"`
	Label *string `json:"label,omitempty"`
	OrderBy *int32 `json:"orderBy,omitempty"`
	PhoneNumber *TelephoneType `json:"phoneNumber,omitempty"`
	// The price range of the transportation.
	PriceRange *string `json:"priceRange,omitempty"`
	RelativePosition *RelativePositionType `json:"relativePosition,omitempty"`
	TransportationCode *string `json:"transportationCode,omitempty"`
	Website *URLType `json:"website,omitempty"`
}

// NewTransportationType instantiates a new TransportationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransportationType() *TransportationType {
	this := TransportationType{}
	return &this
}

// NewTransportationTypeWithDefaults instantiates a new TransportationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportationTypeWithDefaults() *TransportationType {
	this := TransportationType{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *TransportationType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *TransportationType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *TransportationType) SetComments(v string) {
	o.Comments = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransportationType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransportationType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransportationType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *TransportationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *TransportationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *TransportationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetKeyOptions returns the KeyOptions field value if set, zero value otherwise.
func (o *TransportationType) GetKeyOptions() []string {
	if o == nil || IsNil(o.KeyOptions) {
		var ret []string
		return ret
	}
	return o.KeyOptions
}

// GetKeyOptionsOk returns a tuple with the KeyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetKeyOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyOptions) {
		return nil, false
	}
	return o.KeyOptions, true
}

// HasKeyOptions returns a boolean if a field has been set.
func (o *TransportationType) HasKeyOptions() bool {
	if o != nil && !IsNil(o.KeyOptions) {
		return true
	}

	return false
}

// SetKeyOptions gets a reference to the given []string and assigns it to the KeyOptions field.
func (o *TransportationType) SetKeyOptions(v []string) {
	o.KeyOptions = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *TransportationType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *TransportationType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *TransportationType) SetLabel(v string) {
	o.Label = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *TransportationType) GetOrderBy() int32 {
	if o == nil || IsNil(o.OrderBy) {
		var ret int32
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetOrderByOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *TransportationType) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given int32 and assigns it to the OrderBy field.
func (o *TransportationType) SetOrderBy(v int32) {
	o.OrderBy = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *TransportationType) GetPhoneNumber() TelephoneType {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret TelephoneType
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetPhoneNumberOk() (*TelephoneType, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *TransportationType) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given TelephoneType and assigns it to the PhoneNumber field.
func (o *TransportationType) SetPhoneNumber(v TelephoneType) {
	o.PhoneNumber = &v
}

// GetPriceRange returns the PriceRange field value if set, zero value otherwise.
func (o *TransportationType) GetPriceRange() string {
	if o == nil || IsNil(o.PriceRange) {
		var ret string
		return ret
	}
	return *o.PriceRange
}

// GetPriceRangeOk returns a tuple with the PriceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetPriceRangeOk() (*string, bool) {
	if o == nil || IsNil(o.PriceRange) {
		return nil, false
	}
	return o.PriceRange, true
}

// HasPriceRange returns a boolean if a field has been set.
func (o *TransportationType) HasPriceRange() bool {
	if o != nil && !IsNil(o.PriceRange) {
		return true
	}

	return false
}

// SetPriceRange gets a reference to the given string and assigns it to the PriceRange field.
func (o *TransportationType) SetPriceRange(v string) {
	o.PriceRange = &v
}

// GetRelativePosition returns the RelativePosition field value if set, zero value otherwise.
func (o *TransportationType) GetRelativePosition() RelativePositionType {
	if o == nil || IsNil(o.RelativePosition) {
		var ret RelativePositionType
		return ret
	}
	return *o.RelativePosition
}

// GetRelativePositionOk returns a tuple with the RelativePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetRelativePositionOk() (*RelativePositionType, bool) {
	if o == nil || IsNil(o.RelativePosition) {
		return nil, false
	}
	return o.RelativePosition, true
}

// HasRelativePosition returns a boolean if a field has been set.
func (o *TransportationType) HasRelativePosition() bool {
	if o != nil && !IsNil(o.RelativePosition) {
		return true
	}

	return false
}

// SetRelativePosition gets a reference to the given RelativePositionType and assigns it to the RelativePosition field.
func (o *TransportationType) SetRelativePosition(v RelativePositionType) {
	o.RelativePosition = &v
}

// GetTransportationCode returns the TransportationCode field value if set, zero value otherwise.
func (o *TransportationType) GetTransportationCode() string {
	if o == nil || IsNil(o.TransportationCode) {
		var ret string
		return ret
	}
	return *o.TransportationCode
}

// GetTransportationCodeOk returns a tuple with the TransportationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetTransportationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransportationCode) {
		return nil, false
	}
	return o.TransportationCode, true
}

// HasTransportationCode returns a boolean if a field has been set.
func (o *TransportationType) HasTransportationCode() bool {
	if o != nil && !IsNil(o.TransportationCode) {
		return true
	}

	return false
}

// SetTransportationCode gets a reference to the given string and assigns it to the TransportationCode field.
func (o *TransportationType) SetTransportationCode(v string) {
	o.TransportationCode = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *TransportationType) GetWebsite() URLType {
	if o == nil || IsNil(o.Website) {
		var ret URLType
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransportationType) GetWebsiteOk() (*URLType, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *TransportationType) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given URLType and assigns it to the Website field.
func (o *TransportationType) SetWebsite(v URLType) {
	o.Website = &v
}

func (o TransportationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransportationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.KeyOptions) {
		toSerialize["keyOptions"] = o.KeyOptions
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.PriceRange) {
		toSerialize["priceRange"] = o.PriceRange
	}
	if !IsNil(o.RelativePosition) {
		toSerialize["relativePosition"] = o.RelativePosition
	}
	if !IsNil(o.TransportationCode) {
		toSerialize["transportationCode"] = o.TransportationCode
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	return toSerialize, nil
}

type NullableTransportationType struct {
	value *TransportationType
	isSet bool
}

func (v NullableTransportationType) Get() *TransportationType {
	return v.value
}

func (v *NullableTransportationType) Set(val *TransportationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportationType(val *TransportationType) *NullableTransportationType {
	return &NullableTransportationType{value: val, isSet: true}
}

func (v NullableTransportationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


