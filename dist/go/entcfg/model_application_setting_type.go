/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the ApplicationSettingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationSettingType{}

// ApplicationSettingType Internal settings that can be of a certain valueType.
type ApplicationSettingType struct {
	ConversionType *ApplicationSettingConversionType `json:"conversionType,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	EditAllowed *bool `json:"editAllowed,omitempty"`
	// Each configuration item will come with a HotelCode which will help the configuration to specify what context the update has to be. Eg. _Global,ORS,'CRO', etc.
	HotelId *string `json:"hotelId,omitempty"`
	LevelCode *string `json:"levelCode,omitempty"`
	LevelType *ApplicationSettingLevelType `json:"levelType,omitempty"`
	Name *string `json:"name,omitempty"`
	Scope *string `json:"scope,omitempty"`
	Sequence *float32 `json:"sequence,omitempty"`
	Settings []BaseApplicationSettingType `json:"settings,omitempty"`
	ShortDescription *string `json:"shortDescription,omitempty"`
	Type *ApplicationSettingTypeType `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
	ValueType *string `json:"valueType,omitempty"`
	// A flag which indicate whether a wild card search should be made.
	WildCardMatch *bool `json:"wildCardMatch,omitempty"`
}

// NewApplicationSettingType instantiates a new ApplicationSettingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSettingType() *ApplicationSettingType {
	this := ApplicationSettingType{}
	return &this
}

// NewApplicationSettingTypeWithDefaults instantiates a new ApplicationSettingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSettingTypeWithDefaults() *ApplicationSettingType {
	this := ApplicationSettingType{}
	return &this
}

// GetConversionType returns the ConversionType field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetConversionType() ApplicationSettingConversionType {
	if o == nil || IsNil(o.ConversionType) {
		var ret ApplicationSettingConversionType
		return ret
	}
	return *o.ConversionType
}

// GetConversionTypeOk returns a tuple with the ConversionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetConversionTypeOk() (*ApplicationSettingConversionType, bool) {
	if o == nil || IsNil(o.ConversionType) {
		return nil, false
	}
	return o.ConversionType, true
}

// HasConversionType returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasConversionType() bool {
	if o != nil && !IsNil(o.ConversionType) {
		return true
	}

	return false
}

// SetConversionType gets a reference to the given ApplicationSettingConversionType and assigns it to the ConversionType field.
func (o *ApplicationSettingType) SetConversionType(v ApplicationSettingConversionType) {
	o.ConversionType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationSettingType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ApplicationSettingType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEditAllowed returns the EditAllowed field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetEditAllowed() bool {
	if o == nil || IsNil(o.EditAllowed) {
		var ret bool
		return ret
	}
	return *o.EditAllowed
}

// GetEditAllowedOk returns a tuple with the EditAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetEditAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.EditAllowed) {
		return nil, false
	}
	return o.EditAllowed, true
}

// HasEditAllowed returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasEditAllowed() bool {
	if o != nil && !IsNil(o.EditAllowed) {
		return true
	}

	return false
}

// SetEditAllowed gets a reference to the given bool and assigns it to the EditAllowed field.
func (o *ApplicationSettingType) SetEditAllowed(v bool) {
	o.EditAllowed = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ApplicationSettingType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLevelCode returns the LevelCode field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetLevelCode() string {
	if o == nil || IsNil(o.LevelCode) {
		var ret string
		return ret
	}
	return *o.LevelCode
}

// GetLevelCodeOk returns a tuple with the LevelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetLevelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LevelCode) {
		return nil, false
	}
	return o.LevelCode, true
}

// HasLevelCode returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasLevelCode() bool {
	if o != nil && !IsNil(o.LevelCode) {
		return true
	}

	return false
}

// SetLevelCode gets a reference to the given string and assigns it to the LevelCode field.
func (o *ApplicationSettingType) SetLevelCode(v string) {
	o.LevelCode = &v
}

// GetLevelType returns the LevelType field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetLevelType() ApplicationSettingLevelType {
	if o == nil || IsNil(o.LevelType) {
		var ret ApplicationSettingLevelType
		return ret
	}
	return *o.LevelType
}

// GetLevelTypeOk returns a tuple with the LevelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetLevelTypeOk() (*ApplicationSettingLevelType, bool) {
	if o == nil || IsNil(o.LevelType) {
		return nil, false
	}
	return o.LevelType, true
}

// HasLevelType returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasLevelType() bool {
	if o != nil && !IsNil(o.LevelType) {
		return true
	}

	return false
}

// SetLevelType gets a reference to the given ApplicationSettingLevelType and assigns it to the LevelType field.
func (o *ApplicationSettingType) SetLevelType(v ApplicationSettingLevelType) {
	o.LevelType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationSettingType) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *ApplicationSettingType) SetScope(v string) {
	o.Scope = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *ApplicationSettingType) SetSequence(v float32) {
	o.Sequence = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetSettings() []BaseApplicationSettingType {
	if o == nil || IsNil(o.Settings) {
		var ret []BaseApplicationSettingType
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetSettingsOk() ([]BaseApplicationSettingType, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given []BaseApplicationSettingType and assigns it to the Settings field.
func (o *ApplicationSettingType) SetSettings(v []BaseApplicationSettingType) {
	o.Settings = v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *ApplicationSettingType) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetType() ApplicationSettingTypeType {
	if o == nil || IsNil(o.Type) {
		var ret ApplicationSettingTypeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetTypeOk() (*ApplicationSettingTypeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ApplicationSettingTypeType and assigns it to the Type field.
func (o *ApplicationSettingType) SetType(v ApplicationSettingTypeType) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ApplicationSettingType) SetValue(v string) {
	o.Value = &v
}

// GetValueType returns the ValueType field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetValueType() string {
	if o == nil || IsNil(o.ValueType) {
		var ret string
		return ret
	}
	return *o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetValueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValueType) {
		return nil, false
	}
	return o.ValueType, true
}

// HasValueType returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasValueType() bool {
	if o != nil && !IsNil(o.ValueType) {
		return true
	}

	return false
}

// SetValueType gets a reference to the given string and assigns it to the ValueType field.
func (o *ApplicationSettingType) SetValueType(v string) {
	o.ValueType = &v
}

// GetWildCardMatch returns the WildCardMatch field value if set, zero value otherwise.
func (o *ApplicationSettingType) GetWildCardMatch() bool {
	if o == nil || IsNil(o.WildCardMatch) {
		var ret bool
		return ret
	}
	return *o.WildCardMatch
}

// GetWildCardMatchOk returns a tuple with the WildCardMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSettingType) GetWildCardMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.WildCardMatch) {
		return nil, false
	}
	return o.WildCardMatch, true
}

// HasWildCardMatch returns a boolean if a field has been set.
func (o *ApplicationSettingType) HasWildCardMatch() bool {
	if o != nil && !IsNil(o.WildCardMatch) {
		return true
	}

	return false
}

// SetWildCardMatch gets a reference to the given bool and assigns it to the WildCardMatch field.
func (o *ApplicationSettingType) SetWildCardMatch(v bool) {
	o.WildCardMatch = &v
}

func (o ApplicationSettingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationSettingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConversionType) {
		toSerialize["conversionType"] = o.ConversionType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.EditAllowed) {
		toSerialize["editAllowed"] = o.EditAllowed
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.LevelCode) {
		toSerialize["levelCode"] = o.LevelCode
	}
	if !IsNil(o.LevelType) {
		toSerialize["levelType"] = o.LevelType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.ValueType) {
		toSerialize["valueType"] = o.ValueType
	}
	if !IsNil(o.WildCardMatch) {
		toSerialize["wildCardMatch"] = o.WildCardMatch
	}
	return toSerialize, nil
}

type NullableApplicationSettingType struct {
	value *ApplicationSettingType
	isSet bool
}

func (v NullableApplicationSettingType) Get() *ApplicationSettingType {
	return v.value
}

func (v *NullableApplicationSettingType) Set(val *ApplicationSettingType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSettingType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSettingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSettingType(val *ApplicationSettingType) *NullableApplicationSettingType {
	return &NullableApplicationSettingType{value: val, isSet: true}
}

func (v NullableApplicationSettingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSettingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


