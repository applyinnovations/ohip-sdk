/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the CentralConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CentralConfig{}

// CentralConfig Type that holds Central Config
type CentralConfig struct {
	// Configuarion Classification
	Config *string `json:"config,omitempty"`
	// Unique identifier of Configuation Item
	Code *string `json:"code,omitempty"`
	// Status of the Configuation Item.
	Status *string `json:"status,omitempty"`
}

// NewCentralConfig instantiates a new CentralConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentralConfig() *CentralConfig {
	this := CentralConfig{}
	return &this
}

// NewCentralConfigWithDefaults instantiates a new CentralConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentralConfigWithDefaults() *CentralConfig {
	this := CentralConfig{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CentralConfig) GetConfig() string {
	if o == nil || IsNil(o.Config) {
		var ret string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralConfig) GetConfigOk() (*string, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *CentralConfig) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given string and assigns it to the Config field.
func (o *CentralConfig) SetConfig(v string) {
	o.Config = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CentralConfig) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralConfig) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CentralConfig) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CentralConfig) SetCode(v string) {
	o.Code = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CentralConfig) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CentralConfig) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CentralConfig) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CentralConfig) SetStatus(v string) {
	o.Status = &v
}

func (o CentralConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CentralConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCentralConfig struct {
	value *CentralConfig
	isSet bool
}

func (v NullableCentralConfig) Get() *CentralConfig {
	return v.value
}

func (v *NullableCentralConfig) Set(val *CentralConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCentralConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCentralConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentralConfig(val *CentralConfig) *NullableCentralConfig {
	return &NullableCentralConfig{value: val, isSet: true}
}

func (v NullableCentralConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentralConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


