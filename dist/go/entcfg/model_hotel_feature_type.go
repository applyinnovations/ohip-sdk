/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the HotelFeatureType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelFeatureType{}

// HotelFeatureType Base details used for amenities.
type HotelFeatureType struct {
	// The description about amenity of the hotel.
	Description *string `json:"description,omitempty"`
	// The comments about amenity of the hotel.
	Comments *string `json:"comments,omitempty"`
	// Specifies the feature code (aka amenity code).
	FeatureCode *string `json:"featureCode,omitempty"`
	// Display Order sequence.
	OrderSequence *float32 `json:"orderSequence,omitempty"`
	// The hours of operation of the amenity in the hotel.
	Hours *string `json:"hours,omitempty"`
	// The price range of the amenity in the hotel.
	PriceRange *string `json:"priceRange,omitempty"`
}

// NewHotelFeatureType instantiates a new HotelFeatureType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelFeatureType() *HotelFeatureType {
	this := HotelFeatureType{}
	return &this
}

// NewHotelFeatureTypeWithDefaults instantiates a new HotelFeatureType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelFeatureTypeWithDefaults() *HotelFeatureType {
	this := HotelFeatureType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HotelFeatureType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelFeatureType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HotelFeatureType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HotelFeatureType) SetDescription(v string) {
	o.Description = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *HotelFeatureType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelFeatureType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *HotelFeatureType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *HotelFeatureType) SetComments(v string) {
	o.Comments = &v
}

// GetFeatureCode returns the FeatureCode field value if set, zero value otherwise.
func (o *HotelFeatureType) GetFeatureCode() string {
	if o == nil || IsNil(o.FeatureCode) {
		var ret string
		return ret
	}
	return *o.FeatureCode
}

// GetFeatureCodeOk returns a tuple with the FeatureCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelFeatureType) GetFeatureCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureCode) {
		return nil, false
	}
	return o.FeatureCode, true
}

// HasFeatureCode returns a boolean if a field has been set.
func (o *HotelFeatureType) HasFeatureCode() bool {
	if o != nil && !IsNil(o.FeatureCode) {
		return true
	}

	return false
}

// SetFeatureCode gets a reference to the given string and assigns it to the FeatureCode field.
func (o *HotelFeatureType) SetFeatureCode(v string) {
	o.FeatureCode = &v
}

// GetOrderSequence returns the OrderSequence field value if set, zero value otherwise.
func (o *HotelFeatureType) GetOrderSequence() float32 {
	if o == nil || IsNil(o.OrderSequence) {
		var ret float32
		return ret
	}
	return *o.OrderSequence
}

// GetOrderSequenceOk returns a tuple with the OrderSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelFeatureType) GetOrderSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderSequence) {
		return nil, false
	}
	return o.OrderSequence, true
}

// HasOrderSequence returns a boolean if a field has been set.
func (o *HotelFeatureType) HasOrderSequence() bool {
	if o != nil && !IsNil(o.OrderSequence) {
		return true
	}

	return false
}

// SetOrderSequence gets a reference to the given float32 and assigns it to the OrderSequence field.
func (o *HotelFeatureType) SetOrderSequence(v float32) {
	o.OrderSequence = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *HotelFeatureType) GetHours() string {
	if o == nil || IsNil(o.Hours) {
		var ret string
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelFeatureType) GetHoursOk() (*string, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *HotelFeatureType) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given string and assigns it to the Hours field.
func (o *HotelFeatureType) SetHours(v string) {
	o.Hours = &v
}

// GetPriceRange returns the PriceRange field value if set, zero value otherwise.
func (o *HotelFeatureType) GetPriceRange() string {
	if o == nil || IsNil(o.PriceRange) {
		var ret string
		return ret
	}
	return *o.PriceRange
}

// GetPriceRangeOk returns a tuple with the PriceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelFeatureType) GetPriceRangeOk() (*string, bool) {
	if o == nil || IsNil(o.PriceRange) {
		return nil, false
	}
	return o.PriceRange, true
}

// HasPriceRange returns a boolean if a field has been set.
func (o *HotelFeatureType) HasPriceRange() bool {
	if o != nil && !IsNil(o.PriceRange) {
		return true
	}

	return false
}

// SetPriceRange gets a reference to the given string and assigns it to the PriceRange field.
func (o *HotelFeatureType) SetPriceRange(v string) {
	o.PriceRange = &v
}

func (o HotelFeatureType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelFeatureType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.FeatureCode) {
		toSerialize["featureCode"] = o.FeatureCode
	}
	if !IsNil(o.OrderSequence) {
		toSerialize["orderSequence"] = o.OrderSequence
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.PriceRange) {
		toSerialize["priceRange"] = o.PriceRange
	}
	return toSerialize, nil
}

type NullableHotelFeatureType struct {
	value *HotelFeatureType
	isSet bool
}

func (v NullableHotelFeatureType) Get() *HotelFeatureType {
	return v.value
}

func (v *NullableHotelFeatureType) Set(val *HotelFeatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelFeatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelFeatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelFeatureType(val *HotelFeatureType) *NullableHotelFeatureType {
	return &NullableHotelFeatureType{value: val, isSet: true}
}

func (v NullableHotelFeatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelFeatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


