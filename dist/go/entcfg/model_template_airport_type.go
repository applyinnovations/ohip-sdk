/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the TemplateAirportType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateAirportType{}

// TemplateAirportType Base details of the airport.
type TemplateAirportType struct {
	// Description of the airport.
	Description *string `json:"description,omitempty"`
	// Distance from the hotel to the airport.
	Distance *float32 `json:"distance,omitempty"`
	// Unit of distance for the Distance measurement.
	DistanceType *string `json:"distanceType,omitempty"`
	// Driving time from the hotel to the airport.
	DrivingTime *string `json:"drivingTime,omitempty"`
	// Direction of the airport in relation to the hotel.
	Direction *string `json:"direction,omitempty"`
	// URL of the airport's website.
	Website *string `json:"website,omitempty"`
	// Transportation option available for the airport.
	TransportationOptions []TransportationInfoType `json:"transportationOptions,omitempty"`
	// Sequence number for displaying the airport.
	Sequence *int32 `json:"sequence,omitempty"`
	// Airport code identifying the airport.
	Code *string `json:"code,omitempty"`
}

// NewTemplateAirportType instantiates a new TemplateAirportType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateAirportType() *TemplateAirportType {
	this := TemplateAirportType{}
	return &this
}

// NewTemplateAirportTypeWithDefaults instantiates a new TemplateAirportType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateAirportTypeWithDefaults() *TemplateAirportType {
	this := TemplateAirportType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TemplateAirportType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplateAirportType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TemplateAirportType) SetDescription(v string) {
	o.Description = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *TemplateAirportType) GetDistance() float32 {
	if o == nil || IsNil(o.Distance) {
		var ret float32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetDistanceOk() (*float32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *TemplateAirportType) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given float32 and assigns it to the Distance field.
func (o *TemplateAirportType) SetDistance(v float32) {
	o.Distance = &v
}

// GetDistanceType returns the DistanceType field value if set, zero value otherwise.
func (o *TemplateAirportType) GetDistanceType() string {
	if o == nil || IsNil(o.DistanceType) {
		var ret string
		return ret
	}
	return *o.DistanceType
}

// GetDistanceTypeOk returns a tuple with the DistanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetDistanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DistanceType) {
		return nil, false
	}
	return o.DistanceType, true
}

// HasDistanceType returns a boolean if a field has been set.
func (o *TemplateAirportType) HasDistanceType() bool {
	if o != nil && !IsNil(o.DistanceType) {
		return true
	}

	return false
}

// SetDistanceType gets a reference to the given string and assigns it to the DistanceType field.
func (o *TemplateAirportType) SetDistanceType(v string) {
	o.DistanceType = &v
}

// GetDrivingTime returns the DrivingTime field value if set, zero value otherwise.
func (o *TemplateAirportType) GetDrivingTime() string {
	if o == nil || IsNil(o.DrivingTime) {
		var ret string
		return ret
	}
	return *o.DrivingTime
}

// GetDrivingTimeOk returns a tuple with the DrivingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetDrivingTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DrivingTime) {
		return nil, false
	}
	return o.DrivingTime, true
}

// HasDrivingTime returns a boolean if a field has been set.
func (o *TemplateAirportType) HasDrivingTime() bool {
	if o != nil && !IsNil(o.DrivingTime) {
		return true
	}

	return false
}

// SetDrivingTime gets a reference to the given string and assigns it to the DrivingTime field.
func (o *TemplateAirportType) SetDrivingTime(v string) {
	o.DrivingTime = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *TemplateAirportType) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *TemplateAirportType) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *TemplateAirportType) SetDirection(v string) {
	o.Direction = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *TemplateAirportType) GetWebsite() string {
	if o == nil || IsNil(o.Website) {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetWebsiteOk() (*string, bool) {
	if o == nil || IsNil(o.Website) {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *TemplateAirportType) HasWebsite() bool {
	if o != nil && !IsNil(o.Website) {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *TemplateAirportType) SetWebsite(v string) {
	o.Website = &v
}

// GetTransportationOptions returns the TransportationOptions field value if set, zero value otherwise.
func (o *TemplateAirportType) GetTransportationOptions() []TransportationInfoType {
	if o == nil || IsNil(o.TransportationOptions) {
		var ret []TransportationInfoType
		return ret
	}
	return o.TransportationOptions
}

// GetTransportationOptionsOk returns a tuple with the TransportationOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetTransportationOptionsOk() ([]TransportationInfoType, bool) {
	if o == nil || IsNil(o.TransportationOptions) {
		return nil, false
	}
	return o.TransportationOptions, true
}

// HasTransportationOptions returns a boolean if a field has been set.
func (o *TemplateAirportType) HasTransportationOptions() bool {
	if o != nil && !IsNil(o.TransportationOptions) {
		return true
	}

	return false
}

// SetTransportationOptions gets a reference to the given []TransportationInfoType and assigns it to the TransportationOptions field.
func (o *TemplateAirportType) SetTransportationOptions(v []TransportationInfoType) {
	o.TransportationOptions = v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *TemplateAirportType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *TemplateAirportType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *TemplateAirportType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TemplateAirportType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateAirportType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TemplateAirportType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TemplateAirportType) SetCode(v string) {
	o.Code = &v
}

func (o TemplateAirportType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateAirportType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.DistanceType) {
		toSerialize["distanceType"] = o.DistanceType
	}
	if !IsNil(o.DrivingTime) {
		toSerialize["drivingTime"] = o.DrivingTime
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Website) {
		toSerialize["website"] = o.Website
	}
	if !IsNil(o.TransportationOptions) {
		toSerialize["transportationOptions"] = o.TransportationOptions
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableTemplateAirportType struct {
	value *TemplateAirportType
	isSet bool
}

func (v NullableTemplateAirportType) Get() *TemplateAirportType {
	return v.value
}

func (v *NullableTemplateAirportType) Set(val *TemplateAirportType) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateAirportType) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateAirportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateAirportType(val *TemplateAirportType) *NullableTemplateAirportType {
	return &NullableTemplateAirportType{value: val, isSet: true}
}

func (v NullableTemplateAirportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateAirportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


