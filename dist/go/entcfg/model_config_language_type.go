/*
OPERA Cloud Enterprise Configuration API

APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entcfg

import (
	"encoding/json"
)

// checks if the ConfigLanguageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigLanguageType{}

// ConfigLanguageType This gives detailed information about a language.
type ConfigLanguageType struct {
	Description *TranslationTextType50 `json:"description,omitempty"`
	// Translation Language Code is required for the Translation Studio program to display language into which object has been translated.
	TranslationLanguageCode *string `json:"translationLanguageCode,omitempty"`
	// Report Date Language if filled will represent correctly in the report language date elements that might be spelled out, like the day-of-week or the month.
	ReportDateLanguage *string `json:"reportDateLanguage,omitempty"`
	// This is a placeholder element for future use. Functionality may not be available for the current implementation.
	UseAsAlternateLanguage *bool `json:"useAsAlternateLanguage,omitempty"`
	// Geographic, political or cultural region.
	Locale *string `json:"locale,omitempty"`
	// Description for the locale.
	LocaleDescription *string `json:"localeDescription,omitempty"`
	// Language Code is a user definable code that identifies a language.
	LanguageCode *string `json:"languageCode,omitempty"`
}

// NewConfigLanguageType instantiates a new ConfigLanguageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigLanguageType() *ConfigLanguageType {
	this := ConfigLanguageType{}
	return &this
}

// NewConfigLanguageTypeWithDefaults instantiates a new ConfigLanguageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigLanguageTypeWithDefaults() *ConfigLanguageType {
	this := ConfigLanguageType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConfigLanguageType) GetDescription() TranslationTextType50 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType50
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLanguageType) GetDescriptionOk() (*TranslationTextType50, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConfigLanguageType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType50 and assigns it to the Description field.
func (o *ConfigLanguageType) SetDescription(v TranslationTextType50) {
	o.Description = &v
}

// GetTranslationLanguageCode returns the TranslationLanguageCode field value if set, zero value otherwise.
func (o *ConfigLanguageType) GetTranslationLanguageCode() string {
	if o == nil || IsNil(o.TranslationLanguageCode) {
		var ret string
		return ret
	}
	return *o.TranslationLanguageCode
}

// GetTranslationLanguageCodeOk returns a tuple with the TranslationLanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLanguageType) GetTranslationLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TranslationLanguageCode) {
		return nil, false
	}
	return o.TranslationLanguageCode, true
}

// HasTranslationLanguageCode returns a boolean if a field has been set.
func (o *ConfigLanguageType) HasTranslationLanguageCode() bool {
	if o != nil && !IsNil(o.TranslationLanguageCode) {
		return true
	}

	return false
}

// SetTranslationLanguageCode gets a reference to the given string and assigns it to the TranslationLanguageCode field.
func (o *ConfigLanguageType) SetTranslationLanguageCode(v string) {
	o.TranslationLanguageCode = &v
}

// GetReportDateLanguage returns the ReportDateLanguage field value if set, zero value otherwise.
func (o *ConfigLanguageType) GetReportDateLanguage() string {
	if o == nil || IsNil(o.ReportDateLanguage) {
		var ret string
		return ret
	}
	return *o.ReportDateLanguage
}

// GetReportDateLanguageOk returns a tuple with the ReportDateLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLanguageType) GetReportDateLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ReportDateLanguage) {
		return nil, false
	}
	return o.ReportDateLanguage, true
}

// HasReportDateLanguage returns a boolean if a field has been set.
func (o *ConfigLanguageType) HasReportDateLanguage() bool {
	if o != nil && !IsNil(o.ReportDateLanguage) {
		return true
	}

	return false
}

// SetReportDateLanguage gets a reference to the given string and assigns it to the ReportDateLanguage field.
func (o *ConfigLanguageType) SetReportDateLanguage(v string) {
	o.ReportDateLanguage = &v
}

// GetUseAsAlternateLanguage returns the UseAsAlternateLanguage field value if set, zero value otherwise.
func (o *ConfigLanguageType) GetUseAsAlternateLanguage() bool {
	if o == nil || IsNil(o.UseAsAlternateLanguage) {
		var ret bool
		return ret
	}
	return *o.UseAsAlternateLanguage
}

// GetUseAsAlternateLanguageOk returns a tuple with the UseAsAlternateLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLanguageType) GetUseAsAlternateLanguageOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAsAlternateLanguage) {
		return nil, false
	}
	return o.UseAsAlternateLanguage, true
}

// HasUseAsAlternateLanguage returns a boolean if a field has been set.
func (o *ConfigLanguageType) HasUseAsAlternateLanguage() bool {
	if o != nil && !IsNil(o.UseAsAlternateLanguage) {
		return true
	}

	return false
}

// SetUseAsAlternateLanguage gets a reference to the given bool and assigns it to the UseAsAlternateLanguage field.
func (o *ConfigLanguageType) SetUseAsAlternateLanguage(v bool) {
	o.UseAsAlternateLanguage = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ConfigLanguageType) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLanguageType) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ConfigLanguageType) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *ConfigLanguageType) SetLocale(v string) {
	o.Locale = &v
}

// GetLocaleDescription returns the LocaleDescription field value if set, zero value otherwise.
func (o *ConfigLanguageType) GetLocaleDescription() string {
	if o == nil || IsNil(o.LocaleDescription) {
		var ret string
		return ret
	}
	return *o.LocaleDescription
}

// GetLocaleDescriptionOk returns a tuple with the LocaleDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLanguageType) GetLocaleDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.LocaleDescription) {
		return nil, false
	}
	return o.LocaleDescription, true
}

// HasLocaleDescription returns a boolean if a field has been set.
func (o *ConfigLanguageType) HasLocaleDescription() bool {
	if o != nil && !IsNil(o.LocaleDescription) {
		return true
	}

	return false
}

// SetLocaleDescription gets a reference to the given string and assigns it to the LocaleDescription field.
func (o *ConfigLanguageType) SetLocaleDescription(v string) {
	o.LocaleDescription = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *ConfigLanguageType) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigLanguageType) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *ConfigLanguageType) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *ConfigLanguageType) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

func (o ConfigLanguageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigLanguageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TranslationLanguageCode) {
		toSerialize["translationLanguageCode"] = o.TranslationLanguageCode
	}
	if !IsNil(o.ReportDateLanguage) {
		toSerialize["reportDateLanguage"] = o.ReportDateLanguage
	}
	if !IsNil(o.UseAsAlternateLanguage) {
		toSerialize["useAsAlternateLanguage"] = o.UseAsAlternateLanguage
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.LocaleDescription) {
		toSerialize["localeDescription"] = o.LocaleDescription
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	return toSerialize, nil
}

type NullableConfigLanguageType struct {
	value *ConfigLanguageType
	isSet bool
}

func (v NullableConfigLanguageType) Get() *ConfigLanguageType {
	return v.value
}

func (v *NullableConfigLanguageType) Set(val *ConfigLanguageType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigLanguageType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigLanguageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigLanguageType(val *ConfigLanguageType) *NullableConfigLanguageType {
	return &NullableConfigLanguageType{value: val, isSet: true}
}

func (v NullableConfigLanguageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigLanguageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


