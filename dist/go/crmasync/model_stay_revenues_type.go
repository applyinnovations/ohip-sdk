/*
OPERA Cloud CRM Asynchronous API

APIs to insert Stay Records related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmasync

import (
	"encoding/json"
	"fmt"
)

// checks if the StayRevenuesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StayRevenuesType{}

// StayRevenuesType struct for StayRevenuesType
type StayRevenuesType struct {
	// Specifies the amount of revenue.
	RevenueAmount *float32 `json:"revenueAmount,omitempty"`
	// Specifies the bucket code to which the revenue belongs.
	RevenueBucketCode string `json:"revenueBucketCode"`
	// Date on which the transaction was done.
	TransactionDate string `json:"transactionDate"`
}

type _StayRevenuesType StayRevenuesType

// NewStayRevenuesType instantiates a new StayRevenuesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStayRevenuesType(revenueBucketCode string, transactionDate string) *StayRevenuesType {
	this := StayRevenuesType{}
	this.RevenueBucketCode = revenueBucketCode
	this.TransactionDate = transactionDate
	return &this
}

// NewStayRevenuesTypeWithDefaults instantiates a new StayRevenuesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStayRevenuesTypeWithDefaults() *StayRevenuesType {
	this := StayRevenuesType{}
	return &this
}

// GetRevenueAmount returns the RevenueAmount field value if set, zero value otherwise.
func (o *StayRevenuesType) GetRevenueAmount() float32 {
	if o == nil || IsNil(o.RevenueAmount) {
		var ret float32
		return ret
	}
	return *o.RevenueAmount
}

// GetRevenueAmountOk returns a tuple with the RevenueAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayRevenuesType) GetRevenueAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.RevenueAmount) {
		return nil, false
	}
	return o.RevenueAmount, true
}

// HasRevenueAmount returns a boolean if a field has been set.
func (o *StayRevenuesType) HasRevenueAmount() bool {
	if o != nil && !IsNil(o.RevenueAmount) {
		return true
	}

	return false
}

// SetRevenueAmount gets a reference to the given float32 and assigns it to the RevenueAmount field.
func (o *StayRevenuesType) SetRevenueAmount(v float32) {
	o.RevenueAmount = &v
}

// GetRevenueBucketCode returns the RevenueBucketCode field value
func (o *StayRevenuesType) GetRevenueBucketCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevenueBucketCode
}

// GetRevenueBucketCodeOk returns a tuple with the RevenueBucketCode field value
// and a boolean to check if the value has been set.
func (o *StayRevenuesType) GetRevenueBucketCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevenueBucketCode, true
}

// SetRevenueBucketCode sets field value
func (o *StayRevenuesType) SetRevenueBucketCode(v string) {
	o.RevenueBucketCode = v
}

// GetTransactionDate returns the TransactionDate field value
func (o *StayRevenuesType) GetTransactionDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value
// and a boolean to check if the value has been set.
func (o *StayRevenuesType) GetTransactionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionDate, true
}

// SetTransactionDate sets field value
func (o *StayRevenuesType) SetTransactionDate(v string) {
	o.TransactionDate = v
}

func (o StayRevenuesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StayRevenuesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RevenueAmount) {
		toSerialize["revenueAmount"] = o.RevenueAmount
	}
	toSerialize["revenueBucketCode"] = o.RevenueBucketCode
	toSerialize["transactionDate"] = o.TransactionDate
	return toSerialize, nil
}

func (o *StayRevenuesType) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revenueBucketCode",
		"transactionDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStayRevenuesType := _StayRevenuesType{}

	err = json.Unmarshal(bytes, &varStayRevenuesType)

	if err != nil {
		return err
	}

	*o = StayRevenuesType(varStayRevenuesType)

	return err
}

type NullableStayRevenuesType struct {
	value *StayRevenuesType
	isSet bool
}

func (v NullableStayRevenuesType) Get() *StayRevenuesType {
	return v.value
}

func (v *NullableStayRevenuesType) Set(val *StayRevenuesType) {
	v.value = val
	v.isSet = true
}

func (v NullableStayRevenuesType) IsSet() bool {
	return v.isSet
}

func (v *NullableStayRevenuesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStayRevenuesType(val *StayRevenuesType) *NullableStayRevenuesType {
	return &NullableStayRevenuesType{value: val, isSet: true}
}

func (v NullableStayRevenuesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStayRevenuesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


