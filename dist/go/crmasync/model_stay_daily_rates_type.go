/*
OPERA Cloud CRM Asynchronous API

APIs to insert Stay Records related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmasync

import (
	"encoding/json"
	"fmt"
)

// checks if the StayDailyRatesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StayDailyRatesType{}

// StayDailyRatesType struct for StayDailyRatesType
type StayDailyRatesType struct {
	// Date on which the transaction was done.
	TransactionDate string `json:"transactionDate"`
	// Specifies the type of room booked.
	BookedRoomType *string `json:"bookedRoomType,omitempty"`
	// Specifies the code assigned to the currency.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Specifies if the room is a pseudo room.
	PseudoRoom *bool `json:"pseudoRoom,omitempty"`
	// Specifies the market code.
	MarketCode *string `json:"marketCode,omitempty"`
	// Specifies the rate code.
	RateCode string `json:"rateCode"`
	// Specifies the amount added to a particular rate code.
	RateAmount *float32 `json:"rateAmount,omitempty"`
	// Describes the number assigned to a room.
	RoomNumber *string `json:"roomNumber,omitempty"`
	// Describes the type of the room.
	RoomType *string `json:"roomType,omitempty"`
}

type _StayDailyRatesType StayDailyRatesType

// NewStayDailyRatesType instantiates a new StayDailyRatesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStayDailyRatesType(transactionDate string, rateCode string) *StayDailyRatesType {
	this := StayDailyRatesType{}
	this.TransactionDate = transactionDate
	this.RateCode = rateCode
	return &this
}

// NewStayDailyRatesTypeWithDefaults instantiates a new StayDailyRatesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStayDailyRatesTypeWithDefaults() *StayDailyRatesType {
	this := StayDailyRatesType{}
	return &this
}

// GetTransactionDate returns the TransactionDate field value
func (o *StayDailyRatesType) GetTransactionDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetTransactionDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionDate, true
}

// SetTransactionDate sets field value
func (o *StayDailyRatesType) SetTransactionDate(v string) {
	o.TransactionDate = v
}

// GetBookedRoomType returns the BookedRoomType field value if set, zero value otherwise.
func (o *StayDailyRatesType) GetBookedRoomType() string {
	if o == nil || IsNil(o.BookedRoomType) {
		var ret string
		return ret
	}
	return *o.BookedRoomType
}

// GetBookedRoomTypeOk returns a tuple with the BookedRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetBookedRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BookedRoomType) {
		return nil, false
	}
	return o.BookedRoomType, true
}

// HasBookedRoomType returns a boolean if a field has been set.
func (o *StayDailyRatesType) HasBookedRoomType() bool {
	if o != nil && !IsNil(o.BookedRoomType) {
		return true
	}

	return false
}

// SetBookedRoomType gets a reference to the given string and assigns it to the BookedRoomType field.
func (o *StayDailyRatesType) SetBookedRoomType(v string) {
	o.BookedRoomType = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *StayDailyRatesType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *StayDailyRatesType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *StayDailyRatesType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetPseudoRoom returns the PseudoRoom field value if set, zero value otherwise.
func (o *StayDailyRatesType) GetPseudoRoom() bool {
	if o == nil || IsNil(o.PseudoRoom) {
		var ret bool
		return ret
	}
	return *o.PseudoRoom
}

// GetPseudoRoomOk returns a tuple with the PseudoRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetPseudoRoomOk() (*bool, bool) {
	if o == nil || IsNil(o.PseudoRoom) {
		return nil, false
	}
	return o.PseudoRoom, true
}

// HasPseudoRoom returns a boolean if a field has been set.
func (o *StayDailyRatesType) HasPseudoRoom() bool {
	if o != nil && !IsNil(o.PseudoRoom) {
		return true
	}

	return false
}

// SetPseudoRoom gets a reference to the given bool and assigns it to the PseudoRoom field.
func (o *StayDailyRatesType) SetPseudoRoom(v bool) {
	o.PseudoRoom = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *StayDailyRatesType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *StayDailyRatesType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *StayDailyRatesType) SetMarketCode(v string) {
	o.MarketCode = &v
}

// GetRateCode returns the RateCode field value
func (o *StayDailyRatesType) GetRateCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetRateCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RateCode, true
}

// SetRateCode sets field value
func (o *StayDailyRatesType) SetRateCode(v string) {
	o.RateCode = v
}

// GetRateAmount returns the RateAmount field value if set, zero value otherwise.
func (o *StayDailyRatesType) GetRateAmount() float32 {
	if o == nil || IsNil(o.RateAmount) {
		var ret float32
		return ret
	}
	return *o.RateAmount
}

// GetRateAmountOk returns a tuple with the RateAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetRateAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.RateAmount) {
		return nil, false
	}
	return o.RateAmount, true
}

// HasRateAmount returns a boolean if a field has been set.
func (o *StayDailyRatesType) HasRateAmount() bool {
	if o != nil && !IsNil(o.RateAmount) {
		return true
	}

	return false
}

// SetRateAmount gets a reference to the given float32 and assigns it to the RateAmount field.
func (o *StayDailyRatesType) SetRateAmount(v float32) {
	o.RateAmount = &v
}

// GetRoomNumber returns the RoomNumber field value if set, zero value otherwise.
func (o *StayDailyRatesType) GetRoomNumber() string {
	if o == nil || IsNil(o.RoomNumber) {
		var ret string
		return ret
	}
	return *o.RoomNumber
}

// GetRoomNumberOk returns a tuple with the RoomNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetRoomNumberOk() (*string, bool) {
	if o == nil || IsNil(o.RoomNumber) {
		return nil, false
	}
	return o.RoomNumber, true
}

// HasRoomNumber returns a boolean if a field has been set.
func (o *StayDailyRatesType) HasRoomNumber() bool {
	if o != nil && !IsNil(o.RoomNumber) {
		return true
	}

	return false
}

// SetRoomNumber gets a reference to the given string and assigns it to the RoomNumber field.
func (o *StayDailyRatesType) SetRoomNumber(v string) {
	o.RoomNumber = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *StayDailyRatesType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayDailyRatesType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *StayDailyRatesType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *StayDailyRatesType) SetRoomType(v string) {
	o.RoomType = &v
}

func (o StayDailyRatesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StayDailyRatesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionDate"] = o.TransactionDate
	if !IsNil(o.BookedRoomType) {
		toSerialize["bookedRoomType"] = o.BookedRoomType
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.PseudoRoom) {
		toSerialize["pseudoRoom"] = o.PseudoRoom
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	toSerialize["rateCode"] = o.RateCode
	if !IsNil(o.RateAmount) {
		toSerialize["rateAmount"] = o.RateAmount
	}
	if !IsNil(o.RoomNumber) {
		toSerialize["roomNumber"] = o.RoomNumber
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

func (o *StayDailyRatesType) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transactionDate",
		"rateCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStayDailyRatesType := _StayDailyRatesType{}

	err = json.Unmarshal(bytes, &varStayDailyRatesType)

	if err != nil {
		return err
	}

	*o = StayDailyRatesType(varStayDailyRatesType)

	return err
}

type NullableStayDailyRatesType struct {
	value *StayDailyRatesType
	isSet bool
}

func (v NullableStayDailyRatesType) Get() *StayDailyRatesType {
	return v.value
}

func (v *NullableStayDailyRatesType) Set(val *StayDailyRatesType) {
	v.value = val
	v.isSet = true
}

func (v NullableStayDailyRatesType) IsSet() bool {
	return v.isSet
}

func (v *NullableStayDailyRatesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStayDailyRatesType(val *StayDailyRatesType) *NullableStayDailyRatesType {
	return &NullableStayDailyRatesType{value: val, isSet: true}
}

func (v NullableStayDailyRatesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStayDailyRatesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


