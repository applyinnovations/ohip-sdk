/*
OPERA Cloud CRM Asynchronous API

APIs to insert Stay Records related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmasync

import (
	"encoding/json"
)

// checks if the StayRecords type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StayRecords{}

// StayRecords Complex type that contains list of stay record types
type StayRecords struct {
	// Array list of stay records
	StayRecords []StayRecord `json:"stayRecords,omitempty"`
}

// NewStayRecords instantiates a new StayRecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStayRecords() *StayRecords {
	this := StayRecords{}
	return &this
}

// NewStayRecordsWithDefaults instantiates a new StayRecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStayRecordsWithDefaults() *StayRecords {
	this := StayRecords{}
	return &this
}

// GetStayRecords returns the StayRecords field value if set, zero value otherwise.
func (o *StayRecords) GetStayRecords() []StayRecord {
	if o == nil || IsNil(o.StayRecords) {
		var ret []StayRecord
		return ret
	}
	return o.StayRecords
}

// GetStayRecordsOk returns a tuple with the StayRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayRecords) GetStayRecordsOk() ([]StayRecord, bool) {
	if o == nil || IsNil(o.StayRecords) {
		return nil, false
	}
	return o.StayRecords, true
}

// HasStayRecords returns a boolean if a field has been set.
func (o *StayRecords) HasStayRecords() bool {
	if o != nil && !IsNil(o.StayRecords) {
		return true
	}

	return false
}

// SetStayRecords gets a reference to the given []StayRecord and assigns it to the StayRecords field.
func (o *StayRecords) SetStayRecords(v []StayRecord) {
	o.StayRecords = v
}

func (o StayRecords) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StayRecords) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StayRecords) {
		toSerialize["stayRecords"] = o.StayRecords
	}
	return toSerialize, nil
}

type NullableStayRecords struct {
	value *StayRecords
	isSet bool
}

func (v NullableStayRecords) Get() *StayRecords {
	return v.value
}

func (v *NullableStayRecords) Set(val *StayRecords) {
	v.value = val
	v.isSet = true
}

func (v NullableStayRecords) IsSet() bool {
	return v.isSet
}

func (v *NullableStayRecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStayRecords(val *StayRecords) *NullableStayRecords {
	return &NullableStayRecords{value: val, isSet: true}
}

func (v NullableStayRecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStayRecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


