/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipPropertyGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipPropertyGroupType{}

// MembershipPropertyGroupType Base type provides information about Membership Market/Property Groups Configuration.
type MembershipPropertyGroupType struct {
	// Code is used to identify a Membership Market/Resort Group.
	Code *string `json:"code,omitempty"`
	// Description of the Membership Market/Propety Group.
	Description *string `json:"description,omitempty"`
	// Membership Market/Property Groups display sequence Number
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Membership Property code and Description.
	Hotels []CodeDescriptionType `json:"hotels,omitempty"`
}

// NewMembershipPropertyGroupType instantiates a new MembershipPropertyGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipPropertyGroupType() *MembershipPropertyGroupType {
	this := MembershipPropertyGroupType{}
	return &this
}

// NewMembershipPropertyGroupTypeWithDefaults instantiates a new MembershipPropertyGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipPropertyGroupTypeWithDefaults() *MembershipPropertyGroupType {
	this := MembershipPropertyGroupType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MembershipPropertyGroupType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPropertyGroupType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MembershipPropertyGroupType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MembershipPropertyGroupType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MembershipPropertyGroupType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPropertyGroupType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MembershipPropertyGroupType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MembershipPropertyGroupType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *MembershipPropertyGroupType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPropertyGroupType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *MembershipPropertyGroupType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *MembershipPropertyGroupType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetHotels returns the Hotels field value if set, zero value otherwise.
func (o *MembershipPropertyGroupType) GetHotels() []CodeDescriptionType {
	if o == nil || IsNil(o.Hotels) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.Hotels
}

// GetHotelsOk returns a tuple with the Hotels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPropertyGroupType) GetHotelsOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Hotels) {
		return nil, false
	}
	return o.Hotels, true
}

// HasHotels returns a boolean if a field has been set.
func (o *MembershipPropertyGroupType) HasHotels() bool {
	if o != nil && !IsNil(o.Hotels) {
		return true
	}

	return false
}

// SetHotels gets a reference to the given []CodeDescriptionType and assigns it to the Hotels field.
func (o *MembershipPropertyGroupType) SetHotels(v []CodeDescriptionType) {
	o.Hotels = v
}

func (o MembershipPropertyGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipPropertyGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.Hotels) {
		toSerialize["hotels"] = o.Hotels
	}
	return toSerialize, nil
}

type NullableMembershipPropertyGroupType struct {
	value *MembershipPropertyGroupType
	isSet bool
}

func (v NullableMembershipPropertyGroupType) Get() *MembershipPropertyGroupType {
	return v.value
}

func (v *NullableMembershipPropertyGroupType) Set(val *MembershipPropertyGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipPropertyGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipPropertyGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipPropertyGroupType(val *MembershipPropertyGroupType) *NullableMembershipPropertyGroupType {
	return &NullableMembershipPropertyGroupType{value: val, isSet: true}
}

func (v NullableMembershipPropertyGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipPropertyGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


