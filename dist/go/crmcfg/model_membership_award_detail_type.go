/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipAwardDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipAwardDetailType{}

// MembershipAwardDetailType Values by which membership award is uniquely identied.
type MembershipAwardDetailType struct {
	// Membership type for which awards are defined.
	MembershipType *string `json:"membershipType,omitempty"`
	// Membership Award Code.
	AwardCode *string `json:"awardCode,omitempty"`
	// Hotel code to which the record belongs.
	HotelId *string `json:"hotelId,omitempty"`
	// Membership Award Detail Code.
	Code *string `json:"code,omitempty"`
	UpgradeId *UniqueIDType `json:"upgradeId,omitempty"`
	// Identify whether Room or Room Group upgrade record.
	GroupUpgrade *bool `json:"groupUpgrade,omitempty"`
	// Inactive flag for Membership Award detail (Rate/Product/upgrade).
	Inactive *bool `json:"inactive,omitempty"`
	DateRange *DateRangeType `json:"dateRange,omitempty"`
	// Points required to upgrade.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// Upgrade from Room.
	FromRoom *string `json:"fromRoom,omitempty"`
	// Upgrade to Room.
	ToRoom *string `json:"toRoom,omitempty"`
	// Upgrade from Room Group.
	FromRoomGroup *string `json:"fromRoomGroup,omitempty"`
	// Upgrade to Room Group.
	ToRoomGroup *string `json:"toRoomGroup,omitempty"`
}

// NewMembershipAwardDetailType instantiates a new MembershipAwardDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipAwardDetailType() *MembershipAwardDetailType {
	this := MembershipAwardDetailType{}
	return &this
}

// NewMembershipAwardDetailTypeWithDefaults instantiates a new MembershipAwardDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipAwardDetailTypeWithDefaults() *MembershipAwardDetailType {
	this := MembershipAwardDetailType{}
	return &this
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipAwardDetailType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetAwardCode returns the AwardCode field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetAwardCode() string {
	if o == nil || IsNil(o.AwardCode) {
		var ret string
		return ret
	}
	return *o.AwardCode
}

// GetAwardCodeOk returns a tuple with the AwardCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetAwardCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardCode) {
		return nil, false
	}
	return o.AwardCode, true
}

// HasAwardCode returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasAwardCode() bool {
	if o != nil && !IsNil(o.AwardCode) {
		return true
	}

	return false
}

// SetAwardCode gets a reference to the given string and assigns it to the AwardCode field.
func (o *MembershipAwardDetailType) SetAwardCode(v string) {
	o.AwardCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MembershipAwardDetailType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MembershipAwardDetailType) SetCode(v string) {
	o.Code = &v
}

// GetUpgradeId returns the UpgradeId field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetUpgradeId() UniqueIDType {
	if o == nil || IsNil(o.UpgradeId) {
		var ret UniqueIDType
		return ret
	}
	return *o.UpgradeId
}

// GetUpgradeIdOk returns a tuple with the UpgradeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetUpgradeIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.UpgradeId) {
		return nil, false
	}
	return o.UpgradeId, true
}

// HasUpgradeId returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasUpgradeId() bool {
	if o != nil && !IsNil(o.UpgradeId) {
		return true
	}

	return false
}

// SetUpgradeId gets a reference to the given UniqueIDType and assigns it to the UpgradeId field.
func (o *MembershipAwardDetailType) SetUpgradeId(v UniqueIDType) {
	o.UpgradeId = &v
}

// GetGroupUpgrade returns the GroupUpgrade field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetGroupUpgrade() bool {
	if o == nil || IsNil(o.GroupUpgrade) {
		var ret bool
		return ret
	}
	return *o.GroupUpgrade
}

// GetGroupUpgradeOk returns a tuple with the GroupUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetGroupUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupUpgrade) {
		return nil, false
	}
	return o.GroupUpgrade, true
}

// HasGroupUpgrade returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasGroupUpgrade() bool {
	if o != nil && !IsNil(o.GroupUpgrade) {
		return true
	}

	return false
}

// SetGroupUpgrade gets a reference to the given bool and assigns it to the GroupUpgrade field.
func (o *MembershipAwardDetailType) SetGroupUpgrade(v bool) {
	o.GroupUpgrade = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *MembershipAwardDetailType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetDateRange() DateRangeType {
	if o == nil || IsNil(o.DateRange) {
		var ret DateRangeType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetDateRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given DateRangeType and assigns it to the DateRange field.
func (o *MembershipAwardDetailType) SetDateRange(v DateRangeType) {
	o.DateRange = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *MembershipAwardDetailType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetFromRoom returns the FromRoom field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetFromRoom() string {
	if o == nil || IsNil(o.FromRoom) {
		var ret string
		return ret
	}
	return *o.FromRoom
}

// GetFromRoomOk returns a tuple with the FromRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetFromRoomOk() (*string, bool) {
	if o == nil || IsNil(o.FromRoom) {
		return nil, false
	}
	return o.FromRoom, true
}

// HasFromRoom returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasFromRoom() bool {
	if o != nil && !IsNil(o.FromRoom) {
		return true
	}

	return false
}

// SetFromRoom gets a reference to the given string and assigns it to the FromRoom field.
func (o *MembershipAwardDetailType) SetFromRoom(v string) {
	o.FromRoom = &v
}

// GetToRoom returns the ToRoom field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetToRoom() string {
	if o == nil || IsNil(o.ToRoom) {
		var ret string
		return ret
	}
	return *o.ToRoom
}

// GetToRoomOk returns a tuple with the ToRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetToRoomOk() (*string, bool) {
	if o == nil || IsNil(o.ToRoom) {
		return nil, false
	}
	return o.ToRoom, true
}

// HasToRoom returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasToRoom() bool {
	if o != nil && !IsNil(o.ToRoom) {
		return true
	}

	return false
}

// SetToRoom gets a reference to the given string and assigns it to the ToRoom field.
func (o *MembershipAwardDetailType) SetToRoom(v string) {
	o.ToRoom = &v
}

// GetFromRoomGroup returns the FromRoomGroup field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetFromRoomGroup() string {
	if o == nil || IsNil(o.FromRoomGroup) {
		var ret string
		return ret
	}
	return *o.FromRoomGroup
}

// GetFromRoomGroupOk returns a tuple with the FromRoomGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetFromRoomGroupOk() (*string, bool) {
	if o == nil || IsNil(o.FromRoomGroup) {
		return nil, false
	}
	return o.FromRoomGroup, true
}

// HasFromRoomGroup returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasFromRoomGroup() bool {
	if o != nil && !IsNil(o.FromRoomGroup) {
		return true
	}

	return false
}

// SetFromRoomGroup gets a reference to the given string and assigns it to the FromRoomGroup field.
func (o *MembershipAwardDetailType) SetFromRoomGroup(v string) {
	o.FromRoomGroup = &v
}

// GetToRoomGroup returns the ToRoomGroup field value if set, zero value otherwise.
func (o *MembershipAwardDetailType) GetToRoomGroup() string {
	if o == nil || IsNil(o.ToRoomGroup) {
		var ret string
		return ret
	}
	return *o.ToRoomGroup
}

// GetToRoomGroupOk returns a tuple with the ToRoomGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipAwardDetailType) GetToRoomGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ToRoomGroup) {
		return nil, false
	}
	return o.ToRoomGroup, true
}

// HasToRoomGroup returns a boolean if a field has been set.
func (o *MembershipAwardDetailType) HasToRoomGroup() bool {
	if o != nil && !IsNil(o.ToRoomGroup) {
		return true
	}

	return false
}

// SetToRoomGroup gets a reference to the given string and assigns it to the ToRoomGroup field.
func (o *MembershipAwardDetailType) SetToRoomGroup(v string) {
	o.ToRoomGroup = &v
}

func (o MembershipAwardDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipAwardDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.AwardCode) {
		toSerialize["awardCode"] = o.AwardCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.UpgradeId) {
		toSerialize["upgradeId"] = o.UpgradeId
	}
	if !IsNil(o.GroupUpgrade) {
		toSerialize["groupUpgrade"] = o.GroupUpgrade
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.FromRoom) {
		toSerialize["fromRoom"] = o.FromRoom
	}
	if !IsNil(o.ToRoom) {
		toSerialize["toRoom"] = o.ToRoom
	}
	if !IsNil(o.FromRoomGroup) {
		toSerialize["fromRoomGroup"] = o.FromRoomGroup
	}
	if !IsNil(o.ToRoomGroup) {
		toSerialize["toRoomGroup"] = o.ToRoomGroup
	}
	return toSerialize, nil
}

type NullableMembershipAwardDetailType struct {
	value *MembershipAwardDetailType
	isSet bool
}

func (v NullableMembershipAwardDetailType) Get() *MembershipAwardDetailType {
	return v.value
}

func (v *NullableMembershipAwardDetailType) Set(val *MembershipAwardDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipAwardDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipAwardDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipAwardDetailType(val *MembershipAwardDetailType) *NullableMembershipAwardDetailType {
	return &NullableMembershipAwardDetailType{value: val, isSet: true}
}

func (v NullableMembershipAwardDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipAwardDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


