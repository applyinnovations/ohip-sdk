/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the CardNumberDetailsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardNumberDetailsType{}

// CardNumberDetailsType Card Number of membership type.
type CardNumberDetailsType struct {
	MembershipCardValidationRule *MembershipCardValidationRuleType `json:"membershipCardValidationRule,omitempty"`
	CardNumberBasedOn *CardNumberGenerationModeType `json:"cardNumberBasedOn,omitempty"`
	// Indicates External System from which card number will be generated.
	Database *string `json:"database,omitempty"`
	// Indicates if the multiple membership cards may be issued with the same membership number.
	AllowDuplicateCardNumbers *bool `json:"allowDuplicateCardNumbers,omitempty"`
	// Indicates if the membership expiration date is required for validation of the profile membership information.
	ExpirationDateRequired *bool `json:"expirationDateRequired,omitempty"`
	// Indicates is there a microchip that stores information which can be used to verify the validity of the membership and authenticate the customer based on a personal identification number (PIN).
	ChipAndPin *bool `json:"chipAndPin,omitempty"`
	// Indicates is the membership card is validated through the interface.
	ValidationByInterface *bool `json:"validationByInterface,omitempty"`
}

// NewCardNumberDetailsType instantiates a new CardNumberDetailsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardNumberDetailsType() *CardNumberDetailsType {
	this := CardNumberDetailsType{}
	return &this
}

// NewCardNumberDetailsTypeWithDefaults instantiates a new CardNumberDetailsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardNumberDetailsTypeWithDefaults() *CardNumberDetailsType {
	this := CardNumberDetailsType{}
	return &this
}

// GetMembershipCardValidationRule returns the MembershipCardValidationRule field value if set, zero value otherwise.
func (o *CardNumberDetailsType) GetMembershipCardValidationRule() MembershipCardValidationRuleType {
	if o == nil || IsNil(o.MembershipCardValidationRule) {
		var ret MembershipCardValidationRuleType
		return ret
	}
	return *o.MembershipCardValidationRule
}

// GetMembershipCardValidationRuleOk returns a tuple with the MembershipCardValidationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardNumberDetailsType) GetMembershipCardValidationRuleOk() (*MembershipCardValidationRuleType, bool) {
	if o == nil || IsNil(o.MembershipCardValidationRule) {
		return nil, false
	}
	return o.MembershipCardValidationRule, true
}

// HasMembershipCardValidationRule returns a boolean if a field has been set.
func (o *CardNumberDetailsType) HasMembershipCardValidationRule() bool {
	if o != nil && !IsNil(o.MembershipCardValidationRule) {
		return true
	}

	return false
}

// SetMembershipCardValidationRule gets a reference to the given MembershipCardValidationRuleType and assigns it to the MembershipCardValidationRule field.
func (o *CardNumberDetailsType) SetMembershipCardValidationRule(v MembershipCardValidationRuleType) {
	o.MembershipCardValidationRule = &v
}

// GetCardNumberBasedOn returns the CardNumberBasedOn field value if set, zero value otherwise.
func (o *CardNumberDetailsType) GetCardNumberBasedOn() CardNumberGenerationModeType {
	if o == nil || IsNil(o.CardNumberBasedOn) {
		var ret CardNumberGenerationModeType
		return ret
	}
	return *o.CardNumberBasedOn
}

// GetCardNumberBasedOnOk returns a tuple with the CardNumberBasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardNumberDetailsType) GetCardNumberBasedOnOk() (*CardNumberGenerationModeType, bool) {
	if o == nil || IsNil(o.CardNumberBasedOn) {
		return nil, false
	}
	return o.CardNumberBasedOn, true
}

// HasCardNumberBasedOn returns a boolean if a field has been set.
func (o *CardNumberDetailsType) HasCardNumberBasedOn() bool {
	if o != nil && !IsNil(o.CardNumberBasedOn) {
		return true
	}

	return false
}

// SetCardNumberBasedOn gets a reference to the given CardNumberGenerationModeType and assigns it to the CardNumberBasedOn field.
func (o *CardNumberDetailsType) SetCardNumberBasedOn(v CardNumberGenerationModeType) {
	o.CardNumberBasedOn = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *CardNumberDetailsType) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardNumberDetailsType) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *CardNumberDetailsType) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *CardNumberDetailsType) SetDatabase(v string) {
	o.Database = &v
}

// GetAllowDuplicateCardNumbers returns the AllowDuplicateCardNumbers field value if set, zero value otherwise.
func (o *CardNumberDetailsType) GetAllowDuplicateCardNumbers() bool {
	if o == nil || IsNil(o.AllowDuplicateCardNumbers) {
		var ret bool
		return ret
	}
	return *o.AllowDuplicateCardNumbers
}

// GetAllowDuplicateCardNumbersOk returns a tuple with the AllowDuplicateCardNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardNumberDetailsType) GetAllowDuplicateCardNumbersOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowDuplicateCardNumbers) {
		return nil, false
	}
	return o.AllowDuplicateCardNumbers, true
}

// HasAllowDuplicateCardNumbers returns a boolean if a field has been set.
func (o *CardNumberDetailsType) HasAllowDuplicateCardNumbers() bool {
	if o != nil && !IsNil(o.AllowDuplicateCardNumbers) {
		return true
	}

	return false
}

// SetAllowDuplicateCardNumbers gets a reference to the given bool and assigns it to the AllowDuplicateCardNumbers field.
func (o *CardNumberDetailsType) SetAllowDuplicateCardNumbers(v bool) {
	o.AllowDuplicateCardNumbers = &v
}

// GetExpirationDateRequired returns the ExpirationDateRequired field value if set, zero value otherwise.
func (o *CardNumberDetailsType) GetExpirationDateRequired() bool {
	if o == nil || IsNil(o.ExpirationDateRequired) {
		var ret bool
		return ret
	}
	return *o.ExpirationDateRequired
}

// GetExpirationDateRequiredOk returns a tuple with the ExpirationDateRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardNumberDetailsType) GetExpirationDateRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ExpirationDateRequired) {
		return nil, false
	}
	return o.ExpirationDateRequired, true
}

// HasExpirationDateRequired returns a boolean if a field has been set.
func (o *CardNumberDetailsType) HasExpirationDateRequired() bool {
	if o != nil && !IsNil(o.ExpirationDateRequired) {
		return true
	}

	return false
}

// SetExpirationDateRequired gets a reference to the given bool and assigns it to the ExpirationDateRequired field.
func (o *CardNumberDetailsType) SetExpirationDateRequired(v bool) {
	o.ExpirationDateRequired = &v
}

// GetChipAndPin returns the ChipAndPin field value if set, zero value otherwise.
func (o *CardNumberDetailsType) GetChipAndPin() bool {
	if o == nil || IsNil(o.ChipAndPin) {
		var ret bool
		return ret
	}
	return *o.ChipAndPin
}

// GetChipAndPinOk returns a tuple with the ChipAndPin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardNumberDetailsType) GetChipAndPinOk() (*bool, bool) {
	if o == nil || IsNil(o.ChipAndPin) {
		return nil, false
	}
	return o.ChipAndPin, true
}

// HasChipAndPin returns a boolean if a field has been set.
func (o *CardNumberDetailsType) HasChipAndPin() bool {
	if o != nil && !IsNil(o.ChipAndPin) {
		return true
	}

	return false
}

// SetChipAndPin gets a reference to the given bool and assigns it to the ChipAndPin field.
func (o *CardNumberDetailsType) SetChipAndPin(v bool) {
	o.ChipAndPin = &v
}

// GetValidationByInterface returns the ValidationByInterface field value if set, zero value otherwise.
func (o *CardNumberDetailsType) GetValidationByInterface() bool {
	if o == nil || IsNil(o.ValidationByInterface) {
		var ret bool
		return ret
	}
	return *o.ValidationByInterface
}

// GetValidationByInterfaceOk returns a tuple with the ValidationByInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardNumberDetailsType) GetValidationByInterfaceOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidationByInterface) {
		return nil, false
	}
	return o.ValidationByInterface, true
}

// HasValidationByInterface returns a boolean if a field has been set.
func (o *CardNumberDetailsType) HasValidationByInterface() bool {
	if o != nil && !IsNil(o.ValidationByInterface) {
		return true
	}

	return false
}

// SetValidationByInterface gets a reference to the given bool and assigns it to the ValidationByInterface field.
func (o *CardNumberDetailsType) SetValidationByInterface(v bool) {
	o.ValidationByInterface = &v
}

func (o CardNumberDetailsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardNumberDetailsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipCardValidationRule) {
		toSerialize["membershipCardValidationRule"] = o.MembershipCardValidationRule
	}
	if !IsNil(o.CardNumberBasedOn) {
		toSerialize["cardNumberBasedOn"] = o.CardNumberBasedOn
	}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.AllowDuplicateCardNumbers) {
		toSerialize["allowDuplicateCardNumbers"] = o.AllowDuplicateCardNumbers
	}
	if !IsNil(o.ExpirationDateRequired) {
		toSerialize["expirationDateRequired"] = o.ExpirationDateRequired
	}
	if !IsNil(o.ChipAndPin) {
		toSerialize["chipAndPin"] = o.ChipAndPin
	}
	if !IsNil(o.ValidationByInterface) {
		toSerialize["validationByInterface"] = o.ValidationByInterface
	}
	return toSerialize, nil
}

type NullableCardNumberDetailsType struct {
	value *CardNumberDetailsType
	isSet bool
}

func (v NullableCardNumberDetailsType) Get() *CardNumberDetailsType {
	return v.value
}

func (v *NullableCardNumberDetailsType) Set(val *CardNumberDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCardNumberDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCardNumberDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardNumberDetailsType(val *CardNumberDetailsType) *NullableCardNumberDetailsType {
	return &NullableCardNumberDetailsType{value: val, isSet: true}
}

func (v NullableCardNumberDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardNumberDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


