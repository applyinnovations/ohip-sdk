/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipRateType{}

// MembershipRateType Membership Rate summary information.
type MembershipRateType struct {
	// Membership Rate hotel code.
	HotelId *string `json:"hotelId,omitempty"`
	// Membership Rate rule code.
	RuleCode *string `json:"ruleCode,omitempty"`
	// Description of the rule.
	Description *string `json:"description,omitempty"`
	// Date for which the rule will be affective.
	BeginDate *string `json:"beginDate,omitempty"`
	// Date for which the rule will end being affective.
	EndDate *string `json:"endDate,omitempty"`
	RatePlanCodes []string `json:"ratePlanCodes,omitempty"`
	// Rate rule membership type details.
	Memberships []RateRuleMembershipType `json:"memberships,omitempty"`
	// Latest time of booking for guaranteed availability. Only Time part is used.
	LatestTOB *string `json:"latestTOB,omitempty"`
	// Number of days to day of arrival for guaranteed availability.
	DaysToDOA *int32 `json:"daysToDOA,omitempty"`
	// Indicates whether the Membership Rate is Active/Inactive.
	Inactive *bool `json:"inactive,omitempty"`
	// Indicates whether the rule is used for member guaranteed availability.
	Guaranteed *bool `json:"guaranteed,omitempty"`
}

// NewMembershipRateType instantiates a new MembershipRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipRateType() *MembershipRateType {
	this := MembershipRateType{}
	return &this
}

// NewMembershipRateTypeWithDefaults instantiates a new MembershipRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipRateTypeWithDefaults() *MembershipRateType {
	this := MembershipRateType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MembershipRateType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MembershipRateType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MembershipRateType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRuleCode returns the RuleCode field value if set, zero value otherwise.
func (o *MembershipRateType) GetRuleCode() string {
	if o == nil || IsNil(o.RuleCode) {
		var ret string
		return ret
	}
	return *o.RuleCode
}

// GetRuleCodeOk returns a tuple with the RuleCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetRuleCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RuleCode) {
		return nil, false
	}
	return o.RuleCode, true
}

// HasRuleCode returns a boolean if a field has been set.
func (o *MembershipRateType) HasRuleCode() bool {
	if o != nil && !IsNil(o.RuleCode) {
		return true
	}

	return false
}

// SetRuleCode gets a reference to the given string and assigns it to the RuleCode field.
func (o *MembershipRateType) SetRuleCode(v string) {
	o.RuleCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MembershipRateType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MembershipRateType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MembershipRateType) SetDescription(v string) {
	o.Description = &v
}

// GetBeginDate returns the BeginDate field value if set, zero value otherwise.
func (o *MembershipRateType) GetBeginDate() string {
	if o == nil || IsNil(o.BeginDate) {
		var ret string
		return ret
	}
	return *o.BeginDate
}

// GetBeginDateOk returns a tuple with the BeginDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetBeginDateOk() (*string, bool) {
	if o == nil || IsNil(o.BeginDate) {
		return nil, false
	}
	return o.BeginDate, true
}

// HasBeginDate returns a boolean if a field has been set.
func (o *MembershipRateType) HasBeginDate() bool {
	if o != nil && !IsNil(o.BeginDate) {
		return true
	}

	return false
}

// SetBeginDate gets a reference to the given string and assigns it to the BeginDate field.
func (o *MembershipRateType) SetBeginDate(v string) {
	o.BeginDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *MembershipRateType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *MembershipRateType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *MembershipRateType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetRatePlanCodes returns the RatePlanCodes field value if set, zero value otherwise.
func (o *MembershipRateType) GetRatePlanCodes() []string {
	if o == nil || IsNil(o.RatePlanCodes) {
		var ret []string
		return ret
	}
	return o.RatePlanCodes
}

// GetRatePlanCodesOk returns a tuple with the RatePlanCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetRatePlanCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlanCodes) {
		return nil, false
	}
	return o.RatePlanCodes, true
}

// HasRatePlanCodes returns a boolean if a field has been set.
func (o *MembershipRateType) HasRatePlanCodes() bool {
	if o != nil && !IsNil(o.RatePlanCodes) {
		return true
	}

	return false
}

// SetRatePlanCodes gets a reference to the given []string and assigns it to the RatePlanCodes field.
func (o *MembershipRateType) SetRatePlanCodes(v []string) {
	o.RatePlanCodes = v
}

// GetMemberships returns the Memberships field value if set, zero value otherwise.
func (o *MembershipRateType) GetMemberships() []RateRuleMembershipType {
	if o == nil || IsNil(o.Memberships) {
		var ret []RateRuleMembershipType
		return ret
	}
	return o.Memberships
}

// GetMembershipsOk returns a tuple with the Memberships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetMembershipsOk() ([]RateRuleMembershipType, bool) {
	if o == nil || IsNil(o.Memberships) {
		return nil, false
	}
	return o.Memberships, true
}

// HasMemberships returns a boolean if a field has been set.
func (o *MembershipRateType) HasMemberships() bool {
	if o != nil && !IsNil(o.Memberships) {
		return true
	}

	return false
}

// SetMemberships gets a reference to the given []RateRuleMembershipType and assigns it to the Memberships field.
func (o *MembershipRateType) SetMemberships(v []RateRuleMembershipType) {
	o.Memberships = v
}

// GetLatestTOB returns the LatestTOB field value if set, zero value otherwise.
func (o *MembershipRateType) GetLatestTOB() string {
	if o == nil || IsNil(o.LatestTOB) {
		var ret string
		return ret
	}
	return *o.LatestTOB
}

// GetLatestTOBOk returns a tuple with the LatestTOB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetLatestTOBOk() (*string, bool) {
	if o == nil || IsNil(o.LatestTOB) {
		return nil, false
	}
	return o.LatestTOB, true
}

// HasLatestTOB returns a boolean if a field has been set.
func (o *MembershipRateType) HasLatestTOB() bool {
	if o != nil && !IsNil(o.LatestTOB) {
		return true
	}

	return false
}

// SetLatestTOB gets a reference to the given string and assigns it to the LatestTOB field.
func (o *MembershipRateType) SetLatestTOB(v string) {
	o.LatestTOB = &v
}

// GetDaysToDOA returns the DaysToDOA field value if set, zero value otherwise.
func (o *MembershipRateType) GetDaysToDOA() int32 {
	if o == nil || IsNil(o.DaysToDOA) {
		var ret int32
		return ret
	}
	return *o.DaysToDOA
}

// GetDaysToDOAOk returns a tuple with the DaysToDOA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetDaysToDOAOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysToDOA) {
		return nil, false
	}
	return o.DaysToDOA, true
}

// HasDaysToDOA returns a boolean if a field has been set.
func (o *MembershipRateType) HasDaysToDOA() bool {
	if o != nil && !IsNil(o.DaysToDOA) {
		return true
	}

	return false
}

// SetDaysToDOA gets a reference to the given int32 and assigns it to the DaysToDOA field.
func (o *MembershipRateType) SetDaysToDOA(v int32) {
	o.DaysToDOA = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *MembershipRateType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *MembershipRateType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *MembershipRateType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetGuaranteed returns the Guaranteed field value if set, zero value otherwise.
func (o *MembershipRateType) GetGuaranteed() bool {
	if o == nil || IsNil(o.Guaranteed) {
		var ret bool
		return ret
	}
	return *o.Guaranteed
}

// GetGuaranteedOk returns a tuple with the Guaranteed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipRateType) GetGuaranteedOk() (*bool, bool) {
	if o == nil || IsNil(o.Guaranteed) {
		return nil, false
	}
	return o.Guaranteed, true
}

// HasGuaranteed returns a boolean if a field has been set.
func (o *MembershipRateType) HasGuaranteed() bool {
	if o != nil && !IsNil(o.Guaranteed) {
		return true
	}

	return false
}

// SetGuaranteed gets a reference to the given bool and assigns it to the Guaranteed field.
func (o *MembershipRateType) SetGuaranteed(v bool) {
	o.Guaranteed = &v
}

func (o MembershipRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RuleCode) {
		toSerialize["ruleCode"] = o.RuleCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.BeginDate) {
		toSerialize["beginDate"] = o.BeginDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.RatePlanCodes) {
		toSerialize["ratePlanCodes"] = o.RatePlanCodes
	}
	if !IsNil(o.Memberships) {
		toSerialize["memberships"] = o.Memberships
	}
	if !IsNil(o.LatestTOB) {
		toSerialize["latestTOB"] = o.LatestTOB
	}
	if !IsNil(o.DaysToDOA) {
		toSerialize["daysToDOA"] = o.DaysToDOA
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Guaranteed) {
		toSerialize["guaranteed"] = o.Guaranteed
	}
	return toSerialize, nil
}

type NullableMembershipRateType struct {
	value *MembershipRateType
	isSet bool
}

func (v NullableMembershipRateType) Get() *MembershipRateType {
	return v.value
}

func (v *NullableMembershipRateType) Set(val *MembershipRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipRateType(val *MembershipRateType) *NullableMembershipRateType {
	return &NullableMembershipRateType{value: val, isSet: true}
}

func (v NullableMembershipRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


