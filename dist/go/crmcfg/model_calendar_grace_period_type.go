/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// CalendarGracePeriodType Five Year period
type CalendarGracePeriodType string

// List of calendarGracePeriodType
const (
	CALENDARGRACEPERIODTYPE_NO_GRACE_PERIOD CalendarGracePeriodType = "NoGracePeriod"
	CALENDARGRACEPERIODTYPE_ONE_YEAR CalendarGracePeriodType = "OneYear"
	CALENDARGRACEPERIODTYPE_TWO_YEARS CalendarGracePeriodType = "TwoYears"
	CALENDARGRACEPERIODTYPE_THREE_YEARS CalendarGracePeriodType = "ThreeYears"
	CALENDARGRACEPERIODTYPE_FOUR_YEARS CalendarGracePeriodType = "FourYears"
	CALENDARGRACEPERIODTYPE_FIVE_YEARS CalendarGracePeriodType = "FiveYears"
)

// All allowed values of CalendarGracePeriodType enum
var AllowedCalendarGracePeriodTypeEnumValues = []CalendarGracePeriodType{
	"NoGracePeriod",
	"OneYear",
	"TwoYears",
	"ThreeYears",
	"FourYears",
	"FiveYears",
}

func (v *CalendarGracePeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalendarGracePeriodType(value)
	for _, existing := range AllowedCalendarGracePeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalendarGracePeriodType", value)
}

// NewCalendarGracePeriodTypeFromValue returns a pointer to a valid CalendarGracePeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalendarGracePeriodTypeFromValue(v string) (*CalendarGracePeriodType, error) {
	ev := CalendarGracePeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalendarGracePeriodType: valid values are %v", v, AllowedCalendarGracePeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalendarGracePeriodType) IsValid() bool {
	for _, existing := range AllowedCalendarGracePeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to calendarGracePeriodType value
func (v CalendarGracePeriodType) Ptr() *CalendarGracePeriodType {
	return &v
}

type NullableCalendarGracePeriodType struct {
	value *CalendarGracePeriodType
	isSet bool
}

func (v NullableCalendarGracePeriodType) Get() *CalendarGracePeriodType {
	return v.value
}

func (v *NullableCalendarGracePeriodType) Set(val *CalendarGracePeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarGracePeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarGracePeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarGracePeriodType(val *CalendarGracePeriodType) *NullableCalendarGracePeriodType {
	return &NullableCalendarGracePeriodType{value: val, isSet: true}
}

func (v NullableCalendarGracePeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarGracePeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

