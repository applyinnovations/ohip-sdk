/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// UserDefinedEnrollmentFieldNameType Date of birth field of Membership Type.
type UserDefinedEnrollmentFieldNameType string

// List of userDefinedEnrollmentFieldNameType
const (
	USERDEFINEDENROLLMENTFIELDNAMETYPE_COMMUNICATION UserDefinedEnrollmentFieldNameType = "Communication"
	USERDEFINEDENROLLMENTFIELDNAMETYPE_LAST_NAME UserDefinedEnrollmentFieldNameType = "LastName"
	USERDEFINEDENROLLMENTFIELDNAMETYPE_FIRST_NAME UserDefinedEnrollmentFieldNameType = "FirstName"
	USERDEFINEDENROLLMENTFIELDNAMETYPE_ADDRESS UserDefinedEnrollmentFieldNameType = "Address"
	USERDEFINEDENROLLMENTFIELDNAMETYPE_FEE UserDefinedEnrollmentFieldNameType = "Fee"
	USERDEFINEDENROLLMENTFIELDNAMETYPE_BIRTH_DATE UserDefinedEnrollmentFieldNameType = "BirthDate"
)

// All allowed values of UserDefinedEnrollmentFieldNameType enum
var AllowedUserDefinedEnrollmentFieldNameTypeEnumValues = []UserDefinedEnrollmentFieldNameType{
	"Communication",
	"LastName",
	"FirstName",
	"Address",
	"Fee",
	"BirthDate",
}

func (v *UserDefinedEnrollmentFieldNameType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserDefinedEnrollmentFieldNameType(value)
	for _, existing := range AllowedUserDefinedEnrollmentFieldNameTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserDefinedEnrollmentFieldNameType", value)
}

// NewUserDefinedEnrollmentFieldNameTypeFromValue returns a pointer to a valid UserDefinedEnrollmentFieldNameType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserDefinedEnrollmentFieldNameTypeFromValue(v string) (*UserDefinedEnrollmentFieldNameType, error) {
	ev := UserDefinedEnrollmentFieldNameType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserDefinedEnrollmentFieldNameType: valid values are %v", v, AllowedUserDefinedEnrollmentFieldNameTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserDefinedEnrollmentFieldNameType) IsValid() bool {
	for _, existing := range AllowedUserDefinedEnrollmentFieldNameTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to userDefinedEnrollmentFieldNameType value
func (v UserDefinedEnrollmentFieldNameType) Ptr() *UserDefinedEnrollmentFieldNameType {
	return &v
}

type NullableUserDefinedEnrollmentFieldNameType struct {
	value *UserDefinedEnrollmentFieldNameType
	isSet bool
}

func (v NullableUserDefinedEnrollmentFieldNameType) Get() *UserDefinedEnrollmentFieldNameType {
	return v.value
}

func (v *NullableUserDefinedEnrollmentFieldNameType) Set(val *UserDefinedEnrollmentFieldNameType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedEnrollmentFieldNameType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedEnrollmentFieldNameType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedEnrollmentFieldNameType(val *UserDefinedEnrollmentFieldNameType) *NullableUserDefinedEnrollmentFieldNameType {
	return &NullableUserDefinedEnrollmentFieldNameType{value: val, isSet: true}
}

func (v NullableUserDefinedEnrollmentFieldNameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedEnrollmentFieldNameType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

