/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipTypeRuleSegmentationConditionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTypeRuleSegmentationConditionsType{}

// MembershipTypeRuleSegmentationConditionsType Membership Type Rules segmentation conditions.
type MembershipTypeRuleSegmentationConditionsType struct {
	// Market Code for which the rule is applied.
	MarketCode *string `json:"marketCode,omitempty"`
	// Market group for which the rule is applied.
	MarketGroup *string `json:"marketGroup,omitempty"`
	// To specify the exclusion of market group while applying rule.
	ExcludeMarketGroup *bool `json:"excludeMarketGroup,omitempty"`
}

// NewMembershipTypeRuleSegmentationConditionsType instantiates a new MembershipTypeRuleSegmentationConditionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTypeRuleSegmentationConditionsType() *MembershipTypeRuleSegmentationConditionsType {
	this := MembershipTypeRuleSegmentationConditionsType{}
	return &this
}

// NewMembershipTypeRuleSegmentationConditionsTypeWithDefaults instantiates a new MembershipTypeRuleSegmentationConditionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTypeRuleSegmentationConditionsTypeWithDefaults() *MembershipTypeRuleSegmentationConditionsType {
	this := MembershipTypeRuleSegmentationConditionsType{}
	return &this
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *MembershipTypeRuleSegmentationConditionsType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleSegmentationConditionsType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *MembershipTypeRuleSegmentationConditionsType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *MembershipTypeRuleSegmentationConditionsType) SetMarketCode(v string) {
	o.MarketCode = &v
}

// GetMarketGroup returns the MarketGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleSegmentationConditionsType) GetMarketGroup() string {
	if o == nil || IsNil(o.MarketGroup) {
		var ret string
		return ret
	}
	return *o.MarketGroup
}

// GetMarketGroupOk returns a tuple with the MarketGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleSegmentationConditionsType) GetMarketGroupOk() (*string, bool) {
	if o == nil || IsNil(o.MarketGroup) {
		return nil, false
	}
	return o.MarketGroup, true
}

// HasMarketGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleSegmentationConditionsType) HasMarketGroup() bool {
	if o != nil && !IsNil(o.MarketGroup) {
		return true
	}

	return false
}

// SetMarketGroup gets a reference to the given string and assigns it to the MarketGroup field.
func (o *MembershipTypeRuleSegmentationConditionsType) SetMarketGroup(v string) {
	o.MarketGroup = &v
}

// GetExcludeMarketGroup returns the ExcludeMarketGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleSegmentationConditionsType) GetExcludeMarketGroup() bool {
	if o == nil || IsNil(o.ExcludeMarketGroup) {
		var ret bool
		return ret
	}
	return *o.ExcludeMarketGroup
}

// GetExcludeMarketGroupOk returns a tuple with the ExcludeMarketGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleSegmentationConditionsType) GetExcludeMarketGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeMarketGroup) {
		return nil, false
	}
	return o.ExcludeMarketGroup, true
}

// HasExcludeMarketGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleSegmentationConditionsType) HasExcludeMarketGroup() bool {
	if o != nil && !IsNil(o.ExcludeMarketGroup) {
		return true
	}

	return false
}

// SetExcludeMarketGroup gets a reference to the given bool and assigns it to the ExcludeMarketGroup field.
func (o *MembershipTypeRuleSegmentationConditionsType) SetExcludeMarketGroup(v bool) {
	o.ExcludeMarketGroup = &v
}

func (o MembershipTypeRuleSegmentationConditionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTypeRuleSegmentationConditionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	if !IsNil(o.MarketGroup) {
		toSerialize["marketGroup"] = o.MarketGroup
	}
	if !IsNil(o.ExcludeMarketGroup) {
		toSerialize["excludeMarketGroup"] = o.ExcludeMarketGroup
	}
	return toSerialize, nil
}

type NullableMembershipTypeRuleSegmentationConditionsType struct {
	value *MembershipTypeRuleSegmentationConditionsType
	isSet bool
}

func (v NullableMembershipTypeRuleSegmentationConditionsType) Get() *MembershipTypeRuleSegmentationConditionsType {
	return v.value
}

func (v *NullableMembershipTypeRuleSegmentationConditionsType) Set(val *MembershipTypeRuleSegmentationConditionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTypeRuleSegmentationConditionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTypeRuleSegmentationConditionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTypeRuleSegmentationConditionsType(val *MembershipTypeRuleSegmentationConditionsType) *NullableMembershipTypeRuleSegmentationConditionsType {
	return &NullableMembershipTypeRuleSegmentationConditionsType{value: val, isSet: true}
}

func (v NullableMembershipTypeRuleSegmentationConditionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTypeRuleSegmentationConditionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


