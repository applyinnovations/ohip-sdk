/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the StateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StateType{}

// StateType Information about the country state.
type StateType struct {
	// The country which the state belongs to.
	CountryCode *string `json:"countryCode,omitempty"`
	// The description of the state.
	Description *string `json:"description,omitempty"`
	// The sequence number of the state.
	Sequence *float32 `json:"sequence,omitempty"`
	// The code of the state.
	StateCode *string `json:"stateCode,omitempty"`
	// Unique identifier of the state.
	StateID *float32 `json:"stateID,omitempty"`
}

// NewStateType instantiates a new StateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateType() *StateType {
	this := StateType{}
	return &this
}

// NewStateTypeWithDefaults instantiates a new StateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateTypeWithDefaults() *StateType {
	this := StateType{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *StateType) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateType) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *StateType) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *StateType) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StateType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StateType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StateType) SetDescription(v string) {
	o.Description = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *StateType) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateType) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *StateType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *StateType) SetSequence(v float32) {
	o.Sequence = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *StateType) GetStateCode() string {
	if o == nil || IsNil(o.StateCode) {
		var ret string
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateType) GetStateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StateCode) {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *StateType) HasStateCode() bool {
	if o != nil && !IsNil(o.StateCode) {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given string and assigns it to the StateCode field.
func (o *StateType) SetStateCode(v string) {
	o.StateCode = &v
}

// GetStateID returns the StateID field value if set, zero value otherwise.
func (o *StateType) GetStateID() float32 {
	if o == nil || IsNil(o.StateID) {
		var ret float32
		return ret
	}
	return *o.StateID
}

// GetStateIDOk returns a tuple with the StateID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StateType) GetStateIDOk() (*float32, bool) {
	if o == nil || IsNil(o.StateID) {
		return nil, false
	}
	return o.StateID, true
}

// HasStateID returns a boolean if a field has been set.
func (o *StateType) HasStateID() bool {
	if o != nil && !IsNil(o.StateID) {
		return true
	}

	return false
}

// SetStateID gets a reference to the given float32 and assigns it to the StateID field.
func (o *StateType) SetStateID(v float32) {
	o.StateID = &v
}

func (o StateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.StateCode) {
		toSerialize["stateCode"] = o.StateCode
	}
	if !IsNil(o.StateID) {
		toSerialize["stateID"] = o.StateID
	}
	return toSerialize, nil
}

type NullableStateType struct {
	value *StateType
	isSet bool
}

func (v NullableStateType) Get() *StateType {
	return v.value
}

func (v *NullableStateType) Set(val *StateType) {
	v.value = val
	v.isSet = true
}

func (v NullableStateType) IsSet() bool {
	return v.isSet
}

func (v *NullableStateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateType(val *StateType) *NullableStateType {
	return &NullableStateType{value: val, isSet: true}
}

func (v NullableStateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


