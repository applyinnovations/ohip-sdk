/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipSourceGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipSourceGroupType{}

// MembershipSourceGroupType Details for Membership Source Group along with associated Source codes.
type MembershipSourceGroupType struct {
	// Code is used to identify a Membership Source Group.
	Code *string `json:"code,omitempty"`
	// Description of the Membership Source Group.
	Description *string `json:"description,omitempty"`
	// Membership Source Groups display sequence Number
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Membership Source code and Description.
	SourceCodes []CodeDescriptionType `json:"sourceCodes,omitempty"`
}

// NewMembershipSourceGroupType instantiates a new MembershipSourceGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipSourceGroupType() *MembershipSourceGroupType {
	this := MembershipSourceGroupType{}
	return &this
}

// NewMembershipSourceGroupTypeWithDefaults instantiates a new MembershipSourceGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipSourceGroupTypeWithDefaults() *MembershipSourceGroupType {
	this := MembershipSourceGroupType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MembershipSourceGroupType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipSourceGroupType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MembershipSourceGroupType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MembershipSourceGroupType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MembershipSourceGroupType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipSourceGroupType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MembershipSourceGroupType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MembershipSourceGroupType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *MembershipSourceGroupType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipSourceGroupType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *MembershipSourceGroupType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *MembershipSourceGroupType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetSourceCodes returns the SourceCodes field value if set, zero value otherwise.
func (o *MembershipSourceGroupType) GetSourceCodes() []CodeDescriptionType {
	if o == nil || IsNil(o.SourceCodes) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.SourceCodes
}

// GetSourceCodesOk returns a tuple with the SourceCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipSourceGroupType) GetSourceCodesOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.SourceCodes) {
		return nil, false
	}
	return o.SourceCodes, true
}

// HasSourceCodes returns a boolean if a field has been set.
func (o *MembershipSourceGroupType) HasSourceCodes() bool {
	if o != nil && !IsNil(o.SourceCodes) {
		return true
	}

	return false
}

// SetSourceCodes gets a reference to the given []CodeDescriptionType and assigns it to the SourceCodes field.
func (o *MembershipSourceGroupType) SetSourceCodes(v []CodeDescriptionType) {
	o.SourceCodes = v
}

func (o MembershipSourceGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipSourceGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.SourceCodes) {
		toSerialize["sourceCodes"] = o.SourceCodes
	}
	return toSerialize, nil
}

type NullableMembershipSourceGroupType struct {
	value *MembershipSourceGroupType
	isSet bool
}

func (v NullableMembershipSourceGroupType) Get() *MembershipSourceGroupType {
	return v.value
}

func (v *NullableMembershipSourceGroupType) Set(val *MembershipSourceGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipSourceGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipSourceGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipSourceGroupType(val *MembershipSourceGroupType) *NullableMembershipSourceGroupType {
	return &NullableMembershipSourceGroupType{value: val, isSet: true}
}

func (v NullableMembershipSourceGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipSourceGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


