/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the ProfileInactiveReasonsDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileInactiveReasonsDetails{}

// ProfileInactiveReasonsDetails Response object for fetching Profile Inactive Reasons.
type ProfileInactiveReasonsDetails struct {
	// List of Profile Inactive Reasons.
	ProfileInactiveReasons []ProfileInactiveReasonType `json:"profileInactiveReasons,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewProfileInactiveReasonsDetails instantiates a new ProfileInactiveReasonsDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileInactiveReasonsDetails() *ProfileInactiveReasonsDetails {
	this := ProfileInactiveReasonsDetails{}
	return &this
}

// NewProfileInactiveReasonsDetailsWithDefaults instantiates a new ProfileInactiveReasonsDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileInactiveReasonsDetailsWithDefaults() *ProfileInactiveReasonsDetails {
	this := ProfileInactiveReasonsDetails{}
	return &this
}

// GetProfileInactiveReasons returns the ProfileInactiveReasons field value if set, zero value otherwise.
func (o *ProfileInactiveReasonsDetails) GetProfileInactiveReasons() []ProfileInactiveReasonType {
	if o == nil || IsNil(o.ProfileInactiveReasons) {
		var ret []ProfileInactiveReasonType
		return ret
	}
	return o.ProfileInactiveReasons
}

// GetProfileInactiveReasonsOk returns a tuple with the ProfileInactiveReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileInactiveReasonsDetails) GetProfileInactiveReasonsOk() ([]ProfileInactiveReasonType, bool) {
	if o == nil || IsNil(o.ProfileInactiveReasons) {
		return nil, false
	}
	return o.ProfileInactiveReasons, true
}

// HasProfileInactiveReasons returns a boolean if a field has been set.
func (o *ProfileInactiveReasonsDetails) HasProfileInactiveReasons() bool {
	if o != nil && !IsNil(o.ProfileInactiveReasons) {
		return true
	}

	return false
}

// SetProfileInactiveReasons gets a reference to the given []ProfileInactiveReasonType and assigns it to the ProfileInactiveReasons field.
func (o *ProfileInactiveReasonsDetails) SetProfileInactiveReasons(v []ProfileInactiveReasonType) {
	o.ProfileInactiveReasons = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ProfileInactiveReasonsDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileInactiveReasonsDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ProfileInactiveReasonsDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ProfileInactiveReasonsDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ProfileInactiveReasonsDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileInactiveReasonsDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ProfileInactiveReasonsDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ProfileInactiveReasonsDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ProfileInactiveReasonsDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileInactiveReasonsDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileInactiveReasons) {
		toSerialize["profileInactiveReasons"] = o.ProfileInactiveReasons
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableProfileInactiveReasonsDetails struct {
	value *ProfileInactiveReasonsDetails
	isSet bool
}

func (v NullableProfileInactiveReasonsDetails) Get() *ProfileInactiveReasonsDetails {
	return v.value
}

func (v *NullableProfileInactiveReasonsDetails) Set(val *ProfileInactiveReasonsDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileInactiveReasonsDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileInactiveReasonsDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileInactiveReasonsDetails(val *ProfileInactiveReasonsDetails) *NullableProfileInactiveReasonsDetails {
	return &NullableProfileInactiveReasonsDetails{value: val, isSet: true}
}

func (v NullableProfileInactiveReasonsDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileInactiveReasonsDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


