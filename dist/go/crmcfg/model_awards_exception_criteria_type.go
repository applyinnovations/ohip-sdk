/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the AwardsExceptionCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwardsExceptionCriteriaType{}

// AwardsExceptionCriteriaType Criteria for detecting exceptions in points calculation
type AwardsExceptionCriteriaType struct {
	MultipleRooms *MultipleRoomsType `json:"multipleRooms,omitempty"`
	// Back to Back stay at a Single Property
	BBSingleProperty *bool `json:"bBSingleProperty,omitempty"`
	// Back to back stay at a Single Group
	BBSingleGroup *bool `json:"bBSingleGroup,omitempty"`
	// Cross Membership Back to Back Stays
	BBCrossMembership *bool `json:"bBCrossMembership,omitempty"`
	// Number of days while awaiting an external accept/reject response file.
	ExternalProcessingException *int32 `json:"externalProcessingException,omitempty"`
}

// NewAwardsExceptionCriteriaType instantiates a new AwardsExceptionCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwardsExceptionCriteriaType() *AwardsExceptionCriteriaType {
	this := AwardsExceptionCriteriaType{}
	return &this
}

// NewAwardsExceptionCriteriaTypeWithDefaults instantiates a new AwardsExceptionCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwardsExceptionCriteriaTypeWithDefaults() *AwardsExceptionCriteriaType {
	this := AwardsExceptionCriteriaType{}
	return &this
}

// GetMultipleRooms returns the MultipleRooms field value if set, zero value otherwise.
func (o *AwardsExceptionCriteriaType) GetMultipleRooms() MultipleRoomsType {
	if o == nil || IsNil(o.MultipleRooms) {
		var ret MultipleRoomsType
		return ret
	}
	return *o.MultipleRooms
}

// GetMultipleRoomsOk returns a tuple with the MultipleRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardsExceptionCriteriaType) GetMultipleRoomsOk() (*MultipleRoomsType, bool) {
	if o == nil || IsNil(o.MultipleRooms) {
		return nil, false
	}
	return o.MultipleRooms, true
}

// HasMultipleRooms returns a boolean if a field has been set.
func (o *AwardsExceptionCriteriaType) HasMultipleRooms() bool {
	if o != nil && !IsNil(o.MultipleRooms) {
		return true
	}

	return false
}

// SetMultipleRooms gets a reference to the given MultipleRoomsType and assigns it to the MultipleRooms field.
func (o *AwardsExceptionCriteriaType) SetMultipleRooms(v MultipleRoomsType) {
	o.MultipleRooms = &v
}

// GetBBSingleProperty returns the BBSingleProperty field value if set, zero value otherwise.
func (o *AwardsExceptionCriteriaType) GetBBSingleProperty() bool {
	if o == nil || IsNil(o.BBSingleProperty) {
		var ret bool
		return ret
	}
	return *o.BBSingleProperty
}

// GetBBSinglePropertyOk returns a tuple with the BBSingleProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardsExceptionCriteriaType) GetBBSinglePropertyOk() (*bool, bool) {
	if o == nil || IsNil(o.BBSingleProperty) {
		return nil, false
	}
	return o.BBSingleProperty, true
}

// HasBBSingleProperty returns a boolean if a field has been set.
func (o *AwardsExceptionCriteriaType) HasBBSingleProperty() bool {
	if o != nil && !IsNil(o.BBSingleProperty) {
		return true
	}

	return false
}

// SetBBSingleProperty gets a reference to the given bool and assigns it to the BBSingleProperty field.
func (o *AwardsExceptionCriteriaType) SetBBSingleProperty(v bool) {
	o.BBSingleProperty = &v
}

// GetBBSingleGroup returns the BBSingleGroup field value if set, zero value otherwise.
func (o *AwardsExceptionCriteriaType) GetBBSingleGroup() bool {
	if o == nil || IsNil(o.BBSingleGroup) {
		var ret bool
		return ret
	}
	return *o.BBSingleGroup
}

// GetBBSingleGroupOk returns a tuple with the BBSingleGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardsExceptionCriteriaType) GetBBSingleGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.BBSingleGroup) {
		return nil, false
	}
	return o.BBSingleGroup, true
}

// HasBBSingleGroup returns a boolean if a field has been set.
func (o *AwardsExceptionCriteriaType) HasBBSingleGroup() bool {
	if o != nil && !IsNil(o.BBSingleGroup) {
		return true
	}

	return false
}

// SetBBSingleGroup gets a reference to the given bool and assigns it to the BBSingleGroup field.
func (o *AwardsExceptionCriteriaType) SetBBSingleGroup(v bool) {
	o.BBSingleGroup = &v
}

// GetBBCrossMembership returns the BBCrossMembership field value if set, zero value otherwise.
func (o *AwardsExceptionCriteriaType) GetBBCrossMembership() bool {
	if o == nil || IsNil(o.BBCrossMembership) {
		var ret bool
		return ret
	}
	return *o.BBCrossMembership
}

// GetBBCrossMembershipOk returns a tuple with the BBCrossMembership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardsExceptionCriteriaType) GetBBCrossMembershipOk() (*bool, bool) {
	if o == nil || IsNil(o.BBCrossMembership) {
		return nil, false
	}
	return o.BBCrossMembership, true
}

// HasBBCrossMembership returns a boolean if a field has been set.
func (o *AwardsExceptionCriteriaType) HasBBCrossMembership() bool {
	if o != nil && !IsNil(o.BBCrossMembership) {
		return true
	}

	return false
}

// SetBBCrossMembership gets a reference to the given bool and assigns it to the BBCrossMembership field.
func (o *AwardsExceptionCriteriaType) SetBBCrossMembership(v bool) {
	o.BBCrossMembership = &v
}

// GetExternalProcessingException returns the ExternalProcessingException field value if set, zero value otherwise.
func (o *AwardsExceptionCriteriaType) GetExternalProcessingException() int32 {
	if o == nil || IsNil(o.ExternalProcessingException) {
		var ret int32
		return ret
	}
	return *o.ExternalProcessingException
}

// GetExternalProcessingExceptionOk returns a tuple with the ExternalProcessingException field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwardsExceptionCriteriaType) GetExternalProcessingExceptionOk() (*int32, bool) {
	if o == nil || IsNil(o.ExternalProcessingException) {
		return nil, false
	}
	return o.ExternalProcessingException, true
}

// HasExternalProcessingException returns a boolean if a field has been set.
func (o *AwardsExceptionCriteriaType) HasExternalProcessingException() bool {
	if o != nil && !IsNil(o.ExternalProcessingException) {
		return true
	}

	return false
}

// SetExternalProcessingException gets a reference to the given int32 and assigns it to the ExternalProcessingException field.
func (o *AwardsExceptionCriteriaType) SetExternalProcessingException(v int32) {
	o.ExternalProcessingException = &v
}

func (o AwardsExceptionCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwardsExceptionCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MultipleRooms) {
		toSerialize["multipleRooms"] = o.MultipleRooms
	}
	if !IsNil(o.BBSingleProperty) {
		toSerialize["bBSingleProperty"] = o.BBSingleProperty
	}
	if !IsNil(o.BBSingleGroup) {
		toSerialize["bBSingleGroup"] = o.BBSingleGroup
	}
	if !IsNil(o.BBCrossMembership) {
		toSerialize["bBCrossMembership"] = o.BBCrossMembership
	}
	if !IsNil(o.ExternalProcessingException) {
		toSerialize["externalProcessingException"] = o.ExternalProcessingException
	}
	return toSerialize, nil
}

type NullableAwardsExceptionCriteriaType struct {
	value *AwardsExceptionCriteriaType
	isSet bool
}

func (v NullableAwardsExceptionCriteriaType) Get() *AwardsExceptionCriteriaType {
	return v.value
}

func (v *NullableAwardsExceptionCriteriaType) Set(val *AwardsExceptionCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardsExceptionCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardsExceptionCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardsExceptionCriteriaType(val *AwardsExceptionCriteriaType) *NullableAwardsExceptionCriteriaType {
	return &NullableAwardsExceptionCriteriaType{value: val, isSet: true}
}

func (v NullableAwardsExceptionCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardsExceptionCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


