/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the CityPostalCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CityPostalCodeType{}

// CityPostalCodeType Information about the City and Postal Code.
type CityPostalCodeType struct {
	// The identifier of the city and postal code.
	CityPostalCodeId *float32 `json:"cityPostalCodeId,omitempty"`
	// The start range of the city and postal code.
	PostalCodeFrom *string `json:"postalCodeFrom,omitempty"`
	// The end range of the city and postal code.
	PostalCodeTo *string `json:"postalCodeTo,omitempty"`
	// The name of the city which the City and Postal belongs to.
	City *string `json:"city,omitempty"`
	// The District which the City and Postal belongs to.
	DistrictCode *string `json:"districtCode,omitempty"`
	// The State which the City and Postal belongs to.
	StateCode *string `json:"stateCode,omitempty"`
	// The Territoty which the City and Postal belongs to.
	TerritoryCode *string `json:"territoryCode,omitempty"`
	// The Country which the City and Postal belongs to.
	CountryCode *string `json:"countryCode,omitempty"`
	// The Fiscal Region Code which the City and Postal belongs to.
	FiscalRegionCode *string `json:"fiscalRegionCode,omitempty"`
}

// NewCityPostalCodeType instantiates a new CityPostalCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCityPostalCodeType() *CityPostalCodeType {
	this := CityPostalCodeType{}
	return &this
}

// NewCityPostalCodeTypeWithDefaults instantiates a new CityPostalCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCityPostalCodeTypeWithDefaults() *CityPostalCodeType {
	this := CityPostalCodeType{}
	return &this
}

// GetCityPostalCodeId returns the CityPostalCodeId field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetCityPostalCodeId() float32 {
	if o == nil || IsNil(o.CityPostalCodeId) {
		var ret float32
		return ret
	}
	return *o.CityPostalCodeId
}

// GetCityPostalCodeIdOk returns a tuple with the CityPostalCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetCityPostalCodeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CityPostalCodeId) {
		return nil, false
	}
	return o.CityPostalCodeId, true
}

// HasCityPostalCodeId returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasCityPostalCodeId() bool {
	if o != nil && !IsNil(o.CityPostalCodeId) {
		return true
	}

	return false
}

// SetCityPostalCodeId gets a reference to the given float32 and assigns it to the CityPostalCodeId field.
func (o *CityPostalCodeType) SetCityPostalCodeId(v float32) {
	o.CityPostalCodeId = &v
}

// GetPostalCodeFrom returns the PostalCodeFrom field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetPostalCodeFrom() string {
	if o == nil || IsNil(o.PostalCodeFrom) {
		var ret string
		return ret
	}
	return *o.PostalCodeFrom
}

// GetPostalCodeFromOk returns a tuple with the PostalCodeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetPostalCodeFromOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCodeFrom) {
		return nil, false
	}
	return o.PostalCodeFrom, true
}

// HasPostalCodeFrom returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasPostalCodeFrom() bool {
	if o != nil && !IsNil(o.PostalCodeFrom) {
		return true
	}

	return false
}

// SetPostalCodeFrom gets a reference to the given string and assigns it to the PostalCodeFrom field.
func (o *CityPostalCodeType) SetPostalCodeFrom(v string) {
	o.PostalCodeFrom = &v
}

// GetPostalCodeTo returns the PostalCodeTo field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetPostalCodeTo() string {
	if o == nil || IsNil(o.PostalCodeTo) {
		var ret string
		return ret
	}
	return *o.PostalCodeTo
}

// GetPostalCodeToOk returns a tuple with the PostalCodeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetPostalCodeToOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCodeTo) {
		return nil, false
	}
	return o.PostalCodeTo, true
}

// HasPostalCodeTo returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasPostalCodeTo() bool {
	if o != nil && !IsNil(o.PostalCodeTo) {
		return true
	}

	return false
}

// SetPostalCodeTo gets a reference to the given string and assigns it to the PostalCodeTo field.
func (o *CityPostalCodeType) SetPostalCodeTo(v string) {
	o.PostalCodeTo = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CityPostalCodeType) SetCity(v string) {
	o.City = &v
}

// GetDistrictCode returns the DistrictCode field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetDistrictCode() string {
	if o == nil || IsNil(o.DistrictCode) {
		var ret string
		return ret
	}
	return *o.DistrictCode
}

// GetDistrictCodeOk returns a tuple with the DistrictCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetDistrictCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DistrictCode) {
		return nil, false
	}
	return o.DistrictCode, true
}

// HasDistrictCode returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasDistrictCode() bool {
	if o != nil && !IsNil(o.DistrictCode) {
		return true
	}

	return false
}

// SetDistrictCode gets a reference to the given string and assigns it to the DistrictCode field.
func (o *CityPostalCodeType) SetDistrictCode(v string) {
	o.DistrictCode = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetStateCode() string {
	if o == nil || IsNil(o.StateCode) {
		var ret string
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetStateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StateCode) {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasStateCode() bool {
	if o != nil && !IsNil(o.StateCode) {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given string and assigns it to the StateCode field.
func (o *CityPostalCodeType) SetStateCode(v string) {
	o.StateCode = &v
}

// GetTerritoryCode returns the TerritoryCode field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetTerritoryCode() string {
	if o == nil || IsNil(o.TerritoryCode) {
		var ret string
		return ret
	}
	return *o.TerritoryCode
}

// GetTerritoryCodeOk returns a tuple with the TerritoryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetTerritoryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TerritoryCode) {
		return nil, false
	}
	return o.TerritoryCode, true
}

// HasTerritoryCode returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasTerritoryCode() bool {
	if o != nil && !IsNil(o.TerritoryCode) {
		return true
	}

	return false
}

// SetTerritoryCode gets a reference to the given string and assigns it to the TerritoryCode field.
func (o *CityPostalCodeType) SetTerritoryCode(v string) {
	o.TerritoryCode = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *CityPostalCodeType) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetFiscalRegionCode returns the FiscalRegionCode field value if set, zero value otherwise.
func (o *CityPostalCodeType) GetFiscalRegionCode() string {
	if o == nil || IsNil(o.FiscalRegionCode) {
		var ret string
		return ret
	}
	return *o.FiscalRegionCode
}

// GetFiscalRegionCodeOk returns a tuple with the FiscalRegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CityPostalCodeType) GetFiscalRegionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FiscalRegionCode) {
		return nil, false
	}
	return o.FiscalRegionCode, true
}

// HasFiscalRegionCode returns a boolean if a field has been set.
func (o *CityPostalCodeType) HasFiscalRegionCode() bool {
	if o != nil && !IsNil(o.FiscalRegionCode) {
		return true
	}

	return false
}

// SetFiscalRegionCode gets a reference to the given string and assigns it to the FiscalRegionCode field.
func (o *CityPostalCodeType) SetFiscalRegionCode(v string) {
	o.FiscalRegionCode = &v
}

func (o CityPostalCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CityPostalCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CityPostalCodeId) {
		toSerialize["cityPostalCodeId"] = o.CityPostalCodeId
	}
	if !IsNil(o.PostalCodeFrom) {
		toSerialize["postalCodeFrom"] = o.PostalCodeFrom
	}
	if !IsNil(o.PostalCodeTo) {
		toSerialize["postalCodeTo"] = o.PostalCodeTo
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.DistrictCode) {
		toSerialize["districtCode"] = o.DistrictCode
	}
	if !IsNil(o.StateCode) {
		toSerialize["stateCode"] = o.StateCode
	}
	if !IsNil(o.TerritoryCode) {
		toSerialize["territoryCode"] = o.TerritoryCode
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.FiscalRegionCode) {
		toSerialize["fiscalRegionCode"] = o.FiscalRegionCode
	}
	return toSerialize, nil
}

type NullableCityPostalCodeType struct {
	value *CityPostalCodeType
	isSet bool
}

func (v NullableCityPostalCodeType) Get() *CityPostalCodeType {
	return v.value
}

func (v *NullableCityPostalCodeType) Set(val *CityPostalCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCityPostalCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCityPostalCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCityPostalCodeType(val *CityPostalCodeType) *NullableCityPostalCodeType {
	return &NullableCityPostalCodeType{value: val, isSet: true}
}

func (v NullableCityPostalCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCityPostalCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


