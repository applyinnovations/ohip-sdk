/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// UpgradeDowngradeForCalendarPeriodType Calculate points from five Years
type UpgradeDowngradeForCalendarPeriodType string

// List of upgradeDowngradeForCalendarPeriodType
const (
	UPGRADEDOWNGRADEFORCALENDARPERIODTYPE_THIS_YEAR UpgradeDowngradeForCalendarPeriodType = "ThisYear"
	UPGRADEDOWNGRADEFORCALENDARPERIODTYPE_LAST_YEAR UpgradeDowngradeForCalendarPeriodType = "LastYear"
	UPGRADEDOWNGRADEFORCALENDARPERIODTYPE_TWO_YEARS UpgradeDowngradeForCalendarPeriodType = "TwoYears"
	UPGRADEDOWNGRADEFORCALENDARPERIODTYPE_THREE_YEARS UpgradeDowngradeForCalendarPeriodType = "ThreeYears"
	UPGRADEDOWNGRADEFORCALENDARPERIODTYPE_FOUR_YEARS UpgradeDowngradeForCalendarPeriodType = "FourYears"
	UPGRADEDOWNGRADEFORCALENDARPERIODTYPE_FIVE_YEARS UpgradeDowngradeForCalendarPeriodType = "FiveYears"
)

// All allowed values of UpgradeDowngradeForCalendarPeriodType enum
var AllowedUpgradeDowngradeForCalendarPeriodTypeEnumValues = []UpgradeDowngradeForCalendarPeriodType{
	"ThisYear",
	"LastYear",
	"TwoYears",
	"ThreeYears",
	"FourYears",
	"FiveYears",
}

func (v *UpgradeDowngradeForCalendarPeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UpgradeDowngradeForCalendarPeriodType(value)
	for _, existing := range AllowedUpgradeDowngradeForCalendarPeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UpgradeDowngradeForCalendarPeriodType", value)
}

// NewUpgradeDowngradeForCalendarPeriodTypeFromValue returns a pointer to a valid UpgradeDowngradeForCalendarPeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUpgradeDowngradeForCalendarPeriodTypeFromValue(v string) (*UpgradeDowngradeForCalendarPeriodType, error) {
	ev := UpgradeDowngradeForCalendarPeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UpgradeDowngradeForCalendarPeriodType: valid values are %v", v, AllowedUpgradeDowngradeForCalendarPeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UpgradeDowngradeForCalendarPeriodType) IsValid() bool {
	for _, existing := range AllowedUpgradeDowngradeForCalendarPeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to upgradeDowngradeForCalendarPeriodType value
func (v UpgradeDowngradeForCalendarPeriodType) Ptr() *UpgradeDowngradeForCalendarPeriodType {
	return &v
}

type NullableUpgradeDowngradeForCalendarPeriodType struct {
	value *UpgradeDowngradeForCalendarPeriodType
	isSet bool
}

func (v NullableUpgradeDowngradeForCalendarPeriodType) Get() *UpgradeDowngradeForCalendarPeriodType {
	return v.value
}

func (v *NullableUpgradeDowngradeForCalendarPeriodType) Set(val *UpgradeDowngradeForCalendarPeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeDowngradeForCalendarPeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeDowngradeForCalendarPeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeDowngradeForCalendarPeriodType(val *UpgradeDowngradeForCalendarPeriodType) *NullableUpgradeDowngradeForCalendarPeriodType {
	return &NullableUpgradeDowngradeForCalendarPeriodType{value: val, isSet: true}
}

func (v NullableUpgradeDowngradeForCalendarPeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeDowngradeForCalendarPeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

