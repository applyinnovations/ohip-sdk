/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// RuleAppliesOnType Applies on restricted dates.
type RuleAppliesOnType string

// List of ruleAppliesOnType
const (
	RULEAPPLIESONTYPE_ARRIVAL RuleAppliesOnType = "Arrival"
	RULEAPPLIESONTYPE_DEPARTURE RuleAppliesOnType = "Departure"
	RULEAPPLIESONTYPE_ANY RuleAppliesOnType = "Any"
	RULEAPPLIESONTYPE_RESTRICTED RuleAppliesOnType = "Restricted"
)

// All allowed values of RuleAppliesOnType enum
var AllowedRuleAppliesOnTypeEnumValues = []RuleAppliesOnType{
	"Arrival",
	"Departure",
	"Any",
	"Restricted",
}

func (v *RuleAppliesOnType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RuleAppliesOnType(value)
	for _, existing := range AllowedRuleAppliesOnTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RuleAppliesOnType", value)
}

// NewRuleAppliesOnTypeFromValue returns a pointer to a valid RuleAppliesOnType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleAppliesOnTypeFromValue(v string) (*RuleAppliesOnType, error) {
	ev := RuleAppliesOnType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RuleAppliesOnType: valid values are %v", v, AllowedRuleAppliesOnTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleAppliesOnType) IsValid() bool {
	for _, existing := range AllowedRuleAppliesOnTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ruleAppliesOnType value
func (v RuleAppliesOnType) Ptr() *RuleAppliesOnType {
	return &v
}

type NullableRuleAppliesOnType struct {
	value *RuleAppliesOnType
	isSet bool
}

func (v NullableRuleAppliesOnType) Get() *RuleAppliesOnType {
	return v.value
}

func (v *NullableRuleAppliesOnType) Set(val *RuleAppliesOnType) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleAppliesOnType) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleAppliesOnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleAppliesOnType(val *RuleAppliesOnType) *NullableRuleAppliesOnType {
	return &NullableRuleAppliesOnType{value: val, isSet: true}
}

func (v NullableRuleAppliesOnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleAppliesOnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

