/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// AwardPointsValidityDurationType Five Year period
type AwardPointsValidityDurationType string

// List of awardPointsValidityDurationType
const (
	AWARDPOINTSVALIDITYDURATIONTYPE_DO_NOT_EXPIRE AwardPointsValidityDurationType = "DoNotExpire"
	AWARDPOINTSVALIDITYDURATIONTYPE_SAME_YEAR AwardPointsValidityDurationType = "SameYear"
	AWARDPOINTSVALIDITYDURATIONTYPE_ONE_YEAR AwardPointsValidityDurationType = "OneYear"
	AWARDPOINTSVALIDITYDURATIONTYPE_TWO_YEARS AwardPointsValidityDurationType = "TwoYears"
	AWARDPOINTSVALIDITYDURATIONTYPE_THREE_YEARS AwardPointsValidityDurationType = "ThreeYears"
	AWARDPOINTSVALIDITYDURATIONTYPE_FOUR_YEARS AwardPointsValidityDurationType = "FourYears"
	AWARDPOINTSVALIDITYDURATIONTYPE_FIVE_YEARS AwardPointsValidityDurationType = "FiveYears"
)

// All allowed values of AwardPointsValidityDurationType enum
var AllowedAwardPointsValidityDurationTypeEnumValues = []AwardPointsValidityDurationType{
	"DoNotExpire",
	"SameYear",
	"OneYear",
	"TwoYears",
	"ThreeYears",
	"FourYears",
	"FiveYears",
}

func (v *AwardPointsValidityDurationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AwardPointsValidityDurationType(value)
	for _, existing := range AllowedAwardPointsValidityDurationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AwardPointsValidityDurationType", value)
}

// NewAwardPointsValidityDurationTypeFromValue returns a pointer to a valid AwardPointsValidityDurationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAwardPointsValidityDurationTypeFromValue(v string) (*AwardPointsValidityDurationType, error) {
	ev := AwardPointsValidityDurationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AwardPointsValidityDurationType: valid values are %v", v, AllowedAwardPointsValidityDurationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AwardPointsValidityDurationType) IsValid() bool {
	for _, existing := range AllowedAwardPointsValidityDurationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to awardPointsValidityDurationType value
func (v AwardPointsValidityDurationType) Ptr() *AwardPointsValidityDurationType {
	return &v
}

type NullableAwardPointsValidityDurationType struct {
	value *AwardPointsValidityDurationType
	isSet bool
}

func (v NullableAwardPointsValidityDurationType) Get() *AwardPointsValidityDurationType {
	return v.value
}

func (v *NullableAwardPointsValidityDurationType) Set(val *AwardPointsValidityDurationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwardPointsValidityDurationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwardPointsValidityDurationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwardPointsValidityDurationType(val *AwardPointsValidityDurationType) *NullableAwardPointsValidityDurationType {
	return &NullableAwardPointsValidityDurationType{value: val, isSet: true}
}

func (v NullableAwardPointsValidityDurationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwardPointsValidityDurationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

