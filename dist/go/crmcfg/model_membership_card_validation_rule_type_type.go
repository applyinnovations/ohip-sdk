/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// MembershipCardValidationRuleTypeType Defines rules to be used for card validation.
type MembershipCardValidationRuleTypeType string

// List of membershipCardValidationRuleTypeType
const (
	MEMBERSHIPCARDVALIDATIONRULETYPETYPE_MOD7 MembershipCardValidationRuleTypeType = "Mod7"
	MEMBERSHIPCARDVALIDATIONRULETYPETYPE_MOD10 MembershipCardValidationRuleTypeType = "Mod10"
	MEMBERSHIPCARDVALIDATIONRULETYPETYPE_UDEF MembershipCardValidationRuleTypeType = "Udef"
	MEMBERSHIPCARDVALIDATIONRULETYPETYPE_NOVALID MembershipCardValidationRuleTypeType = "Novalid"
	MEMBERSHIPCARDVALIDATIONRULETYPETYPE_INTERNAL MembershipCardValidationRuleTypeType = "Internal"
	MEMBERSHIPCARDVALIDATIONRULETYPETYPE_EXTERNAL MembershipCardValidationRuleTypeType = "External"
)

// All allowed values of MembershipCardValidationRuleTypeType enum
var AllowedMembershipCardValidationRuleTypeTypeEnumValues = []MembershipCardValidationRuleTypeType{
	"Mod7",
	"Mod10",
	"Udef",
	"Novalid",
	"Internal",
	"External",
}

func (v *MembershipCardValidationRuleTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MembershipCardValidationRuleTypeType(value)
	for _, existing := range AllowedMembershipCardValidationRuleTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MembershipCardValidationRuleTypeType", value)
}

// NewMembershipCardValidationRuleTypeTypeFromValue returns a pointer to a valid MembershipCardValidationRuleTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMembershipCardValidationRuleTypeTypeFromValue(v string) (*MembershipCardValidationRuleTypeType, error) {
	ev := MembershipCardValidationRuleTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MembershipCardValidationRuleTypeType: valid values are %v", v, AllowedMembershipCardValidationRuleTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MembershipCardValidationRuleTypeType) IsValid() bool {
	for _, existing := range AllowedMembershipCardValidationRuleTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to membershipCardValidationRuleTypeType value
func (v MembershipCardValidationRuleTypeType) Ptr() *MembershipCardValidationRuleTypeType {
	return &v
}

type NullableMembershipCardValidationRuleTypeType struct {
	value *MembershipCardValidationRuleTypeType
	isSet bool
}

func (v NullableMembershipCardValidationRuleTypeType) Get() *MembershipCardValidationRuleTypeType {
	return v.value
}

func (v *NullableMembershipCardValidationRuleTypeType) Set(val *MembershipCardValidationRuleTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipCardValidationRuleTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipCardValidationRuleTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipCardValidationRuleTypeType(val *MembershipCardValidationRuleTypeType) *NullableMembershipCardValidationRuleTypeType {
	return &NullableMembershipCardValidationRuleTypeType{value: val, isSet: true}
}

func (v NullableMembershipCardValidationRuleTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipCardValidationRuleTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

