/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipTypeRuleIDType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTypeRuleIDType{}

// MembershipTypeRuleIDType Membership type rule ID.
type MembershipTypeRuleIDType struct {
	// Membership type of the Rule.
	MembershipType *string `json:"membershipType,omitempty"`
	// Sequence number of the membership type rule.
	MembershipPointsSequence *int32 `json:"membershipPointsSequence,omitempty"`
}

// NewMembershipTypeRuleIDType instantiates a new MembershipTypeRuleIDType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTypeRuleIDType() *MembershipTypeRuleIDType {
	this := MembershipTypeRuleIDType{}
	return &this
}

// NewMembershipTypeRuleIDTypeWithDefaults instantiates a new MembershipTypeRuleIDType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTypeRuleIDTypeWithDefaults() *MembershipTypeRuleIDType {
	this := MembershipTypeRuleIDType{}
	return &this
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipTypeRuleIDType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleIDType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipTypeRuleIDType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipTypeRuleIDType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetMembershipPointsSequence returns the MembershipPointsSequence field value if set, zero value otherwise.
func (o *MembershipTypeRuleIDType) GetMembershipPointsSequence() int32 {
	if o == nil || IsNil(o.MembershipPointsSequence) {
		var ret int32
		return ret
	}
	return *o.MembershipPointsSequence
}

// GetMembershipPointsSequenceOk returns a tuple with the MembershipPointsSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleIDType) GetMembershipPointsSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.MembershipPointsSequence) {
		return nil, false
	}
	return o.MembershipPointsSequence, true
}

// HasMembershipPointsSequence returns a boolean if a field has been set.
func (o *MembershipTypeRuleIDType) HasMembershipPointsSequence() bool {
	if o != nil && !IsNil(o.MembershipPointsSequence) {
		return true
	}

	return false
}

// SetMembershipPointsSequence gets a reference to the given int32 and assigns it to the MembershipPointsSequence field.
func (o *MembershipTypeRuleIDType) SetMembershipPointsSequence(v int32) {
	o.MembershipPointsSequence = &v
}

func (o MembershipTypeRuleIDType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTypeRuleIDType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.MembershipPointsSequence) {
		toSerialize["membershipPointsSequence"] = o.MembershipPointsSequence
	}
	return toSerialize, nil
}

type NullableMembershipTypeRuleIDType struct {
	value *MembershipTypeRuleIDType
	isSet bool
}

func (v NullableMembershipTypeRuleIDType) Get() *MembershipTypeRuleIDType {
	return v.value
}

func (v *NullableMembershipTypeRuleIDType) Set(val *MembershipTypeRuleIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTypeRuleIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTypeRuleIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTypeRuleIDType(val *MembershipTypeRuleIDType) *NullableMembershipTypeRuleIDType {
	return &NullableMembershipTypeRuleIDType{value: val, isSet: true}
}

func (v NullableMembershipTypeRuleIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTypeRuleIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


