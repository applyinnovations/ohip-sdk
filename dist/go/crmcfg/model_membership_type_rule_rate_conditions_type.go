/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipTypeRuleRateConditionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTypeRuleRateConditionsType{}

// MembershipTypeRuleRateConditionsType Membership Type Rules rate Conditions.
type MembershipTypeRuleRateConditionsType struct {
	// Rate code for which the rule is applied.
	RateCode *string `json:"rateCode,omitempty"`
	// Rate group for which the rule is applied.
	RateGroup *string `json:"rateGroup,omitempty"`
	// Revenue group for which the rule is applied.
	RevenueGroup *string `json:"revenueGroup,omitempty"`
	// Average rate amount of the reservations for which rule will be applied.
	AverageRateAmount *float32 `json:"averageRateAmount,omitempty"`
	// Minimum revenue on which rule will be applied.
	MinimumRevenue *float32 `json:"minimumRevenue,omitempty"`
	// Transaction group for which the rule is applied.
	TransactionGroup *string `json:"transactionGroup,omitempty"`
	// Points ratio is expressed in terms of %.
	QualifyingRates *bool `json:"qualifyingRates,omitempty"`
	// To specify the exclusion of rate group.
	ExcludeRateGroup *bool `json:"excludeRateGroup,omitempty"`
	// To specify the exclusion of revenue group while applying rule.
	ExcludeRevenueGroup *bool `json:"excludeRevenueGroup,omitempty"`
	// To specify the inclusion of Transaction group.
	IncludeTransactionGroup *bool `json:"includeTransactionGroup,omitempty"`
	// Points Calculation will be based on all rate codes when specify All Membership Rates.
	AllMembershipRates *bool `json:"allMembershipRates,omitempty"`
	// Points Calculation will be based on all transaction codes when specify All Membership Transactions.
	AllMembershipTrx *bool `json:"allMembershipTrx,omitempty"`
}

// NewMembershipTypeRuleRateConditionsType instantiates a new MembershipTypeRuleRateConditionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTypeRuleRateConditionsType() *MembershipTypeRuleRateConditionsType {
	this := MembershipTypeRuleRateConditionsType{}
	return &this
}

// NewMembershipTypeRuleRateConditionsTypeWithDefaults instantiates a new MembershipTypeRuleRateConditionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTypeRuleRateConditionsTypeWithDefaults() *MembershipTypeRuleRateConditionsType {
	this := MembershipTypeRuleRateConditionsType{}
	return &this
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *MembershipTypeRuleRateConditionsType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetRateGroup returns the RateGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetRateGroup() string {
	if o == nil || IsNil(o.RateGroup) {
		var ret string
		return ret
	}
	return *o.RateGroup
}

// GetRateGroupOk returns a tuple with the RateGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetRateGroupOk() (*string, bool) {
	if o == nil || IsNil(o.RateGroup) {
		return nil, false
	}
	return o.RateGroup, true
}

// HasRateGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasRateGroup() bool {
	if o != nil && !IsNil(o.RateGroup) {
		return true
	}

	return false
}

// SetRateGroup gets a reference to the given string and assigns it to the RateGroup field.
func (o *MembershipTypeRuleRateConditionsType) SetRateGroup(v string) {
	o.RateGroup = &v
}

// GetRevenueGroup returns the RevenueGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetRevenueGroup() string {
	if o == nil || IsNil(o.RevenueGroup) {
		var ret string
		return ret
	}
	return *o.RevenueGroup
}

// GetRevenueGroupOk returns a tuple with the RevenueGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetRevenueGroupOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueGroup) {
		return nil, false
	}
	return o.RevenueGroup, true
}

// HasRevenueGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasRevenueGroup() bool {
	if o != nil && !IsNil(o.RevenueGroup) {
		return true
	}

	return false
}

// SetRevenueGroup gets a reference to the given string and assigns it to the RevenueGroup field.
func (o *MembershipTypeRuleRateConditionsType) SetRevenueGroup(v string) {
	o.RevenueGroup = &v
}

// GetAverageRateAmount returns the AverageRateAmount field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetAverageRateAmount() float32 {
	if o == nil || IsNil(o.AverageRateAmount) {
		var ret float32
		return ret
	}
	return *o.AverageRateAmount
}

// GetAverageRateAmountOk returns a tuple with the AverageRateAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetAverageRateAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageRateAmount) {
		return nil, false
	}
	return o.AverageRateAmount, true
}

// HasAverageRateAmount returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasAverageRateAmount() bool {
	if o != nil && !IsNil(o.AverageRateAmount) {
		return true
	}

	return false
}

// SetAverageRateAmount gets a reference to the given float32 and assigns it to the AverageRateAmount field.
func (o *MembershipTypeRuleRateConditionsType) SetAverageRateAmount(v float32) {
	o.AverageRateAmount = &v
}

// GetMinimumRevenue returns the MinimumRevenue field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetMinimumRevenue() float32 {
	if o == nil || IsNil(o.MinimumRevenue) {
		var ret float32
		return ret
	}
	return *o.MinimumRevenue
}

// GetMinimumRevenueOk returns a tuple with the MinimumRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetMinimumRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.MinimumRevenue) {
		return nil, false
	}
	return o.MinimumRevenue, true
}

// HasMinimumRevenue returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasMinimumRevenue() bool {
	if o != nil && !IsNil(o.MinimumRevenue) {
		return true
	}

	return false
}

// SetMinimumRevenue gets a reference to the given float32 and assigns it to the MinimumRevenue field.
func (o *MembershipTypeRuleRateConditionsType) SetMinimumRevenue(v float32) {
	o.MinimumRevenue = &v
}

// GetTransactionGroup returns the TransactionGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetTransactionGroup() string {
	if o == nil || IsNil(o.TransactionGroup) {
		var ret string
		return ret
	}
	return *o.TransactionGroup
}

// GetTransactionGroupOk returns a tuple with the TransactionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetTransactionGroupOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionGroup) {
		return nil, false
	}
	return o.TransactionGroup, true
}

// HasTransactionGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasTransactionGroup() bool {
	if o != nil && !IsNil(o.TransactionGroup) {
		return true
	}

	return false
}

// SetTransactionGroup gets a reference to the given string and assigns it to the TransactionGroup field.
func (o *MembershipTypeRuleRateConditionsType) SetTransactionGroup(v string) {
	o.TransactionGroup = &v
}

// GetQualifyingRates returns the QualifyingRates field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetQualifyingRates() bool {
	if o == nil || IsNil(o.QualifyingRates) {
		var ret bool
		return ret
	}
	return *o.QualifyingRates
}

// GetQualifyingRatesOk returns a tuple with the QualifyingRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetQualifyingRatesOk() (*bool, bool) {
	if o == nil || IsNil(o.QualifyingRates) {
		return nil, false
	}
	return o.QualifyingRates, true
}

// HasQualifyingRates returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasQualifyingRates() bool {
	if o != nil && !IsNil(o.QualifyingRates) {
		return true
	}

	return false
}

// SetQualifyingRates gets a reference to the given bool and assigns it to the QualifyingRates field.
func (o *MembershipTypeRuleRateConditionsType) SetQualifyingRates(v bool) {
	o.QualifyingRates = &v
}

// GetExcludeRateGroup returns the ExcludeRateGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetExcludeRateGroup() bool {
	if o == nil || IsNil(o.ExcludeRateGroup) {
		var ret bool
		return ret
	}
	return *o.ExcludeRateGroup
}

// GetExcludeRateGroupOk returns a tuple with the ExcludeRateGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetExcludeRateGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeRateGroup) {
		return nil, false
	}
	return o.ExcludeRateGroup, true
}

// HasExcludeRateGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasExcludeRateGroup() bool {
	if o != nil && !IsNil(o.ExcludeRateGroup) {
		return true
	}

	return false
}

// SetExcludeRateGroup gets a reference to the given bool and assigns it to the ExcludeRateGroup field.
func (o *MembershipTypeRuleRateConditionsType) SetExcludeRateGroup(v bool) {
	o.ExcludeRateGroup = &v
}

// GetExcludeRevenueGroup returns the ExcludeRevenueGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetExcludeRevenueGroup() bool {
	if o == nil || IsNil(o.ExcludeRevenueGroup) {
		var ret bool
		return ret
	}
	return *o.ExcludeRevenueGroup
}

// GetExcludeRevenueGroupOk returns a tuple with the ExcludeRevenueGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetExcludeRevenueGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeRevenueGroup) {
		return nil, false
	}
	return o.ExcludeRevenueGroup, true
}

// HasExcludeRevenueGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasExcludeRevenueGroup() bool {
	if o != nil && !IsNil(o.ExcludeRevenueGroup) {
		return true
	}

	return false
}

// SetExcludeRevenueGroup gets a reference to the given bool and assigns it to the ExcludeRevenueGroup field.
func (o *MembershipTypeRuleRateConditionsType) SetExcludeRevenueGroup(v bool) {
	o.ExcludeRevenueGroup = &v
}

// GetIncludeTransactionGroup returns the IncludeTransactionGroup field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetIncludeTransactionGroup() bool {
	if o == nil || IsNil(o.IncludeTransactionGroup) {
		var ret bool
		return ret
	}
	return *o.IncludeTransactionGroup
}

// GetIncludeTransactionGroupOk returns a tuple with the IncludeTransactionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetIncludeTransactionGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeTransactionGroup) {
		return nil, false
	}
	return o.IncludeTransactionGroup, true
}

// HasIncludeTransactionGroup returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasIncludeTransactionGroup() bool {
	if o != nil && !IsNil(o.IncludeTransactionGroup) {
		return true
	}

	return false
}

// SetIncludeTransactionGroup gets a reference to the given bool and assigns it to the IncludeTransactionGroup field.
func (o *MembershipTypeRuleRateConditionsType) SetIncludeTransactionGroup(v bool) {
	o.IncludeTransactionGroup = &v
}

// GetAllMembershipRates returns the AllMembershipRates field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetAllMembershipRates() bool {
	if o == nil || IsNil(o.AllMembershipRates) {
		var ret bool
		return ret
	}
	return *o.AllMembershipRates
}

// GetAllMembershipRatesOk returns a tuple with the AllMembershipRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetAllMembershipRatesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllMembershipRates) {
		return nil, false
	}
	return o.AllMembershipRates, true
}

// HasAllMembershipRates returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasAllMembershipRates() bool {
	if o != nil && !IsNil(o.AllMembershipRates) {
		return true
	}

	return false
}

// SetAllMembershipRates gets a reference to the given bool and assigns it to the AllMembershipRates field.
func (o *MembershipTypeRuleRateConditionsType) SetAllMembershipRates(v bool) {
	o.AllMembershipRates = &v
}

// GetAllMembershipTrx returns the AllMembershipTrx field value if set, zero value otherwise.
func (o *MembershipTypeRuleRateConditionsType) GetAllMembershipTrx() bool {
	if o == nil || IsNil(o.AllMembershipTrx) {
		var ret bool
		return ret
	}
	return *o.AllMembershipTrx
}

// GetAllMembershipTrxOk returns a tuple with the AllMembershipTrx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleRateConditionsType) GetAllMembershipTrxOk() (*bool, bool) {
	if o == nil || IsNil(o.AllMembershipTrx) {
		return nil, false
	}
	return o.AllMembershipTrx, true
}

// HasAllMembershipTrx returns a boolean if a field has been set.
func (o *MembershipTypeRuleRateConditionsType) HasAllMembershipTrx() bool {
	if o != nil && !IsNil(o.AllMembershipTrx) {
		return true
	}

	return false
}

// SetAllMembershipTrx gets a reference to the given bool and assigns it to the AllMembershipTrx field.
func (o *MembershipTypeRuleRateConditionsType) SetAllMembershipTrx(v bool) {
	o.AllMembershipTrx = &v
}

func (o MembershipTypeRuleRateConditionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTypeRuleRateConditionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.RateGroup) {
		toSerialize["rateGroup"] = o.RateGroup
	}
	if !IsNil(o.RevenueGroup) {
		toSerialize["revenueGroup"] = o.RevenueGroup
	}
	if !IsNil(o.AverageRateAmount) {
		toSerialize["averageRateAmount"] = o.AverageRateAmount
	}
	if !IsNil(o.MinimumRevenue) {
		toSerialize["minimumRevenue"] = o.MinimumRevenue
	}
	if !IsNil(o.TransactionGroup) {
		toSerialize["transactionGroup"] = o.TransactionGroup
	}
	if !IsNil(o.QualifyingRates) {
		toSerialize["qualifyingRates"] = o.QualifyingRates
	}
	if !IsNil(o.ExcludeRateGroup) {
		toSerialize["excludeRateGroup"] = o.ExcludeRateGroup
	}
	if !IsNil(o.ExcludeRevenueGroup) {
		toSerialize["excludeRevenueGroup"] = o.ExcludeRevenueGroup
	}
	if !IsNil(o.IncludeTransactionGroup) {
		toSerialize["includeTransactionGroup"] = o.IncludeTransactionGroup
	}
	if !IsNil(o.AllMembershipRates) {
		toSerialize["allMembershipRates"] = o.AllMembershipRates
	}
	if !IsNil(o.AllMembershipTrx) {
		toSerialize["allMembershipTrx"] = o.AllMembershipTrx
	}
	return toSerialize, nil
}

type NullableMembershipTypeRuleRateConditionsType struct {
	value *MembershipTypeRuleRateConditionsType
	isSet bool
}

func (v NullableMembershipTypeRuleRateConditionsType) Get() *MembershipTypeRuleRateConditionsType {
	return v.value
}

func (v *NullableMembershipTypeRuleRateConditionsType) Set(val *MembershipTypeRuleRateConditionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTypeRuleRateConditionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTypeRuleRateConditionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTypeRuleRateConditionsType(val *MembershipTypeRuleRateConditionsType) *NullableMembershipTypeRuleRateConditionsType {
	return &NullableMembershipTypeRuleRateConditionsType{value: val, isSet: true}
}

func (v NullableMembershipTypeRuleRateConditionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTypeRuleRateConditionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


