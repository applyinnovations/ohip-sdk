/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// ProfileLinkInheritRates Simple type for inherit rates
type ProfileLinkInheritRates string

// List of profileLinkInheritRates
const (
	PROFILELINKINHERITRATES_FROM ProfileLinkInheritRates = "From"
	PROFILELINKINHERITRATES_TO ProfileLinkInheritRates = "To"
)

// All allowed values of ProfileLinkInheritRates enum
var AllowedProfileLinkInheritRatesEnumValues = []ProfileLinkInheritRates{
	"From",
	"To",
}

func (v *ProfileLinkInheritRates) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileLinkInheritRates(value)
	for _, existing := range AllowedProfileLinkInheritRatesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileLinkInheritRates", value)
}

// NewProfileLinkInheritRatesFromValue returns a pointer to a valid ProfileLinkInheritRates
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileLinkInheritRatesFromValue(v string) (*ProfileLinkInheritRates, error) {
	ev := ProfileLinkInheritRates(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileLinkInheritRates: valid values are %v", v, AllowedProfileLinkInheritRatesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileLinkInheritRates) IsValid() bool {
	for _, existing := range AllowedProfileLinkInheritRatesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to profileLinkInheritRates value
func (v ProfileLinkInheritRates) Ptr() *ProfileLinkInheritRates {
	return &v
}

type NullableProfileLinkInheritRates struct {
	value *ProfileLinkInheritRates
	isSet bool
}

func (v NullableProfileLinkInheritRates) Get() *ProfileLinkInheritRates {
	return v.value
}

func (v *NullableProfileLinkInheritRates) Set(val *ProfileLinkInheritRates) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileLinkInheritRates) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileLinkInheritRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileLinkInheritRates(val *ProfileLinkInheritRates) *NullableProfileLinkInheritRates {
	return &NullableProfileLinkInheritRates{value: val, isSet: true}
}

func (v NullableProfileLinkInheritRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileLinkInheritRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

