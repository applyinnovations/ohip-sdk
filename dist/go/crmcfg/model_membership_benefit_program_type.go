/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipBenefitProgramType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipBenefitProgramType{}

// MembershipBenefitProgramType Type that holds key values, that uniquely identifies a membership benefit program
type MembershipBenefitProgramType struct {
	// Membership type
	MembershipType *string `json:"membershipType,omitempty"`
	// Benefit Code
	Code *string `json:"code,omitempty"`
	DateRange *DateRangeType `json:"dateRange,omitempty"`
	// Min value for membership level. This is the minimum membership level member gets for enrolling into this program.
	MinimumLevel *string `json:"minimumLevel,omitempty"`
	// Description of the Membership Benefit Program.
	Description *string `json:"description,omitempty"`
	// Flag indicates whether the Membership Benefit Program is active or not.
	Inactive *bool `json:"inactive,omitempty"`
}

// NewMembershipBenefitProgramType instantiates a new MembershipBenefitProgramType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipBenefitProgramType() *MembershipBenefitProgramType {
	this := MembershipBenefitProgramType{}
	return &this
}

// NewMembershipBenefitProgramTypeWithDefaults instantiates a new MembershipBenefitProgramType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipBenefitProgramTypeWithDefaults() *MembershipBenefitProgramType {
	this := MembershipBenefitProgramType{}
	return &this
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipBenefitProgramType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipBenefitProgramType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipBenefitProgramType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipBenefitProgramType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MembershipBenefitProgramType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipBenefitProgramType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MembershipBenefitProgramType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MembershipBenefitProgramType) SetCode(v string) {
	o.Code = &v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *MembershipBenefitProgramType) GetDateRange() DateRangeType {
	if o == nil || IsNil(o.DateRange) {
		var ret DateRangeType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipBenefitProgramType) GetDateRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *MembershipBenefitProgramType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given DateRangeType and assigns it to the DateRange field.
func (o *MembershipBenefitProgramType) SetDateRange(v DateRangeType) {
	o.DateRange = &v
}

// GetMinimumLevel returns the MinimumLevel field value if set, zero value otherwise.
func (o *MembershipBenefitProgramType) GetMinimumLevel() string {
	if o == nil || IsNil(o.MinimumLevel) {
		var ret string
		return ret
	}
	return *o.MinimumLevel
}

// GetMinimumLevelOk returns a tuple with the MinimumLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipBenefitProgramType) GetMinimumLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumLevel) {
		return nil, false
	}
	return o.MinimumLevel, true
}

// HasMinimumLevel returns a boolean if a field has been set.
func (o *MembershipBenefitProgramType) HasMinimumLevel() bool {
	if o != nil && !IsNil(o.MinimumLevel) {
		return true
	}

	return false
}

// SetMinimumLevel gets a reference to the given string and assigns it to the MinimumLevel field.
func (o *MembershipBenefitProgramType) SetMinimumLevel(v string) {
	o.MinimumLevel = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MembershipBenefitProgramType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipBenefitProgramType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MembershipBenefitProgramType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MembershipBenefitProgramType) SetDescription(v string) {
	o.Description = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *MembershipBenefitProgramType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipBenefitProgramType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *MembershipBenefitProgramType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *MembershipBenefitProgramType) SetInactive(v bool) {
	o.Inactive = &v
}

func (o MembershipBenefitProgramType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipBenefitProgramType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.MinimumLevel) {
		toSerialize["minimumLevel"] = o.MinimumLevel
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	return toSerialize, nil
}

type NullableMembershipBenefitProgramType struct {
	value *MembershipBenefitProgramType
	isSet bool
}

func (v NullableMembershipBenefitProgramType) Get() *MembershipBenefitProgramType {
	return v.value
}

func (v *NullableMembershipBenefitProgramType) Set(val *MembershipBenefitProgramType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipBenefitProgramType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipBenefitProgramType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipBenefitProgramType(val *MembershipBenefitProgramType) *NullableMembershipBenefitProgramType {
	return &NullableMembershipBenefitProgramType{value: val, isSet: true}
}

func (v NullableMembershipBenefitProgramType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipBenefitProgramType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


