/*
OPERA Cloud CRM Configuration API

Testing ChainConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/crmcfg"
)

func Test_crmcfg_ChainConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigApiService ChangeAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTitlesCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeAlternateLanguageGuestTitles(context.Background(), guestTitlesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessSegmentCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeBusinessSegments(context.Background(), businessSegmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var postalCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeCityPostalCodes(context.Background(), postalCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestStatusCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeGuestStatuses(context.Background(), guestStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeImmigrationStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var immigrationStatusCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeImmigrationStatuses(context.Background(), immigrationStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mailingActionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeMailingActionCodes(context.Background(), mailingActionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enrollmentCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeMembershipEnrollmentCodes(context.Background(), enrollmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipStatusCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeMembershipStatusCodes(context.Background(), membershipStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerTeamCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeOwnerTeams(context.Background(), ownerTeamCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalAgentTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeTravelAgentTypes(context.Background(), fiscalAgentTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountPriorityId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteAccountPriorities(context.Background(), accountPriorityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteAccountTypes(context.Background(), accountTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var addressTypeId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteAddressTypes(context.Background(), addressTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyTypesCode string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteCompanyTypes(context.Background(), companyTypesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var competitionCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteCompetitionCodes(context.Background(), competitionCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var distanceTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteDistanceTypes(context.Background(), distanceTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var districtsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteDistricts(context.Background(), districtsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identificationTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteIdentificationTypes(context.Background(), identificationTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var industryCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteIndustryCodes(context.Background(), industryCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var influenceCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteInfluenceCodes(context.Background(), influenceCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keywordTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteKeywordTypes(context.Background(), keywordTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nationalitiesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteNationalities(context.Background(), nationalitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeletePayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payDaysId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeletePayDays(context.Background(), payDaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileInactiveReasonsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteProfileInactiveReasons(context.Background(), profileInactiveReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileRestrictionReasonsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteProfileRestrictionReasons(context.Background(), profileRestrictionReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourcesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteSources(context.Background(), sourcesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var territoriesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteTerritories(context.Background(), territoriesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var titlesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteTitles(context.Background(), titlesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vipLevelsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteVIPLevels(context.Background(), vipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetAccountPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetAccountTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetAddressTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetAlternateLanguageGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetBusinessSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCityPostalCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCompanyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCompetitionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetDistanceTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetDistricts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetEcertificateLocationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigApi.GetEcertificateLocationTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetGuestStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetIdentificationTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetImmigrationStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetImmigrationStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetIndustryCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetInfluenceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetKeywordTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetMailingActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetMembershipEnrollmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetMembershipStatusCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetNationalities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetOwnerTeams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetPayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetPayDays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetProfileInactiveReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetProfileRestrictionReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetTerritories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetTravelAgentTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetVIPLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostAccountPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostAccountTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostAddressTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostAlternateLanguageGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostBusinessSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCityPostalCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCompanyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCompetitionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostDistanceTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostDistricts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostEcertificateLocationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigApi.PostEcertificateLocationTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostGuestStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostIdentificationTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostIndustryCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostInfluenceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostKeywordTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostMailingActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostMembershipEnrollmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostMembershipStatusCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostNationalities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostOwnerTeams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostPayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostPayDays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostProfileInactiveReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostProfileRestrictionReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostTerritories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostTravelAgentTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostVIPLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountPriorityId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutAccountPriorities(context.Background(), accountPriorityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutAccountTypes(context.Background(), accountTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var addressTypeId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutAddressTypes(context.Background(), addressTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyTypesCode string

		resp, httpRes, err := apiClient.ChainConfigApi.PutCompanyTypes(context.Background(), companyTypesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var competitionCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutCompetitionCodes(context.Background(), competitionCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var distanceTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutDistanceTypes(context.Background(), distanceTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var districtsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutDistricts(context.Background(), districtsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identificationTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutIdentificationTypes(context.Background(), identificationTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var industryCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutIndustryCodes(context.Background(), industryCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var influenceCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutInfluenceCodes(context.Background(), influenceCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keywordTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutKeywordTypes(context.Background(), keywordTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nationalitiesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutNationalities(context.Background(), nationalitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutPayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payDaysId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutPayDays(context.Background(), payDaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileInactiveReasonsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutProfileInactiveReasons(context.Background(), profileInactiveReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileRestrictionReasonsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutProfileRestrictionReasons(context.Background(), profileRestrictionReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourcesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutSources(context.Background(), sourcesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var territoriesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutTerritories(context.Background(), territoriesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var titlesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutTitles(context.Background(), titlesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vipLevelsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutVIPLevels(context.Background(), vipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTitlesCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveAlternateLanguageGuestTitles(context.Background(), guestTitlesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessSegmentCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveBusinessSegments(context.Background(), businessSegmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var postalCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveCityPostalCodes(context.Background(), postalCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestStatusCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveGuestStatuses(context.Background(), guestStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveImmigrationStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var immigrationStatusCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveImmigrationStatuses(context.Background(), immigrationStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mailingActionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveMailingActionCodes(context.Background(), mailingActionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enrollmentCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveMembershipEnrollmentCodes(context.Background(), enrollmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipStatusCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveMembershipStatusCodes(context.Background(), membershipStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerTeamCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveOwnerTeams(context.Background(), ownerTeamCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalAgentTypeCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveTravelAgentTypes(context.Background(), fiscalAgentTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
