/*
OPERA Cloud CRM Configuration API

Testing ChainConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/crmcfg"
)

func Test_crmcfg_ChainConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigAPIService ChangeAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTitlesCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeAlternateLanguageGuestTitles(context.Background(), guestTitlesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessSegmentCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeBusinessSegments(context.Background(), businessSegmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var postalCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeCityPostalCodes(context.Background(), postalCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeEcertificateLocationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locationId string
		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeEcertificateLocationTypes(context.Background(), locationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestStatusCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeGuestStatuses(context.Background(), guestStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeImmigrationStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var immigrationStatusCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeImmigrationStatuses(context.Background(), immigrationStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mailingActionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeMailingActionCodes(context.Background(), mailingActionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeMembershipClaimOrigins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClaimOriginCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeMembershipClaimOrigins(context.Background(), membershipClaimOriginCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeMembershipClaimTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClaimTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeMembershipClaimTypes(context.Background(), membershipClaimTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enrollmentCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeMembershipEnrollmentCodes(context.Background(), enrollmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipStatusCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeMembershipStatusCodes(context.Background(), membershipStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerTeamCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeOwnerTeams(context.Background(), ownerTeamCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalAgentTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeTravelAgentTypes(context.Background(), fiscalAgentTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountPriorityId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteAccountPriorities(context.Background(), accountPriorityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteAccountTypes(context.Background(), accountTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var addressTypeId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteAddressTypes(context.Background(), addressTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteChainConfigServicesCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteChainConfigServicesCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyTypesCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteCompanyTypes(context.Background(), companyTypesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var competitionCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteCompetitionCodes(context.Background(), competitionCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var distanceTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteDistanceTypes(context.Background(), distanceTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var districtsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteDistricts(context.Background(), districtsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteGenderTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var genderTypeId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteGenderTypes(context.Background(), genderTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTitlesCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteGuestTitles(context.Background(), guestTitlesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteIdentificationCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identificationCountriesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteIdentificationCountries(context.Background(), identificationCountriesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identificationTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteIdentificationTypes(context.Background(), identificationTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var industryCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteIndustryCodes(context.Background(), industryCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var influenceCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteInfluenceCodes(context.Background(), influenceCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keywordTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteKeywordTypes(context.Background(), keywordTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nationalitiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteNationalities(context.Background(), nationalitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeletePayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payDaysId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeletePayDays(context.Background(), payDaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileInactiveReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteProfileInactiveReasons(context.Background(), profileInactiveReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileRestrictionReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteProfileRestrictionReasons(context.Background(), profileRestrictionReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourcesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteSources(context.Background(), sourcesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var territoriesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteTerritories(context.Background(), territoriesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var titlesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteTitles(context.Background(), titlesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vipLevelsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteVIPLevels(context.Background(), vipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetAccountOwners", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetAccountOwners(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetAccountPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetAccountTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetAddressTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetAlternateLanguageGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBusinessSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCityPostalCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCompanyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCompetitionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetDistanceTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetDistricts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetEcertificateLocationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigAPI.GetEcertificateLocationTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetGenderTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetGenderTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetGuestStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetIdentificationCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetIdentificationCountries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetIdentificationTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetImmigrationStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetImmigrationStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetIndustryCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetInfluenceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetKeywordTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMailingActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMembershipClaimOrigins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMembershipClaimOrigins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMembershipClaimTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMembershipClaimTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMembershipEnrollmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMembershipStatusCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetNationalities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetOwnerTeams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetPayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetPayDays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetProfileInactiveReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetProfileRestrictionReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetStates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetStates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetTerritories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetTravelAgentTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetVIPLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PingChainConfigServices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PingChainConfigServices(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostAccountPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostAccountTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostAddressTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostAlternateLanguageGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBusinessSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCityPostalCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCompanyTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCompetitionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostDistanceTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostDistricts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostEcertificateLocationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PostEcertificateLocationTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostGenderTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostGenderTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostGuestStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostGuestTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostGuestTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostIdentificationCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostIdentificationCountries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostIdentificationTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostImmigrationStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostImmigrationStatuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostIndustryCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostInfluenceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostKeywordTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostMailingActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostMembershipClaimOrigins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostMembershipClaimOrigins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostMembershipClaimTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostMembershipClaimTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostMembershipEnrollmentCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostMembershipStatusCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostNationalities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostOwnerTeams(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostPayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostPayDays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostProfileInactiveReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostProfileRestrictionReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostSources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostStates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostStates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostTerritories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostTitles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostTravelAgentTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostVIPLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutAccountPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountPriorityId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutAccountPriorities(context.Background(), accountPriorityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutAccountTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutAccountTypes(context.Background(), accountTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutAddressTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var addressTypeId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutAddressTypes(context.Background(), addressTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutCompanyTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyTypesCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutCompanyTypes(context.Background(), companyTypesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutCompetitionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var competitionCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutCompetitionCodes(context.Background(), competitionCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutDistanceTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var distanceTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutDistanceTypes(context.Background(), distanceTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutDistricts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var districtsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutDistricts(context.Background(), districtsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutGenderTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var genderTypeId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutGenderTypes(context.Background(), genderTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTitlesCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutGuestTitles(context.Background(), guestTitlesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutIdentificationCountries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identificationCountriesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutIdentificationCountries(context.Background(), identificationCountriesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutIdentificationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var identificationTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutIdentificationTypes(context.Background(), identificationTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutIndustryCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var industryCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutIndustryCodes(context.Background(), industryCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutInfluenceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var influenceCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutInfluenceCodes(context.Background(), influenceCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutKeywordTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var keywordTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutKeywordTypes(context.Background(), keywordTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutNationalities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nationalitiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutNationalities(context.Background(), nationalitiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutPayDays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var payDaysId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutPayDays(context.Background(), payDaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutProfileInactiveReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileInactiveReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutProfileInactiveReasons(context.Background(), profileInactiveReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutProfileRestrictionReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileRestrictionReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutProfileRestrictionReasons(context.Background(), profileRestrictionReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourcesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutSources(context.Background(), sourcesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutTerritories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var territoriesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutTerritories(context.Background(), territoriesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var titlesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutTitles(context.Background(), titlesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutVIPLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vipLevelsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutVIPLevels(context.Background(), vipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveAlternateLanguageGuestTitles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTitlesCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveAlternateLanguageGuestTitles(context.Background(), guestTitlesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveBusinessSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var businessSegmentCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveBusinessSegments(context.Background(), businessSegmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveCityPostalCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var postalCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveCityPostalCodes(context.Background(), postalCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveEcertificateLocationTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locationId string
		var hotelId string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveEcertificateLocationTypes(context.Background(), locationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveGuestStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestStatusCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveGuestStatuses(context.Background(), guestStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveGuestTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveGuestTypes(context.Background(), guestTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveImmigrationStatuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var immigrationStatusCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveImmigrationStatuses(context.Background(), immigrationStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveMailingActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mailingActionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveMailingActionCodes(context.Background(), mailingActionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveMembershipClaimOrigins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClaimOriginCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveMembershipClaimOrigins(context.Background(), membershipClaimOriginCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveMembershipClaimTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClaimTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveMembershipClaimTypes(context.Background(), membershipClaimTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveMembershipEnrollmentCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var enrollmentCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveMembershipEnrollmentCodes(context.Background(), enrollmentCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveMembershipStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipStatusCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveMembershipStatusCodes(context.Background(), membershipStatusCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveOwnerTeams", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ownerTeamCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveOwnerTeams(context.Background(), ownerTeamCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveTravelAgentTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fiscalAgentTypeCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveTravelAgentTypes(context.Background(), fiscalAgentTypeCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
