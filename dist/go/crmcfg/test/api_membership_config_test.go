/*
OPERA Cloud CRM Configuration API

Testing MembershipConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/crmcfg"
)

func Test_crmcfg_MembershipConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MembershipConfigAPIService DeleteMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipAwardsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipAwards(context.Background(), membershipAwardsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipBenefitProgramsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipBenefitPrograms(context.Background(), membershipBenefitProgramsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClassId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipClasses(context.Background(), membershipClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipConfigCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipConfigCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipEnrollmentGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipEnrollmentGroups(context.Background(), membershipEnrollmentGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipLevelsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipLevels(context.Background(), membershipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipMarketGroupId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipMarketGroups(context.Background(), membershipMarketGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipPropertyGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipPropertyGroups(context.Background(), membershipPropertyGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipRateGroupId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipRateGroups(context.Background(), membershipRateGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipRatesId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipRates(context.Background(), membershipRatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeRulesId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipTypeRules(context.Background(), membershipTypeRulesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService DeleteMembershipTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.DeleteMembershipTypes(context.Background(), membershipTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipAwards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipBenefitPrograms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipEnrollmentGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipMarketGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipPropertyGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipRateGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipRates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipType(context.Background(), membershipTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipTypeRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeRulesId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipTypeRule(context.Background(), membershipTypeRulesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipTypeRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService GetMembershipTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.GetMembershipTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PingMembershipConfigService", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PingMembershipConfigService(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipAwards(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipBenefitPrograms(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipEnrollmentGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipFolioTexts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipFolioTexts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipLevels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipMarketGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipPropertyGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipRateGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipRates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipTypeRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PostMembershipTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MembershipConfigAPI.PostMembershipTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipAwardsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipAwards(context.Background(), membershipAwardsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipBenefitPrograms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipBenefitProgramsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipBenefitPrograms(context.Background(), membershipBenefitProgramsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipClassId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipClasses(context.Background(), membershipClassId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipEnrollmentGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipEnrollmentGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipEnrollmentGroups(context.Background(), membershipEnrollmentGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipLevels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipLevelsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipLevels(context.Background(), membershipLevelsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipMarketGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipMarketGroupId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipMarketGroups(context.Background(), membershipMarketGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipPropertyGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipPropertyGroupsId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipPropertyGroups(context.Background(), membershipPropertyGroupsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipRateGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipRateGroupId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipRateGroups(context.Background(), membershipRateGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipRatesId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipRates(context.Background(), membershipRatesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipType(context.Background(), membershipTypeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembershipConfigAPIService PutMembershipTypeRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipTypeRulesId string

		resp, httpRes, err := apiClient.MembershipConfigAPI.PutMembershipTypeRules(context.Background(), membershipTypeRulesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
