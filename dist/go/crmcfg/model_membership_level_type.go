/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipLevelType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipLevelType{}

// MembershipLevelType A Type that holds key values, that uniquely identifies a membership level
type MembershipLevelType struct {
	// Membership type
	Type *string `json:"type,omitempty"`
	// Membership level
	Code *string `json:"code,omitempty"`
	// Description of the Membership level.
	Description *string `json:"description,omitempty"`
	// Label of the Membership level.
	Label *string `json:"label,omitempty"`
	// Rank of Membership level.
	Rank *float32 `json:"rank,omitempty"`
	// VIP level associated to the Membership level.
	Vip *string `json:"vip,omitempty"`
	DisplayColor *ColorType `json:"displayColor,omitempty"`
	// Inactive flag for a Membership level.
	Inactive *bool `json:"inactive,omitempty"`
	// Collection of hotel folio texts
	FolioTexts []HotelFolioTextType `json:"folioTexts,omitempty"`
	// Indicates whether memberships upgraded or downgraded to or from this level will be included in the Membership Export.
	Fulfillment *bool `json:"fulfillment,omitempty"`
	// Indicates whether memberships level is restricted to prevent users from making changes to it.
	ChangesRestricted *bool `json:"changesRestricted,omitempty"`
	// Select the number of graces the member will be allowed before the membership level auto-renews based on the member current points. It is available when the Tier Management Reset option is selected on Membership Type.
	AutoRenewGrace *int32 `json:"autoRenewGrace,omitempty"`
	// Specify the time limit (from 1 to 5 years) for membership card expiration for this level
	CardValidYears *int32 `json:"cardValidYears,omitempty"`
	// Indicates whether memberships level is restricted to prevent users from making changes to it. It is available when the Advanced Enrollment option is selected on Membership Type.
	RestrictedLevel *bool `json:"restrictedLevel,omitempty"`
	// Indicates whether membership has expired by the time the membership record is uploaded, the members card will be renewed and updated with a new expiration date.
	RenewCard *bool `json:"renewCard,omitempty"`
	// Indicates whether membership fee payment is required upon upgrade to this membership level.
	FeeRequired *bool `json:"feeRequired,omitempty"`
	// The lowest level in which this level can be downgraded to.
	MaxDowngradeLevel *string `json:"maxDowngradeLevel,omitempty"`
	// Number of transaction(s) for each stay. Value will be 2 in case of double dipping otherwise it will be null or 1.
	NumberOfTransactions *int32 `json:"numberOfTransactions,omitempty"`
}

// NewMembershipLevelType instantiates a new MembershipLevelType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipLevelType() *MembershipLevelType {
	this := MembershipLevelType{}
	return &this
}

// NewMembershipLevelTypeWithDefaults instantiates a new MembershipLevelType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipLevelTypeWithDefaults() *MembershipLevelType {
	this := MembershipLevelType{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MembershipLevelType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MembershipLevelType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MembershipLevelType) SetType(v string) {
	o.Type = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MembershipLevelType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MembershipLevelType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *MembershipLevelType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MembershipLevelType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MembershipLevelType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MembershipLevelType) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *MembershipLevelType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *MembershipLevelType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *MembershipLevelType) SetLabel(v string) {
	o.Label = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *MembershipLevelType) GetRank() float32 {
	if o == nil || IsNil(o.Rank) {
		var ret float32
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetRankOk() (*float32, bool) {
	if o == nil || IsNil(o.Rank) {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *MembershipLevelType) HasRank() bool {
	if o != nil && !IsNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given float32 and assigns it to the Rank field.
func (o *MembershipLevelType) SetRank(v float32) {
	o.Rank = &v
}

// GetVip returns the Vip field value if set, zero value otherwise.
func (o *MembershipLevelType) GetVip() string {
	if o == nil || IsNil(o.Vip) {
		var ret string
		return ret
	}
	return *o.Vip
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetVipOk() (*string, bool) {
	if o == nil || IsNil(o.Vip) {
		return nil, false
	}
	return o.Vip, true
}

// HasVip returns a boolean if a field has been set.
func (o *MembershipLevelType) HasVip() bool {
	if o != nil && !IsNil(o.Vip) {
		return true
	}

	return false
}

// SetVip gets a reference to the given string and assigns it to the Vip field.
func (o *MembershipLevelType) SetVip(v string) {
	o.Vip = &v
}

// GetDisplayColor returns the DisplayColor field value if set, zero value otherwise.
func (o *MembershipLevelType) GetDisplayColor() ColorType {
	if o == nil || IsNil(o.DisplayColor) {
		var ret ColorType
		return ret
	}
	return *o.DisplayColor
}

// GetDisplayColorOk returns a tuple with the DisplayColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetDisplayColorOk() (*ColorType, bool) {
	if o == nil || IsNil(o.DisplayColor) {
		return nil, false
	}
	return o.DisplayColor, true
}

// HasDisplayColor returns a boolean if a field has been set.
func (o *MembershipLevelType) HasDisplayColor() bool {
	if o != nil && !IsNil(o.DisplayColor) {
		return true
	}

	return false
}

// SetDisplayColor gets a reference to the given ColorType and assigns it to the DisplayColor field.
func (o *MembershipLevelType) SetDisplayColor(v ColorType) {
	o.DisplayColor = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *MembershipLevelType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *MembershipLevelType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *MembershipLevelType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetFolioTexts returns the FolioTexts field value if set, zero value otherwise.
func (o *MembershipLevelType) GetFolioTexts() []HotelFolioTextType {
	if o == nil || IsNil(o.FolioTexts) {
		var ret []HotelFolioTextType
		return ret
	}
	return o.FolioTexts
}

// GetFolioTextsOk returns a tuple with the FolioTexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetFolioTextsOk() ([]HotelFolioTextType, bool) {
	if o == nil || IsNil(o.FolioTexts) {
		return nil, false
	}
	return o.FolioTexts, true
}

// HasFolioTexts returns a boolean if a field has been set.
func (o *MembershipLevelType) HasFolioTexts() bool {
	if o != nil && !IsNil(o.FolioTexts) {
		return true
	}

	return false
}

// SetFolioTexts gets a reference to the given []HotelFolioTextType and assigns it to the FolioTexts field.
func (o *MembershipLevelType) SetFolioTexts(v []HotelFolioTextType) {
	o.FolioTexts = v
}

// GetFulfillment returns the Fulfillment field value if set, zero value otherwise.
func (o *MembershipLevelType) GetFulfillment() bool {
	if o == nil || IsNil(o.Fulfillment) {
		var ret bool
		return ret
	}
	return *o.Fulfillment
}

// GetFulfillmentOk returns a tuple with the Fulfillment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetFulfillmentOk() (*bool, bool) {
	if o == nil || IsNil(o.Fulfillment) {
		return nil, false
	}
	return o.Fulfillment, true
}

// HasFulfillment returns a boolean if a field has been set.
func (o *MembershipLevelType) HasFulfillment() bool {
	if o != nil && !IsNil(o.Fulfillment) {
		return true
	}

	return false
}

// SetFulfillment gets a reference to the given bool and assigns it to the Fulfillment field.
func (o *MembershipLevelType) SetFulfillment(v bool) {
	o.Fulfillment = &v
}

// GetChangesRestricted returns the ChangesRestricted field value if set, zero value otherwise.
func (o *MembershipLevelType) GetChangesRestricted() bool {
	if o == nil || IsNil(o.ChangesRestricted) {
		var ret bool
		return ret
	}
	return *o.ChangesRestricted
}

// GetChangesRestrictedOk returns a tuple with the ChangesRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetChangesRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.ChangesRestricted) {
		return nil, false
	}
	return o.ChangesRestricted, true
}

// HasChangesRestricted returns a boolean if a field has been set.
func (o *MembershipLevelType) HasChangesRestricted() bool {
	if o != nil && !IsNil(o.ChangesRestricted) {
		return true
	}

	return false
}

// SetChangesRestricted gets a reference to the given bool and assigns it to the ChangesRestricted field.
func (o *MembershipLevelType) SetChangesRestricted(v bool) {
	o.ChangesRestricted = &v
}

// GetAutoRenewGrace returns the AutoRenewGrace field value if set, zero value otherwise.
func (o *MembershipLevelType) GetAutoRenewGrace() int32 {
	if o == nil || IsNil(o.AutoRenewGrace) {
		var ret int32
		return ret
	}
	return *o.AutoRenewGrace
}

// GetAutoRenewGraceOk returns a tuple with the AutoRenewGrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetAutoRenewGraceOk() (*int32, bool) {
	if o == nil || IsNil(o.AutoRenewGrace) {
		return nil, false
	}
	return o.AutoRenewGrace, true
}

// HasAutoRenewGrace returns a boolean if a field has been set.
func (o *MembershipLevelType) HasAutoRenewGrace() bool {
	if o != nil && !IsNil(o.AutoRenewGrace) {
		return true
	}

	return false
}

// SetAutoRenewGrace gets a reference to the given int32 and assigns it to the AutoRenewGrace field.
func (o *MembershipLevelType) SetAutoRenewGrace(v int32) {
	o.AutoRenewGrace = &v
}

// GetCardValidYears returns the CardValidYears field value if set, zero value otherwise.
func (o *MembershipLevelType) GetCardValidYears() int32 {
	if o == nil || IsNil(o.CardValidYears) {
		var ret int32
		return ret
	}
	return *o.CardValidYears
}

// GetCardValidYearsOk returns a tuple with the CardValidYears field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetCardValidYearsOk() (*int32, bool) {
	if o == nil || IsNil(o.CardValidYears) {
		return nil, false
	}
	return o.CardValidYears, true
}

// HasCardValidYears returns a boolean if a field has been set.
func (o *MembershipLevelType) HasCardValidYears() bool {
	if o != nil && !IsNil(o.CardValidYears) {
		return true
	}

	return false
}

// SetCardValidYears gets a reference to the given int32 and assigns it to the CardValidYears field.
func (o *MembershipLevelType) SetCardValidYears(v int32) {
	o.CardValidYears = &v
}

// GetRestrictedLevel returns the RestrictedLevel field value if set, zero value otherwise.
func (o *MembershipLevelType) GetRestrictedLevel() bool {
	if o == nil || IsNil(o.RestrictedLevel) {
		var ret bool
		return ret
	}
	return *o.RestrictedLevel
}

// GetRestrictedLevelOk returns a tuple with the RestrictedLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetRestrictedLevelOk() (*bool, bool) {
	if o == nil || IsNil(o.RestrictedLevel) {
		return nil, false
	}
	return o.RestrictedLevel, true
}

// HasRestrictedLevel returns a boolean if a field has been set.
func (o *MembershipLevelType) HasRestrictedLevel() bool {
	if o != nil && !IsNil(o.RestrictedLevel) {
		return true
	}

	return false
}

// SetRestrictedLevel gets a reference to the given bool and assigns it to the RestrictedLevel field.
func (o *MembershipLevelType) SetRestrictedLevel(v bool) {
	o.RestrictedLevel = &v
}

// GetRenewCard returns the RenewCard field value if set, zero value otherwise.
func (o *MembershipLevelType) GetRenewCard() bool {
	if o == nil || IsNil(o.RenewCard) {
		var ret bool
		return ret
	}
	return *o.RenewCard
}

// GetRenewCardOk returns a tuple with the RenewCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetRenewCardOk() (*bool, bool) {
	if o == nil || IsNil(o.RenewCard) {
		return nil, false
	}
	return o.RenewCard, true
}

// HasRenewCard returns a boolean if a field has been set.
func (o *MembershipLevelType) HasRenewCard() bool {
	if o != nil && !IsNil(o.RenewCard) {
		return true
	}

	return false
}

// SetRenewCard gets a reference to the given bool and assigns it to the RenewCard field.
func (o *MembershipLevelType) SetRenewCard(v bool) {
	o.RenewCard = &v
}

// GetFeeRequired returns the FeeRequired field value if set, zero value otherwise.
func (o *MembershipLevelType) GetFeeRequired() bool {
	if o == nil || IsNil(o.FeeRequired) {
		var ret bool
		return ret
	}
	return *o.FeeRequired
}

// GetFeeRequiredOk returns a tuple with the FeeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetFeeRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.FeeRequired) {
		return nil, false
	}
	return o.FeeRequired, true
}

// HasFeeRequired returns a boolean if a field has been set.
func (o *MembershipLevelType) HasFeeRequired() bool {
	if o != nil && !IsNil(o.FeeRequired) {
		return true
	}

	return false
}

// SetFeeRequired gets a reference to the given bool and assigns it to the FeeRequired field.
func (o *MembershipLevelType) SetFeeRequired(v bool) {
	o.FeeRequired = &v
}

// GetMaxDowngradeLevel returns the MaxDowngradeLevel field value if set, zero value otherwise.
func (o *MembershipLevelType) GetMaxDowngradeLevel() string {
	if o == nil || IsNil(o.MaxDowngradeLevel) {
		var ret string
		return ret
	}
	return *o.MaxDowngradeLevel
}

// GetMaxDowngradeLevelOk returns a tuple with the MaxDowngradeLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetMaxDowngradeLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MaxDowngradeLevel) {
		return nil, false
	}
	return o.MaxDowngradeLevel, true
}

// HasMaxDowngradeLevel returns a boolean if a field has been set.
func (o *MembershipLevelType) HasMaxDowngradeLevel() bool {
	if o != nil && !IsNil(o.MaxDowngradeLevel) {
		return true
	}

	return false
}

// SetMaxDowngradeLevel gets a reference to the given string and assigns it to the MaxDowngradeLevel field.
func (o *MembershipLevelType) SetMaxDowngradeLevel(v string) {
	o.MaxDowngradeLevel = &v
}

// GetNumberOfTransactions returns the NumberOfTransactions field value if set, zero value otherwise.
func (o *MembershipLevelType) GetNumberOfTransactions() int32 {
	if o == nil || IsNil(o.NumberOfTransactions) {
		var ret int32
		return ret
	}
	return *o.NumberOfTransactions
}

// GetNumberOfTransactionsOk returns a tuple with the NumberOfTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelType) GetNumberOfTransactionsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfTransactions) {
		return nil, false
	}
	return o.NumberOfTransactions, true
}

// HasNumberOfTransactions returns a boolean if a field has been set.
func (o *MembershipLevelType) HasNumberOfTransactions() bool {
	if o != nil && !IsNil(o.NumberOfTransactions) {
		return true
	}

	return false
}

// SetNumberOfTransactions gets a reference to the given int32 and assigns it to the NumberOfTransactions field.
func (o *MembershipLevelType) SetNumberOfTransactions(v int32) {
	o.NumberOfTransactions = &v
}

func (o MembershipLevelType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipLevelType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	if !IsNil(o.Vip) {
		toSerialize["vip"] = o.Vip
	}
	if !IsNil(o.DisplayColor) {
		toSerialize["displayColor"] = o.DisplayColor
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.FolioTexts) {
		toSerialize["folioTexts"] = o.FolioTexts
	}
	if !IsNil(o.Fulfillment) {
		toSerialize["fulfillment"] = o.Fulfillment
	}
	if !IsNil(o.ChangesRestricted) {
		toSerialize["changesRestricted"] = o.ChangesRestricted
	}
	if !IsNil(o.AutoRenewGrace) {
		toSerialize["autoRenewGrace"] = o.AutoRenewGrace
	}
	if !IsNil(o.CardValidYears) {
		toSerialize["cardValidYears"] = o.CardValidYears
	}
	if !IsNil(o.RestrictedLevel) {
		toSerialize["restrictedLevel"] = o.RestrictedLevel
	}
	if !IsNil(o.RenewCard) {
		toSerialize["renewCard"] = o.RenewCard
	}
	if !IsNil(o.FeeRequired) {
		toSerialize["feeRequired"] = o.FeeRequired
	}
	if !IsNil(o.MaxDowngradeLevel) {
		toSerialize["maxDowngradeLevel"] = o.MaxDowngradeLevel
	}
	if !IsNil(o.NumberOfTransactions) {
		toSerialize["numberOfTransactions"] = o.NumberOfTransactions
	}
	return toSerialize, nil
}

type NullableMembershipLevelType struct {
	value *MembershipLevelType
	isSet bool
}

func (v NullableMembershipLevelType) Get() *MembershipLevelType {
	return v.value
}

func (v *NullableMembershipLevelType) Set(val *MembershipLevelType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipLevelType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipLevelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipLevelType(val *MembershipLevelType) *NullableMembershipLevelType {
	return &NullableMembershipLevelType{value: val, isSet: true}
}

func (v NullableMembershipLevelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipLevelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


