/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the IndustryCodesDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndustryCodesDetails{}

// IndustryCodesDetails Response object for fetching Industry Codes.
type IndustryCodesDetails struct {
	// List of Industry Codes.
	IndustryCodes []IndustryCodeType `json:"industryCodes,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewIndustryCodesDetails instantiates a new IndustryCodesDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndustryCodesDetails() *IndustryCodesDetails {
	this := IndustryCodesDetails{}
	return &this
}

// NewIndustryCodesDetailsWithDefaults instantiates a new IndustryCodesDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndustryCodesDetailsWithDefaults() *IndustryCodesDetails {
	this := IndustryCodesDetails{}
	return &this
}

// GetIndustryCodes returns the IndustryCodes field value if set, zero value otherwise.
func (o *IndustryCodesDetails) GetIndustryCodes() []IndustryCodeType {
	if o == nil || IsNil(o.IndustryCodes) {
		var ret []IndustryCodeType
		return ret
	}
	return o.IndustryCodes
}

// GetIndustryCodesOk returns a tuple with the IndustryCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryCodesDetails) GetIndustryCodesOk() ([]IndustryCodeType, bool) {
	if o == nil || IsNil(o.IndustryCodes) {
		return nil, false
	}
	return o.IndustryCodes, true
}

// HasIndustryCodes returns a boolean if a field has been set.
func (o *IndustryCodesDetails) HasIndustryCodes() bool {
	if o != nil && !IsNil(o.IndustryCodes) {
		return true
	}

	return false
}

// SetIndustryCodes gets a reference to the given []IndustryCodeType and assigns it to the IndustryCodes field.
func (o *IndustryCodesDetails) SetIndustryCodes(v []IndustryCodeType) {
	o.IndustryCodes = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *IndustryCodesDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryCodesDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *IndustryCodesDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *IndustryCodesDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *IndustryCodesDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndustryCodesDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *IndustryCodesDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *IndustryCodesDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o IndustryCodesDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndustryCodesDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndustryCodes) {
		toSerialize["industryCodes"] = o.IndustryCodes
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableIndustryCodesDetails struct {
	value *IndustryCodesDetails
	isSet bool
}

func (v NullableIndustryCodesDetails) Get() *IndustryCodesDetails {
	return v.value
}

func (v *NullableIndustryCodesDetails) Set(val *IndustryCodesDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIndustryCodesDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIndustryCodesDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndustryCodesDetails(val *IndustryCodesDetails) *NullableIndustryCodesDetails {
	return &NullableIndustryCodesDetails{value: val, isSet: true}
}

func (v NullableIndustryCodesDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndustryCodesDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


