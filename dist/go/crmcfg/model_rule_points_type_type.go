/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// RulePointsTypeType Possible membership points types.
type RulePointsTypeType string

// List of rulePointsTypeType
const (
	RULEPOINTSTYPETYPE_BASE RulePointsTypeType = "Base"
	RULEPOINTSTYPETYPE_BONUS RulePointsTypeType = "Bonus"
)

// All allowed values of RulePointsTypeType enum
var AllowedRulePointsTypeTypeEnumValues = []RulePointsTypeType{
	"Base",
	"Bonus",
}

func (v *RulePointsTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RulePointsTypeType(value)
	for _, existing := range AllowedRulePointsTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RulePointsTypeType", value)
}

// NewRulePointsTypeTypeFromValue returns a pointer to a valid RulePointsTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRulePointsTypeTypeFromValue(v string) (*RulePointsTypeType, error) {
	ev := RulePointsTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RulePointsTypeType: valid values are %v", v, AllowedRulePointsTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RulePointsTypeType) IsValid() bool {
	for _, existing := range AllowedRulePointsTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rulePointsTypeType value
func (v RulePointsTypeType) Ptr() *RulePointsTypeType {
	return &v
}

type NullableRulePointsTypeType struct {
	value *RulePointsTypeType
	isSet bool
}

func (v NullableRulePointsTypeType) Get() *RulePointsTypeType {
	return v.value
}

func (v *NullableRulePointsTypeType) Set(val *RulePointsTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRulePointsTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRulePointsTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulePointsTypeType(val *RulePointsTypeType) *NullableRulePointsTypeType {
	return &NullableRulePointsTypeType{value: val, isSet: true}
}

func (v NullableRulePointsTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulePointsTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

