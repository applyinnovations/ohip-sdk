/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the MembershipTypeRuleDefinitionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTypeRuleDefinitionType{}

// MembershipTypeRuleDefinitionType Membership Type Rule definition details.
type MembershipTypeRuleDefinitionType struct {
	// Rule code of the membership type rule.
	RuleCode *string `json:"ruleCode,omitempty"`
	ProgramType *MembershipTypeRuleType `json:"programType,omitempty"`
	RuleAppliesOn *RuleAppliesOnType `json:"ruleAppliesOn,omitempty"`
	// Specifies total number of times program rule is eligible .
	NoOfTimesEligible *int32 `json:"noOfTimesEligible,omitempty"`
	// This field will be used to store export label and will be used only for exporting purposes.
	RuleExportLabel *string `json:"ruleExportLabel,omitempty"`
	// Date on which the rule will be expired.
	RuleExpirationDate *string `json:"ruleExpirationDate,omitempty"`
}

// NewMembershipTypeRuleDefinitionType instantiates a new MembershipTypeRuleDefinitionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTypeRuleDefinitionType() *MembershipTypeRuleDefinitionType {
	this := MembershipTypeRuleDefinitionType{}
	return &this
}

// NewMembershipTypeRuleDefinitionTypeWithDefaults instantiates a new MembershipTypeRuleDefinitionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTypeRuleDefinitionTypeWithDefaults() *MembershipTypeRuleDefinitionType {
	this := MembershipTypeRuleDefinitionType{}
	return &this
}

// GetRuleCode returns the RuleCode field value if set, zero value otherwise.
func (o *MembershipTypeRuleDefinitionType) GetRuleCode() string {
	if o == nil || IsNil(o.RuleCode) {
		var ret string
		return ret
	}
	return *o.RuleCode
}

// GetRuleCodeOk returns a tuple with the RuleCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleDefinitionType) GetRuleCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RuleCode) {
		return nil, false
	}
	return o.RuleCode, true
}

// HasRuleCode returns a boolean if a field has been set.
func (o *MembershipTypeRuleDefinitionType) HasRuleCode() bool {
	if o != nil && !IsNil(o.RuleCode) {
		return true
	}

	return false
}

// SetRuleCode gets a reference to the given string and assigns it to the RuleCode field.
func (o *MembershipTypeRuleDefinitionType) SetRuleCode(v string) {
	o.RuleCode = &v
}

// GetProgramType returns the ProgramType field value if set, zero value otherwise.
func (o *MembershipTypeRuleDefinitionType) GetProgramType() MembershipTypeRuleType {
	if o == nil || IsNil(o.ProgramType) {
		var ret MembershipTypeRuleType
		return ret
	}
	return *o.ProgramType
}

// GetProgramTypeOk returns a tuple with the ProgramType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleDefinitionType) GetProgramTypeOk() (*MembershipTypeRuleType, bool) {
	if o == nil || IsNil(o.ProgramType) {
		return nil, false
	}
	return o.ProgramType, true
}

// HasProgramType returns a boolean if a field has been set.
func (o *MembershipTypeRuleDefinitionType) HasProgramType() bool {
	if o != nil && !IsNil(o.ProgramType) {
		return true
	}

	return false
}

// SetProgramType gets a reference to the given MembershipTypeRuleType and assigns it to the ProgramType field.
func (o *MembershipTypeRuleDefinitionType) SetProgramType(v MembershipTypeRuleType) {
	o.ProgramType = &v
}

// GetRuleAppliesOn returns the RuleAppliesOn field value if set, zero value otherwise.
func (o *MembershipTypeRuleDefinitionType) GetRuleAppliesOn() RuleAppliesOnType {
	if o == nil || IsNil(o.RuleAppliesOn) {
		var ret RuleAppliesOnType
		return ret
	}
	return *o.RuleAppliesOn
}

// GetRuleAppliesOnOk returns a tuple with the RuleAppliesOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleDefinitionType) GetRuleAppliesOnOk() (*RuleAppliesOnType, bool) {
	if o == nil || IsNil(o.RuleAppliesOn) {
		return nil, false
	}
	return o.RuleAppliesOn, true
}

// HasRuleAppliesOn returns a boolean if a field has been set.
func (o *MembershipTypeRuleDefinitionType) HasRuleAppliesOn() bool {
	if o != nil && !IsNil(o.RuleAppliesOn) {
		return true
	}

	return false
}

// SetRuleAppliesOn gets a reference to the given RuleAppliesOnType and assigns it to the RuleAppliesOn field.
func (o *MembershipTypeRuleDefinitionType) SetRuleAppliesOn(v RuleAppliesOnType) {
	o.RuleAppliesOn = &v
}

// GetNoOfTimesEligible returns the NoOfTimesEligible field value if set, zero value otherwise.
func (o *MembershipTypeRuleDefinitionType) GetNoOfTimesEligible() int32 {
	if o == nil || IsNil(o.NoOfTimesEligible) {
		var ret int32
		return ret
	}
	return *o.NoOfTimesEligible
}

// GetNoOfTimesEligibleOk returns a tuple with the NoOfTimesEligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleDefinitionType) GetNoOfTimesEligibleOk() (*int32, bool) {
	if o == nil || IsNil(o.NoOfTimesEligible) {
		return nil, false
	}
	return o.NoOfTimesEligible, true
}

// HasNoOfTimesEligible returns a boolean if a field has been set.
func (o *MembershipTypeRuleDefinitionType) HasNoOfTimesEligible() bool {
	if o != nil && !IsNil(o.NoOfTimesEligible) {
		return true
	}

	return false
}

// SetNoOfTimesEligible gets a reference to the given int32 and assigns it to the NoOfTimesEligible field.
func (o *MembershipTypeRuleDefinitionType) SetNoOfTimesEligible(v int32) {
	o.NoOfTimesEligible = &v
}

// GetRuleExportLabel returns the RuleExportLabel field value if set, zero value otherwise.
func (o *MembershipTypeRuleDefinitionType) GetRuleExportLabel() string {
	if o == nil || IsNil(o.RuleExportLabel) {
		var ret string
		return ret
	}
	return *o.RuleExportLabel
}

// GetRuleExportLabelOk returns a tuple with the RuleExportLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleDefinitionType) GetRuleExportLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RuleExportLabel) {
		return nil, false
	}
	return o.RuleExportLabel, true
}

// HasRuleExportLabel returns a boolean if a field has been set.
func (o *MembershipTypeRuleDefinitionType) HasRuleExportLabel() bool {
	if o != nil && !IsNil(o.RuleExportLabel) {
		return true
	}

	return false
}

// SetRuleExportLabel gets a reference to the given string and assigns it to the RuleExportLabel field.
func (o *MembershipTypeRuleDefinitionType) SetRuleExportLabel(v string) {
	o.RuleExportLabel = &v
}

// GetRuleExpirationDate returns the RuleExpirationDate field value if set, zero value otherwise.
func (o *MembershipTypeRuleDefinitionType) GetRuleExpirationDate() string {
	if o == nil || IsNil(o.RuleExpirationDate) {
		var ret string
		return ret
	}
	return *o.RuleExpirationDate
}

// GetRuleExpirationDateOk returns a tuple with the RuleExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTypeRuleDefinitionType) GetRuleExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.RuleExpirationDate) {
		return nil, false
	}
	return o.RuleExpirationDate, true
}

// HasRuleExpirationDate returns a boolean if a field has been set.
func (o *MembershipTypeRuleDefinitionType) HasRuleExpirationDate() bool {
	if o != nil && !IsNil(o.RuleExpirationDate) {
		return true
	}

	return false
}

// SetRuleExpirationDate gets a reference to the given string and assigns it to the RuleExpirationDate field.
func (o *MembershipTypeRuleDefinitionType) SetRuleExpirationDate(v string) {
	o.RuleExpirationDate = &v
}

func (o MembershipTypeRuleDefinitionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTypeRuleDefinitionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RuleCode) {
		toSerialize["ruleCode"] = o.RuleCode
	}
	if !IsNil(o.ProgramType) {
		toSerialize["programType"] = o.ProgramType
	}
	if !IsNil(o.RuleAppliesOn) {
		toSerialize["ruleAppliesOn"] = o.RuleAppliesOn
	}
	if !IsNil(o.NoOfTimesEligible) {
		toSerialize["noOfTimesEligible"] = o.NoOfTimesEligible
	}
	if !IsNil(o.RuleExportLabel) {
		toSerialize["ruleExportLabel"] = o.RuleExportLabel
	}
	if !IsNil(o.RuleExpirationDate) {
		toSerialize["ruleExpirationDate"] = o.RuleExpirationDate
	}
	return toSerialize, nil
}

type NullableMembershipTypeRuleDefinitionType struct {
	value *MembershipTypeRuleDefinitionType
	isSet bool
}

func (v NullableMembershipTypeRuleDefinitionType) Get() *MembershipTypeRuleDefinitionType {
	return v.value
}

func (v *NullableMembershipTypeRuleDefinitionType) Set(val *MembershipTypeRuleDefinitionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTypeRuleDefinitionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTypeRuleDefinitionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTypeRuleDefinitionType(val *MembershipTypeRuleDefinitionType) *NullableMembershipTypeRuleDefinitionType {
	return &NullableMembershipTypeRuleDefinitionType{value: val, isSet: true}
}

func (v NullableMembershipTypeRuleDefinitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTypeRuleDefinitionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


