/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the UserDefinedEnrollmentFieldType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefinedEnrollmentFieldType{}

// UserDefinedEnrollmentFieldType User Defined Enrollment Field/Attribute.
type UserDefinedEnrollmentFieldType struct {
	// Indicates if the Field/Attribute is active for Membership Type.
	Active *bool `json:"active,omitempty"`
	FieldName *UserDefinedEnrollmentFieldNameType `json:"fieldName,omitempty"`
	// Type of the Field/Attribute such as phone, fax, email etc.
	FieldType *string `json:"fieldType,omitempty"`
	// Indicates if the Field/Attribute is required for Membership Type.
	RequiredField *bool `json:"requiredField,omitempty"`
}

// NewUserDefinedEnrollmentFieldType instantiates a new UserDefinedEnrollmentFieldType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefinedEnrollmentFieldType() *UserDefinedEnrollmentFieldType {
	this := UserDefinedEnrollmentFieldType{}
	return &this
}

// NewUserDefinedEnrollmentFieldTypeWithDefaults instantiates a new UserDefinedEnrollmentFieldType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefinedEnrollmentFieldTypeWithDefaults() *UserDefinedEnrollmentFieldType {
	this := UserDefinedEnrollmentFieldType{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UserDefinedEnrollmentFieldType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedEnrollmentFieldType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UserDefinedEnrollmentFieldType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UserDefinedEnrollmentFieldType) SetActive(v bool) {
	o.Active = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *UserDefinedEnrollmentFieldType) GetFieldName() UserDefinedEnrollmentFieldNameType {
	if o == nil || IsNil(o.FieldName) {
		var ret UserDefinedEnrollmentFieldNameType
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedEnrollmentFieldType) GetFieldNameOk() (*UserDefinedEnrollmentFieldNameType, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *UserDefinedEnrollmentFieldType) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given UserDefinedEnrollmentFieldNameType and assigns it to the FieldName field.
func (o *UserDefinedEnrollmentFieldType) SetFieldName(v UserDefinedEnrollmentFieldNameType) {
	o.FieldName = &v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *UserDefinedEnrollmentFieldType) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedEnrollmentFieldType) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *UserDefinedEnrollmentFieldType) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *UserDefinedEnrollmentFieldType) SetFieldType(v string) {
	o.FieldType = &v
}

// GetRequiredField returns the RequiredField field value if set, zero value otherwise.
func (o *UserDefinedEnrollmentFieldType) GetRequiredField() bool {
	if o == nil || IsNil(o.RequiredField) {
		var ret bool
		return ret
	}
	return *o.RequiredField
}

// GetRequiredFieldOk returns a tuple with the RequiredField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedEnrollmentFieldType) GetRequiredFieldOk() (*bool, bool) {
	if o == nil || IsNil(o.RequiredField) {
		return nil, false
	}
	return o.RequiredField, true
}

// HasRequiredField returns a boolean if a field has been set.
func (o *UserDefinedEnrollmentFieldType) HasRequiredField() bool {
	if o != nil && !IsNil(o.RequiredField) {
		return true
	}

	return false
}

// SetRequiredField gets a reference to the given bool and assigns it to the RequiredField field.
func (o *UserDefinedEnrollmentFieldType) SetRequiredField(v bool) {
	o.RequiredField = &v
}

func (o UserDefinedEnrollmentFieldType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefinedEnrollmentFieldType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.FieldType) {
		toSerialize["fieldType"] = o.FieldType
	}
	if !IsNil(o.RequiredField) {
		toSerialize["requiredField"] = o.RequiredField
	}
	return toSerialize, nil
}

type NullableUserDefinedEnrollmentFieldType struct {
	value *UserDefinedEnrollmentFieldType
	isSet bool
}

func (v NullableUserDefinedEnrollmentFieldType) Get() *UserDefinedEnrollmentFieldType {
	return v.value
}

func (v *NullableUserDefinedEnrollmentFieldType) Set(val *UserDefinedEnrollmentFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedEnrollmentFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedEnrollmentFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedEnrollmentFieldType(val *UserDefinedEnrollmentFieldType) *NullableUserDefinedEnrollmentFieldType {
	return &NullableUserDefinedEnrollmentFieldType{value: val, isSet: true}
}

func (v NullableUserDefinedEnrollmentFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedEnrollmentFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


