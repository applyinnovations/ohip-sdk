/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the ConfigTemplatePreferenceIDType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigTemplatePreferenceIDType{}

// ConfigTemplatePreferenceIDType Base details common between both template and property level preference ids.
type ConfigTemplatePreferenceIDType struct {
	// Specifies the preference code.
	Code *string `json:"code,omitempty"`
	// Specifies the preference group the preference belongs to.
	PreferenceGroup *string `json:"preferenceGroup,omitempty"`
}

// NewConfigTemplatePreferenceIDType instantiates a new ConfigTemplatePreferenceIDType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTemplatePreferenceIDType() *ConfigTemplatePreferenceIDType {
	this := ConfigTemplatePreferenceIDType{}
	return &this
}

// NewConfigTemplatePreferenceIDTypeWithDefaults instantiates a new ConfigTemplatePreferenceIDType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTemplatePreferenceIDTypeWithDefaults() *ConfigTemplatePreferenceIDType {
	this := ConfigTemplatePreferenceIDType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConfigTemplatePreferenceIDType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTemplatePreferenceIDType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConfigTemplatePreferenceIDType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ConfigTemplatePreferenceIDType) SetCode(v string) {
	o.Code = &v
}

// GetPreferenceGroup returns the PreferenceGroup field value if set, zero value otherwise.
func (o *ConfigTemplatePreferenceIDType) GetPreferenceGroup() string {
	if o == nil || IsNil(o.PreferenceGroup) {
		var ret string
		return ret
	}
	return *o.PreferenceGroup
}

// GetPreferenceGroupOk returns a tuple with the PreferenceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTemplatePreferenceIDType) GetPreferenceGroupOk() (*string, bool) {
	if o == nil || IsNil(o.PreferenceGroup) {
		return nil, false
	}
	return o.PreferenceGroup, true
}

// HasPreferenceGroup returns a boolean if a field has been set.
func (o *ConfigTemplatePreferenceIDType) HasPreferenceGroup() bool {
	if o != nil && !IsNil(o.PreferenceGroup) {
		return true
	}

	return false
}

// SetPreferenceGroup gets a reference to the given string and assigns it to the PreferenceGroup field.
func (o *ConfigTemplatePreferenceIDType) SetPreferenceGroup(v string) {
	o.PreferenceGroup = &v
}

func (o ConfigTemplatePreferenceIDType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTemplatePreferenceIDType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.PreferenceGroup) {
		toSerialize["preferenceGroup"] = o.PreferenceGroup
	}
	return toSerialize, nil
}

type NullableConfigTemplatePreferenceIDType struct {
	value *ConfigTemplatePreferenceIDType
	isSet bool
}

func (v NullableConfigTemplatePreferenceIDType) Get() *ConfigTemplatePreferenceIDType {
	return v.value
}

func (v *NullableConfigTemplatePreferenceIDType) Set(val *ConfigTemplatePreferenceIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTemplatePreferenceIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTemplatePreferenceIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTemplatePreferenceIDType(val *ConfigTemplatePreferenceIDType) *NullableConfigTemplatePreferenceIDType {
	return &NullableConfigTemplatePreferenceIDType{value: val, isSet: true}
}

func (v NullableConfigTemplatePreferenceIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTemplatePreferenceIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


