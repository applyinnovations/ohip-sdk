/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// ProfileNameValidationTypeType Simple Type for Profile Name Validations Type. e.g. Company,Travel Agent,Source.
type ProfileNameValidationTypeType string

// List of profileNameValidationTypeType
const (
	PROFILENAMEVALIDATIONTYPETYPE_COMPANY ProfileNameValidationTypeType = "Company"
	PROFILENAMEVALIDATIONTYPETYPE_TRAVEL_AGENT ProfileNameValidationTypeType = "TravelAgent"
	PROFILENAMEVALIDATIONTYPETYPE_SOURCE ProfileNameValidationTypeType = "Source"
)

// All allowed values of ProfileNameValidationTypeType enum
var AllowedProfileNameValidationTypeTypeEnumValues = []ProfileNameValidationTypeType{
	"Company",
	"TravelAgent",
	"Source",
}

func (v *ProfileNameValidationTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileNameValidationTypeType(value)
	for _, existing := range AllowedProfileNameValidationTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileNameValidationTypeType", value)
}

// NewProfileNameValidationTypeTypeFromValue returns a pointer to a valid ProfileNameValidationTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileNameValidationTypeTypeFromValue(v string) (*ProfileNameValidationTypeType, error) {
	ev := ProfileNameValidationTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileNameValidationTypeType: valid values are %v", v, AllowedProfileNameValidationTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileNameValidationTypeType) IsValid() bool {
	for _, existing := range AllowedProfileNameValidationTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to profileNameValidationTypeType value
func (v ProfileNameValidationTypeType) Ptr() *ProfileNameValidationTypeType {
	return &v
}

type NullableProfileNameValidationTypeType struct {
	value *ProfileNameValidationTypeType
	isSet bool
}

func (v NullableProfileNameValidationTypeType) Get() *ProfileNameValidationTypeType {
	return v.value
}

func (v *NullableProfileNameValidationTypeType) Set(val *ProfileNameValidationTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileNameValidationTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileNameValidationTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileNameValidationTypeType(val *ProfileNameValidationTypeType) *NullableProfileNameValidationTypeType {
	return &NullableProfileNameValidationTypeType{value: val, isSet: true}
}

func (v NullableProfileNameValidationTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileNameValidationTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

