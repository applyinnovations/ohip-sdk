/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// MembershipAwardGenerationMethodType Type of action that generates membership award points.
type MembershipAwardGenerationMethodType string

// List of membershipAwardGenerationMethodType
const (
	MEMBERSHIPAWARDGENERATIONMETHODTYPE_BATCH MembershipAwardGenerationMethodType = "Batch"
	MEMBERSHIPAWARDGENERATIONMETHODTYPE_MANUAL MembershipAwardGenerationMethodType = "Manual"
	MEMBERSHIPAWARDGENERATIONMETHODTYPE_SYSTEM MembershipAwardGenerationMethodType = "System"
)

// All allowed values of MembershipAwardGenerationMethodType enum
var AllowedMembershipAwardGenerationMethodTypeEnumValues = []MembershipAwardGenerationMethodType{
	"Batch",
	"Manual",
	"System",
}

func (v *MembershipAwardGenerationMethodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MembershipAwardGenerationMethodType(value)
	for _, existing := range AllowedMembershipAwardGenerationMethodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MembershipAwardGenerationMethodType", value)
}

// NewMembershipAwardGenerationMethodTypeFromValue returns a pointer to a valid MembershipAwardGenerationMethodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMembershipAwardGenerationMethodTypeFromValue(v string) (*MembershipAwardGenerationMethodType, error) {
	ev := MembershipAwardGenerationMethodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MembershipAwardGenerationMethodType: valid values are %v", v, AllowedMembershipAwardGenerationMethodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MembershipAwardGenerationMethodType) IsValid() bool {
	for _, existing := range AllowedMembershipAwardGenerationMethodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to membershipAwardGenerationMethodType value
func (v MembershipAwardGenerationMethodType) Ptr() *MembershipAwardGenerationMethodType {
	return &v
}

type NullableMembershipAwardGenerationMethodType struct {
	value *MembershipAwardGenerationMethodType
	isSet bool
}

func (v NullableMembershipAwardGenerationMethodType) Get() *MembershipAwardGenerationMethodType {
	return v.value
}

func (v *NullableMembershipAwardGenerationMethodType) Set(val *MembershipAwardGenerationMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipAwardGenerationMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipAwardGenerationMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipAwardGenerationMethodType(val *MembershipAwardGenerationMethodType) *NullableMembershipAwardGenerationMethodType {
	return &NullableMembershipAwardGenerationMethodType{value: val, isSet: true}
}

func (v NullableMembershipAwardGenerationMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipAwardGenerationMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

