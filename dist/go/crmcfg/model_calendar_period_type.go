/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// CalendarPeriodType 12 month period based on starting month.
type CalendarPeriodType string

// List of calendarPeriodType
const (
	CALENDARPERIODTYPE_CALENDAR CalendarPeriodType = "Calendar"
	CALENDARPERIODTYPE_ROLLING CalendarPeriodType = "Rolling"
)

// All allowed values of CalendarPeriodType enum
var AllowedCalendarPeriodTypeEnumValues = []CalendarPeriodType{
	"Calendar",
	"Rolling",
}

func (v *CalendarPeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalendarPeriodType(value)
	for _, existing := range AllowedCalendarPeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalendarPeriodType", value)
}

// NewCalendarPeriodTypeFromValue returns a pointer to a valid CalendarPeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalendarPeriodTypeFromValue(v string) (*CalendarPeriodType, error) {
	ev := CalendarPeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalendarPeriodType: valid values are %v", v, AllowedCalendarPeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalendarPeriodType) IsValid() bool {
	for _, existing := range AllowedCalendarPeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to calendarPeriodType value
func (v CalendarPeriodType) Ptr() *CalendarPeriodType {
	return &v
}

type NullableCalendarPeriodType struct {
	value *CalendarPeriodType
	isSet bool
}

func (v NullableCalendarPeriodType) Get() *CalendarPeriodType {
	return v.value
}

func (v *NullableCalendarPeriodType) Set(val *CalendarPeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarPeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarPeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarPeriodType(val *CalendarPeriodType) *NullableCalendarPeriodType {
	return &NullableCalendarPeriodType{value: val, isSet: true}
}

func (v NullableCalendarPeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarPeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

