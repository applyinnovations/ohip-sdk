/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// AttachMembershipToReservationRuleType Indicates when the membership information should get attach to the reservation.
type AttachMembershipToReservationRuleType string

// List of attachMembershipToReservationRuleType
const (
	ATTACHMEMBERSHIPTORESERVATIONRULETYPE_NEW_RESERVATION AttachMembershipToReservationRuleType = "NewReservation"
	ATTACHMEMBERSHIPTORESERVATIONRULETYPE_UPDATE_RESERVATION AttachMembershipToReservationRuleType = "UpdateReservation"
	ATTACHMEMBERSHIPTORESERVATIONRULETYPE_CHECKIN AttachMembershipToReservationRuleType = "Checkin"
	ATTACHMEMBERSHIPTORESERVATIONRULETYPE_CHECKOUT AttachMembershipToReservationRuleType = "Checkout"
)

// All allowed values of AttachMembershipToReservationRuleType enum
var AllowedAttachMembershipToReservationRuleTypeEnumValues = []AttachMembershipToReservationRuleType{
	"NewReservation",
	"UpdateReservation",
	"Checkin",
	"Checkout",
}

func (v *AttachMembershipToReservationRuleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AttachMembershipToReservationRuleType(value)
	for _, existing := range AllowedAttachMembershipToReservationRuleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AttachMembershipToReservationRuleType", value)
}

// NewAttachMembershipToReservationRuleTypeFromValue returns a pointer to a valid AttachMembershipToReservationRuleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAttachMembershipToReservationRuleTypeFromValue(v string) (*AttachMembershipToReservationRuleType, error) {
	ev := AttachMembershipToReservationRuleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AttachMembershipToReservationRuleType: valid values are %v", v, AllowedAttachMembershipToReservationRuleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AttachMembershipToReservationRuleType) IsValid() bool {
	for _, existing := range AllowedAttachMembershipToReservationRuleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to attachMembershipToReservationRuleType value
func (v AttachMembershipToReservationRuleType) Ptr() *AttachMembershipToReservationRuleType {
	return &v
}

type NullableAttachMembershipToReservationRuleType struct {
	value *AttachMembershipToReservationRuleType
	isSet bool
}

func (v NullableAttachMembershipToReservationRuleType) Get() *AttachMembershipToReservationRuleType {
	return v.value
}

func (v *NullableAttachMembershipToReservationRuleType) Set(val *AttachMembershipToReservationRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachMembershipToReservationRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachMembershipToReservationRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachMembershipToReservationRuleType(val *AttachMembershipToReservationRuleType) *NullableAttachMembershipToReservationRuleType {
	return &NullableAttachMembershipToReservationRuleType{value: val, isSet: true}
}

func (v NullableAttachMembershipToReservationRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachMembershipToReservationRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

