/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
)

// checks if the PreferenceGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreferenceGroupType{}

// PreferenceGroupType Preference group identification details.
type PreferenceGroupType struct {
	// Code identifying the preference group.
	Code *string `json:"code,omitempty"`
	// Description of the preference group.
	Description *string `json:"description,omitempty"`
	// When this mandatory reservation is true then user cannot set or change reservation preference flag and also this is a non editable field. SPECIALS AND ROOM FEATURES preference groups will have true for this field
	MandatoryReservation *bool `json:"mandatoryReservation,omitempty"`
	// Indicates if the preference group can be used in reservations.
	ReservationPreference *bool `json:"reservationPreference,omitempty"`
	// Maximum number of preferences which can be created in this preference group.
	MaxQuantity *int32 `json:"maxQuantity,omitempty"`
	// Display sequence for the preference group.
	Sequence *int32 `json:"sequence,omitempty"`
	// This is a placeholder element for future use. Functionality may not be available for the current implementation.
	AllowSubTypes *bool `json:"allowSubTypes,omitempty"`
	ManagedBy *ManagedByOptions `json:"managedBy,omitempty"`
}

// NewPreferenceGroupType instantiates a new PreferenceGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferenceGroupType() *PreferenceGroupType {
	this := PreferenceGroupType{}
	return &this
}

// NewPreferenceGroupTypeWithDefaults instantiates a new PreferenceGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferenceGroupTypeWithDefaults() *PreferenceGroupType {
	this := PreferenceGroupType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PreferenceGroupType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PreferenceGroupType) SetDescription(v string) {
	o.Description = &v
}

// GetMandatoryReservation returns the MandatoryReservation field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetMandatoryReservation() bool {
	if o == nil || IsNil(o.MandatoryReservation) {
		var ret bool
		return ret
	}
	return *o.MandatoryReservation
}

// GetMandatoryReservationOk returns a tuple with the MandatoryReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetMandatoryReservationOk() (*bool, bool) {
	if o == nil || IsNil(o.MandatoryReservation) {
		return nil, false
	}
	return o.MandatoryReservation, true
}

// HasMandatoryReservation returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasMandatoryReservation() bool {
	if o != nil && !IsNil(o.MandatoryReservation) {
		return true
	}

	return false
}

// SetMandatoryReservation gets a reference to the given bool and assigns it to the MandatoryReservation field.
func (o *PreferenceGroupType) SetMandatoryReservation(v bool) {
	o.MandatoryReservation = &v
}

// GetReservationPreference returns the ReservationPreference field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetReservationPreference() bool {
	if o == nil || IsNil(o.ReservationPreference) {
		var ret bool
		return ret
	}
	return *o.ReservationPreference
}

// GetReservationPreferenceOk returns a tuple with the ReservationPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetReservationPreferenceOk() (*bool, bool) {
	if o == nil || IsNil(o.ReservationPreference) {
		return nil, false
	}
	return o.ReservationPreference, true
}

// HasReservationPreference returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasReservationPreference() bool {
	if o != nil && !IsNil(o.ReservationPreference) {
		return true
	}

	return false
}

// SetReservationPreference gets a reference to the given bool and assigns it to the ReservationPreference field.
func (o *PreferenceGroupType) SetReservationPreference(v bool) {
	o.ReservationPreference = &v
}

// GetMaxQuantity returns the MaxQuantity field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetMaxQuantity() int32 {
	if o == nil || IsNil(o.MaxQuantity) {
		var ret int32
		return ret
	}
	return *o.MaxQuantity
}

// GetMaxQuantityOk returns a tuple with the MaxQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetMaxQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxQuantity) {
		return nil, false
	}
	return o.MaxQuantity, true
}

// HasMaxQuantity returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasMaxQuantity() bool {
	if o != nil && !IsNil(o.MaxQuantity) {
		return true
	}

	return false
}

// SetMaxQuantity gets a reference to the given int32 and assigns it to the MaxQuantity field.
func (o *PreferenceGroupType) SetMaxQuantity(v int32) {
	o.MaxQuantity = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *PreferenceGroupType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetAllowSubTypes returns the AllowSubTypes field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetAllowSubTypes() bool {
	if o == nil || IsNil(o.AllowSubTypes) {
		var ret bool
		return ret
	}
	return *o.AllowSubTypes
}

// GetAllowSubTypesOk returns a tuple with the AllowSubTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetAllowSubTypesOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowSubTypes) {
		return nil, false
	}
	return o.AllowSubTypes, true
}

// HasAllowSubTypes returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasAllowSubTypes() bool {
	if o != nil && !IsNil(o.AllowSubTypes) {
		return true
	}

	return false
}

// SetAllowSubTypes gets a reference to the given bool and assigns it to the AllowSubTypes field.
func (o *PreferenceGroupType) SetAllowSubTypes(v bool) {
	o.AllowSubTypes = &v
}

// GetManagedBy returns the ManagedBy field value if set, zero value otherwise.
func (o *PreferenceGroupType) GetManagedBy() ManagedByOptions {
	if o == nil || IsNil(o.ManagedBy) {
		var ret ManagedByOptions
		return ret
	}
	return *o.ManagedBy
}

// GetManagedByOk returns a tuple with the ManagedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceGroupType) GetManagedByOk() (*ManagedByOptions, bool) {
	if o == nil || IsNil(o.ManagedBy) {
		return nil, false
	}
	return o.ManagedBy, true
}

// HasManagedBy returns a boolean if a field has been set.
func (o *PreferenceGroupType) HasManagedBy() bool {
	if o != nil && !IsNil(o.ManagedBy) {
		return true
	}

	return false
}

// SetManagedBy gets a reference to the given ManagedByOptions and assigns it to the ManagedBy field.
func (o *PreferenceGroupType) SetManagedBy(v ManagedByOptions) {
	o.ManagedBy = &v
}

func (o PreferenceGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreferenceGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.MandatoryReservation) {
		toSerialize["mandatoryReservation"] = o.MandatoryReservation
	}
	if !IsNil(o.ReservationPreference) {
		toSerialize["reservationPreference"] = o.ReservationPreference
	}
	if !IsNil(o.MaxQuantity) {
		toSerialize["maxQuantity"] = o.MaxQuantity
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.AllowSubTypes) {
		toSerialize["allowSubTypes"] = o.AllowSubTypes
	}
	if !IsNil(o.ManagedBy) {
		toSerialize["managedBy"] = o.ManagedBy
	}
	return toSerialize, nil
}

type NullablePreferenceGroupType struct {
	value *PreferenceGroupType
	isSet bool
}

func (v NullablePreferenceGroupType) Get() *PreferenceGroupType {
	return v.value
}

func (v *NullablePreferenceGroupType) Set(val *PreferenceGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferenceGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferenceGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferenceGroupType(val *PreferenceGroupType) *NullablePreferenceGroupType {
	return &NullablePreferenceGroupType{value: val, isSet: true}
}

func (v NullablePreferenceGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferenceGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


