/*
OPERA Cloud CRM Configuration API

APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crmcfg

import (
	"encoding/json"
	"fmt"
)

// PointsRoundingFlagType This flag tells if the total amount computed will be rounded, rounded up or rounded down.
type PointsRoundingFlagType string

// List of pointsRoundingFlagType
const (
	POINTSROUNDINGFLAGTYPE_ROUND PointsRoundingFlagType = "Round"
	POINTSROUNDINGFLAGTYPE_CEIL PointsRoundingFlagType = "Ceil"
	POINTSROUNDINGFLAGTYPE_FLOOR PointsRoundingFlagType = "Floor"
)

// All allowed values of PointsRoundingFlagType enum
var AllowedPointsRoundingFlagTypeEnumValues = []PointsRoundingFlagType{
	"Round",
	"Ceil",
	"Floor",
}

func (v *PointsRoundingFlagType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PointsRoundingFlagType(value)
	for _, existing := range AllowedPointsRoundingFlagTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PointsRoundingFlagType", value)
}

// NewPointsRoundingFlagTypeFromValue returns a pointer to a valid PointsRoundingFlagType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPointsRoundingFlagTypeFromValue(v string) (*PointsRoundingFlagType, error) {
	ev := PointsRoundingFlagType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PointsRoundingFlagType: valid values are %v", v, AllowedPointsRoundingFlagTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PointsRoundingFlagType) IsValid() bool {
	for _, existing := range AllowedPointsRoundingFlagTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to pointsRoundingFlagType value
func (v PointsRoundingFlagType) Ptr() *PointsRoundingFlagType {
	return &v
}

type NullablePointsRoundingFlagType struct {
	value *PointsRoundingFlagType
	isSet bool
}

func (v NullablePointsRoundingFlagType) Get() *PointsRoundingFlagType {
	return v.value
}

func (v *NullablePointsRoundingFlagType) Set(val *PointsRoundingFlagType) {
	v.value = val
	v.isSet = true
}

func (v NullablePointsRoundingFlagType) IsSet() bool {
	return v.isSet
}

func (v *NullablePointsRoundingFlagType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointsRoundingFlagType(val *PointsRoundingFlagType) *NullablePointsRoundingFlagType {
	return &NullablePointsRoundingFlagType{value: val, isSet: true}
}

func (v NullablePointsRoundingFlagType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointsRoundingFlagType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

