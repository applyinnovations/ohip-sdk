/*
OPERA Cloud Content Service

Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medcfg

import (
	"encoding/json"
	"fmt"
)

// ImageCodeType the model 'ImageCodeType'
type ImageCodeType string

// List of imageCodeType
const (
	IMAGECODETYPE_LOGO_CHAIN ImageCodeType = "LogoChain"
	IMAGECODETYPE_LOGO ImageCodeType = "Logo"
	IMAGECODETYPE_PROFILE ImageCodeType = "Profile"
	IMAGECODETYPE_NATIONALITY ImageCodeType = "Nationality"
	IMAGECODETYPE_USER ImageCodeType = "User"
	IMAGECODETYPE_TOOLBAR_ITEM_CODE ImageCodeType = "ToolbarItemCode"
	IMAGECODETYPE_CHAIN ImageCodeType = "Chain"
	IMAGECODETYPE_MEMBERSHIP_TYPE ImageCodeType = "MembershipType"
	IMAGECODETYPE_MEMBERSHIP_LEVEL ImageCodeType = "MembershipLevel"
	IMAGECODETYPE_RESORT ImageCodeType = "Resort"
	IMAGECODETYPE_ROOM_TYPE_CHAIN ImageCodeType = "RoomTypeChain"
	IMAGECODETYPE_ROOM_TYPE ImageCodeType = "RoomType"
	IMAGECODETYPE_ROOM_NUMBER ImageCodeType = "RoomNumber"
	IMAGECODETYPE_OOO_REASON_CHAIN ImageCodeType = "OooReasonChain"
	IMAGECODETYPE_OOO_REASON ImageCodeType = "OooReason"
	IMAGECODETYPE_ROOM_MAINT_CHAIN ImageCodeType = "RoomMaintChain"
	IMAGECODETYPE_ROOM_MAINTENANCE ImageCodeType = "RoomMaintenance"
	IMAGECODETYPE_ROOM_MAINT_ISSUE ImageCodeType = "RoomMaintIssue"
	IMAGECODETYPE_FLOOR_PLAN ImageCodeType = "FloorPlan"
	IMAGECODETYPE_SITE_LAYOUT ImageCodeType = "SiteLayout"
	IMAGECODETYPE_ATTRACTION ImageCodeType = "Attraction"
	IMAGECODETYPE_PROPERTY_MAP ImageCodeType = "PropertyMap"
	IMAGECODETYPE_INV_ITEM_CHAIN ImageCodeType = "InvItemChain"
	IMAGECODETYPE_INV_ITEM ImageCodeType = "InvItem"
	IMAGECODETYPE_PACKAGE_CHAIN ImageCodeType = "PackageChain"
	IMAGECODETYPE_PACKAGE ImageCodeType = "Package"
	IMAGECODETYPE_POOL ImageCodeType = "Pool"
	IMAGECODETYPE_ROOM_CONDITION_CHAIN ImageCodeType = "RoomConditionChain"
	IMAGECODETYPE_ROOM_CONDITION ImageCodeType = "RoomCondition"
	IMAGECODETYPE_FUNCTION_SPACE ImageCodeType = "FunctionSpace"
	IMAGECODETYPE_FUNCTION_SETUP_STYLE ImageCodeType = "FunctionSetupStyle"
	IMAGECODETYPE_TRACK_IT_TYPE_CHAIN ImageCodeType = "TrackItTypeChain"
	IMAGECODETYPE_TRACK_IT_TYPE ImageCodeType = "TrackItType"
	IMAGECODETYPE_HEIGHT ImageCodeType = "Height"
	IMAGECODETYPE_WIDTH ImageCodeType = "Width"
)

// All allowed values of ImageCodeType enum
var AllowedImageCodeTypeEnumValues = []ImageCodeType{
	"LogoChain",
	"Logo",
	"Profile",
	"Nationality",
	"User",
	"ToolbarItemCode",
	"Chain",
	"MembershipType",
	"MembershipLevel",
	"Resort",
	"RoomTypeChain",
	"RoomType",
	"RoomNumber",
	"OooReasonChain",
	"OooReason",
	"RoomMaintChain",
	"RoomMaintenance",
	"RoomMaintIssue",
	"FloorPlan",
	"SiteLayout",
	"Attraction",
	"PropertyMap",
	"InvItemChain",
	"InvItem",
	"PackageChain",
	"Package",
	"Pool",
	"RoomConditionChain",
	"RoomCondition",
	"FunctionSpace",
	"FunctionSetupStyle",
	"TrackItTypeChain",
	"TrackItType",
	"Height",
	"Width",
}

func (v *ImageCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageCodeType(value)
	for _, existing := range AllowedImageCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageCodeType", value)
}

// NewImageCodeTypeFromValue returns a pointer to a valid ImageCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageCodeTypeFromValue(v string) (*ImageCodeType, error) {
	ev := ImageCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageCodeType: valid values are %v", v, AllowedImageCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageCodeType) IsValid() bool {
	for _, existing := range AllowedImageCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to imageCodeType value
func (v ImageCodeType) Ptr() *ImageCodeType {
	return &v
}

type NullableImageCodeType struct {
	value *ImageCodeType
	isSet bool
}

func (v NullableImageCodeType) Get() *ImageCodeType {
	return v.value
}

func (v *NullableImageCodeType) Set(val *ImageCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageCodeType(val *ImageCodeType) *NullableImageCodeType {
	return &NullableImageCodeType{value: val, isSet: true}
}

func (v NullableImageCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

