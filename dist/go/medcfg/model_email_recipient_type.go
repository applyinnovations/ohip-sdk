/*
OPERA Cloud Content Service

Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medcfg

import (
	"encoding/json"
)

// checks if the EmailRecipientType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailRecipientType{}

// EmailRecipientType struct for EmailRecipientType
type EmailRecipientType struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
}

// NewEmailRecipientType instantiates a new EmailRecipientType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRecipientType() *EmailRecipientType {
	this := EmailRecipientType{}
	return &this
}

// NewEmailRecipientTypeWithDefaults instantiates a new EmailRecipientType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRecipientTypeWithDefaults() *EmailRecipientType {
	this := EmailRecipientType{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *EmailRecipientType) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRecipientType) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *EmailRecipientType) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *EmailRecipientType) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

func (o EmailRecipientType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailRecipientType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	return toSerialize, nil
}

type NullableEmailRecipientType struct {
	value *EmailRecipientType
	isSet bool
}

func (v NullableEmailRecipientType) Get() *EmailRecipientType {
	return v.value
}

func (v *NullableEmailRecipientType) Set(val *EmailRecipientType) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRecipientType) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRecipientType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRecipientType(val *EmailRecipientType) *NullableEmailRecipientType {
	return &NullableEmailRecipientType{value: val, isSet: true}
}

func (v NullableEmailRecipientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRecipientType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


