/*
OPERA Cloud Content Service

Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medcfg

import (
	"encoding/json"
)

// checks if the ImageUploadType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageUploadType{}

// ImageUploadType Image upload details
type ImageUploadType struct {
	// Description of the image.
	Description *string `json:"description,omitempty"`
	// File extension of the Image, e.g. JPG, PNG, BMP, etc.
	FileExtension *string `json:"fileExtension,omitempty"`
	// Image file to upload.
	Image *string `json:"image,omitempty"`
	ImageCode *ImageCodeType `json:"imageCode,omitempty"`
	ImageId *UniqueIDType `json:"imageId,omitempty"`
	// Collection of image parameters code / value pairs.
	ImageParameters []ImageParameterType `json:"imageParameters,omitempty"`
	ImageStyle *ImageStyleType `json:"imageStyle,omitempty"`
	LanguageCode *string `json:"languageCode,omitempty"`
	LinkId *UniqueIDType `json:"linkId,omitempty"`
}

// NewImageUploadType instantiates a new ImageUploadType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageUploadType() *ImageUploadType {
	this := ImageUploadType{}
	return &this
}

// NewImageUploadTypeWithDefaults instantiates a new ImageUploadType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageUploadTypeWithDefaults() *ImageUploadType {
	this := ImageUploadType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImageUploadType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImageUploadType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImageUploadType) SetDescription(v string) {
	o.Description = &v
}

// GetFileExtension returns the FileExtension field value if set, zero value otherwise.
func (o *ImageUploadType) GetFileExtension() string {
	if o == nil || IsNil(o.FileExtension) {
		var ret string
		return ret
	}
	return *o.FileExtension
}

// GetFileExtensionOk returns a tuple with the FileExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetFileExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.FileExtension) {
		return nil, false
	}
	return o.FileExtension, true
}

// HasFileExtension returns a boolean if a field has been set.
func (o *ImageUploadType) HasFileExtension() bool {
	if o != nil && !IsNil(o.FileExtension) {
		return true
	}

	return false
}

// SetFileExtension gets a reference to the given string and assigns it to the FileExtension field.
func (o *ImageUploadType) SetFileExtension(v string) {
	o.FileExtension = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ImageUploadType) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ImageUploadType) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ImageUploadType) SetImage(v string) {
	o.Image = &v
}

// GetImageCode returns the ImageCode field value if set, zero value otherwise.
func (o *ImageUploadType) GetImageCode() ImageCodeType {
	if o == nil || IsNil(o.ImageCode) {
		var ret ImageCodeType
		return ret
	}
	return *o.ImageCode
}

// GetImageCodeOk returns a tuple with the ImageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetImageCodeOk() (*ImageCodeType, bool) {
	if o == nil || IsNil(o.ImageCode) {
		return nil, false
	}
	return o.ImageCode, true
}

// HasImageCode returns a boolean if a field has been set.
func (o *ImageUploadType) HasImageCode() bool {
	if o != nil && !IsNil(o.ImageCode) {
		return true
	}

	return false
}

// SetImageCode gets a reference to the given ImageCodeType and assigns it to the ImageCode field.
func (o *ImageUploadType) SetImageCode(v ImageCodeType) {
	o.ImageCode = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *ImageUploadType) GetImageId() UniqueIDType {
	if o == nil || IsNil(o.ImageId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetImageIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *ImageUploadType) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given UniqueIDType and assigns it to the ImageId field.
func (o *ImageUploadType) SetImageId(v UniqueIDType) {
	o.ImageId = &v
}

// GetImageParameters returns the ImageParameters field value if set, zero value otherwise.
func (o *ImageUploadType) GetImageParameters() []ImageParameterType {
	if o == nil || IsNil(o.ImageParameters) {
		var ret []ImageParameterType
		return ret
	}
	return o.ImageParameters
}

// GetImageParametersOk returns a tuple with the ImageParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetImageParametersOk() ([]ImageParameterType, bool) {
	if o == nil || IsNil(o.ImageParameters) {
		return nil, false
	}
	return o.ImageParameters, true
}

// HasImageParameters returns a boolean if a field has been set.
func (o *ImageUploadType) HasImageParameters() bool {
	if o != nil && !IsNil(o.ImageParameters) {
		return true
	}

	return false
}

// SetImageParameters gets a reference to the given []ImageParameterType and assigns it to the ImageParameters field.
func (o *ImageUploadType) SetImageParameters(v []ImageParameterType) {
	o.ImageParameters = v
}

// GetImageStyle returns the ImageStyle field value if set, zero value otherwise.
func (o *ImageUploadType) GetImageStyle() ImageStyleType {
	if o == nil || IsNil(o.ImageStyle) {
		var ret ImageStyleType
		return ret
	}
	return *o.ImageStyle
}

// GetImageStyleOk returns a tuple with the ImageStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetImageStyleOk() (*ImageStyleType, bool) {
	if o == nil || IsNil(o.ImageStyle) {
		return nil, false
	}
	return o.ImageStyle, true
}

// HasImageStyle returns a boolean if a field has been set.
func (o *ImageUploadType) HasImageStyle() bool {
	if o != nil && !IsNil(o.ImageStyle) {
		return true
	}

	return false
}

// SetImageStyle gets a reference to the given ImageStyleType and assigns it to the ImageStyle field.
func (o *ImageUploadType) SetImageStyle(v ImageStyleType) {
	o.ImageStyle = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *ImageUploadType) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *ImageUploadType) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *ImageUploadType) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *ImageUploadType) GetLinkId() UniqueIDType {
	if o == nil || IsNil(o.LinkId) {
		var ret UniqueIDType
		return ret
	}
	return *o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageUploadType) GetLinkIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.LinkId) {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *ImageUploadType) HasLinkId() bool {
	if o != nil && !IsNil(o.LinkId) {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given UniqueIDType and assigns it to the LinkId field.
func (o *ImageUploadType) SetLinkId(v UniqueIDType) {
	o.LinkId = &v
}

func (o ImageUploadType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageUploadType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FileExtension) {
		toSerialize["fileExtension"] = o.FileExtension
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.ImageCode) {
		toSerialize["imageCode"] = o.ImageCode
	}
	if !IsNil(o.ImageId) {
		toSerialize["imageId"] = o.ImageId
	}
	if !IsNil(o.ImageParameters) {
		toSerialize["imageParameters"] = o.ImageParameters
	}
	if !IsNil(o.ImageStyle) {
		toSerialize["imageStyle"] = o.ImageStyle
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.LinkId) {
		toSerialize["linkId"] = o.LinkId
	}
	return toSerialize, nil
}

type NullableImageUploadType struct {
	value *ImageUploadType
	isSet bool
}

func (v NullableImageUploadType) Get() *ImageUploadType {
	return v.value
}

func (v *NullableImageUploadType) Set(val *ImageUploadType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageUploadType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageUploadType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageUploadType(val *ImageUploadType) *NullableImageUploadType {
	return &NullableImageUploadType{value: val, isSet: true}
}

func (v NullableImageUploadType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageUploadType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


