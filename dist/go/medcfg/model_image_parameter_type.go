/*
OPERA Cloud Content Service

Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package medcfg

import (
	"encoding/json"
)

// checks if the ImageParameterType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageParameterType{}

// ImageParameterType Image parameter code/value pair
type ImageParameterType struct {
	ImageParameterCode *ImageCodeType `json:"imageParameterCode,omitempty"`
	// Image parameter value.
	ImageParameterValue *string `json:"imageParameterValue,omitempty"`
}

// NewImageParameterType instantiates a new ImageParameterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageParameterType() *ImageParameterType {
	this := ImageParameterType{}
	return &this
}

// NewImageParameterTypeWithDefaults instantiates a new ImageParameterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageParameterTypeWithDefaults() *ImageParameterType {
	this := ImageParameterType{}
	return &this
}

// GetImageParameterCode returns the ImageParameterCode field value if set, zero value otherwise.
func (o *ImageParameterType) GetImageParameterCode() ImageCodeType {
	if o == nil || IsNil(o.ImageParameterCode) {
		var ret ImageCodeType
		return ret
	}
	return *o.ImageParameterCode
}

// GetImageParameterCodeOk returns a tuple with the ImageParameterCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageParameterType) GetImageParameterCodeOk() (*ImageCodeType, bool) {
	if o == nil || IsNil(o.ImageParameterCode) {
		return nil, false
	}
	return o.ImageParameterCode, true
}

// HasImageParameterCode returns a boolean if a field has been set.
func (o *ImageParameterType) HasImageParameterCode() bool {
	if o != nil && !IsNil(o.ImageParameterCode) {
		return true
	}

	return false
}

// SetImageParameterCode gets a reference to the given ImageCodeType and assigns it to the ImageParameterCode field.
func (o *ImageParameterType) SetImageParameterCode(v ImageCodeType) {
	o.ImageParameterCode = &v
}

// GetImageParameterValue returns the ImageParameterValue field value if set, zero value otherwise.
func (o *ImageParameterType) GetImageParameterValue() string {
	if o == nil || IsNil(o.ImageParameterValue) {
		var ret string
		return ret
	}
	return *o.ImageParameterValue
}

// GetImageParameterValueOk returns a tuple with the ImageParameterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageParameterType) GetImageParameterValueOk() (*string, bool) {
	if o == nil || IsNil(o.ImageParameterValue) {
		return nil, false
	}
	return o.ImageParameterValue, true
}

// HasImageParameterValue returns a boolean if a field has been set.
func (o *ImageParameterType) HasImageParameterValue() bool {
	if o != nil && !IsNil(o.ImageParameterValue) {
		return true
	}

	return false
}

// SetImageParameterValue gets a reference to the given string and assigns it to the ImageParameterValue field.
func (o *ImageParameterType) SetImageParameterValue(v string) {
	o.ImageParameterValue = &v
}

func (o ImageParameterType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageParameterType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImageParameterCode) {
		toSerialize["imageParameterCode"] = o.ImageParameterCode
	}
	if !IsNil(o.ImageParameterValue) {
		toSerialize["imageParameterValue"] = o.ImageParameterValue
	}
	return toSerialize, nil
}

type NullableImageParameterType struct {
	value *ImageParameterType
	isSet bool
}

func (v NullableImageParameterType) Get() *ImageParameterType {
	return v.value
}

func (v *NullableImageParameterType) Set(val *ImageParameterType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageParameterType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageParameterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageParameterType(val *ImageParameterType) *NullableImageParameterType {
	return &NullableImageParameterType{value: val, isSet: true}
}

func (v NullableImageParameterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageParameterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


