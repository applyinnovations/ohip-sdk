/*
OPERA Provisioning Service API

APIs to cater to provisioning and deprovisioning of new properties and chains in OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ops

import (
	"encoding/json"
)

// checks if the Currencies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Currencies{}

// Currencies Response object which will contain all the List of valid currencies in the environment.
type Currencies struct {
	// List of currencies available in the environment.
	CurrencyList []string `json:"currencyList,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCurrencies instantiates a new Currencies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencies() *Currencies {
	this := Currencies{}
	return &this
}

// NewCurrenciesWithDefaults instantiates a new Currencies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrenciesWithDefaults() *Currencies {
	this := Currencies{}
	return &this
}

// GetCurrencyList returns the CurrencyList field value if set, zero value otherwise.
func (o *Currencies) GetCurrencyList() []string {
	if o == nil || IsNil(o.CurrencyList) {
		var ret []string
		return ret
	}
	return o.CurrencyList
}

// GetCurrencyListOk returns a tuple with the CurrencyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currencies) GetCurrencyListOk() ([]string, bool) {
	if o == nil || IsNil(o.CurrencyList) {
		return nil, false
	}
	return o.CurrencyList, true
}

// HasCurrencyList returns a boolean if a field has been set.
func (o *Currencies) HasCurrencyList() bool {
	if o != nil && !IsNil(o.CurrencyList) {
		return true
	}

	return false
}

// SetCurrencyList gets a reference to the given []string and assigns it to the CurrencyList field.
func (o *Currencies) SetCurrencyList(v []string) {
	o.CurrencyList = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Currencies) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currencies) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Currencies) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *Currencies) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o Currencies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Currencies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyList) {
		toSerialize["currencyList"] = o.CurrencyList
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCurrencies struct {
	value *Currencies
	isSet bool
}

func (v NullableCurrencies) Get() *Currencies {
	return v.value
}

func (v *NullableCurrencies) Set(val *Currencies) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencies) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencies(val *Currencies) *NullableCurrencies {
	return &NullableCurrencies{value: val, isSet: true}
}

func (v NullableCurrencies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


