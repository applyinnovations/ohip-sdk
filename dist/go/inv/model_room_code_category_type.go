/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
	"fmt"
)

// RoomCodeCategoryType Used for Room code type. eg. Code=\"RoomType\" or \"RoomClass\"
type RoomCodeCategoryType string

// List of roomCodeCategoryType
const (
	ROOMCODECATEGORYTYPE_ROOM_TYPE RoomCodeCategoryType = "RoomType"
	ROOMCODECATEGORYTYPE_ROOM_CLASS RoomCodeCategoryType = "RoomClass"
)

// All allowed values of RoomCodeCategoryType enum
var AllowedRoomCodeCategoryTypeEnumValues = []RoomCodeCategoryType{
	"RoomType",
	"RoomClass",
}

func (v *RoomCodeCategoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoomCodeCategoryType(value)
	for _, existing := range AllowedRoomCodeCategoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoomCodeCategoryType", value)
}

// NewRoomCodeCategoryTypeFromValue returns a pointer to a valid RoomCodeCategoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoomCodeCategoryTypeFromValue(v string) (*RoomCodeCategoryType, error) {
	ev := RoomCodeCategoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoomCodeCategoryType: valid values are %v", v, AllowedRoomCodeCategoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoomCodeCategoryType) IsValid() bool {
	for _, existing := range AllowedRoomCodeCategoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roomCodeCategoryType value
func (v RoomCodeCategoryType) Ptr() *RoomCodeCategoryType {
	return &v
}

type NullableRoomCodeCategoryType struct {
	value *RoomCodeCategoryType
	isSet bool
}

func (v NullableRoomCodeCategoryType) Get() *RoomCodeCategoryType {
	return v.value
}

func (v *NullableRoomCodeCategoryType) Set(val *RoomCodeCategoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomCodeCategoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomCodeCategoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomCodeCategoryType(val *RoomCodeCategoryType) *NullableRoomCodeCategoryType {
	return &NullableRoomCodeCategoryType{value: val, isSet: true}
}

func (v NullableRoomCodeCategoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomCodeCategoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

