/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the BlockStatusStatisticType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockStatusStatisticType{}

// BlockStatusStatisticType Contains summary statistic for a block on a particular statistic date.
type BlockStatusStatisticType struct {
	// Unit type to hold statistic code and value pair.
	StatusSummaryStatistic []StatisticUnitType `json:"statusSummaryStatistic,omitempty"`
	// Date of the statistic.
	StatisticDate *string `json:"statisticDate,omitempty"`
}

// NewBlockStatusStatisticType instantiates a new BlockStatusStatisticType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockStatusStatisticType() *BlockStatusStatisticType {
	this := BlockStatusStatisticType{}
	return &this
}

// NewBlockStatusStatisticTypeWithDefaults instantiates a new BlockStatusStatisticType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockStatusStatisticTypeWithDefaults() *BlockStatusStatisticType {
	this := BlockStatusStatisticType{}
	return &this
}

// GetStatusSummaryStatistic returns the StatusSummaryStatistic field value if set, zero value otherwise.
func (o *BlockStatusStatisticType) GetStatusSummaryStatistic() []StatisticUnitType {
	if o == nil || IsNil(o.StatusSummaryStatistic) {
		var ret []StatisticUnitType
		return ret
	}
	return o.StatusSummaryStatistic
}

// GetStatusSummaryStatisticOk returns a tuple with the StatusSummaryStatistic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusStatisticType) GetStatusSummaryStatisticOk() ([]StatisticUnitType, bool) {
	if o == nil || IsNil(o.StatusSummaryStatistic) {
		return nil, false
	}
	return o.StatusSummaryStatistic, true
}

// HasStatusSummaryStatistic returns a boolean if a field has been set.
func (o *BlockStatusStatisticType) HasStatusSummaryStatistic() bool {
	if o != nil && !IsNil(o.StatusSummaryStatistic) {
		return true
	}

	return false
}

// SetStatusSummaryStatistic gets a reference to the given []StatisticUnitType and assigns it to the StatusSummaryStatistic field.
func (o *BlockStatusStatisticType) SetStatusSummaryStatistic(v []StatisticUnitType) {
	o.StatusSummaryStatistic = v
}

// GetStatisticDate returns the StatisticDate field value if set, zero value otherwise.
func (o *BlockStatusStatisticType) GetStatisticDate() string {
	if o == nil || IsNil(o.StatisticDate) {
		var ret string
		return ret
	}
	return *o.StatisticDate
}

// GetStatisticDateOk returns a tuple with the StatisticDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusStatisticType) GetStatisticDateOk() (*string, bool) {
	if o == nil || IsNil(o.StatisticDate) {
		return nil, false
	}
	return o.StatisticDate, true
}

// HasStatisticDate returns a boolean if a field has been set.
func (o *BlockStatusStatisticType) HasStatisticDate() bool {
	if o != nil && !IsNil(o.StatisticDate) {
		return true
	}

	return false
}

// SetStatisticDate gets a reference to the given string and assigns it to the StatisticDate field.
func (o *BlockStatusStatisticType) SetStatisticDate(v string) {
	o.StatisticDate = &v
}

func (o BlockStatusStatisticType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockStatusStatisticType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StatusSummaryStatistic) {
		toSerialize["statusSummaryStatistic"] = o.StatusSummaryStatistic
	}
	if !IsNil(o.StatisticDate) {
		toSerialize["statisticDate"] = o.StatisticDate
	}
	return toSerialize, nil
}

type NullableBlockStatusStatisticType struct {
	value *BlockStatusStatisticType
	isSet bool
}

func (v NullableBlockStatusStatisticType) Get() *BlockStatusStatisticType {
	return v.value
}

func (v *NullableBlockStatusStatisticType) Set(val *BlockStatusStatisticType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatusStatisticType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatusStatisticType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatusStatisticType(val *BlockStatusStatisticType) *NullableBlockStatusStatisticType {
	return &NullableBlockStatusStatisticType{value: val, isSet: true}
}

func (v NullableBlockStatusStatisticType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatusStatisticType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


