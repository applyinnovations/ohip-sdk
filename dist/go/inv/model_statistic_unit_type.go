/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the StatisticUnitType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatisticUnitType{}

// StatisticUnitType Unit type to hold statistic code and value pair e.g. [code - value] [Definite - 20] [Sales Allowance - 30] and its sub units.
type StatisticUnitType struct {
	// Code of the statistic unit.
	Code *string `json:"code,omitempty"`
	// Statistic summary for a particular status for a particular property
	PropertyBookingSummaryStatistics []PropertyStatisticUnitType `json:"propertyBookingSummaryStatistics,omitempty"`
	// Value of the statistic unit.
	Value *string `json:"value,omitempty"`
}

// NewStatisticUnitType instantiates a new StatisticUnitType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatisticUnitType() *StatisticUnitType {
	this := StatisticUnitType{}
	return &this
}

// NewStatisticUnitTypeWithDefaults instantiates a new StatisticUnitType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticUnitTypeWithDefaults() *StatisticUnitType {
	this := StatisticUnitType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *StatisticUnitType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticUnitType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *StatisticUnitType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *StatisticUnitType) SetCode(v string) {
	o.Code = &v
}

// GetPropertyBookingSummaryStatistics returns the PropertyBookingSummaryStatistics field value if set, zero value otherwise.
func (o *StatisticUnitType) GetPropertyBookingSummaryStatistics() []PropertyStatisticUnitType {
	if o == nil || IsNil(o.PropertyBookingSummaryStatistics) {
		var ret []PropertyStatisticUnitType
		return ret
	}
	return o.PropertyBookingSummaryStatistics
}

// GetPropertyBookingSummaryStatisticsOk returns a tuple with the PropertyBookingSummaryStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticUnitType) GetPropertyBookingSummaryStatisticsOk() ([]PropertyStatisticUnitType, bool) {
	if o == nil || IsNil(o.PropertyBookingSummaryStatistics) {
		return nil, false
	}
	return o.PropertyBookingSummaryStatistics, true
}

// HasPropertyBookingSummaryStatistics returns a boolean if a field has been set.
func (o *StatisticUnitType) HasPropertyBookingSummaryStatistics() bool {
	if o != nil && !IsNil(o.PropertyBookingSummaryStatistics) {
		return true
	}

	return false
}

// SetPropertyBookingSummaryStatistics gets a reference to the given []PropertyStatisticUnitType and assigns it to the PropertyBookingSummaryStatistics field.
func (o *StatisticUnitType) SetPropertyBookingSummaryStatistics(v []PropertyStatisticUnitType) {
	o.PropertyBookingSummaryStatistics = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *StatisticUnitType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticUnitType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *StatisticUnitType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *StatisticUnitType) SetValue(v string) {
	o.Value = &v
}

func (o StatisticUnitType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatisticUnitType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.PropertyBookingSummaryStatistics) {
		toSerialize["propertyBookingSummaryStatistics"] = o.PropertyBookingSummaryStatistics
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableStatisticUnitType struct {
	value *StatisticUnitType
	isSet bool
}

func (v NullableStatisticUnitType) Get() *StatisticUnitType {
	return v.value
}

func (v *NullableStatisticUnitType) Set(val *StatisticUnitType) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticUnitType) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticUnitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticUnitType(val *StatisticUnitType) *NullableStatisticUnitType {
	return &NullableStatisticUnitType{value: val, isSet: true}
}

func (v NullableStatisticUnitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticUnitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


