/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the HoldItemInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HoldItemInfoType{}

// HoldItemInfoType Information about an item inventory that is requested for hold.
type HoldItemInfoType struct {
	// Number of items to hold.
	Count *int32 `json:"count,omitempty"`
	// Item Code to hold.
	ItemCode *string `json:"itemCode,omitempty"`
	ItemId *UniqueIDType `json:"itemId,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewHoldItemInfoType instantiates a new HoldItemInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHoldItemInfoType() *HoldItemInfoType {
	this := HoldItemInfoType{}
	return &this
}

// NewHoldItemInfoTypeWithDefaults instantiates a new HoldItemInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHoldItemInfoTypeWithDefaults() *HoldItemInfoType {
	this := HoldItemInfoType{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *HoldItemInfoType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldItemInfoType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *HoldItemInfoType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *HoldItemInfoType) SetCount(v int32) {
	o.Count = &v
}

// GetItemCode returns the ItemCode field value if set, zero value otherwise.
func (o *HoldItemInfoType) GetItemCode() string {
	if o == nil || IsNil(o.ItemCode) {
		var ret string
		return ret
	}
	return *o.ItemCode
}

// GetItemCodeOk returns a tuple with the ItemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldItemInfoType) GetItemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCode) {
		return nil, false
	}
	return o.ItemCode, true
}

// HasItemCode returns a boolean if a field has been set.
func (o *HoldItemInfoType) HasItemCode() bool {
	if o != nil && !IsNil(o.ItemCode) {
		return true
	}

	return false
}

// SetItemCode gets a reference to the given string and assigns it to the ItemCode field.
func (o *HoldItemInfoType) SetItemCode(v string) {
	o.ItemCode = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *HoldItemInfoType) GetItemId() UniqueIDType {
	if o == nil || IsNil(o.ItemId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldItemInfoType) GetItemIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *HoldItemInfoType) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given UniqueIDType and assigns it to the ItemId field.
func (o *HoldItemInfoType) SetItemId(v UniqueIDType) {
	o.ItemId = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *HoldItemInfoType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HoldItemInfoType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *HoldItemInfoType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *HoldItemInfoType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o HoldItemInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HoldItemInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.ItemCode) {
		toSerialize["itemCode"] = o.ItemCode
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableHoldItemInfoType struct {
	value *HoldItemInfoType
	isSet bool
}

func (v NullableHoldItemInfoType) Get() *HoldItemInfoType {
	return v.value
}

func (v *NullableHoldItemInfoType) Set(val *HoldItemInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableHoldItemInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableHoldItemInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHoldItemInfoType(val *HoldItemInfoType) *NullableHoldItemInfoType {
	return &NullableHoldItemInfoType{value: val, isSet: true}
}

func (v NullableHoldItemInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHoldItemInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


