/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the InventoryLevelCountsListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryLevelCountsListType{}

// InventoryLevelCountsListType Collection of Inventory counts for the date ranges.
type InventoryLevelCountsListType struct {
	// Collection of Inventory counts for the date ranges.
	InventoryCounts []InventoryCountsType `json:"inventoryCounts,omitempty"`
	// Inventory Group/Level code.
	Code *string `json:"code,omitempty"`
	// Integer Group/Level order sequence number.
	Sequence *int32 `json:"sequence,omitempty"`
}

// NewInventoryLevelCountsListType instantiates a new InventoryLevelCountsListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryLevelCountsListType() *InventoryLevelCountsListType {
	this := InventoryLevelCountsListType{}
	return &this
}

// NewInventoryLevelCountsListTypeWithDefaults instantiates a new InventoryLevelCountsListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryLevelCountsListTypeWithDefaults() *InventoryLevelCountsListType {
	this := InventoryLevelCountsListType{}
	return &this
}

// GetInventoryCounts returns the InventoryCounts field value if set, zero value otherwise.
func (o *InventoryLevelCountsListType) GetInventoryCounts() []InventoryCountsType {
	if o == nil || IsNil(o.InventoryCounts) {
		var ret []InventoryCountsType
		return ret
	}
	return o.InventoryCounts
}

// GetInventoryCountsOk returns a tuple with the InventoryCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLevelCountsListType) GetInventoryCountsOk() ([]InventoryCountsType, bool) {
	if o == nil || IsNil(o.InventoryCounts) {
		return nil, false
	}
	return o.InventoryCounts, true
}

// HasInventoryCounts returns a boolean if a field has been set.
func (o *InventoryLevelCountsListType) HasInventoryCounts() bool {
	if o != nil && !IsNil(o.InventoryCounts) {
		return true
	}

	return false
}

// SetInventoryCounts gets a reference to the given []InventoryCountsType and assigns it to the InventoryCounts field.
func (o *InventoryLevelCountsListType) SetInventoryCounts(v []InventoryCountsType) {
	o.InventoryCounts = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *InventoryLevelCountsListType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLevelCountsListType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *InventoryLevelCountsListType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *InventoryLevelCountsListType) SetCode(v string) {
	o.Code = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *InventoryLevelCountsListType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryLevelCountsListType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *InventoryLevelCountsListType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *InventoryLevelCountsListType) SetSequence(v int32) {
	o.Sequence = &v
}

func (o InventoryLevelCountsListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryLevelCountsListType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InventoryCounts) {
		toSerialize["inventoryCounts"] = o.InventoryCounts
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableInventoryLevelCountsListType struct {
	value *InventoryLevelCountsListType
	isSet bool
}

func (v NullableInventoryLevelCountsListType) Get() *InventoryLevelCountsListType {
	return v.value
}

func (v *NullableInventoryLevelCountsListType) Set(val *InventoryLevelCountsListType) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryLevelCountsListType) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryLevelCountsListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryLevelCountsListType(val *InventoryLevelCountsListType) *NullableInventoryLevelCountsListType {
	return &NullableInventoryLevelCountsListType{value: val, isSet: true}
}

func (v NullableInventoryLevelCountsListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryLevelCountsListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


