/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
	"fmt"
)

// HeldByType Type of the entity that is requesting for the item hold.
type HeldByType string

// List of heldByType
const (
	HELDBYTYPE_EVENT HeldByType = "Event"
	HELDBYTYPE_RESERVATION HeldByType = "Reservation"
	HELDBYTYPE_ALLOTMENT HeldByType = "Allotment"
)

// All allowed values of HeldByType enum
var AllowedHeldByTypeEnumValues = []HeldByType{
	"Event",
	"Reservation",
	"Allotment",
}

func (v *HeldByType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HeldByType(value)
	for _, existing := range AllowedHeldByTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HeldByType", value)
}

// NewHeldByTypeFromValue returns a pointer to a valid HeldByType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHeldByTypeFromValue(v string) (*HeldByType, error) {
	ev := HeldByType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HeldByType: valid values are %v", v, AllowedHeldByTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HeldByType) IsValid() bool {
	for _, existing := range AllowedHeldByTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to heldByType value
func (v HeldByType) Ptr() *HeldByType {
	return &v
}

type NullableHeldByType struct {
	value *HeldByType
	isSet bool
}

func (v NullableHeldByType) Get() *HeldByType {
	return v.value
}

func (v *NullableHeldByType) Set(val *HeldByType) {
	v.value = val
	v.isSet = true
}

func (v NullableHeldByType) IsSet() bool {
	return v.isSet
}

func (v *NullableHeldByType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeldByType(val *HeldByType) *NullableHeldByType {
	return &NullableHeldByType{value: val, isSet: true}
}

func (v NullableHeldByType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeldByType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

