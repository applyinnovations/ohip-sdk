/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// InventoryApiService InventoryApi service
type InventoryApiService service

type InventoryApiGetHotelInventoryRequest struct {
	ctx context.Context
	ApiService *InventoryApiService
	hotelId string
	dateRangeStart *string
	dateRangeEnd *string
	roomCountRequested *int32
	authorization *string
	xAppKey *string
	xHotelid *string
	includeTentativeInventory *bool
	dailyInventory *bool
	houseLevel *bool
	roomTypes *[]string
	roomClasses *[]string
	xExternalsystem *string
	acceptLanguage *string
}

func (r InventoryApiGetHotelInventoryRequest) DateRangeStart(dateRangeStart string) InventoryApiGetHotelInventoryRequest {
	r.dateRangeStart = &dateRangeStart
	return r
}

func (r InventoryApiGetHotelInventoryRequest) DateRangeEnd(dateRangeEnd string) InventoryApiGetHotelInventoryRequest {
	r.dateRangeEnd = &dateRangeEnd
	return r
}

// Number of rooms requested.
func (r InventoryApiGetHotelInventoryRequest) RoomCountRequested(roomCountRequested int32) InventoryApiGetHotelInventoryRequest {
	r.roomCountRequested = &roomCountRequested
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r InventoryApiGetHotelInventoryRequest) Authorization(authorization string) InventoryApiGetHotelInventoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r InventoryApiGetHotelInventoryRequest) XAppKey(xAppKey string) InventoryApiGetHotelInventoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the endDate user is logged in
func (r InventoryApiGetHotelInventoryRequest) XHotelid(xHotelid string) InventoryApiGetHotelInventoryRequest {
	r.xHotelid = &xHotelid
	return r
}

// If set to true, includes non-deduct/Tentative rooms for a date range.
func (r InventoryApiGetHotelInventoryRequest) IncludeTentativeInventory(includeTentativeInventory bool) InventoryApiGetHotelInventoryRequest {
	r.includeTentativeInventory = &includeTentativeInventory
	return r
}

// If false minimum inventory for the date range is requested, otherwise inventory is requested for every day.
func (r InventoryApiGetHotelInventoryRequest) DailyInventory(dailyInventory bool) InventoryApiGetHotelInventoryRequest {
	r.dailyInventory = &dailyInventory
	return r
}

// Indicates that House level inventory is requested.
func (r InventoryApiGetHotelInventoryRequest) HouseLevel(houseLevel bool) InventoryApiGetHotelInventoryRequest {
	r.houseLevel = &houseLevel
	return r
}

// Room Type Code.
func (r InventoryApiGetHotelInventoryRequest) RoomTypes(roomTypes []string) InventoryApiGetHotelInventoryRequest {
	r.roomTypes = &roomTypes
	return r
}

// Room Class Code.
func (r InventoryApiGetHotelInventoryRequest) RoomClasses(roomClasses []string) InventoryApiGetHotelInventoryRequest {
	r.roomClasses = &roomClasses
	return r
}

// External system code.
func (r InventoryApiGetHotelInventoryRequest) XExternalsystem(xExternalsystem string) InventoryApiGetHotelInventoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r InventoryApiGetHotelInventoryRequest) AcceptLanguage(acceptLanguage string) InventoryApiGetHotelInventoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r InventoryApiGetHotelInventoryRequest) Execute() (*HotelInventory, *http.Response, error) {
	return r.ApiService.GetHotelInventoryExecute(r)
}

/*
GetHotelInventory Get hotel inventory

You can use this API to retrieve the inventory for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. <p><strong>OperationId:</strong>getHotelInventory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where hotel inventory is searched.
 @return InventoryApiGetHotelInventoryRequest
*/
func (a *InventoryApiService) GetHotelInventory(ctx context.Context, hotelId string) InventoryApiGetHotelInventoryRequest {
	return InventoryApiGetHotelInventoryRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return HotelInventory
func (a *InventoryApiService) GetHotelInventoryExecute(r InventoryApiGetHotelInventoryRequest) (*HotelInventory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HotelInventory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryApiService.GetHotelInventory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/hotelInventory"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "dateRangeStart", r.dateRangeStart, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "dateRangeEnd", r.dateRangeEnd, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "roomCountRequested", r.roomCountRequested, "")
	if r.includeTentativeInventory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTentativeInventory", r.includeTentativeInventory, "")
	}
	if r.dailyInventory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dailyInventory", r.dailyInventory, "")
	}
	if r.houseLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "houseLevel", r.houseLevel, "")
	}
	if r.roomTypes != nil {
		t := *r.roomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", t, "multi")
		}
	}
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InventoryApiGetItemInventoryRequest struct {
	ctx context.Context
	ApiService *InventoryApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	startDate *string
	endDate *string
	duration *string
	endTime *string
	startTime *string
	itemClass *string
	itemPool *[]string
	itemCode *[]string
	defaultDuration *int32
	fixedCharge *bool
	outsideStay *bool
	requiredForBooking *bool
	sellInEvent *bool
	sellInReservation *bool
	sellSeparate *bool
	welcomeOffer *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r InventoryApiGetItemInventoryRequest) Authorization(authorization string) InventoryApiGetItemInventoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r InventoryApiGetItemInventoryRequest) XAppKey(xAppKey string) InventoryApiGetItemInventoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the endDate user is logged in
func (r InventoryApiGetItemInventoryRequest) XHotelid(xHotelid string) InventoryApiGetItemInventoryRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r InventoryApiGetItemInventoryRequest) StartDate(startDate string) InventoryApiGetItemInventoryRequest {
	r.startDate = &startDate
	return r
}

func (r InventoryApiGetItemInventoryRequest) EndDate(endDate string) InventoryApiGetItemInventoryRequest {
	r.endDate = &endDate
	return r
}

func (r InventoryApiGetItemInventoryRequest) Duration(duration string) InventoryApiGetItemInventoryRequest {
	r.duration = &duration
	return r
}

// End Time of the Time window.
func (r InventoryApiGetItemInventoryRequest) EndTime(endTime string) InventoryApiGetItemInventoryRequest {
	r.endTime = &endTime
	return r
}

// Start Time of the Time window.
func (r InventoryApiGetItemInventoryRequest) StartTime(startTime string) InventoryApiGetItemInventoryRequest {
	r.startTime = &startTime
	return r
}

// Item Class to filter the Items/Item Pools in the response.
func (r InventoryApiGetItemInventoryRequest) ItemClass(itemClass string) InventoryApiGetItemInventoryRequest {
	r.itemClass = &itemClass
	return r
}

func (r InventoryApiGetItemInventoryRequest) ItemPool(itemPool []string) InventoryApiGetItemInventoryRequest {
	r.itemPool = &itemPool
	return r
}

func (r InventoryApiGetItemInventoryRequest) ItemCode(itemCode []string) InventoryApiGetItemInventoryRequest {
	r.itemCode = &itemCode
	return r
}

// Define the default duration in days when booking the item.
func (r InventoryApiGetItemInventoryRequest) DefaultDuration(defaultDuration int32) InventoryApiGetItemInventoryRequest {
	r.defaultDuration = &defaultDuration
	return r
}

// If true indicates that item has fixed charge when it is attached to a reservation.
func (r InventoryApiGetItemInventoryRequest) FixedCharge(fixedCharge bool) InventoryApiGetItemInventoryRequest {
	r.fixedCharge = &fixedCharge
	return r
}

// If true indicates that item could be held outside of the reservation stay days.
func (r InventoryApiGetItemInventoryRequest) OutsideStay(outsideStay bool) InventoryApiGetItemInventoryRequest {
	r.outsideStay = &outsideStay
	return r
}

// If true indicates that item is required for the reservation.
func (r InventoryApiGetItemInventoryRequest) RequiredForBooking(requiredForBooking bool) InventoryApiGetItemInventoryRequest {
	r.requiredForBooking = &requiredForBooking
	return r
}

// If true indicates that item can be sold in event.
func (r InventoryApiGetItemInventoryRequest) SellInEvent(sellInEvent bool) InventoryApiGetItemInventoryRequest {
	r.sellInEvent = &sellInEvent
	return r
}

// If true indicates that item can be sold in reservation.
func (r InventoryApiGetItemInventoryRequest) SellInReservation(sellInReservation bool) InventoryApiGetItemInventoryRequest {
	r.sellInReservation = &sellInReservation
	return r
}

// If true indicates that item is allowed to sell separately.
func (r InventoryApiGetItemInventoryRequest) SellSeparate(sellSeparate bool) InventoryApiGetItemInventoryRequest {
	r.sellSeparate = &sellSeparate
	return r
}

// When set to true will only return items that are Welcome Offer Eligible.
func (r InventoryApiGetItemInventoryRequest) WelcomeOffer(welcomeOffer bool) InventoryApiGetItemInventoryRequest {
	r.welcomeOffer = &welcomeOffer
	return r
}

// External system code.
func (r InventoryApiGetItemInventoryRequest) XExternalsystem(xExternalsystem string) InventoryApiGetItemInventoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r InventoryApiGetItemInventoryRequest) AcceptLanguage(acceptLanguage string) InventoryApiGetItemInventoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r InventoryApiGetItemInventoryRequest) Execute() (*ItemInventory, *http.Response, error) {
	return r.ApiService.GetItemInventoryExecute(r)
}

/*
GetItemInventory Get item inventory

This will fetch a hotels Item inventory for a specified date range that you can provided in the request. <p><strong>OperationId:</strong>getItemInventory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where item inventory is searched.
 @return InventoryApiGetItemInventoryRequest
*/
func (a *InventoryApiService) GetItemInventory(ctx context.Context, hotelId string) InventoryApiGetItemInventoryRequest {
	return InventoryApiGetItemInventoryRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ItemInventory
func (a *InventoryApiService) GetItemInventoryExecute(r InventoryApiGetItemInventoryRequest) (*ItemInventory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ItemInventory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryApiService.GetItemInventory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/itemInventory"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endTime", r.endTime, "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startTime", r.startTime, "")
	}
	if r.itemClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemClass", r.itemClass, "")
	}
	if r.itemPool != nil {
		t := *r.itemPool
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "itemPool", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "itemPool", t, "multi")
		}
	}
	if r.itemCode != nil {
		t := *r.itemCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "itemCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "itemCode", t, "multi")
		}
	}
	if r.defaultDuration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "defaultDuration", r.defaultDuration, "")
	}
	if r.fixedCharge != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fixedCharge", r.fixedCharge, "")
	}
	if r.outsideStay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "outsideStay", r.outsideStay, "")
	}
	if r.requiredForBooking != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requiredForBooking", r.requiredForBooking, "")
	}
	if r.sellInEvent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellInEvent", r.sellInEvent, "")
	}
	if r.sellInReservation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellInReservation", r.sellInReservation, "")
	}
	if r.sellSeparate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellSeparate", r.sellSeparate, "")
	}
	if r.welcomeOffer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "welcomeOffer", r.welcomeOffer, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InventoryApiPostHoldItemInventoryRequest struct {
	ctx context.Context
	ApiService *InventoryApiService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	holdItemInventory *PostHoldItemInventoryRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r InventoryApiPostHoldItemInventoryRequest) Authorization(authorization string) InventoryApiPostHoldItemInventoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partnerâ€™s Application Key
func (r InventoryApiPostHoldItemInventoryRequest) XAppKey(xAppKey string) InventoryApiPostHoldItemInventoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the endDate user is logged in
func (r InventoryApiPostHoldItemInventoryRequest) XHotelid(xHotelid string) InventoryApiPostHoldItemInventoryRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for holding an items inventory/availability.
func (r InventoryApiPostHoldItemInventoryRequest) HoldItemInventory(holdItemInventory PostHoldItemInventoryRequest) InventoryApiPostHoldItemInventoryRequest {
	r.holdItemInventory = &holdItemInventory
	return r
}

// External system code.
func (r InventoryApiPostHoldItemInventoryRequest) XExternalsystem(xExternalsystem string) InventoryApiPostHoldItemInventoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r InventoryApiPostHoldItemInventoryRequest) AcceptLanguage(acceptLanguage string) InventoryApiPostHoldItemInventoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r InventoryApiPostHoldItemInventoryRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostHoldItemInventoryExecute(r)
}

/*
PostHoldItemInventory Hold item inventory

Use this API to hold Item Inventory. <p><strong>OperationId:</strong>postHoldItemInventory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where item inventory is held.
 @return InventoryApiPostHoldItemInventoryRequest
*/
func (a *InventoryApiService) PostHoldItemInventory(ctx context.Context, hotelId string) InventoryApiPostHoldItemInventoryRequest {
	return InventoryApiPostHoldItemInventoryRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *InventoryApiService) PostHoldItemInventoryExecute(r InventoryApiPostHoldItemInventoryRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryApiService.PostHoldItemInventory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/itemInventoryHold"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.holdItemInventory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
