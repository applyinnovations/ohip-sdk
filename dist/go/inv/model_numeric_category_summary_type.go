/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the NumericCategorySummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumericCategorySummaryType{}

// NumericCategorySummaryType This element has count data for each count category such as number of guests, rooms occupied, etc.
type NumericCategorySummaryType struct {
	// The total count for the category in NumericCategoryCode.
	Value *float32 `json:"value,omitempty"`
	// The representation of a numeric category such as Guests : Number of guests, RoomsOcc : Rooms occupied.
	Code *string `json:"code,omitempty"`
}

// NewNumericCategorySummaryType instantiates a new NumericCategorySummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumericCategorySummaryType() *NumericCategorySummaryType {
	this := NumericCategorySummaryType{}
	return &this
}

// NewNumericCategorySummaryTypeWithDefaults instantiates a new NumericCategorySummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumericCategorySummaryTypeWithDefaults() *NumericCategorySummaryType {
	this := NumericCategorySummaryType{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *NumericCategorySummaryType) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumericCategorySummaryType) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *NumericCategorySummaryType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *NumericCategorySummaryType) SetValue(v float32) {
	o.Value = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *NumericCategorySummaryType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumericCategorySummaryType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *NumericCategorySummaryType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *NumericCategorySummaryType) SetCode(v string) {
	o.Code = &v
}

func (o NumericCategorySummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumericCategorySummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableNumericCategorySummaryType struct {
	value *NumericCategorySummaryType
	isSet bool
}

func (v NullableNumericCategorySummaryType) Get() *NumericCategorySummaryType {
	return v.value
}

func (v *NullableNumericCategorySummaryType) Set(val *NumericCategorySummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableNumericCategorySummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableNumericCategorySummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumericCategorySummaryType(val *NumericCategorySummaryType) *NullableNumericCategorySummaryType {
	return &NullableNumericCategorySummaryType{value: val, isSet: true}
}

func (v NullableNumericCategorySummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumericCategorySummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


