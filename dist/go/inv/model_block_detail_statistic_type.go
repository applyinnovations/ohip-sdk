/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the BlockDetailStatisticType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockDetailStatisticType{}

// BlockDetailStatisticType Information and statistic summary for a particular block.
type BlockDetailStatisticType struct {
	BlockInformation *BlockInfoType `json:"blockInformation,omitempty"`
	// Summary statistics of a block for each date.
	BlockStatistics []BlockStatusStatisticType `json:"blockStatistics,omitempty"`
}

// NewBlockDetailStatisticType instantiates a new BlockDetailStatisticType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockDetailStatisticType() *BlockDetailStatisticType {
	this := BlockDetailStatisticType{}
	return &this
}

// NewBlockDetailStatisticTypeWithDefaults instantiates a new BlockDetailStatisticType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockDetailStatisticTypeWithDefaults() *BlockDetailStatisticType {
	this := BlockDetailStatisticType{}
	return &this
}

// GetBlockInformation returns the BlockInformation field value if set, zero value otherwise.
func (o *BlockDetailStatisticType) GetBlockInformation() BlockInfoType {
	if o == nil || IsNil(o.BlockInformation) {
		var ret BlockInfoType
		return ret
	}
	return *o.BlockInformation
}

// GetBlockInformationOk returns a tuple with the BlockInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailStatisticType) GetBlockInformationOk() (*BlockInfoType, bool) {
	if o == nil || IsNil(o.BlockInformation) {
		return nil, false
	}
	return o.BlockInformation, true
}

// HasBlockInformation returns a boolean if a field has been set.
func (o *BlockDetailStatisticType) HasBlockInformation() bool {
	if o != nil && !IsNil(o.BlockInformation) {
		return true
	}

	return false
}

// SetBlockInformation gets a reference to the given BlockInfoType and assigns it to the BlockInformation field.
func (o *BlockDetailStatisticType) SetBlockInformation(v BlockInfoType) {
	o.BlockInformation = &v
}

// GetBlockStatistics returns the BlockStatistics field value if set, zero value otherwise.
func (o *BlockDetailStatisticType) GetBlockStatistics() []BlockStatusStatisticType {
	if o == nil || IsNil(o.BlockStatistics) {
		var ret []BlockStatusStatisticType
		return ret
	}
	return o.BlockStatistics
}

// GetBlockStatisticsOk returns a tuple with the BlockStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockDetailStatisticType) GetBlockStatisticsOk() ([]BlockStatusStatisticType, bool) {
	if o == nil || IsNil(o.BlockStatistics) {
		return nil, false
	}
	return o.BlockStatistics, true
}

// HasBlockStatistics returns a boolean if a field has been set.
func (o *BlockDetailStatisticType) HasBlockStatistics() bool {
	if o != nil && !IsNil(o.BlockStatistics) {
		return true
	}

	return false
}

// SetBlockStatistics gets a reference to the given []BlockStatusStatisticType and assigns it to the BlockStatistics field.
func (o *BlockDetailStatisticType) SetBlockStatistics(v []BlockStatusStatisticType) {
	o.BlockStatistics = v
}

func (o BlockDetailStatisticType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockDetailStatisticType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockInformation) {
		toSerialize["blockInformation"] = o.BlockInformation
	}
	if !IsNil(o.BlockStatistics) {
		toSerialize["blockStatistics"] = o.BlockStatistics
	}
	return toSerialize, nil
}

type NullableBlockDetailStatisticType struct {
	value *BlockDetailStatisticType
	isSet bool
}

func (v NullableBlockDetailStatisticType) Get() *BlockDetailStatisticType {
	return v.value
}

func (v *NullableBlockDetailStatisticType) Set(val *BlockDetailStatisticType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockDetailStatisticType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockDetailStatisticType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockDetailStatisticType(val *BlockDetailStatisticType) *NullableBlockDetailStatisticType {
	return &NullableBlockDetailStatisticType{value: val, isSet: true}
}

func (v NullableBlockDetailStatisticType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockDetailStatisticType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


