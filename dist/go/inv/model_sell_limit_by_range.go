/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the SellLimitByRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SellLimitByRange{}

// SellLimitByRange A Request message that sets sell limit for collection of date ranges for either of the levels House, room type or room class. You can specify the days of the week, number type group and the date range as part of the request.
type SellLimitByRange struct {
	// Contains the sell limits for a given date range to be set.
	SellLimitsByDateRange []SellLimitByDateRangeType `json:"sellLimitsByDateRange,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewSellLimitByRange instantiates a new SellLimitByRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSellLimitByRange() *SellLimitByRange {
	this := SellLimitByRange{}
	return &this
}

// NewSellLimitByRangeWithDefaults instantiates a new SellLimitByRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellLimitByRangeWithDefaults() *SellLimitByRange {
	this := SellLimitByRange{}
	return &this
}

// GetSellLimitsByDateRange returns the SellLimitsByDateRange field value if set, zero value otherwise.
func (o *SellLimitByRange) GetSellLimitsByDateRange() []SellLimitByDateRangeType {
	if o == nil || IsNil(o.SellLimitsByDateRange) {
		var ret []SellLimitByDateRangeType
		return ret
	}
	return o.SellLimitsByDateRange
}

// GetSellLimitsByDateRangeOk returns a tuple with the SellLimitsByDateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellLimitByRange) GetSellLimitsByDateRangeOk() ([]SellLimitByDateRangeType, bool) {
	if o == nil || IsNil(o.SellLimitsByDateRange) {
		return nil, false
	}
	return o.SellLimitsByDateRange, true
}

// HasSellLimitsByDateRange returns a boolean if a field has been set.
func (o *SellLimitByRange) HasSellLimitsByDateRange() bool {
	if o != nil && !IsNil(o.SellLimitsByDateRange) {
		return true
	}

	return false
}

// SetSellLimitsByDateRange gets a reference to the given []SellLimitByDateRangeType and assigns it to the SellLimitsByDateRange field.
func (o *SellLimitByRange) SetSellLimitsByDateRange(v []SellLimitByDateRangeType) {
	o.SellLimitsByDateRange = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SellLimitByRange) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellLimitByRange) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SellLimitByRange) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *SellLimitByRange) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o SellLimitByRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SellLimitByRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SellLimitsByDateRange) {
		toSerialize["sellLimitsByDateRange"] = o.SellLimitsByDateRange
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableSellLimitByRange struct {
	value *SellLimitByRange
	isSet bool
}

func (v NullableSellLimitByRange) Get() *SellLimitByRange {
	return v.value
}

func (v *NullableSellLimitByRange) Set(val *SellLimitByRange) {
	v.value = val
	v.isSet = true
}

func (v NullableSellLimitByRange) IsSet() bool {
	return v.isSet
}

func (v *NullableSellLimitByRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSellLimitByRange(val *SellLimitByRange) *NullableSellLimitByRange {
	return &NullableSellLimitByRange{value: val, isSet: true}
}

func (v NullableSellLimitByRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSellLimitByRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


