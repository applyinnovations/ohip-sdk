/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the PutItemInventoryHoldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutItemInventoryHoldRequest{}

// PutItemInventoryHoldRequest struct for PutItemInventoryHoldRequest
type PutItemInventoryHoldRequest struct {
	HeldBy *HeldByType `json:"heldBy,omitempty"`
	HeldById *UniqueIDType `json:"heldById,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	ItemCode *string `json:"itemCode,omitempty"`
	// ID reference for the one who hold the item. Used for releasing/reserving the item afterwards.
	ItemHoldId *float32 `json:"itemHoldId,omitempty"`
	ItemId *UniqueIDType `json:"itemId,omitempty"`
	// Collection of items for releasing an Items Inventory hold.
	ReleaseItemsInventoryHoldInfo []ReleaseItemInventoryHoldType `json:"releaseItemsInventoryHoldInfo,omitempty"`
	ReserveDates *TimeSpanType `json:"reserveDates,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewPutItemInventoryHoldRequest instantiates a new PutItemInventoryHoldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutItemInventoryHoldRequest() *PutItemInventoryHoldRequest {
	this := PutItemInventoryHoldRequest{}
	return &this
}

// NewPutItemInventoryHoldRequestWithDefaults instantiates a new PutItemInventoryHoldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutItemInventoryHoldRequestWithDefaults() *PutItemInventoryHoldRequest {
	this := PutItemInventoryHoldRequest{}
	return &this
}

// GetHeldBy returns the HeldBy field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetHeldBy() HeldByType {
	if o == nil || IsNil(o.HeldBy) {
		var ret HeldByType
		return ret
	}
	return *o.HeldBy
}

// GetHeldByOk returns a tuple with the HeldBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetHeldByOk() (*HeldByType, bool) {
	if o == nil || IsNil(o.HeldBy) {
		return nil, false
	}
	return o.HeldBy, true
}

// HasHeldBy returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasHeldBy() bool {
	if o != nil && !IsNil(o.HeldBy) {
		return true
	}

	return false
}

// SetHeldBy gets a reference to the given HeldByType and assigns it to the HeldBy field.
func (o *PutItemInventoryHoldRequest) SetHeldBy(v HeldByType) {
	o.HeldBy = &v
}

// GetHeldById returns the HeldById field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetHeldById() UniqueIDType {
	if o == nil || IsNil(o.HeldById) {
		var ret UniqueIDType
		return ret
	}
	return *o.HeldById
}

// GetHeldByIdOk returns a tuple with the HeldById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetHeldByIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.HeldById) {
		return nil, false
	}
	return o.HeldById, true
}

// HasHeldById returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasHeldById() bool {
	if o != nil && !IsNil(o.HeldById) {
		return true
	}

	return false
}

// SetHeldById gets a reference to the given UniqueIDType and assigns it to the HeldById field.
func (o *PutItemInventoryHoldRequest) SetHeldById(v UniqueIDType) {
	o.HeldById = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PutItemInventoryHoldRequest) SetHotelId(v string) {
	o.HotelId = &v
}

// GetItemCode returns the ItemCode field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetItemCode() string {
	if o == nil || IsNil(o.ItemCode) {
		var ret string
		return ret
	}
	return *o.ItemCode
}

// GetItemCodeOk returns a tuple with the ItemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetItemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCode) {
		return nil, false
	}
	return o.ItemCode, true
}

// HasItemCode returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasItemCode() bool {
	if o != nil && !IsNil(o.ItemCode) {
		return true
	}

	return false
}

// SetItemCode gets a reference to the given string and assigns it to the ItemCode field.
func (o *PutItemInventoryHoldRequest) SetItemCode(v string) {
	o.ItemCode = &v
}

// GetItemHoldId returns the ItemHoldId field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetItemHoldId() float32 {
	if o == nil || IsNil(o.ItemHoldId) {
		var ret float32
		return ret
	}
	return *o.ItemHoldId
}

// GetItemHoldIdOk returns a tuple with the ItemHoldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetItemHoldIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ItemHoldId) {
		return nil, false
	}
	return o.ItemHoldId, true
}

// HasItemHoldId returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasItemHoldId() bool {
	if o != nil && !IsNil(o.ItemHoldId) {
		return true
	}

	return false
}

// SetItemHoldId gets a reference to the given float32 and assigns it to the ItemHoldId field.
func (o *PutItemInventoryHoldRequest) SetItemHoldId(v float32) {
	o.ItemHoldId = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetItemId() UniqueIDType {
	if o == nil || IsNil(o.ItemId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetItemIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given UniqueIDType and assigns it to the ItemId field.
func (o *PutItemInventoryHoldRequest) SetItemId(v UniqueIDType) {
	o.ItemId = &v
}

// GetReleaseItemsInventoryHoldInfo returns the ReleaseItemsInventoryHoldInfo field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetReleaseItemsInventoryHoldInfo() []ReleaseItemInventoryHoldType {
	if o == nil || IsNil(o.ReleaseItemsInventoryHoldInfo) {
		var ret []ReleaseItemInventoryHoldType
		return ret
	}
	return o.ReleaseItemsInventoryHoldInfo
}

// GetReleaseItemsInventoryHoldInfoOk returns a tuple with the ReleaseItemsInventoryHoldInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetReleaseItemsInventoryHoldInfoOk() ([]ReleaseItemInventoryHoldType, bool) {
	if o == nil || IsNil(o.ReleaseItemsInventoryHoldInfo) {
		return nil, false
	}
	return o.ReleaseItemsInventoryHoldInfo, true
}

// HasReleaseItemsInventoryHoldInfo returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasReleaseItemsInventoryHoldInfo() bool {
	if o != nil && !IsNil(o.ReleaseItemsInventoryHoldInfo) {
		return true
	}

	return false
}

// SetReleaseItemsInventoryHoldInfo gets a reference to the given []ReleaseItemInventoryHoldType and assigns it to the ReleaseItemsInventoryHoldInfo field.
func (o *PutItemInventoryHoldRequest) SetReleaseItemsInventoryHoldInfo(v []ReleaseItemInventoryHoldType) {
	o.ReleaseItemsInventoryHoldInfo = v
}

// GetReserveDates returns the ReserveDates field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetReserveDates() TimeSpanType {
	if o == nil || IsNil(o.ReserveDates) {
		var ret TimeSpanType
		return ret
	}
	return *o.ReserveDates
}

// GetReserveDatesOk returns a tuple with the ReserveDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetReserveDatesOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.ReserveDates) {
		return nil, false
	}
	return o.ReserveDates, true
}

// HasReserveDates returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasReserveDates() bool {
	if o != nil && !IsNil(o.ReserveDates) {
		return true
	}

	return false
}

// SetReserveDates gets a reference to the given TimeSpanType and assigns it to the ReserveDates field.
func (o *PutItemInventoryHoldRequest) SetReserveDates(v TimeSpanType) {
	o.ReserveDates = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PutItemInventoryHoldRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutItemInventoryHoldRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PutItemInventoryHoldRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *PutItemInventoryHoldRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o PutItemInventoryHoldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutItemInventoryHoldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HeldBy) {
		toSerialize["heldBy"] = o.HeldBy
	}
	if !IsNil(o.HeldById) {
		toSerialize["heldById"] = o.HeldById
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ItemCode) {
		toSerialize["itemCode"] = o.ItemCode
	}
	if !IsNil(o.ItemHoldId) {
		toSerialize["itemHoldId"] = o.ItemHoldId
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.ReleaseItemsInventoryHoldInfo) {
		toSerialize["releaseItemsInventoryHoldInfo"] = o.ReleaseItemsInventoryHoldInfo
	}
	if !IsNil(o.ReserveDates) {
		toSerialize["reserveDates"] = o.ReserveDates
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePutItemInventoryHoldRequest struct {
	value *PutItemInventoryHoldRequest
	isSet bool
}

func (v NullablePutItemInventoryHoldRequest) Get() *PutItemInventoryHoldRequest {
	return v.value
}

func (v *NullablePutItemInventoryHoldRequest) Set(val *PutItemInventoryHoldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutItemInventoryHoldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutItemInventoryHoldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutItemInventoryHoldRequest(val *PutItemInventoryHoldRequest) *NullablePutItemInventoryHoldRequest {
	return &NullablePutItemInventoryHoldRequest{value: val, isSet: true}
}

func (v NullablePutItemInventoryHoldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutItemInventoryHoldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


