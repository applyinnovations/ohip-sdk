/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the DailyItemInventoryCountsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyItemInventoryCountsType{}

// DailyItemInventoryCountsType Inventory counts for the given date.
type DailyItemInventoryCountsType struct {
	// Available Item count.
	Available *int32 `json:"available,omitempty"`
	// Date of the item inventory.
	Date *string `json:"date,omitempty"`
	// Total Item count.
	Total *int32 `json:"total,omitempty"`
}

// NewDailyItemInventoryCountsType instantiates a new DailyItemInventoryCountsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyItemInventoryCountsType() *DailyItemInventoryCountsType {
	this := DailyItemInventoryCountsType{}
	return &this
}

// NewDailyItemInventoryCountsTypeWithDefaults instantiates a new DailyItemInventoryCountsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyItemInventoryCountsTypeWithDefaults() *DailyItemInventoryCountsType {
	this := DailyItemInventoryCountsType{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *DailyItemInventoryCountsType) GetAvailable() int32 {
	if o == nil || IsNil(o.Available) {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyItemInventoryCountsType) GetAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *DailyItemInventoryCountsType) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *DailyItemInventoryCountsType) SetAvailable(v int32) {
	o.Available = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DailyItemInventoryCountsType) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyItemInventoryCountsType) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DailyItemInventoryCountsType) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *DailyItemInventoryCountsType) SetDate(v string) {
	o.Date = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DailyItemInventoryCountsType) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyItemInventoryCountsType) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DailyItemInventoryCountsType) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *DailyItemInventoryCountsType) SetTotal(v int32) {
	o.Total = &v
}

func (o DailyItemInventoryCountsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyItemInventoryCountsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableDailyItemInventoryCountsType struct {
	value *DailyItemInventoryCountsType
	isSet bool
}

func (v NullableDailyItemInventoryCountsType) Get() *DailyItemInventoryCountsType {
	return v.value
}

func (v *NullableDailyItemInventoryCountsType) Set(val *DailyItemInventoryCountsType) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyItemInventoryCountsType) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyItemInventoryCountsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyItemInventoryCountsType(val *DailyItemInventoryCountsType) *NullableDailyItemInventoryCountsType {
	return &NullableDailyItemInventoryCountsType{value: val, isSet: true}
}

func (v NullableDailyItemInventoryCountsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyItemInventoryCountsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


