/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
	"fmt"
)

// StatusColorType Status code color configuration type.
type StatusColorType string

// List of statusColorType
const (
	STATUSCOLORTYPE_WHITE StatusColorType = "White"
	STATUSCOLORTYPE_RED StatusColorType = "Red"
	STATUSCOLORTYPE_BLUE StatusColorType = "Blue"
	STATUSCOLORTYPE_CYAN StatusColorType = "Cyan"
	STATUSCOLORTYPE_MAGENTA StatusColorType = "Magenta"
	STATUSCOLORTYPE_GREEN StatusColorType = "Green"
	STATUSCOLORTYPE_BROWN StatusColorType = "Brown"
	STATUSCOLORTYPE_BLACK StatusColorType = "Black"
	STATUSCOLORTYPE_YELLOW StatusColorType = "Yellow"
	STATUSCOLORTYPE_GRAY StatusColorType = "Gray"
)

// All allowed values of StatusColorType enum
var AllowedStatusColorTypeEnumValues = []StatusColorType{
	"White",
	"Red",
	"Blue",
	"Cyan",
	"Magenta",
	"Green",
	"Brown",
	"Black",
	"Yellow",
	"Gray",
}

func (v *StatusColorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusColorType(value)
	for _, existing := range AllowedStatusColorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusColorType", value)
}

// NewStatusColorTypeFromValue returns a pointer to a valid StatusColorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusColorTypeFromValue(v string) (*StatusColorType, error) {
	ev := StatusColorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusColorType: valid values are %v", v, AllowedStatusColorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusColorType) IsValid() bool {
	for _, existing := range AllowedStatusColorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to statusColorType value
func (v StatusColorType) Ptr() *StatusColorType {
	return &v
}

type NullableStatusColorType struct {
	value *StatusColorType
	isSet bool
}

func (v NullableStatusColorType) Get() *StatusColorType {
	return v.value
}

func (v *NullableStatusColorType) Set(val *StatusColorType) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusColorType) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusColorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusColorType(val *StatusColorType) *NullableStatusColorType {
	return &NullableStatusColorType{value: val, isSet: true}
}

func (v NullableStatusColorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusColorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

