/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// INVStatsAPIService INVStatsAPI service
type INVStatsAPIService service

type INVStatsAPIGetBlockInventoryStatisticsRequest struct {
	ctx context.Context
	ApiService *INVStatsAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeBlocksWithNoRoom *bool
	includeOverbooking *bool
	includeOpportunities *bool
	includeTentativeInventory *bool
	limit *int32
	offset *int32
	endDateRange *string
	startDateRange *string
	blockStatusCodes *[]string
	originCodes *[]string
	roomOwnerCodes *[]string
	blockOwners *[]string
	summarySortByCode *string
	detailSortByCode *string
	friday *bool
	monday *bool
	saturday *bool
	sunday *bool
	thursday *bool
	tuesday *bool
	wednesday *bool
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Authorization(authorization string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) XAppKey(xAppKey string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the endDate user is logged in
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) XHotelid(xHotelid string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// If set to true, includes business blocks without rooms.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) IncludeBlocksWithNoRoom(includeBlocksWithNoRoom bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.includeBlocksWithNoRoom = &includeBlocksWithNoRoom
	return r
}

// If set to true, the house overbooking limit for each day is added to the total number of physical rooms.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) IncludeOverbooking(includeOverbooking bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.includeOverbooking = &includeOverbooking
	return r
}

// If set to true, the results will include opportunities. If this flag is not provided it will be considered false and exclude opportunities.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) IncludeOpportunities(includeOpportunities bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.includeOpportunities = &includeOpportunities
	return r
}

// If set to true, includes non-deduct business blocks and group reservations in the Sales Allowance Available Rooms and House Availability statistics.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) IncludeTentativeInventory(includeTentativeInventory bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.includeTentativeInventory = &includeTentativeInventory
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Limit(limit int32) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Offset(offset int32) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.offset = &offset
	return r
}

// The ending value of the date range.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) EndDateRange(endDateRange string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.endDateRange = &endDateRange
	return r
}

// The starting value of the date range.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) StartDateRange(startDateRange string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.startDateRange = &startDateRange
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) BlockStatusCodes(blockStatusCodes []string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.blockStatusCodes = &blockStatusCodes
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) OriginCodes(originCodes []string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.originCodes = &originCodes
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) RoomOwnerCodes(roomOwnerCodes []string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.roomOwnerCodes = &roomOwnerCodes
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) BlockOwners(blockOwners []string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.blockOwners = &blockOwners
	return r
}

// Supported block inventory statistical sorting.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) SummarySortByCode(summarySortByCode string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.summarySortByCode = &summarySortByCode
	return r
}

// Supported block inventory statistical sorting.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) DetailSortByCode(detailSortByCode string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.detailSortByCode = &detailSortByCode
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Friday(friday bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.friday = &friday
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Monday(monday bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.monday = &monday
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Saturday(saturday bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.saturday = &saturday
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Sunday(sunday bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.sunday = &sunday
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Thursday(thursday bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.thursday = &thursday
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Tuesday(tuesday bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.tuesday = &tuesday
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Wednesday(wednesday bool) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.wednesday = &wednesday
	return r
}

// Type for block inventory statistics instructions that can be used in requests for partial operations.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) FetchInstructions(fetchInstructions []string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) XExternalsystem(xExternalsystem string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r INVStatsAPIGetBlockInventoryStatisticsRequest) AcceptLanguage(acceptLanguage string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsRequest) Execute() (*BlockInventoryStatistic, *http.Response, error) {
	return r.ApiService.GetBlockInventoryStatisticsExecute(r)
}

/*
GetBlockInventoryStatistics Get block inventory statistics

Use this API to get block statistics on a per-day basis across a specified date range. The result includes a summary section of rooms booked by status by date, details on deduct and non-deduct rooms booked per day, and Sales Allowance and House Availability figures per day. The details section of the results include block details such as name, block, code, start and end date, owner, and more. It also shows a breakdown of blocked picked-up and available rooms per day per block. The result set is used to feed the GRC (Group Rooms Control) page in the OPERA UI. <p><strong>OperationId:</strong>getBlockInventoryStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where block inventory statistics are searched.
 @return INVStatsAPIGetBlockInventoryStatisticsRequest
*/
func (a *INVStatsAPIService) GetBlockInventoryStatistics(ctx context.Context, hotelId string) INVStatsAPIGetBlockInventoryStatisticsRequest {
	return INVStatsAPIGetBlockInventoryStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return BlockInventoryStatistic
func (a *INVStatsAPIService) GetBlockInventoryStatisticsExecute(r INVStatsAPIGetBlockInventoryStatisticsRequest) (*BlockInventoryStatistic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockInventoryStatistic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "INVStatsAPIService.GetBlockInventoryStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blockInventoryStatistics"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.includeBlocksWithNoRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeBlocksWithNoRoom", r.includeBlocksWithNoRoom, "")
  }
	if r.includeOverbooking != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeOverbooking", r.includeOverbooking, "")
  }
	if r.includeOpportunities != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeOpportunities", r.includeOpportunities, "")
  }
	if r.includeTentativeInventory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTentativeInventory", r.includeTentativeInventory, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.endDateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDateRange", r.endDateRange, "")
  }
	if r.startDateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDateRange", r.startDateRange, "")
  }
	if r.blockStatusCodes != nil {
		t := *r.blockStatusCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", t, "multi")
		}
  }
	if r.originCodes != nil {
		t := *r.originCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "originCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "originCodes", t, "multi")
		}
  }
	if r.roomOwnerCodes != nil {
		t := *r.roomOwnerCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomOwnerCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomOwnerCodes", t, "multi")
		}
  }
	if r.blockOwners != nil {
		t := *r.blockOwners
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockOwners", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockOwners", t, "multi")
		}
  }
	if r.summarySortByCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summarySortByCode", r.summarySortByCode, "")
  }
	if r.detailSortByCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detailSortByCode", r.detailSortByCode, "")
  }
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
  }
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
  }
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
  }
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
  }
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
  }
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
  }
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest struct {
	ctx context.Context
	ApiService *INVStatsAPIService
	hotelIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeBlocksWithNoRoom *bool
	includeOverbooking *bool
	includeOpportunities *bool
	includeTentativeInventory *bool
	limit *int32
	offset *int32
	endDateRange *string
	startDateRange *string
	blockStatusCodes *[]string
	originCodes *[]string
	roomOwnerCodes *[]string
	blockOwners *[]string
	summarySortByCode *string
	detailSortByCode *string
	sunday *bool
	monday *bool
	tuesday *bool
	wednesday *bool
	thursday *bool
	friday *bool
	saturday *bool
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Hotel code.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) HotelIds(hotelIds []string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Authorization(authorization string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) XAppKey(xAppKey string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the endDate user is logged in
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) XHotelid(xHotelid string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.xHotelid = &xHotelid
	return r
}

// If set to true, includes business blocks without rooms.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) IncludeBlocksWithNoRoom(includeBlocksWithNoRoom bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.includeBlocksWithNoRoom = &includeBlocksWithNoRoom
	return r
}

// If set to true, the house overbooking limit for each day is added to the total number of physical rooms.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) IncludeOverbooking(includeOverbooking bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.includeOverbooking = &includeOverbooking
	return r
}

// If set to true, the results will include opportunities. If this flag is not provided it will be considered false and exclude opportunities.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) IncludeOpportunities(includeOpportunities bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.includeOpportunities = &includeOpportunities
	return r
}

// If set to true, includes non-deduct business blocks and group reservations in the Sales Allowance Available Rooms and House Availability statistics.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) IncludeTentativeInventory(includeTentativeInventory bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.includeTentativeInventory = &includeTentativeInventory
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Limit(limit int32) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Offset(offset int32) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.offset = &offset
	return r
}

// The ending value of the date range.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) EndDateRange(endDateRange string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.endDateRange = &endDateRange
	return r
}

// The starting value of the date range.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) StartDateRange(startDateRange string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.startDateRange = &startDateRange
	return r
}

// Collection of configured Block Status Codes.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) BlockStatusCodes(blockStatusCodes []string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.blockStatusCodes = &blockStatusCodes
	return r
}

// Collection of Origin Codes.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) OriginCodes(originCodes []string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.originCodes = &originCodes
	return r
}

// Collection of Room Owners.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) RoomOwnerCodes(roomOwnerCodes []string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.roomOwnerCodes = &roomOwnerCodes
	return r
}

// Collection of block owners.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) BlockOwners(blockOwners []string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.blockOwners = &blockOwners
	return r
}

// Supported block inventory statistical sorting for summary information
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) SummarySortByCode(summarySortByCode string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.summarySortByCode = &summarySortByCode
	return r
}

// Supported block inventory statistical sorting for detailed block information
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) DetailSortByCode(detailSortByCode string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.detailSortByCode = &detailSortByCode
	return r
}

// If selected, Sundays are included in search result.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Sunday(sunday bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.sunday = &sunday
	return r
}

// If selected, Mondays are included in search result.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Monday(monday bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.monday = &monday
	return r
}

// If selected, Tuesdays are included in search result.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Tuesday(tuesday bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.tuesday = &tuesday
	return r
}

// If selected, Wednesdays are included in search result.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Wednesday(wednesday bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.wednesday = &wednesday
	return r
}

// If selected, Thursdays are included in search result.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Thursday(thursday bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.thursday = &thursday
	return r
}

// If selected, Fridays are included in search result.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Friday(friday bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.friday = &friday
	return r
}

// If selected, Saturdays are included in search result.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Saturday(saturday bool) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.saturday = &saturday
	return r
}

// Type for block inventory statistics instructions that can be used in requests for partial operations.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) FetchInstructions(fetchInstructions []string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) XExternalsystem(xExternalsystem string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) AcceptLanguage(acceptLanguage string) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) Execute() (*BlockInventoryStatistic, *http.Response, error) {
	return r.ApiService.GetBlockInventoryStatisticsMultipleHotelIdsExecute(r)
}

/*
GetBlockInventoryStatisticsMultipleHotelIds Get block inventory statistics for multiple hotel Ids

You can use this API to retrieve Block inventory for multiple hotel codes. Narrow down your results using the query parameters available. <p><strong>OperationId:</strong>getBlockInventoryStatisticsMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>100</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest
*/
func (a *INVStatsAPIService) GetBlockInventoryStatisticsMultipleHotelIds(ctx context.Context) INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest {
	return INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BlockInventoryStatistic
func (a *INVStatsAPIService) GetBlockInventoryStatisticsMultipleHotelIdsExecute(r INVStatsAPIGetBlockInventoryStatisticsMultipleHotelIdsRequest) (*BlockInventoryStatistic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockInventoryStatistic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "INVStatsAPIService.GetBlockInventoryStatisticsMultipleHotelIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockInventoryStatistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.includeBlocksWithNoRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeBlocksWithNoRoom", r.includeBlocksWithNoRoom, "")
  }
	if r.includeOverbooking != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeOverbooking", r.includeOverbooking, "")
  }
	if r.includeOpportunities != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeOpportunities", r.includeOpportunities, "")
  }
	if r.includeTentativeInventory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTentativeInventory", r.includeTentativeInventory, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.endDateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDateRange", r.endDateRange, "")
  }
	if r.startDateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDateRange", r.startDateRange, "")
  }
	if r.blockStatusCodes != nil {
		t := *r.blockStatusCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", t, "multi")
		}
  }
	if r.originCodes != nil {
		t := *r.originCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "originCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "originCodes", t, "multi")
		}
  }
	if r.roomOwnerCodes != nil {
		t := *r.roomOwnerCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomOwnerCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomOwnerCodes", t, "multi")
		}
  }
	if r.blockOwners != nil {
		t := *r.blockOwners
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockOwners", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockOwners", t, "multi")
		}
  }
	if r.summarySortByCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "summarySortByCode", r.summarySortByCode, "")
  }
	if r.detailSortByCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "detailSortByCode", r.detailSortByCode, "")
  }
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
  }
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
  }
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
  }
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
  }
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
  }
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
  }
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type INVStatsAPIGetInventoryStatisticsRequest struct {
	ctx context.Context
	ApiService *INVStatsAPIService
	hotelId string
	dateRangeEnd *string
	reportCode *string
	dateRangeStart *string
	authorization *string
	xAppKey *string
	xHotelid *string
	parameterName *[]string
	parameterValue *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// The ending value of the date range.
func (r INVStatsAPIGetInventoryStatisticsRequest) DateRangeEnd(dateRangeEnd string) INVStatsAPIGetInventoryStatisticsRequest {
	r.dateRangeEnd = &dateRangeEnd
	return r
}

// Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.
func (r INVStatsAPIGetInventoryStatisticsRequest) ReportCode(reportCode string) INVStatsAPIGetInventoryStatisticsRequest {
	r.reportCode = &reportCode
	return r
}

// The starting value of the date range.
func (r INVStatsAPIGetInventoryStatisticsRequest) DateRangeStart(dateRangeStart string) INVStatsAPIGetInventoryStatisticsRequest {
	r.dateRangeStart = &dateRangeStart
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r INVStatsAPIGetInventoryStatisticsRequest) Authorization(authorization string) INVStatsAPIGetInventoryStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r INVStatsAPIGetInventoryStatisticsRequest) XAppKey(xAppKey string) INVStatsAPIGetInventoryStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the endDate user is logged in
func (r INVStatsAPIGetInventoryStatisticsRequest) XHotelid(xHotelid string) INVStatsAPIGetInventoryStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Name of the parameter.
func (r INVStatsAPIGetInventoryStatisticsRequest) ParameterName(parameterName []string) INVStatsAPIGetInventoryStatisticsRequest {
	r.parameterName = &parameterName
	return r
}

// Value of the parameter.
func (r INVStatsAPIGetInventoryStatisticsRequest) ParameterValue(parameterValue []string) INVStatsAPIGetInventoryStatisticsRequest {
	r.parameterValue = &parameterValue
	return r
}

// External system code.
func (r INVStatsAPIGetInventoryStatisticsRequest) XExternalsystem(xExternalsystem string) INVStatsAPIGetInventoryStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r INVStatsAPIGetInventoryStatisticsRequest) AcceptLanguage(acceptLanguage string) INVStatsAPIGetInventoryStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r INVStatsAPIGetInventoryStatisticsRequest) Execute() ([]StatisticType, *http.Response, error) {
	return r.ApiService.GetInventoryStatisticsExecute(r)
}

/*
GetInventoryStatistics Get hotel inventory

Use this API to retrieve the inventory data for a specified hotel. Narrow down your results using the query parameters such as a date range, room type, room class, and/or tentative inventory included. Maximum days limit with a single request is 30 days.<p><strong>OperationId:</strong>getInventoryStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the hotel where inventory statistics are searched.
 @return INVStatsAPIGetInventoryStatisticsRequest
*/
func (a *INVStatsAPIService) GetInventoryStatistics(ctx context.Context, hotelId string) INVStatsAPIGetInventoryStatisticsRequest {
	return INVStatsAPIGetInventoryStatisticsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return []StatisticType
func (a *INVStatsAPIService) GetInventoryStatisticsExecute(r INVStatsAPIGetInventoryStatisticsRequest) ([]StatisticType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []StatisticType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "INVStatsAPIService.GetInventoryStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/inventoryStatistics"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "dateRangeEnd", r.dateRangeEnd, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "reportCode", r.reportCode, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "dateRangeStart", r.dateRangeStart, "")
	if r.parameterName != nil {
		t := *r.parameterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", t, "multi")
		}
  }
	if r.parameterValue != nil {
		t := *r.parameterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
