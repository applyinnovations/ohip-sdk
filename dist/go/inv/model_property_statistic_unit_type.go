/*
OPERA Cloud Inventory API

APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inv

import (
	"encoding/json"
)

// checks if the PropertyStatisticUnitType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyStatisticUnitType{}

// PropertyStatisticUnitType Unit type to hold statistic code and value pair e.g. [resort - value] [BHOTEL - 20] [MHOTEL - 30] and its sub units per property wise
type PropertyStatisticUnitType struct {
	// Unique ID of the hotel.
	HotelId *string `json:"hotelId,omitempty"`
	// Value of the statistic unit.
	Value *int32 `json:"value,omitempty"`
}

// NewPropertyStatisticUnitType instantiates a new PropertyStatisticUnitType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyStatisticUnitType() *PropertyStatisticUnitType {
	this := PropertyStatisticUnitType{}
	return &this
}

// NewPropertyStatisticUnitTypeWithDefaults instantiates a new PropertyStatisticUnitType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyStatisticUnitTypeWithDefaults() *PropertyStatisticUnitType {
	this := PropertyStatisticUnitType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PropertyStatisticUnitType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyStatisticUnitType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PropertyStatisticUnitType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PropertyStatisticUnitType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PropertyStatisticUnitType) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyStatisticUnitType) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PropertyStatisticUnitType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *PropertyStatisticUnitType) SetValue(v int32) {
	o.Value = &v
}

func (o PropertyStatisticUnitType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyStatisticUnitType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePropertyStatisticUnitType struct {
	value *PropertyStatisticUnitType
	isSet bool
}

func (v NullablePropertyStatisticUnitType) Get() *PropertyStatisticUnitType {
	return v.value
}

func (v *NullablePropertyStatisticUnitType) Set(val *PropertyStatisticUnitType) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyStatisticUnitType) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyStatisticUnitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyStatisticUnitType(val *PropertyStatisticUnitType) *NullablePropertyStatisticUnitType {
	return &NullablePropertyStatisticUnitType{value: val, isSet: true}
}

func (v NullablePropertyStatisticUnitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyStatisticUnitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


