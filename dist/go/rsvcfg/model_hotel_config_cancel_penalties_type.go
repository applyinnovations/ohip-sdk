/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the HotelConfigCancelPenaltiesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelConfigCancelPenaltiesType{}

// HotelConfigCancelPenaltiesType The CancelPenalty Configuration class defines configuration of a cancellation policy of the hotel facility.
type HotelConfigCancelPenaltiesType struct {
	// Collection of template Cancel Penalty configurations.
	CancelPenaltyConfig []ConfigCancelPenaltyType `json:"cancelPenaltyConfig,omitempty"`
	// Hotel code of the collection of template Cancel Penalty configurations.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewHotelConfigCancelPenaltiesType instantiates a new HotelConfigCancelPenaltiesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelConfigCancelPenaltiesType() *HotelConfigCancelPenaltiesType {
	this := HotelConfigCancelPenaltiesType{}
	return &this
}

// NewHotelConfigCancelPenaltiesTypeWithDefaults instantiates a new HotelConfigCancelPenaltiesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelConfigCancelPenaltiesTypeWithDefaults() *HotelConfigCancelPenaltiesType {
	this := HotelConfigCancelPenaltiesType{}
	return &this
}

// GetCancelPenaltyConfig returns the CancelPenaltyConfig field value if set, zero value otherwise.
func (o *HotelConfigCancelPenaltiesType) GetCancelPenaltyConfig() []ConfigCancelPenaltyType {
	if o == nil || IsNil(o.CancelPenaltyConfig) {
		var ret []ConfigCancelPenaltyType
		return ret
	}
	return o.CancelPenaltyConfig
}

// GetCancelPenaltyConfigOk returns a tuple with the CancelPenaltyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelConfigCancelPenaltiesType) GetCancelPenaltyConfigOk() ([]ConfigCancelPenaltyType, bool) {
	if o == nil || IsNil(o.CancelPenaltyConfig) {
		return nil, false
	}
	return o.CancelPenaltyConfig, true
}

// HasCancelPenaltyConfig returns a boolean if a field has been set.
func (o *HotelConfigCancelPenaltiesType) HasCancelPenaltyConfig() bool {
	if o != nil && !IsNil(o.CancelPenaltyConfig) {
		return true
	}

	return false
}

// SetCancelPenaltyConfig gets a reference to the given []ConfigCancelPenaltyType and assigns it to the CancelPenaltyConfig field.
func (o *HotelConfigCancelPenaltiesType) SetCancelPenaltyConfig(v []ConfigCancelPenaltyType) {
	o.CancelPenaltyConfig = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelConfigCancelPenaltiesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelConfigCancelPenaltiesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelConfigCancelPenaltiesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelConfigCancelPenaltiesType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o HotelConfigCancelPenaltiesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelConfigCancelPenaltiesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancelPenaltyConfig) {
		toSerialize["cancelPenaltyConfig"] = o.CancelPenaltyConfig
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableHotelConfigCancelPenaltiesType struct {
	value *HotelConfigCancelPenaltiesType
	isSet bool
}

func (v NullableHotelConfigCancelPenaltiesType) Get() *HotelConfigCancelPenaltiesType {
	return v.value
}

func (v *NullableHotelConfigCancelPenaltiesType) Set(val *HotelConfigCancelPenaltiesType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelConfigCancelPenaltiesType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelConfigCancelPenaltiesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelConfigCancelPenaltiesType(val *HotelConfigCancelPenaltiesType) *NullableHotelConfigCancelPenaltiesType {
	return &NullableHotelConfigCancelPenaltiesType{value: val, isSet: true}
}

func (v NullableHotelConfigCancelPenaltiesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelConfigCancelPenaltiesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


