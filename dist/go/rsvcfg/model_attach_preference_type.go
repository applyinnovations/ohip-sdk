/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the AttachPreferenceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachPreferenceType{}

// AttachPreferenceType Auto attach preference element.
type AttachPreferenceType struct {
	// Preference group.
	Type *string `json:"type,omitempty"`
	// Preference code..
	Code *string `json:"code,omitempty"`
}

// NewAttachPreferenceType instantiates a new AttachPreferenceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachPreferenceType() *AttachPreferenceType {
	this := AttachPreferenceType{}
	return &this
}

// NewAttachPreferenceTypeWithDefaults instantiates a new AttachPreferenceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachPreferenceTypeWithDefaults() *AttachPreferenceType {
	this := AttachPreferenceType{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttachPreferenceType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachPreferenceType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttachPreferenceType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AttachPreferenceType) SetType(v string) {
	o.Type = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AttachPreferenceType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachPreferenceType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AttachPreferenceType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AttachPreferenceType) SetCode(v string) {
	o.Code = &v
}

func (o AttachPreferenceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachPreferenceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableAttachPreferenceType struct {
	value *AttachPreferenceType
	isSet bool
}

func (v NullableAttachPreferenceType) Get() *AttachPreferenceType {
	return v.value
}

func (v *NullableAttachPreferenceType) Set(val *AttachPreferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachPreferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachPreferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachPreferenceType(val *AttachPreferenceType) *NullableAttachPreferenceType {
	return &NullableAttachPreferenceType{value: val, isSet: true}
}

func (v NullableAttachPreferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachPreferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


