/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the CopyTraceTextsCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyTraceTextsCriteriaType{}

// CopyTraceTextsCriteriaType Copy Trace texts criteria type to copy multiple trace texts from one Hotel to another Hotel.
type CopyTraceTextsCriteriaType struct {
	// Hotel code.
	TargetHotels []string `json:"targetHotels,omitempty"`
	// Collection of trace texts.
	TraceTexts []TraceTextType `json:"traceTexts,omitempty"`
}

// NewCopyTraceTextsCriteriaType instantiates a new CopyTraceTextsCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyTraceTextsCriteriaType() *CopyTraceTextsCriteriaType {
	this := CopyTraceTextsCriteriaType{}
	return &this
}

// NewCopyTraceTextsCriteriaTypeWithDefaults instantiates a new CopyTraceTextsCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyTraceTextsCriteriaTypeWithDefaults() *CopyTraceTextsCriteriaType {
	this := CopyTraceTextsCriteriaType{}
	return &this
}

// GetTargetHotels returns the TargetHotels field value if set, zero value otherwise.
func (o *CopyTraceTextsCriteriaType) GetTargetHotels() []string {
	if o == nil || IsNil(o.TargetHotels) {
		var ret []string
		return ret
	}
	return o.TargetHotels
}

// GetTargetHotelsOk returns a tuple with the TargetHotels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyTraceTextsCriteriaType) GetTargetHotelsOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetHotels) {
		return nil, false
	}
	return o.TargetHotels, true
}

// HasTargetHotels returns a boolean if a field has been set.
func (o *CopyTraceTextsCriteriaType) HasTargetHotels() bool {
	if o != nil && !IsNil(o.TargetHotels) {
		return true
	}

	return false
}

// SetTargetHotels gets a reference to the given []string and assigns it to the TargetHotels field.
func (o *CopyTraceTextsCriteriaType) SetTargetHotels(v []string) {
	o.TargetHotels = v
}

// GetTraceTexts returns the TraceTexts field value if set, zero value otherwise.
func (o *CopyTraceTextsCriteriaType) GetTraceTexts() []TraceTextType {
	if o == nil || IsNil(o.TraceTexts) {
		var ret []TraceTextType
		return ret
	}
	return o.TraceTexts
}

// GetTraceTextsOk returns a tuple with the TraceTexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyTraceTextsCriteriaType) GetTraceTextsOk() ([]TraceTextType, bool) {
	if o == nil || IsNil(o.TraceTexts) {
		return nil, false
	}
	return o.TraceTexts, true
}

// HasTraceTexts returns a boolean if a field has been set.
func (o *CopyTraceTextsCriteriaType) HasTraceTexts() bool {
	if o != nil && !IsNil(o.TraceTexts) {
		return true
	}

	return false
}

// SetTraceTexts gets a reference to the given []TraceTextType and assigns it to the TraceTexts field.
func (o *CopyTraceTextsCriteriaType) SetTraceTexts(v []TraceTextType) {
	o.TraceTexts = v
}

func (o CopyTraceTextsCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyTraceTextsCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TargetHotels) {
		toSerialize["targetHotels"] = o.TargetHotels
	}
	if !IsNil(o.TraceTexts) {
		toSerialize["traceTexts"] = o.TraceTexts
	}
	return toSerialize, nil
}

type NullableCopyTraceTextsCriteriaType struct {
	value *CopyTraceTextsCriteriaType
	isSet bool
}

func (v NullableCopyTraceTextsCriteriaType) Get() *CopyTraceTextsCriteriaType {
	return v.value
}

func (v *NullableCopyTraceTextsCriteriaType) Set(val *CopyTraceTextsCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyTraceTextsCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyTraceTextsCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyTraceTextsCriteriaType(val *CopyTraceTextsCriteriaType) *NullableCopyTraceTextsCriteriaType {
	return &NullableCopyTraceTextsCriteriaType{value: val, isSet: true}
}

func (v NullableCopyTraceTextsCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyTraceTextsCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


