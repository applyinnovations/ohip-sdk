/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the PolicyScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyScheduleType{}

// PolicyScheduleType The Policy Schedule Type.
type PolicyScheduleType struct {
	// Hotel code for the Policy Schedules.
	HotelId *string `json:"hotelId,omitempty"`
	PolicyType *PolicyTypeType `json:"policyType,omitempty"`
	ScheduleDetail *PolicyScheduleDetailType `json:"scheduleDetail,omitempty"`
	ScheduleId *UniqueIDType `json:"scheduleId,omitempty"`
}

// NewPolicyScheduleType instantiates a new PolicyScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyScheduleType() *PolicyScheduleType {
	this := PolicyScheduleType{}
	return &this
}

// NewPolicyScheduleTypeWithDefaults instantiates a new PolicyScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyScheduleTypeWithDefaults() *PolicyScheduleType {
	this := PolicyScheduleType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PolicyScheduleType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PolicyScheduleType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PolicyScheduleType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPolicyType returns the PolicyType field value if set, zero value otherwise.
func (o *PolicyScheduleType) GetPolicyType() PolicyTypeType {
	if o == nil || IsNil(o.PolicyType) {
		var ret PolicyTypeType
		return ret
	}
	return *o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleType) GetPolicyTypeOk() (*PolicyTypeType, bool) {
	if o == nil || IsNil(o.PolicyType) {
		return nil, false
	}
	return o.PolicyType, true
}

// HasPolicyType returns a boolean if a field has been set.
func (o *PolicyScheduleType) HasPolicyType() bool {
	if o != nil && !IsNil(o.PolicyType) {
		return true
	}

	return false
}

// SetPolicyType gets a reference to the given PolicyTypeType and assigns it to the PolicyType field.
func (o *PolicyScheduleType) SetPolicyType(v PolicyTypeType) {
	o.PolicyType = &v
}

// GetScheduleDetail returns the ScheduleDetail field value if set, zero value otherwise.
func (o *PolicyScheduleType) GetScheduleDetail() PolicyScheduleDetailType {
	if o == nil || IsNil(o.ScheduleDetail) {
		var ret PolicyScheduleDetailType
		return ret
	}
	return *o.ScheduleDetail
}

// GetScheduleDetailOk returns a tuple with the ScheduleDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleType) GetScheduleDetailOk() (*PolicyScheduleDetailType, bool) {
	if o == nil || IsNil(o.ScheduleDetail) {
		return nil, false
	}
	return o.ScheduleDetail, true
}

// HasScheduleDetail returns a boolean if a field has been set.
func (o *PolicyScheduleType) HasScheduleDetail() bool {
	if o != nil && !IsNil(o.ScheduleDetail) {
		return true
	}

	return false
}

// SetScheduleDetail gets a reference to the given PolicyScheduleDetailType and assigns it to the ScheduleDetail field.
func (o *PolicyScheduleType) SetScheduleDetail(v PolicyScheduleDetailType) {
	o.ScheduleDetail = &v
}

// GetScheduleId returns the ScheduleId field value if set, zero value otherwise.
func (o *PolicyScheduleType) GetScheduleId() UniqueIDType {
	if o == nil || IsNil(o.ScheduleId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ScheduleId
}

// GetScheduleIdOk returns a tuple with the ScheduleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleType) GetScheduleIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ScheduleId) {
		return nil, false
	}
	return o.ScheduleId, true
}

// HasScheduleId returns a boolean if a field has been set.
func (o *PolicyScheduleType) HasScheduleId() bool {
	if o != nil && !IsNil(o.ScheduleId) {
		return true
	}

	return false
}

// SetScheduleId gets a reference to the given UniqueIDType and assigns it to the ScheduleId field.
func (o *PolicyScheduleType) SetScheduleId(v UniqueIDType) {
	o.ScheduleId = &v
}

func (o PolicyScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PolicyType) {
		toSerialize["policyType"] = o.PolicyType
	}
	if !IsNil(o.ScheduleDetail) {
		toSerialize["scheduleDetail"] = o.ScheduleDetail
	}
	if !IsNil(o.ScheduleId) {
		toSerialize["scheduleId"] = o.ScheduleId
	}
	return toSerialize, nil
}

type NullablePolicyScheduleType struct {
	value *PolicyScheduleType
	isSet bool
}

func (v NullablePolicyScheduleType) Get() *PolicyScheduleType {
	return v.value
}

func (v *NullablePolicyScheduleType) Set(val *PolicyScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyScheduleType(val *PolicyScheduleType) *NullablePolicyScheduleType {
	return &NullablePolicyScheduleType{value: val, isSet: true}
}

func (v NullablePolicyScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


