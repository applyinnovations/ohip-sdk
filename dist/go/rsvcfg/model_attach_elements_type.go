/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the AttachElementsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachElementsType{}

// AttachElementsType Elements to be attached to the rule.
type AttachElementsType struct {
	// Auto attach preference.
	Preference []AttachPreferenceType `json:"preference,omitempty"`
	Trace *AttachTraceType `json:"trace,omitempty"`
	// List of attached elements codes.
	Code []string `json:"code,omitempty"`
	Type *ResvAutoAttchTypeCode `json:"type,omitempty"`
	// Auto attach rule type description.
	Description *string `json:"description,omitempty"`
}

// NewAttachElementsType instantiates a new AttachElementsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachElementsType() *AttachElementsType {
	this := AttachElementsType{}
	return &this
}

// NewAttachElementsTypeWithDefaults instantiates a new AttachElementsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachElementsTypeWithDefaults() *AttachElementsType {
	this := AttachElementsType{}
	return &this
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *AttachElementsType) GetPreference() []AttachPreferenceType {
	if o == nil || IsNil(o.Preference) {
		var ret []AttachPreferenceType
		return ret
	}
	return o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachElementsType) GetPreferenceOk() ([]AttachPreferenceType, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *AttachElementsType) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given []AttachPreferenceType and assigns it to the Preference field.
func (o *AttachElementsType) SetPreference(v []AttachPreferenceType) {
	o.Preference = v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *AttachElementsType) GetTrace() AttachTraceType {
	if o == nil || IsNil(o.Trace) {
		var ret AttachTraceType
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachElementsType) GetTraceOk() (*AttachTraceType, bool) {
	if o == nil || IsNil(o.Trace) {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *AttachElementsType) HasTrace() bool {
	if o != nil && !IsNil(o.Trace) {
		return true
	}

	return false
}

// SetTrace gets a reference to the given AttachTraceType and assigns it to the Trace field.
func (o *AttachElementsType) SetTrace(v AttachTraceType) {
	o.Trace = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AttachElementsType) GetCode() []string {
	if o == nil || IsNil(o.Code) {
		var ret []string
		return ret
	}
	return o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachElementsType) GetCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AttachElementsType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given []string and assigns it to the Code field.
func (o *AttachElementsType) SetCode(v []string) {
	o.Code = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttachElementsType) GetType() ResvAutoAttchTypeCode {
	if o == nil || IsNil(o.Type) {
		var ret ResvAutoAttchTypeCode
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachElementsType) GetTypeOk() (*ResvAutoAttchTypeCode, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttachElementsType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ResvAutoAttchTypeCode and assigns it to the Type field.
func (o *AttachElementsType) SetType(v ResvAutoAttchTypeCode) {
	o.Type = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AttachElementsType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachElementsType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AttachElementsType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AttachElementsType) SetDescription(v string) {
	o.Description = &v
}

func (o AttachElementsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachElementsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}
	if !IsNil(o.Trace) {
		toSerialize["trace"] = o.Trace
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableAttachElementsType struct {
	value *AttachElementsType
	isSet bool
}

func (v NullableAttachElementsType) Get() *AttachElementsType {
	return v.value
}

func (v *NullableAttachElementsType) Set(val *AttachElementsType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachElementsType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachElementsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachElementsType(val *AttachElementsType) *NullableAttachElementsType {
	return &NullableAttachElementsType{value: val, isSet: true}
}

func (v NullableAttachElementsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachElementsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


