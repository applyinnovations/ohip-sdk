/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the AttachTraceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachTraceType{}

// AttachTraceType Auto attach trace element.
type AttachTraceType struct {
	Departments []string `json:"departments,omitempty"`
	// The trace text that will be sent to the selected department(s) when Trace is selected as the Rule Type.
	TraceText *string `json:"traceText,omitempty"`
}

// NewAttachTraceType instantiates a new AttachTraceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachTraceType() *AttachTraceType {
	this := AttachTraceType{}
	return &this
}

// NewAttachTraceTypeWithDefaults instantiates a new AttachTraceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachTraceTypeWithDefaults() *AttachTraceType {
	this := AttachTraceType{}
	return &this
}

// GetDepartments returns the Departments field value if set, zero value otherwise.
func (o *AttachTraceType) GetDepartments() []string {
	if o == nil || IsNil(o.Departments) {
		var ret []string
		return ret
	}
	return o.Departments
}

// GetDepartmentsOk returns a tuple with the Departments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachTraceType) GetDepartmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Departments) {
		return nil, false
	}
	return o.Departments, true
}

// HasDepartments returns a boolean if a field has been set.
func (o *AttachTraceType) HasDepartments() bool {
	if o != nil && !IsNil(o.Departments) {
		return true
	}

	return false
}

// SetDepartments gets a reference to the given []string and assigns it to the Departments field.
func (o *AttachTraceType) SetDepartments(v []string) {
	o.Departments = v
}

// GetTraceText returns the TraceText field value if set, zero value otherwise.
func (o *AttachTraceType) GetTraceText() string {
	if o == nil || IsNil(o.TraceText) {
		var ret string
		return ret
	}
	return *o.TraceText
}

// GetTraceTextOk returns a tuple with the TraceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachTraceType) GetTraceTextOk() (*string, bool) {
	if o == nil || IsNil(o.TraceText) {
		return nil, false
	}
	return o.TraceText, true
}

// HasTraceText returns a boolean if a field has been set.
func (o *AttachTraceType) HasTraceText() bool {
	if o != nil && !IsNil(o.TraceText) {
		return true
	}

	return false
}

// SetTraceText gets a reference to the given string and assigns it to the TraceText field.
func (o *AttachTraceType) SetTraceText(v string) {
	o.TraceText = &v
}

func (o AttachTraceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachTraceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Departments) {
		toSerialize["departments"] = o.Departments
	}
	if !IsNil(o.TraceText) {
		toSerialize["traceText"] = o.TraceText
	}
	return toSerialize, nil
}

type NullableAttachTraceType struct {
	value *AttachTraceType
	isSet bool
}

func (v NullableAttachTraceType) Get() *AttachTraceType {
	return v.value
}

func (v *NullableAttachTraceType) Set(val *AttachTraceType) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachTraceType) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachTraceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachTraceType(val *AttachTraceType) *NullableAttachTraceType {
	return &NullableAttachTraceType{value: val, isSet: true}
}

func (v NullableAttachTraceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachTraceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


