/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
	"fmt"
)

// ResvAutoAttchTypeCode Available only when Reservation Discounts and Advanced Discounts are active
type ResvAutoAttchTypeCode string

// List of resvAutoAttchTypeCode
const (
	RESVAUTOATTCHTYPECODE_ITEM ResvAutoAttchTypeCode = "Item"
	RESVAUTOATTCHTYPECODE_PRODUCT ResvAutoAttchTypeCode = "Product"
	RESVAUTOATTCHTYPECODE_RESV_PREFERENCE ResvAutoAttchTypeCode = "ResvPreference"
	RESVAUTOATTCHTYPECODE_TRACE ResvAutoAttchTypeCode = "Trace"
	RESVAUTOATTCHTYPECODE_ROOM_FEATURES ResvAutoAttchTypeCode = "RoomFeatures"
	RESVAUTOATTCHTYPECODE_PREFERENCE ResvAutoAttchTypeCode = "Preference"
	RESVAUTOATTCHTYPECODE_PROMOTIONS ResvAutoAttchTypeCode = "Promotions"
	RESVAUTOATTCHTYPECODE_ADVANCED_DISCOUNT ResvAutoAttchTypeCode = "AdvancedDiscount"
)

// All allowed values of ResvAutoAttchTypeCode enum
var AllowedResvAutoAttchTypeCodeEnumValues = []ResvAutoAttchTypeCode{
	"Item",
	"Product",
	"ResvPreference",
	"Trace",
	"RoomFeatures",
	"Preference",
	"Promotions",
	"AdvancedDiscount",
}

func (v *ResvAutoAttchTypeCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResvAutoAttchTypeCode(value)
	for _, existing := range AllowedResvAutoAttchTypeCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResvAutoAttchTypeCode", value)
}

// NewResvAutoAttchTypeCodeFromValue returns a pointer to a valid ResvAutoAttchTypeCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResvAutoAttchTypeCodeFromValue(v string) (*ResvAutoAttchTypeCode, error) {
	ev := ResvAutoAttchTypeCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResvAutoAttchTypeCode: valid values are %v", v, AllowedResvAutoAttchTypeCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResvAutoAttchTypeCode) IsValid() bool {
	for _, existing := range AllowedResvAutoAttchTypeCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to resvAutoAttchTypeCode value
func (v ResvAutoAttchTypeCode) Ptr() *ResvAutoAttchTypeCode {
	return &v
}

type NullableResvAutoAttchTypeCode struct {
	value *ResvAutoAttchTypeCode
	isSet bool
}

func (v NullableResvAutoAttchTypeCode) Get() *ResvAutoAttchTypeCode {
	return v.value
}

func (v *NullableResvAutoAttchTypeCode) Set(val *ResvAutoAttchTypeCode) {
	v.value = val
	v.isSet = true
}

func (v NullableResvAutoAttchTypeCode) IsSet() bool {
	return v.isSet
}

func (v *NullableResvAutoAttchTypeCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResvAutoAttchTypeCode(val *ResvAutoAttchTypeCode) *NullableResvAutoAttchTypeCode {
	return &NullableResvAutoAttchTypeCode{value: val, isSet: true}
}

func (v NullableResvAutoAttchTypeCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResvAutoAttchTypeCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

