/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the NotificationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationType{}

// NotificationType Global Alert Notification type for Screen, Print, email and text
type NotificationType struct {
	Department *string `json:"department,omitempty"`
	Email *bool `json:"email,omitempty"`
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Phone number
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Print *bool `json:"print,omitempty"`
	PrinterName *string `json:"printerName,omitempty"`
	ReportName *string `json:"reportName,omitempty"`
	Screen *bool `json:"screen,omitempty"`
	TextMessage *bool `json:"textMessage,omitempty"`
}

// NewNotificationType instantiates a new NotificationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationType() *NotificationType {
	this := NotificationType{}
	return &this
}

// NewNotificationTypeWithDefaults instantiates a new NotificationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationTypeWithDefaults() *NotificationType {
	this := NotificationType{}
	return &this
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *NotificationType) GetDepartment() string {
	if o == nil || IsNil(o.Department) {
		var ret string
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetDepartmentOk() (*string, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *NotificationType) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given string and assigns it to the Department field.
func (o *NotificationType) SetDepartment(v string) {
	o.Department = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *NotificationType) GetEmail() bool {
	if o == nil || IsNil(o.Email) {
		var ret bool
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *NotificationType) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given bool and assigns it to the Email field.
func (o *NotificationType) SetEmail(v bool) {
	o.Email = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *NotificationType) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *NotificationType) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *NotificationType) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *NotificationType) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *NotificationType) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *NotificationType) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPrint returns the Print field value if set, zero value otherwise.
func (o *NotificationType) GetPrint() bool {
	if o == nil || IsNil(o.Print) {
		var ret bool
		return ret
	}
	return *o.Print
}

// GetPrintOk returns a tuple with the Print field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetPrintOk() (*bool, bool) {
	if o == nil || IsNil(o.Print) {
		return nil, false
	}
	return o.Print, true
}

// HasPrint returns a boolean if a field has been set.
func (o *NotificationType) HasPrint() bool {
	if o != nil && !IsNil(o.Print) {
		return true
	}

	return false
}

// SetPrint gets a reference to the given bool and assigns it to the Print field.
func (o *NotificationType) SetPrint(v bool) {
	o.Print = &v
}

// GetPrinterName returns the PrinterName field value if set, zero value otherwise.
func (o *NotificationType) GetPrinterName() string {
	if o == nil || IsNil(o.PrinterName) {
		var ret string
		return ret
	}
	return *o.PrinterName
}

// GetPrinterNameOk returns a tuple with the PrinterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetPrinterNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrinterName) {
		return nil, false
	}
	return o.PrinterName, true
}

// HasPrinterName returns a boolean if a field has been set.
func (o *NotificationType) HasPrinterName() bool {
	if o != nil && !IsNil(o.PrinterName) {
		return true
	}

	return false
}

// SetPrinterName gets a reference to the given string and assigns it to the PrinterName field.
func (o *NotificationType) SetPrinterName(v string) {
	o.PrinterName = &v
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *NotificationType) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *NotificationType) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *NotificationType) SetReportName(v string) {
	o.ReportName = &v
}

// GetScreen returns the Screen field value if set, zero value otherwise.
func (o *NotificationType) GetScreen() bool {
	if o == nil || IsNil(o.Screen) {
		var ret bool
		return ret
	}
	return *o.Screen
}

// GetScreenOk returns a tuple with the Screen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetScreenOk() (*bool, bool) {
	if o == nil || IsNil(o.Screen) {
		return nil, false
	}
	return o.Screen, true
}

// HasScreen returns a boolean if a field has been set.
func (o *NotificationType) HasScreen() bool {
	if o != nil && !IsNil(o.Screen) {
		return true
	}

	return false
}

// SetScreen gets a reference to the given bool and assigns it to the Screen field.
func (o *NotificationType) SetScreen(v bool) {
	o.Screen = &v
}

// GetTextMessage returns the TextMessage field value if set, zero value otherwise.
func (o *NotificationType) GetTextMessage() bool {
	if o == nil || IsNil(o.TextMessage) {
		var ret bool
		return ret
	}
	return *o.TextMessage
}

// GetTextMessageOk returns a tuple with the TextMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationType) GetTextMessageOk() (*bool, bool) {
	if o == nil || IsNil(o.TextMessage) {
		return nil, false
	}
	return o.TextMessage, true
}

// HasTextMessage returns a boolean if a field has been set.
func (o *NotificationType) HasTextMessage() bool {
	if o != nil && !IsNil(o.TextMessage) {
		return true
	}

	return false
}

// SetTextMessage gets a reference to the given bool and assigns it to the TextMessage field.
func (o *NotificationType) SetTextMessage(v bool) {
	o.TextMessage = &v
}

func (o NotificationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.Print) {
		toSerialize["print"] = o.Print
	}
	if !IsNil(o.PrinterName) {
		toSerialize["printerName"] = o.PrinterName
	}
	if !IsNil(o.ReportName) {
		toSerialize["reportName"] = o.ReportName
	}
	if !IsNil(o.Screen) {
		toSerialize["screen"] = o.Screen
	}
	if !IsNil(o.TextMessage) {
		toSerialize["textMessage"] = o.TextMessage
	}
	return toSerialize, nil
}

type NullableNotificationType struct {
	value *NotificationType
	isSet bool
}

func (v NullableNotificationType) Get() *NotificationType {
	return v.value
}

func (v *NullableNotificationType) Set(val *NotificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationType(val *NotificationType) *NullableNotificationType {
	return &NullableNotificationType{value: val, isSet: true}
}

func (v NullableNotificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


