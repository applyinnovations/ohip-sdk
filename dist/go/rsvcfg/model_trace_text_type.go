/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the TraceTextType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceTextType{}

// TraceTextType Type provides trace text information.
type TraceTextType struct {
	// Determines whether this trace text can be deleted.
	CanDelete *bool `json:"canDelete,omitempty"`
	// Department Code where the trace text belongs to.
	DepartmentCode *string `json:"departmentCode,omitempty"`
	// Display Sequence for the trace text.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Property Code where the trace text belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Trace text value.
	TraceText *string `json:"traceText,omitempty"`
}

// NewTraceTextType instantiates a new TraceTextType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceTextType() *TraceTextType {
	this := TraceTextType{}
	return &this
}

// NewTraceTextTypeWithDefaults instantiates a new TraceTextType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceTextTypeWithDefaults() *TraceTextType {
	this := TraceTextType{}
	return &this
}

// GetCanDelete returns the CanDelete field value if set, zero value otherwise.
func (o *TraceTextType) GetCanDelete() bool {
	if o == nil || IsNil(o.CanDelete) {
		var ret bool
		return ret
	}
	return *o.CanDelete
}

// GetCanDeleteOk returns a tuple with the CanDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTextType) GetCanDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.CanDelete) {
		return nil, false
	}
	return o.CanDelete, true
}

// HasCanDelete returns a boolean if a field has been set.
func (o *TraceTextType) HasCanDelete() bool {
	if o != nil && !IsNil(o.CanDelete) {
		return true
	}

	return false
}

// SetCanDelete gets a reference to the given bool and assigns it to the CanDelete field.
func (o *TraceTextType) SetCanDelete(v bool) {
	o.CanDelete = &v
}

// GetDepartmentCode returns the DepartmentCode field value if set, zero value otherwise.
func (o *TraceTextType) GetDepartmentCode() string {
	if o == nil || IsNil(o.DepartmentCode) {
		var ret string
		return ret
	}
	return *o.DepartmentCode
}

// GetDepartmentCodeOk returns a tuple with the DepartmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTextType) GetDepartmentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DepartmentCode) {
		return nil, false
	}
	return o.DepartmentCode, true
}

// HasDepartmentCode returns a boolean if a field has been set.
func (o *TraceTextType) HasDepartmentCode() bool {
	if o != nil && !IsNil(o.DepartmentCode) {
		return true
	}

	return false
}

// SetDepartmentCode gets a reference to the given string and assigns it to the DepartmentCode field.
func (o *TraceTextType) SetDepartmentCode(v string) {
	o.DepartmentCode = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *TraceTextType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTextType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *TraceTextType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *TraceTextType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *TraceTextType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTextType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *TraceTextType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *TraceTextType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTraceText returns the TraceText field value if set, zero value otherwise.
func (o *TraceTextType) GetTraceText() string {
	if o == nil || IsNil(o.TraceText) {
		var ret string
		return ret
	}
	return *o.TraceText
}

// GetTraceTextOk returns a tuple with the TraceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTextType) GetTraceTextOk() (*string, bool) {
	if o == nil || IsNil(o.TraceText) {
		return nil, false
	}
	return o.TraceText, true
}

// HasTraceText returns a boolean if a field has been set.
func (o *TraceTextType) HasTraceText() bool {
	if o != nil && !IsNil(o.TraceText) {
		return true
	}

	return false
}

// SetTraceText gets a reference to the given string and assigns it to the TraceText field.
func (o *TraceTextType) SetTraceText(v string) {
	o.TraceText = &v
}

func (o TraceTextType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceTextType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanDelete) {
		toSerialize["canDelete"] = o.CanDelete
	}
	if !IsNil(o.DepartmentCode) {
		toSerialize["departmentCode"] = o.DepartmentCode
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TraceText) {
		toSerialize["traceText"] = o.TraceText
	}
	return toSerialize, nil
}

type NullableTraceTextType struct {
	value *TraceTextType
	isSet bool
}

func (v NullableTraceTextType) Get() *TraceTextType {
	return v.value
}

func (v *NullableTraceTextType) Set(val *TraceTextType) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceTextType) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceTextType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceTextType(val *TraceTextType) *NullableTraceTextType {
	return &NullableTraceTextType{value: val, isSet: true}
}

func (v NullableTraceTextType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceTextType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


