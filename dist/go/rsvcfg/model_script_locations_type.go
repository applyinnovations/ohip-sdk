/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ScriptLocationsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScriptLocationsType{}

// ScriptLocationsType Collection of locations where a Script is to be used.
type ScriptLocationsType struct {
	// Location where a Script is to be used.
	Hotels []ScriptLocationType `json:"hotels,omitempty"`
	// Location where a Script is to be used.
	CROs []ScriptLocationType `json:"cROs,omitempty"`
	// Location where a Script is to be used..
	Chains []ScriptLocationType `json:"chains,omitempty"`
}

// NewScriptLocationsType instantiates a new ScriptLocationsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptLocationsType() *ScriptLocationsType {
	this := ScriptLocationsType{}
	return &this
}

// NewScriptLocationsTypeWithDefaults instantiates a new ScriptLocationsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptLocationsTypeWithDefaults() *ScriptLocationsType {
	this := ScriptLocationsType{}
	return &this
}

// GetHotels returns the Hotels field value if set, zero value otherwise.
func (o *ScriptLocationsType) GetHotels() []ScriptLocationType {
	if o == nil || IsNil(o.Hotels) {
		var ret []ScriptLocationType
		return ret
	}
	return o.Hotels
}

// GetHotelsOk returns a tuple with the Hotels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptLocationsType) GetHotelsOk() ([]ScriptLocationType, bool) {
	if o == nil || IsNil(o.Hotels) {
		return nil, false
	}
	return o.Hotels, true
}

// HasHotels returns a boolean if a field has been set.
func (o *ScriptLocationsType) HasHotels() bool {
	if o != nil && !IsNil(o.Hotels) {
		return true
	}

	return false
}

// SetHotels gets a reference to the given []ScriptLocationType and assigns it to the Hotels field.
func (o *ScriptLocationsType) SetHotels(v []ScriptLocationType) {
	o.Hotels = v
}

// GetCROs returns the CROs field value if set, zero value otherwise.
func (o *ScriptLocationsType) GetCROs() []ScriptLocationType {
	if o == nil || IsNil(o.CROs) {
		var ret []ScriptLocationType
		return ret
	}
	return o.CROs
}

// GetCROsOk returns a tuple with the CROs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptLocationsType) GetCROsOk() ([]ScriptLocationType, bool) {
	if o == nil || IsNil(o.CROs) {
		return nil, false
	}
	return o.CROs, true
}

// HasCROs returns a boolean if a field has been set.
func (o *ScriptLocationsType) HasCROs() bool {
	if o != nil && !IsNil(o.CROs) {
		return true
	}

	return false
}

// SetCROs gets a reference to the given []ScriptLocationType and assigns it to the CROs field.
func (o *ScriptLocationsType) SetCROs(v []ScriptLocationType) {
	o.CROs = v
}

// GetChains returns the Chains field value if set, zero value otherwise.
func (o *ScriptLocationsType) GetChains() []ScriptLocationType {
	if o == nil || IsNil(o.Chains) {
		var ret []ScriptLocationType
		return ret
	}
	return o.Chains
}

// GetChainsOk returns a tuple with the Chains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptLocationsType) GetChainsOk() ([]ScriptLocationType, bool) {
	if o == nil || IsNil(o.Chains) {
		return nil, false
	}
	return o.Chains, true
}

// HasChains returns a boolean if a field has been set.
func (o *ScriptLocationsType) HasChains() bool {
	if o != nil && !IsNil(o.Chains) {
		return true
	}

	return false
}

// SetChains gets a reference to the given []ScriptLocationType and assigns it to the Chains field.
func (o *ScriptLocationsType) SetChains(v []ScriptLocationType) {
	o.Chains = v
}

func (o ScriptLocationsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScriptLocationsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hotels) {
		toSerialize["hotels"] = o.Hotels
	}
	if !IsNil(o.CROs) {
		toSerialize["cROs"] = o.CROs
	}
	if !IsNil(o.Chains) {
		toSerialize["chains"] = o.Chains
	}
	return toSerialize, nil
}

type NullableScriptLocationsType struct {
	value *ScriptLocationsType
	isSet bool
}

func (v NullableScriptLocationsType) Get() *ScriptLocationsType {
	return v.value
}

func (v *NullableScriptLocationsType) Set(val *ScriptLocationsType) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptLocationsType) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptLocationsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptLocationsType(val *ScriptLocationsType) *NullableScriptLocationsType {
	return &NullableScriptLocationsType{value: val, isSet: true}
}

func (v NullableScriptLocationsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptLocationsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


