/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ExpressionFieldType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpressionFieldType{}

// ExpressionFieldType struct for ExpressionFieldType
type ExpressionFieldType struct {
	DataType *string `json:"dataType,omitempty"`
	FieldDescription *string `json:"fieldDescription,omitempty"`
	FieldName *string `json:"fieldName,omitempty"`
	LovSelected *string `json:"lovSelected,omitempty"`
	TableName *string `json:"tableName,omitempty"`
	Virtual *bool `json:"virtual,omitempty"`
}

// NewExpressionFieldType instantiates a new ExpressionFieldType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpressionFieldType() *ExpressionFieldType {
	this := ExpressionFieldType{}
	return &this
}

// NewExpressionFieldTypeWithDefaults instantiates a new ExpressionFieldType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpressionFieldTypeWithDefaults() *ExpressionFieldType {
	this := ExpressionFieldType{}
	return &this
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ExpressionFieldType) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionFieldType) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ExpressionFieldType) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *ExpressionFieldType) SetDataType(v string) {
	o.DataType = &v
}

// GetFieldDescription returns the FieldDescription field value if set, zero value otherwise.
func (o *ExpressionFieldType) GetFieldDescription() string {
	if o == nil || IsNil(o.FieldDescription) {
		var ret string
		return ret
	}
	return *o.FieldDescription
}

// GetFieldDescriptionOk returns a tuple with the FieldDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionFieldType) GetFieldDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.FieldDescription) {
		return nil, false
	}
	return o.FieldDescription, true
}

// HasFieldDescription returns a boolean if a field has been set.
func (o *ExpressionFieldType) HasFieldDescription() bool {
	if o != nil && !IsNil(o.FieldDescription) {
		return true
	}

	return false
}

// SetFieldDescription gets a reference to the given string and assigns it to the FieldDescription field.
func (o *ExpressionFieldType) SetFieldDescription(v string) {
	o.FieldDescription = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *ExpressionFieldType) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionFieldType) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *ExpressionFieldType) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *ExpressionFieldType) SetFieldName(v string) {
	o.FieldName = &v
}

// GetLovSelected returns the LovSelected field value if set, zero value otherwise.
func (o *ExpressionFieldType) GetLovSelected() string {
	if o == nil || IsNil(o.LovSelected) {
		var ret string
		return ret
	}
	return *o.LovSelected
}

// GetLovSelectedOk returns a tuple with the LovSelected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionFieldType) GetLovSelectedOk() (*string, bool) {
	if o == nil || IsNil(o.LovSelected) {
		return nil, false
	}
	return o.LovSelected, true
}

// HasLovSelected returns a boolean if a field has been set.
func (o *ExpressionFieldType) HasLovSelected() bool {
	if o != nil && !IsNil(o.LovSelected) {
		return true
	}

	return false
}

// SetLovSelected gets a reference to the given string and assigns it to the LovSelected field.
func (o *ExpressionFieldType) SetLovSelected(v string) {
	o.LovSelected = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *ExpressionFieldType) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionFieldType) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *ExpressionFieldType) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *ExpressionFieldType) SetTableName(v string) {
	o.TableName = &v
}

// GetVirtual returns the Virtual field value if set, zero value otherwise.
func (o *ExpressionFieldType) GetVirtual() bool {
	if o == nil || IsNil(o.Virtual) {
		var ret bool
		return ret
	}
	return *o.Virtual
}

// GetVirtualOk returns a tuple with the Virtual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpressionFieldType) GetVirtualOk() (*bool, bool) {
	if o == nil || IsNil(o.Virtual) {
		return nil, false
	}
	return o.Virtual, true
}

// HasVirtual returns a boolean if a field has been set.
func (o *ExpressionFieldType) HasVirtual() bool {
	if o != nil && !IsNil(o.Virtual) {
		return true
	}

	return false
}

// SetVirtual gets a reference to the given bool and assigns it to the Virtual field.
func (o *ExpressionFieldType) SetVirtual(v bool) {
	o.Virtual = &v
}

func (o ExpressionFieldType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpressionFieldType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.FieldDescription) {
		toSerialize["fieldDescription"] = o.FieldDescription
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.LovSelected) {
		toSerialize["lovSelected"] = o.LovSelected
	}
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	if !IsNil(o.Virtual) {
		toSerialize["virtual"] = o.Virtual
	}
	return toSerialize, nil
}

type NullableExpressionFieldType struct {
	value *ExpressionFieldType
	isSet bool
}

func (v NullableExpressionFieldType) Get() *ExpressionFieldType {
	return v.value
}

func (v *NullableExpressionFieldType) Set(val *ExpressionFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableExpressionFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableExpressionFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpressionFieldType(val *ExpressionFieldType) *NullableExpressionFieldType {
	return &NullableExpressionFieldType{value: val, isSet: true}
}

func (v NullableExpressionFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpressionFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


