/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the BasedOnMembershipType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasedOnMembershipType{}

// BasedOnMembershipType Auto attach based on membership.
type BasedOnMembershipType struct {
	// The membership type that will be required for the element type (one that is based on Membership condition) to auto attach to the reservation.
	MembershipType *string `json:"membershipType,omitempty"`
	// The membership level of the selected membership type.
	Level *string `json:"level,omitempty"`
}

// NewBasedOnMembershipType instantiates a new BasedOnMembershipType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasedOnMembershipType() *BasedOnMembershipType {
	this := BasedOnMembershipType{}
	return &this
}

// NewBasedOnMembershipTypeWithDefaults instantiates a new BasedOnMembershipType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasedOnMembershipTypeWithDefaults() *BasedOnMembershipType {
	this := BasedOnMembershipType{}
	return &this
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *BasedOnMembershipType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasedOnMembershipType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *BasedOnMembershipType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *BasedOnMembershipType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *BasedOnMembershipType) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasedOnMembershipType) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *BasedOnMembershipType) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *BasedOnMembershipType) SetLevel(v string) {
	o.Level = &v
}

func (o BasedOnMembershipType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasedOnMembershipType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	return toSerialize, nil
}

type NullableBasedOnMembershipType struct {
	value *BasedOnMembershipType
	isSet bool
}

func (v NullableBasedOnMembershipType) Get() *BasedOnMembershipType {
	return v.value
}

func (v *NullableBasedOnMembershipType) Set(val *BasedOnMembershipType) {
	v.value = val
	v.isSet = true
}

func (v NullableBasedOnMembershipType) IsSet() bool {
	return v.isSet
}

func (v *NullableBasedOnMembershipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasedOnMembershipType(val *BasedOnMembershipType) *NullableBasedOnMembershipType {
	return &NullableBasedOnMembershipType{value: val, isSet: true}
}

func (v NullableBasedOnMembershipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasedOnMembershipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


