/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the CopyGlobalAlertType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyGlobalAlertType{}

// CopyGlobalAlertType Copy Global Alerts criteria from one property to another property
type CopyGlobalAlertType struct {
	// Unique Id that references an object uniquely in the system.
	ResvAlertIds []UniqueIDType `json:"resvAlertIds,omitempty"`
	TargetHotelCodes []string `json:"targetHotelCodes,omitempty"`
}

// NewCopyGlobalAlertType instantiates a new CopyGlobalAlertType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyGlobalAlertType() *CopyGlobalAlertType {
	this := CopyGlobalAlertType{}
	return &this
}

// NewCopyGlobalAlertTypeWithDefaults instantiates a new CopyGlobalAlertType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyGlobalAlertTypeWithDefaults() *CopyGlobalAlertType {
	this := CopyGlobalAlertType{}
	return &this
}

// GetResvAlertIds returns the ResvAlertIds field value if set, zero value otherwise.
func (o *CopyGlobalAlertType) GetResvAlertIds() []UniqueIDType {
	if o == nil || IsNil(o.ResvAlertIds) {
		var ret []UniqueIDType
		return ret
	}
	return o.ResvAlertIds
}

// GetResvAlertIdsOk returns a tuple with the ResvAlertIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyGlobalAlertType) GetResvAlertIdsOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ResvAlertIds) {
		return nil, false
	}
	return o.ResvAlertIds, true
}

// HasResvAlertIds returns a boolean if a field has been set.
func (o *CopyGlobalAlertType) HasResvAlertIds() bool {
	if o != nil && !IsNil(o.ResvAlertIds) {
		return true
	}

	return false
}

// SetResvAlertIds gets a reference to the given []UniqueIDType and assigns it to the ResvAlertIds field.
func (o *CopyGlobalAlertType) SetResvAlertIds(v []UniqueIDType) {
	o.ResvAlertIds = v
}

// GetTargetHotelCodes returns the TargetHotelCodes field value if set, zero value otherwise.
func (o *CopyGlobalAlertType) GetTargetHotelCodes() []string {
	if o == nil || IsNil(o.TargetHotelCodes) {
		var ret []string
		return ret
	}
	return o.TargetHotelCodes
}

// GetTargetHotelCodesOk returns a tuple with the TargetHotelCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyGlobalAlertType) GetTargetHotelCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetHotelCodes) {
		return nil, false
	}
	return o.TargetHotelCodes, true
}

// HasTargetHotelCodes returns a boolean if a field has been set.
func (o *CopyGlobalAlertType) HasTargetHotelCodes() bool {
	if o != nil && !IsNil(o.TargetHotelCodes) {
		return true
	}

	return false
}

// SetTargetHotelCodes gets a reference to the given []string and assigns it to the TargetHotelCodes field.
func (o *CopyGlobalAlertType) SetTargetHotelCodes(v []string) {
	o.TargetHotelCodes = v
}

func (o CopyGlobalAlertType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyGlobalAlertType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResvAlertIds) {
		toSerialize["resvAlertIds"] = o.ResvAlertIds
	}
	if !IsNil(o.TargetHotelCodes) {
		toSerialize["targetHotelCodes"] = o.TargetHotelCodes
	}
	return toSerialize, nil
}

type NullableCopyGlobalAlertType struct {
	value *CopyGlobalAlertType
	isSet bool
}

func (v NullableCopyGlobalAlertType) Get() *CopyGlobalAlertType {
	return v.value
}

func (v *NullableCopyGlobalAlertType) Set(val *CopyGlobalAlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyGlobalAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyGlobalAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyGlobalAlertType(val *CopyGlobalAlertType) *NullableCopyGlobalAlertType {
	return &NullableCopyGlobalAlertType{value: val, isSet: true}
}

func (v NullableCopyGlobalAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyGlobalAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


