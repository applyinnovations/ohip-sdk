/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ConfigTestUpsellRuleSearchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigTestUpsellRuleSearchType{}

// ConfigTestUpsellRuleSearchType Search criteria for testing upsell rules.
type ConfigTestUpsellRuleSearchType struct {
	// Signifies the number of adults set in the test reservation.
	Adults *int32 `json:"adults,omitempty"`
	// Arrival date set in the test reservation.
	ArrivalDate *string `json:"arrivalDate,omitempty"`
	// Signifies the channel for which the upsell rule test has to be run.
	Channel *string `json:"channel,omitempty"`
	// Signifies the number of children set in the test reservation.
	Children *int32 `json:"children,omitempty"`
	// Specifies the hotel code for which the upsell rules have to be tested.
	HotelId *string `json:"hotelId,omitempty"`
	// Signifies the market code for which the upsell rule test has to be run.
	MarketCode *string `json:"marketCode,omitempty"`
	// Signifies the membership level for which the upsell rule test has to be run.
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	// Signifies the membership type for which the upsell rule test has to be run.
	MembershipType *string `json:"membershipType,omitempty"`
	// Number of nights set in the test reservation.
	Nights *int32 `json:"nights,omitempty"`
	// The number of rooms set in the test reservation.
	NumberOfRooms *int32 `json:"numberOfRooms,omitempty"`
	// Signifies the occupancy level id for which the upsell rule test has to be run. This field is only available when the test upgrade rule is set for 'Upgrade By Occupancy Levels'.
	OccupancyLevelId *int32 `json:"occupancyLevelId,omitempty"`
	// Signifies the rate code for which the upsell rule test has to be run.
	RateCode *string `json:"rateCode,omitempty"`
	// Signifies the reservation type for which the upsell rule test has to be run.
	ReservationType *string `json:"reservationType,omitempty"`
	// Signifies the room type for which the upsell rule test has to be run.
	RoomType *string `json:"roomType,omitempty"`
}

// NewConfigTestUpsellRuleSearchType instantiates a new ConfigTestUpsellRuleSearchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTestUpsellRuleSearchType() *ConfigTestUpsellRuleSearchType {
	this := ConfigTestUpsellRuleSearchType{}
	return &this
}

// NewConfigTestUpsellRuleSearchTypeWithDefaults instantiates a new ConfigTestUpsellRuleSearchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTestUpsellRuleSearchTypeWithDefaults() *ConfigTestUpsellRuleSearchType {
	this := ConfigTestUpsellRuleSearchType{}
	return &this
}

// GetAdults returns the Adults field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetAdults() int32 {
	if o == nil || IsNil(o.Adults) {
		var ret int32
		return ret
	}
	return *o.Adults
}

// GetAdultsOk returns a tuple with the Adults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetAdultsOk() (*int32, bool) {
	if o == nil || IsNil(o.Adults) {
		return nil, false
	}
	return o.Adults, true
}

// HasAdults returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasAdults() bool {
	if o != nil && !IsNil(o.Adults) {
		return true
	}

	return false
}

// SetAdults gets a reference to the given int32 and assigns it to the Adults field.
func (o *ConfigTestUpsellRuleSearchType) SetAdults(v int32) {
	o.Adults = &v
}

// GetArrivalDate returns the ArrivalDate field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetArrivalDate() string {
	if o == nil || IsNil(o.ArrivalDate) {
		var ret string
		return ret
	}
	return *o.ArrivalDate
}

// GetArrivalDateOk returns a tuple with the ArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetArrivalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalDate) {
		return nil, false
	}
	return o.ArrivalDate, true
}

// HasArrivalDate returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasArrivalDate() bool {
	if o != nil && !IsNil(o.ArrivalDate) {
		return true
	}

	return false
}

// SetArrivalDate gets a reference to the given string and assigns it to the ArrivalDate field.
func (o *ConfigTestUpsellRuleSearchType) SetArrivalDate(v string) {
	o.ArrivalDate = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetChannel() string {
	if o == nil || IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetChannelOk() (*string, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *ConfigTestUpsellRuleSearchType) SetChannel(v string) {
	o.Channel = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetChildren() int32 {
	if o == nil || IsNil(o.Children) {
		var ret int32
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetChildrenOk() (*int32, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given int32 and assigns it to the Children field.
func (o *ConfigTestUpsellRuleSearchType) SetChildren(v int32) {
	o.Children = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ConfigTestUpsellRuleSearchType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *ConfigTestUpsellRuleSearchType) SetMarketCode(v string) {
	o.MarketCode = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *ConfigTestUpsellRuleSearchType) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *ConfigTestUpsellRuleSearchType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetNights returns the Nights field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetNights() int32 {
	if o == nil || IsNil(o.Nights) {
		var ret int32
		return ret
	}
	return *o.Nights
}

// GetNightsOk returns a tuple with the Nights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.Nights) {
		return nil, false
	}
	return o.Nights, true
}

// HasNights returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasNights() bool {
	if o != nil && !IsNil(o.Nights) {
		return true
	}

	return false
}

// SetNights gets a reference to the given int32 and assigns it to the Nights field.
func (o *ConfigTestUpsellRuleSearchType) SetNights(v int32) {
	o.Nights = &v
}

// GetNumberOfRooms returns the NumberOfRooms field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetNumberOfRooms() int32 {
	if o == nil || IsNil(o.NumberOfRooms) {
		var ret int32
		return ret
	}
	return *o.NumberOfRooms
}

// GetNumberOfRoomsOk returns a tuple with the NumberOfRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetNumberOfRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfRooms) {
		return nil, false
	}
	return o.NumberOfRooms, true
}

// HasNumberOfRooms returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasNumberOfRooms() bool {
	if o != nil && !IsNil(o.NumberOfRooms) {
		return true
	}

	return false
}

// SetNumberOfRooms gets a reference to the given int32 and assigns it to the NumberOfRooms field.
func (o *ConfigTestUpsellRuleSearchType) SetNumberOfRooms(v int32) {
	o.NumberOfRooms = &v
}

// GetOccupancyLevelId returns the OccupancyLevelId field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetOccupancyLevelId() int32 {
	if o == nil || IsNil(o.OccupancyLevelId) {
		var ret int32
		return ret
	}
	return *o.OccupancyLevelId
}

// GetOccupancyLevelIdOk returns a tuple with the OccupancyLevelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetOccupancyLevelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OccupancyLevelId) {
		return nil, false
	}
	return o.OccupancyLevelId, true
}

// HasOccupancyLevelId returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasOccupancyLevelId() bool {
	if o != nil && !IsNil(o.OccupancyLevelId) {
		return true
	}

	return false
}

// SetOccupancyLevelId gets a reference to the given int32 and assigns it to the OccupancyLevelId field.
func (o *ConfigTestUpsellRuleSearchType) SetOccupancyLevelId(v int32) {
	o.OccupancyLevelId = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *ConfigTestUpsellRuleSearchType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetReservationType returns the ReservationType field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetReservationType() string {
	if o == nil || IsNil(o.ReservationType) {
		var ret string
		return ret
	}
	return *o.ReservationType
}

// GetReservationTypeOk returns a tuple with the ReservationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetReservationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReservationType) {
		return nil, false
	}
	return o.ReservationType, true
}

// HasReservationType returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasReservationType() bool {
	if o != nil && !IsNil(o.ReservationType) {
		return true
	}

	return false
}

// SetReservationType gets a reference to the given string and assigns it to the ReservationType field.
func (o *ConfigTestUpsellRuleSearchType) SetReservationType(v string) {
	o.ReservationType = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleSearchType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleSearchType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleSearchType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *ConfigTestUpsellRuleSearchType) SetRoomType(v string) {
	o.RoomType = &v
}

func (o ConfigTestUpsellRuleSearchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTestUpsellRuleSearchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Adults) {
		toSerialize["adults"] = o.Adults
	}
	if !IsNil(o.ArrivalDate) {
		toSerialize["arrivalDate"] = o.ArrivalDate
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.Nights) {
		toSerialize["nights"] = o.Nights
	}
	if !IsNil(o.NumberOfRooms) {
		toSerialize["numberOfRooms"] = o.NumberOfRooms
	}
	if !IsNil(o.OccupancyLevelId) {
		toSerialize["occupancyLevelId"] = o.OccupancyLevelId
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.ReservationType) {
		toSerialize["reservationType"] = o.ReservationType
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	return toSerialize, nil
}

type NullableConfigTestUpsellRuleSearchType struct {
	value *ConfigTestUpsellRuleSearchType
	isSet bool
}

func (v NullableConfigTestUpsellRuleSearchType) Get() *ConfigTestUpsellRuleSearchType {
	return v.value
}

func (v *NullableConfigTestUpsellRuleSearchType) Set(val *ConfigTestUpsellRuleSearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTestUpsellRuleSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTestUpsellRuleSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTestUpsellRuleSearchType(val *ConfigTestUpsellRuleSearchType) *NullableConfigTestUpsellRuleSearchType {
	return &NullableConfigTestUpsellRuleSearchType{value: val, isSet: true}
}

func (v NullableConfigTestUpsellRuleSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTestUpsellRuleSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


