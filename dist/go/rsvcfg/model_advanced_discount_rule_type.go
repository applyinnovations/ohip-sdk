/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the AdvancedDiscountRuleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvancedDiscountRuleType{}

// AdvancedDiscountRuleType Information representation of Advacned Discount Rule.
type AdvancedDiscountRuleType struct {
	// Minimum Property Occupancy Percentage.
	MinOccupancyPercentage *float32 `json:"minOccupancyPercentage,omitempty"`
	// Maximum Property Occupancy Percentage.
	MaxOccupancyPercentage *float32 `json:"maxOccupancyPercentage,omitempty"`
	// Discount Percentage.
	DiscountPercentage *float32 `json:"discountPercentage,omitempty"`
	CalculationRule *AdvancedDiscountCalculationType `json:"calculationRule,omitempty"`
}

// NewAdvancedDiscountRuleType instantiates a new AdvancedDiscountRuleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedDiscountRuleType() *AdvancedDiscountRuleType {
	this := AdvancedDiscountRuleType{}
	return &this
}

// NewAdvancedDiscountRuleTypeWithDefaults instantiates a new AdvancedDiscountRuleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedDiscountRuleTypeWithDefaults() *AdvancedDiscountRuleType {
	this := AdvancedDiscountRuleType{}
	return &this
}

// GetMinOccupancyPercentage returns the MinOccupancyPercentage field value if set, zero value otherwise.
func (o *AdvancedDiscountRuleType) GetMinOccupancyPercentage() float32 {
	if o == nil || IsNil(o.MinOccupancyPercentage) {
		var ret float32
		return ret
	}
	return *o.MinOccupancyPercentage
}

// GetMinOccupancyPercentageOk returns a tuple with the MinOccupancyPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDiscountRuleType) GetMinOccupancyPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.MinOccupancyPercentage) {
		return nil, false
	}
	return o.MinOccupancyPercentage, true
}

// HasMinOccupancyPercentage returns a boolean if a field has been set.
func (o *AdvancedDiscountRuleType) HasMinOccupancyPercentage() bool {
	if o != nil && !IsNil(o.MinOccupancyPercentage) {
		return true
	}

	return false
}

// SetMinOccupancyPercentage gets a reference to the given float32 and assigns it to the MinOccupancyPercentage field.
func (o *AdvancedDiscountRuleType) SetMinOccupancyPercentage(v float32) {
	o.MinOccupancyPercentage = &v
}

// GetMaxOccupancyPercentage returns the MaxOccupancyPercentage field value if set, zero value otherwise.
func (o *AdvancedDiscountRuleType) GetMaxOccupancyPercentage() float32 {
	if o == nil || IsNil(o.MaxOccupancyPercentage) {
		var ret float32
		return ret
	}
	return *o.MaxOccupancyPercentage
}

// GetMaxOccupancyPercentageOk returns a tuple with the MaxOccupancyPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDiscountRuleType) GetMaxOccupancyPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxOccupancyPercentage) {
		return nil, false
	}
	return o.MaxOccupancyPercentage, true
}

// HasMaxOccupancyPercentage returns a boolean if a field has been set.
func (o *AdvancedDiscountRuleType) HasMaxOccupancyPercentage() bool {
	if o != nil && !IsNil(o.MaxOccupancyPercentage) {
		return true
	}

	return false
}

// SetMaxOccupancyPercentage gets a reference to the given float32 and assigns it to the MaxOccupancyPercentage field.
func (o *AdvancedDiscountRuleType) SetMaxOccupancyPercentage(v float32) {
	o.MaxOccupancyPercentage = &v
}

// GetDiscountPercentage returns the DiscountPercentage field value if set, zero value otherwise.
func (o *AdvancedDiscountRuleType) GetDiscountPercentage() float32 {
	if o == nil || IsNil(o.DiscountPercentage) {
		var ret float32
		return ret
	}
	return *o.DiscountPercentage
}

// GetDiscountPercentageOk returns a tuple with the DiscountPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDiscountRuleType) GetDiscountPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountPercentage) {
		return nil, false
	}
	return o.DiscountPercentage, true
}

// HasDiscountPercentage returns a boolean if a field has been set.
func (o *AdvancedDiscountRuleType) HasDiscountPercentage() bool {
	if o != nil && !IsNil(o.DiscountPercentage) {
		return true
	}

	return false
}

// SetDiscountPercentage gets a reference to the given float32 and assigns it to the DiscountPercentage field.
func (o *AdvancedDiscountRuleType) SetDiscountPercentage(v float32) {
	o.DiscountPercentage = &v
}

// GetCalculationRule returns the CalculationRule field value if set, zero value otherwise.
func (o *AdvancedDiscountRuleType) GetCalculationRule() AdvancedDiscountCalculationType {
	if o == nil || IsNil(o.CalculationRule) {
		var ret AdvancedDiscountCalculationType
		return ret
	}
	return *o.CalculationRule
}

// GetCalculationRuleOk returns a tuple with the CalculationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvancedDiscountRuleType) GetCalculationRuleOk() (*AdvancedDiscountCalculationType, bool) {
	if o == nil || IsNil(o.CalculationRule) {
		return nil, false
	}
	return o.CalculationRule, true
}

// HasCalculationRule returns a boolean if a field has been set.
func (o *AdvancedDiscountRuleType) HasCalculationRule() bool {
	if o != nil && !IsNil(o.CalculationRule) {
		return true
	}

	return false
}

// SetCalculationRule gets a reference to the given AdvancedDiscountCalculationType and assigns it to the CalculationRule field.
func (o *AdvancedDiscountRuleType) SetCalculationRule(v AdvancedDiscountCalculationType) {
	o.CalculationRule = &v
}

func (o AdvancedDiscountRuleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvancedDiscountRuleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinOccupancyPercentage) {
		toSerialize["minOccupancyPercentage"] = o.MinOccupancyPercentage
	}
	if !IsNil(o.MaxOccupancyPercentage) {
		toSerialize["maxOccupancyPercentage"] = o.MaxOccupancyPercentage
	}
	if !IsNil(o.DiscountPercentage) {
		toSerialize["discountPercentage"] = o.DiscountPercentage
	}
	if !IsNil(o.CalculationRule) {
		toSerialize["calculationRule"] = o.CalculationRule
	}
	return toSerialize, nil
}

type NullableAdvancedDiscountRuleType struct {
	value *AdvancedDiscountRuleType
	isSet bool
}

func (v NullableAdvancedDiscountRuleType) Get() *AdvancedDiscountRuleType {
	return v.value
}

func (v *NullableAdvancedDiscountRuleType) Set(val *AdvancedDiscountRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedDiscountRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedDiscountRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedDiscountRuleType(val *AdvancedDiscountRuleType) *NullableAdvancedDiscountRuleType {
	return &NullableAdvancedDiscountRuleType{value: val, isSet: true}
}

func (v NullableAdvancedDiscountRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedDiscountRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


