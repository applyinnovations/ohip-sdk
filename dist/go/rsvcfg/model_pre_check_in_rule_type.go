/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the PreCheckInRuleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreCheckInRuleType{}

// PreCheckInRuleType A Internet Pre Check-In Rule
type PreCheckInRuleType struct {
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
	NewTimeSpan *TimeSpanType `json:"newTimeSpan,omitempty"`
	// Code type for Rule Details
	Memberships []MembershipTypeLevelType `json:"memberships,omitempty"`
	Specials []string `json:"specials,omitempty"`
	MarketCodes []string `json:"marketCodes,omitempty"`
	TimeLimit *PreCheckInTimeRuleTypes `json:"timeLimit,omitempty"`
	RatePlans []string `json:"ratePlans,omitempty"`
	ReservationTypes []string `json:"reservationTypes,omitempty"`
	VIPCodes []string `json:"vIPCodes,omitempty"`
	OriginCodes []string `json:"originCodes,omitempty"`
	// Hotel code of Pre Check-In Rule to be searched
	HotelId *string `json:"hotelId,omitempty"`
	RuleType *PreCheckInRuleTypeType `json:"ruleType,omitempty"`
}

// NewPreCheckInRuleType instantiates a new PreCheckInRuleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreCheckInRuleType() *PreCheckInRuleType {
	this := PreCheckInRuleType{}
	return &this
}

// NewPreCheckInRuleTypeWithDefaults instantiates a new PreCheckInRuleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreCheckInRuleTypeWithDefaults() *PreCheckInRuleType {
	this := PreCheckInRuleType{}
	return &this
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *PreCheckInRuleType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

// GetNewTimeSpan returns the NewTimeSpan field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetNewTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.NewTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.NewTimeSpan
}

// GetNewTimeSpanOk returns a tuple with the NewTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetNewTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.NewTimeSpan) {
		return nil, false
	}
	return o.NewTimeSpan, true
}

// HasNewTimeSpan returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasNewTimeSpan() bool {
	if o != nil && !IsNil(o.NewTimeSpan) {
		return true
	}

	return false
}

// SetNewTimeSpan gets a reference to the given TimeSpanType and assigns it to the NewTimeSpan field.
func (o *PreCheckInRuleType) SetNewTimeSpan(v TimeSpanType) {
	o.NewTimeSpan = &v
}

// GetMemberships returns the Memberships field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetMemberships() []MembershipTypeLevelType {
	if o == nil || IsNil(o.Memberships) {
		var ret []MembershipTypeLevelType
		return ret
	}
	return o.Memberships
}

// GetMembershipsOk returns a tuple with the Memberships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetMembershipsOk() ([]MembershipTypeLevelType, bool) {
	if o == nil || IsNil(o.Memberships) {
		return nil, false
	}
	return o.Memberships, true
}

// HasMemberships returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasMemberships() bool {
	if o != nil && !IsNil(o.Memberships) {
		return true
	}

	return false
}

// SetMemberships gets a reference to the given []MembershipTypeLevelType and assigns it to the Memberships field.
func (o *PreCheckInRuleType) SetMemberships(v []MembershipTypeLevelType) {
	o.Memberships = v
}

// GetSpecials returns the Specials field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetSpecials() []string {
	if o == nil || IsNil(o.Specials) {
		var ret []string
		return ret
	}
	return o.Specials
}

// GetSpecialsOk returns a tuple with the Specials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetSpecialsOk() ([]string, bool) {
	if o == nil || IsNil(o.Specials) {
		return nil, false
	}
	return o.Specials, true
}

// HasSpecials returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasSpecials() bool {
	if o != nil && !IsNil(o.Specials) {
		return true
	}

	return false
}

// SetSpecials gets a reference to the given []string and assigns it to the Specials field.
func (o *PreCheckInRuleType) SetSpecials(v []string) {
	o.Specials = v
}

// GetMarketCodes returns the MarketCodes field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetMarketCodes() []string {
	if o == nil || IsNil(o.MarketCodes) {
		var ret []string
		return ret
	}
	return o.MarketCodes
}

// GetMarketCodesOk returns a tuple with the MarketCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetMarketCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.MarketCodes) {
		return nil, false
	}
	return o.MarketCodes, true
}

// HasMarketCodes returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasMarketCodes() bool {
	if o != nil && !IsNil(o.MarketCodes) {
		return true
	}

	return false
}

// SetMarketCodes gets a reference to the given []string and assigns it to the MarketCodes field.
func (o *PreCheckInRuleType) SetMarketCodes(v []string) {
	o.MarketCodes = v
}

// GetTimeLimit returns the TimeLimit field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetTimeLimit() PreCheckInTimeRuleTypes {
	if o == nil || IsNil(o.TimeLimit) {
		var ret PreCheckInTimeRuleTypes
		return ret
	}
	return *o.TimeLimit
}

// GetTimeLimitOk returns a tuple with the TimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetTimeLimitOk() (*PreCheckInTimeRuleTypes, bool) {
	if o == nil || IsNil(o.TimeLimit) {
		return nil, false
	}
	return o.TimeLimit, true
}

// HasTimeLimit returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasTimeLimit() bool {
	if o != nil && !IsNil(o.TimeLimit) {
		return true
	}

	return false
}

// SetTimeLimit gets a reference to the given PreCheckInTimeRuleTypes and assigns it to the TimeLimit field.
func (o *PreCheckInRuleType) SetTimeLimit(v PreCheckInTimeRuleTypes) {
	o.TimeLimit = &v
}

// GetRatePlans returns the RatePlans field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetRatePlans() []string {
	if o == nil || IsNil(o.RatePlans) {
		var ret []string
		return ret
	}
	return o.RatePlans
}

// GetRatePlansOk returns a tuple with the RatePlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetRatePlansOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlans) {
		return nil, false
	}
	return o.RatePlans, true
}

// HasRatePlans returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasRatePlans() bool {
	if o != nil && !IsNil(o.RatePlans) {
		return true
	}

	return false
}

// SetRatePlans gets a reference to the given []string and assigns it to the RatePlans field.
func (o *PreCheckInRuleType) SetRatePlans(v []string) {
	o.RatePlans = v
}

// GetReservationTypes returns the ReservationTypes field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetReservationTypes() []string {
	if o == nil || IsNil(o.ReservationTypes) {
		var ret []string
		return ret
	}
	return o.ReservationTypes
}

// GetReservationTypesOk returns a tuple with the ReservationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetReservationTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ReservationTypes) {
		return nil, false
	}
	return o.ReservationTypes, true
}

// HasReservationTypes returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasReservationTypes() bool {
	if o != nil && !IsNil(o.ReservationTypes) {
		return true
	}

	return false
}

// SetReservationTypes gets a reference to the given []string and assigns it to the ReservationTypes field.
func (o *PreCheckInRuleType) SetReservationTypes(v []string) {
	o.ReservationTypes = v
}

// GetVIPCodes returns the VIPCodes field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetVIPCodes() []string {
	if o == nil || IsNil(o.VIPCodes) {
		var ret []string
		return ret
	}
	return o.VIPCodes
}

// GetVIPCodesOk returns a tuple with the VIPCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetVIPCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.VIPCodes) {
		return nil, false
	}
	return o.VIPCodes, true
}

// HasVIPCodes returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasVIPCodes() bool {
	if o != nil && !IsNil(o.VIPCodes) {
		return true
	}

	return false
}

// SetVIPCodes gets a reference to the given []string and assigns it to the VIPCodes field.
func (o *PreCheckInRuleType) SetVIPCodes(v []string) {
	o.VIPCodes = v
}

// GetOriginCodes returns the OriginCodes field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetOriginCodes() []string {
	if o == nil || IsNil(o.OriginCodes) {
		var ret []string
		return ret
	}
	return o.OriginCodes
}

// GetOriginCodesOk returns a tuple with the OriginCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetOriginCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.OriginCodes) {
		return nil, false
	}
	return o.OriginCodes, true
}

// HasOriginCodes returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasOriginCodes() bool {
	if o != nil && !IsNil(o.OriginCodes) {
		return true
	}

	return false
}

// SetOriginCodes gets a reference to the given []string and assigns it to the OriginCodes field.
func (o *PreCheckInRuleType) SetOriginCodes(v []string) {
	o.OriginCodes = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PreCheckInRuleType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRuleType returns the RuleType field value if set, zero value otherwise.
func (o *PreCheckInRuleType) GetRuleType() PreCheckInRuleTypeType {
	if o == nil || IsNil(o.RuleType) {
		var ret PreCheckInRuleTypeType
		return ret
	}
	return *o.RuleType
}

// GetRuleTypeOk returns a tuple with the RuleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreCheckInRuleType) GetRuleTypeOk() (*PreCheckInRuleTypeType, bool) {
	if o == nil || IsNil(o.RuleType) {
		return nil, false
	}
	return o.RuleType, true
}

// HasRuleType returns a boolean if a field has been set.
func (o *PreCheckInRuleType) HasRuleType() bool {
	if o != nil && !IsNil(o.RuleType) {
		return true
	}

	return false
}

// SetRuleType gets a reference to the given PreCheckInRuleTypeType and assigns it to the RuleType field.
func (o *PreCheckInRuleType) SetRuleType(v PreCheckInRuleTypeType) {
	o.RuleType = &v
}

func (o PreCheckInRuleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreCheckInRuleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	if !IsNil(o.NewTimeSpan) {
		toSerialize["newTimeSpan"] = o.NewTimeSpan
	}
	if !IsNil(o.Memberships) {
		toSerialize["memberships"] = o.Memberships
	}
	if !IsNil(o.Specials) {
		toSerialize["specials"] = o.Specials
	}
	if !IsNil(o.MarketCodes) {
		toSerialize["marketCodes"] = o.MarketCodes
	}
	if !IsNil(o.TimeLimit) {
		toSerialize["timeLimit"] = o.TimeLimit
	}
	if !IsNil(o.RatePlans) {
		toSerialize["ratePlans"] = o.RatePlans
	}
	if !IsNil(o.ReservationTypes) {
		toSerialize["reservationTypes"] = o.ReservationTypes
	}
	if !IsNil(o.VIPCodes) {
		toSerialize["vIPCodes"] = o.VIPCodes
	}
	if !IsNil(o.OriginCodes) {
		toSerialize["originCodes"] = o.OriginCodes
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RuleType) {
		toSerialize["ruleType"] = o.RuleType
	}
	return toSerialize, nil
}

type NullablePreCheckInRuleType struct {
	value *PreCheckInRuleType
	isSet bool
}

func (v NullablePreCheckInRuleType) Get() *PreCheckInRuleType {
	return v.value
}

func (v *NullablePreCheckInRuleType) Set(val *PreCheckInRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullablePreCheckInRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullablePreCheckInRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreCheckInRuleType(val *PreCheckInRuleType) *NullablePreCheckInRuleType {
	return &NullablePreCheckInRuleType{value: val, isSet: true}
}

func (v NullablePreCheckInRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreCheckInRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


