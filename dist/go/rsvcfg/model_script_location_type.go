/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ScriptLocationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScriptLocationType{}

// ScriptLocationType Unique identifier of a Script.
type ScriptLocationType struct {
	// Chain the script belonged to.
	ChainCode *string `json:"chainCode,omitempty"`
	// CRO the script belonged to.
	CroCode *string `json:"croCode,omitempty"`
	// Hotel code the script belonged to.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewScriptLocationType instantiates a new ScriptLocationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptLocationType() *ScriptLocationType {
	this := ScriptLocationType{}
	return &this
}

// NewScriptLocationTypeWithDefaults instantiates a new ScriptLocationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptLocationTypeWithDefaults() *ScriptLocationType {
	this := ScriptLocationType{}
	return &this
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *ScriptLocationType) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptLocationType) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *ScriptLocationType) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *ScriptLocationType) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetCroCode returns the CroCode field value if set, zero value otherwise.
func (o *ScriptLocationType) GetCroCode() string {
	if o == nil || IsNil(o.CroCode) {
		var ret string
		return ret
	}
	return *o.CroCode
}

// GetCroCodeOk returns a tuple with the CroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptLocationType) GetCroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CroCode) {
		return nil, false
	}
	return o.CroCode, true
}

// HasCroCode returns a boolean if a field has been set.
func (o *ScriptLocationType) HasCroCode() bool {
	if o != nil && !IsNil(o.CroCode) {
		return true
	}

	return false
}

// SetCroCode gets a reference to the given string and assigns it to the CroCode field.
func (o *ScriptLocationType) SetCroCode(v string) {
	o.CroCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ScriptLocationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptLocationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ScriptLocationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ScriptLocationType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o ScriptLocationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScriptLocationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.CroCode) {
		toSerialize["croCode"] = o.CroCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableScriptLocationType struct {
	value *ScriptLocationType
	isSet bool
}

func (v NullableScriptLocationType) Get() *ScriptLocationType {
	return v.value
}

func (v *NullableScriptLocationType) Set(val *ScriptLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptLocationType(val *ScriptLocationType) *NullableScriptLocationType {
	return &NullableScriptLocationType{value: val, isSet: true}
}

func (v NullableScriptLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


