/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the BasedOnCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasedOnCondition{}

// BasedOnCondition Auto attach based advanced query filter.
type BasedOnCondition struct {
	// The query ID that is used to filter condition.
	QueryId *float32 `json:"queryId,omitempty"`
	Conditions *ConditionGroupType `json:"conditions,omitempty"`
}

// NewBasedOnCondition instantiates a new BasedOnCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasedOnCondition() *BasedOnCondition {
	this := BasedOnCondition{}
	return &this
}

// NewBasedOnConditionWithDefaults instantiates a new BasedOnCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasedOnConditionWithDefaults() *BasedOnCondition {
	this := BasedOnCondition{}
	return &this
}

// GetQueryId returns the QueryId field value if set, zero value otherwise.
func (o *BasedOnCondition) GetQueryId() float32 {
	if o == nil || IsNil(o.QueryId) {
		var ret float32
		return ret
	}
	return *o.QueryId
}

// GetQueryIdOk returns a tuple with the QueryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasedOnCondition) GetQueryIdOk() (*float32, bool) {
	if o == nil || IsNil(o.QueryId) {
		return nil, false
	}
	return o.QueryId, true
}

// HasQueryId returns a boolean if a field has been set.
func (o *BasedOnCondition) HasQueryId() bool {
	if o != nil && !IsNil(o.QueryId) {
		return true
	}

	return false
}

// SetQueryId gets a reference to the given float32 and assigns it to the QueryId field.
func (o *BasedOnCondition) SetQueryId(v float32) {
	o.QueryId = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *BasedOnCondition) GetConditions() ConditionGroupType {
	if o == nil || IsNil(o.Conditions) {
		var ret ConditionGroupType
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasedOnCondition) GetConditionsOk() (*ConditionGroupType, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *BasedOnCondition) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given ConditionGroupType and assigns it to the Conditions field.
func (o *BasedOnCondition) SetConditions(v ConditionGroupType) {
	o.Conditions = &v
}

func (o BasedOnCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasedOnCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueryId) {
		toSerialize["queryId"] = o.QueryId
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullableBasedOnCondition struct {
	value *BasedOnCondition
	isSet bool
}

func (v NullableBasedOnCondition) Get() *BasedOnCondition {
	return v.value
}

func (v *NullableBasedOnCondition) Set(val *BasedOnCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableBasedOnCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableBasedOnCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasedOnCondition(val *BasedOnCondition) *NullableBasedOnCondition {
	return &NullableBasedOnCondition{value: val, isSet: true}
}

func (v NullableBasedOnCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasedOnCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


