/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the WaitlistCodesToBeChanged type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WaitlistCodesToBeChanged{}

// WaitlistCodesToBeChanged Request object for changing Waitlist Codes.
type WaitlistCodesToBeChanged struct {
	Links []InstanceLink `json:"links,omitempty"`
	// List of Waitlist Codes.
	WaitlistCodes []WaitlistCodeType `json:"waitlistCodes,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewWaitlistCodesToBeChanged instantiates a new WaitlistCodesToBeChanged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaitlistCodesToBeChanged() *WaitlistCodesToBeChanged {
	this := WaitlistCodesToBeChanged{}
	return &this
}

// NewWaitlistCodesToBeChangedWithDefaults instantiates a new WaitlistCodesToBeChanged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaitlistCodesToBeChangedWithDefaults() *WaitlistCodesToBeChanged {
	this := WaitlistCodesToBeChanged{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *WaitlistCodesToBeChanged) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistCodesToBeChanged) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *WaitlistCodesToBeChanged) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *WaitlistCodesToBeChanged) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWaitlistCodes returns the WaitlistCodes field value if set, zero value otherwise.
func (o *WaitlistCodesToBeChanged) GetWaitlistCodes() []WaitlistCodeType {
	if o == nil || IsNil(o.WaitlistCodes) {
		var ret []WaitlistCodeType
		return ret
	}
	return o.WaitlistCodes
}

// GetWaitlistCodesOk returns a tuple with the WaitlistCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistCodesToBeChanged) GetWaitlistCodesOk() ([]WaitlistCodeType, bool) {
	if o == nil || IsNil(o.WaitlistCodes) {
		return nil, false
	}
	return o.WaitlistCodes, true
}

// HasWaitlistCodes returns a boolean if a field has been set.
func (o *WaitlistCodesToBeChanged) HasWaitlistCodes() bool {
	if o != nil && !IsNil(o.WaitlistCodes) {
		return true
	}

	return false
}

// SetWaitlistCodes gets a reference to the given []WaitlistCodeType and assigns it to the WaitlistCodes field.
func (o *WaitlistCodesToBeChanged) SetWaitlistCodes(v []WaitlistCodeType) {
	o.WaitlistCodes = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *WaitlistCodesToBeChanged) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistCodesToBeChanged) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *WaitlistCodesToBeChanged) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *WaitlistCodesToBeChanged) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o WaitlistCodesToBeChanged) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WaitlistCodesToBeChanged) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.WaitlistCodes) {
		toSerialize["waitlistCodes"] = o.WaitlistCodes
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableWaitlistCodesToBeChanged struct {
	value *WaitlistCodesToBeChanged
	isSet bool
}

func (v NullableWaitlistCodesToBeChanged) Get() *WaitlistCodesToBeChanged {
	return v.value
}

func (v *NullableWaitlistCodesToBeChanged) Set(val *WaitlistCodesToBeChanged) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitlistCodesToBeChanged) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitlistCodesToBeChanged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitlistCodesToBeChanged(val *WaitlistCodesToBeChanged) *NullableWaitlistCodesToBeChanged {
	return &NullableWaitlistCodesToBeChanged{value: val, isSet: true}
}

func (v NullableWaitlistCodesToBeChanged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitlistCodesToBeChanged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


