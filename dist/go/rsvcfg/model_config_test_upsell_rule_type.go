/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ConfigTestUpsellRuleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigTestUpsellRuleType{}

// ConfigTestUpsellRuleType This gives detailed information about an upsell rule which is returned upon testing an upsell rule against a reservation.
type ConfigTestUpsellRuleType struct {
	// The room type for the upsell offer.
	ToRoomType *string `json:"toRoomType,omitempty"`
	// The regular rate amount for the upsell offer. This amount is taken from the Rate Code configuration.
	TotalStayAmount *float32 `json:"totalStayAmount,omitempty"`
	// The adjusted rate amount for the room type, based on the upsell offer.
	TotalUpsellMoneyAmount *float32 `json:"totalUpsellMoneyAmount,omitempty"`
	// Specifies the upsell rule code used for the calculation.
	UpsellRuleCode *string `json:"upsellRuleCode,omitempty"`
}

// NewConfigTestUpsellRuleType instantiates a new ConfigTestUpsellRuleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigTestUpsellRuleType() *ConfigTestUpsellRuleType {
	this := ConfigTestUpsellRuleType{}
	return &this
}

// NewConfigTestUpsellRuleTypeWithDefaults instantiates a new ConfigTestUpsellRuleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigTestUpsellRuleTypeWithDefaults() *ConfigTestUpsellRuleType {
	this := ConfigTestUpsellRuleType{}
	return &this
}

// GetToRoomType returns the ToRoomType field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleType) GetToRoomType() string {
	if o == nil || IsNil(o.ToRoomType) {
		var ret string
		return ret
	}
	return *o.ToRoomType
}

// GetToRoomTypeOk returns a tuple with the ToRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleType) GetToRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ToRoomType) {
		return nil, false
	}
	return o.ToRoomType, true
}

// HasToRoomType returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleType) HasToRoomType() bool {
	if o != nil && !IsNil(o.ToRoomType) {
		return true
	}

	return false
}

// SetToRoomType gets a reference to the given string and assigns it to the ToRoomType field.
func (o *ConfigTestUpsellRuleType) SetToRoomType(v string) {
	o.ToRoomType = &v
}

// GetTotalStayAmount returns the TotalStayAmount field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleType) GetTotalStayAmount() float32 {
	if o == nil || IsNil(o.TotalStayAmount) {
		var ret float32
		return ret
	}
	return *o.TotalStayAmount
}

// GetTotalStayAmountOk returns a tuple with the TotalStayAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleType) GetTotalStayAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalStayAmount) {
		return nil, false
	}
	return o.TotalStayAmount, true
}

// HasTotalStayAmount returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleType) HasTotalStayAmount() bool {
	if o != nil && !IsNil(o.TotalStayAmount) {
		return true
	}

	return false
}

// SetTotalStayAmount gets a reference to the given float32 and assigns it to the TotalStayAmount field.
func (o *ConfigTestUpsellRuleType) SetTotalStayAmount(v float32) {
	o.TotalStayAmount = &v
}

// GetTotalUpsellMoneyAmount returns the TotalUpsellMoneyAmount field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleType) GetTotalUpsellMoneyAmount() float32 {
	if o == nil || IsNil(o.TotalUpsellMoneyAmount) {
		var ret float32
		return ret
	}
	return *o.TotalUpsellMoneyAmount
}

// GetTotalUpsellMoneyAmountOk returns a tuple with the TotalUpsellMoneyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleType) GetTotalUpsellMoneyAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalUpsellMoneyAmount) {
		return nil, false
	}
	return o.TotalUpsellMoneyAmount, true
}

// HasTotalUpsellMoneyAmount returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleType) HasTotalUpsellMoneyAmount() bool {
	if o != nil && !IsNil(o.TotalUpsellMoneyAmount) {
		return true
	}

	return false
}

// SetTotalUpsellMoneyAmount gets a reference to the given float32 and assigns it to the TotalUpsellMoneyAmount field.
func (o *ConfigTestUpsellRuleType) SetTotalUpsellMoneyAmount(v float32) {
	o.TotalUpsellMoneyAmount = &v
}

// GetUpsellRuleCode returns the UpsellRuleCode field value if set, zero value otherwise.
func (o *ConfigTestUpsellRuleType) GetUpsellRuleCode() string {
	if o == nil || IsNil(o.UpsellRuleCode) {
		var ret string
		return ret
	}
	return *o.UpsellRuleCode
}

// GetUpsellRuleCodeOk returns a tuple with the UpsellRuleCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigTestUpsellRuleType) GetUpsellRuleCodeOk() (*string, bool) {
	if o == nil || IsNil(o.UpsellRuleCode) {
		return nil, false
	}
	return o.UpsellRuleCode, true
}

// HasUpsellRuleCode returns a boolean if a field has been set.
func (o *ConfigTestUpsellRuleType) HasUpsellRuleCode() bool {
	if o != nil && !IsNil(o.UpsellRuleCode) {
		return true
	}

	return false
}

// SetUpsellRuleCode gets a reference to the given string and assigns it to the UpsellRuleCode field.
func (o *ConfigTestUpsellRuleType) SetUpsellRuleCode(v string) {
	o.UpsellRuleCode = &v
}

func (o ConfigTestUpsellRuleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigTestUpsellRuleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ToRoomType) {
		toSerialize["toRoomType"] = o.ToRoomType
	}
	if !IsNil(o.TotalStayAmount) {
		toSerialize["totalStayAmount"] = o.TotalStayAmount
	}
	if !IsNil(o.TotalUpsellMoneyAmount) {
		toSerialize["totalUpsellMoneyAmount"] = o.TotalUpsellMoneyAmount
	}
	if !IsNil(o.UpsellRuleCode) {
		toSerialize["upsellRuleCode"] = o.UpsellRuleCode
	}
	return toSerialize, nil
}

type NullableConfigTestUpsellRuleType struct {
	value *ConfigTestUpsellRuleType
	isSet bool
}

func (v NullableConfigTestUpsellRuleType) Get() *ConfigTestUpsellRuleType {
	return v.value
}

func (v *NullableConfigTestUpsellRuleType) Set(val *ConfigTestUpsellRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigTestUpsellRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigTestUpsellRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigTestUpsellRuleType(val *ConfigTestUpsellRuleType) *NullableConfigTestUpsellRuleType {
	return &NullableConfigTestUpsellRuleType{value: val, isSet: true}
}

func (v NullableConfigTestUpsellRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigTestUpsellRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


