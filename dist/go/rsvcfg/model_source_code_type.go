/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the SourceCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceCodeType{}

// SourceCodeType Common code type for code, description, seq and inactive
type SourceCodeType struct {
	Description *TranslationTextType50 `json:"description,omitempty"`
	// Display sequence for the code type.
	Sequence *int32 `json:"sequence,omitempty"`
	// Code for the code type.
	Code *string `json:"code,omitempty"`
	// Indicates the code type is inactive or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Hotel code for the code type.
	HotelId *string `json:"hotelId,omitempty"`
	// Group code to which this code type belongs.
	GroupCode *string `json:"groupCode,omitempty"`
	// Indicates if market code is originated from Central.
	Central *bool `json:"central,omitempty"`
	ManagedBy *ManagedByOptions `json:"managedBy,omitempty"`
}

// NewSourceCodeType instantiates a new SourceCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceCodeType() *SourceCodeType {
	this := SourceCodeType{}
	return &this
}

// NewSourceCodeTypeWithDefaults instantiates a new SourceCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceCodeTypeWithDefaults() *SourceCodeType {
	this := SourceCodeType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SourceCodeType) GetDescription() TranslationTextType50 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType50
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetDescriptionOk() (*TranslationTextType50, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SourceCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType50 and assigns it to the Description field.
func (o *SourceCodeType) SetDescription(v TranslationTextType50) {
	o.Description = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *SourceCodeType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *SourceCodeType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *SourceCodeType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SourceCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SourceCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SourceCodeType) SetCode(v string) {
	o.Code = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *SourceCodeType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *SourceCodeType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *SourceCodeType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *SourceCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *SourceCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *SourceCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetGroupCode returns the GroupCode field value if set, zero value otherwise.
func (o *SourceCodeType) GetGroupCode() string {
	if o == nil || IsNil(o.GroupCode) {
		var ret string
		return ret
	}
	return *o.GroupCode
}

// GetGroupCodeOk returns a tuple with the GroupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetGroupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupCode) {
		return nil, false
	}
	return o.GroupCode, true
}

// HasGroupCode returns a boolean if a field has been set.
func (o *SourceCodeType) HasGroupCode() bool {
	if o != nil && !IsNil(o.GroupCode) {
		return true
	}

	return false
}

// SetGroupCode gets a reference to the given string and assigns it to the GroupCode field.
func (o *SourceCodeType) SetGroupCode(v string) {
	o.GroupCode = &v
}

// GetCentral returns the Central field value if set, zero value otherwise.
func (o *SourceCodeType) GetCentral() bool {
	if o == nil || IsNil(o.Central) {
		var ret bool
		return ret
	}
	return *o.Central
}

// GetCentralOk returns a tuple with the Central field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetCentralOk() (*bool, bool) {
	if o == nil || IsNil(o.Central) {
		return nil, false
	}
	return o.Central, true
}

// HasCentral returns a boolean if a field has been set.
func (o *SourceCodeType) HasCentral() bool {
	if o != nil && !IsNil(o.Central) {
		return true
	}

	return false
}

// SetCentral gets a reference to the given bool and assigns it to the Central field.
func (o *SourceCodeType) SetCentral(v bool) {
	o.Central = &v
}

// GetManagedBy returns the ManagedBy field value if set, zero value otherwise.
func (o *SourceCodeType) GetManagedBy() ManagedByOptions {
	if o == nil || IsNil(o.ManagedBy) {
		var ret ManagedByOptions
		return ret
	}
	return *o.ManagedBy
}

// GetManagedByOk returns a tuple with the ManagedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceCodeType) GetManagedByOk() (*ManagedByOptions, bool) {
	if o == nil || IsNil(o.ManagedBy) {
		return nil, false
	}
	return o.ManagedBy, true
}

// HasManagedBy returns a boolean if a field has been set.
func (o *SourceCodeType) HasManagedBy() bool {
	if o != nil && !IsNil(o.ManagedBy) {
		return true
	}

	return false
}

// SetManagedBy gets a reference to the given ManagedByOptions and assigns it to the ManagedBy field.
func (o *SourceCodeType) SetManagedBy(v ManagedByOptions) {
	o.ManagedBy = &v
}

func (o SourceCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.GroupCode) {
		toSerialize["groupCode"] = o.GroupCode
	}
	if !IsNil(o.Central) {
		toSerialize["central"] = o.Central
	}
	if !IsNil(o.ManagedBy) {
		toSerialize["managedBy"] = o.ManagedBy
	}
	return toSerialize, nil
}

type NullableSourceCodeType struct {
	value *SourceCodeType
	isSet bool
}

func (v NullableSourceCodeType) Get() *SourceCodeType {
	return v.value
}

func (v *NullableSourceCodeType) Set(val *SourceCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceCodeType(val *SourceCodeType) *NullableSourceCodeType {
	return &NullableSourceCodeType{value: val, isSet: true}
}

func (v NullableSourceCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


