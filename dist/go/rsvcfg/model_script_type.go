/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ScriptType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScriptType{}

// ScriptType A Script associated to either Chain, CRO or Property and to a Language and/or Membership Type.
type ScriptType struct {
	// Language identification.
	Language *string `json:"language,omitempty"`
	Locations *ScriptLocationsType `json:"locations,omitempty"`
	// Membership Type the script belonged to.
	MembershipType *string `json:"membershipType,omitempty"`
	// A Merge Code.
	MergeCodes []MergeCodeType `json:"mergeCodes,omitempty"`
	// Script.
	Script *string `json:"script,omitempty"`
	ScriptId *UniqueIDType `json:"scriptId,omitempty"`
	Type *ScriptTypeType `json:"type,omitempty"`
}

// NewScriptType instantiates a new ScriptType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptType() *ScriptType {
	this := ScriptType{}
	return &this
}

// NewScriptTypeWithDefaults instantiates a new ScriptType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptTypeWithDefaults() *ScriptType {
	this := ScriptType{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ScriptType) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptType) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ScriptType) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ScriptType) SetLanguage(v string) {
	o.Language = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *ScriptType) GetLocations() ScriptLocationsType {
	if o == nil || IsNil(o.Locations) {
		var ret ScriptLocationsType
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptType) GetLocationsOk() (*ScriptLocationsType, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *ScriptType) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given ScriptLocationsType and assigns it to the Locations field.
func (o *ScriptType) SetLocations(v ScriptLocationsType) {
	o.Locations = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *ScriptType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *ScriptType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *ScriptType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetMergeCodes returns the MergeCodes field value if set, zero value otherwise.
func (o *ScriptType) GetMergeCodes() []MergeCodeType {
	if o == nil || IsNil(o.MergeCodes) {
		var ret []MergeCodeType
		return ret
	}
	return o.MergeCodes
}

// GetMergeCodesOk returns a tuple with the MergeCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptType) GetMergeCodesOk() ([]MergeCodeType, bool) {
	if o == nil || IsNil(o.MergeCodes) {
		return nil, false
	}
	return o.MergeCodes, true
}

// HasMergeCodes returns a boolean if a field has been set.
func (o *ScriptType) HasMergeCodes() bool {
	if o != nil && !IsNil(o.MergeCodes) {
		return true
	}

	return false
}

// SetMergeCodes gets a reference to the given []MergeCodeType and assigns it to the MergeCodes field.
func (o *ScriptType) SetMergeCodes(v []MergeCodeType) {
	o.MergeCodes = v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *ScriptType) GetScript() string {
	if o == nil || IsNil(o.Script) {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptType) GetScriptOk() (*string, bool) {
	if o == nil || IsNil(o.Script) {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *ScriptType) HasScript() bool {
	if o != nil && !IsNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *ScriptType) SetScript(v string) {
	o.Script = &v
}

// GetScriptId returns the ScriptId field value if set, zero value otherwise.
func (o *ScriptType) GetScriptId() UniqueIDType {
	if o == nil || IsNil(o.ScriptId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ScriptId
}

// GetScriptIdOk returns a tuple with the ScriptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptType) GetScriptIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ScriptId) {
		return nil, false
	}
	return o.ScriptId, true
}

// HasScriptId returns a boolean if a field has been set.
func (o *ScriptType) HasScriptId() bool {
	if o != nil && !IsNil(o.ScriptId) {
		return true
	}

	return false
}

// SetScriptId gets a reference to the given UniqueIDType and assigns it to the ScriptId field.
func (o *ScriptType) SetScriptId(v UniqueIDType) {
	o.ScriptId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ScriptType) GetType() ScriptTypeType {
	if o == nil || IsNil(o.Type) {
		var ret ScriptTypeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptType) GetTypeOk() (*ScriptTypeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ScriptType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ScriptTypeType and assigns it to the Type field.
func (o *ScriptType) SetType(v ScriptTypeType) {
	o.Type = &v
}

func (o ScriptType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScriptType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.MergeCodes) {
		toSerialize["mergeCodes"] = o.MergeCodes
	}
	if !IsNil(o.Script) {
		toSerialize["script"] = o.Script
	}
	if !IsNil(o.ScriptId) {
		toSerialize["scriptId"] = o.ScriptId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableScriptType struct {
	value *ScriptType
	isSet bool
}

func (v NullableScriptType) Get() *ScriptType {
	return v.value
}

func (v *NullableScriptType) Set(val *ScriptType) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptType) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptType(val *ScriptType) *NullableScriptType {
	return &NullableScriptType{value: val, isSet: true}
}

func (v NullableScriptType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


