/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
	"fmt"
)

// AdvancedDiscountCalculationType Simple type for allowed advanced discount calculation type.
type AdvancedDiscountCalculationType string

// List of advancedDiscountCalculationType
const (
	ADVANCEDDISCOUNTCALCULATIONTYPE_PERCENTAGE_OF_ADR AdvancedDiscountCalculationType = "PercentageOfADR"
)

// All allowed values of AdvancedDiscountCalculationType enum
var AllowedAdvancedDiscountCalculationTypeEnumValues = []AdvancedDiscountCalculationType{
	"PercentageOfADR",
}

func (v *AdvancedDiscountCalculationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdvancedDiscountCalculationType(value)
	for _, existing := range AllowedAdvancedDiscountCalculationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdvancedDiscountCalculationType", value)
}

// NewAdvancedDiscountCalculationTypeFromValue returns a pointer to a valid AdvancedDiscountCalculationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdvancedDiscountCalculationTypeFromValue(v string) (*AdvancedDiscountCalculationType, error) {
	ev := AdvancedDiscountCalculationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdvancedDiscountCalculationType: valid values are %v", v, AllowedAdvancedDiscountCalculationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdvancedDiscountCalculationType) IsValid() bool {
	for _, existing := range AllowedAdvancedDiscountCalculationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to advancedDiscountCalculationType value
func (v AdvancedDiscountCalculationType) Ptr() *AdvancedDiscountCalculationType {
	return &v
}

type NullableAdvancedDiscountCalculationType struct {
	value *AdvancedDiscountCalculationType
	isSet bool
}

func (v NullableAdvancedDiscountCalculationType) Get() *AdvancedDiscountCalculationType {
	return v.value
}

func (v *NullableAdvancedDiscountCalculationType) Set(val *AdvancedDiscountCalculationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedDiscountCalculationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedDiscountCalculationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedDiscountCalculationType(val *AdvancedDiscountCalculationType) *NullableAdvancedDiscountCalculationType {
	return &NullableAdvancedDiscountCalculationType{value: val, isSet: true}
}

func (v NullableAdvancedDiscountCalculationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedDiscountCalculationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

