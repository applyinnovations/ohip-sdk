/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the MembershipLevelRatingInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipLevelRatingInfoType{}

// MembershipLevelRatingInfoType Rating details for membership levels.
type MembershipLevelRatingInfoType struct {
	// Property code of the membership level.
	HotelId *string `json:"hotelId,omitempty"`
	// Membership type of the membership level.
	MembershipType *string `json:"membershipType,omitempty"`
	MembershipLevel *CodeDescriptionType `json:"membershipLevel,omitempty"`
	// The desired rating for membership level, up to 4 numeric values.
	Rating *int32 `json:"rating,omitempty"`
}

// NewMembershipLevelRatingInfoType instantiates a new MembershipLevelRatingInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipLevelRatingInfoType() *MembershipLevelRatingInfoType {
	this := MembershipLevelRatingInfoType{}
	return &this
}

// NewMembershipLevelRatingInfoTypeWithDefaults instantiates a new MembershipLevelRatingInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipLevelRatingInfoTypeWithDefaults() *MembershipLevelRatingInfoType {
	this := MembershipLevelRatingInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MembershipLevelRatingInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelRatingInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MembershipLevelRatingInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MembershipLevelRatingInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipLevelRatingInfoType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelRatingInfoType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipLevelRatingInfoType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipLevelRatingInfoType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *MembershipLevelRatingInfoType) GetMembershipLevel() CodeDescriptionType {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelRatingInfoType) GetMembershipLevelOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *MembershipLevelRatingInfoType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given CodeDescriptionType and assigns it to the MembershipLevel field.
func (o *MembershipLevelRatingInfoType) SetMembershipLevel(v CodeDescriptionType) {
	o.MembershipLevel = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *MembershipLevelRatingInfoType) GetRating() int32 {
	if o == nil || IsNil(o.Rating) {
		var ret int32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipLevelRatingInfoType) GetRatingOk() (*int32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *MembershipLevelRatingInfoType) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given int32 and assigns it to the Rating field.
func (o *MembershipLevelRatingInfoType) SetRating(v int32) {
	o.Rating = &v
}

func (o MembershipLevelRatingInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipLevelRatingInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	return toSerialize, nil
}

type NullableMembershipLevelRatingInfoType struct {
	value *MembershipLevelRatingInfoType
	isSet bool
}

func (v NullableMembershipLevelRatingInfoType) Get() *MembershipLevelRatingInfoType {
	return v.value
}

func (v *NullableMembershipLevelRatingInfoType) Set(val *MembershipLevelRatingInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipLevelRatingInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipLevelRatingInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipLevelRatingInfoType(val *MembershipLevelRatingInfoType) *NullableMembershipLevelRatingInfoType {
	return &NullableMembershipLevelRatingInfoType{value: val, isSet: true}
}

func (v NullableMembershipLevelRatingInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipLevelRatingInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


