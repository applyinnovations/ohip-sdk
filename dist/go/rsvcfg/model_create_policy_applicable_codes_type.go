/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the CreatePolicyApplicableCodesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePolicyApplicableCodesType{}

// CreatePolicyApplicableCodesType The object contains the applicatble code for creation of new policy schedule.
type CreatePolicyApplicableCodesType struct {
	// create schedule for this Hotel code.
	HotelId *string `json:"hotelId,omitempty"`
	RatePlanCodes []string `json:"ratePlanCodes,omitempty"`
	GuaranteeCodes []string `json:"guaranteeCodes,omitempty"`
	BlockId *UniqueIDType `json:"blockId,omitempty"`
	// create schedule for this Block code.
	BlockCode *string `json:"blockCode,omitempty"`
	CreditRatings []string `json:"creditRatings,omitempty"`
	// create schedule for this Season Code.
	SeasonCode *string `json:"seasonCode,omitempty"`
}

// NewCreatePolicyApplicableCodesType instantiates a new CreatePolicyApplicableCodesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePolicyApplicableCodesType() *CreatePolicyApplicableCodesType {
	this := CreatePolicyApplicableCodesType{}
	return &this
}

// NewCreatePolicyApplicableCodesTypeWithDefaults instantiates a new CreatePolicyApplicableCodesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePolicyApplicableCodesTypeWithDefaults() *CreatePolicyApplicableCodesType {
	this := CreatePolicyApplicableCodesType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CreatePolicyApplicableCodesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicyApplicableCodesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CreatePolicyApplicableCodesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CreatePolicyApplicableCodesType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRatePlanCodes returns the RatePlanCodes field value if set, zero value otherwise.
func (o *CreatePolicyApplicableCodesType) GetRatePlanCodes() []string {
	if o == nil || IsNil(o.RatePlanCodes) {
		var ret []string
		return ret
	}
	return o.RatePlanCodes
}

// GetRatePlanCodesOk returns a tuple with the RatePlanCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicyApplicableCodesType) GetRatePlanCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlanCodes) {
		return nil, false
	}
	return o.RatePlanCodes, true
}

// HasRatePlanCodes returns a boolean if a field has been set.
func (o *CreatePolicyApplicableCodesType) HasRatePlanCodes() bool {
	if o != nil && !IsNil(o.RatePlanCodes) {
		return true
	}

	return false
}

// SetRatePlanCodes gets a reference to the given []string and assigns it to the RatePlanCodes field.
func (o *CreatePolicyApplicableCodesType) SetRatePlanCodes(v []string) {
	o.RatePlanCodes = v
}

// GetGuaranteeCodes returns the GuaranteeCodes field value if set, zero value otherwise.
func (o *CreatePolicyApplicableCodesType) GetGuaranteeCodes() []string {
	if o == nil || IsNil(o.GuaranteeCodes) {
		var ret []string
		return ret
	}
	return o.GuaranteeCodes
}

// GetGuaranteeCodesOk returns a tuple with the GuaranteeCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicyApplicableCodesType) GetGuaranteeCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.GuaranteeCodes) {
		return nil, false
	}
	return o.GuaranteeCodes, true
}

// HasGuaranteeCodes returns a boolean if a field has been set.
func (o *CreatePolicyApplicableCodesType) HasGuaranteeCodes() bool {
	if o != nil && !IsNil(o.GuaranteeCodes) {
		return true
	}

	return false
}

// SetGuaranteeCodes gets a reference to the given []string and assigns it to the GuaranteeCodes field.
func (o *CreatePolicyApplicableCodesType) SetGuaranteeCodes(v []string) {
	o.GuaranteeCodes = v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *CreatePolicyApplicableCodesType) GetBlockId() UniqueIDType {
	if o == nil || IsNil(o.BlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicyApplicableCodesType) GetBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *CreatePolicyApplicableCodesType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given UniqueIDType and assigns it to the BlockId field.
func (o *CreatePolicyApplicableCodesType) SetBlockId(v UniqueIDType) {
	o.BlockId = &v
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *CreatePolicyApplicableCodesType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicyApplicableCodesType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *CreatePolicyApplicableCodesType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *CreatePolicyApplicableCodesType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetCreditRatings returns the CreditRatings field value if set, zero value otherwise.
func (o *CreatePolicyApplicableCodesType) GetCreditRatings() []string {
	if o == nil || IsNil(o.CreditRatings) {
		var ret []string
		return ret
	}
	return o.CreditRatings
}

// GetCreditRatingsOk returns a tuple with the CreditRatings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicyApplicableCodesType) GetCreditRatingsOk() ([]string, bool) {
	if o == nil || IsNil(o.CreditRatings) {
		return nil, false
	}
	return o.CreditRatings, true
}

// HasCreditRatings returns a boolean if a field has been set.
func (o *CreatePolicyApplicableCodesType) HasCreditRatings() bool {
	if o != nil && !IsNil(o.CreditRatings) {
		return true
	}

	return false
}

// SetCreditRatings gets a reference to the given []string and assigns it to the CreditRatings field.
func (o *CreatePolicyApplicableCodesType) SetCreditRatings(v []string) {
	o.CreditRatings = v
}

// GetSeasonCode returns the SeasonCode field value if set, zero value otherwise.
func (o *CreatePolicyApplicableCodesType) GetSeasonCode() string {
	if o == nil || IsNil(o.SeasonCode) {
		var ret string
		return ret
	}
	return *o.SeasonCode
}

// GetSeasonCodeOk returns a tuple with the SeasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePolicyApplicableCodesType) GetSeasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SeasonCode) {
		return nil, false
	}
	return o.SeasonCode, true
}

// HasSeasonCode returns a boolean if a field has been set.
func (o *CreatePolicyApplicableCodesType) HasSeasonCode() bool {
	if o != nil && !IsNil(o.SeasonCode) {
		return true
	}

	return false
}

// SetSeasonCode gets a reference to the given string and assigns it to the SeasonCode field.
func (o *CreatePolicyApplicableCodesType) SetSeasonCode(v string) {
	o.SeasonCode = &v
}

func (o CreatePolicyApplicableCodesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePolicyApplicableCodesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RatePlanCodes) {
		toSerialize["ratePlanCodes"] = o.RatePlanCodes
	}
	if !IsNil(o.GuaranteeCodes) {
		toSerialize["guaranteeCodes"] = o.GuaranteeCodes
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.CreditRatings) {
		toSerialize["creditRatings"] = o.CreditRatings
	}
	if !IsNil(o.SeasonCode) {
		toSerialize["seasonCode"] = o.SeasonCode
	}
	return toSerialize, nil
}

type NullableCreatePolicyApplicableCodesType struct {
	value *CreatePolicyApplicableCodesType
	isSet bool
}

func (v NullableCreatePolicyApplicableCodesType) Get() *CreatePolicyApplicableCodesType {
	return v.value
}

func (v *NullableCreatePolicyApplicableCodesType) Set(val *CreatePolicyApplicableCodesType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePolicyApplicableCodesType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePolicyApplicableCodesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePolicyApplicableCodesType(val *CreatePolicyApplicableCodesType) *NullableCreatePolicyApplicableCodesType {
	return &NullableCreatePolicyApplicableCodesType{value: val, isSet: true}
}

func (v NullableCreatePolicyApplicableCodesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePolicyApplicableCodesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


