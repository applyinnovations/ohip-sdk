/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the PolicyScheduleDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyScheduleDetailType{}

// PolicyScheduleDetailType The Policy Schedule detail Type.
type PolicyScheduleDetailType struct {
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
	Policy *CodeDescriptionType `json:"policy,omitempty"`
	ApplicableCodes *PolicyApplicableCodesType `json:"applicableCodes,omitempty"`
	// Sequence for the schedule.
	Sequence *float32 `json:"sequence,omitempty"`
	// override the schedule?
	Override *bool `json:"override,omitempty"`
	// schedule Inactive?
	Inactive *bool `json:"inactive,omitempty"`
}

// NewPolicyScheduleDetailType instantiates a new PolicyScheduleDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyScheduleDetailType() *PolicyScheduleDetailType {
	this := PolicyScheduleDetailType{}
	return &this
}

// NewPolicyScheduleDetailTypeWithDefaults instantiates a new PolicyScheduleDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyScheduleDetailTypeWithDefaults() *PolicyScheduleDetailType {
	this := PolicyScheduleDetailType{}
	return &this
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *PolicyScheduleDetailType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleDetailType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *PolicyScheduleDetailType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *PolicyScheduleDetailType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *PolicyScheduleDetailType) GetPolicy() CodeDescriptionType {
	if o == nil || IsNil(o.Policy) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleDetailType) GetPolicyOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *PolicyScheduleDetailType) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given CodeDescriptionType and assigns it to the Policy field.
func (o *PolicyScheduleDetailType) SetPolicy(v CodeDescriptionType) {
	o.Policy = &v
}

// GetApplicableCodes returns the ApplicableCodes field value if set, zero value otherwise.
func (o *PolicyScheduleDetailType) GetApplicableCodes() PolicyApplicableCodesType {
	if o == nil || IsNil(o.ApplicableCodes) {
		var ret PolicyApplicableCodesType
		return ret
	}
	return *o.ApplicableCodes
}

// GetApplicableCodesOk returns a tuple with the ApplicableCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleDetailType) GetApplicableCodesOk() (*PolicyApplicableCodesType, bool) {
	if o == nil || IsNil(o.ApplicableCodes) {
		return nil, false
	}
	return o.ApplicableCodes, true
}

// HasApplicableCodes returns a boolean if a field has been set.
func (o *PolicyScheduleDetailType) HasApplicableCodes() bool {
	if o != nil && !IsNil(o.ApplicableCodes) {
		return true
	}

	return false
}

// SetApplicableCodes gets a reference to the given PolicyApplicableCodesType and assigns it to the ApplicableCodes field.
func (o *PolicyScheduleDetailType) SetApplicableCodes(v PolicyApplicableCodesType) {
	o.ApplicableCodes = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *PolicyScheduleDetailType) GetSequence() float32 {
	if o == nil || IsNil(o.Sequence) {
		var ret float32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleDetailType) GetSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *PolicyScheduleDetailType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given float32 and assigns it to the Sequence field.
func (o *PolicyScheduleDetailType) SetSequence(v float32) {
	o.Sequence = &v
}

// GetOverride returns the Override field value if set, zero value otherwise.
func (o *PolicyScheduleDetailType) GetOverride() bool {
	if o == nil || IsNil(o.Override) {
		var ret bool
		return ret
	}
	return *o.Override
}

// GetOverrideOk returns a tuple with the Override field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleDetailType) GetOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.Override) {
		return nil, false
	}
	return o.Override, true
}

// HasOverride returns a boolean if a field has been set.
func (o *PolicyScheduleDetailType) HasOverride() bool {
	if o != nil && !IsNil(o.Override) {
		return true
	}

	return false
}

// SetOverride gets a reference to the given bool and assigns it to the Override field.
func (o *PolicyScheduleDetailType) SetOverride(v bool) {
	o.Override = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *PolicyScheduleDetailType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyScheduleDetailType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *PolicyScheduleDetailType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *PolicyScheduleDetailType) SetInactive(v bool) {
	o.Inactive = &v
}

func (o PolicyScheduleDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyScheduleDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.ApplicableCodes) {
		toSerialize["applicableCodes"] = o.ApplicableCodes
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Override) {
		toSerialize["override"] = o.Override
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	return toSerialize, nil
}

type NullablePolicyScheduleDetailType struct {
	value *PolicyScheduleDetailType
	isSet bool
}

func (v NullablePolicyScheduleDetailType) Get() *PolicyScheduleDetailType {
	return v.value
}

func (v *NullablePolicyScheduleDetailType) Set(val *PolicyScheduleDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyScheduleDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyScheduleDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyScheduleDetailType(val *PolicyScheduleDetailType) *NullablePolicyScheduleDetailType {
	return &NullablePolicyScheduleDetailType{value: val, isSet: true}
}

func (v NullablePolicyScheduleDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyScheduleDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


