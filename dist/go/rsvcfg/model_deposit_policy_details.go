/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the DepositPolicyDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepositPolicyDetails{}

// DepositPolicyDetails Response for fetch Deposit Policies in hotel level.
type DepositPolicyDetails struct {
	DepositPolicies *DepositPolicyDetailsDepositPolicies `json:"depositPolicies,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewDepositPolicyDetails instantiates a new DepositPolicyDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepositPolicyDetails() *DepositPolicyDetails {
	this := DepositPolicyDetails{}
	return &this
}

// NewDepositPolicyDetailsWithDefaults instantiates a new DepositPolicyDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepositPolicyDetailsWithDefaults() *DepositPolicyDetails {
	this := DepositPolicyDetails{}
	return &this
}

// GetDepositPolicies returns the DepositPolicies field value if set, zero value otherwise.
func (o *DepositPolicyDetails) GetDepositPolicies() DepositPolicyDetailsDepositPolicies {
	if o == nil || IsNil(o.DepositPolicies) {
		var ret DepositPolicyDetailsDepositPolicies
		return ret
	}
	return *o.DepositPolicies
}

// GetDepositPoliciesOk returns a tuple with the DepositPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositPolicyDetails) GetDepositPoliciesOk() (*DepositPolicyDetailsDepositPolicies, bool) {
	if o == nil || IsNil(o.DepositPolicies) {
		return nil, false
	}
	return o.DepositPolicies, true
}

// HasDepositPolicies returns a boolean if a field has been set.
func (o *DepositPolicyDetails) HasDepositPolicies() bool {
	if o != nil && !IsNil(o.DepositPolicies) {
		return true
	}

	return false
}

// SetDepositPolicies gets a reference to the given DepositPolicyDetailsDepositPolicies and assigns it to the DepositPolicies field.
func (o *DepositPolicyDetails) SetDepositPolicies(v DepositPolicyDetailsDepositPolicies) {
	o.DepositPolicies = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DepositPolicyDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositPolicyDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DepositPolicyDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *DepositPolicyDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DepositPolicyDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositPolicyDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DepositPolicyDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *DepositPolicyDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o DepositPolicyDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepositPolicyDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepositPolicies) {
		toSerialize["depositPolicies"] = o.DepositPolicies
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableDepositPolicyDetails struct {
	value *DepositPolicyDetails
	isSet bool
}

func (v NullableDepositPolicyDetails) Get() *DepositPolicyDetails {
	return v.value
}

func (v *NullableDepositPolicyDetails) Set(val *DepositPolicyDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositPolicyDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositPolicyDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositPolicyDetails(val *DepositPolicyDetails) *NullableDepositPolicyDetails {
	return &NullableDepositPolicyDetails{value: val, isSet: true}
}

func (v NullableDepositPolicyDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositPolicyDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


