/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the AutoAttachRuleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoAttachRuleType{}

// AutoAttachRuleType Auto attachment rule details.
type AutoAttachRuleType struct {
	AttachElements *AttachElementsType `json:"attachElements,omitempty"`
	BasedOn *ResvAutoAttchBasedOn `json:"basedOn,omitempty"`
	// The name of the rule.
	Code *string `json:"code,omitempty"`
	// The property in which the rule code belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Indicates whether the rule is active or not.
	Inactive *bool `json:"inactive,omitempty"`
}

// NewAutoAttachRuleType instantiates a new AutoAttachRuleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoAttachRuleType() *AutoAttachRuleType {
	this := AutoAttachRuleType{}
	return &this
}

// NewAutoAttachRuleTypeWithDefaults instantiates a new AutoAttachRuleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoAttachRuleTypeWithDefaults() *AutoAttachRuleType {
	this := AutoAttachRuleType{}
	return &this
}

// GetAttachElements returns the AttachElements field value if set, zero value otherwise.
func (o *AutoAttachRuleType) GetAttachElements() AttachElementsType {
	if o == nil || IsNil(o.AttachElements) {
		var ret AttachElementsType
		return ret
	}
	return *o.AttachElements
}

// GetAttachElementsOk returns a tuple with the AttachElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoAttachRuleType) GetAttachElementsOk() (*AttachElementsType, bool) {
	if o == nil || IsNil(o.AttachElements) {
		return nil, false
	}
	return o.AttachElements, true
}

// HasAttachElements returns a boolean if a field has been set.
func (o *AutoAttachRuleType) HasAttachElements() bool {
	if o != nil && !IsNil(o.AttachElements) {
		return true
	}

	return false
}

// SetAttachElements gets a reference to the given AttachElementsType and assigns it to the AttachElements field.
func (o *AutoAttachRuleType) SetAttachElements(v AttachElementsType) {
	o.AttachElements = &v
}

// GetBasedOn returns the BasedOn field value if set, zero value otherwise.
func (o *AutoAttachRuleType) GetBasedOn() ResvAutoAttchBasedOn {
	if o == nil || IsNil(o.BasedOn) {
		var ret ResvAutoAttchBasedOn
		return ret
	}
	return *o.BasedOn
}

// GetBasedOnOk returns a tuple with the BasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoAttachRuleType) GetBasedOnOk() (*ResvAutoAttchBasedOn, bool) {
	if o == nil || IsNil(o.BasedOn) {
		return nil, false
	}
	return o.BasedOn, true
}

// HasBasedOn returns a boolean if a field has been set.
func (o *AutoAttachRuleType) HasBasedOn() bool {
	if o != nil && !IsNil(o.BasedOn) {
		return true
	}

	return false
}

// SetBasedOn gets a reference to the given ResvAutoAttchBasedOn and assigns it to the BasedOn field.
func (o *AutoAttachRuleType) SetBasedOn(v ResvAutoAttchBasedOn) {
	o.BasedOn = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AutoAttachRuleType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoAttachRuleType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AutoAttachRuleType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AutoAttachRuleType) SetCode(v string) {
	o.Code = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AutoAttachRuleType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoAttachRuleType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AutoAttachRuleType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AutoAttachRuleType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *AutoAttachRuleType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoAttachRuleType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *AutoAttachRuleType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *AutoAttachRuleType) SetInactive(v bool) {
	o.Inactive = &v
}

func (o AutoAttachRuleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutoAttachRuleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttachElements) {
		toSerialize["attachElements"] = o.AttachElements
	}
	if !IsNil(o.BasedOn) {
		toSerialize["basedOn"] = o.BasedOn
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	return toSerialize, nil
}

type NullableAutoAttachRuleType struct {
	value *AutoAttachRuleType
	isSet bool
}

func (v NullableAutoAttachRuleType) Get() *AutoAttachRuleType {
	return v.value
}

func (v *NullableAutoAttachRuleType) Set(val *AutoAttachRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoAttachRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoAttachRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoAttachRuleType(val *AutoAttachRuleType) *NullableAutoAttachRuleType {
	return &NullableAutoAttachRuleType{value: val, isSet: true}
}

func (v NullableAutoAttachRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoAttachRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


