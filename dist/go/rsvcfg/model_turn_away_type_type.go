/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
	"fmt"
)

// TurnAwayTypeType Simple Type for TurnAwayType Types.
type TurnAwayTypeType string

// List of turnAwayTypeType
const (
	TURNAWAYTYPETYPE_DENIAL TurnAwayTypeType = "Denial"
	TURNAWAYTYPETYPE_REGRET TurnAwayTypeType = "Regret"
)

// All allowed values of TurnAwayTypeType enum
var AllowedTurnAwayTypeTypeEnumValues = []TurnAwayTypeType{
	"Denial",
	"Regret",
}

func (v *TurnAwayTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TurnAwayTypeType(value)
	for _, existing := range AllowedTurnAwayTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TurnAwayTypeType", value)
}

// NewTurnAwayTypeTypeFromValue returns a pointer to a valid TurnAwayTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTurnAwayTypeTypeFromValue(v string) (*TurnAwayTypeType, error) {
	ev := TurnAwayTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TurnAwayTypeType: valid values are %v", v, AllowedTurnAwayTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TurnAwayTypeType) IsValid() bool {
	for _, existing := range AllowedTurnAwayTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to turnAwayTypeType value
func (v TurnAwayTypeType) Ptr() *TurnAwayTypeType {
	return &v
}

type NullableTurnAwayTypeType struct {
	value *TurnAwayTypeType
	isSet bool
}

func (v NullableTurnAwayTypeType) Get() *TurnAwayTypeType {
	return v.value
}

func (v *NullableTurnAwayTypeType) Set(val *TurnAwayTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTurnAwayTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTurnAwayTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTurnAwayTypeType(val *TurnAwayTypeType) *NullableTurnAwayTypeType {
	return &NullableTurnAwayTypeType{value: val, isSet: true}
}

func (v NullableTurnAwayTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTurnAwayTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

