/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the RoomFeatureRatingInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomFeatureRatingInfoType{}

// RoomFeatureRatingInfoType Rating details for room features.
type RoomFeatureRatingInfoType struct {
	// Property code of the room feature.
	HotelId *string `json:"hotelId,omitempty"`
	Rating *RoomFeatureRatingType `json:"rating,omitempty"`
	RoomFeature *CodeDescriptionType `json:"roomFeature,omitempty"`
}

// NewRoomFeatureRatingInfoType instantiates a new RoomFeatureRatingInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomFeatureRatingInfoType() *RoomFeatureRatingInfoType {
	this := RoomFeatureRatingInfoType{}
	return &this
}

// NewRoomFeatureRatingInfoTypeWithDefaults instantiates a new RoomFeatureRatingInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomFeatureRatingInfoTypeWithDefaults() *RoomFeatureRatingInfoType {
	this := RoomFeatureRatingInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomFeatureRatingInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureRatingInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomFeatureRatingInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomFeatureRatingInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *RoomFeatureRatingInfoType) GetRating() RoomFeatureRatingType {
	if o == nil || IsNil(o.Rating) {
		var ret RoomFeatureRatingType
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureRatingInfoType) GetRatingOk() (*RoomFeatureRatingType, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *RoomFeatureRatingInfoType) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given RoomFeatureRatingType and assigns it to the Rating field.
func (o *RoomFeatureRatingInfoType) SetRating(v RoomFeatureRatingType) {
	o.Rating = &v
}

// GetRoomFeature returns the RoomFeature field value if set, zero value otherwise.
func (o *RoomFeatureRatingInfoType) GetRoomFeature() CodeDescriptionType {
	if o == nil || IsNil(o.RoomFeature) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.RoomFeature
}

// GetRoomFeatureOk returns a tuple with the RoomFeature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomFeatureRatingInfoType) GetRoomFeatureOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RoomFeature) {
		return nil, false
	}
	return o.RoomFeature, true
}

// HasRoomFeature returns a boolean if a field has been set.
func (o *RoomFeatureRatingInfoType) HasRoomFeature() bool {
	if o != nil && !IsNil(o.RoomFeature) {
		return true
	}

	return false
}

// SetRoomFeature gets a reference to the given CodeDescriptionType and assigns it to the RoomFeature field.
func (o *RoomFeatureRatingInfoType) SetRoomFeature(v CodeDescriptionType) {
	o.RoomFeature = &v
}

func (o RoomFeatureRatingInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomFeatureRatingInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.RoomFeature) {
		toSerialize["roomFeature"] = o.RoomFeature
	}
	return toSerialize, nil
}

type NullableRoomFeatureRatingInfoType struct {
	value *RoomFeatureRatingInfoType
	isSet bool
}

func (v NullableRoomFeatureRatingInfoType) Get() *RoomFeatureRatingInfoType {
	return v.value
}

func (v *NullableRoomFeatureRatingInfoType) Set(val *RoomFeatureRatingInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomFeatureRatingInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomFeatureRatingInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomFeatureRatingInfoType(val *RoomFeatureRatingInfoType) *NullableRoomFeatureRatingInfoType {
	return &NullableRoomFeatureRatingInfoType{value: val, isSet: true}
}

func (v NullableRoomFeatureRatingInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomFeatureRatingInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


