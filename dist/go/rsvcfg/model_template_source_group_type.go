/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the TemplateSourceGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateSourceGroupType{}

// TemplateSourceGroupType Common code type for code, description, seq and inactive
type TemplateSourceGroupType struct {
	Description *TranslationTextType50 `json:"description,omitempty"`
	// Display sequence for the code type.
	Sequence *int32 `json:"sequence,omitempty"`
	// Code for the code type.
	Code *string `json:"code,omitempty"`
	// Indicates the code type is inactive or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Chain code for the code type.
	ChainCode *string `json:"chainCode,omitempty"`
	// Collection of Template Source Codes.
	TemplateSourceCode []TemplateSourceCodeType `json:"templateSourceCode,omitempty"`
	// Indicates if market code is originated from Central.
	Central *bool `json:"central,omitempty"`
	ManagedBy *ManagedByOptions `json:"managedBy,omitempty"`
}

// NewTemplateSourceGroupType instantiates a new TemplateSourceGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateSourceGroupType() *TemplateSourceGroupType {
	this := TemplateSourceGroupType{}
	return &this
}

// NewTemplateSourceGroupTypeWithDefaults instantiates a new TemplateSourceGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateSourceGroupTypeWithDefaults() *TemplateSourceGroupType {
	this := TemplateSourceGroupType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetDescription() TranslationTextType50 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType50
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetDescriptionOk() (*TranslationTextType50, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType50 and assigns it to the Description field.
func (o *TemplateSourceGroupType) SetDescription(v TranslationTextType50) {
	o.Description = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *TemplateSourceGroupType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TemplateSourceGroupType) SetCode(v string) {
	o.Code = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *TemplateSourceGroupType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *TemplateSourceGroupType) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetTemplateSourceCode returns the TemplateSourceCode field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetTemplateSourceCode() []TemplateSourceCodeType {
	if o == nil || IsNil(o.TemplateSourceCode) {
		var ret []TemplateSourceCodeType
		return ret
	}
	return o.TemplateSourceCode
}

// GetTemplateSourceCodeOk returns a tuple with the TemplateSourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetTemplateSourceCodeOk() ([]TemplateSourceCodeType, bool) {
	if o == nil || IsNil(o.TemplateSourceCode) {
		return nil, false
	}
	return o.TemplateSourceCode, true
}

// HasTemplateSourceCode returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasTemplateSourceCode() bool {
	if o != nil && !IsNil(o.TemplateSourceCode) {
		return true
	}

	return false
}

// SetTemplateSourceCode gets a reference to the given []TemplateSourceCodeType and assigns it to the TemplateSourceCode field.
func (o *TemplateSourceGroupType) SetTemplateSourceCode(v []TemplateSourceCodeType) {
	o.TemplateSourceCode = v
}

// GetCentral returns the Central field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetCentral() bool {
	if o == nil || IsNil(o.Central) {
		var ret bool
		return ret
	}
	return *o.Central
}

// GetCentralOk returns a tuple with the Central field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetCentralOk() (*bool, bool) {
	if o == nil || IsNil(o.Central) {
		return nil, false
	}
	return o.Central, true
}

// HasCentral returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasCentral() bool {
	if o != nil && !IsNil(o.Central) {
		return true
	}

	return false
}

// SetCentral gets a reference to the given bool and assigns it to the Central field.
func (o *TemplateSourceGroupType) SetCentral(v bool) {
	o.Central = &v
}

// GetManagedBy returns the ManagedBy field value if set, zero value otherwise.
func (o *TemplateSourceGroupType) GetManagedBy() ManagedByOptions {
	if o == nil || IsNil(o.ManagedBy) {
		var ret ManagedByOptions
		return ret
	}
	return *o.ManagedBy
}

// GetManagedByOk returns a tuple with the ManagedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateSourceGroupType) GetManagedByOk() (*ManagedByOptions, bool) {
	if o == nil || IsNil(o.ManagedBy) {
		return nil, false
	}
	return o.ManagedBy, true
}

// HasManagedBy returns a boolean if a field has been set.
func (o *TemplateSourceGroupType) HasManagedBy() bool {
	if o != nil && !IsNil(o.ManagedBy) {
		return true
	}

	return false
}

// SetManagedBy gets a reference to the given ManagedByOptions and assigns it to the ManagedBy field.
func (o *TemplateSourceGroupType) SetManagedBy(v ManagedByOptions) {
	o.ManagedBy = &v
}

func (o TemplateSourceGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateSourceGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.TemplateSourceCode) {
		toSerialize["templateSourceCode"] = o.TemplateSourceCode
	}
	if !IsNil(o.Central) {
		toSerialize["central"] = o.Central
	}
	if !IsNil(o.ManagedBy) {
		toSerialize["managedBy"] = o.ManagedBy
	}
	return toSerialize, nil
}

type NullableTemplateSourceGroupType struct {
	value *TemplateSourceGroupType
	isSet bool
}

func (v NullableTemplateSourceGroupType) Get() *TemplateSourceGroupType {
	return v.value
}

func (v *NullableTemplateSourceGroupType) Set(val *TemplateSourceGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateSourceGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateSourceGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateSourceGroupType(val *TemplateSourceGroupType) *NullableTemplateSourceGroupType {
	return &NullableTemplateSourceGroupType{value: val, isSet: true}
}

func (v NullableTemplateSourceGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateSourceGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


