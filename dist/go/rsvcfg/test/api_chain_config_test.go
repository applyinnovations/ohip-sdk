/*
OPERA Cloud Reservation Master Data Management API

Testing ChainConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rsvcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rsvcfg"
)

func Test_rsvcfg_ChainConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigApiService ChangeBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockConversionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeBlockConversions(context.Background(), blockConversionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRankingsCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeBlockRankings(context.Background(), blockRankingsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeGlobalActionCodes(context.Background(), actionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService ChangeScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scriptCode string

		resp, httpRes, err := apiClient.ChainConfigApi.ChangeScripts(context.Background(), scriptCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteBookingTypes(context.Background(), bookingTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancellationCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteCancellationCodes(context.Background(), cancellationCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountReasonsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteDiscountReasons(context.Background(), discountReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entryPointsId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteEntryPoints(context.Background(), entryPointsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moveReasonCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteMoveReasonCodes(context.Background(), moveReasonCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var originCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteOriginCodes(context.Background(), originCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeletePurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var purposeOfStaysId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeletePurposeOfStays(context.Background(), purposeOfStaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteWaitlistCodes(context.Background(), waitlistCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService DeleteWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistPrioritiesId string

		resp, httpRes, err := apiClient.ChainConfigApi.DeleteWaitlistPriorities(context.Background(), waitlistPrioritiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetBlockConversions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetBlockRankings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetBookingTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetCancellationCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetDiscountReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetEntryPoints(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetGlobalActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetMoveReasonCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetOriginCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetPurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetPurposeOfStays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetScripts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetWaitlistCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService GetWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.GetWaitlistPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostBlockConversions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostBlockRankings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostBookingTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostCancellationCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostDiscountReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostEntryPoints(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostGlobalActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostMoveReasonCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostOriginCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostPurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostPurposeOfStays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostScripts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostWaitlistCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PostWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigApi.PostWaitlistPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingTypesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutBookingTypes(context.Background(), bookingTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancellationCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutCancellationCodes(context.Background(), cancellationCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountReasonsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutDiscountReasons(context.Background(), discountReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entryPointsId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutEntryPoints(context.Background(), entryPointsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moveReasonCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutMoveReasonCodes(context.Background(), moveReasonCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var originCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutOriginCodes(context.Background(), originCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutPurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var purposeOfStaysId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutPurposeOfStays(context.Background(), purposeOfStaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistCodesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutWaitlistCodes(context.Background(), waitlistCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService PutWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistPrioritiesId string

		resp, httpRes, err := apiClient.ChainConfigApi.PutWaitlistPriorities(context.Background(), waitlistPrioritiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockConversionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveBlockConversions(context.Background(), blockConversionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRankingsCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveBlockRankings(context.Background(), blockRankingsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveGlobalActionCodes(context.Background(), actionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigApiService RemoveScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scriptCode string

		resp, httpRes, err := apiClient.ChainConfigApi.RemoveScripts(context.Background(), scriptCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
