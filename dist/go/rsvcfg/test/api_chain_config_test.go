/*
OPERA Cloud Reservation Master Data Management API

Testing ChainConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rsvcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rsvcfg"
)

func Test_rsvcfg_ChainConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigAPIService ChangeBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockConversionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeBlockConversions(context.Background(), blockConversionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRankingsCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeBlockRankings(context.Background(), blockRankingsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeGlobalActionCodes(context.Background(), actionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService ChangeScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scriptCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.ChangeScripts(context.Background(), scriptCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteBookingTypes(context.Background(), bookingTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancellationCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteCancellationCodes(context.Background(), cancellationCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteDiscountReasons(context.Background(), discountReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entryPointsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteEntryPoints(context.Background(), entryPointsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moveReasonCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteMoveReasonCodes(context.Background(), moveReasonCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var originCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteOriginCodes(context.Background(), originCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeletePurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var purposeOfStaysId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeletePurposeOfStays(context.Background(), purposeOfStaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteWaitlistCodes(context.Background(), waitlistCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistPrioritiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteWaitlistPriorities(context.Background(), waitlistPrioritiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBlockConversions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBlockRankings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBookingTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetCancellationCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetDiscountReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetEntryPoints(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetGlobalActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetMoveReasonCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetOriginCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetPurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetPurposeOfStays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetScripts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetWaitlistCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetWaitlistPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBlockConversions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBlockRankings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBookingTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostCancellationCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostDiscountReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostEntryPoints(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostGlobalActionCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostMoveReasonCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostOriginCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostPurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostPurposeOfStays(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostScripts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostWaitlistCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostWaitlistPriorities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutBookingTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bookingTypesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutBookingTypes(context.Background(), bookingTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutCancellationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cancellationCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutCancellationCodes(context.Background(), cancellationCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutDiscountReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutDiscountReasons(context.Background(), discountReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutEntryPoints", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var entryPointsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutEntryPoints(context.Background(), entryPointsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutMoveReasonCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var moveReasonCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutMoveReasonCodes(context.Background(), moveReasonCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutOriginCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var originCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutOriginCodes(context.Background(), originCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutPurposeOfStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var purposeOfStaysId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutPurposeOfStays(context.Background(), purposeOfStaysId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutWaitlistCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutWaitlistCodes(context.Background(), waitlistCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutWaitlistPriorities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var waitlistPrioritiesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutWaitlistPriorities(context.Background(), waitlistPrioritiesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveBlockConversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockConversionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveBlockConversions(context.Background(), blockConversionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveBlockRankings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRankingsCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveBlockRankings(context.Background(), blockRankingsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveGlobalActionCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveGlobalActionCodes(context.Background(), actionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService RemoveScripts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scriptCode string

		resp, httpRes, err := apiClient.ChainConfigAPI.RemoveScripts(context.Background(), scriptCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
