/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the ECouponCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECouponCodeType{}

// ECouponCodeType eCoupon code detailed information.
type ECouponCodeType struct {
	// eCoupon code to be configured.
	Code *string `json:"code,omitempty"`
	// Defines the default quantity of the eCoupon Code.
	DefaultQty *int32 `json:"defaultQty,omitempty"`
	// Description of the eCoupon code to be configured.
	Description *string `json:"description,omitempty"`
	// Sequence for eCoupon code.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Property for which the eCoupon code belongs to.
	Hotel *string `json:"hotel,omitempty"`
	// Indicates whether the eCoupon code is active or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Pseudo Room where the postings should be diverted.
	PostingRoom *string `json:"postingRoom,omitempty"`
	RatePlans []string `json:"ratePlans,omitempty"`
	// Determines whether the eCoupon Code is eligible for Welcome Offer or not.
	WelcomeOffer *bool `json:"welcomeOffer,omitempty"`
}

// NewECouponCodeType instantiates a new ECouponCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECouponCodeType() *ECouponCodeType {
	this := ECouponCodeType{}
	return &this
}

// NewECouponCodeTypeWithDefaults instantiates a new ECouponCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECouponCodeTypeWithDefaults() *ECouponCodeType {
	this := ECouponCodeType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ECouponCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ECouponCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ECouponCodeType) SetCode(v string) {
	o.Code = &v
}

// GetDefaultQty returns the DefaultQty field value if set, zero value otherwise.
func (o *ECouponCodeType) GetDefaultQty() int32 {
	if o == nil || IsNil(o.DefaultQty) {
		var ret int32
		return ret
	}
	return *o.DefaultQty
}

// GetDefaultQtyOk returns a tuple with the DefaultQty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetDefaultQtyOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultQty) {
		return nil, false
	}
	return o.DefaultQty, true
}

// HasDefaultQty returns a boolean if a field has been set.
func (o *ECouponCodeType) HasDefaultQty() bool {
	if o != nil && !IsNil(o.DefaultQty) {
		return true
	}

	return false
}

// SetDefaultQty gets a reference to the given int32 and assigns it to the DefaultQty field.
func (o *ECouponCodeType) SetDefaultQty(v int32) {
	o.DefaultQty = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ECouponCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ECouponCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ECouponCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *ECouponCodeType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *ECouponCodeType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *ECouponCodeType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetHotel returns the Hotel field value if set, zero value otherwise.
func (o *ECouponCodeType) GetHotel() string {
	if o == nil || IsNil(o.Hotel) {
		var ret string
		return ret
	}
	return *o.Hotel
}

// GetHotelOk returns a tuple with the Hotel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetHotelOk() (*string, bool) {
	if o == nil || IsNil(o.Hotel) {
		return nil, false
	}
	return o.Hotel, true
}

// HasHotel returns a boolean if a field has been set.
func (o *ECouponCodeType) HasHotel() bool {
	if o != nil && !IsNil(o.Hotel) {
		return true
	}

	return false
}

// SetHotel gets a reference to the given string and assigns it to the Hotel field.
func (o *ECouponCodeType) SetHotel(v string) {
	o.Hotel = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ECouponCodeType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ECouponCodeType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ECouponCodeType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetPostingRoom returns the PostingRoom field value if set, zero value otherwise.
func (o *ECouponCodeType) GetPostingRoom() string {
	if o == nil || IsNil(o.PostingRoom) {
		var ret string
		return ret
	}
	return *o.PostingRoom
}

// GetPostingRoomOk returns a tuple with the PostingRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetPostingRoomOk() (*string, bool) {
	if o == nil || IsNil(o.PostingRoom) {
		return nil, false
	}
	return o.PostingRoom, true
}

// HasPostingRoom returns a boolean if a field has been set.
func (o *ECouponCodeType) HasPostingRoom() bool {
	if o != nil && !IsNil(o.PostingRoom) {
		return true
	}

	return false
}

// SetPostingRoom gets a reference to the given string and assigns it to the PostingRoom field.
func (o *ECouponCodeType) SetPostingRoom(v string) {
	o.PostingRoom = &v
}

// GetRatePlans returns the RatePlans field value if set, zero value otherwise.
func (o *ECouponCodeType) GetRatePlans() []string {
	if o == nil || IsNil(o.RatePlans) {
		var ret []string
		return ret
	}
	return o.RatePlans
}

// GetRatePlansOk returns a tuple with the RatePlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetRatePlansOk() ([]string, bool) {
	if o == nil || IsNil(o.RatePlans) {
		return nil, false
	}
	return o.RatePlans, true
}

// HasRatePlans returns a boolean if a field has been set.
func (o *ECouponCodeType) HasRatePlans() bool {
	if o != nil && !IsNil(o.RatePlans) {
		return true
	}

	return false
}

// SetRatePlans gets a reference to the given []string and assigns it to the RatePlans field.
func (o *ECouponCodeType) SetRatePlans(v []string) {
	o.RatePlans = v
}

// GetWelcomeOffer returns the WelcomeOffer field value if set, zero value otherwise.
func (o *ECouponCodeType) GetWelcomeOffer() bool {
	if o == nil || IsNil(o.WelcomeOffer) {
		var ret bool
		return ret
	}
	return *o.WelcomeOffer
}

// GetWelcomeOfferOk returns a tuple with the WelcomeOffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECouponCodeType) GetWelcomeOfferOk() (*bool, bool) {
	if o == nil || IsNil(o.WelcomeOffer) {
		return nil, false
	}
	return o.WelcomeOffer, true
}

// HasWelcomeOffer returns a boolean if a field has been set.
func (o *ECouponCodeType) HasWelcomeOffer() bool {
	if o != nil && !IsNil(o.WelcomeOffer) {
		return true
	}

	return false
}

// SetWelcomeOffer gets a reference to the given bool and assigns it to the WelcomeOffer field.
func (o *ECouponCodeType) SetWelcomeOffer(v bool) {
	o.WelcomeOffer = &v
}

func (o ECouponCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECouponCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DefaultQty) {
		toSerialize["defaultQty"] = o.DefaultQty
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.Hotel) {
		toSerialize["hotel"] = o.Hotel
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.PostingRoom) {
		toSerialize["postingRoom"] = o.PostingRoom
	}
	if !IsNil(o.RatePlans) {
		toSerialize["ratePlans"] = o.RatePlans
	}
	if !IsNil(o.WelcomeOffer) {
		toSerialize["welcomeOffer"] = o.WelcomeOffer
	}
	return toSerialize, nil
}

type NullableECouponCodeType struct {
	value *ECouponCodeType
	isSet bool
}

func (v NullableECouponCodeType) Get() *ECouponCodeType {
	return v.value
}

func (v *NullableECouponCodeType) Set(val *ECouponCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableECouponCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableECouponCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECouponCodeType(val *ECouponCodeType) *NullableECouponCodeType {
	return &NullableECouponCodeType{value: val, isSet: true}
}

func (v NullableECouponCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECouponCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


