/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the HotelConfigDepositPoliciesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelConfigDepositPoliciesType{}

// HotelConfigDepositPoliciesType Collection of Deposit Policy Configurations of a hotel.
type HotelConfigDepositPoliciesType struct {
	// Collection of Deposit Policy configurations of a hotel.
	DepositPolicy []ConfigDepositPolicyType `json:"depositPolicy,omitempty"`
	// Hotel code of the collection of Deposit Policy configurations.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewHotelConfigDepositPoliciesType instantiates a new HotelConfigDepositPoliciesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelConfigDepositPoliciesType() *HotelConfigDepositPoliciesType {
	this := HotelConfigDepositPoliciesType{}
	return &this
}

// NewHotelConfigDepositPoliciesTypeWithDefaults instantiates a new HotelConfigDepositPoliciesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelConfigDepositPoliciesTypeWithDefaults() *HotelConfigDepositPoliciesType {
	this := HotelConfigDepositPoliciesType{}
	return &this
}

// GetDepositPolicy returns the DepositPolicy field value if set, zero value otherwise.
func (o *HotelConfigDepositPoliciesType) GetDepositPolicy() []ConfigDepositPolicyType {
	if o == nil || IsNil(o.DepositPolicy) {
		var ret []ConfigDepositPolicyType
		return ret
	}
	return o.DepositPolicy
}

// GetDepositPolicyOk returns a tuple with the DepositPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelConfigDepositPoliciesType) GetDepositPolicyOk() ([]ConfigDepositPolicyType, bool) {
	if o == nil || IsNil(o.DepositPolicy) {
		return nil, false
	}
	return o.DepositPolicy, true
}

// HasDepositPolicy returns a boolean if a field has been set.
func (o *HotelConfigDepositPoliciesType) HasDepositPolicy() bool {
	if o != nil && !IsNil(o.DepositPolicy) {
		return true
	}

	return false
}

// SetDepositPolicy gets a reference to the given []ConfigDepositPolicyType and assigns it to the DepositPolicy field.
func (o *HotelConfigDepositPoliciesType) SetDepositPolicy(v []ConfigDepositPolicyType) {
	o.DepositPolicy = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelConfigDepositPoliciesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelConfigDepositPoliciesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelConfigDepositPoliciesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelConfigDepositPoliciesType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o HotelConfigDepositPoliciesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelConfigDepositPoliciesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepositPolicy) {
		toSerialize["depositPolicy"] = o.DepositPolicy
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableHotelConfigDepositPoliciesType struct {
	value *HotelConfigDepositPoliciesType
	isSet bool
}

func (v NullableHotelConfigDepositPoliciesType) Get() *HotelConfigDepositPoliciesType {
	return v.value
}

func (v *NullableHotelConfigDepositPoliciesType) Set(val *HotelConfigDepositPoliciesType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelConfigDepositPoliciesType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelConfigDepositPoliciesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelConfigDepositPoliciesType(val *HotelConfigDepositPoliciesType) *NullableHotelConfigDepositPoliciesType {
	return &NullableHotelConfigDepositPoliciesType{value: val, isSet: true}
}

func (v NullableHotelConfigDepositPoliciesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelConfigDepositPoliciesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


