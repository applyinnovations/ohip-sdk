/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the MoveReasonCodesCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveReasonCodesCriteria{}

// MoveReasonCodesCriteria Request object for creating Move Reason Codes.
type MoveReasonCodesCriteria struct {
	Links []InstanceLink `json:"links,omitempty"`
	// List of Move Reason Codes.
	MoveReasonCodes []MoveReasonCodeType `json:"moveReasonCodes,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewMoveReasonCodesCriteria instantiates a new MoveReasonCodesCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveReasonCodesCriteria() *MoveReasonCodesCriteria {
	this := MoveReasonCodesCriteria{}
	return &this
}

// NewMoveReasonCodesCriteriaWithDefaults instantiates a new MoveReasonCodesCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveReasonCodesCriteriaWithDefaults() *MoveReasonCodesCriteria {
	this := MoveReasonCodesCriteria{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *MoveReasonCodesCriteria) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReasonCodesCriteria) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *MoveReasonCodesCriteria) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *MoveReasonCodesCriteria) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetMoveReasonCodes returns the MoveReasonCodes field value if set, zero value otherwise.
func (o *MoveReasonCodesCriteria) GetMoveReasonCodes() []MoveReasonCodeType {
	if o == nil || IsNil(o.MoveReasonCodes) {
		var ret []MoveReasonCodeType
		return ret
	}
	return o.MoveReasonCodes
}

// GetMoveReasonCodesOk returns a tuple with the MoveReasonCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReasonCodesCriteria) GetMoveReasonCodesOk() ([]MoveReasonCodeType, bool) {
	if o == nil || IsNil(o.MoveReasonCodes) {
		return nil, false
	}
	return o.MoveReasonCodes, true
}

// HasMoveReasonCodes returns a boolean if a field has been set.
func (o *MoveReasonCodesCriteria) HasMoveReasonCodes() bool {
	if o != nil && !IsNil(o.MoveReasonCodes) {
		return true
	}

	return false
}

// SetMoveReasonCodes gets a reference to the given []MoveReasonCodeType and assigns it to the MoveReasonCodes field.
func (o *MoveReasonCodesCriteria) SetMoveReasonCodes(v []MoveReasonCodeType) {
	o.MoveReasonCodes = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *MoveReasonCodesCriteria) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveReasonCodesCriteria) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *MoveReasonCodesCriteria) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *MoveReasonCodesCriteria) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o MoveReasonCodesCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveReasonCodesCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.MoveReasonCodes) {
		toSerialize["moveReasonCodes"] = o.MoveReasonCodes
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableMoveReasonCodesCriteria struct {
	value *MoveReasonCodesCriteria
	isSet bool
}

func (v NullableMoveReasonCodesCriteria) Get() *MoveReasonCodesCriteria {
	return v.value
}

func (v *NullableMoveReasonCodesCriteria) Set(val *MoveReasonCodesCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveReasonCodesCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveReasonCodesCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveReasonCodesCriteria(val *MoveReasonCodesCriteria) *NullableMoveReasonCodesCriteria {
	return &NullableMoveReasonCodesCriteria{value: val, isSet: true}
}

func (v NullableMoveReasonCodesCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveReasonCodesCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


