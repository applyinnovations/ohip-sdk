/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the TranslationTextType50 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslationTextType50{}

// TranslationTextType50 Contains Multiple translated texts and language codes.
type TranslationTextType50 struct {
	// Default text with Character length from 0 to 50.
	DefaultText *string `json:"defaultText,omitempty"`
	// Language code for the translation.
	TranslatedTexts []TranslationsTextTypeInner `json:"translatedTexts,omitempty"`
}

// NewTranslationTextType50 instantiates a new TranslationTextType50 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslationTextType50() *TranslationTextType50 {
	this := TranslationTextType50{}
	return &this
}

// NewTranslationTextType50WithDefaults instantiates a new TranslationTextType50 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslationTextType50WithDefaults() *TranslationTextType50 {
	this := TranslationTextType50{}
	return &this
}

// GetDefaultText returns the DefaultText field value if set, zero value otherwise.
func (o *TranslationTextType50) GetDefaultText() string {
	if o == nil || IsNil(o.DefaultText) {
		var ret string
		return ret
	}
	return *o.DefaultText
}

// GetDefaultTextOk returns a tuple with the DefaultText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslationTextType50) GetDefaultTextOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultText) {
		return nil, false
	}
	return o.DefaultText, true
}

// HasDefaultText returns a boolean if a field has been set.
func (o *TranslationTextType50) HasDefaultText() bool {
	if o != nil && !IsNil(o.DefaultText) {
		return true
	}

	return false
}

// SetDefaultText gets a reference to the given string and assigns it to the DefaultText field.
func (o *TranslationTextType50) SetDefaultText(v string) {
	o.DefaultText = &v
}

// GetTranslatedTexts returns the TranslatedTexts field value if set, zero value otherwise.
func (o *TranslationTextType50) GetTranslatedTexts() []TranslationsTextTypeInner {
	if o == nil || IsNil(o.TranslatedTexts) {
		var ret []TranslationsTextTypeInner
		return ret
	}
	return o.TranslatedTexts
}

// GetTranslatedTextsOk returns a tuple with the TranslatedTexts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslationTextType50) GetTranslatedTextsOk() ([]TranslationsTextTypeInner, bool) {
	if o == nil || IsNil(o.TranslatedTexts) {
		return nil, false
	}
	return o.TranslatedTexts, true
}

// HasTranslatedTexts returns a boolean if a field has been set.
func (o *TranslationTextType50) HasTranslatedTexts() bool {
	if o != nil && !IsNil(o.TranslatedTexts) {
		return true
	}

	return false
}

// SetTranslatedTexts gets a reference to the given []TranslationsTextTypeInner and assigns it to the TranslatedTexts field.
func (o *TranslationTextType50) SetTranslatedTexts(v []TranslationsTextTypeInner) {
	o.TranslatedTexts = v
}

func (o TranslationTextType50) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslationTextType50) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultText) {
		toSerialize["defaultText"] = o.DefaultText
	}
	if !IsNil(o.TranslatedTexts) {
		toSerialize["translatedTexts"] = o.TranslatedTexts
	}
	return toSerialize, nil
}

type NullableTranslationTextType50 struct {
	value *TranslationTextType50
	isSet bool
}

func (v NullableTranslationTextType50) Get() *TranslationTextType50 {
	return v.value
}

func (v *NullableTranslationTextType50) Set(val *TranslationTextType50) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslationTextType50) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslationTextType50) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslationTextType50(val *TranslationTextType50) *NullableTranslationTextType50 {
	return &NullableTranslationTextType50{value: val, isSet: true}
}

func (v NullableTranslationTextType50) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslationTextType50) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


