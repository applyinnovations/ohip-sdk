/*
OPERA Cloud Reservation Master Data Management API

APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsvcfg

import (
	"encoding/json"
)

// checks if the TraceTextChangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TraceTextChangeType{}

// TraceTextChangeType Type provides trace text that will be modified.
type TraceTextChangeType struct {
	NewTraceText *TraceTextType `json:"newTraceText,omitempty"`
	OriginalTraceText *TraceTextType `json:"originalTraceText,omitempty"`
}

// NewTraceTextChangeType instantiates a new TraceTextChangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceTextChangeType() *TraceTextChangeType {
	this := TraceTextChangeType{}
	return &this
}

// NewTraceTextChangeTypeWithDefaults instantiates a new TraceTextChangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceTextChangeTypeWithDefaults() *TraceTextChangeType {
	this := TraceTextChangeType{}
	return &this
}

// GetNewTraceText returns the NewTraceText field value if set, zero value otherwise.
func (o *TraceTextChangeType) GetNewTraceText() TraceTextType {
	if o == nil || IsNil(o.NewTraceText) {
		var ret TraceTextType
		return ret
	}
	return *o.NewTraceText
}

// GetNewTraceTextOk returns a tuple with the NewTraceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTextChangeType) GetNewTraceTextOk() (*TraceTextType, bool) {
	if o == nil || IsNil(o.NewTraceText) {
		return nil, false
	}
	return o.NewTraceText, true
}

// HasNewTraceText returns a boolean if a field has been set.
func (o *TraceTextChangeType) HasNewTraceText() bool {
	if o != nil && !IsNil(o.NewTraceText) {
		return true
	}

	return false
}

// SetNewTraceText gets a reference to the given TraceTextType and assigns it to the NewTraceText field.
func (o *TraceTextChangeType) SetNewTraceText(v TraceTextType) {
	o.NewTraceText = &v
}

// GetOriginalTraceText returns the OriginalTraceText field value if set, zero value otherwise.
func (o *TraceTextChangeType) GetOriginalTraceText() TraceTextType {
	if o == nil || IsNil(o.OriginalTraceText) {
		var ret TraceTextType
		return ret
	}
	return *o.OriginalTraceText
}

// GetOriginalTraceTextOk returns a tuple with the OriginalTraceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceTextChangeType) GetOriginalTraceTextOk() (*TraceTextType, bool) {
	if o == nil || IsNil(o.OriginalTraceText) {
		return nil, false
	}
	return o.OriginalTraceText, true
}

// HasOriginalTraceText returns a boolean if a field has been set.
func (o *TraceTextChangeType) HasOriginalTraceText() bool {
	if o != nil && !IsNil(o.OriginalTraceText) {
		return true
	}

	return false
}

// SetOriginalTraceText gets a reference to the given TraceTextType and assigns it to the OriginalTraceText field.
func (o *TraceTextChangeType) SetOriginalTraceText(v TraceTextType) {
	o.OriginalTraceText = &v
}

func (o TraceTextChangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TraceTextChangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewTraceText) {
		toSerialize["newTraceText"] = o.NewTraceText
	}
	if !IsNil(o.OriginalTraceText) {
		toSerialize["originalTraceText"] = o.OriginalTraceText
	}
	return toSerialize, nil
}

type NullableTraceTextChangeType struct {
	value *TraceTextChangeType
	isSet bool
}

func (v NullableTraceTextChangeType) Get() *TraceTextChangeType {
	return v.value
}

func (v *NullableTraceTextChangeType) Set(val *TraceTextChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceTextChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceTextChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceTextChangeType(val *TraceTextChangeType) *NullableTraceTextChangeType {
	return &NullableTraceTextChangeType{value: val, isSet: true}
}

func (v NullableTraceTextChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceTextChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


