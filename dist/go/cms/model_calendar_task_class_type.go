/*
OPERA Cloud API for Customer Management Service

This API deals with the different aspect of the CustomerManagement.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cms

import (
	"encoding/json"
	"fmt"
)

// CalendarTaskClassType Defines classification codes of calendar task.
type CalendarTaskClassType string

// List of calendarTaskClassType
const (
	CALENDARTASKCLASSTYPE_CORRESPONDENCE CalendarTaskClassType = "Correspondence"
	CALENDARTASKCLASSTYPE_MEETING CalendarTaskClassType = "Meeting"
	CALENDARTASKCLASSTYPE_TODOLIST CalendarTaskClassType = "Todolist"
	CALENDARTASKCLASSTYPE_CALL CalendarTaskClassType = "Call"
	CALENDARTASKCLASSTYPE_APPOINTMENT CalendarTaskClassType = "Appointment"
)

// All allowed values of CalendarTaskClassType enum
var AllowedCalendarTaskClassTypeEnumValues = []CalendarTaskClassType{
	"Correspondence",
	"Meeting",
	"Todolist",
	"Call",
	"Appointment",
}

func (v *CalendarTaskClassType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalendarTaskClassType(value)
	for _, existing := range AllowedCalendarTaskClassTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalendarTaskClassType", value)
}

// NewCalendarTaskClassTypeFromValue returns a pointer to a valid CalendarTaskClassType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalendarTaskClassTypeFromValue(v string) (*CalendarTaskClassType, error) {
	ev := CalendarTaskClassType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalendarTaskClassType: valid values are %v", v, AllowedCalendarTaskClassTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalendarTaskClassType) IsValid() bool {
	for _, existing := range AllowedCalendarTaskClassTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to calendarTaskClassType value
func (v CalendarTaskClassType) Ptr() *CalendarTaskClassType {
	return &v
}

type NullableCalendarTaskClassType struct {
	value *CalendarTaskClassType
	isSet bool
}

func (v NullableCalendarTaskClassType) Get() *CalendarTaskClassType {
	return v.value
}

func (v *NullableCalendarTaskClassType) Set(val *CalendarTaskClassType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarTaskClassType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarTaskClassType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarTaskClassType(val *CalendarTaskClassType) *NullableCalendarTaskClassType {
	return &NullableCalendarTaskClassType{value: val, isSet: true}
}

func (v NullableCalendarTaskClassType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarTaskClassType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

