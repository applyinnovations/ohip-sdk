/*
OPERA Cloud API for Customer Management Service

Testing CustomerManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package cms

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/cms"
)

func Test_cms_CustomerManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CustomerManagementAPIService DeleteCalendarTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.DeleteCalendarTask(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService DeleteCalendarTaskAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomerManagementAPI.DeleteCalendarTaskAttachment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService DeleteTrackItItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.DeleteTrackItItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService GetCalendarTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.GetCalendarTask(context.Background(), activityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService GetCalendarTaskAttachments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string
		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.GetCalendarTaskAttachments(context.Background(), taskId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService GetCalendarTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CustomerManagementAPI.GetCalendarTasks(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService GetTrackItItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.GetTrackItItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService PostCalendarTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.PostCalendarTask(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService PostTrackItItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.PostTrackItItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService PutCalendarTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityId string
		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.PutCalendarTask(context.Background(), activityId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CustomerManagementAPIService PutTrackItItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.CustomerManagementAPI.PutTrackItItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
