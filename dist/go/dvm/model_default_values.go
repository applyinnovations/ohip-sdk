/*
OPERA Cloud DataValueMapping Service API

APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dvm

import (
	"encoding/json"
)

// checks if the DefaultValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultValues{}

// DefaultValues struct for DefaultValues
type DefaultValues struct {
	// A collection of default values.
	DefaultValues []DefaultValueType `json:"defaultValues,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewDefaultValues instantiates a new DefaultValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultValues() *DefaultValues {
	this := DefaultValues{}
	return &this
}

// NewDefaultValuesWithDefaults instantiates a new DefaultValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultValuesWithDefaults() *DefaultValues {
	this := DefaultValues{}
	return &this
}

// GetDefaultValues returns the DefaultValues field value if set, zero value otherwise.
func (o *DefaultValues) GetDefaultValues() []DefaultValueType {
	if o == nil || IsNil(o.DefaultValues) {
		var ret []DefaultValueType
		return ret
	}
	return o.DefaultValues
}

// GetDefaultValuesOk returns a tuple with the DefaultValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValues) GetDefaultValuesOk() ([]DefaultValueType, bool) {
	if o == nil || IsNil(o.DefaultValues) {
		return nil, false
	}
	return o.DefaultValues, true
}

// HasDefaultValues returns a boolean if a field has been set.
func (o *DefaultValues) HasDefaultValues() bool {
	if o != nil && !IsNil(o.DefaultValues) {
		return true
	}

	return false
}

// SetDefaultValues gets a reference to the given []DefaultValueType and assigns it to the DefaultValues field.
func (o *DefaultValues) SetDefaultValues(v []DefaultValueType) {
	o.DefaultValues = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DefaultValues) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValues) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DefaultValues) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *DefaultValues) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DefaultValues) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultValues) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DefaultValues) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *DefaultValues) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o DefaultValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultValues) {
		toSerialize["defaultValues"] = o.DefaultValues
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableDefaultValues struct {
	value *DefaultValues
	isSet bool
}

func (v NullableDefaultValues) Get() *DefaultValues {
	return v.value
}

func (v *NullableDefaultValues) Set(val *DefaultValues) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultValues) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultValues(val *DefaultValues) *NullableDefaultValues {
	return &NullableDefaultValues{value: val, isSet: true}
}

func (v NullableDefaultValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


