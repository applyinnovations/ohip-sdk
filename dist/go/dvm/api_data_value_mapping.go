/*
OPERA Cloud DataValueMapping Service API

APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dvm

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DataValueMappingApiService DataValueMappingApi service
type DataValueMappingApiService service

type DataValueMappingApiGetConvertedValuesRequest struct {
	ctx context.Context
	ApiService *DataValueMappingApiService
	operaHotelId string
	extSystemCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	externalHotelId *string
	conversionCode *[]string
	valueToBeConverted *[]string
	masterValue *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r DataValueMappingApiGetConvertedValuesRequest) Authorization(authorization string) DataValueMappingApiGetConvertedValuesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r DataValueMappingApiGetConvertedValuesRequest) XAppKey(xAppKey string) DataValueMappingApiGetConvertedValuesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r DataValueMappingApiGetConvertedValuesRequest) XHotelid(xHotelid string) DataValueMappingApiGetConvertedValuesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External value of resort for which conversion is needed.
func (r DataValueMappingApiGetConvertedValuesRequest) ExternalHotelId(externalHotelId string) DataValueMappingApiGetConvertedValuesRequest {
	r.externalHotelId = &externalHotelId
	return r
}

// Enumeration of the different conversion codes needed for data value mapping.
func (r DataValueMappingApiGetConvertedValuesRequest) ConversionCode(conversionCode []string) DataValueMappingApiGetConvertedValuesRequest {
	r.conversionCode = &conversionCode
	return r
}

// Value to be converted. It can be opera or external value.
func (r DataValueMappingApiGetConvertedValuesRequest) ValueToBeConverted(valueToBeConverted []string) DataValueMappingApiGetConvertedValuesRequest {
	r.valueToBeConverted = &valueToBeConverted
	return r
}

// Master value is supposed to be Opera value.
func (r DataValueMappingApiGetConvertedValuesRequest) MasterValue(masterValue []string) DataValueMappingApiGetConvertedValuesRequest {
	r.masterValue = &masterValue
	return r
}

// External system code.
func (r DataValueMappingApiGetConvertedValuesRequest) XExternalsystem(xExternalsystem string) DataValueMappingApiGetConvertedValuesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r DataValueMappingApiGetConvertedValuesRequest) AcceptLanguage(acceptLanguage string) DataValueMappingApiGetConvertedValuesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r DataValueMappingApiGetConvertedValuesRequest) Execute() (*ConvertedValues, *http.Response, error) {
	return r.ApiService.GetConvertedValuesExecute(r)
}

/*
GetConvertedValues Fetch Converted Values

This API allows you to get the converted values <p><strong>OperationId:</strong>getConvertedValues</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operaHotelId
 @param extSystemCode
 @return DataValueMappingApiGetConvertedValuesRequest
*/
func (a *DataValueMappingApiService) GetConvertedValues(ctx context.Context, operaHotelId string, extSystemCode string) DataValueMappingApiGetConvertedValuesRequest {
	return DataValueMappingApiGetConvertedValuesRequest{
		ApiService: a,
		ctx: ctx,
		operaHotelId: operaHotelId,
		extSystemCode: extSystemCode,
	}
}

// Execute executes the request
//  @return ConvertedValues
func (a *DataValueMappingApiService) GetConvertedValuesExecute(r DataValueMappingApiGetConvertedValuesRequest) (*ConvertedValues, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertedValues
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataValueMappingApiService.GetConvertedValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{extSystemCode}/hotels/{operaHotelId}/convertedValues"
	localVarPath = strings.Replace(localVarPath, "{"+"operaHotelId"+"}", url.PathEscape(parameterValueToString(r.operaHotelId, "operaHotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extSystemCode"+"}", url.PathEscape(parameterValueToString(r.extSystemCode, "extSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.operaHotelId) < 1 {
		return localVarReturnValue, nil, reportError("operaHotelId must have at least 1 elements")
	}
	if strlen(r.operaHotelId) > 2000 {
		return localVarReturnValue, nil, reportError("operaHotelId must have less than 2000 elements")
	}
	if strlen(r.extSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("extSystemCode must have at least 1 elements")
	}
	if strlen(r.extSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("extSystemCode must have less than 2000 elements")
	}

	if r.externalHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalHotelId", r.externalHotelId, "")
	}
	if r.conversionCode != nil {
		t := *r.conversionCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "conversionCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "conversionCode", t, "multi")
		}
	}
	if r.valueToBeConverted != nil {
		t := *r.valueToBeConverted
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "valueToBeConverted", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "valueToBeConverted", t, "multi")
		}
	}
	if r.masterValue != nil {
		t := *r.masterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "masterValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "masterValue", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataValueMappingApiGetDefaultValuesRequest struct {
	ctx context.Context
	ApiService *DataValueMappingApiService
	operaHotelId string
	extSystemCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r DataValueMappingApiGetDefaultValuesRequest) Authorization(authorization string) DataValueMappingApiGetDefaultValuesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r DataValueMappingApiGetDefaultValuesRequest) XAppKey(xAppKey string) DataValueMappingApiGetDefaultValuesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r DataValueMappingApiGetDefaultValuesRequest) XHotelid(xHotelid string) DataValueMappingApiGetDefaultValuesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r DataValueMappingApiGetDefaultValuesRequest) XExternalsystem(xExternalsystem string) DataValueMappingApiGetDefaultValuesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r DataValueMappingApiGetDefaultValuesRequest) AcceptLanguage(acceptLanguage string) DataValueMappingApiGetDefaultValuesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r DataValueMappingApiGetDefaultValuesRequest) Execute() (*DefaultValues, *http.Response, error) {
	return r.ApiService.GetDefaultValuesExecute(r)
}

/*
GetDefaultValues Fetch Default values

This API allows you to get default values <p><strong>OperationId:</strong>getDefaultValues</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param operaHotelId
 @param extSystemCode
 @return DataValueMappingApiGetDefaultValuesRequest
*/
func (a *DataValueMappingApiService) GetDefaultValues(ctx context.Context, operaHotelId string, extSystemCode string) DataValueMappingApiGetDefaultValuesRequest {
	return DataValueMappingApiGetDefaultValuesRequest{
		ApiService: a,
		ctx: ctx,
		operaHotelId: operaHotelId,
		extSystemCode: extSystemCode,
	}
}

// Execute executes the request
//  @return DefaultValues
func (a *DataValueMappingApiService) GetDefaultValuesExecute(r DataValueMappingApiGetDefaultValuesRequest) (*DefaultValues, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultValues
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataValueMappingApiService.GetDefaultValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{extSystemCode}/hotels/{operaHotelId}/defaultValues"
	localVarPath = strings.Replace(localVarPath, "{"+"operaHotelId"+"}", url.PathEscape(parameterValueToString(r.operaHotelId, "operaHotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extSystemCode"+"}", url.PathEscape(parameterValueToString(r.extSystemCode, "extSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.operaHotelId) < 1 {
		return localVarReturnValue, nil, reportError("operaHotelId must have at least 1 elements")
	}
	if strlen(r.operaHotelId) > 2000 {
		return localVarReturnValue, nil, reportError("operaHotelId must have less than 2000 elements")
	}
	if strlen(r.extSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("extSystemCode must have at least 1 elements")
	}
	if strlen(r.extSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("extSystemCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataValueMappingApiGetOperaHotelCodeRequest struct {
	ctx context.Context
	ApiService *DataValueMappingApiService
	externalHotelId string
	extSystemCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	operaHotelCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r DataValueMappingApiGetOperaHotelCodeRequest) Authorization(authorization string) DataValueMappingApiGetOperaHotelCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r DataValueMappingApiGetOperaHotelCodeRequest) XAppKey(xAppKey string) DataValueMappingApiGetOperaHotelCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r DataValueMappingApiGetOperaHotelCodeRequest) XHotelid(xHotelid string) DataValueMappingApiGetOperaHotelCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Opera Resort for which conversion is needed.
func (r DataValueMappingApiGetOperaHotelCodeRequest) OperaHotelCode(operaHotelCode string) DataValueMappingApiGetOperaHotelCodeRequest {
	r.operaHotelCode = &operaHotelCode
	return r
}

// External system code.
func (r DataValueMappingApiGetOperaHotelCodeRequest) XExternalsystem(xExternalsystem string) DataValueMappingApiGetOperaHotelCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r DataValueMappingApiGetOperaHotelCodeRequest) AcceptLanguage(acceptLanguage string) DataValueMappingApiGetOperaHotelCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r DataValueMappingApiGetOperaHotelCodeRequest) Execute() (*ConvertedHotelCode, *http.Response, error) {
	return r.ApiService.GetOperaHotelCodeExecute(r)
}

/*
GetOperaHotelCode Fetch Converted Hotel Code

This API allows you to get the converted hotel code <p><strong>OperationId:</strong>getOperaHotelCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalHotelId
 @param extSystemCode
 @return DataValueMappingApiGetOperaHotelCodeRequest
*/
func (a *DataValueMappingApiService) GetOperaHotelCode(ctx context.Context, externalHotelId string, extSystemCode string) DataValueMappingApiGetOperaHotelCodeRequest {
	return DataValueMappingApiGetOperaHotelCodeRequest{
		ApiService: a,
		ctx: ctx,
		externalHotelId: externalHotelId,
		extSystemCode: extSystemCode,
	}
}

// Execute executes the request
//  @return ConvertedHotelCode
func (a *DataValueMappingApiService) GetOperaHotelCodeExecute(r DataValueMappingApiGetOperaHotelCodeRequest) (*ConvertedHotelCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConvertedHotelCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataValueMappingApiService.GetOperaHotelCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{extSystemCode}/hotels/{externalHotelId}/conversions"
	localVarPath = strings.Replace(localVarPath, "{"+"externalHotelId"+"}", url.PathEscape(parameterValueToString(r.externalHotelId, "externalHotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extSystemCode"+"}", url.PathEscape(parameterValueToString(r.extSystemCode, "extSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.externalHotelId) < 1 {
		return localVarReturnValue, nil, reportError("externalHotelId must have at least 1 elements")
	}
	if strlen(r.externalHotelId) > 2000 {
		return localVarReturnValue, nil, reportError("externalHotelId must have less than 2000 elements")
	}
	if strlen(r.extSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("extSystemCode must have at least 1 elements")
	}
	if strlen(r.extSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("extSystemCode must have less than 2000 elements")
	}

	if r.operaHotelCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operaHotelCode", r.operaHotelCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
