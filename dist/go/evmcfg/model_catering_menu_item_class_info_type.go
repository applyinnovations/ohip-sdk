/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringMenuItemClassInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringMenuItemClassInfoType{}

// CateringMenuItemClassInfoType struct for CateringMenuItemClassInfoType
type CateringMenuItemClassInfoType struct {
	// The Hotel code which the menu item class belongs to
	HotelId *string `json:"hotelId,omitempty"`
	// Menu Item Class Name
	ClassName *string `json:"className,omitempty"`
	EventTypeList []string `json:"eventTypeList,omitempty"`
	ResponsibleDepartmentList []string `json:"responsibleDepartmentList,omitempty"`
	MenuType *MenuTypeType `json:"menuType,omitempty"`
	// Sequence of the Menu Class
	Sequence *int32 `json:"sequence,omitempty"`
	// Boolean value indicates whether the Menu Class is web bookable or not
	WebBookable *bool `json:"webBookable,omitempty"`
	// Icon Name of the Menu Class
	IconName *string `json:"iconName,omitempty"`
}

// NewCateringMenuItemClassInfoType instantiates a new CateringMenuItemClassInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringMenuItemClassInfoType() *CateringMenuItemClassInfoType {
	this := CateringMenuItemClassInfoType{}
	return &this
}

// NewCateringMenuItemClassInfoTypeWithDefaults instantiates a new CateringMenuItemClassInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringMenuItemClassInfoTypeWithDefaults() *CateringMenuItemClassInfoType {
	this := CateringMenuItemClassInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CateringMenuItemClassInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *CateringMenuItemClassInfoType) SetClassName(v string) {
	o.ClassName = &v
}

// GetEventTypeList returns the EventTypeList field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetEventTypeList() []string {
	if o == nil || IsNil(o.EventTypeList) {
		var ret []string
		return ret
	}
	return o.EventTypeList
}

// GetEventTypeListOk returns a tuple with the EventTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetEventTypeListOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypeList) {
		return nil, false
	}
	return o.EventTypeList, true
}

// HasEventTypeList returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasEventTypeList() bool {
	if o != nil && !IsNil(o.EventTypeList) {
		return true
	}

	return false
}

// SetEventTypeList gets a reference to the given []string and assigns it to the EventTypeList field.
func (o *CateringMenuItemClassInfoType) SetEventTypeList(v []string) {
	o.EventTypeList = v
}

// GetResponsibleDepartmentList returns the ResponsibleDepartmentList field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetResponsibleDepartmentList() []string {
	if o == nil || IsNil(o.ResponsibleDepartmentList) {
		var ret []string
		return ret
	}
	return o.ResponsibleDepartmentList
}

// GetResponsibleDepartmentListOk returns a tuple with the ResponsibleDepartmentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetResponsibleDepartmentListOk() ([]string, bool) {
	if o == nil || IsNil(o.ResponsibleDepartmentList) {
		return nil, false
	}
	return o.ResponsibleDepartmentList, true
}

// HasResponsibleDepartmentList returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasResponsibleDepartmentList() bool {
	if o != nil && !IsNil(o.ResponsibleDepartmentList) {
		return true
	}

	return false
}

// SetResponsibleDepartmentList gets a reference to the given []string and assigns it to the ResponsibleDepartmentList field.
func (o *CateringMenuItemClassInfoType) SetResponsibleDepartmentList(v []string) {
	o.ResponsibleDepartmentList = v
}

// GetMenuType returns the MenuType field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetMenuType() MenuTypeType {
	if o == nil || IsNil(o.MenuType) {
		var ret MenuTypeType
		return ret
	}
	return *o.MenuType
}

// GetMenuTypeOk returns a tuple with the MenuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetMenuTypeOk() (*MenuTypeType, bool) {
	if o == nil || IsNil(o.MenuType) {
		return nil, false
	}
	return o.MenuType, true
}

// HasMenuType returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasMenuType() bool {
	if o != nil && !IsNil(o.MenuType) {
		return true
	}

	return false
}

// SetMenuType gets a reference to the given MenuTypeType and assigns it to the MenuType field.
func (o *CateringMenuItemClassInfoType) SetMenuType(v MenuTypeType) {
	o.MenuType = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *CateringMenuItemClassInfoType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *CateringMenuItemClassInfoType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

// GetIconName returns the IconName field value if set, zero value otherwise.
func (o *CateringMenuItemClassInfoType) GetIconName() string {
	if o == nil || IsNil(o.IconName) {
		var ret string
		return ret
	}
	return *o.IconName
}

// GetIconNameOk returns a tuple with the IconName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassInfoType) GetIconNameOk() (*string, bool) {
	if o == nil || IsNil(o.IconName) {
		return nil, false
	}
	return o.IconName, true
}

// HasIconName returns a boolean if a field has been set.
func (o *CateringMenuItemClassInfoType) HasIconName() bool {
	if o != nil && !IsNil(o.IconName) {
		return true
	}

	return false
}

// SetIconName gets a reference to the given string and assigns it to the IconName field.
func (o *CateringMenuItemClassInfoType) SetIconName(v string) {
	o.IconName = &v
}

func (o CateringMenuItemClassInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringMenuItemClassInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.EventTypeList) {
		toSerialize["eventTypeList"] = o.EventTypeList
	}
	if !IsNil(o.ResponsibleDepartmentList) {
		toSerialize["responsibleDepartmentList"] = o.ResponsibleDepartmentList
	}
	if !IsNil(o.MenuType) {
		toSerialize["menuType"] = o.MenuType
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	if !IsNil(o.IconName) {
		toSerialize["iconName"] = o.IconName
	}
	return toSerialize, nil
}

type NullableCateringMenuItemClassInfoType struct {
	value *CateringMenuItemClassInfoType
	isSet bool
}

func (v NullableCateringMenuItemClassInfoType) Get() *CateringMenuItemClassInfoType {
	return v.value
}

func (v *NullableCateringMenuItemClassInfoType) Set(val *CateringMenuItemClassInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringMenuItemClassInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringMenuItemClassInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringMenuItemClassInfoType(val *CateringMenuItemClassInfoType) *NullableCateringMenuItemClassInfoType {
	return &NullableCateringMenuItemClassInfoType{value: val, isSet: true}
}

func (v NullableCateringMenuItemClassInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringMenuItemClassInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


