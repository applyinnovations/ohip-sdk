/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the ItemRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemRateType{}

// ItemRateType Details of the Item Rate.
type ItemRateType struct {
	ItemRateId *UniqueIDType `json:"itemRateId,omitempty"`
	// The Rate Code of the Item Rate.
	ItemRateCode *string `json:"itemRateCode,omitempty"`
	// The Name of the Item Rate.
	Name *string `json:"name,omitempty"`
	Price *CurrencyAmountType `json:"price,omitempty"`
	// If true, it's hourly rate.
	Hourly *bool `json:"hourly,omitempty"`
	// If true, it's the default Rate for the Item.
	Default *bool `json:"default,omitempty"`
}

// NewItemRateType instantiates a new ItemRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemRateType() *ItemRateType {
	this := ItemRateType{}
	return &this
}

// NewItemRateTypeWithDefaults instantiates a new ItemRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemRateTypeWithDefaults() *ItemRateType {
	this := ItemRateType{}
	return &this
}

// GetItemRateId returns the ItemRateId field value if set, zero value otherwise.
func (o *ItemRateType) GetItemRateId() UniqueIDType {
	if o == nil || IsNil(o.ItemRateId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemRateId
}

// GetItemRateIdOk returns a tuple with the ItemRateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemRateType) GetItemRateIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemRateId) {
		return nil, false
	}
	return o.ItemRateId, true
}

// HasItemRateId returns a boolean if a field has been set.
func (o *ItemRateType) HasItemRateId() bool {
	if o != nil && !IsNil(o.ItemRateId) {
		return true
	}

	return false
}

// SetItemRateId gets a reference to the given UniqueIDType and assigns it to the ItemRateId field.
func (o *ItemRateType) SetItemRateId(v UniqueIDType) {
	o.ItemRateId = &v
}

// GetItemRateCode returns the ItemRateCode field value if set, zero value otherwise.
func (o *ItemRateType) GetItemRateCode() string {
	if o == nil || IsNil(o.ItemRateCode) {
		var ret string
		return ret
	}
	return *o.ItemRateCode
}

// GetItemRateCodeOk returns a tuple with the ItemRateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemRateType) GetItemRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemRateCode) {
		return nil, false
	}
	return o.ItemRateCode, true
}

// HasItemRateCode returns a boolean if a field has been set.
func (o *ItemRateType) HasItemRateCode() bool {
	if o != nil && !IsNil(o.ItemRateCode) {
		return true
	}

	return false
}

// SetItemRateCode gets a reference to the given string and assigns it to the ItemRateCode field.
func (o *ItemRateType) SetItemRateCode(v string) {
	o.ItemRateCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ItemRateType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemRateType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ItemRateType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ItemRateType) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ItemRateType) GetPrice() CurrencyAmountType {
	if o == nil || IsNil(o.Price) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemRateType) GetPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ItemRateType) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given CurrencyAmountType and assigns it to the Price field.
func (o *ItemRateType) SetPrice(v CurrencyAmountType) {
	o.Price = &v
}

// GetHourly returns the Hourly field value if set, zero value otherwise.
func (o *ItemRateType) GetHourly() bool {
	if o == nil || IsNil(o.Hourly) {
		var ret bool
		return ret
	}
	return *o.Hourly
}

// GetHourlyOk returns a tuple with the Hourly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemRateType) GetHourlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Hourly) {
		return nil, false
	}
	return o.Hourly, true
}

// HasHourly returns a boolean if a field has been set.
func (o *ItemRateType) HasHourly() bool {
	if o != nil && !IsNil(o.Hourly) {
		return true
	}

	return false
}

// SetHourly gets a reference to the given bool and assigns it to the Hourly field.
func (o *ItemRateType) SetHourly(v bool) {
	o.Hourly = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ItemRateType) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemRateType) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ItemRateType) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *ItemRateType) SetDefault(v bool) {
	o.Default = &v
}

func (o ItemRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ItemRateId) {
		toSerialize["itemRateId"] = o.ItemRateId
	}
	if !IsNil(o.ItemRateCode) {
		toSerialize["itemRateCode"] = o.ItemRateCode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Hourly) {
		toSerialize["hourly"] = o.Hourly
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	return toSerialize, nil
}

type NullableItemRateType struct {
	value *ItemRateType
	isSet bool
}

func (v NullableItemRateType) Get() *ItemRateType {
	return v.value
}

func (v *NullableItemRateType) Set(val *ItemRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableItemRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableItemRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemRateType(val *ItemRateType) *NullableItemRateType {
	return &NullableItemRateType{value: val, isSet: true}
}

func (v NullableItemRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


