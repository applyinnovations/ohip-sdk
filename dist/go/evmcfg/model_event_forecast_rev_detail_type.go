/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the EventForecastRevDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventForecastRevDetailType{}

// EventForecastRevDetailType Revenue Details for a revenue type attached to an event forecast.
type EventForecastRevDetailType struct {
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	AmountType *ForecastRevenueAmountTypeType `json:"amountType,omitempty"`
	RevenueType *CodeDescriptionType `json:"revenueType,omitempty"`
}

// NewEventForecastRevDetailType instantiates a new EventForecastRevDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventForecastRevDetailType() *EventForecastRevDetailType {
	this := EventForecastRevDetailType{}
	return &this
}

// NewEventForecastRevDetailTypeWithDefaults instantiates a new EventForecastRevDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventForecastRevDetailTypeWithDefaults() *EventForecastRevDetailType {
	this := EventForecastRevDetailType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *EventForecastRevDetailType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventForecastRevDetailType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *EventForecastRevDetailType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *EventForecastRevDetailType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetAmountType returns the AmountType field value if set, zero value otherwise.
func (o *EventForecastRevDetailType) GetAmountType() ForecastRevenueAmountTypeType {
	if o == nil || IsNil(o.AmountType) {
		var ret ForecastRevenueAmountTypeType
		return ret
	}
	return *o.AmountType
}

// GetAmountTypeOk returns a tuple with the AmountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventForecastRevDetailType) GetAmountTypeOk() (*ForecastRevenueAmountTypeType, bool) {
	if o == nil || IsNil(o.AmountType) {
		return nil, false
	}
	return o.AmountType, true
}

// HasAmountType returns a boolean if a field has been set.
func (o *EventForecastRevDetailType) HasAmountType() bool {
	if o != nil && !IsNil(o.AmountType) {
		return true
	}

	return false
}

// SetAmountType gets a reference to the given ForecastRevenueAmountTypeType and assigns it to the AmountType field.
func (o *EventForecastRevDetailType) SetAmountType(v ForecastRevenueAmountTypeType) {
	o.AmountType = &v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *EventForecastRevDetailType) GetRevenueType() CodeDescriptionType {
	if o == nil || IsNil(o.RevenueType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventForecastRevDetailType) GetRevenueTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *EventForecastRevDetailType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given CodeDescriptionType and assigns it to the RevenueType field.
func (o *EventForecastRevDetailType) SetRevenueType(v CodeDescriptionType) {
	o.RevenueType = &v
}

func (o EventForecastRevDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventForecastRevDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountType) {
		toSerialize["amountType"] = o.AmountType
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	return toSerialize, nil
}

type NullableEventForecastRevDetailType struct {
	value *EventForecastRevDetailType
	isSet bool
}

func (v NullableEventForecastRevDetailType) Get() *EventForecastRevDetailType {
	return v.value
}

func (v *NullableEventForecastRevDetailType) Set(val *EventForecastRevDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventForecastRevDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventForecastRevDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventForecastRevDetailType(val *EventForecastRevDetailType) *NullableEventForecastRevDetailType {
	return &NullableEventForecastRevDetailType{value: val, isSet: true}
}

func (v NullableEventForecastRevDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventForecastRevDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


