/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the FunctionSpaceDimensionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionSpaceDimensionType{}

// FunctionSpaceDimensionType Detailed information on the capacity of a room.
type FunctionSpaceDimensionType struct {
	// Width of the room.
	Width *float32 `json:"width,omitempty"`
	// Length of the room.
	Length *float32 `json:"length,omitempty"`
	// Area of the room.
	Area *float32 `json:"area,omitempty"`
	// Minimum height of the room.
	MinHeight *float32 `json:"minHeight,omitempty"`
	// Maximum height of the room.
	MaxHeight *float32 `json:"maxHeight,omitempty"`
	// The unit of measure in a code format.
	UnitOfMeasureCode *string `json:"unitOfMeasureCode,omitempty"`
	// The maximum load that can be supported by the floor in this function space.
	Weight *float32 `json:"weight,omitempty"`
	// Additional information for the function space.
	Note *string `json:"note,omitempty"`
}

// NewFunctionSpaceDimensionType instantiates a new FunctionSpaceDimensionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionSpaceDimensionType() *FunctionSpaceDimensionType {
	this := FunctionSpaceDimensionType{}
	return &this
}

// NewFunctionSpaceDimensionTypeWithDefaults instantiates a new FunctionSpaceDimensionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionSpaceDimensionTypeWithDefaults() *FunctionSpaceDimensionType {
	this := FunctionSpaceDimensionType{}
	return &this
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *FunctionSpaceDimensionType) SetWidth(v float32) {
	o.Width = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *FunctionSpaceDimensionType) SetLength(v float32) {
	o.Length = &v
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetArea() float32 {
	if o == nil || IsNil(o.Area) {
		var ret float32
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetAreaOk() (*float32, bool) {
	if o == nil || IsNil(o.Area) {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasArea() bool {
	if o != nil && !IsNil(o.Area) {
		return true
	}

	return false
}

// SetArea gets a reference to the given float32 and assigns it to the Area field.
func (o *FunctionSpaceDimensionType) SetArea(v float32) {
	o.Area = &v
}

// GetMinHeight returns the MinHeight field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetMinHeight() float32 {
	if o == nil || IsNil(o.MinHeight) {
		var ret float32
		return ret
	}
	return *o.MinHeight
}

// GetMinHeightOk returns a tuple with the MinHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetMinHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MinHeight) {
		return nil, false
	}
	return o.MinHeight, true
}

// HasMinHeight returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasMinHeight() bool {
	if o != nil && !IsNil(o.MinHeight) {
		return true
	}

	return false
}

// SetMinHeight gets a reference to the given float32 and assigns it to the MinHeight field.
func (o *FunctionSpaceDimensionType) SetMinHeight(v float32) {
	o.MinHeight = &v
}

// GetMaxHeight returns the MaxHeight field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetMaxHeight() float32 {
	if o == nil || IsNil(o.MaxHeight) {
		var ret float32
		return ret
	}
	return *o.MaxHeight
}

// GetMaxHeightOk returns a tuple with the MaxHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetMaxHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxHeight) {
		return nil, false
	}
	return o.MaxHeight, true
}

// HasMaxHeight returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasMaxHeight() bool {
	if o != nil && !IsNil(o.MaxHeight) {
		return true
	}

	return false
}

// SetMaxHeight gets a reference to the given float32 and assigns it to the MaxHeight field.
func (o *FunctionSpaceDimensionType) SetMaxHeight(v float32) {
	o.MaxHeight = &v
}

// GetUnitOfMeasureCode returns the UnitOfMeasureCode field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetUnitOfMeasureCode() string {
	if o == nil || IsNil(o.UnitOfMeasureCode) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasureCode
}

// GetUnitOfMeasureCodeOk returns a tuple with the UnitOfMeasureCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetUnitOfMeasureCodeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasureCode) {
		return nil, false
	}
	return o.UnitOfMeasureCode, true
}

// HasUnitOfMeasureCode returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasUnitOfMeasureCode() bool {
	if o != nil && !IsNil(o.UnitOfMeasureCode) {
		return true
	}

	return false
}

// SetUnitOfMeasureCode gets a reference to the given string and assigns it to the UnitOfMeasureCode field.
func (o *FunctionSpaceDimensionType) SetUnitOfMeasureCode(v string) {
	o.UnitOfMeasureCode = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *FunctionSpaceDimensionType) SetWeight(v float32) {
	o.Weight = &v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *FunctionSpaceDimensionType) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceDimensionType) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *FunctionSpaceDimensionType) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *FunctionSpaceDimensionType) SetNote(v string) {
	o.Note = &v
}

func (o FunctionSpaceDimensionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionSpaceDimensionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Area) {
		toSerialize["area"] = o.Area
	}
	if !IsNil(o.MinHeight) {
		toSerialize["minHeight"] = o.MinHeight
	}
	if !IsNil(o.MaxHeight) {
		toSerialize["maxHeight"] = o.MaxHeight
	}
	if !IsNil(o.UnitOfMeasureCode) {
		toSerialize["unitOfMeasureCode"] = o.UnitOfMeasureCode
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	return toSerialize, nil
}

type NullableFunctionSpaceDimensionType struct {
	value *FunctionSpaceDimensionType
	isSet bool
}

func (v NullableFunctionSpaceDimensionType) Get() *FunctionSpaceDimensionType {
	return v.value
}

func (v *NullableFunctionSpaceDimensionType) Set(val *FunctionSpaceDimensionType) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionSpaceDimensionType) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionSpaceDimensionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionSpaceDimensionType(val *FunctionSpaceDimensionType) *NullableFunctionSpaceDimensionType {
	return &NullableFunctionSpaceDimensionType{value: val, isSet: true}
}

func (v NullableFunctionSpaceDimensionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionSpaceDimensionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


