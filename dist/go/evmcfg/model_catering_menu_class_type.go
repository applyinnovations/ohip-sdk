/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringMenuClassType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringMenuClassType{}

// CateringMenuClassType Catering Menu Class which holds the value of menu class.
type CateringMenuClassType struct {
	ClassId *UniqueIDType `json:"classId,omitempty"`
	ClassInfo *CateringMenuClassInfoType `json:"classInfo,omitempty"`
	// The Hotel code which the menu class belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// List of Values of Menu.
	MenuList []CateringMenuType `json:"menuList,omitempty"`
}

// NewCateringMenuClassType instantiates a new CateringMenuClassType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringMenuClassType() *CateringMenuClassType {
	this := CateringMenuClassType{}
	return &this
}

// NewCateringMenuClassTypeWithDefaults instantiates a new CateringMenuClassType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringMenuClassTypeWithDefaults() *CateringMenuClassType {
	this := CateringMenuClassType{}
	return &this
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *CateringMenuClassType) GetClassId() UniqueIDType {
	if o == nil || IsNil(o.ClassId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassType) GetClassIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *CateringMenuClassType) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given UniqueIDType and assigns it to the ClassId field.
func (o *CateringMenuClassType) SetClassId(v UniqueIDType) {
	o.ClassId = &v
}

// GetClassInfo returns the ClassInfo field value if set, zero value otherwise.
func (o *CateringMenuClassType) GetClassInfo() CateringMenuClassInfoType {
	if o == nil || IsNil(o.ClassInfo) {
		var ret CateringMenuClassInfoType
		return ret
	}
	return *o.ClassInfo
}

// GetClassInfoOk returns a tuple with the ClassInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassType) GetClassInfoOk() (*CateringMenuClassInfoType, bool) {
	if o == nil || IsNil(o.ClassInfo) {
		return nil, false
	}
	return o.ClassInfo, true
}

// HasClassInfo returns a boolean if a field has been set.
func (o *CateringMenuClassType) HasClassInfo() bool {
	if o != nil && !IsNil(o.ClassInfo) {
		return true
	}

	return false
}

// SetClassInfo gets a reference to the given CateringMenuClassInfoType and assigns it to the ClassInfo field.
func (o *CateringMenuClassType) SetClassInfo(v CateringMenuClassInfoType) {
	o.ClassInfo = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CateringMenuClassType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CateringMenuClassType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CateringMenuClassType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMenuList returns the MenuList field value if set, zero value otherwise.
func (o *CateringMenuClassType) GetMenuList() []CateringMenuType {
	if o == nil || IsNil(o.MenuList) {
		var ret []CateringMenuType
		return ret
	}
	return o.MenuList
}

// GetMenuListOk returns a tuple with the MenuList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassType) GetMenuListOk() ([]CateringMenuType, bool) {
	if o == nil || IsNil(o.MenuList) {
		return nil, false
	}
	return o.MenuList, true
}

// HasMenuList returns a boolean if a field has been set.
func (o *CateringMenuClassType) HasMenuList() bool {
	if o != nil && !IsNil(o.MenuList) {
		return true
	}

	return false
}

// SetMenuList gets a reference to the given []CateringMenuType and assigns it to the MenuList field.
func (o *CateringMenuClassType) SetMenuList(v []CateringMenuType) {
	o.MenuList = v
}

func (o CateringMenuClassType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringMenuClassType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.ClassInfo) {
		toSerialize["classInfo"] = o.ClassInfo
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MenuList) {
		toSerialize["menuList"] = o.MenuList
	}
	return toSerialize, nil
}

type NullableCateringMenuClassType struct {
	value *CateringMenuClassType
	isSet bool
}

func (v NullableCateringMenuClassType) Get() *CateringMenuClassType {
	return v.value
}

func (v *NullableCateringMenuClassType) Set(val *CateringMenuClassType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringMenuClassType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringMenuClassType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringMenuClassType(val *CateringMenuClassType) *NullableCateringMenuClassType {
	return &NullableCateringMenuClassType{value: val, isSet: true}
}

func (v NullableCateringMenuClassType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringMenuClassType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


