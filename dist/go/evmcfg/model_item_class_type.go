/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the ItemClassType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemClassType{}

// ItemClassType Provides information about the Item Class.
type ItemClassType struct {
	// ClassID of the Item Class.
	ClassId *float32 `json:"classId,omitempty"`
	// Code of the Item Class.
	Code *string `json:"code,omitempty"`
	Departments []string `json:"departments,omitempty"`
	Description *TranslationTextType200 `json:"description,omitempty"`
	// Indicates whether the all items to be updated when there are warnings for discountable.
	DiscountOverrideWarnings *bool `json:"discountOverrideWarnings,omitempty"`
	// Indicates whether the Item Class is discountable or not.
	Discountable *bool `json:"discountable,omitempty"`
	// Sequence of Item Class.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	EventTypes []string `json:"eventTypes,omitempty"`
	// Code of the Hotel.
	HotelId *string `json:"hotelId,omitempty"`
	// Indicates whether the all items to be updated when there are warnings.
	OverrideWarnings *bool `json:"overrideWarnings,omitempty"`
	Type *ItemClassTypeType `json:"type,omitempty"`
	// Indicates whether the Item Class is BookableViaWebsite or not.
	WebBookable *bool `json:"webBookable,omitempty"`
}

// NewItemClassType instantiates a new ItemClassType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemClassType() *ItemClassType {
	this := ItemClassType{}
	return &this
}

// NewItemClassTypeWithDefaults instantiates a new ItemClassType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemClassTypeWithDefaults() *ItemClassType {
	this := ItemClassType{}
	return &this
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *ItemClassType) GetClassId() float32 {
	if o == nil || IsNil(o.ClassId) {
		var ret float32
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetClassIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *ItemClassType) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given float32 and assigns it to the ClassId field.
func (o *ItemClassType) SetClassId(v float32) {
	o.ClassId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ItemClassType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ItemClassType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ItemClassType) SetCode(v string) {
	o.Code = &v
}

// GetDepartments returns the Departments field value if set, zero value otherwise.
func (o *ItemClassType) GetDepartments() []string {
	if o == nil || IsNil(o.Departments) {
		var ret []string
		return ret
	}
	return o.Departments
}

// GetDepartmentsOk returns a tuple with the Departments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetDepartmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Departments) {
		return nil, false
	}
	return o.Departments, true
}

// HasDepartments returns a boolean if a field has been set.
func (o *ItemClassType) HasDepartments() bool {
	if o != nil && !IsNil(o.Departments) {
		return true
	}

	return false
}

// SetDepartments gets a reference to the given []string and assigns it to the Departments field.
func (o *ItemClassType) SetDepartments(v []string) {
	o.Departments = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ItemClassType) GetDescription() TranslationTextType200 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType200
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetDescriptionOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ItemClassType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType200 and assigns it to the Description field.
func (o *ItemClassType) SetDescription(v TranslationTextType200) {
	o.Description = &v
}

// GetDiscountOverrideWarnings returns the DiscountOverrideWarnings field value if set, zero value otherwise.
func (o *ItemClassType) GetDiscountOverrideWarnings() bool {
	if o == nil || IsNil(o.DiscountOverrideWarnings) {
		var ret bool
		return ret
	}
	return *o.DiscountOverrideWarnings
}

// GetDiscountOverrideWarningsOk returns a tuple with the DiscountOverrideWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetDiscountOverrideWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscountOverrideWarnings) {
		return nil, false
	}
	return o.DiscountOverrideWarnings, true
}

// HasDiscountOverrideWarnings returns a boolean if a field has been set.
func (o *ItemClassType) HasDiscountOverrideWarnings() bool {
	if o != nil && !IsNil(o.DiscountOverrideWarnings) {
		return true
	}

	return false
}

// SetDiscountOverrideWarnings gets a reference to the given bool and assigns it to the DiscountOverrideWarnings field.
func (o *ItemClassType) SetDiscountOverrideWarnings(v bool) {
	o.DiscountOverrideWarnings = &v
}

// GetDiscountable returns the Discountable field value if set, zero value otherwise.
func (o *ItemClassType) GetDiscountable() bool {
	if o == nil || IsNil(o.Discountable) {
		var ret bool
		return ret
	}
	return *o.Discountable
}

// GetDiscountableOk returns a tuple with the Discountable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetDiscountableOk() (*bool, bool) {
	if o == nil || IsNil(o.Discountable) {
		return nil, false
	}
	return o.Discountable, true
}

// HasDiscountable returns a boolean if a field has been set.
func (o *ItemClassType) HasDiscountable() bool {
	if o != nil && !IsNil(o.Discountable) {
		return true
	}

	return false
}

// SetDiscountable gets a reference to the given bool and assigns it to the Discountable field.
func (o *ItemClassType) SetDiscountable(v bool) {
	o.Discountable = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *ItemClassType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *ItemClassType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *ItemClassType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *ItemClassType) GetEventTypes() []string {
	if o == nil || IsNil(o.EventTypes) {
		var ret []string
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetEventTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *ItemClassType) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *ItemClassType) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ItemClassType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ItemClassType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ItemClassType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetOverrideWarnings returns the OverrideWarnings field value if set, zero value otherwise.
func (o *ItemClassType) GetOverrideWarnings() bool {
	if o == nil || IsNil(o.OverrideWarnings) {
		var ret bool
		return ret
	}
	return *o.OverrideWarnings
}

// GetOverrideWarningsOk returns a tuple with the OverrideWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetOverrideWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideWarnings) {
		return nil, false
	}
	return o.OverrideWarnings, true
}

// HasOverrideWarnings returns a boolean if a field has been set.
func (o *ItemClassType) HasOverrideWarnings() bool {
	if o != nil && !IsNil(o.OverrideWarnings) {
		return true
	}

	return false
}

// SetOverrideWarnings gets a reference to the given bool and assigns it to the OverrideWarnings field.
func (o *ItemClassType) SetOverrideWarnings(v bool) {
	o.OverrideWarnings = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ItemClassType) GetType() ItemClassTypeType {
	if o == nil || IsNil(o.Type) {
		var ret ItemClassTypeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetTypeOk() (*ItemClassTypeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ItemClassType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ItemClassTypeType and assigns it to the Type field.
func (o *ItemClassType) SetType(v ItemClassTypeType) {
	o.Type = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *ItemClassType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemClassType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *ItemClassType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *ItemClassType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

func (o ItemClassType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemClassType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Departments) {
		toSerialize["departments"] = o.Departments
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DiscountOverrideWarnings) {
		toSerialize["discountOverrideWarnings"] = o.DiscountOverrideWarnings
	}
	if !IsNil(o.Discountable) {
		toSerialize["discountable"] = o.Discountable
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.OverrideWarnings) {
		toSerialize["overrideWarnings"] = o.OverrideWarnings
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	return toSerialize, nil
}

type NullableItemClassType struct {
	value *ItemClassType
	isSet bool
}

func (v NullableItemClassType) Get() *ItemClassType {
	return v.value
}

func (v *NullableItemClassType) Set(val *ItemClassType) {
	v.value = val
	v.isSet = true
}

func (v NullableItemClassType) IsSet() bool {
	return v.isSet
}

func (v *NullableItemClassType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemClassType(val *ItemClassType) *NullableItemClassType {
	return &NullableItemClassType{value: val, isSet: true}
}

func (v NullableItemClassType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemClassType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


