/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringPackageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringPackageType{}

// CateringPackageType Type used for managing Catering Package.
type CateringPackageType struct {
	PkgId *UniqueIDType `json:"pkgId,omitempty"`
	// Hotel Code associated with the Catering Package.
	HotelId *string `json:"hotelId,omitempty"`
	PackageDetail *CateringPackageInfoType `json:"packageDetail,omitempty"`
	// Collection of multiple Events associated with a particular Catering Packages.
	EventsList []CateringPackageEventType `json:"eventsList,omitempty"`
	// Collection of multiple Pricing Details associated with a particular Catering Package.
	PricingList []CateringPackagePricingType `json:"pricingList,omitempty"`
}

// NewCateringPackageType instantiates a new CateringPackageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringPackageType() *CateringPackageType {
	this := CateringPackageType{}
	return &this
}

// NewCateringPackageTypeWithDefaults instantiates a new CateringPackageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringPackageTypeWithDefaults() *CateringPackageType {
	this := CateringPackageType{}
	return &this
}

// GetPkgId returns the PkgId field value if set, zero value otherwise.
func (o *CateringPackageType) GetPkgId() UniqueIDType {
	if o == nil || IsNil(o.PkgId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PkgId
}

// GetPkgIdOk returns a tuple with the PkgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageType) GetPkgIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PkgId) {
		return nil, false
	}
	return o.PkgId, true
}

// HasPkgId returns a boolean if a field has been set.
func (o *CateringPackageType) HasPkgId() bool {
	if o != nil && !IsNil(o.PkgId) {
		return true
	}

	return false
}

// SetPkgId gets a reference to the given UniqueIDType and assigns it to the PkgId field.
func (o *CateringPackageType) SetPkgId(v UniqueIDType) {
	o.PkgId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CateringPackageType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CateringPackageType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CateringPackageType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPackageDetail returns the PackageDetail field value if set, zero value otherwise.
func (o *CateringPackageType) GetPackageDetail() CateringPackageInfoType {
	if o == nil || IsNil(o.PackageDetail) {
		var ret CateringPackageInfoType
		return ret
	}
	return *o.PackageDetail
}

// GetPackageDetailOk returns a tuple with the PackageDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageType) GetPackageDetailOk() (*CateringPackageInfoType, bool) {
	if o == nil || IsNil(o.PackageDetail) {
		return nil, false
	}
	return o.PackageDetail, true
}

// HasPackageDetail returns a boolean if a field has been set.
func (o *CateringPackageType) HasPackageDetail() bool {
	if o != nil && !IsNil(o.PackageDetail) {
		return true
	}

	return false
}

// SetPackageDetail gets a reference to the given CateringPackageInfoType and assigns it to the PackageDetail field.
func (o *CateringPackageType) SetPackageDetail(v CateringPackageInfoType) {
	o.PackageDetail = &v
}

// GetEventsList returns the EventsList field value if set, zero value otherwise.
func (o *CateringPackageType) GetEventsList() []CateringPackageEventType {
	if o == nil || IsNil(o.EventsList) {
		var ret []CateringPackageEventType
		return ret
	}
	return o.EventsList
}

// GetEventsListOk returns a tuple with the EventsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageType) GetEventsListOk() ([]CateringPackageEventType, bool) {
	if o == nil || IsNil(o.EventsList) {
		return nil, false
	}
	return o.EventsList, true
}

// HasEventsList returns a boolean if a field has been set.
func (o *CateringPackageType) HasEventsList() bool {
	if o != nil && !IsNil(o.EventsList) {
		return true
	}

	return false
}

// SetEventsList gets a reference to the given []CateringPackageEventType and assigns it to the EventsList field.
func (o *CateringPackageType) SetEventsList(v []CateringPackageEventType) {
	o.EventsList = v
}

// GetPricingList returns the PricingList field value if set, zero value otherwise.
func (o *CateringPackageType) GetPricingList() []CateringPackagePricingType {
	if o == nil || IsNil(o.PricingList) {
		var ret []CateringPackagePricingType
		return ret
	}
	return o.PricingList
}

// GetPricingListOk returns a tuple with the PricingList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageType) GetPricingListOk() ([]CateringPackagePricingType, bool) {
	if o == nil || IsNil(o.PricingList) {
		return nil, false
	}
	return o.PricingList, true
}

// HasPricingList returns a boolean if a field has been set.
func (o *CateringPackageType) HasPricingList() bool {
	if o != nil && !IsNil(o.PricingList) {
		return true
	}

	return false
}

// SetPricingList gets a reference to the given []CateringPackagePricingType and assigns it to the PricingList field.
func (o *CateringPackageType) SetPricingList(v []CateringPackagePricingType) {
	o.PricingList = v
}

func (o CateringPackageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringPackageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkgId) {
		toSerialize["pkgId"] = o.PkgId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PackageDetail) {
		toSerialize["packageDetail"] = o.PackageDetail
	}
	if !IsNil(o.EventsList) {
		toSerialize["eventsList"] = o.EventsList
	}
	if !IsNil(o.PricingList) {
		toSerialize["pricingList"] = o.PricingList
	}
	return toSerialize, nil
}

type NullableCateringPackageType struct {
	value *CateringPackageType
	isSet bool
}

func (v NullableCateringPackageType) Get() *CateringPackageType {
	return v.value
}

func (v *NullableCateringPackageType) Set(val *CateringPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringPackageType(val *CateringPackageType) *NullableCateringPackageType {
	return &NullableCateringPackageType{value: val, isSet: true}
}

func (v NullableCateringPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


