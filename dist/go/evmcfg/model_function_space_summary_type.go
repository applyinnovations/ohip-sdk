/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the FunctionSpaceSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionSpaceSummaryType{}

// FunctionSpaceSummaryType The summary information for a function space.
type FunctionSpaceSummaryType struct {
	// Hotel Code where function space belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Room Code of the Function Space.
	RoomCode *string `json:"roomCode,omitempty"`
	// Room Type of the Function Space.
	RoomType *string `json:"roomType,omitempty"`
	// Indicates whether the room type is psuedo.
	PsuedoRoomType *bool `json:"psuedoRoomType,omitempty"`
	SpaceName *TranslationTextType2000 `json:"spaceName,omitempty"`
	// The Short Name of the Function Space.
	ShortName *string `json:"shortName,omitempty"`
	// The floor on which the Function Space is located.
	Floor *string `json:"floor,omitempty"`
	// The Type which the Function Space belongs to.
	SpaceType *string `json:"spaceType,omitempty"`
	// The building on which the Function Space is located.
	Location *string `json:"location,omitempty"`
	// Indicate if the function space is a combination room.
	Combo *bool `json:"combo,omitempty"`
	// Indicate if the function space will be shown in the Function Diary by default.
	Element *bool `json:"element,omitempty"`
	// Indicate if the function space is shareable.
	Shareable *bool `json:"shareable,omitempty"`
	// Indicate if the function space is forced to have alternate function spaces in case the function space becomes unvailable.
	ForceAlternate *bool `json:"forceAlternate,omitempty"`
	// Indicates whether the Function Space is web bookable or not.
	WebBookable *bool `json:"webBookable,omitempty"`
	// Indicates whether the Function Space is web viewable or not.
	WebViewable *bool `json:"webViewable,omitempty"`
	// The time in minutes that the function space would be considered at 100% utilization.
	FullUtilizationTime *float32 `json:"fullUtilizationTime,omitempty"`
	// Indicates whether the function space has handicap facilities.
	HandicapFacilities *bool `json:"handicapFacilities,omitempty"`
	// The first custom order for sorting the function space display.
	OrderBy1 *int32 `json:"orderBy1,omitempty"`
	// The second custom order for sorting the function space display.
	OrderBy2 *int32 `json:"orderBy2,omitempty"`
	// The third custom order for sorting the function space display.
	OrderBy3 *int32 `json:"orderBy3,omitempty"`
}

// NewFunctionSpaceSummaryType instantiates a new FunctionSpaceSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionSpaceSummaryType() *FunctionSpaceSummaryType {
	this := FunctionSpaceSummaryType{}
	return &this
}

// NewFunctionSpaceSummaryTypeWithDefaults instantiates a new FunctionSpaceSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionSpaceSummaryTypeWithDefaults() *FunctionSpaceSummaryType {
	this := FunctionSpaceSummaryType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FunctionSpaceSummaryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoomCode returns the RoomCode field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetRoomCode() string {
	if o == nil || IsNil(o.RoomCode) {
		var ret string
		return ret
	}
	return *o.RoomCode
}

// GetRoomCodeOk returns a tuple with the RoomCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetRoomCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomCode) {
		return nil, false
	}
	return o.RoomCode, true
}

// HasRoomCode returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasRoomCode() bool {
	if o != nil && !IsNil(o.RoomCode) {
		return true
	}

	return false
}

// SetRoomCode gets a reference to the given string and assigns it to the RoomCode field.
func (o *FunctionSpaceSummaryType) SetRoomCode(v string) {
	o.RoomCode = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *FunctionSpaceSummaryType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetPsuedoRoomType returns the PsuedoRoomType field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetPsuedoRoomType() bool {
	if o == nil || IsNil(o.PsuedoRoomType) {
		var ret bool
		return ret
	}
	return *o.PsuedoRoomType
}

// GetPsuedoRoomTypeOk returns a tuple with the PsuedoRoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetPsuedoRoomTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.PsuedoRoomType) {
		return nil, false
	}
	return o.PsuedoRoomType, true
}

// HasPsuedoRoomType returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasPsuedoRoomType() bool {
	if o != nil && !IsNil(o.PsuedoRoomType) {
		return true
	}

	return false
}

// SetPsuedoRoomType gets a reference to the given bool and assigns it to the PsuedoRoomType field.
func (o *FunctionSpaceSummaryType) SetPsuedoRoomType(v bool) {
	o.PsuedoRoomType = &v
}

// GetSpaceName returns the SpaceName field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetSpaceName() TranslationTextType2000 {
	if o == nil || IsNil(o.SpaceName) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetSpaceNameOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.SpaceName) {
		return nil, false
	}
	return o.SpaceName, true
}

// HasSpaceName returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasSpaceName() bool {
	if o != nil && !IsNil(o.SpaceName) {
		return true
	}

	return false
}

// SetSpaceName gets a reference to the given TranslationTextType2000 and assigns it to the SpaceName field.
func (o *FunctionSpaceSummaryType) SetSpaceName(v TranslationTextType2000) {
	o.SpaceName = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *FunctionSpaceSummaryType) SetShortName(v string) {
	o.ShortName = &v
}

// GetFloor returns the Floor field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetFloor() string {
	if o == nil || IsNil(o.Floor) {
		var ret string
		return ret
	}
	return *o.Floor
}

// GetFloorOk returns a tuple with the Floor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetFloorOk() (*string, bool) {
	if o == nil || IsNil(o.Floor) {
		return nil, false
	}
	return o.Floor, true
}

// HasFloor returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasFloor() bool {
	if o != nil && !IsNil(o.Floor) {
		return true
	}

	return false
}

// SetFloor gets a reference to the given string and assigns it to the Floor field.
func (o *FunctionSpaceSummaryType) SetFloor(v string) {
	o.Floor = &v
}

// GetSpaceType returns the SpaceType field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetSpaceType() string {
	if o == nil || IsNil(o.SpaceType) {
		var ret string
		return ret
	}
	return *o.SpaceType
}

// GetSpaceTypeOk returns a tuple with the SpaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetSpaceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceType) {
		return nil, false
	}
	return o.SpaceType, true
}

// HasSpaceType returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasSpaceType() bool {
	if o != nil && !IsNil(o.SpaceType) {
		return true
	}

	return false
}

// SetSpaceType gets a reference to the given string and assigns it to the SpaceType field.
func (o *FunctionSpaceSummaryType) SetSpaceType(v string) {
	o.SpaceType = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *FunctionSpaceSummaryType) SetLocation(v string) {
	o.Location = &v
}

// GetCombo returns the Combo field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetCombo() bool {
	if o == nil || IsNil(o.Combo) {
		var ret bool
		return ret
	}
	return *o.Combo
}

// GetComboOk returns a tuple with the Combo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetComboOk() (*bool, bool) {
	if o == nil || IsNil(o.Combo) {
		return nil, false
	}
	return o.Combo, true
}

// HasCombo returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasCombo() bool {
	if o != nil && !IsNil(o.Combo) {
		return true
	}

	return false
}

// SetCombo gets a reference to the given bool and assigns it to the Combo field.
func (o *FunctionSpaceSummaryType) SetCombo(v bool) {
	o.Combo = &v
}

// GetElement returns the Element field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetElement() bool {
	if o == nil || IsNil(o.Element) {
		var ret bool
		return ret
	}
	return *o.Element
}

// GetElementOk returns a tuple with the Element field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetElementOk() (*bool, bool) {
	if o == nil || IsNil(o.Element) {
		return nil, false
	}
	return o.Element, true
}

// HasElement returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasElement() bool {
	if o != nil && !IsNil(o.Element) {
		return true
	}

	return false
}

// SetElement gets a reference to the given bool and assigns it to the Element field.
func (o *FunctionSpaceSummaryType) SetElement(v bool) {
	o.Element = &v
}

// GetShareable returns the Shareable field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetShareable() bool {
	if o == nil || IsNil(o.Shareable) {
		var ret bool
		return ret
	}
	return *o.Shareable
}

// GetShareableOk returns a tuple with the Shareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.Shareable) {
		return nil, false
	}
	return o.Shareable, true
}

// HasShareable returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasShareable() bool {
	if o != nil && !IsNil(o.Shareable) {
		return true
	}

	return false
}

// SetShareable gets a reference to the given bool and assigns it to the Shareable field.
func (o *FunctionSpaceSummaryType) SetShareable(v bool) {
	o.Shareable = &v
}

// GetForceAlternate returns the ForceAlternate field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetForceAlternate() bool {
	if o == nil || IsNil(o.ForceAlternate) {
		var ret bool
		return ret
	}
	return *o.ForceAlternate
}

// GetForceAlternateOk returns a tuple with the ForceAlternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetForceAlternateOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceAlternate) {
		return nil, false
	}
	return o.ForceAlternate, true
}

// HasForceAlternate returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasForceAlternate() bool {
	if o != nil && !IsNil(o.ForceAlternate) {
		return true
	}

	return false
}

// SetForceAlternate gets a reference to the given bool and assigns it to the ForceAlternate field.
func (o *FunctionSpaceSummaryType) SetForceAlternate(v bool) {
	o.ForceAlternate = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *FunctionSpaceSummaryType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

// GetWebViewable returns the WebViewable field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetWebViewable() bool {
	if o == nil || IsNil(o.WebViewable) {
		var ret bool
		return ret
	}
	return *o.WebViewable
}

// GetWebViewableOk returns a tuple with the WebViewable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetWebViewableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebViewable) {
		return nil, false
	}
	return o.WebViewable, true
}

// HasWebViewable returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasWebViewable() bool {
	if o != nil && !IsNil(o.WebViewable) {
		return true
	}

	return false
}

// SetWebViewable gets a reference to the given bool and assigns it to the WebViewable field.
func (o *FunctionSpaceSummaryType) SetWebViewable(v bool) {
	o.WebViewable = &v
}

// GetFullUtilizationTime returns the FullUtilizationTime field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetFullUtilizationTime() float32 {
	if o == nil || IsNil(o.FullUtilizationTime) {
		var ret float32
		return ret
	}
	return *o.FullUtilizationTime
}

// GetFullUtilizationTimeOk returns a tuple with the FullUtilizationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetFullUtilizationTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.FullUtilizationTime) {
		return nil, false
	}
	return o.FullUtilizationTime, true
}

// HasFullUtilizationTime returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasFullUtilizationTime() bool {
	if o != nil && !IsNil(o.FullUtilizationTime) {
		return true
	}

	return false
}

// SetFullUtilizationTime gets a reference to the given float32 and assigns it to the FullUtilizationTime field.
func (o *FunctionSpaceSummaryType) SetFullUtilizationTime(v float32) {
	o.FullUtilizationTime = &v
}

// GetHandicapFacilities returns the HandicapFacilities field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetHandicapFacilities() bool {
	if o == nil || IsNil(o.HandicapFacilities) {
		var ret bool
		return ret
	}
	return *o.HandicapFacilities
}

// GetHandicapFacilitiesOk returns a tuple with the HandicapFacilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetHandicapFacilitiesOk() (*bool, bool) {
	if o == nil || IsNil(o.HandicapFacilities) {
		return nil, false
	}
	return o.HandicapFacilities, true
}

// HasHandicapFacilities returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasHandicapFacilities() bool {
	if o != nil && !IsNil(o.HandicapFacilities) {
		return true
	}

	return false
}

// SetHandicapFacilities gets a reference to the given bool and assigns it to the HandicapFacilities field.
func (o *FunctionSpaceSummaryType) SetHandicapFacilities(v bool) {
	o.HandicapFacilities = &v
}

// GetOrderBy1 returns the OrderBy1 field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetOrderBy1() int32 {
	if o == nil || IsNil(o.OrderBy1) {
		var ret int32
		return ret
	}
	return *o.OrderBy1
}

// GetOrderBy1Ok returns a tuple with the OrderBy1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetOrderBy1Ok() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy1) {
		return nil, false
	}
	return o.OrderBy1, true
}

// HasOrderBy1 returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasOrderBy1() bool {
	if o != nil && !IsNil(o.OrderBy1) {
		return true
	}

	return false
}

// SetOrderBy1 gets a reference to the given int32 and assigns it to the OrderBy1 field.
func (o *FunctionSpaceSummaryType) SetOrderBy1(v int32) {
	o.OrderBy1 = &v
}

// GetOrderBy2 returns the OrderBy2 field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetOrderBy2() int32 {
	if o == nil || IsNil(o.OrderBy2) {
		var ret int32
		return ret
	}
	return *o.OrderBy2
}

// GetOrderBy2Ok returns a tuple with the OrderBy2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetOrderBy2Ok() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy2) {
		return nil, false
	}
	return o.OrderBy2, true
}

// HasOrderBy2 returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasOrderBy2() bool {
	if o != nil && !IsNil(o.OrderBy2) {
		return true
	}

	return false
}

// SetOrderBy2 gets a reference to the given int32 and assigns it to the OrderBy2 field.
func (o *FunctionSpaceSummaryType) SetOrderBy2(v int32) {
	o.OrderBy2 = &v
}

// GetOrderBy3 returns the OrderBy3 field value if set, zero value otherwise.
func (o *FunctionSpaceSummaryType) GetOrderBy3() int32 {
	if o == nil || IsNil(o.OrderBy3) {
		var ret int32
		return ret
	}
	return *o.OrderBy3
}

// GetOrderBy3Ok returns a tuple with the OrderBy3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceSummaryType) GetOrderBy3Ok() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy3) {
		return nil, false
	}
	return o.OrderBy3, true
}

// HasOrderBy3 returns a boolean if a field has been set.
func (o *FunctionSpaceSummaryType) HasOrderBy3() bool {
	if o != nil && !IsNil(o.OrderBy3) {
		return true
	}

	return false
}

// SetOrderBy3 gets a reference to the given int32 and assigns it to the OrderBy3 field.
func (o *FunctionSpaceSummaryType) SetOrderBy3(v int32) {
	o.OrderBy3 = &v
}

func (o FunctionSpaceSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionSpaceSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RoomCode) {
		toSerialize["roomCode"] = o.RoomCode
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.PsuedoRoomType) {
		toSerialize["psuedoRoomType"] = o.PsuedoRoomType
	}
	if !IsNil(o.SpaceName) {
		toSerialize["spaceName"] = o.SpaceName
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.Floor) {
		toSerialize["floor"] = o.Floor
	}
	if !IsNil(o.SpaceType) {
		toSerialize["spaceType"] = o.SpaceType
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Combo) {
		toSerialize["combo"] = o.Combo
	}
	if !IsNil(o.Element) {
		toSerialize["element"] = o.Element
	}
	if !IsNil(o.Shareable) {
		toSerialize["shareable"] = o.Shareable
	}
	if !IsNil(o.ForceAlternate) {
		toSerialize["forceAlternate"] = o.ForceAlternate
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	if !IsNil(o.WebViewable) {
		toSerialize["webViewable"] = o.WebViewable
	}
	if !IsNil(o.FullUtilizationTime) {
		toSerialize["fullUtilizationTime"] = o.FullUtilizationTime
	}
	if !IsNil(o.HandicapFacilities) {
		toSerialize["handicapFacilities"] = o.HandicapFacilities
	}
	if !IsNil(o.OrderBy1) {
		toSerialize["orderBy1"] = o.OrderBy1
	}
	if !IsNil(o.OrderBy2) {
		toSerialize["orderBy2"] = o.OrderBy2
	}
	if !IsNil(o.OrderBy3) {
		toSerialize["orderBy3"] = o.OrderBy3
	}
	return toSerialize, nil
}

type NullableFunctionSpaceSummaryType struct {
	value *FunctionSpaceSummaryType
	isSet bool
}

func (v NullableFunctionSpaceSummaryType) Get() *FunctionSpaceSummaryType {
	return v.value
}

func (v *NullableFunctionSpaceSummaryType) Set(val *FunctionSpaceSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionSpaceSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionSpaceSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionSpaceSummaryType(val *FunctionSpaceSummaryType) *NullableFunctionSpaceSummaryType {
	return &NullableFunctionSpaceSummaryType{value: val, isSet: true}
}

func (v NullableFunctionSpaceSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionSpaceSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


