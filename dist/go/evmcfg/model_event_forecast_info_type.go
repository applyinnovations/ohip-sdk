/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the EventForecastInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventForecastInfoType{}

// EventForecastInfoType Associated Information for an event forecast.
type EventForecastInfoType struct {
	// Block type for which the forecast is associated.
	BlockType *string `json:"blockType,omitempty"`
	DateRange *DateRangeType `json:"dateRange,omitempty"`
	EventType *CodeDescriptionType `json:"eventType,omitempty"`
	// Market code for which the forecast is associated.
	MarketCode *string `json:"marketCode,omitempty"`
}

// NewEventForecastInfoType instantiates a new EventForecastInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventForecastInfoType() *EventForecastInfoType {
	this := EventForecastInfoType{}
	return &this
}

// NewEventForecastInfoTypeWithDefaults instantiates a new EventForecastInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventForecastInfoTypeWithDefaults() *EventForecastInfoType {
	this := EventForecastInfoType{}
	return &this
}

// GetBlockType returns the BlockType field value if set, zero value otherwise.
func (o *EventForecastInfoType) GetBlockType() string {
	if o == nil || IsNil(o.BlockType) {
		var ret string
		return ret
	}
	return *o.BlockType
}

// GetBlockTypeOk returns a tuple with the BlockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventForecastInfoType) GetBlockTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockType) {
		return nil, false
	}
	return o.BlockType, true
}

// HasBlockType returns a boolean if a field has been set.
func (o *EventForecastInfoType) HasBlockType() bool {
	if o != nil && !IsNil(o.BlockType) {
		return true
	}

	return false
}

// SetBlockType gets a reference to the given string and assigns it to the BlockType field.
func (o *EventForecastInfoType) SetBlockType(v string) {
	o.BlockType = &v
}

// GetDateRange returns the DateRange field value if set, zero value otherwise.
func (o *EventForecastInfoType) GetDateRange() DateRangeType {
	if o == nil || IsNil(o.DateRange) {
		var ret DateRangeType
		return ret
	}
	return *o.DateRange
}

// GetDateRangeOk returns a tuple with the DateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventForecastInfoType) GetDateRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.DateRange) {
		return nil, false
	}
	return o.DateRange, true
}

// HasDateRange returns a boolean if a field has been set.
func (o *EventForecastInfoType) HasDateRange() bool {
	if o != nil && !IsNil(o.DateRange) {
		return true
	}

	return false
}

// SetDateRange gets a reference to the given DateRangeType and assigns it to the DateRange field.
func (o *EventForecastInfoType) SetDateRange(v DateRangeType) {
	o.DateRange = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EventForecastInfoType) GetEventType() CodeDescriptionType {
	if o == nil || IsNil(o.EventType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventForecastInfoType) GetEventTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EventForecastInfoType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given CodeDescriptionType and assigns it to the EventType field.
func (o *EventForecastInfoType) SetEventType(v CodeDescriptionType) {
	o.EventType = &v
}

// GetMarketCode returns the MarketCode field value if set, zero value otherwise.
func (o *EventForecastInfoType) GetMarketCode() string {
	if o == nil || IsNil(o.MarketCode) {
		var ret string
		return ret
	}
	return *o.MarketCode
}

// GetMarketCodeOk returns a tuple with the MarketCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventForecastInfoType) GetMarketCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MarketCode) {
		return nil, false
	}
	return o.MarketCode, true
}

// HasMarketCode returns a boolean if a field has been set.
func (o *EventForecastInfoType) HasMarketCode() bool {
	if o != nil && !IsNil(o.MarketCode) {
		return true
	}

	return false
}

// SetMarketCode gets a reference to the given string and assigns it to the MarketCode field.
func (o *EventForecastInfoType) SetMarketCode(v string) {
	o.MarketCode = &v
}

func (o EventForecastInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventForecastInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockType) {
		toSerialize["blockType"] = o.BlockType
	}
	if !IsNil(o.DateRange) {
		toSerialize["dateRange"] = o.DateRange
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.MarketCode) {
		toSerialize["marketCode"] = o.MarketCode
	}
	return toSerialize, nil
}

type NullableEventForecastInfoType struct {
	value *EventForecastInfoType
	isSet bool
}

func (v NullableEventForecastInfoType) Get() *EventForecastInfoType {
	return v.value
}

func (v *NullableEventForecastInfoType) Set(val *EventForecastInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventForecastInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventForecastInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventForecastInfoType(val *EventForecastInfoType) *NullableEventForecastInfoType {
	return &NullableEventForecastInfoType{value: val, isSet: true}
}

func (v NullableEventForecastInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventForecastInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


