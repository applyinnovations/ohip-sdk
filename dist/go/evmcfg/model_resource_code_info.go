/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the ResourceCodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceCodeInfo{}

// ResourceCodeInfo Response object of newly copied resource or configuration code.
type ResourceCodeInfo struct {
	// Newly copied resource or configuration code.
	ResourceCode *string `json:"resourceCode,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewResourceCodeInfo instantiates a new ResourceCodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceCodeInfo() *ResourceCodeInfo {
	this := ResourceCodeInfo{}
	return &this
}

// NewResourceCodeInfoWithDefaults instantiates a new ResourceCodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceCodeInfoWithDefaults() *ResourceCodeInfo {
	this := ResourceCodeInfo{}
	return &this
}

// GetResourceCode returns the ResourceCode field value if set, zero value otherwise.
func (o *ResourceCodeInfo) GetResourceCode() string {
	if o == nil || IsNil(o.ResourceCode) {
		var ret string
		return ret
	}
	return *o.ResourceCode
}

// GetResourceCodeOk returns a tuple with the ResourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCodeInfo) GetResourceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceCode) {
		return nil, false
	}
	return o.ResourceCode, true
}

// HasResourceCode returns a boolean if a field has been set.
func (o *ResourceCodeInfo) HasResourceCode() bool {
	if o != nil && !IsNil(o.ResourceCode) {
		return true
	}

	return false
}

// SetResourceCode gets a reference to the given string and assigns it to the ResourceCode field.
func (o *ResourceCodeInfo) SetResourceCode(v string) {
	o.ResourceCode = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ResourceCodeInfo) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCodeInfo) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ResourceCodeInfo) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ResourceCodeInfo) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ResourceCodeInfo) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCodeInfo) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ResourceCodeInfo) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ResourceCodeInfo) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ResourceCodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceCodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceCode) {
		toSerialize["resourceCode"] = o.ResourceCode
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableResourceCodeInfo struct {
	value *ResourceCodeInfo
	isSet bool
}

func (v NullableResourceCodeInfo) Get() *ResourceCodeInfo {
	return v.value
}

func (v *NullableResourceCodeInfo) Set(val *ResourceCodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceCodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceCodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceCodeInfo(val *ResourceCodeInfo) *NullableResourceCodeInfo {
	return &NullableResourceCodeInfo{value: val, isSet: true}
}

func (v NullableResourceCodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceCodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


