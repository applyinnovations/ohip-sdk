/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CopyFunctionSpaces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyFunctionSpaces{}

// CopyFunctionSpaces Request object for creating multiple function spaces based on an existing function space. New function space may have different name, display name on function dairy, order of display and combo elements. The rest of the details will be copied from the source function space.
type CopyFunctionSpaces struct {
	CopyFunctionSpace *CopyFunctionSpaceType `json:"copyFunctionSpace,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCopyFunctionSpaces instantiates a new CopyFunctionSpaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyFunctionSpaces() *CopyFunctionSpaces {
	this := CopyFunctionSpaces{}
	return &this
}

// NewCopyFunctionSpacesWithDefaults instantiates a new CopyFunctionSpaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyFunctionSpacesWithDefaults() *CopyFunctionSpaces {
	this := CopyFunctionSpaces{}
	return &this
}

// GetCopyFunctionSpace returns the CopyFunctionSpace field value if set, zero value otherwise.
func (o *CopyFunctionSpaces) GetCopyFunctionSpace() CopyFunctionSpaceType {
	if o == nil || IsNil(o.CopyFunctionSpace) {
		var ret CopyFunctionSpaceType
		return ret
	}
	return *o.CopyFunctionSpace
}

// GetCopyFunctionSpaceOk returns a tuple with the CopyFunctionSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyFunctionSpaces) GetCopyFunctionSpaceOk() (*CopyFunctionSpaceType, bool) {
	if o == nil || IsNil(o.CopyFunctionSpace) {
		return nil, false
	}
	return o.CopyFunctionSpace, true
}

// HasCopyFunctionSpace returns a boolean if a field has been set.
func (o *CopyFunctionSpaces) HasCopyFunctionSpace() bool {
	if o != nil && !IsNil(o.CopyFunctionSpace) {
		return true
	}

	return false
}

// SetCopyFunctionSpace gets a reference to the given CopyFunctionSpaceType and assigns it to the CopyFunctionSpace field.
func (o *CopyFunctionSpaces) SetCopyFunctionSpace(v CopyFunctionSpaceType) {
	o.CopyFunctionSpace = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CopyFunctionSpaces) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyFunctionSpaces) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CopyFunctionSpaces) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CopyFunctionSpaces) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CopyFunctionSpaces) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyFunctionSpaces) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CopyFunctionSpaces) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CopyFunctionSpaces) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CopyFunctionSpaces) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyFunctionSpaces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CopyFunctionSpace) {
		toSerialize["copyFunctionSpace"] = o.CopyFunctionSpace
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCopyFunctionSpaces struct {
	value *CopyFunctionSpaces
	isSet bool
}

func (v NullableCopyFunctionSpaces) Get() *CopyFunctionSpaces {
	return v.value
}

func (v *NullableCopyFunctionSpaces) Set(val *CopyFunctionSpaces) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyFunctionSpaces) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyFunctionSpaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyFunctionSpaces(val *CopyFunctionSpaces) *NullableCopyFunctionSpaces {
	return &NullableCopyFunctionSpaces{value: val, isSet: true}
}

func (v NullableCopyFunctionSpaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyFunctionSpaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


