/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CopyCateringPackageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyCateringPackageType{}

// CopyCateringPackageType Request object for Copying Catering Package/Template.
type CopyCateringPackageType struct {
	// Code associated with the newly copied Catering Package/template.
	Code *string `json:"code,omitempty"`
	TranslatableDescription *TranslationTextType200 `json:"translatableDescription,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCopyCateringPackageType instantiates a new CopyCateringPackageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyCateringPackageType() *CopyCateringPackageType {
	this := CopyCateringPackageType{}
	return &this
}

// NewCopyCateringPackageTypeWithDefaults instantiates a new CopyCateringPackageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyCateringPackageTypeWithDefaults() *CopyCateringPackageType {
	this := CopyCateringPackageType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CopyCateringPackageType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPackageType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CopyCateringPackageType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CopyCateringPackageType) SetCode(v string) {
	o.Code = &v
}

// GetTranslatableDescription returns the TranslatableDescription field value if set, zero value otherwise.
func (o *CopyCateringPackageType) GetTranslatableDescription() TranslationTextType200 {
	if o == nil || IsNil(o.TranslatableDescription) {
		var ret TranslationTextType200
		return ret
	}
	return *o.TranslatableDescription
}

// GetTranslatableDescriptionOk returns a tuple with the TranslatableDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPackageType) GetTranslatableDescriptionOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.TranslatableDescription) {
		return nil, false
	}
	return o.TranslatableDescription, true
}

// HasTranslatableDescription returns a boolean if a field has been set.
func (o *CopyCateringPackageType) HasTranslatableDescription() bool {
	if o != nil && !IsNil(o.TranslatableDescription) {
		return true
	}

	return false
}

// SetTranslatableDescription gets a reference to the given TranslationTextType200 and assigns it to the TranslatableDescription field.
func (o *CopyCateringPackageType) SetTranslatableDescription(v TranslationTextType200) {
	o.TranslatableDescription = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CopyCateringPackageType) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPackageType) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CopyCateringPackageType) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CopyCateringPackageType) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CopyCateringPackageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyCateringPackageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.TranslatableDescription) {
		toSerialize["translatableDescription"] = o.TranslatableDescription
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCopyCateringPackageType struct {
	value *CopyCateringPackageType
	isSet bool
}

func (v NullableCopyCateringPackageType) Get() *CopyCateringPackageType {
	return v.value
}

func (v *NullableCopyCateringPackageType) Set(val *CopyCateringPackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyCateringPackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyCateringPackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyCateringPackageType(val *CopyCateringPackageType) *NullableCopyCateringPackageType {
	return &NullableCopyCateringPackageType{value: val, isSet: true}
}

func (v NullableCopyCateringPackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyCateringPackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


