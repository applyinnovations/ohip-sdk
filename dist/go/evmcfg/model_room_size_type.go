/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the RoomSizeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomSizeType{}

// RoomSizeType Detailed information on the capacity of a room.
type RoomSizeType struct {
	// Area of the room.
	Area *float32 `json:"area,omitempty"`
	// Length of the room.
	Length *float32 `json:"length,omitempty"`
	// Maximum height of the room.
	MaxHeight *float32 `json:"maxHeight,omitempty"`
	// Minimum height of the room.
	MinHeight *float32 `json:"minHeight,omitempty"`
	// The unit of measure in a code format.
	UnitOfMeasureCode *string `json:"unitOfMeasureCode,omitempty"`
	// Width of the room.
	Width *float32 `json:"width,omitempty"`
}

// NewRoomSizeType instantiates a new RoomSizeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomSizeType() *RoomSizeType {
	this := RoomSizeType{}
	return &this
}

// NewRoomSizeTypeWithDefaults instantiates a new RoomSizeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomSizeTypeWithDefaults() *RoomSizeType {
	this := RoomSizeType{}
	return &this
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *RoomSizeType) GetArea() float32 {
	if o == nil || IsNil(o.Area) {
		var ret float32
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomSizeType) GetAreaOk() (*float32, bool) {
	if o == nil || IsNil(o.Area) {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *RoomSizeType) HasArea() bool {
	if o != nil && !IsNil(o.Area) {
		return true
	}

	return false
}

// SetArea gets a reference to the given float32 and assigns it to the Area field.
func (o *RoomSizeType) SetArea(v float32) {
	o.Area = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *RoomSizeType) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomSizeType) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *RoomSizeType) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *RoomSizeType) SetLength(v float32) {
	o.Length = &v
}

// GetMaxHeight returns the MaxHeight field value if set, zero value otherwise.
func (o *RoomSizeType) GetMaxHeight() float32 {
	if o == nil || IsNil(o.MaxHeight) {
		var ret float32
		return ret
	}
	return *o.MaxHeight
}

// GetMaxHeightOk returns a tuple with the MaxHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomSizeType) GetMaxHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxHeight) {
		return nil, false
	}
	return o.MaxHeight, true
}

// HasMaxHeight returns a boolean if a field has been set.
func (o *RoomSizeType) HasMaxHeight() bool {
	if o != nil && !IsNil(o.MaxHeight) {
		return true
	}

	return false
}

// SetMaxHeight gets a reference to the given float32 and assigns it to the MaxHeight field.
func (o *RoomSizeType) SetMaxHeight(v float32) {
	o.MaxHeight = &v
}

// GetMinHeight returns the MinHeight field value if set, zero value otherwise.
func (o *RoomSizeType) GetMinHeight() float32 {
	if o == nil || IsNil(o.MinHeight) {
		var ret float32
		return ret
	}
	return *o.MinHeight
}

// GetMinHeightOk returns a tuple with the MinHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomSizeType) GetMinHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.MinHeight) {
		return nil, false
	}
	return o.MinHeight, true
}

// HasMinHeight returns a boolean if a field has been set.
func (o *RoomSizeType) HasMinHeight() bool {
	if o != nil && !IsNil(o.MinHeight) {
		return true
	}

	return false
}

// SetMinHeight gets a reference to the given float32 and assigns it to the MinHeight field.
func (o *RoomSizeType) SetMinHeight(v float32) {
	o.MinHeight = &v
}

// GetUnitOfMeasureCode returns the UnitOfMeasureCode field value if set, zero value otherwise.
func (o *RoomSizeType) GetUnitOfMeasureCode() string {
	if o == nil || IsNil(o.UnitOfMeasureCode) {
		var ret string
		return ret
	}
	return *o.UnitOfMeasureCode
}

// GetUnitOfMeasureCodeOk returns a tuple with the UnitOfMeasureCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomSizeType) GetUnitOfMeasureCodeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitOfMeasureCode) {
		return nil, false
	}
	return o.UnitOfMeasureCode, true
}

// HasUnitOfMeasureCode returns a boolean if a field has been set.
func (o *RoomSizeType) HasUnitOfMeasureCode() bool {
	if o != nil && !IsNil(o.UnitOfMeasureCode) {
		return true
	}

	return false
}

// SetUnitOfMeasureCode gets a reference to the given string and assigns it to the UnitOfMeasureCode field.
func (o *RoomSizeType) SetUnitOfMeasureCode(v string) {
	o.UnitOfMeasureCode = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *RoomSizeType) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomSizeType) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *RoomSizeType) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *RoomSizeType) SetWidth(v float32) {
	o.Width = &v
}

func (o RoomSizeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomSizeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Area) {
		toSerialize["area"] = o.Area
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.MaxHeight) {
		toSerialize["maxHeight"] = o.MaxHeight
	}
	if !IsNil(o.MinHeight) {
		toSerialize["minHeight"] = o.MinHeight
	}
	if !IsNil(o.UnitOfMeasureCode) {
		toSerialize["unitOfMeasureCode"] = o.UnitOfMeasureCode
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

type NullableRoomSizeType struct {
	value *RoomSizeType
	isSet bool
}

func (v NullableRoomSizeType) Get() *RoomSizeType {
	return v.value
}

func (v *NullableRoomSizeType) Set(val *RoomSizeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomSizeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomSizeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomSizeType(val *RoomSizeType) *NullableRoomSizeType {
	return &NullableRoomSizeType{value: val, isSet: true}
}

func (v NullableRoomSizeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomSizeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


