/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the TargetFunctionSpaceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetFunctionSpaceType{}

// TargetFunctionSpaceType Function Space details that may be different from the source function space. If any of Space Name, Short Name, Custom Orders and Combo Element types are not passed together with this type, it means that it is expected that these would be copied from source function space
type TargetFunctionSpaceType struct {
	ComboElements []string `json:"comboElements,omitempty"`
	// The first custom order for sorting the function space display.
	OrderBy1 *int32 `json:"orderBy1,omitempty"`
	// The second custom order for sorting the function space display.
	OrderBy2 *int32 `json:"orderBy2,omitempty"`
	// The third custom order for sorting the function space display.
	OrderBy3 *int32 `json:"orderBy3,omitempty"`
	// The Short Name of the Function Space.
	ShortName *string `json:"shortName,omitempty"`
	// The Name of the Function Space.
	SpaceName *string `json:"spaceName,omitempty"`
	// Room number of the new function space to be created.
	TargetRoomNumber *string `json:"targetRoomNumber,omitempty"`
}

// NewTargetFunctionSpaceType instantiates a new TargetFunctionSpaceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetFunctionSpaceType() *TargetFunctionSpaceType {
	this := TargetFunctionSpaceType{}
	return &this
}

// NewTargetFunctionSpaceTypeWithDefaults instantiates a new TargetFunctionSpaceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetFunctionSpaceTypeWithDefaults() *TargetFunctionSpaceType {
	this := TargetFunctionSpaceType{}
	return &this
}

// GetComboElements returns the ComboElements field value if set, zero value otherwise.
func (o *TargetFunctionSpaceType) GetComboElements() []string {
	if o == nil || IsNil(o.ComboElements) {
		var ret []string
		return ret
	}
	return o.ComboElements
}

// GetComboElementsOk returns a tuple with the ComboElements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetFunctionSpaceType) GetComboElementsOk() ([]string, bool) {
	if o == nil || IsNil(o.ComboElements) {
		return nil, false
	}
	return o.ComboElements, true
}

// HasComboElements returns a boolean if a field has been set.
func (o *TargetFunctionSpaceType) HasComboElements() bool {
	if o != nil && !IsNil(o.ComboElements) {
		return true
	}

	return false
}

// SetComboElements gets a reference to the given []string and assigns it to the ComboElements field.
func (o *TargetFunctionSpaceType) SetComboElements(v []string) {
	o.ComboElements = v
}

// GetOrderBy1 returns the OrderBy1 field value if set, zero value otherwise.
func (o *TargetFunctionSpaceType) GetOrderBy1() int32 {
	if o == nil || IsNil(o.OrderBy1) {
		var ret int32
		return ret
	}
	return *o.OrderBy1
}

// GetOrderBy1Ok returns a tuple with the OrderBy1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetFunctionSpaceType) GetOrderBy1Ok() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy1) {
		return nil, false
	}
	return o.OrderBy1, true
}

// HasOrderBy1 returns a boolean if a field has been set.
func (o *TargetFunctionSpaceType) HasOrderBy1() bool {
	if o != nil && !IsNil(o.OrderBy1) {
		return true
	}

	return false
}

// SetOrderBy1 gets a reference to the given int32 and assigns it to the OrderBy1 field.
func (o *TargetFunctionSpaceType) SetOrderBy1(v int32) {
	o.OrderBy1 = &v
}

// GetOrderBy2 returns the OrderBy2 field value if set, zero value otherwise.
func (o *TargetFunctionSpaceType) GetOrderBy2() int32 {
	if o == nil || IsNil(o.OrderBy2) {
		var ret int32
		return ret
	}
	return *o.OrderBy2
}

// GetOrderBy2Ok returns a tuple with the OrderBy2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetFunctionSpaceType) GetOrderBy2Ok() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy2) {
		return nil, false
	}
	return o.OrderBy2, true
}

// HasOrderBy2 returns a boolean if a field has been set.
func (o *TargetFunctionSpaceType) HasOrderBy2() bool {
	if o != nil && !IsNil(o.OrderBy2) {
		return true
	}

	return false
}

// SetOrderBy2 gets a reference to the given int32 and assigns it to the OrderBy2 field.
func (o *TargetFunctionSpaceType) SetOrderBy2(v int32) {
	o.OrderBy2 = &v
}

// GetOrderBy3 returns the OrderBy3 field value if set, zero value otherwise.
func (o *TargetFunctionSpaceType) GetOrderBy3() int32 {
	if o == nil || IsNil(o.OrderBy3) {
		var ret int32
		return ret
	}
	return *o.OrderBy3
}

// GetOrderBy3Ok returns a tuple with the OrderBy3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetFunctionSpaceType) GetOrderBy3Ok() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy3) {
		return nil, false
	}
	return o.OrderBy3, true
}

// HasOrderBy3 returns a boolean if a field has been set.
func (o *TargetFunctionSpaceType) HasOrderBy3() bool {
	if o != nil && !IsNil(o.OrderBy3) {
		return true
	}

	return false
}

// SetOrderBy3 gets a reference to the given int32 and assigns it to the OrderBy3 field.
func (o *TargetFunctionSpaceType) SetOrderBy3(v int32) {
	o.OrderBy3 = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *TargetFunctionSpaceType) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetFunctionSpaceType) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *TargetFunctionSpaceType) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *TargetFunctionSpaceType) SetShortName(v string) {
	o.ShortName = &v
}

// GetSpaceName returns the SpaceName field value if set, zero value otherwise.
func (o *TargetFunctionSpaceType) GetSpaceName() string {
	if o == nil || IsNil(o.SpaceName) {
		var ret string
		return ret
	}
	return *o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetFunctionSpaceType) GetSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceName) {
		return nil, false
	}
	return o.SpaceName, true
}

// HasSpaceName returns a boolean if a field has been set.
func (o *TargetFunctionSpaceType) HasSpaceName() bool {
	if o != nil && !IsNil(o.SpaceName) {
		return true
	}

	return false
}

// SetSpaceName gets a reference to the given string and assigns it to the SpaceName field.
func (o *TargetFunctionSpaceType) SetSpaceName(v string) {
	o.SpaceName = &v
}

// GetTargetRoomNumber returns the TargetRoomNumber field value if set, zero value otherwise.
func (o *TargetFunctionSpaceType) GetTargetRoomNumber() string {
	if o == nil || IsNil(o.TargetRoomNumber) {
		var ret string
		return ret
	}
	return *o.TargetRoomNumber
}

// GetTargetRoomNumberOk returns a tuple with the TargetRoomNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetFunctionSpaceType) GetTargetRoomNumberOk() (*string, bool) {
	if o == nil || IsNil(o.TargetRoomNumber) {
		return nil, false
	}
	return o.TargetRoomNumber, true
}

// HasTargetRoomNumber returns a boolean if a field has been set.
func (o *TargetFunctionSpaceType) HasTargetRoomNumber() bool {
	if o != nil && !IsNil(o.TargetRoomNumber) {
		return true
	}

	return false
}

// SetTargetRoomNumber gets a reference to the given string and assigns it to the TargetRoomNumber field.
func (o *TargetFunctionSpaceType) SetTargetRoomNumber(v string) {
	o.TargetRoomNumber = &v
}

func (o TargetFunctionSpaceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetFunctionSpaceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComboElements) {
		toSerialize["comboElements"] = o.ComboElements
	}
	if !IsNil(o.OrderBy1) {
		toSerialize["orderBy1"] = o.OrderBy1
	}
	if !IsNil(o.OrderBy2) {
		toSerialize["orderBy2"] = o.OrderBy2
	}
	if !IsNil(o.OrderBy3) {
		toSerialize["orderBy3"] = o.OrderBy3
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.SpaceName) {
		toSerialize["spaceName"] = o.SpaceName
	}
	if !IsNil(o.TargetRoomNumber) {
		toSerialize["targetRoomNumber"] = o.TargetRoomNumber
	}
	return toSerialize, nil
}

type NullableTargetFunctionSpaceType struct {
	value *TargetFunctionSpaceType
	isSet bool
}

func (v NullableTargetFunctionSpaceType) Get() *TargetFunctionSpaceType {
	return v.value
}

func (v *NullableTargetFunctionSpaceType) Set(val *TargetFunctionSpaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetFunctionSpaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetFunctionSpaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetFunctionSpaceType(val *TargetFunctionSpaceType) *NullableTargetFunctionSpaceType {
	return &NullableTargetFunctionSpaceType{value: val, isSet: true}
}

func (v NullableTargetFunctionSpaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetFunctionSpaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


