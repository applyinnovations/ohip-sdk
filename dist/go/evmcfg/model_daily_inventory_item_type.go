/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the DailyInventoryItemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyInventoryItemType{}

// DailyInventoryItemType Details of Daily Inventory Items.
type DailyInventoryItemType struct {
	// List of Daily quantity for Item by date/dates.
	DailyItemQuantityByDate []ItemQuantityDateType `json:"dailyItemQuantityByDate,omitempty"`
	// The Hotel code which the daily item belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	ItemClassId *UniqueIDType `json:"itemClassId,omitempty"`
	// The Description of the Daily Item from Inventory.
	ItemDescription *string `json:"itemDescription,omitempty"`
	ItemId *UniqueIDType `json:"itemId,omitempty"`
	ItemName *TranslationTextType200 `json:"itemName,omitempty"`
	// Item quantity in Stock of the Daily Item from Inventory.
	QuantityInStock *float32 `json:"quantityInStock,omitempty"`
}

// NewDailyInventoryItemType instantiates a new DailyInventoryItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyInventoryItemType() *DailyInventoryItemType {
	this := DailyInventoryItemType{}
	return &this
}

// NewDailyInventoryItemTypeWithDefaults instantiates a new DailyInventoryItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyInventoryItemTypeWithDefaults() *DailyInventoryItemType {
	this := DailyInventoryItemType{}
	return &this
}

// GetDailyItemQuantityByDate returns the DailyItemQuantityByDate field value if set, zero value otherwise.
func (o *DailyInventoryItemType) GetDailyItemQuantityByDate() []ItemQuantityDateType {
	if o == nil || IsNil(o.DailyItemQuantityByDate) {
		var ret []ItemQuantityDateType
		return ret
	}
	return o.DailyItemQuantityByDate
}

// GetDailyItemQuantityByDateOk returns a tuple with the DailyItemQuantityByDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyInventoryItemType) GetDailyItemQuantityByDateOk() ([]ItemQuantityDateType, bool) {
	if o == nil || IsNil(o.DailyItemQuantityByDate) {
		return nil, false
	}
	return o.DailyItemQuantityByDate, true
}

// HasDailyItemQuantityByDate returns a boolean if a field has been set.
func (o *DailyInventoryItemType) HasDailyItemQuantityByDate() bool {
	if o != nil && !IsNil(o.DailyItemQuantityByDate) {
		return true
	}

	return false
}

// SetDailyItemQuantityByDate gets a reference to the given []ItemQuantityDateType and assigns it to the DailyItemQuantityByDate field.
func (o *DailyInventoryItemType) SetDailyItemQuantityByDate(v []ItemQuantityDateType) {
	o.DailyItemQuantityByDate = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *DailyInventoryItemType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyInventoryItemType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *DailyInventoryItemType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *DailyInventoryItemType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetItemClassId returns the ItemClassId field value if set, zero value otherwise.
func (o *DailyInventoryItemType) GetItemClassId() UniqueIDType {
	if o == nil || IsNil(o.ItemClassId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemClassId
}

// GetItemClassIdOk returns a tuple with the ItemClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyInventoryItemType) GetItemClassIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemClassId) {
		return nil, false
	}
	return o.ItemClassId, true
}

// HasItemClassId returns a boolean if a field has been set.
func (o *DailyInventoryItemType) HasItemClassId() bool {
	if o != nil && !IsNil(o.ItemClassId) {
		return true
	}

	return false
}

// SetItemClassId gets a reference to the given UniqueIDType and assigns it to the ItemClassId field.
func (o *DailyInventoryItemType) SetItemClassId(v UniqueIDType) {
	o.ItemClassId = &v
}

// GetItemDescription returns the ItemDescription field value if set, zero value otherwise.
func (o *DailyInventoryItemType) GetItemDescription() string {
	if o == nil || IsNil(o.ItemDescription) {
		var ret string
		return ret
	}
	return *o.ItemDescription
}

// GetItemDescriptionOk returns a tuple with the ItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyInventoryItemType) GetItemDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDescription) {
		return nil, false
	}
	return o.ItemDescription, true
}

// HasItemDescription returns a boolean if a field has been set.
func (o *DailyInventoryItemType) HasItemDescription() bool {
	if o != nil && !IsNil(o.ItemDescription) {
		return true
	}

	return false
}

// SetItemDescription gets a reference to the given string and assigns it to the ItemDescription field.
func (o *DailyInventoryItemType) SetItemDescription(v string) {
	o.ItemDescription = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *DailyInventoryItemType) GetItemId() UniqueIDType {
	if o == nil || IsNil(o.ItemId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyInventoryItemType) GetItemIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *DailyInventoryItemType) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given UniqueIDType and assigns it to the ItemId field.
func (o *DailyInventoryItemType) SetItemId(v UniqueIDType) {
	o.ItemId = &v
}

// GetItemName returns the ItemName field value if set, zero value otherwise.
func (o *DailyInventoryItemType) GetItemName() TranslationTextType200 {
	if o == nil || IsNil(o.ItemName) {
		var ret TranslationTextType200
		return ret
	}
	return *o.ItemName
}

// GetItemNameOk returns a tuple with the ItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyInventoryItemType) GetItemNameOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.ItemName) {
		return nil, false
	}
	return o.ItemName, true
}

// HasItemName returns a boolean if a field has been set.
func (o *DailyInventoryItemType) HasItemName() bool {
	if o != nil && !IsNil(o.ItemName) {
		return true
	}

	return false
}

// SetItemName gets a reference to the given TranslationTextType200 and assigns it to the ItemName field.
func (o *DailyInventoryItemType) SetItemName(v TranslationTextType200) {
	o.ItemName = &v
}

// GetQuantityInStock returns the QuantityInStock field value if set, zero value otherwise.
func (o *DailyInventoryItemType) GetQuantityInStock() float32 {
	if o == nil || IsNil(o.QuantityInStock) {
		var ret float32
		return ret
	}
	return *o.QuantityInStock
}

// GetQuantityInStockOk returns a tuple with the QuantityInStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyInventoryItemType) GetQuantityInStockOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityInStock) {
		return nil, false
	}
	return o.QuantityInStock, true
}

// HasQuantityInStock returns a boolean if a field has been set.
func (o *DailyInventoryItemType) HasQuantityInStock() bool {
	if o != nil && !IsNil(o.QuantityInStock) {
		return true
	}

	return false
}

// SetQuantityInStock gets a reference to the given float32 and assigns it to the QuantityInStock field.
func (o *DailyInventoryItemType) SetQuantityInStock(v float32) {
	o.QuantityInStock = &v
}

func (o DailyInventoryItemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyInventoryItemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyItemQuantityByDate) {
		toSerialize["dailyItemQuantityByDate"] = o.DailyItemQuantityByDate
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ItemClassId) {
		toSerialize["itemClassId"] = o.ItemClassId
	}
	if !IsNil(o.ItemDescription) {
		toSerialize["itemDescription"] = o.ItemDescription
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.ItemName) {
		toSerialize["itemName"] = o.ItemName
	}
	if !IsNil(o.QuantityInStock) {
		toSerialize["quantityInStock"] = o.QuantityInStock
	}
	return toSerialize, nil
}

type NullableDailyInventoryItemType struct {
	value *DailyInventoryItemType
	isSet bool
}

func (v NullableDailyInventoryItemType) Get() *DailyInventoryItemType {
	return v.value
}

func (v *NullableDailyInventoryItemType) Set(val *DailyInventoryItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyInventoryItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyInventoryItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyInventoryItemType(val *DailyInventoryItemType) *NullableDailyInventoryItemType {
	return &NullableDailyInventoryItemType{value: val, isSet: true}
}

func (v NullableDailyInventoryItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyInventoryItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


