/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CopyCateringMenuType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyCateringMenuType{}

// CopyCateringMenuType struct for CopyCateringMenuType
type CopyCateringMenuType struct {
	// Source Hotel code from where the menu will be copied.
	HotelId *string `json:"hotelId,omitempty"`
	// List of Values of Menu.
	MenuClassList []CateringMenuClassType `json:"menuClassList,omitempty"`
	MenuId *UniqueIDType `json:"menuId,omitempty"`
}

// NewCopyCateringMenuType instantiates a new CopyCateringMenuType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyCateringMenuType() *CopyCateringMenuType {
	this := CopyCateringMenuType{}
	return &this
}

// NewCopyCateringMenuTypeWithDefaults instantiates a new CopyCateringMenuType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyCateringMenuTypeWithDefaults() *CopyCateringMenuType {
	this := CopyCateringMenuType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyCateringMenuType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringMenuType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyCateringMenuType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyCateringMenuType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMenuClassList returns the MenuClassList field value if set, zero value otherwise.
func (o *CopyCateringMenuType) GetMenuClassList() []CateringMenuClassType {
	if o == nil || IsNil(o.MenuClassList) {
		var ret []CateringMenuClassType
		return ret
	}
	return o.MenuClassList
}

// GetMenuClassListOk returns a tuple with the MenuClassList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringMenuType) GetMenuClassListOk() ([]CateringMenuClassType, bool) {
	if o == nil || IsNil(o.MenuClassList) {
		return nil, false
	}
	return o.MenuClassList, true
}

// HasMenuClassList returns a boolean if a field has been set.
func (o *CopyCateringMenuType) HasMenuClassList() bool {
	if o != nil && !IsNil(o.MenuClassList) {
		return true
	}

	return false
}

// SetMenuClassList gets a reference to the given []CateringMenuClassType and assigns it to the MenuClassList field.
func (o *CopyCateringMenuType) SetMenuClassList(v []CateringMenuClassType) {
	o.MenuClassList = v
}

// GetMenuId returns the MenuId field value if set, zero value otherwise.
func (o *CopyCateringMenuType) GetMenuId() UniqueIDType {
	if o == nil || IsNil(o.MenuId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MenuId
}

// GetMenuIdOk returns a tuple with the MenuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringMenuType) GetMenuIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MenuId) {
		return nil, false
	}
	return o.MenuId, true
}

// HasMenuId returns a boolean if a field has been set.
func (o *CopyCateringMenuType) HasMenuId() bool {
	if o != nil && !IsNil(o.MenuId) {
		return true
	}

	return false
}

// SetMenuId gets a reference to the given UniqueIDType and assigns it to the MenuId field.
func (o *CopyCateringMenuType) SetMenuId(v UniqueIDType) {
	o.MenuId = &v
}

func (o CopyCateringMenuType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyCateringMenuType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MenuClassList) {
		toSerialize["menuClassList"] = o.MenuClassList
	}
	if !IsNil(o.MenuId) {
		toSerialize["menuId"] = o.MenuId
	}
	return toSerialize, nil
}

type NullableCopyCateringMenuType struct {
	value *CopyCateringMenuType
	isSet bool
}

func (v NullableCopyCateringMenuType) Get() *CopyCateringMenuType {
	return v.value
}

func (v *NullableCopyCateringMenuType) Set(val *CopyCateringMenuType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyCateringMenuType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyCateringMenuType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyCateringMenuType(val *CopyCateringMenuType) *NullableCopyCateringMenuType {
	return &NullableCopyCateringMenuType{value: val, isSet: true}
}

func (v NullableCopyCateringMenuType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyCateringMenuType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


