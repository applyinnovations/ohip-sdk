/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the RoomCapacityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomCapacityType{}

// RoomCapacityType Detailed information on the capacity of a room.
type RoomCapacityType struct {
	// Minimum capacity of the room.
	MinCapacity *int32 `json:"minCapacity,omitempty"`
	// Maximum capacity of the room.
	MaxCapacity *int32 `json:"maxCapacity,omitempty"`
}

// NewRoomCapacityType instantiates a new RoomCapacityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomCapacityType() *RoomCapacityType {
	this := RoomCapacityType{}
	return &this
}

// NewRoomCapacityTypeWithDefaults instantiates a new RoomCapacityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomCapacityTypeWithDefaults() *RoomCapacityType {
	this := RoomCapacityType{}
	return &this
}

// GetMinCapacity returns the MinCapacity field value if set, zero value otherwise.
func (o *RoomCapacityType) GetMinCapacity() int32 {
	if o == nil || IsNil(o.MinCapacity) {
		var ret int32
		return ret
	}
	return *o.MinCapacity
}

// GetMinCapacityOk returns a tuple with the MinCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCapacityType) GetMinCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.MinCapacity) {
		return nil, false
	}
	return o.MinCapacity, true
}

// HasMinCapacity returns a boolean if a field has been set.
func (o *RoomCapacityType) HasMinCapacity() bool {
	if o != nil && !IsNil(o.MinCapacity) {
		return true
	}

	return false
}

// SetMinCapacity gets a reference to the given int32 and assigns it to the MinCapacity field.
func (o *RoomCapacityType) SetMinCapacity(v int32) {
	o.MinCapacity = &v
}

// GetMaxCapacity returns the MaxCapacity field value if set, zero value otherwise.
func (o *RoomCapacityType) GetMaxCapacity() int32 {
	if o == nil || IsNil(o.MaxCapacity) {
		var ret int32
		return ret
	}
	return *o.MaxCapacity
}

// GetMaxCapacityOk returns a tuple with the MaxCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCapacityType) GetMaxCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCapacity) {
		return nil, false
	}
	return o.MaxCapacity, true
}

// HasMaxCapacity returns a boolean if a field has been set.
func (o *RoomCapacityType) HasMaxCapacity() bool {
	if o != nil && !IsNil(o.MaxCapacity) {
		return true
	}

	return false
}

// SetMaxCapacity gets a reference to the given int32 and assigns it to the MaxCapacity field.
func (o *RoomCapacityType) SetMaxCapacity(v int32) {
	o.MaxCapacity = &v
}

func (o RoomCapacityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomCapacityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinCapacity) {
		toSerialize["minCapacity"] = o.MinCapacity
	}
	if !IsNil(o.MaxCapacity) {
		toSerialize["maxCapacity"] = o.MaxCapacity
	}
	return toSerialize, nil
}

type NullableRoomCapacityType struct {
	value *RoomCapacityType
	isSet bool
}

func (v NullableRoomCapacityType) Get() *RoomCapacityType {
	return v.value
}

func (v *NullableRoomCapacityType) Set(val *RoomCapacityType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomCapacityType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomCapacityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomCapacityType(val *RoomCapacityType) *NullableRoomCapacityType {
	return &NullableRoomCapacityType{value: val, isSet: true}
}

func (v NullableRoomCapacityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomCapacityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


