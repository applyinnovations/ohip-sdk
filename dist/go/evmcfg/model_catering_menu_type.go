/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringMenuType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringMenuType{}

// CateringMenuType struct for CateringMenuType
type CateringMenuType struct {
	Id *UniqueIDType `json:"id,omitempty"`
	// This type holds class id for given menu.
	ClassId *string `json:"classId,omitempty"`
	// The Hotel code which the catering menu belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	Info *CateringMenuInfoType `json:"info,omitempty"`
	// This type holds revenue list.
	RevenueList []CateringMenuRevType `json:"revenueList,omitempty"`
	// List of Values of Catering Menu Detail.
	MenuDetailList []CateringMenuDetailType `json:"menuDetailList,omitempty"`
	// This type holds Multi choice Menu.
	MultiChoiceList []CateringMultiChoiceMenuType `json:"multiChoiceList,omitempty"`
	// Contains event resource note information.
	MenuNoteList []EventResourceNoteType `json:"menuNoteList,omitempty"`
}

// NewCateringMenuType instantiates a new CateringMenuType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringMenuType() *CateringMenuType {
	this := CateringMenuType{}
	return &this
}

// NewCateringMenuTypeWithDefaults instantiates a new CateringMenuType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringMenuTypeWithDefaults() *CateringMenuType {
	this := CateringMenuType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CateringMenuType) GetId() UniqueIDType {
	if o == nil || IsNil(o.Id) {
		var ret UniqueIDType
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CateringMenuType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given UniqueIDType and assigns it to the Id field.
func (o *CateringMenuType) SetId(v UniqueIDType) {
	o.Id = &v
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *CateringMenuType) GetClassId() string {
	if o == nil || IsNil(o.ClassId) {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetClassIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClassId) {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *CateringMenuType) HasClassId() bool {
	if o != nil && !IsNil(o.ClassId) {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *CateringMenuType) SetClassId(v string) {
	o.ClassId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CateringMenuType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CateringMenuType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CateringMenuType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *CateringMenuType) GetInfo() CateringMenuInfoType {
	if o == nil || IsNil(o.Info) {
		var ret CateringMenuInfoType
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetInfoOk() (*CateringMenuInfoType, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *CateringMenuType) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given CateringMenuInfoType and assigns it to the Info field.
func (o *CateringMenuType) SetInfo(v CateringMenuInfoType) {
	o.Info = &v
}

// GetRevenueList returns the RevenueList field value if set, zero value otherwise.
func (o *CateringMenuType) GetRevenueList() []CateringMenuRevType {
	if o == nil || IsNil(o.RevenueList) {
		var ret []CateringMenuRevType
		return ret
	}
	return o.RevenueList
}

// GetRevenueListOk returns a tuple with the RevenueList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetRevenueListOk() ([]CateringMenuRevType, bool) {
	if o == nil || IsNil(o.RevenueList) {
		return nil, false
	}
	return o.RevenueList, true
}

// HasRevenueList returns a boolean if a field has been set.
func (o *CateringMenuType) HasRevenueList() bool {
	if o != nil && !IsNil(o.RevenueList) {
		return true
	}

	return false
}

// SetRevenueList gets a reference to the given []CateringMenuRevType and assigns it to the RevenueList field.
func (o *CateringMenuType) SetRevenueList(v []CateringMenuRevType) {
	o.RevenueList = v
}

// GetMenuDetailList returns the MenuDetailList field value if set, zero value otherwise.
func (o *CateringMenuType) GetMenuDetailList() []CateringMenuDetailType {
	if o == nil || IsNil(o.MenuDetailList) {
		var ret []CateringMenuDetailType
		return ret
	}
	return o.MenuDetailList
}

// GetMenuDetailListOk returns a tuple with the MenuDetailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetMenuDetailListOk() ([]CateringMenuDetailType, bool) {
	if o == nil || IsNil(o.MenuDetailList) {
		return nil, false
	}
	return o.MenuDetailList, true
}

// HasMenuDetailList returns a boolean if a field has been set.
func (o *CateringMenuType) HasMenuDetailList() bool {
	if o != nil && !IsNil(o.MenuDetailList) {
		return true
	}

	return false
}

// SetMenuDetailList gets a reference to the given []CateringMenuDetailType and assigns it to the MenuDetailList field.
func (o *CateringMenuType) SetMenuDetailList(v []CateringMenuDetailType) {
	o.MenuDetailList = v
}

// GetMultiChoiceList returns the MultiChoiceList field value if set, zero value otherwise.
func (o *CateringMenuType) GetMultiChoiceList() []CateringMultiChoiceMenuType {
	if o == nil || IsNil(o.MultiChoiceList) {
		var ret []CateringMultiChoiceMenuType
		return ret
	}
	return o.MultiChoiceList
}

// GetMultiChoiceListOk returns a tuple with the MultiChoiceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetMultiChoiceListOk() ([]CateringMultiChoiceMenuType, bool) {
	if o == nil || IsNil(o.MultiChoiceList) {
		return nil, false
	}
	return o.MultiChoiceList, true
}

// HasMultiChoiceList returns a boolean if a field has been set.
func (o *CateringMenuType) HasMultiChoiceList() bool {
	if o != nil && !IsNil(o.MultiChoiceList) {
		return true
	}

	return false
}

// SetMultiChoiceList gets a reference to the given []CateringMultiChoiceMenuType and assigns it to the MultiChoiceList field.
func (o *CateringMenuType) SetMultiChoiceList(v []CateringMultiChoiceMenuType) {
	o.MultiChoiceList = v
}

// GetMenuNoteList returns the MenuNoteList field value if set, zero value otherwise.
func (o *CateringMenuType) GetMenuNoteList() []EventResourceNoteType {
	if o == nil || IsNil(o.MenuNoteList) {
		var ret []EventResourceNoteType
		return ret
	}
	return o.MenuNoteList
}

// GetMenuNoteListOk returns a tuple with the MenuNoteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuType) GetMenuNoteListOk() ([]EventResourceNoteType, bool) {
	if o == nil || IsNil(o.MenuNoteList) {
		return nil, false
	}
	return o.MenuNoteList, true
}

// HasMenuNoteList returns a boolean if a field has been set.
func (o *CateringMenuType) HasMenuNoteList() bool {
	if o != nil && !IsNil(o.MenuNoteList) {
		return true
	}

	return false
}

// SetMenuNoteList gets a reference to the given []EventResourceNoteType and assigns it to the MenuNoteList field.
func (o *CateringMenuType) SetMenuNoteList(v []EventResourceNoteType) {
	o.MenuNoteList = v
}

func (o CateringMenuType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringMenuType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ClassId) {
		toSerialize["classId"] = o.ClassId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.RevenueList) {
		toSerialize["revenueList"] = o.RevenueList
	}
	if !IsNil(o.MenuDetailList) {
		toSerialize["menuDetailList"] = o.MenuDetailList
	}
	if !IsNil(o.MultiChoiceList) {
		toSerialize["multiChoiceList"] = o.MultiChoiceList
	}
	if !IsNil(o.MenuNoteList) {
		toSerialize["menuNoteList"] = o.MenuNoteList
	}
	return toSerialize, nil
}

type NullableCateringMenuType struct {
	value *CateringMenuType
	isSet bool
}

func (v NullableCateringMenuType) Get() *CateringMenuType {
	return v.value
}

func (v *NullableCateringMenuType) Set(val *CateringMenuType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringMenuType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringMenuType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringMenuType(val *CateringMenuType) *NullableCateringMenuType {
	return &NullableCateringMenuType{value: val, isSet: true}
}

func (v NullableCateringMenuType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringMenuType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


