/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
	"fmt"
)

// FunctionSpaceRateTypeType Indicates the function space rate is applied per person.
type FunctionSpaceRateTypeType string

// List of functionSpaceRateTypeType
const (
	FUNCTIONSPACERATETYPETYPE_PER_ROOM FunctionSpaceRateTypeType = "PerRoom"
	FUNCTIONSPACERATETYPETYPE_PER_PERSON FunctionSpaceRateTypeType = "PerPerson"
)

// All allowed values of FunctionSpaceRateTypeType enum
var AllowedFunctionSpaceRateTypeTypeEnumValues = []FunctionSpaceRateTypeType{
	"PerRoom",
	"PerPerson",
}

func (v *FunctionSpaceRateTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FunctionSpaceRateTypeType(value)
	for _, existing := range AllowedFunctionSpaceRateTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FunctionSpaceRateTypeType", value)
}

// NewFunctionSpaceRateTypeTypeFromValue returns a pointer to a valid FunctionSpaceRateTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFunctionSpaceRateTypeTypeFromValue(v string) (*FunctionSpaceRateTypeType, error) {
	ev := FunctionSpaceRateTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FunctionSpaceRateTypeType: valid values are %v", v, AllowedFunctionSpaceRateTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FunctionSpaceRateTypeType) IsValid() bool {
	for _, existing := range AllowedFunctionSpaceRateTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to functionSpaceRateTypeType value
func (v FunctionSpaceRateTypeType) Ptr() *FunctionSpaceRateTypeType {
	return &v
}

type NullableFunctionSpaceRateTypeType struct {
	value *FunctionSpaceRateTypeType
	isSet bool
}

func (v NullableFunctionSpaceRateTypeType) Get() *FunctionSpaceRateTypeType {
	return v.value
}

func (v *NullableFunctionSpaceRateTypeType) Set(val *FunctionSpaceRateTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionSpaceRateTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionSpaceRateTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionSpaceRateTypeType(val *FunctionSpaceRateTypeType) *NullableFunctionSpaceRateTypeType {
	return &NullableFunctionSpaceRateTypeType{value: val, isSet: true}
}

func (v NullableFunctionSpaceRateTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionSpaceRateTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

