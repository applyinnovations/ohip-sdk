/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the ItemPoolType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemPoolType{}

// ItemPoolType A type which holds the Item pool.
type ItemPoolType struct {
	// Item Pools Code
	Code *string `json:"code,omitempty"`
	// Description of the Item Pool code.
	Description *string `json:"description,omitempty"`
	// Sequence of Item Pool code.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Hotel Code which belong to Item Pool
	HotelId *string `json:"hotelId,omitempty"`
	// Item Class which associated to Item codes.
	ItemClass *string `json:"itemClass,omitempty"`
	// Collection of Item Id which belongs to Item Code.
	ItemIds []float32 `json:"itemIds,omitempty"`
}

// NewItemPoolType instantiates a new ItemPoolType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemPoolType() *ItemPoolType {
	this := ItemPoolType{}
	return &this
}

// NewItemPoolTypeWithDefaults instantiates a new ItemPoolType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemPoolTypeWithDefaults() *ItemPoolType {
	this := ItemPoolType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ItemPoolType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPoolType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ItemPoolType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ItemPoolType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ItemPoolType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPoolType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ItemPoolType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ItemPoolType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *ItemPoolType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPoolType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *ItemPoolType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *ItemPoolType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ItemPoolType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPoolType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ItemPoolType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ItemPoolType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetItemClass returns the ItemClass field value if set, zero value otherwise.
func (o *ItemPoolType) GetItemClass() string {
	if o == nil || IsNil(o.ItemClass) {
		var ret string
		return ret
	}
	return *o.ItemClass
}

// GetItemClassOk returns a tuple with the ItemClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPoolType) GetItemClassOk() (*string, bool) {
	if o == nil || IsNil(o.ItemClass) {
		return nil, false
	}
	return o.ItemClass, true
}

// HasItemClass returns a boolean if a field has been set.
func (o *ItemPoolType) HasItemClass() bool {
	if o != nil && !IsNil(o.ItemClass) {
		return true
	}

	return false
}

// SetItemClass gets a reference to the given string and assigns it to the ItemClass field.
func (o *ItemPoolType) SetItemClass(v string) {
	o.ItemClass = &v
}

// GetItemIds returns the ItemIds field value if set, zero value otherwise.
func (o *ItemPoolType) GetItemIds() []float32 {
	if o == nil || IsNil(o.ItemIds) {
		var ret []float32
		return ret
	}
	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPoolType) GetItemIdsOk() ([]float32, bool) {
	if o == nil || IsNil(o.ItemIds) {
		return nil, false
	}
	return o.ItemIds, true
}

// HasItemIds returns a boolean if a field has been set.
func (o *ItemPoolType) HasItemIds() bool {
	if o != nil && !IsNil(o.ItemIds) {
		return true
	}

	return false
}

// SetItemIds gets a reference to the given []float32 and assigns it to the ItemIds field.
func (o *ItemPoolType) SetItemIds(v []float32) {
	o.ItemIds = v
}

func (o ItemPoolType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemPoolType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ItemClass) {
		toSerialize["itemClass"] = o.ItemClass
	}
	if !IsNil(o.ItemIds) {
		toSerialize["itemIds"] = o.ItemIds
	}
	return toSerialize, nil
}

type NullableItemPoolType struct {
	value *ItemPoolType
	isSet bool
}

func (v NullableItemPoolType) Get() *ItemPoolType {
	return v.value
}

func (v *NullableItemPoolType) Set(val *ItemPoolType) {
	v.value = val
	v.isSet = true
}

func (v NullableItemPoolType) IsSet() bool {
	return v.isSet
}

func (v *NullableItemPoolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemPoolType(val *ItemPoolType) *NullableItemPoolType {
	return &NullableItemPoolType{value: val, isSet: true}
}

func (v NullableItemPoolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemPoolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


