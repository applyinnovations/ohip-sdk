/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the RevenueGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevenueGroupType{}

// RevenueGroupType Provides information about Catering Revenue Group along with Revenue Type Code.
type RevenueGroupType struct {
	// Code is used to identify a Catering Revenue Group.
	Code *string `json:"code,omitempty"`
	// Sequence Number of the Catering Revenue Group.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Indicates if the Catering Revenue Group is inactive.
	Inactive *bool `json:"inactive,omitempty"`
	// List of Revenue Types to be configured
	RevenueTypes []RevenueTypeType `json:"revenueTypes,omitempty"`
	TranslatableDescription *TranslationTextType200 `json:"translatableDescription,omitempty"`
}

// NewRevenueGroupType instantiates a new RevenueGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevenueGroupType() *RevenueGroupType {
	this := RevenueGroupType{}
	return &this
}

// NewRevenueGroupTypeWithDefaults instantiates a new RevenueGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevenueGroupTypeWithDefaults() *RevenueGroupType {
	this := RevenueGroupType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RevenueGroupType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueGroupType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RevenueGroupType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RevenueGroupType) SetCode(v string) {
	o.Code = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *RevenueGroupType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueGroupType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *RevenueGroupType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *RevenueGroupType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *RevenueGroupType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueGroupType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *RevenueGroupType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *RevenueGroupType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetRevenueTypes returns the RevenueTypes field value if set, zero value otherwise.
func (o *RevenueGroupType) GetRevenueTypes() []RevenueTypeType {
	if o == nil || IsNil(o.RevenueTypes) {
		var ret []RevenueTypeType
		return ret
	}
	return o.RevenueTypes
}

// GetRevenueTypesOk returns a tuple with the RevenueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueGroupType) GetRevenueTypesOk() ([]RevenueTypeType, bool) {
	if o == nil || IsNil(o.RevenueTypes) {
		return nil, false
	}
	return o.RevenueTypes, true
}

// HasRevenueTypes returns a boolean if a field has been set.
func (o *RevenueGroupType) HasRevenueTypes() bool {
	if o != nil && !IsNil(o.RevenueTypes) {
		return true
	}

	return false
}

// SetRevenueTypes gets a reference to the given []RevenueTypeType and assigns it to the RevenueTypes field.
func (o *RevenueGroupType) SetRevenueTypes(v []RevenueTypeType) {
	o.RevenueTypes = v
}

// GetTranslatableDescription returns the TranslatableDescription field value if set, zero value otherwise.
func (o *RevenueGroupType) GetTranslatableDescription() TranslationTextType200 {
	if o == nil || IsNil(o.TranslatableDescription) {
		var ret TranslationTextType200
		return ret
	}
	return *o.TranslatableDescription
}

// GetTranslatableDescriptionOk returns a tuple with the TranslatableDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueGroupType) GetTranslatableDescriptionOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.TranslatableDescription) {
		return nil, false
	}
	return o.TranslatableDescription, true
}

// HasTranslatableDescription returns a boolean if a field has been set.
func (o *RevenueGroupType) HasTranslatableDescription() bool {
	if o != nil && !IsNil(o.TranslatableDescription) {
		return true
	}

	return false
}

// SetTranslatableDescription gets a reference to the given TranslationTextType200 and assigns it to the TranslatableDescription field.
func (o *RevenueGroupType) SetTranslatableDescription(v TranslationTextType200) {
	o.TranslatableDescription = &v
}

func (o RevenueGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevenueGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.RevenueTypes) {
		toSerialize["revenueTypes"] = o.RevenueTypes
	}
	if !IsNil(o.TranslatableDescription) {
		toSerialize["translatableDescription"] = o.TranslatableDescription
	}
	return toSerialize, nil
}

type NullableRevenueGroupType struct {
	value *RevenueGroupType
	isSet bool
}

func (v NullableRevenueGroupType) Get() *RevenueGroupType {
	return v.value
}

func (v *NullableRevenueGroupType) Set(val *RevenueGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableRevenueGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableRevenueGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevenueGroupType(val *RevenueGroupType) *NullableRevenueGroupType {
	return &NullableRevenueGroupType{value: val, isSet: true}
}

func (v NullableRevenueGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevenueGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


