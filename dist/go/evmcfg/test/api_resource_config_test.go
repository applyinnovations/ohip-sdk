/*
OPERA Cloud Event Configuration API

Testing ResourceConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package evmcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/evmcfg"
)

func Test_evmcfg_ResourceConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourceConfigAPIService CheckDiscountAvailable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.CheckDiscountAvailable(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyCateringMenuItemClasses(context.Background(), cateringMenuItemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyCateringMenuItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyCateringMenus(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyCateringPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var cateringPackageId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyCateringPackage(context.Background(), hotelId, cateringPackageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyCateringPackagePrice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pricesId string
		var cateringPackageId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyCateringPackagePrice(context.Background(), pricesId, cateringPackageId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyEventForecasts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceHotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyInventoryItems(context.Background(), sourceHotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService CopyItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.CopyItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringContainersCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringContainers(context.Background(), cateringContainersCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringItemRatesCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringItemRates(context.Background(), cateringItemRatesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var menuClassesId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringMenuClasses(context.Background(), menuClassesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringMenuItemClasses(context.Background(), cateringMenuItemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringMenuItems(context.Background(), cateringMenuItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringMenuItemsByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringMenuItemsByChain(context.Background(), cateringMenuItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringMenuMultiCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var coursesId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringMenuMultiCourses(context.Background(), coursesId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringMenus(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringPackageEventNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notedId string
		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringPackageEventNotes(context.Background(), notedId, eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringPackageEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var packageEventsId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringPackageEvents(context.Background(), packageEventsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringPackagePrices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pricesId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringPackagePrices(context.Background(), pricesId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringPackageResourceNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notesId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringPackageResourceNotes(context.Background(), notesId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringPackageResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringPackageResources(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringPackageRevenues", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var priceId string
		var revenueType string
		var eventsId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringPackageRevenues(context.Background(), priceId, revenueType, eventsId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteCateringPackages(context.Background(), cateringPackageId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypesCode string
		var forecastsId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteEventForecasts(context.Background(), eventTypesCode, forecastsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteInventoryItemTemplates(context.Background(), inventoryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteInventoryItems(context.Background(), inventoryItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteItemClasses(context.Background(), itemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemPoolsCode string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteItemPools(context.Background(), itemPoolsCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteResourceConfigServiceCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteResourceConfigServiceCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService DeleteRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var revenueGroupsCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.DeleteRevenueGroups(context.Background(), revenueGroupsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringContainers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringItemRates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringMenu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringMenu(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringMenuClasses(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringMenuItemClasses(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringMenuItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringMenus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringPackage(context.Background(), cateringPackageId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringPackageByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringPackageByChain(context.Background(), cateringPackageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringPackages(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringPackagesMultiProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringPackagesMultiProperties(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetCateringServings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetCateringServings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetDailyInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetDailyInventoryItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetEventForecasts(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetInventoryItemTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetInventoryItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetItemPools(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetRevenueGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService GetRevenueTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.GetRevenueTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostCateringContainers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostCateringItemRates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostCateringMenuClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostCateringMenuItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostCateringMenuItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostCateringMenus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostCateringPackages(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostEventForecasts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostInventoryItemTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostInventoryItems(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostItemClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostItemPools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostRevenueGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PostRevenueTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PostRevenueTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringContainers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringContainersCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringContainers(context.Background(), cateringContainersCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringItemRates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringItemRatesCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringItemRates(context.Background(), cateringItemRatesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringMenuClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringMenuClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringMenuItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringMenuItemClasses(context.Background(), cateringMenuItemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringMenuItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringMenuItems(context.Background(), cateringMenuItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringMenus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringMenuId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringMenus(context.Background(), cateringMenuId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringPackages(context.Background(), cateringPackageId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutCateringServings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringServingsCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutCateringServings(context.Background(), cateringServingsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutEventForecasts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutEventForecasts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutInventoryItemTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutInventoryItemTemplates(context.Background(), inventoryItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inventoryItemId string
		var hotelId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutInventoryItems(context.Background(), inventoryItemId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutItemClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemClassesCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutItemClasses(context.Background(), itemClassesCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutItemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemPoolsCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutItemPools(context.Background(), itemPoolsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutRevenueGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var revenueGroupsCode string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutRevenueGroups(context.Background(), revenueGroupsCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourceConfigAPIService PutRevenueTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var revenueTypesId string

		resp, httpRes, err := apiClient.ResourceConfigAPI.PutRevenueTypes(context.Background(), revenueTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
