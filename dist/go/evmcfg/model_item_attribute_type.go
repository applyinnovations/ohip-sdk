/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the ItemAttributeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemAttributeType{}

// ItemAttributeType Details of the Item Attribute.
type ItemAttributeType struct {
	// If true, it's the default Attribute for the Item.
	Default *bool `json:"default,omitempty"`
	ItemAttributeId *UniqueIDType `json:"itemAttributeId,omitempty"`
	// The Setdown Time of the Item Attribute in minutes.
	SetdownTime *float32 `json:"setdownTime,omitempty"`
	// The Setup Time of the Item Attribute in minutes.
	SetupTime *float32 `json:"setupTime,omitempty"`
	TranslatableName *TranslationTextType200 `json:"translatableName,omitempty"`
}

// NewItemAttributeType instantiates a new ItemAttributeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemAttributeType() *ItemAttributeType {
	this := ItemAttributeType{}
	return &this
}

// NewItemAttributeTypeWithDefaults instantiates a new ItemAttributeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemAttributeTypeWithDefaults() *ItemAttributeType {
	this := ItemAttributeType{}
	return &this
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *ItemAttributeType) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemAttributeType) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *ItemAttributeType) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *ItemAttributeType) SetDefault(v bool) {
	o.Default = &v
}

// GetItemAttributeId returns the ItemAttributeId field value if set, zero value otherwise.
func (o *ItemAttributeType) GetItemAttributeId() UniqueIDType {
	if o == nil || IsNil(o.ItemAttributeId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemAttributeId
}

// GetItemAttributeIdOk returns a tuple with the ItemAttributeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemAttributeType) GetItemAttributeIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemAttributeId) {
		return nil, false
	}
	return o.ItemAttributeId, true
}

// HasItemAttributeId returns a boolean if a field has been set.
func (o *ItemAttributeType) HasItemAttributeId() bool {
	if o != nil && !IsNil(o.ItemAttributeId) {
		return true
	}

	return false
}

// SetItemAttributeId gets a reference to the given UniqueIDType and assigns it to the ItemAttributeId field.
func (o *ItemAttributeType) SetItemAttributeId(v UniqueIDType) {
	o.ItemAttributeId = &v
}

// GetSetdownTime returns the SetdownTime field value if set, zero value otherwise.
func (o *ItemAttributeType) GetSetdownTime() float32 {
	if o == nil || IsNil(o.SetdownTime) {
		var ret float32
		return ret
	}
	return *o.SetdownTime
}

// GetSetdownTimeOk returns a tuple with the SetdownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemAttributeType) GetSetdownTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SetdownTime) {
		return nil, false
	}
	return o.SetdownTime, true
}

// HasSetdownTime returns a boolean if a field has been set.
func (o *ItemAttributeType) HasSetdownTime() bool {
	if o != nil && !IsNil(o.SetdownTime) {
		return true
	}

	return false
}

// SetSetdownTime gets a reference to the given float32 and assigns it to the SetdownTime field.
func (o *ItemAttributeType) SetSetdownTime(v float32) {
	o.SetdownTime = &v
}

// GetSetupTime returns the SetupTime field value if set, zero value otherwise.
func (o *ItemAttributeType) GetSetupTime() float32 {
	if o == nil || IsNil(o.SetupTime) {
		var ret float32
		return ret
	}
	return *o.SetupTime
}

// GetSetupTimeOk returns a tuple with the SetupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemAttributeType) GetSetupTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SetupTime) {
		return nil, false
	}
	return o.SetupTime, true
}

// HasSetupTime returns a boolean if a field has been set.
func (o *ItemAttributeType) HasSetupTime() bool {
	if o != nil && !IsNil(o.SetupTime) {
		return true
	}

	return false
}

// SetSetupTime gets a reference to the given float32 and assigns it to the SetupTime field.
func (o *ItemAttributeType) SetSetupTime(v float32) {
	o.SetupTime = &v
}

// GetTranslatableName returns the TranslatableName field value if set, zero value otherwise.
func (o *ItemAttributeType) GetTranslatableName() TranslationTextType200 {
	if o == nil || IsNil(o.TranslatableName) {
		var ret TranslationTextType200
		return ret
	}
	return *o.TranslatableName
}

// GetTranslatableNameOk returns a tuple with the TranslatableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemAttributeType) GetTranslatableNameOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.TranslatableName) {
		return nil, false
	}
	return o.TranslatableName, true
}

// HasTranslatableName returns a boolean if a field has been set.
func (o *ItemAttributeType) HasTranslatableName() bool {
	if o != nil && !IsNil(o.TranslatableName) {
		return true
	}

	return false
}

// SetTranslatableName gets a reference to the given TranslationTextType200 and assigns it to the TranslatableName field.
func (o *ItemAttributeType) SetTranslatableName(v TranslationTextType200) {
	o.TranslatableName = &v
}

func (o ItemAttributeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemAttributeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.ItemAttributeId) {
		toSerialize["itemAttributeId"] = o.ItemAttributeId
	}
	if !IsNil(o.SetdownTime) {
		toSerialize["setdownTime"] = o.SetdownTime
	}
	if !IsNil(o.SetupTime) {
		toSerialize["setupTime"] = o.SetupTime
	}
	if !IsNil(o.TranslatableName) {
		toSerialize["translatableName"] = o.TranslatableName
	}
	return toSerialize, nil
}

type NullableItemAttributeType struct {
	value *ItemAttributeType
	isSet bool
}

func (v NullableItemAttributeType) Get() *ItemAttributeType {
	return v.value
}

func (v *NullableItemAttributeType) Set(val *ItemAttributeType) {
	v.value = val
	v.isSet = true
}

func (v NullableItemAttributeType) IsSet() bool {
	return v.isSet
}

func (v *NullableItemAttributeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemAttributeType(val *ItemAttributeType) *NullableItemAttributeType {
	return &NullableItemAttributeType{value: val, isSet: true}
}

func (v NullableItemAttributeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemAttributeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


