/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CopyMenuItemsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyMenuItemsType{}

// CopyMenuItemsType struct for CopyMenuItemsType
type CopyMenuItemsType struct {
	// Source Hotel code from where menu items needs to be copied
	HotelId *string `json:"hotelId,omitempty"`
	// List of Values of Menu Item Class.
	MenuItemClassList []CateringMenuItemClassType `json:"menuItemClassList,omitempty"`
	// List of Values of Menu Item.
	MenuItemList []CateringMenuItemType `json:"menuItemList,omitempty"`
}

// NewCopyMenuItemsType instantiates a new CopyMenuItemsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyMenuItemsType() *CopyMenuItemsType {
	this := CopyMenuItemsType{}
	return &this
}

// NewCopyMenuItemsTypeWithDefaults instantiates a new CopyMenuItemsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyMenuItemsTypeWithDefaults() *CopyMenuItemsType {
	this := CopyMenuItemsType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyMenuItemsType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyMenuItemsType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyMenuItemsType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyMenuItemsType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetMenuItemClassList returns the MenuItemClassList field value if set, zero value otherwise.
func (o *CopyMenuItemsType) GetMenuItemClassList() []CateringMenuItemClassType {
	if o == nil || IsNil(o.MenuItemClassList) {
		var ret []CateringMenuItemClassType
		return ret
	}
	return o.MenuItemClassList
}

// GetMenuItemClassListOk returns a tuple with the MenuItemClassList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyMenuItemsType) GetMenuItemClassListOk() ([]CateringMenuItemClassType, bool) {
	if o == nil || IsNil(o.MenuItemClassList) {
		return nil, false
	}
	return o.MenuItemClassList, true
}

// HasMenuItemClassList returns a boolean if a field has been set.
func (o *CopyMenuItemsType) HasMenuItemClassList() bool {
	if o != nil && !IsNil(o.MenuItemClassList) {
		return true
	}

	return false
}

// SetMenuItemClassList gets a reference to the given []CateringMenuItemClassType and assigns it to the MenuItemClassList field.
func (o *CopyMenuItemsType) SetMenuItemClassList(v []CateringMenuItemClassType) {
	o.MenuItemClassList = v
}

// GetMenuItemList returns the MenuItemList field value if set, zero value otherwise.
func (o *CopyMenuItemsType) GetMenuItemList() []CateringMenuItemType {
	if o == nil || IsNil(o.MenuItemList) {
		var ret []CateringMenuItemType
		return ret
	}
	return o.MenuItemList
}

// GetMenuItemListOk returns a tuple with the MenuItemList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyMenuItemsType) GetMenuItemListOk() ([]CateringMenuItemType, bool) {
	if o == nil || IsNil(o.MenuItemList) {
		return nil, false
	}
	return o.MenuItemList, true
}

// HasMenuItemList returns a boolean if a field has been set.
func (o *CopyMenuItemsType) HasMenuItemList() bool {
	if o != nil && !IsNil(o.MenuItemList) {
		return true
	}

	return false
}

// SetMenuItemList gets a reference to the given []CateringMenuItemType and assigns it to the MenuItemList field.
func (o *CopyMenuItemsType) SetMenuItemList(v []CateringMenuItemType) {
	o.MenuItemList = v
}

func (o CopyMenuItemsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyMenuItemsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.MenuItemClassList) {
		toSerialize["menuItemClassList"] = o.MenuItemClassList
	}
	if !IsNil(o.MenuItemList) {
		toSerialize["menuItemList"] = o.MenuItemList
	}
	return toSerialize, nil
}

type NullableCopyMenuItemsType struct {
	value *CopyMenuItemsType
	isSet bool
}

func (v NullableCopyMenuItemsType) Get() *CopyMenuItemsType {
	return v.value
}

func (v *NullableCopyMenuItemsType) Set(val *CopyMenuItemsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyMenuItemsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyMenuItemsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyMenuItemsType(val *CopyMenuItemsType) *NullableCopyMenuItemsType {
	return &NullableCopyMenuItemsType{value: val, isSet: true}
}

func (v NullableCopyMenuItemsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyMenuItemsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


