/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the ItemQuantityDateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemQuantityDateType{}

// ItemQuantityDateType Item Quantity by date
type ItemQuantityDateType struct {
	// Daily quantity for Item by date.
	DailyQuantity *float32 `json:"dailyQuantity,omitempty"`
	// Date of the item quantity.
	QuantityDate *string `json:"quantityDate,omitempty"`
}

// NewItemQuantityDateType instantiates a new ItemQuantityDateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemQuantityDateType() *ItemQuantityDateType {
	this := ItemQuantityDateType{}
	return &this
}

// NewItemQuantityDateTypeWithDefaults instantiates a new ItemQuantityDateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemQuantityDateTypeWithDefaults() *ItemQuantityDateType {
	this := ItemQuantityDateType{}
	return &this
}

// GetDailyQuantity returns the DailyQuantity field value if set, zero value otherwise.
func (o *ItemQuantityDateType) GetDailyQuantity() float32 {
	if o == nil || IsNil(o.DailyQuantity) {
		var ret float32
		return ret
	}
	return *o.DailyQuantity
}

// GetDailyQuantityOk returns a tuple with the DailyQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantityDateType) GetDailyQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.DailyQuantity) {
		return nil, false
	}
	return o.DailyQuantity, true
}

// HasDailyQuantity returns a boolean if a field has been set.
func (o *ItemQuantityDateType) HasDailyQuantity() bool {
	if o != nil && !IsNil(o.DailyQuantity) {
		return true
	}

	return false
}

// SetDailyQuantity gets a reference to the given float32 and assigns it to the DailyQuantity field.
func (o *ItemQuantityDateType) SetDailyQuantity(v float32) {
	o.DailyQuantity = &v
}

// GetQuantityDate returns the QuantityDate field value if set, zero value otherwise.
func (o *ItemQuantityDateType) GetQuantityDate() string {
	if o == nil || IsNil(o.QuantityDate) {
		var ret string
		return ret
	}
	return *o.QuantityDate
}

// GetQuantityDateOk returns a tuple with the QuantityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemQuantityDateType) GetQuantityDateOk() (*string, bool) {
	if o == nil || IsNil(o.QuantityDate) {
		return nil, false
	}
	return o.QuantityDate, true
}

// HasQuantityDate returns a boolean if a field has been set.
func (o *ItemQuantityDateType) HasQuantityDate() bool {
	if o != nil && !IsNil(o.QuantityDate) {
		return true
	}

	return false
}

// SetQuantityDate gets a reference to the given string and assigns it to the QuantityDate field.
func (o *ItemQuantityDateType) SetQuantityDate(v string) {
	o.QuantityDate = &v
}

func (o ItemQuantityDateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemQuantityDateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyQuantity) {
		toSerialize["dailyQuantity"] = o.DailyQuantity
	}
	if !IsNil(o.QuantityDate) {
		toSerialize["quantityDate"] = o.QuantityDate
	}
	return toSerialize, nil
}

type NullableItemQuantityDateType struct {
	value *ItemQuantityDateType
	isSet bool
}

func (v NullableItemQuantityDateType) Get() *ItemQuantityDateType {
	return v.value
}

func (v *NullableItemQuantityDateType) Set(val *ItemQuantityDateType) {
	v.value = val
	v.isSet = true
}

func (v NullableItemQuantityDateType) IsSet() bool {
	return v.isSet
}

func (v *NullableItemQuantityDateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemQuantityDateType(val *ItemQuantityDateType) *NullableItemQuantityDateType {
	return &NullableItemQuantityDateType{value: val, isSet: true}
}

func (v NullableItemQuantityDateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemQuantityDateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


