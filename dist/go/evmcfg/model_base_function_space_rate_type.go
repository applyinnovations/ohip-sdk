/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the BaseFunctionSpaceRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseFunctionSpaceRateType{}

// BaseFunctionSpaceRateType Base type provides information about Catering Code which will be used for removal operation
type BaseFunctionSpaceRateType struct {
	// Code ID is used to identify a Catering Code by ID.
	CodeId *float32 `json:"codeId,omitempty"`
	// Code is used to identify a Catering Code.
	Code *string `json:"code,omitempty"`
	TranslatableDescription *TranslationTextType200 `json:"translatableDescription,omitempty"`
	// Catering Codes display sequence Number
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	RentAmount *CurrencyAmountType `json:"rentAmount,omitempty"`
	// Catering revenue type used for function space rent amount.
	RevenueType *string `json:"revenueType,omitempty"`
	RateType *FunctionSpaceRateTypeType `json:"rateType,omitempty"`
	// Indicates that this rate is the default for the function space.
	Default *bool `json:"default,omitempty"`
	// Indicates that this rate is inactive.
	Inactive *bool `json:"inactive,omitempty"`
	// Indicates that this rate is computed per hour.
	Hourly *bool `json:"hourly,omitempty"`
	// Indicates that minimum revenue should be enforced for this rate code.
	MinimunRevenue *bool `json:"minimunRevenue,omitempty"`
}

// NewBaseFunctionSpaceRateType instantiates a new BaseFunctionSpaceRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseFunctionSpaceRateType() *BaseFunctionSpaceRateType {
	this := BaseFunctionSpaceRateType{}
	return &this
}

// NewBaseFunctionSpaceRateTypeWithDefaults instantiates a new BaseFunctionSpaceRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseFunctionSpaceRateTypeWithDefaults() *BaseFunctionSpaceRateType {
	this := BaseFunctionSpaceRateType{}
	return &this
}

// GetCodeId returns the CodeId field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetCodeId() float32 {
	if o == nil || IsNil(o.CodeId) {
		var ret float32
		return ret
	}
	return *o.CodeId
}

// GetCodeIdOk returns a tuple with the CodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetCodeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CodeId) {
		return nil, false
	}
	return o.CodeId, true
}

// HasCodeId returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasCodeId() bool {
	if o != nil && !IsNil(o.CodeId) {
		return true
	}

	return false
}

// SetCodeId gets a reference to the given float32 and assigns it to the CodeId field.
func (o *BaseFunctionSpaceRateType) SetCodeId(v float32) {
	o.CodeId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *BaseFunctionSpaceRateType) SetCode(v string) {
	o.Code = &v
}

// GetTranslatableDescription returns the TranslatableDescription field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetTranslatableDescription() TranslationTextType200 {
	if o == nil || IsNil(o.TranslatableDescription) {
		var ret TranslationTextType200
		return ret
	}
	return *o.TranslatableDescription
}

// GetTranslatableDescriptionOk returns a tuple with the TranslatableDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetTranslatableDescriptionOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.TranslatableDescription) {
		return nil, false
	}
	return o.TranslatableDescription, true
}

// HasTranslatableDescription returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasTranslatableDescription() bool {
	if o != nil && !IsNil(o.TranslatableDescription) {
		return true
	}

	return false
}

// SetTranslatableDescription gets a reference to the given TranslationTextType200 and assigns it to the TranslatableDescription field.
func (o *BaseFunctionSpaceRateType) SetTranslatableDescription(v TranslationTextType200) {
	o.TranslatableDescription = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *BaseFunctionSpaceRateType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetRentAmount returns the RentAmount field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetRentAmount() CurrencyAmountType {
	if o == nil || IsNil(o.RentAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RentAmount
}

// GetRentAmountOk returns a tuple with the RentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetRentAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RentAmount) {
		return nil, false
	}
	return o.RentAmount, true
}

// HasRentAmount returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasRentAmount() bool {
	if o != nil && !IsNil(o.RentAmount) {
		return true
	}

	return false
}

// SetRentAmount gets a reference to the given CurrencyAmountType and assigns it to the RentAmount field.
func (o *BaseFunctionSpaceRateType) SetRentAmount(v CurrencyAmountType) {
	o.RentAmount = &v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetRevenueType() string {
	if o == nil || IsNil(o.RevenueType) {
		var ret string
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetRevenueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given string and assigns it to the RevenueType field.
func (o *BaseFunctionSpaceRateType) SetRevenueType(v string) {
	o.RevenueType = &v
}

// GetRateType returns the RateType field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetRateType() FunctionSpaceRateTypeType {
	if o == nil || IsNil(o.RateType) {
		var ret FunctionSpaceRateTypeType
		return ret
	}
	return *o.RateType
}

// GetRateTypeOk returns a tuple with the RateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetRateTypeOk() (*FunctionSpaceRateTypeType, bool) {
	if o == nil || IsNil(o.RateType) {
		return nil, false
	}
	return o.RateType, true
}

// HasRateType returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasRateType() bool {
	if o != nil && !IsNil(o.RateType) {
		return true
	}

	return false
}

// SetRateType gets a reference to the given FunctionSpaceRateTypeType and assigns it to the RateType field.
func (o *BaseFunctionSpaceRateType) SetRateType(v FunctionSpaceRateTypeType) {
	o.RateType = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *BaseFunctionSpaceRateType) SetDefault(v bool) {
	o.Default = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *BaseFunctionSpaceRateType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetHourly returns the Hourly field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetHourly() bool {
	if o == nil || IsNil(o.Hourly) {
		var ret bool
		return ret
	}
	return *o.Hourly
}

// GetHourlyOk returns a tuple with the Hourly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetHourlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Hourly) {
		return nil, false
	}
	return o.Hourly, true
}

// HasHourly returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasHourly() bool {
	if o != nil && !IsNil(o.Hourly) {
		return true
	}

	return false
}

// SetHourly gets a reference to the given bool and assigns it to the Hourly field.
func (o *BaseFunctionSpaceRateType) SetHourly(v bool) {
	o.Hourly = &v
}

// GetMinimunRevenue returns the MinimunRevenue field value if set, zero value otherwise.
func (o *BaseFunctionSpaceRateType) GetMinimunRevenue() bool {
	if o == nil || IsNil(o.MinimunRevenue) {
		var ret bool
		return ret
	}
	return *o.MinimunRevenue
}

// GetMinimunRevenueOk returns a tuple with the MinimunRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseFunctionSpaceRateType) GetMinimunRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.MinimunRevenue) {
		return nil, false
	}
	return o.MinimunRevenue, true
}

// HasMinimunRevenue returns a boolean if a field has been set.
func (o *BaseFunctionSpaceRateType) HasMinimunRevenue() bool {
	if o != nil && !IsNil(o.MinimunRevenue) {
		return true
	}

	return false
}

// SetMinimunRevenue gets a reference to the given bool and assigns it to the MinimunRevenue field.
func (o *BaseFunctionSpaceRateType) SetMinimunRevenue(v bool) {
	o.MinimunRevenue = &v
}

func (o BaseFunctionSpaceRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseFunctionSpaceRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeId) {
		toSerialize["codeId"] = o.CodeId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.TranslatableDescription) {
		toSerialize["translatableDescription"] = o.TranslatableDescription
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.RentAmount) {
		toSerialize["rentAmount"] = o.RentAmount
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	if !IsNil(o.RateType) {
		toSerialize["rateType"] = o.RateType
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Hourly) {
		toSerialize["hourly"] = o.Hourly
	}
	if !IsNil(o.MinimunRevenue) {
		toSerialize["minimunRevenue"] = o.MinimunRevenue
	}
	return toSerialize, nil
}

type NullableBaseFunctionSpaceRateType struct {
	value *BaseFunctionSpaceRateType
	isSet bool
}

func (v NullableBaseFunctionSpaceRateType) Get() *BaseFunctionSpaceRateType {
	return v.value
}

func (v *NullableBaseFunctionSpaceRateType) Set(val *BaseFunctionSpaceRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseFunctionSpaceRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseFunctionSpaceRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseFunctionSpaceRateType(val *BaseFunctionSpaceRateType) *NullableBaseFunctionSpaceRateType {
	return &NullableBaseFunctionSpaceRateType{value: val, isSet: true}
}

func (v NullableBaseFunctionSpaceRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseFunctionSpaceRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


