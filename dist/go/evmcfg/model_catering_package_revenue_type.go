/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringPackageRevenueType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringPackageRevenueType{}

// CateringPackageRevenueType Type used for managing Revenue Details associated with a particular Catering Package Price Code.
type CateringPackageRevenueType struct {
	PackageEventId *UniqueIDType `json:"packageEventId,omitempty"`
	// Revenue Type associated with the Catering Package Price Code.
	RevType *string `json:"revType,omitempty"`
	// Sorting Order.
	OrderBy *int32 `json:"orderBy,omitempty"`
	RevForecast *CurrencyAmountType `json:"revForecast,omitempty"`
	RevExpected *CurrencyAmountType `json:"revExpected,omitempty"`
	CostExpected *CurrencyAmountType `json:"costExpected,omitempty"`
}

// NewCateringPackageRevenueType instantiates a new CateringPackageRevenueType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringPackageRevenueType() *CateringPackageRevenueType {
	this := CateringPackageRevenueType{}
	return &this
}

// NewCateringPackageRevenueTypeWithDefaults instantiates a new CateringPackageRevenueType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringPackageRevenueTypeWithDefaults() *CateringPackageRevenueType {
	this := CateringPackageRevenueType{}
	return &this
}

// GetPackageEventId returns the PackageEventId field value if set, zero value otherwise.
func (o *CateringPackageRevenueType) GetPackageEventId() UniqueIDType {
	if o == nil || IsNil(o.PackageEventId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PackageEventId
}

// GetPackageEventIdOk returns a tuple with the PackageEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageRevenueType) GetPackageEventIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PackageEventId) {
		return nil, false
	}
	return o.PackageEventId, true
}

// HasPackageEventId returns a boolean if a field has been set.
func (o *CateringPackageRevenueType) HasPackageEventId() bool {
	if o != nil && !IsNil(o.PackageEventId) {
		return true
	}

	return false
}

// SetPackageEventId gets a reference to the given UniqueIDType and assigns it to the PackageEventId field.
func (o *CateringPackageRevenueType) SetPackageEventId(v UniqueIDType) {
	o.PackageEventId = &v
}

// GetRevType returns the RevType field value if set, zero value otherwise.
func (o *CateringPackageRevenueType) GetRevType() string {
	if o == nil || IsNil(o.RevType) {
		var ret string
		return ret
	}
	return *o.RevType
}

// GetRevTypeOk returns a tuple with the RevType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageRevenueType) GetRevTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevType) {
		return nil, false
	}
	return o.RevType, true
}

// HasRevType returns a boolean if a field has been set.
func (o *CateringPackageRevenueType) HasRevType() bool {
	if o != nil && !IsNil(o.RevType) {
		return true
	}

	return false
}

// SetRevType gets a reference to the given string and assigns it to the RevType field.
func (o *CateringPackageRevenueType) SetRevType(v string) {
	o.RevType = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *CateringPackageRevenueType) GetOrderBy() int32 {
	if o == nil || IsNil(o.OrderBy) {
		var ret int32
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageRevenueType) GetOrderByOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *CateringPackageRevenueType) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given int32 and assigns it to the OrderBy field.
func (o *CateringPackageRevenueType) SetOrderBy(v int32) {
	o.OrderBy = &v
}

// GetRevForecast returns the RevForecast field value if set, zero value otherwise.
func (o *CateringPackageRevenueType) GetRevForecast() CurrencyAmountType {
	if o == nil || IsNil(o.RevForecast) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RevForecast
}

// GetRevForecastOk returns a tuple with the RevForecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageRevenueType) GetRevForecastOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RevForecast) {
		return nil, false
	}
	return o.RevForecast, true
}

// HasRevForecast returns a boolean if a field has been set.
func (o *CateringPackageRevenueType) HasRevForecast() bool {
	if o != nil && !IsNil(o.RevForecast) {
		return true
	}

	return false
}

// SetRevForecast gets a reference to the given CurrencyAmountType and assigns it to the RevForecast field.
func (o *CateringPackageRevenueType) SetRevForecast(v CurrencyAmountType) {
	o.RevForecast = &v
}

// GetRevExpected returns the RevExpected field value if set, zero value otherwise.
func (o *CateringPackageRevenueType) GetRevExpected() CurrencyAmountType {
	if o == nil || IsNil(o.RevExpected) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RevExpected
}

// GetRevExpectedOk returns a tuple with the RevExpected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageRevenueType) GetRevExpectedOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RevExpected) {
		return nil, false
	}
	return o.RevExpected, true
}

// HasRevExpected returns a boolean if a field has been set.
func (o *CateringPackageRevenueType) HasRevExpected() bool {
	if o != nil && !IsNil(o.RevExpected) {
		return true
	}

	return false
}

// SetRevExpected gets a reference to the given CurrencyAmountType and assigns it to the RevExpected field.
func (o *CateringPackageRevenueType) SetRevExpected(v CurrencyAmountType) {
	o.RevExpected = &v
}

// GetCostExpected returns the CostExpected field value if set, zero value otherwise.
func (o *CateringPackageRevenueType) GetCostExpected() CurrencyAmountType {
	if o == nil || IsNil(o.CostExpected) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CostExpected
}

// GetCostExpectedOk returns a tuple with the CostExpected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringPackageRevenueType) GetCostExpectedOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CostExpected) {
		return nil, false
	}
	return o.CostExpected, true
}

// HasCostExpected returns a boolean if a field has been set.
func (o *CateringPackageRevenueType) HasCostExpected() bool {
	if o != nil && !IsNil(o.CostExpected) {
		return true
	}

	return false
}

// SetCostExpected gets a reference to the given CurrencyAmountType and assigns it to the CostExpected field.
func (o *CateringPackageRevenueType) SetCostExpected(v CurrencyAmountType) {
	o.CostExpected = &v
}

func (o CateringPackageRevenueType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringPackageRevenueType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageEventId) {
		toSerialize["packageEventId"] = o.PackageEventId
	}
	if !IsNil(o.RevType) {
		toSerialize["revType"] = o.RevType
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.RevForecast) {
		toSerialize["revForecast"] = o.RevForecast
	}
	if !IsNil(o.RevExpected) {
		toSerialize["revExpected"] = o.RevExpected
	}
	if !IsNil(o.CostExpected) {
		toSerialize["costExpected"] = o.CostExpected
	}
	return toSerialize, nil
}

type NullableCateringPackageRevenueType struct {
	value *CateringPackageRevenueType
	isSet bool
}

func (v NullableCateringPackageRevenueType) Get() *CateringPackageRevenueType {
	return v.value
}

func (v *NullableCateringPackageRevenueType) Set(val *CateringPackageRevenueType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringPackageRevenueType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringPackageRevenueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringPackageRevenueType(val *CateringPackageRevenueType) *NullableCateringPackageRevenueType {
	return &NullableCateringPackageRevenueType{value: val, isSet: true}
}

func (v NullableCateringPackageRevenueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringPackageRevenueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


