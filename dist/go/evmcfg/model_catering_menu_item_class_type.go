/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringMenuItemClassType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringMenuItemClassType{}

// CateringMenuItemClassType Menu Item Class Values.
type CateringMenuItemClassType struct {
	Id *UniqueIDType `json:"id,omitempty"`
	ItemClassInfo *CateringMenuItemClassInfoType `json:"itemClassInfo,omitempty"`
	// List of Values of Menu Item.
	ItemList []CateringMenuItemType `json:"itemList,omitempty"`
}

// NewCateringMenuItemClassType instantiates a new CateringMenuItemClassType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringMenuItemClassType() *CateringMenuItemClassType {
	this := CateringMenuItemClassType{}
	return &this
}

// NewCateringMenuItemClassTypeWithDefaults instantiates a new CateringMenuItemClassType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringMenuItemClassTypeWithDefaults() *CateringMenuItemClassType {
	this := CateringMenuItemClassType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CateringMenuItemClassType) GetId() UniqueIDType {
	if o == nil || IsNil(o.Id) {
		var ret UniqueIDType
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassType) GetIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CateringMenuItemClassType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given UniqueIDType and assigns it to the Id field.
func (o *CateringMenuItemClassType) SetId(v UniqueIDType) {
	o.Id = &v
}

// GetItemClassInfo returns the ItemClassInfo field value if set, zero value otherwise.
func (o *CateringMenuItemClassType) GetItemClassInfo() CateringMenuItemClassInfoType {
	if o == nil || IsNil(o.ItemClassInfo) {
		var ret CateringMenuItemClassInfoType
		return ret
	}
	return *o.ItemClassInfo
}

// GetItemClassInfoOk returns a tuple with the ItemClassInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassType) GetItemClassInfoOk() (*CateringMenuItemClassInfoType, bool) {
	if o == nil || IsNil(o.ItemClassInfo) {
		return nil, false
	}
	return o.ItemClassInfo, true
}

// HasItemClassInfo returns a boolean if a field has been set.
func (o *CateringMenuItemClassType) HasItemClassInfo() bool {
	if o != nil && !IsNil(o.ItemClassInfo) {
		return true
	}

	return false
}

// SetItemClassInfo gets a reference to the given CateringMenuItemClassInfoType and assigns it to the ItemClassInfo field.
func (o *CateringMenuItemClassType) SetItemClassInfo(v CateringMenuItemClassInfoType) {
	o.ItemClassInfo = &v
}

// GetItemList returns the ItemList field value if set, zero value otherwise.
func (o *CateringMenuItemClassType) GetItemList() []CateringMenuItemType {
	if o == nil || IsNil(o.ItemList) {
		var ret []CateringMenuItemType
		return ret
	}
	return o.ItemList
}

// GetItemListOk returns a tuple with the ItemList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuItemClassType) GetItemListOk() ([]CateringMenuItemType, bool) {
	if o == nil || IsNil(o.ItemList) {
		return nil, false
	}
	return o.ItemList, true
}

// HasItemList returns a boolean if a field has been set.
func (o *CateringMenuItemClassType) HasItemList() bool {
	if o != nil && !IsNil(o.ItemList) {
		return true
	}

	return false
}

// SetItemList gets a reference to the given []CateringMenuItemType and assigns it to the ItemList field.
func (o *CateringMenuItemClassType) SetItemList(v []CateringMenuItemType) {
	o.ItemList = v
}

func (o CateringMenuItemClassType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringMenuItemClassType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ItemClassInfo) {
		toSerialize["itemClassInfo"] = o.ItemClassInfo
	}
	if !IsNil(o.ItemList) {
		toSerialize["itemList"] = o.ItemList
	}
	return toSerialize, nil
}

type NullableCateringMenuItemClassType struct {
	value *CateringMenuItemClassType
	isSet bool
}

func (v NullableCateringMenuItemClassType) Get() *CateringMenuItemClassType {
	return v.value
}

func (v *NullableCateringMenuItemClassType) Set(val *CateringMenuItemClassType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringMenuItemClassType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringMenuItemClassType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringMenuItemClassType(val *CateringMenuItemClassType) *NullableCateringMenuItemClassType {
	return &NullableCateringMenuItemClassType{value: val, isSet: true}
}

func (v NullableCateringMenuItemClassType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringMenuItemClassType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


