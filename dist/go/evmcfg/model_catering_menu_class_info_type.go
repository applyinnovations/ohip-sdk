/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringMenuClassInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringMenuClassInfoType{}

// CateringMenuClassInfoType Detailed attributes of Menu Class .
type CateringMenuClassInfoType struct {
	EventTypes []string `json:"eventTypes,omitempty"`
	// Return true, when this Menu Item Class will not be available to be associated to a Catering Event.
	Inactive *bool `json:"inactive,omitempty"`
	// Inactive date of menu class.
	InactiveDate *string `json:"inactiveDate,omitempty"`
	// This type holds name of Menu Class.
	Name *string `json:"name,omitempty"`
	// This type tells about whether menu class is book through web or not.
	WebBookable *bool `json:"webBookable,omitempty"`
}

// NewCateringMenuClassInfoType instantiates a new CateringMenuClassInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringMenuClassInfoType() *CateringMenuClassInfoType {
	this := CateringMenuClassInfoType{}
	return &this
}

// NewCateringMenuClassInfoTypeWithDefaults instantiates a new CateringMenuClassInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringMenuClassInfoTypeWithDefaults() *CateringMenuClassInfoType {
	this := CateringMenuClassInfoType{}
	return &this
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *CateringMenuClassInfoType) GetEventTypes() []string {
	if o == nil || IsNil(o.EventTypes) {
		var ret []string
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassInfoType) GetEventTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *CateringMenuClassInfoType) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *CateringMenuClassInfoType) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *CateringMenuClassInfoType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassInfoType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *CateringMenuClassInfoType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *CateringMenuClassInfoType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetInactiveDate returns the InactiveDate field value if set, zero value otherwise.
func (o *CateringMenuClassInfoType) GetInactiveDate() string {
	if o == nil || IsNil(o.InactiveDate) {
		var ret string
		return ret
	}
	return *o.InactiveDate
}

// GetInactiveDateOk returns a tuple with the InactiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassInfoType) GetInactiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.InactiveDate) {
		return nil, false
	}
	return o.InactiveDate, true
}

// HasInactiveDate returns a boolean if a field has been set.
func (o *CateringMenuClassInfoType) HasInactiveDate() bool {
	if o != nil && !IsNil(o.InactiveDate) {
		return true
	}

	return false
}

// SetInactiveDate gets a reference to the given string and assigns it to the InactiveDate field.
func (o *CateringMenuClassInfoType) SetInactiveDate(v string) {
	o.InactiveDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CateringMenuClassInfoType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassInfoType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CateringMenuClassInfoType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CateringMenuClassInfoType) SetName(v string) {
	o.Name = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *CateringMenuClassInfoType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringMenuClassInfoType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *CateringMenuClassInfoType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *CateringMenuClassInfoType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

func (o CateringMenuClassInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringMenuClassInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.InactiveDate) {
		toSerialize["inactiveDate"] = o.InactiveDate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	return toSerialize, nil
}

type NullableCateringMenuClassInfoType struct {
	value *CateringMenuClassInfoType
	isSet bool
}

func (v NullableCateringMenuClassInfoType) Get() *CateringMenuClassInfoType {
	return v.value
}

func (v *NullableCateringMenuClassInfoType) Set(val *CateringMenuClassInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringMenuClassInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringMenuClassInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringMenuClassInfoType(val *CateringMenuClassInfoType) *NullableCateringMenuClassInfoType {
	return &NullableCateringMenuClassInfoType{value: val, isSet: true}
}

func (v NullableCateringMenuClassInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringMenuClassInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


