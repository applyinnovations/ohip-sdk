/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the FunctionSpaceLocationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionSpaceLocationType{}

// FunctionSpaceLocationType Function Space Location details.
type FunctionSpaceLocationType struct {
	// Function Space Location Code.
	Code *string `json:"code,omitempty"`
	// Hotel code that the function space location belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	TranslatableDescription *TranslationTextType2000 `json:"translatableDescription,omitempty"`
}

// NewFunctionSpaceLocationType instantiates a new FunctionSpaceLocationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionSpaceLocationType() *FunctionSpaceLocationType {
	this := FunctionSpaceLocationType{}
	return &this
}

// NewFunctionSpaceLocationTypeWithDefaults instantiates a new FunctionSpaceLocationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionSpaceLocationTypeWithDefaults() *FunctionSpaceLocationType {
	this := FunctionSpaceLocationType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FunctionSpaceLocationType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceLocationType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FunctionSpaceLocationType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FunctionSpaceLocationType) SetCode(v string) {
	o.Code = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FunctionSpaceLocationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceLocationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FunctionSpaceLocationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FunctionSpaceLocationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTranslatableDescription returns the TranslatableDescription field value if set, zero value otherwise.
func (o *FunctionSpaceLocationType) GetTranslatableDescription() TranslationTextType2000 {
	if o == nil || IsNil(o.TranslatableDescription) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.TranslatableDescription
}

// GetTranslatableDescriptionOk returns a tuple with the TranslatableDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionSpaceLocationType) GetTranslatableDescriptionOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.TranslatableDescription) {
		return nil, false
	}
	return o.TranslatableDescription, true
}

// HasTranslatableDescription returns a boolean if a field has been set.
func (o *FunctionSpaceLocationType) HasTranslatableDescription() bool {
	if o != nil && !IsNil(o.TranslatableDescription) {
		return true
	}

	return false
}

// SetTranslatableDescription gets a reference to the given TranslationTextType2000 and assigns it to the TranslatableDescription field.
func (o *FunctionSpaceLocationType) SetTranslatableDescription(v TranslationTextType2000) {
	o.TranslatableDescription = &v
}

func (o FunctionSpaceLocationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionSpaceLocationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TranslatableDescription) {
		toSerialize["translatableDescription"] = o.TranslatableDescription
	}
	return toSerialize, nil
}

type NullableFunctionSpaceLocationType struct {
	value *FunctionSpaceLocationType
	isSet bool
}

func (v NullableFunctionSpaceLocationType) Get() *FunctionSpaceLocationType {
	return v.value
}

func (v *NullableFunctionSpaceLocationType) Set(val *FunctionSpaceLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionSpaceLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionSpaceLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionSpaceLocationType(val *FunctionSpaceLocationType) *NullableFunctionSpaceLocationType {
	return &NullableFunctionSpaceLocationType{value: val, isSet: true}
}

func (v NullableFunctionSpaceLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionSpaceLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


