/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
	"fmt"
)

// EventResourceType It represents Menu as Resource.
type EventResourceType string

// List of eventResourceType
const (
	EVENTRESOURCETYPE_SPACE EventResourceType = "Space"
	EVENTRESOURCETYPE_ITEM EventResourceType = "Item"
	EVENTRESOURCETYPE_MENU EventResourceType = "Menu"
)

// All allowed values of EventResourceType enum
var AllowedEventResourceTypeEnumValues = []EventResourceType{
	"Space",
	"Item",
	"Menu",
}

func (v *EventResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventResourceType(value)
	for _, existing := range AllowedEventResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventResourceType", value)
}

// NewEventResourceTypeFromValue returns a pointer to a valid EventResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventResourceTypeFromValue(v string) (*EventResourceType, error) {
	ev := EventResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventResourceType: valid values are %v", v, AllowedEventResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventResourceType) IsValid() bool {
	for _, existing := range AllowedEventResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to eventResourceType value
func (v EventResourceType) Ptr() *EventResourceType {
	return &v
}

type NullableEventResourceType struct {
	value *EventResourceType
	isSet bool
}

func (v NullableEventResourceType) Get() *EventResourceType {
	return v.value
}

func (v *NullableEventResourceType) Set(val *EventResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventResourceType(val *EventResourceType) *NullableEventResourceType {
	return &NullableEventResourceType{value: val, isSet: true}
}

func (v NullableEventResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

