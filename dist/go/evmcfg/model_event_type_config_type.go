/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the EventTypeConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventTypeConfigType{}

// EventTypeConfigType Representation of event record type.
type EventTypeConfigType struct {
	// Indicates if Event Type is coverable or not.
	Coverable *bool `json:"coverable,omitempty"`
	// Description to elaborate the Event Code Type.
	Description *string `json:"description,omitempty"`
	// Code Field Value belongs to the Event Type.
	EventTypeCode *string `json:"eventTypeCode,omitempty"`
	// Determines the event type status as active or inactive
	Inactive *bool `json:"inactive,omitempty"`
	// Meal type associated with the event type.
	MealType *string `json:"mealType,omitempty"`
	// The sequence number of the event.
	Sequence *int32 `json:"sequence,omitempty"`
	TimeWindow *TimeWindowType `json:"timeWindow,omitempty"`
	TranslatableDescription *TranslationTextType50 `json:"translatableDescription,omitempty"`
	// Defines if web booking is allowed or not.
	WebBookable *bool `json:"webBookable,omitempty"`
}

// NewEventTypeConfigType instantiates a new EventTypeConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTypeConfigType() *EventTypeConfigType {
	this := EventTypeConfigType{}
	return &this
}

// NewEventTypeConfigTypeWithDefaults instantiates a new EventTypeConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeConfigTypeWithDefaults() *EventTypeConfigType {
	this := EventTypeConfigType{}
	return &this
}

// GetCoverable returns the Coverable field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetCoverable() bool {
	if o == nil || IsNil(o.Coverable) {
		var ret bool
		return ret
	}
	return *o.Coverable
}

// GetCoverableOk returns a tuple with the Coverable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetCoverableOk() (*bool, bool) {
	if o == nil || IsNil(o.Coverable) {
		return nil, false
	}
	return o.Coverable, true
}

// HasCoverable returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasCoverable() bool {
	if o != nil && !IsNil(o.Coverable) {
		return true
	}

	return false
}

// SetCoverable gets a reference to the given bool and assigns it to the Coverable field.
func (o *EventTypeConfigType) SetCoverable(v bool) {
	o.Coverable = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventTypeConfigType) SetDescription(v string) {
	o.Description = &v
}

// GetEventTypeCode returns the EventTypeCode field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetEventTypeCode() string {
	if o == nil || IsNil(o.EventTypeCode) {
		var ret string
		return ret
	}
	return *o.EventTypeCode
}

// GetEventTypeCodeOk returns a tuple with the EventTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetEventTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EventTypeCode) {
		return nil, false
	}
	return o.EventTypeCode, true
}

// HasEventTypeCode returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasEventTypeCode() bool {
	if o != nil && !IsNil(o.EventTypeCode) {
		return true
	}

	return false
}

// SetEventTypeCode gets a reference to the given string and assigns it to the EventTypeCode field.
func (o *EventTypeConfigType) SetEventTypeCode(v string) {
	o.EventTypeCode = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *EventTypeConfigType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetMealType returns the MealType field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetMealType() string {
	if o == nil || IsNil(o.MealType) {
		var ret string
		return ret
	}
	return *o.MealType
}

// GetMealTypeOk returns a tuple with the MealType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetMealTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MealType) {
		return nil, false
	}
	return o.MealType, true
}

// HasMealType returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasMealType() bool {
	if o != nil && !IsNil(o.MealType) {
		return true
	}

	return false
}

// SetMealType gets a reference to the given string and assigns it to the MealType field.
func (o *EventTypeConfigType) SetMealType(v string) {
	o.MealType = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *EventTypeConfigType) SetSequence(v int32) {
	o.Sequence = &v
}

// GetTimeWindow returns the TimeWindow field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetTimeWindow() TimeWindowType {
	if o == nil || IsNil(o.TimeWindow) {
		var ret TimeWindowType
		return ret
	}
	return *o.TimeWindow
}

// GetTimeWindowOk returns a tuple with the TimeWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetTimeWindowOk() (*TimeWindowType, bool) {
	if o == nil || IsNil(o.TimeWindow) {
		return nil, false
	}
	return o.TimeWindow, true
}

// HasTimeWindow returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasTimeWindow() bool {
	if o != nil && !IsNil(o.TimeWindow) {
		return true
	}

	return false
}

// SetTimeWindow gets a reference to the given TimeWindowType and assigns it to the TimeWindow field.
func (o *EventTypeConfigType) SetTimeWindow(v TimeWindowType) {
	o.TimeWindow = &v
}

// GetTranslatableDescription returns the TranslatableDescription field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetTranslatableDescription() TranslationTextType50 {
	if o == nil || IsNil(o.TranslatableDescription) {
		var ret TranslationTextType50
		return ret
	}
	return *o.TranslatableDescription
}

// GetTranslatableDescriptionOk returns a tuple with the TranslatableDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetTranslatableDescriptionOk() (*TranslationTextType50, bool) {
	if o == nil || IsNil(o.TranslatableDescription) {
		return nil, false
	}
	return o.TranslatableDescription, true
}

// HasTranslatableDescription returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasTranslatableDescription() bool {
	if o != nil && !IsNil(o.TranslatableDescription) {
		return true
	}

	return false
}

// SetTranslatableDescription gets a reference to the given TranslationTextType50 and assigns it to the TranslatableDescription field.
func (o *EventTypeConfigType) SetTranslatableDescription(v TranslationTextType50) {
	o.TranslatableDescription = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *EventTypeConfigType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTypeConfigType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *EventTypeConfigType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *EventTypeConfigType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

func (o EventTypeConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventTypeConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Coverable) {
		toSerialize["coverable"] = o.Coverable
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EventTypeCode) {
		toSerialize["eventTypeCode"] = o.EventTypeCode
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.MealType) {
		toSerialize["mealType"] = o.MealType
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.TimeWindow) {
		toSerialize["timeWindow"] = o.TimeWindow
	}
	if !IsNil(o.TranslatableDescription) {
		toSerialize["translatableDescription"] = o.TranslatableDescription
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	return toSerialize, nil
}

type NullableEventTypeConfigType struct {
	value *EventTypeConfigType
	isSet bool
}

func (v NullableEventTypeConfigType) Get() *EventTypeConfigType {
	return v.value
}

func (v *NullableEventTypeConfigType) Set(val *EventTypeConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeConfigType(val *EventTypeConfigType) *NullableEventTypeConfigType {
	return &NullableEventTypeConfigType{value: val, isSet: true}
}

func (v NullableEventTypeConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


