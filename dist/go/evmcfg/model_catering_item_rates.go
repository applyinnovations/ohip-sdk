/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringItemRates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringItemRates{}

// CateringItemRates Request object which holds modified Catering Code's Item Rate.
type CateringItemRates struct {
	// Catering Code details.
	ItemRates []CateringCodeType `json:"itemRates,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCateringItemRates instantiates a new CateringItemRates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringItemRates() *CateringItemRates {
	this := CateringItemRates{}
	return &this
}

// NewCateringItemRatesWithDefaults instantiates a new CateringItemRates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringItemRatesWithDefaults() *CateringItemRates {
	this := CateringItemRates{}
	return &this
}

// GetItemRates returns the ItemRates field value if set, zero value otherwise.
func (o *CateringItemRates) GetItemRates() []CateringCodeType {
	if o == nil || IsNil(o.ItemRates) {
		var ret []CateringCodeType
		return ret
	}
	return o.ItemRates
}

// GetItemRatesOk returns a tuple with the ItemRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringItemRates) GetItemRatesOk() ([]CateringCodeType, bool) {
	if o == nil || IsNil(o.ItemRates) {
		return nil, false
	}
	return o.ItemRates, true
}

// HasItemRates returns a boolean if a field has been set.
func (o *CateringItemRates) HasItemRates() bool {
	if o != nil && !IsNil(o.ItemRates) {
		return true
	}

	return false
}

// SetItemRates gets a reference to the given []CateringCodeType and assigns it to the ItemRates field.
func (o *CateringItemRates) SetItemRates(v []CateringCodeType) {
	o.ItemRates = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CateringItemRates) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringItemRates) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CateringItemRates) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CateringItemRates) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CateringItemRates) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringItemRates) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CateringItemRates) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CateringItemRates) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CateringItemRates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringItemRates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ItemRates) {
		toSerialize["itemRates"] = o.ItemRates
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCateringItemRates struct {
	value *CateringItemRates
	isSet bool
}

func (v NullableCateringItemRates) Get() *CateringItemRates {
	return v.value
}

func (v *NullableCateringItemRates) Set(val *CateringItemRates) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringItemRates) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringItemRates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringItemRates(val *CateringItemRates) *NullableCateringItemRates {
	return &NullableCateringItemRates{value: val, isSet: true}
}

func (v NullableCateringItemRates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringItemRates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


