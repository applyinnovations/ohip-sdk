/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the InventoryItemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryItemType{}

// InventoryItemType Inventory Items identification details.
type InventoryItemType struct {
	// List of Item Attributes.
	Attributes []ItemAttributeType `json:"attributes,omitempty"`
	Departments []string `json:"departments,omitempty"`
	// The display sequence of the Item.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	EventTypes []string `json:"eventTypes,omitempty"`
	// Flag to define if the inventory item can be ordered externally when the item is marked as critical.
	ExternalOrder *bool `json:"externalOrder,omitempty"`
	// The Hotel code which the item belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// The Item Class Code which the item belongs to.
	ItemClassCode *string `json:"itemClassCode,omitempty"`
	// The Description of the Item Class.
	ItemClassDescription *string `json:"itemClassDescription,omitempty"`
	// Display sequence of Item Class.
	ItemClassDisplaySequence *float32 `json:"itemClassDisplaySequence,omitempty"`
	ItemClassId *UniqueIDType `json:"itemClassId,omitempty"`
	// The Article Number of the Item.
	ItemCode *string `json:"itemCode,omitempty"`
	// The Description of the Item.
	ItemDescription *string `json:"itemDescription,omitempty"`
	// Indicates whether Item is from a Template or not.
	ItemFromTemplate *bool `json:"itemFromTemplate,omitempty"`
	ItemId *UniqueIDType `json:"itemId,omitempty"`
	ItemName *TranslationTextType200 `json:"itemName,omitempty"`
	// The Item Pool description of the Item.
	ItemPool *string `json:"itemPool,omitempty"`
	// The Revenue Type of the Item.
	Print *bool `json:"print,omitempty"`
	// List of Item Rates.
	Rates []ItemRateType `json:"rates,omitempty"`
	// Contains event resource note information.
	ResourceNotes []EventResourceNoteType `json:"resourceNotes,omitempty"`
	// The Revenue Type of the Item.
	RevenueType *string `json:"revenueType,omitempty"`
	// If true, the revenue could be changed.
	RevenueTypeEditable *bool `json:"revenueTypeEditable,omitempty"`
	SellInfo *InventoryItemTypeSellInfo `json:"sellInfo,omitempty"`
	// Setdown Time of the Item in minutes.
	SetdownTime *float32 `json:"setdownTime,omitempty"`
	// Setup Time of the Item in minutes.
	SetupTime *float32 `json:"setupTime,omitempty"`
	// The Trace Text of the Item.
	TraceText *string `json:"traceText,omitempty"`
	// If true, the item is used for events.
	UsedForEvents *bool `json:"usedForEvents,omitempty"`
	// If true, the item is used for reservation.
	UsedForReservation *bool `json:"usedForReservation,omitempty"`
	// List of Item Vendors.
	Vendors []ItemVendorType `json:"vendors,omitempty"`
}

// NewInventoryItemType instantiates a new InventoryItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryItemType() *InventoryItemType {
	this := InventoryItemType{}
	return &this
}

// NewInventoryItemTypeWithDefaults instantiates a new InventoryItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryItemTypeWithDefaults() *InventoryItemType {
	this := InventoryItemType{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *InventoryItemType) GetAttributes() []ItemAttributeType {
	if o == nil || IsNil(o.Attributes) {
		var ret []ItemAttributeType
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetAttributesOk() ([]ItemAttributeType, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *InventoryItemType) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ItemAttributeType and assigns it to the Attributes field.
func (o *InventoryItemType) SetAttributes(v []ItemAttributeType) {
	o.Attributes = v
}

// GetDepartments returns the Departments field value if set, zero value otherwise.
func (o *InventoryItemType) GetDepartments() []string {
	if o == nil || IsNil(o.Departments) {
		var ret []string
		return ret
	}
	return o.Departments
}

// GetDepartmentsOk returns a tuple with the Departments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetDepartmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Departments) {
		return nil, false
	}
	return o.Departments, true
}

// HasDepartments returns a boolean if a field has been set.
func (o *InventoryItemType) HasDepartments() bool {
	if o != nil && !IsNil(o.Departments) {
		return true
	}

	return false
}

// SetDepartments gets a reference to the given []string and assigns it to the Departments field.
func (o *InventoryItemType) SetDepartments(v []string) {
	o.Departments = v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *InventoryItemType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *InventoryItemType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *InventoryItemType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *InventoryItemType) GetEventTypes() []string {
	if o == nil || IsNil(o.EventTypes) {
		var ret []string
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetEventTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *InventoryItemType) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *InventoryItemType) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetExternalOrder returns the ExternalOrder field value if set, zero value otherwise.
func (o *InventoryItemType) GetExternalOrder() bool {
	if o == nil || IsNil(o.ExternalOrder) {
		var ret bool
		return ret
	}
	return *o.ExternalOrder
}

// GetExternalOrderOk returns a tuple with the ExternalOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetExternalOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalOrder) {
		return nil, false
	}
	return o.ExternalOrder, true
}

// HasExternalOrder returns a boolean if a field has been set.
func (o *InventoryItemType) HasExternalOrder() bool {
	if o != nil && !IsNil(o.ExternalOrder) {
		return true
	}

	return false
}

// SetExternalOrder gets a reference to the given bool and assigns it to the ExternalOrder field.
func (o *InventoryItemType) SetExternalOrder(v bool) {
	o.ExternalOrder = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InventoryItemType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InventoryItemType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InventoryItemType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetItemClassCode returns the ItemClassCode field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemClassCode() string {
	if o == nil || IsNil(o.ItemClassCode) {
		var ret string
		return ret
	}
	return *o.ItemClassCode
}

// GetItemClassCodeOk returns a tuple with the ItemClassCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemClassCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemClassCode) {
		return nil, false
	}
	return o.ItemClassCode, true
}

// HasItemClassCode returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemClassCode() bool {
	if o != nil && !IsNil(o.ItemClassCode) {
		return true
	}

	return false
}

// SetItemClassCode gets a reference to the given string and assigns it to the ItemClassCode field.
func (o *InventoryItemType) SetItemClassCode(v string) {
	o.ItemClassCode = &v
}

// GetItemClassDescription returns the ItemClassDescription field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemClassDescription() string {
	if o == nil || IsNil(o.ItemClassDescription) {
		var ret string
		return ret
	}
	return *o.ItemClassDescription
}

// GetItemClassDescriptionOk returns a tuple with the ItemClassDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemClassDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemClassDescription) {
		return nil, false
	}
	return o.ItemClassDescription, true
}

// HasItemClassDescription returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemClassDescription() bool {
	if o != nil && !IsNil(o.ItemClassDescription) {
		return true
	}

	return false
}

// SetItemClassDescription gets a reference to the given string and assigns it to the ItemClassDescription field.
func (o *InventoryItemType) SetItemClassDescription(v string) {
	o.ItemClassDescription = &v
}

// GetItemClassDisplaySequence returns the ItemClassDisplaySequence field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemClassDisplaySequence() float32 {
	if o == nil || IsNil(o.ItemClassDisplaySequence) {
		var ret float32
		return ret
	}
	return *o.ItemClassDisplaySequence
}

// GetItemClassDisplaySequenceOk returns a tuple with the ItemClassDisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemClassDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.ItemClassDisplaySequence) {
		return nil, false
	}
	return o.ItemClassDisplaySequence, true
}

// HasItemClassDisplaySequence returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemClassDisplaySequence() bool {
	if o != nil && !IsNil(o.ItemClassDisplaySequence) {
		return true
	}

	return false
}

// SetItemClassDisplaySequence gets a reference to the given float32 and assigns it to the ItemClassDisplaySequence field.
func (o *InventoryItemType) SetItemClassDisplaySequence(v float32) {
	o.ItemClassDisplaySequence = &v
}

// GetItemClassId returns the ItemClassId field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemClassId() UniqueIDType {
	if o == nil || IsNil(o.ItemClassId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemClassId
}

// GetItemClassIdOk returns a tuple with the ItemClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemClassIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemClassId) {
		return nil, false
	}
	return o.ItemClassId, true
}

// HasItemClassId returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemClassId() bool {
	if o != nil && !IsNil(o.ItemClassId) {
		return true
	}

	return false
}

// SetItemClassId gets a reference to the given UniqueIDType and assigns it to the ItemClassId field.
func (o *InventoryItemType) SetItemClassId(v UniqueIDType) {
	o.ItemClassId = &v
}

// GetItemCode returns the ItemCode field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemCode() string {
	if o == nil || IsNil(o.ItemCode) {
		var ret string
		return ret
	}
	return *o.ItemCode
}

// GetItemCodeOk returns a tuple with the ItemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCode) {
		return nil, false
	}
	return o.ItemCode, true
}

// HasItemCode returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemCode() bool {
	if o != nil && !IsNil(o.ItemCode) {
		return true
	}

	return false
}

// SetItemCode gets a reference to the given string and assigns it to the ItemCode field.
func (o *InventoryItemType) SetItemCode(v string) {
	o.ItemCode = &v
}

// GetItemDescription returns the ItemDescription field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemDescription() string {
	if o == nil || IsNil(o.ItemDescription) {
		var ret string
		return ret
	}
	return *o.ItemDescription
}

// GetItemDescriptionOk returns a tuple with the ItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDescription) {
		return nil, false
	}
	return o.ItemDescription, true
}

// HasItemDescription returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemDescription() bool {
	if o != nil && !IsNil(o.ItemDescription) {
		return true
	}

	return false
}

// SetItemDescription gets a reference to the given string and assigns it to the ItemDescription field.
func (o *InventoryItemType) SetItemDescription(v string) {
	o.ItemDescription = &v
}

// GetItemFromTemplate returns the ItemFromTemplate field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemFromTemplate() bool {
	if o == nil || IsNil(o.ItemFromTemplate) {
		var ret bool
		return ret
	}
	return *o.ItemFromTemplate
}

// GetItemFromTemplateOk returns a tuple with the ItemFromTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemFromTemplateOk() (*bool, bool) {
	if o == nil || IsNil(o.ItemFromTemplate) {
		return nil, false
	}
	return o.ItemFromTemplate, true
}

// HasItemFromTemplate returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemFromTemplate() bool {
	if o != nil && !IsNil(o.ItemFromTemplate) {
		return true
	}

	return false
}

// SetItemFromTemplate gets a reference to the given bool and assigns it to the ItemFromTemplate field.
func (o *InventoryItemType) SetItemFromTemplate(v bool) {
	o.ItemFromTemplate = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemId() UniqueIDType {
	if o == nil || IsNil(o.ItemId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given UniqueIDType and assigns it to the ItemId field.
func (o *InventoryItemType) SetItemId(v UniqueIDType) {
	o.ItemId = &v
}

// GetItemName returns the ItemName field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemName() TranslationTextType200 {
	if o == nil || IsNil(o.ItemName) {
		var ret TranslationTextType200
		return ret
	}
	return *o.ItemName
}

// GetItemNameOk returns a tuple with the ItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemNameOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.ItemName) {
		return nil, false
	}
	return o.ItemName, true
}

// HasItemName returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemName() bool {
	if o != nil && !IsNil(o.ItemName) {
		return true
	}

	return false
}

// SetItemName gets a reference to the given TranslationTextType200 and assigns it to the ItemName field.
func (o *InventoryItemType) SetItemName(v TranslationTextType200) {
	o.ItemName = &v
}

// GetItemPool returns the ItemPool field value if set, zero value otherwise.
func (o *InventoryItemType) GetItemPool() string {
	if o == nil || IsNil(o.ItemPool) {
		var ret string
		return ret
	}
	return *o.ItemPool
}

// GetItemPoolOk returns a tuple with the ItemPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetItemPoolOk() (*string, bool) {
	if o == nil || IsNil(o.ItemPool) {
		return nil, false
	}
	return o.ItemPool, true
}

// HasItemPool returns a boolean if a field has been set.
func (o *InventoryItemType) HasItemPool() bool {
	if o != nil && !IsNil(o.ItemPool) {
		return true
	}

	return false
}

// SetItemPool gets a reference to the given string and assigns it to the ItemPool field.
func (o *InventoryItemType) SetItemPool(v string) {
	o.ItemPool = &v
}

// GetPrint returns the Print field value if set, zero value otherwise.
func (o *InventoryItemType) GetPrint() bool {
	if o == nil || IsNil(o.Print) {
		var ret bool
		return ret
	}
	return *o.Print
}

// GetPrintOk returns a tuple with the Print field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetPrintOk() (*bool, bool) {
	if o == nil || IsNil(o.Print) {
		return nil, false
	}
	return o.Print, true
}

// HasPrint returns a boolean if a field has been set.
func (o *InventoryItemType) HasPrint() bool {
	if o != nil && !IsNil(o.Print) {
		return true
	}

	return false
}

// SetPrint gets a reference to the given bool and assigns it to the Print field.
func (o *InventoryItemType) SetPrint(v bool) {
	o.Print = &v
}

// GetRates returns the Rates field value if set, zero value otherwise.
func (o *InventoryItemType) GetRates() []ItemRateType {
	if o == nil || IsNil(o.Rates) {
		var ret []ItemRateType
		return ret
	}
	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetRatesOk() ([]ItemRateType, bool) {
	if o == nil || IsNil(o.Rates) {
		return nil, false
	}
	return o.Rates, true
}

// HasRates returns a boolean if a field has been set.
func (o *InventoryItemType) HasRates() bool {
	if o != nil && !IsNil(o.Rates) {
		return true
	}

	return false
}

// SetRates gets a reference to the given []ItemRateType and assigns it to the Rates field.
func (o *InventoryItemType) SetRates(v []ItemRateType) {
	o.Rates = v
}

// GetResourceNotes returns the ResourceNotes field value if set, zero value otherwise.
func (o *InventoryItemType) GetResourceNotes() []EventResourceNoteType {
	if o == nil || IsNil(o.ResourceNotes) {
		var ret []EventResourceNoteType
		return ret
	}
	return o.ResourceNotes
}

// GetResourceNotesOk returns a tuple with the ResourceNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetResourceNotesOk() ([]EventResourceNoteType, bool) {
	if o == nil || IsNil(o.ResourceNotes) {
		return nil, false
	}
	return o.ResourceNotes, true
}

// HasResourceNotes returns a boolean if a field has been set.
func (o *InventoryItemType) HasResourceNotes() bool {
	if o != nil && !IsNil(o.ResourceNotes) {
		return true
	}

	return false
}

// SetResourceNotes gets a reference to the given []EventResourceNoteType and assigns it to the ResourceNotes field.
func (o *InventoryItemType) SetResourceNotes(v []EventResourceNoteType) {
	o.ResourceNotes = v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *InventoryItemType) GetRevenueType() string {
	if o == nil || IsNil(o.RevenueType) {
		var ret string
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetRevenueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *InventoryItemType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given string and assigns it to the RevenueType field.
func (o *InventoryItemType) SetRevenueType(v string) {
	o.RevenueType = &v
}

// GetRevenueTypeEditable returns the RevenueTypeEditable field value if set, zero value otherwise.
func (o *InventoryItemType) GetRevenueTypeEditable() bool {
	if o == nil || IsNil(o.RevenueTypeEditable) {
		var ret bool
		return ret
	}
	return *o.RevenueTypeEditable
}

// GetRevenueTypeEditableOk returns a tuple with the RevenueTypeEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetRevenueTypeEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.RevenueTypeEditable) {
		return nil, false
	}
	return o.RevenueTypeEditable, true
}

// HasRevenueTypeEditable returns a boolean if a field has been set.
func (o *InventoryItemType) HasRevenueTypeEditable() bool {
	if o != nil && !IsNil(o.RevenueTypeEditable) {
		return true
	}

	return false
}

// SetRevenueTypeEditable gets a reference to the given bool and assigns it to the RevenueTypeEditable field.
func (o *InventoryItemType) SetRevenueTypeEditable(v bool) {
	o.RevenueTypeEditable = &v
}

// GetSellInfo returns the SellInfo field value if set, zero value otherwise.
func (o *InventoryItemType) GetSellInfo() InventoryItemTypeSellInfo {
	if o == nil || IsNil(o.SellInfo) {
		var ret InventoryItemTypeSellInfo
		return ret
	}
	return *o.SellInfo
}

// GetSellInfoOk returns a tuple with the SellInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetSellInfoOk() (*InventoryItemTypeSellInfo, bool) {
	if o == nil || IsNil(o.SellInfo) {
		return nil, false
	}
	return o.SellInfo, true
}

// HasSellInfo returns a boolean if a field has been set.
func (o *InventoryItemType) HasSellInfo() bool {
	if o != nil && !IsNil(o.SellInfo) {
		return true
	}

	return false
}

// SetSellInfo gets a reference to the given InventoryItemTypeSellInfo and assigns it to the SellInfo field.
func (o *InventoryItemType) SetSellInfo(v InventoryItemTypeSellInfo) {
	o.SellInfo = &v
}

// GetSetdownTime returns the SetdownTime field value if set, zero value otherwise.
func (o *InventoryItemType) GetSetdownTime() float32 {
	if o == nil || IsNil(o.SetdownTime) {
		var ret float32
		return ret
	}
	return *o.SetdownTime
}

// GetSetdownTimeOk returns a tuple with the SetdownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetSetdownTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SetdownTime) {
		return nil, false
	}
	return o.SetdownTime, true
}

// HasSetdownTime returns a boolean if a field has been set.
func (o *InventoryItemType) HasSetdownTime() bool {
	if o != nil && !IsNil(o.SetdownTime) {
		return true
	}

	return false
}

// SetSetdownTime gets a reference to the given float32 and assigns it to the SetdownTime field.
func (o *InventoryItemType) SetSetdownTime(v float32) {
	o.SetdownTime = &v
}

// GetSetupTime returns the SetupTime field value if set, zero value otherwise.
func (o *InventoryItemType) GetSetupTime() float32 {
	if o == nil || IsNil(o.SetupTime) {
		var ret float32
		return ret
	}
	return *o.SetupTime
}

// GetSetupTimeOk returns a tuple with the SetupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetSetupTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SetupTime) {
		return nil, false
	}
	return o.SetupTime, true
}

// HasSetupTime returns a boolean if a field has been set.
func (o *InventoryItemType) HasSetupTime() bool {
	if o != nil && !IsNil(o.SetupTime) {
		return true
	}

	return false
}

// SetSetupTime gets a reference to the given float32 and assigns it to the SetupTime field.
func (o *InventoryItemType) SetSetupTime(v float32) {
	o.SetupTime = &v
}

// GetTraceText returns the TraceText field value if set, zero value otherwise.
func (o *InventoryItemType) GetTraceText() string {
	if o == nil || IsNil(o.TraceText) {
		var ret string
		return ret
	}
	return *o.TraceText
}

// GetTraceTextOk returns a tuple with the TraceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetTraceTextOk() (*string, bool) {
	if o == nil || IsNil(o.TraceText) {
		return nil, false
	}
	return o.TraceText, true
}

// HasTraceText returns a boolean if a field has been set.
func (o *InventoryItemType) HasTraceText() bool {
	if o != nil && !IsNil(o.TraceText) {
		return true
	}

	return false
}

// SetTraceText gets a reference to the given string and assigns it to the TraceText field.
func (o *InventoryItemType) SetTraceText(v string) {
	o.TraceText = &v
}

// GetUsedForEvents returns the UsedForEvents field value if set, zero value otherwise.
func (o *InventoryItemType) GetUsedForEvents() bool {
	if o == nil || IsNil(o.UsedForEvents) {
		var ret bool
		return ret
	}
	return *o.UsedForEvents
}

// GetUsedForEventsOk returns a tuple with the UsedForEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetUsedForEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedForEvents) {
		return nil, false
	}
	return o.UsedForEvents, true
}

// HasUsedForEvents returns a boolean if a field has been set.
func (o *InventoryItemType) HasUsedForEvents() bool {
	if o != nil && !IsNil(o.UsedForEvents) {
		return true
	}

	return false
}

// SetUsedForEvents gets a reference to the given bool and assigns it to the UsedForEvents field.
func (o *InventoryItemType) SetUsedForEvents(v bool) {
	o.UsedForEvents = &v
}

// GetUsedForReservation returns the UsedForReservation field value if set, zero value otherwise.
func (o *InventoryItemType) GetUsedForReservation() bool {
	if o == nil || IsNil(o.UsedForReservation) {
		var ret bool
		return ret
	}
	return *o.UsedForReservation
}

// GetUsedForReservationOk returns a tuple with the UsedForReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetUsedForReservationOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedForReservation) {
		return nil, false
	}
	return o.UsedForReservation, true
}

// HasUsedForReservation returns a boolean if a field has been set.
func (o *InventoryItemType) HasUsedForReservation() bool {
	if o != nil && !IsNil(o.UsedForReservation) {
		return true
	}

	return false
}

// SetUsedForReservation gets a reference to the given bool and assigns it to the UsedForReservation field.
func (o *InventoryItemType) SetUsedForReservation(v bool) {
	o.UsedForReservation = &v
}

// GetVendors returns the Vendors field value if set, zero value otherwise.
func (o *InventoryItemType) GetVendors() []ItemVendorType {
	if o == nil || IsNil(o.Vendors) {
		var ret []ItemVendorType
		return ret
	}
	return o.Vendors
}

// GetVendorsOk returns a tuple with the Vendors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryItemType) GetVendorsOk() ([]ItemVendorType, bool) {
	if o == nil || IsNil(o.Vendors) {
		return nil, false
	}
	return o.Vendors, true
}

// HasVendors returns a boolean if a field has been set.
func (o *InventoryItemType) HasVendors() bool {
	if o != nil && !IsNil(o.Vendors) {
		return true
	}

	return false
}

// SetVendors gets a reference to the given []ItemVendorType and assigns it to the Vendors field.
func (o *InventoryItemType) SetVendors(v []ItemVendorType) {
	o.Vendors = v
}

func (o InventoryItemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryItemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Departments) {
		toSerialize["departments"] = o.Departments
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.ExternalOrder) {
		toSerialize["externalOrder"] = o.ExternalOrder
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ItemClassCode) {
		toSerialize["itemClassCode"] = o.ItemClassCode
	}
	if !IsNil(o.ItemClassDescription) {
		toSerialize["itemClassDescription"] = o.ItemClassDescription
	}
	if !IsNil(o.ItemClassDisplaySequence) {
		toSerialize["itemClassDisplaySequence"] = o.ItemClassDisplaySequence
	}
	if !IsNil(o.ItemClassId) {
		toSerialize["itemClassId"] = o.ItemClassId
	}
	if !IsNil(o.ItemCode) {
		toSerialize["itemCode"] = o.ItemCode
	}
	if !IsNil(o.ItemDescription) {
		toSerialize["itemDescription"] = o.ItemDescription
	}
	if !IsNil(o.ItemFromTemplate) {
		toSerialize["itemFromTemplate"] = o.ItemFromTemplate
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.ItemName) {
		toSerialize["itemName"] = o.ItemName
	}
	if !IsNil(o.ItemPool) {
		toSerialize["itemPool"] = o.ItemPool
	}
	if !IsNil(o.Print) {
		toSerialize["print"] = o.Print
	}
	if !IsNil(o.Rates) {
		toSerialize["rates"] = o.Rates
	}
	if !IsNil(o.ResourceNotes) {
		toSerialize["resourceNotes"] = o.ResourceNotes
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	if !IsNil(o.RevenueTypeEditable) {
		toSerialize["revenueTypeEditable"] = o.RevenueTypeEditable
	}
	if !IsNil(o.SellInfo) {
		toSerialize["sellInfo"] = o.SellInfo
	}
	if !IsNil(o.SetdownTime) {
		toSerialize["setdownTime"] = o.SetdownTime
	}
	if !IsNil(o.SetupTime) {
		toSerialize["setupTime"] = o.SetupTime
	}
	if !IsNil(o.TraceText) {
		toSerialize["traceText"] = o.TraceText
	}
	if !IsNil(o.UsedForEvents) {
		toSerialize["usedForEvents"] = o.UsedForEvents
	}
	if !IsNil(o.UsedForReservation) {
		toSerialize["usedForReservation"] = o.UsedForReservation
	}
	if !IsNil(o.Vendors) {
		toSerialize["vendors"] = o.Vendors
	}
	return toSerialize, nil
}

type NullableInventoryItemType struct {
	value *InventoryItemType
	isSet bool
}

func (v NullableInventoryItemType) Get() *InventoryItemType {
	return v.value
}

func (v *NullableInventoryItemType) Set(val *InventoryItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryItemType(val *InventoryItemType) *NullableInventoryItemType {
	return &NullableInventoryItemType{value: val, isSet: true}
}

func (v NullableInventoryItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


