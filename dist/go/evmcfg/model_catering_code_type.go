/*
OPERA Cloud Event Configuration API

This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evmcfg

import (
	"encoding/json"
)

// checks if the CateringCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringCodeType{}

// CateringCodeType Base type provides information about Catering Code which will be used for removal operation
type CateringCodeType struct {
	// Code ID is used to identify a Catering Code by ID.
	CodeId *float32 `json:"codeId,omitempty"`
	// Code is used to identify a Catering Code.
	Code *string `json:"code,omitempty"`
	TranslatableDescription *TranslationTextType200 `json:"translatableDescription,omitempty"`
	// Catering Codes display sequence Number
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Indicator used for only WEB Code Type in Item Rate
	WebBookable *bool `json:"webBookable,omitempty"`
}

// NewCateringCodeType instantiates a new CateringCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringCodeType() *CateringCodeType {
	this := CateringCodeType{}
	return &this
}

// NewCateringCodeTypeWithDefaults instantiates a new CateringCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringCodeTypeWithDefaults() *CateringCodeType {
	this := CateringCodeType{}
	return &this
}

// GetCodeId returns the CodeId field value if set, zero value otherwise.
func (o *CateringCodeType) GetCodeId() float32 {
	if o == nil || IsNil(o.CodeId) {
		var ret float32
		return ret
	}
	return *o.CodeId
}

// GetCodeIdOk returns a tuple with the CodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeType) GetCodeIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CodeId) {
		return nil, false
	}
	return o.CodeId, true
}

// HasCodeId returns a boolean if a field has been set.
func (o *CateringCodeType) HasCodeId() bool {
	if o != nil && !IsNil(o.CodeId) {
		return true
	}

	return false
}

// SetCodeId gets a reference to the given float32 and assigns it to the CodeId field.
func (o *CateringCodeType) SetCodeId(v float32) {
	o.CodeId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CateringCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CateringCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CateringCodeType) SetCode(v string) {
	o.Code = &v
}

// GetTranslatableDescription returns the TranslatableDescription field value if set, zero value otherwise.
func (o *CateringCodeType) GetTranslatableDescription() TranslationTextType200 {
	if o == nil || IsNil(o.TranslatableDescription) {
		var ret TranslationTextType200
		return ret
	}
	return *o.TranslatableDescription
}

// GetTranslatableDescriptionOk returns a tuple with the TranslatableDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeType) GetTranslatableDescriptionOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.TranslatableDescription) {
		return nil, false
	}
	return o.TranslatableDescription, true
}

// HasTranslatableDescription returns a boolean if a field has been set.
func (o *CateringCodeType) HasTranslatableDescription() bool {
	if o != nil && !IsNil(o.TranslatableDescription) {
		return true
	}

	return false
}

// SetTranslatableDescription gets a reference to the given TranslationTextType200 and assigns it to the TranslatableDescription field.
func (o *CateringCodeType) SetTranslatableDescription(v TranslationTextType200) {
	o.TranslatableDescription = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *CateringCodeType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *CateringCodeType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *CateringCodeType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetWebBookable returns the WebBookable field value if set, zero value otherwise.
func (o *CateringCodeType) GetWebBookable() bool {
	if o == nil || IsNil(o.WebBookable) {
		var ret bool
		return ret
	}
	return *o.WebBookable
}

// GetWebBookableOk returns a tuple with the WebBookable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringCodeType) GetWebBookableOk() (*bool, bool) {
	if o == nil || IsNil(o.WebBookable) {
		return nil, false
	}
	return o.WebBookable, true
}

// HasWebBookable returns a boolean if a field has been set.
func (o *CateringCodeType) HasWebBookable() bool {
	if o != nil && !IsNil(o.WebBookable) {
		return true
	}

	return false
}

// SetWebBookable gets a reference to the given bool and assigns it to the WebBookable field.
func (o *CateringCodeType) SetWebBookable(v bool) {
	o.WebBookable = &v
}

func (o CateringCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeId) {
		toSerialize["codeId"] = o.CodeId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.TranslatableDescription) {
		toSerialize["translatableDescription"] = o.TranslatableDescription
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.WebBookable) {
		toSerialize["webBookable"] = o.WebBookable
	}
	return toSerialize, nil
}

type NullableCateringCodeType struct {
	value *CateringCodeType
	isSet bool
}

func (v NullableCateringCodeType) Get() *CateringCodeType {
	return v.value
}

func (v *NullableCateringCodeType) Set(val *CateringCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringCodeType(val *CateringCodeType) *NullableCateringCodeType {
	return &NullableCateringCodeType{value: val, isSet: true}
}

func (v NullableCateringCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


