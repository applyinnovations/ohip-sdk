/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the ShopBaseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShopBaseRequest{}

// ShopBaseRequest Search Request attributes
type ShopBaseRequest struct {
	// Number of adults
	Adults *int32 `json:"adults,omitempty"`
	// Number of children
	Children *int32 `json:"children,omitempty"`
	// Number of units
	NumberOfUnits *int32 `json:"numberOfUnits,omitempty"`
}

// NewShopBaseRequest instantiates a new ShopBaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopBaseRequest() *ShopBaseRequest {
	this := ShopBaseRequest{}
	return &this
}

// NewShopBaseRequestWithDefaults instantiates a new ShopBaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopBaseRequestWithDefaults() *ShopBaseRequest {
	this := ShopBaseRequest{}
	return &this
}

// GetAdults returns the Adults field value if set, zero value otherwise.
func (o *ShopBaseRequest) GetAdults() int32 {
	if o == nil || IsNil(o.Adults) {
		var ret int32
		return ret
	}
	return *o.Adults
}

// GetAdultsOk returns a tuple with the Adults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopBaseRequest) GetAdultsOk() (*int32, bool) {
	if o == nil || IsNil(o.Adults) {
		return nil, false
	}
	return o.Adults, true
}

// HasAdults returns a boolean if a field has been set.
func (o *ShopBaseRequest) HasAdults() bool {
	if o != nil && !IsNil(o.Adults) {
		return true
	}

	return false
}

// SetAdults gets a reference to the given int32 and assigns it to the Adults field.
func (o *ShopBaseRequest) SetAdults(v int32) {
	o.Adults = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *ShopBaseRequest) GetChildren() int32 {
	if o == nil || IsNil(o.Children) {
		var ret int32
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopBaseRequest) GetChildrenOk() (*int32, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *ShopBaseRequest) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given int32 and assigns it to the Children field.
func (o *ShopBaseRequest) SetChildren(v int32) {
	o.Children = &v
}

// GetNumberOfUnits returns the NumberOfUnits field value if set, zero value otherwise.
func (o *ShopBaseRequest) GetNumberOfUnits() int32 {
	if o == nil || IsNil(o.NumberOfUnits) {
		var ret int32
		return ret
	}
	return *o.NumberOfUnits
}

// GetNumberOfUnitsOk returns a tuple with the NumberOfUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopBaseRequest) GetNumberOfUnitsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfUnits) {
		return nil, false
	}
	return o.NumberOfUnits, true
}

// HasNumberOfUnits returns a boolean if a field has been set.
func (o *ShopBaseRequest) HasNumberOfUnits() bool {
	if o != nil && !IsNil(o.NumberOfUnits) {
		return true
	}

	return false
}

// SetNumberOfUnits gets a reference to the given int32 and assigns it to the NumberOfUnits field.
func (o *ShopBaseRequest) SetNumberOfUnits(v int32) {
	o.NumberOfUnits = &v
}

func (o ShopBaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopBaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Adults) {
		toSerialize["adults"] = o.Adults
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.NumberOfUnits) {
		toSerialize["numberOfUnits"] = o.NumberOfUnits
	}
	return toSerialize, nil
}

type NullableShopBaseRequest struct {
	value *ShopBaseRequest
	isSet bool
}

func (v NullableShopBaseRequest) Get() *ShopBaseRequest {
	return v.value
}

func (v *NullableShopBaseRequest) Set(val *ShopBaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableShopBaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableShopBaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopBaseRequest(val *ShopBaseRequest) *NullableShopBaseRequest {
	return &NullableShopBaseRequest{value: val, isSet: true}
}

func (v NullableShopBaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopBaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


