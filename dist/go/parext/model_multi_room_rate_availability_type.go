/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the MultiRoomRateAvailabilityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiRoomRateAvailabilityType{}

// MultiRoomRateAvailabilityType struct for MultiRoomRateAvailabilityType
type MultiRoomRateAvailabilityType struct {
	// Unique ID of the hotel where availability will be searched for.
	HotelId *string `json:"hotelId,omitempty"`
	// Collection of available room rate combinations.
	RoomStays []MultiRoomRateStayType `json:"roomStays,omitempty"`
}

// NewMultiRoomRateAvailabilityType instantiates a new MultiRoomRateAvailabilityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiRoomRateAvailabilityType() *MultiRoomRateAvailabilityType {
	this := MultiRoomRateAvailabilityType{}
	return &this
}

// NewMultiRoomRateAvailabilityTypeWithDefaults instantiates a new MultiRoomRateAvailabilityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiRoomRateAvailabilityTypeWithDefaults() *MultiRoomRateAvailabilityType {
	this := MultiRoomRateAvailabilityType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MultiRoomRateAvailabilityType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateAvailabilityType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MultiRoomRateAvailabilityType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MultiRoomRateAvailabilityType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRoomStays returns the RoomStays field value if set, zero value otherwise.
func (o *MultiRoomRateAvailabilityType) GetRoomStays() []MultiRoomRateStayType {
	if o == nil || IsNil(o.RoomStays) {
		var ret []MultiRoomRateStayType
		return ret
	}
	return o.RoomStays
}

// GetRoomStaysOk returns a tuple with the RoomStays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateAvailabilityType) GetRoomStaysOk() ([]MultiRoomRateStayType, bool) {
	if o == nil || IsNil(o.RoomStays) {
		return nil, false
	}
	return o.RoomStays, true
}

// HasRoomStays returns a boolean if a field has been set.
func (o *MultiRoomRateAvailabilityType) HasRoomStays() bool {
	if o != nil && !IsNil(o.RoomStays) {
		return true
	}

	return false
}

// SetRoomStays gets a reference to the given []MultiRoomRateStayType and assigns it to the RoomStays field.
func (o *MultiRoomRateAvailabilityType) SetRoomStays(v []MultiRoomRateStayType) {
	o.RoomStays = v
}

func (o MultiRoomRateAvailabilityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiRoomRateAvailabilityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RoomStays) {
		toSerialize["roomStays"] = o.RoomStays
	}
	return toSerialize, nil
}

type NullableMultiRoomRateAvailabilityType struct {
	value *MultiRoomRateAvailabilityType
	isSet bool
}

func (v NullableMultiRoomRateAvailabilityType) Get() *MultiRoomRateAvailabilityType {
	return v.value
}

func (v *NullableMultiRoomRateAvailabilityType) Set(val *MultiRoomRateAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiRoomRateAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiRoomRateAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiRoomRateAvailabilityType(val *MultiRoomRateAvailabilityType) *NullableMultiRoomRateAvailabilityType {
	return &NullableMultiRoomRateAvailabilityType{value: val, isSet: true}
}

func (v NullableMultiRoomRateAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiRoomRateAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


