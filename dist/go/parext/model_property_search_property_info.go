/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the PropertySearchPropertyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertySearchPropertyInfo{}

// PropertySearchPropertyInfo Property information
type PropertySearchPropertyInfo struct {
	ChainCode *string `json:"chainCode,omitempty"`
	HotelCode *string `json:"hotelCode,omitempty"`
	HotelName *string `json:"hotelName,omitempty"`
	IsAlternate *bool `json:"isAlternate,omitempty"`
}

// NewPropertySearchPropertyInfo instantiates a new PropertySearchPropertyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertySearchPropertyInfo() *PropertySearchPropertyInfo {
	this := PropertySearchPropertyInfo{}
	var isAlternate bool = false
	this.IsAlternate = &isAlternate
	return &this
}

// NewPropertySearchPropertyInfoWithDefaults instantiates a new PropertySearchPropertyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertySearchPropertyInfoWithDefaults() *PropertySearchPropertyInfo {
	this := PropertySearchPropertyInfo{}
	var isAlternate bool = false
	this.IsAlternate = &isAlternate
	return &this
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *PropertySearchPropertyInfo) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertySearchPropertyInfo) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *PropertySearchPropertyInfo) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *PropertySearchPropertyInfo) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetHotelCode returns the HotelCode field value if set, zero value otherwise.
func (o *PropertySearchPropertyInfo) GetHotelCode() string {
	if o == nil || IsNil(o.HotelCode) {
		var ret string
		return ret
	}
	return *o.HotelCode
}

// GetHotelCodeOk returns a tuple with the HotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertySearchPropertyInfo) GetHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCode) {
		return nil, false
	}
	return o.HotelCode, true
}

// HasHotelCode returns a boolean if a field has been set.
func (o *PropertySearchPropertyInfo) HasHotelCode() bool {
	if o != nil && !IsNil(o.HotelCode) {
		return true
	}

	return false
}

// SetHotelCode gets a reference to the given string and assigns it to the HotelCode field.
func (o *PropertySearchPropertyInfo) SetHotelCode(v string) {
	o.HotelCode = &v
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *PropertySearchPropertyInfo) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertySearchPropertyInfo) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *PropertySearchPropertyInfo) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *PropertySearchPropertyInfo) SetHotelName(v string) {
	o.HotelName = &v
}

// GetIsAlternate returns the IsAlternate field value if set, zero value otherwise.
func (o *PropertySearchPropertyInfo) GetIsAlternate() bool {
	if o == nil || IsNil(o.IsAlternate) {
		var ret bool
		return ret
	}
	return *o.IsAlternate
}

// GetIsAlternateOk returns a tuple with the IsAlternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertySearchPropertyInfo) GetIsAlternateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAlternate) {
		return nil, false
	}
	return o.IsAlternate, true
}

// HasIsAlternate returns a boolean if a field has been set.
func (o *PropertySearchPropertyInfo) HasIsAlternate() bool {
	if o != nil && !IsNil(o.IsAlternate) {
		return true
	}

	return false
}

// SetIsAlternate gets a reference to the given bool and assigns it to the IsAlternate field.
func (o *PropertySearchPropertyInfo) SetIsAlternate(v bool) {
	o.IsAlternate = &v
}

func (o PropertySearchPropertyInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertySearchPropertyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.HotelCode) {
		toSerialize["hotelCode"] = o.HotelCode
	}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.IsAlternate) {
		toSerialize["isAlternate"] = o.IsAlternate
	}
	return toSerialize, nil
}

type NullablePropertySearchPropertyInfo struct {
	value *PropertySearchPropertyInfo
	isSet bool
}

func (v NullablePropertySearchPropertyInfo) Get() *PropertySearchPropertyInfo {
	return v.value
}

func (v *NullablePropertySearchPropertyInfo) Set(val *PropertySearchPropertyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertySearchPropertyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertySearchPropertyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertySearchPropertyInfo(val *PropertySearchPropertyInfo) *NullablePropertySearchPropertyInfo {
	return &NullablePropertySearchPropertyInfo{value: val, isSet: true}
}

func (v NullablePropertySearchPropertyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertySearchPropertyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


