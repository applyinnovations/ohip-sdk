/*
OPERA Cloud Availability Extension API

APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2.0.0
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parext

import (
	"encoding/json"
)

// checks if the MultiRoomRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiRoomRateType{}

// MultiRoomRateType struct for MultiRoomRateType
type MultiRoomRateType struct {
	// The code specifying a monetary unit. Use ISO 4217, three alpha code.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Rate Plan code.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// Rate Plan Set code.
	RatePlanSet *string `json:"ratePlanSet,omitempty"`
	RoomRateInfo *RoomRateInfoType `json:"roomRateInfo,omitempty"`
}

// NewMultiRoomRateType instantiates a new MultiRoomRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiRoomRateType() *MultiRoomRateType {
	this := MultiRoomRateType{}
	return &this
}

// NewMultiRoomRateTypeWithDefaults instantiates a new MultiRoomRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiRoomRateTypeWithDefaults() *MultiRoomRateType {
	this := MultiRoomRateType{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *MultiRoomRateType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *MultiRoomRateType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *MultiRoomRateType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *MultiRoomRateType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *MultiRoomRateType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *MultiRoomRateType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetRatePlanSet returns the RatePlanSet field value if set, zero value otherwise.
func (o *MultiRoomRateType) GetRatePlanSet() string {
	if o == nil || IsNil(o.RatePlanSet) {
		var ret string
		return ret
	}
	return *o.RatePlanSet
}

// GetRatePlanSetOk returns a tuple with the RatePlanSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateType) GetRatePlanSetOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanSet) {
		return nil, false
	}
	return o.RatePlanSet, true
}

// HasRatePlanSet returns a boolean if a field has been set.
func (o *MultiRoomRateType) HasRatePlanSet() bool {
	if o != nil && !IsNil(o.RatePlanSet) {
		return true
	}

	return false
}

// SetRatePlanSet gets a reference to the given string and assigns it to the RatePlanSet field.
func (o *MultiRoomRateType) SetRatePlanSet(v string) {
	o.RatePlanSet = &v
}

// GetRoomRateInfo returns the RoomRateInfo field value if set, zero value otherwise.
func (o *MultiRoomRateType) GetRoomRateInfo() RoomRateInfoType {
	if o == nil || IsNil(o.RoomRateInfo) {
		var ret RoomRateInfoType
		return ret
	}
	return *o.RoomRateInfo
}

// GetRoomRateInfoOk returns a tuple with the RoomRateInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiRoomRateType) GetRoomRateInfoOk() (*RoomRateInfoType, bool) {
	if o == nil || IsNil(o.RoomRateInfo) {
		return nil, false
	}
	return o.RoomRateInfo, true
}

// HasRoomRateInfo returns a boolean if a field has been set.
func (o *MultiRoomRateType) HasRoomRateInfo() bool {
	if o != nil && !IsNil(o.RoomRateInfo) {
		return true
	}

	return false
}

// SetRoomRateInfo gets a reference to the given RoomRateInfoType and assigns it to the RoomRateInfo field.
func (o *MultiRoomRateType) SetRoomRateInfo(v RoomRateInfoType) {
	o.RoomRateInfo = &v
}

func (o MultiRoomRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiRoomRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.RatePlanSet) {
		toSerialize["ratePlanSet"] = o.RatePlanSet
	}
	if !IsNil(o.RoomRateInfo) {
		toSerialize["roomRateInfo"] = o.RoomRateInfo
	}
	return toSerialize, nil
}

type NullableMultiRoomRateType struct {
	value *MultiRoomRateType
	isSet bool
}

func (v NullableMultiRoomRateType) Get() *MultiRoomRateType {
	return v.value
}

func (v *NullableMultiRoomRateType) Set(val *MultiRoomRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiRoomRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiRoomRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiRoomRateType(val *MultiRoomRateType) *NullableMultiRoomRateType {
	return &NullableMultiRoomRateType{value: val, isSet: true}
}

func (v NullableMultiRoomRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiRoomRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


