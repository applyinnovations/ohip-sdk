/*
OPERA Cloud Price Availability Rate Async API

APIs to cater for Price and Rate Availability Asynchronous functionality in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package parasync

import (
	"encoding/json"
)

// checks if the Restrictions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Restrictions{}

// Restrictions Request for configuring restrictions.
type Restrictions struct {
	Links []InstanceLink `json:"links,omitempty"`
	// Collection of restrictions to be configured.
	Restrictions []CreateRestrictionType `json:"restrictions,omitempty"`
}

// NewRestrictions instantiates a new Restrictions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestrictions() *Restrictions {
	this := Restrictions{}
	return &this
}

// NewRestrictionsWithDefaults instantiates a new Restrictions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestrictionsWithDefaults() *Restrictions {
	this := Restrictions{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Restrictions) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Restrictions) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *Restrictions) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetRestrictions returns the Restrictions field value if set, zero value otherwise.
func (o *Restrictions) GetRestrictions() []CreateRestrictionType {
	if o == nil || IsNil(o.Restrictions) {
		var ret []CreateRestrictionType
		return ret
	}
	return o.Restrictions
}

// GetRestrictionsOk returns a tuple with the Restrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Restrictions) GetRestrictionsOk() ([]CreateRestrictionType, bool) {
	if o == nil || IsNil(o.Restrictions) {
		return nil, false
	}
	return o.Restrictions, true
}

// HasRestrictions returns a boolean if a field has been set.
func (o *Restrictions) HasRestrictions() bool {
	if o != nil && !IsNil(o.Restrictions) {
		return true
	}

	return false
}

// SetRestrictions gets a reference to the given []CreateRestrictionType and assigns it to the Restrictions field.
func (o *Restrictions) SetRestrictions(v []CreateRestrictionType) {
	o.Restrictions = v
}

func (o Restrictions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Restrictions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Restrictions) {
		toSerialize["restrictions"] = o.Restrictions
	}
	return toSerialize, nil
}

type NullableRestrictions struct {
	value *Restrictions
	isSet bool
}

func (v NullableRestrictions) Get() *Restrictions {
	return v.value
}

func (v *NullableRestrictions) Set(val *Restrictions) {
	v.value = val
	v.isSet = true
}

func (v NullableRestrictions) IsSet() bool {
	return v.isSet
}

func (v *NullableRestrictions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestrictions(val *Restrictions) *NullableRestrictions {
	return &NullableRestrictions{value: val, isSet: true}
}

func (v NullableRestrictions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestrictions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


