/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the VoucherType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoucherType{}

// VoucherType Voucher details.
type VoucherType struct {
	// Unique internal ID of the voucher
	VoucherId *int32 `json:"voucherId,omitempty"`
	// Membership type
	MembershipType *string `json:"membershipType,omitempty"`
	// Membership level
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	// Start date
	StartDate *string `json:"startDate,omitempty"`
	// End date
	EndDate *string `json:"endDate,omitempty"`
	// Voucher amount
	Amount *float64 `json:"amount,omitempty"`
	// Unique ID of the hotel in OPERA
	HotelId *string `json:"hotelId,omitempty"`
}

// NewVoucherType instantiates a new VoucherType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoucherType() *VoucherType {
	this := VoucherType{}
	return &this
}

// NewVoucherTypeWithDefaults instantiates a new VoucherType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoucherTypeWithDefaults() *VoucherType {
	this := VoucherType{}
	return &this
}

// GetVoucherId returns the VoucherId field value if set, zero value otherwise.
func (o *VoucherType) GetVoucherId() int32 {
	if o == nil || IsNil(o.VoucherId) {
		var ret int32
		return ret
	}
	return *o.VoucherId
}

// GetVoucherIdOk returns a tuple with the VoucherId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherType) GetVoucherIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VoucherId) {
		return nil, false
	}
	return o.VoucherId, true
}

// HasVoucherId returns a boolean if a field has been set.
func (o *VoucherType) HasVoucherId() bool {
	if o != nil && !IsNil(o.VoucherId) {
		return true
	}

	return false
}

// SetVoucherId gets a reference to the given int32 and assigns it to the VoucherId field.
func (o *VoucherType) SetVoucherId(v int32) {
	o.VoucherId = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *VoucherType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *VoucherType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *VoucherType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *VoucherType) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherType) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *VoucherType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *VoucherType) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *VoucherType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *VoucherType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *VoucherType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *VoucherType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *VoucherType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *VoucherType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *VoucherType) GetAmount() float64 {
	if o == nil || IsNil(o.Amount) {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherType) GetAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *VoucherType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *VoucherType) SetAmount(v float64) {
	o.Amount = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *VoucherType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoucherType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *VoucherType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *VoucherType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o VoucherType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoucherType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VoucherId) {
		toSerialize["voucherId"] = o.VoucherId
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableVoucherType struct {
	value *VoucherType
	isSet bool
}

func (v NullableVoucherType) Get() *VoucherType {
	return v.value
}

func (v *NullableVoucherType) Set(val *VoucherType) {
	v.value = val
	v.isSet = true
}

func (v NullableVoucherType) IsSet() bool {
	return v.isSet
}

func (v *NullableVoucherType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoucherType(val *VoucherType) *NullableVoucherType {
	return &NullableVoucherType{value: val, isSet: true}
}

func (v NullableVoucherType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoucherType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


