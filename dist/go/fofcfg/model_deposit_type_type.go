/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// DepositTypeType Represents the Folio Deposit Type.
type DepositTypeType string

// List of depositTypeType
const (
	DEPOSITTYPETYPE_RECEIPTS DepositTypeType = "Receipts"
	DEPOSITTYPETYPE_FOLIOS DepositTypeType = "Folios"
)

// All allowed values of DepositTypeType enum
var AllowedDepositTypeTypeEnumValues = []DepositTypeType{
	"Receipts",
	"Folios",
}

func (v *DepositTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DepositTypeType(value)
	for _, existing := range AllowedDepositTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DepositTypeType", value)
}

// NewDepositTypeTypeFromValue returns a pointer to a valid DepositTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDepositTypeTypeFromValue(v string) (*DepositTypeType, error) {
	ev := DepositTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DepositTypeType: valid values are %v", v, AllowedDepositTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DepositTypeType) IsValid() bool {
	for _, existing := range AllowedDepositTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to depositTypeType value
func (v DepositTypeType) Ptr() *DepositTypeType {
	return &v
}

type NullableDepositTypeType struct {
	value *DepositTypeType
	isSet bool
}

func (v NullableDepositTypeType) Get() *DepositTypeType {
	return v.value
}

func (v *NullableDepositTypeType) Set(val *DepositTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositTypeType(val *DepositTypeType) *NullableDepositTypeType {
	return &NullableDepositTypeType{value: val, isSet: true}
}

func (v NullableDepositTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

