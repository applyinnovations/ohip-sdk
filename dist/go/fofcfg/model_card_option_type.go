/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CardOptionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardOptionType{}

// CardOptionType Switch card options.
type CardOptionType struct {
	// Indicates whether issue number is mandatory or not.
	RequireIssueNumber *bool `json:"requireIssueNumber,omitempty"`
	// Indicates whether start date is mandatory or not.
	RequireStartDate *bool `json:"requireStartDate,omitempty"`
	// Indicates that either Issue Number or Start Date is sufficient.
	Either *bool `json:"either,omitempty"`
}

// NewCardOptionType instantiates a new CardOptionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardOptionType() *CardOptionType {
	this := CardOptionType{}
	return &this
}

// NewCardOptionTypeWithDefaults instantiates a new CardOptionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardOptionTypeWithDefaults() *CardOptionType {
	this := CardOptionType{}
	return &this
}

// GetRequireIssueNumber returns the RequireIssueNumber field value if set, zero value otherwise.
func (o *CardOptionType) GetRequireIssueNumber() bool {
	if o == nil || IsNil(o.RequireIssueNumber) {
		var ret bool
		return ret
	}
	return *o.RequireIssueNumber
}

// GetRequireIssueNumberOk returns a tuple with the RequireIssueNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOptionType) GetRequireIssueNumberOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireIssueNumber) {
		return nil, false
	}
	return o.RequireIssueNumber, true
}

// HasRequireIssueNumber returns a boolean if a field has been set.
func (o *CardOptionType) HasRequireIssueNumber() bool {
	if o != nil && !IsNil(o.RequireIssueNumber) {
		return true
	}

	return false
}

// SetRequireIssueNumber gets a reference to the given bool and assigns it to the RequireIssueNumber field.
func (o *CardOptionType) SetRequireIssueNumber(v bool) {
	o.RequireIssueNumber = &v
}

// GetRequireStartDate returns the RequireStartDate field value if set, zero value otherwise.
func (o *CardOptionType) GetRequireStartDate() bool {
	if o == nil || IsNil(o.RequireStartDate) {
		var ret bool
		return ret
	}
	return *o.RequireStartDate
}

// GetRequireStartDateOk returns a tuple with the RequireStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOptionType) GetRequireStartDateOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireStartDate) {
		return nil, false
	}
	return o.RequireStartDate, true
}

// HasRequireStartDate returns a boolean if a field has been set.
func (o *CardOptionType) HasRequireStartDate() bool {
	if o != nil && !IsNil(o.RequireStartDate) {
		return true
	}

	return false
}

// SetRequireStartDate gets a reference to the given bool and assigns it to the RequireStartDate field.
func (o *CardOptionType) SetRequireStartDate(v bool) {
	o.RequireStartDate = &v
}

// GetEither returns the Either field value if set, zero value otherwise.
func (o *CardOptionType) GetEither() bool {
	if o == nil || IsNil(o.Either) {
		var ret bool
		return ret
	}
	return *o.Either
}

// GetEitherOk returns a tuple with the Either field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardOptionType) GetEitherOk() (*bool, bool) {
	if o == nil || IsNil(o.Either) {
		return nil, false
	}
	return o.Either, true
}

// HasEither returns a boolean if a field has been set.
func (o *CardOptionType) HasEither() bool {
	if o != nil && !IsNil(o.Either) {
		return true
	}

	return false
}

// SetEither gets a reference to the given bool and assigns it to the Either field.
func (o *CardOptionType) SetEither(v bool) {
	o.Either = &v
}

func (o CardOptionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardOptionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequireIssueNumber) {
		toSerialize["requireIssueNumber"] = o.RequireIssueNumber
	}
	if !IsNil(o.RequireStartDate) {
		toSerialize["requireStartDate"] = o.RequireStartDate
	}
	if !IsNil(o.Either) {
		toSerialize["either"] = o.Either
	}
	return toSerialize, nil
}

type NullableCardOptionType struct {
	value *CardOptionType
	isSet bool
}

func (v NullableCardOptionType) Get() *CardOptionType {
	return v.value
}

func (v *NullableCardOptionType) Set(val *CardOptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCardOptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCardOptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardOptionType(val *CardOptionType) *NullableCardOptionType {
	return &NullableCardOptionType{value: val, isSet: true}
}

func (v NullableCardOptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardOptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


