/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// GenerateRoundingMethodType This type is only available for properties with zero decimals. If a property is using decimal points, this type will not be available. The rounding methods which can be specified are: UP, DOWN or NONE.
type GenerateRoundingMethodType string

// List of generateRoundingMethodType
const (
	GENERATEROUNDINGMETHODTYPE_UP GenerateRoundingMethodType = "Up"
	GENERATEROUNDINGMETHODTYPE_DOWN GenerateRoundingMethodType = "Down"
	GENERATEROUNDINGMETHODTYPE_NONE GenerateRoundingMethodType = "None"
)

// All allowed values of GenerateRoundingMethodType enum
var AllowedGenerateRoundingMethodTypeEnumValues = []GenerateRoundingMethodType{
	"Up",
	"Down",
	"None",
}

func (v *GenerateRoundingMethodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenerateRoundingMethodType(value)
	for _, existing := range AllowedGenerateRoundingMethodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GenerateRoundingMethodType", value)
}

// NewGenerateRoundingMethodTypeFromValue returns a pointer to a valid GenerateRoundingMethodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenerateRoundingMethodTypeFromValue(v string) (*GenerateRoundingMethodType, error) {
	ev := GenerateRoundingMethodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GenerateRoundingMethodType: valid values are %v", v, AllowedGenerateRoundingMethodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenerateRoundingMethodType) IsValid() bool {
	for _, existing := range AllowedGenerateRoundingMethodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to generateRoundingMethodType value
func (v GenerateRoundingMethodType) Ptr() *GenerateRoundingMethodType {
	return &v
}

type NullableGenerateRoundingMethodType struct {
	value *GenerateRoundingMethodType
	isSet bool
}

func (v NullableGenerateRoundingMethodType) Get() *GenerateRoundingMethodType {
	return v.value
}

func (v *NullableGenerateRoundingMethodType) Set(val *GenerateRoundingMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateRoundingMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateRoundingMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateRoundingMethodType(val *GenerateRoundingMethodType) *NullableGenerateRoundingMethodType {
	return &NullableGenerateRoundingMethodType{value: val, isSet: true}
}

func (v NullableGenerateRoundingMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateRoundingMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

