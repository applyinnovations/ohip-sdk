/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CreditCardReaderDevicesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditCardReaderDevicesType{}

// CreditCardReaderDevicesType Supported credit card reader devices.
type CreditCardReaderDevicesType struct {
	// Description of the device.
	Description *string `json:"description,omitempty"`
	// Device ID assigned to the credit card reader device.
	DeviceId *int32 `json:"deviceId,omitempty"`
	// A flag indicating whether the data from the device is encrypted or not.
	SecureDevice *bool `json:"secureDevice,omitempty"`
	// The Regular Expression pattern of the track data that is generated by this device.
	TrackDataPattern *string `json:"trackDataPattern,omitempty"`
}

// NewCreditCardReaderDevicesType instantiates a new CreditCardReaderDevicesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditCardReaderDevicesType() *CreditCardReaderDevicesType {
	this := CreditCardReaderDevicesType{}
	return &this
}

// NewCreditCardReaderDevicesTypeWithDefaults instantiates a new CreditCardReaderDevicesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditCardReaderDevicesTypeWithDefaults() *CreditCardReaderDevicesType {
	this := CreditCardReaderDevicesType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreditCardReaderDevicesType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardReaderDevicesType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreditCardReaderDevicesType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreditCardReaderDevicesType) SetDescription(v string) {
	o.Description = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *CreditCardReaderDevicesType) GetDeviceId() int32 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int32
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardReaderDevicesType) GetDeviceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *CreditCardReaderDevicesType) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int32 and assigns it to the DeviceId field.
func (o *CreditCardReaderDevicesType) SetDeviceId(v int32) {
	o.DeviceId = &v
}

// GetSecureDevice returns the SecureDevice field value if set, zero value otherwise.
func (o *CreditCardReaderDevicesType) GetSecureDevice() bool {
	if o == nil || IsNil(o.SecureDevice) {
		var ret bool
		return ret
	}
	return *o.SecureDevice
}

// GetSecureDeviceOk returns a tuple with the SecureDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardReaderDevicesType) GetSecureDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureDevice) {
		return nil, false
	}
	return o.SecureDevice, true
}

// HasSecureDevice returns a boolean if a field has been set.
func (o *CreditCardReaderDevicesType) HasSecureDevice() bool {
	if o != nil && !IsNil(o.SecureDevice) {
		return true
	}

	return false
}

// SetSecureDevice gets a reference to the given bool and assigns it to the SecureDevice field.
func (o *CreditCardReaderDevicesType) SetSecureDevice(v bool) {
	o.SecureDevice = &v
}

// GetTrackDataPattern returns the TrackDataPattern field value if set, zero value otherwise.
func (o *CreditCardReaderDevicesType) GetTrackDataPattern() string {
	if o == nil || IsNil(o.TrackDataPattern) {
		var ret string
		return ret
	}
	return *o.TrackDataPattern
}

// GetTrackDataPatternOk returns a tuple with the TrackDataPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditCardReaderDevicesType) GetTrackDataPatternOk() (*string, bool) {
	if o == nil || IsNil(o.TrackDataPattern) {
		return nil, false
	}
	return o.TrackDataPattern, true
}

// HasTrackDataPattern returns a boolean if a field has been set.
func (o *CreditCardReaderDevicesType) HasTrackDataPattern() bool {
	if o != nil && !IsNil(o.TrackDataPattern) {
		return true
	}

	return false
}

// SetTrackDataPattern gets a reference to the given string and assigns it to the TrackDataPattern field.
func (o *CreditCardReaderDevicesType) SetTrackDataPattern(v string) {
	o.TrackDataPattern = &v
}

func (o CreditCardReaderDevicesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditCardReaderDevicesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.SecureDevice) {
		toSerialize["secureDevice"] = o.SecureDevice
	}
	if !IsNil(o.TrackDataPattern) {
		toSerialize["trackDataPattern"] = o.TrackDataPattern
	}
	return toSerialize, nil
}

type NullableCreditCardReaderDevicesType struct {
	value *CreditCardReaderDevicesType
	isSet bool
}

func (v NullableCreditCardReaderDevicesType) Get() *CreditCardReaderDevicesType {
	return v.value
}

func (v *NullableCreditCardReaderDevicesType) Set(val *CreditCardReaderDevicesType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardReaderDevicesType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardReaderDevicesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardReaderDevicesType(val *CreditCardReaderDevicesType) *NullableCreditCardReaderDevicesType {
	return &NullableCreditCardReaderDevicesType{value: val, isSet: true}
}

func (v NullableCreditCardReaderDevicesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardReaderDevicesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


