/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TaxBracketType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxBracketType{}

// TaxBracketType This gives information for uniquely identifying a tax bracket detail.
type TaxBracketType struct {
	Description *TranslationTextType2000 `json:"description,omitempty"`
	// Hotel Code where tax bracket belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Details used for storing information about a tax bracket amount.
	TaxBracketAmounts []TaxBracketAmountType `json:"taxBracketAmounts,omitempty"`
	// Tax Percentage for which this Tax Bracket applies.
	TaxPercentage *float32 `json:"taxPercentage,omitempty"`
	// The threshold(max) amount for which Tax Brackets are defined for this percentage.
	Threshold *float32 `json:"threshold,omitempty"`
}

// NewTaxBracketType instantiates a new TaxBracketType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxBracketType() *TaxBracketType {
	this := TaxBracketType{}
	return &this
}

// NewTaxBracketTypeWithDefaults instantiates a new TaxBracketType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxBracketTypeWithDefaults() *TaxBracketType {
	this := TaxBracketType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaxBracketType) GetDescription() TranslationTextType2000 {
	if o == nil || IsNil(o.Description) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketType) GetDescriptionOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaxBracketType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given TranslationTextType2000 and assigns it to the Description field.
func (o *TaxBracketType) SetDescription(v TranslationTextType2000) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *TaxBracketType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *TaxBracketType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *TaxBracketType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTaxBracketAmounts returns the TaxBracketAmounts field value if set, zero value otherwise.
func (o *TaxBracketType) GetTaxBracketAmounts() []TaxBracketAmountType {
	if o == nil || IsNil(o.TaxBracketAmounts) {
		var ret []TaxBracketAmountType
		return ret
	}
	return o.TaxBracketAmounts
}

// GetTaxBracketAmountsOk returns a tuple with the TaxBracketAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketType) GetTaxBracketAmountsOk() ([]TaxBracketAmountType, bool) {
	if o == nil || IsNil(o.TaxBracketAmounts) {
		return nil, false
	}
	return o.TaxBracketAmounts, true
}

// HasTaxBracketAmounts returns a boolean if a field has been set.
func (o *TaxBracketType) HasTaxBracketAmounts() bool {
	if o != nil && !IsNil(o.TaxBracketAmounts) {
		return true
	}

	return false
}

// SetTaxBracketAmounts gets a reference to the given []TaxBracketAmountType and assigns it to the TaxBracketAmounts field.
func (o *TaxBracketType) SetTaxBracketAmounts(v []TaxBracketAmountType) {
	o.TaxBracketAmounts = v
}

// GetTaxPercentage returns the TaxPercentage field value if set, zero value otherwise.
func (o *TaxBracketType) GetTaxPercentage() float32 {
	if o == nil || IsNil(o.TaxPercentage) {
		var ret float32
		return ret
	}
	return *o.TaxPercentage
}

// GetTaxPercentageOk returns a tuple with the TaxPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketType) GetTaxPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.TaxPercentage) {
		return nil, false
	}
	return o.TaxPercentage, true
}

// HasTaxPercentage returns a boolean if a field has been set.
func (o *TaxBracketType) HasTaxPercentage() bool {
	if o != nil && !IsNil(o.TaxPercentage) {
		return true
	}

	return false
}

// SetTaxPercentage gets a reference to the given float32 and assigns it to the TaxPercentage field.
func (o *TaxBracketType) SetTaxPercentage(v float32) {
	o.TaxPercentage = &v
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *TaxBracketType) GetThreshold() float32 {
	if o == nil || IsNil(o.Threshold) {
		var ret float32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxBracketType) GetThresholdOk() (*float32, bool) {
	if o == nil || IsNil(o.Threshold) {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *TaxBracketType) HasThreshold() bool {
	if o != nil && !IsNil(o.Threshold) {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float32 and assigns it to the Threshold field.
func (o *TaxBracketType) SetThreshold(v float32) {
	o.Threshold = &v
}

func (o TaxBracketType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxBracketType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TaxBracketAmounts) {
		toSerialize["taxBracketAmounts"] = o.TaxBracketAmounts
	}
	if !IsNil(o.TaxPercentage) {
		toSerialize["taxPercentage"] = o.TaxPercentage
	}
	if !IsNil(o.Threshold) {
		toSerialize["threshold"] = o.Threshold
	}
	return toSerialize, nil
}

type NullableTaxBracketType struct {
	value *TaxBracketType
	isSet bool
}

func (v NullableTaxBracketType) Get() *TaxBracketType {
	return v.value
}

func (v *NullableTaxBracketType) Set(val *TaxBracketType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxBracketType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxBracketType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxBracketType(val *TaxBracketType) *NullableTaxBracketType {
	return &NullableTaxBracketType{value: val, isSet: true}
}

func (v NullableTaxBracketType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxBracketType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


