/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CreditCardApiService CreditCardApi service
type CreditCardApiService service

type CreditCardApiDecodeCardRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	hotelId *string
	authorization *string
	xAppKey *string
	xHotelid *string
	trackData *string
	xExternalsystem *string
	acceptLanguage *string
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r CreditCardApiDecodeCardRequest) HotelId(hotelId string) CreditCardApiDecodeCardRequest {
	r.hotelId = &hotelId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiDecodeCardRequest) Authorization(authorization string) CreditCardApiDecodeCardRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiDecodeCardRequest) XAppKey(xAppKey string) CreditCardApiDecodeCardRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiDecodeCardRequest) XHotelid(xHotelid string) CreditCardApiDecodeCardRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for Character Strings, length 0 to 200.
func (r CreditCardApiDecodeCardRequest) TrackData(trackData string) CreditCardApiDecodeCardRequest {
	r.trackData = &trackData
	return r
}

// External system code.
func (r CreditCardApiDecodeCardRequest) XExternalsystem(xExternalsystem string) CreditCardApiDecodeCardRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiDecodeCardRequest) AcceptLanguage(acceptLanguage string) CreditCardApiDecodeCardRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiDecodeCardRequest) Execute() (*DecodedCard, *http.Response, error) {
	return r.ApiService.DecodeCardExecute(r)
}

/*
DecodeCard Operation to Decode Card.

 <p><strong>OperationId:</strong>decodeCard</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiDecodeCardRequest
*/
func (a *CreditCardApiService) DecodeCard(ctx context.Context) CreditCardApiDecodeCardRequest {
	return CreditCardApiDecodeCardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DecodedCard
func (a *CreditCardApiService) DecodeCardExecute(r CreditCardApiDecodeCardRequest) (*DecodedCard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DecodedCard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.DecodeCard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/creditCards/decode"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	if r.trackData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trackData", r.trackData, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetAuthorizationRuleRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	reservationId *string
	idExtension *int32
	idContext *string
	type_ *string
	guaranteeCode *string
	rateCode *string
	roomType *string
	sourceCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetAuthorizationRuleRequest) Authorization(authorization string) CreditCardApiGetAuthorizationRuleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetAuthorizationRuleRequest) XAppKey(xAppKey string) CreditCardApiGetAuthorizationRuleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetAuthorizationRuleRequest) XHotelid(xHotelid string) CreditCardApiGetAuthorizationRuleRequest {
	r.xHotelid = &xHotelid
	return r
}

// The hotel code to retrieve authorization rules for.
func (r CreditCardApiGetAuthorizationRuleRequest) HotelId(hotelId string) CreditCardApiGetAuthorizationRuleRequest {
	r.hotelId = &hotelId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetAuthorizationRuleRequest) ReservationId(reservationId string) CreditCardApiGetAuthorizationRuleRequest {
	r.reservationId = &reservationId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CreditCardApiGetAuthorizationRuleRequest) IdExtension(idExtension int32) CreditCardApiGetAuthorizationRuleRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CreditCardApiGetAuthorizationRuleRequest) IdContext(idContext string) CreditCardApiGetAuthorizationRuleRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetAuthorizationRuleRequest) Type_(type_ string) CreditCardApiGetAuthorizationRuleRequest {
	r.type_ = &type_
	return r
}

// The guarantee code to retrieve authorization rules for.
func (r CreditCardApiGetAuthorizationRuleRequest) GuaranteeCode(guaranteeCode string) CreditCardApiGetAuthorizationRuleRequest {
	r.guaranteeCode = &guaranteeCode
	return r
}

// The rate code to retrieve authorization rules for.
func (r CreditCardApiGetAuthorizationRuleRequest) RateCode(rateCode string) CreditCardApiGetAuthorizationRuleRequest {
	r.rateCode = &rateCode
	return r
}

// The room type to retrieve authorization rules for.
func (r CreditCardApiGetAuthorizationRuleRequest) RoomType(roomType string) CreditCardApiGetAuthorizationRuleRequest {
	r.roomType = &roomType
	return r
}

// The source code to retrieve authorization rules for.
func (r CreditCardApiGetAuthorizationRuleRequest) SourceCode(sourceCode string) CreditCardApiGetAuthorizationRuleRequest {
	r.sourceCode = &sourceCode
	return r
}

// External system code.
func (r CreditCardApiGetAuthorizationRuleRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetAuthorizationRuleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetAuthorizationRuleRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetAuthorizationRuleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetAuthorizationRuleRequest) Execute() (*AuthorizationRule, *http.Response, error) {
	return r.ApiService.GetAuthorizationRuleExecute(r)
}

/*
GetAuthorizationRule Operation to fetch AuthorizationRule.

 <p><strong>OperationId:</strong>getAuthorizationRule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetAuthorizationRuleRequest
*/
func (a *CreditCardApiService) GetAuthorizationRule(ctx context.Context) CreditCardApiGetAuthorizationRuleRequest {
	return CreditCardApiGetAuthorizationRuleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthorizationRule
func (a *CreditCardApiService) GetAuthorizationRuleExecute(r CreditCardApiGetAuthorizationRuleRequest) (*AuthorizationRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthorizationRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetAuthorizationRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authorizationRule"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
	}
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.guaranteeCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guaranteeCode", r.guaranteeCode, "")
	}
	if r.rateCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", r.rateCode, "")
	}
	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
	}
	if r.sourceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sourceCode", r.sourceCode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetCardReaderDelimitersRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	deviceID *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetCardReaderDelimitersRequest) Authorization(authorization string) CreditCardApiGetCardReaderDelimitersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetCardReaderDelimitersRequest) XAppKey(xAppKey string) CreditCardApiGetCardReaderDelimitersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetCardReaderDelimitersRequest) XHotelid(xHotelid string) CreditCardApiGetCardReaderDelimitersRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r CreditCardApiGetCardReaderDelimitersRequest) DeviceID(deviceID int32) CreditCardApiGetCardReaderDelimitersRequest {
	r.deviceID = &deviceID
	return r
}

// External system code.
func (r CreditCardApiGetCardReaderDelimitersRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetCardReaderDelimitersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetCardReaderDelimitersRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetCardReaderDelimitersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetCardReaderDelimitersRequest) Execute() (*CardReaderDelimiters, *http.Response, error) {
	return r.ApiService.GetCardReaderDelimitersExecute(r)
}

/*
GetCardReaderDelimiters Operation to fetch CardReaderDelimiters.

 <p><strong>OperationId:</strong>getCardReaderDelimiters</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetCardReaderDelimitersRequest
*/
func (a *CreditCardApiService) GetCardReaderDelimiters(ctx context.Context) CreditCardApiGetCardReaderDelimitersRequest {
	return CreditCardApiGetCardReaderDelimitersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CardReaderDelimiters
func (a *CreditCardApiService) GetCardReaderDelimitersExecute(r CreditCardApiGetCardReaderDelimitersRequest) (*CardReaderDelimiters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CardReaderDelimiters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetCardReaderDelimiters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cardReaderDelimiters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceID", r.deviceID, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetCreditCardInfoRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	hotelId *string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationId *string
	idExtension *int32
	idContext *string
	type_ *string
	cardId *string
	cardIdExtension *int32
	cardIdContext *string
	cardIdType *string
	accessTransactionType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r CreditCardApiGetCreditCardInfoRequest) HotelId(hotelId string) CreditCardApiGetCreditCardInfoRequest {
	r.hotelId = &hotelId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetCreditCardInfoRequest) Authorization(authorization string) CreditCardApiGetCreditCardInfoRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetCreditCardInfoRequest) XAppKey(xAppKey string) CreditCardApiGetCreditCardInfoRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetCreditCardInfoRequest) XHotelid(xHotelid string) CreditCardApiGetCreditCardInfoRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetCreditCardInfoRequest) ReservationId(reservationId string) CreditCardApiGetCreditCardInfoRequest {
	r.reservationId = &reservationId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CreditCardApiGetCreditCardInfoRequest) IdExtension(idExtension int32) CreditCardApiGetCreditCardInfoRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CreditCardApiGetCreditCardInfoRequest) IdContext(idContext string) CreditCardApiGetCreditCardInfoRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetCreditCardInfoRequest) Type_(type_ string) CreditCardApiGetCreditCardInfoRequest {
	r.type_ = &type_
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetCreditCardInfoRequest) CardId(cardId string) CreditCardApiGetCreditCardInfoRequest {
	r.cardId = &cardId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CreditCardApiGetCreditCardInfoRequest) CardIdExtension(cardIdExtension int32) CreditCardApiGetCreditCardInfoRequest {
	r.cardIdExtension = &cardIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CreditCardApiGetCreditCardInfoRequest) CardIdContext(cardIdContext string) CreditCardApiGetCreditCardInfoRequest {
	r.cardIdContext = &cardIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetCreditCardInfoRequest) CardIdType(cardIdType string) CreditCardApiGetCreditCardInfoRequest {
	r.cardIdType = &cardIdType
	return r
}

// Currently supported transaction type categories used for credit card authorization.
func (r CreditCardApiGetCreditCardInfoRequest) AccessTransactionType(accessTransactionType string) CreditCardApiGetCreditCardInfoRequest {
	r.accessTransactionType = &accessTransactionType
	return r
}

// External system code.
func (r CreditCardApiGetCreditCardInfoRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetCreditCardInfoRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetCreditCardInfoRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetCreditCardInfoRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetCreditCardInfoRequest) Execute() (*CreditCardInfo, *http.Response, error) {
	return r.ApiService.GetCreditCardInfoExecute(r)
}

/*
GetCreditCardInfo Get credit card token information

Use this API to return the token inclusive cardType and expirationDate for the credit card used in a specific reservation. Oracle does not provide any credit card numbers. Include the hotelId and the cardId in the parameters. The cardId can be returned with the getReservation operation. <p><strong>OperationId:</strong>getCreditCardInfo</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetCreditCardInfoRequest
*/
func (a *CreditCardApiService) GetCreditCardInfo(ctx context.Context) CreditCardApiGetCreditCardInfoRequest {
	return CreditCardApiGetCreditCardInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreditCardInfo
func (a *CreditCardApiService) GetCreditCardInfoExecute(r CreditCardApiGetCreditCardInfoRequest) (*CreditCardInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreditCardInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetCreditCardInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/creditCardInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
	}
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.cardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardId", r.cardId, "")
	}
	if r.cardIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdExtension", r.cardIdExtension, "")
	}
	if r.cardIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdContext", r.cardIdContext, "")
	}
	if r.cardIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdType", r.cardIdType, "")
	}
	if r.accessTransactionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accessTransactionType", r.accessTransactionType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetCreditCardReaderDevicesRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetCreditCardReaderDevicesRequest) Authorization(authorization string) CreditCardApiGetCreditCardReaderDevicesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetCreditCardReaderDevicesRequest) XAppKey(xAppKey string) CreditCardApiGetCreditCardReaderDevicesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetCreditCardReaderDevicesRequest) XHotelid(xHotelid string) CreditCardApiGetCreditCardReaderDevicesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r CreditCardApiGetCreditCardReaderDevicesRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetCreditCardReaderDevicesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetCreditCardReaderDevicesRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetCreditCardReaderDevicesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetCreditCardReaderDevicesRequest) Execute() (*CreditCardReaderDevices, *http.Response, error) {
	return r.ApiService.GetCreditCardReaderDevicesExecute(r)
}

/*
GetCreditCardReaderDevices Operation to fetch CreditCardReaderDevices.

 <p><strong>OperationId:</strong>getCreditCardReaderDevices</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetCreditCardReaderDevicesRequest
*/
func (a *CreditCardApiService) GetCreditCardReaderDevices(ctx context.Context) CreditCardApiGetCreditCardReaderDevicesRequest {
	return CreditCardApiGetCreditCardReaderDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreditCardReaderDevices
func (a *CreditCardApiService) GetCreditCardReaderDevicesExecute(r CreditCardApiGetCreditCardReaderDevicesRequest) (*CreditCardReaderDevices, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreditCardReaderDevices
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetCreditCardReaderDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/creditCards/readerDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetCreditCardUniqueIdRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	creditCardUniqueIdRQ *GetCreditCardUniqueIdRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetCreditCardUniqueIdRequest) Authorization(authorization string) CreditCardApiGetCreditCardUniqueIdRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetCreditCardUniqueIdRequest) XAppKey(xAppKey string) CreditCardApiGetCreditCardUniqueIdRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetCreditCardUniqueIdRequest) XHotelid(xHotelid string) CreditCardApiGetCreditCardUniqueIdRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for fetching credit card unique id.
func (r CreditCardApiGetCreditCardUniqueIdRequest) CreditCardUniqueIdRQ(creditCardUniqueIdRQ GetCreditCardUniqueIdRequest) CreditCardApiGetCreditCardUniqueIdRequest {
	r.creditCardUniqueIdRQ = &creditCardUniqueIdRQ
	return r
}

// External system code.
func (r CreditCardApiGetCreditCardUniqueIdRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetCreditCardUniqueIdRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetCreditCardUniqueIdRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetCreditCardUniqueIdRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetCreditCardUniqueIdRequest) Execute() (*CreditCardUniqueId, *http.Response, error) {
	return r.ApiService.GetCreditCardUniqueIdExecute(r)
}

/*
GetCreditCardUniqueId Operation to fetch CreditCardUniqueId.

 <p><strong>OperationId:</strong>getCreditCardUniqueId</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetCreditCardUniqueIdRequest
*/
func (a *CreditCardApiService) GetCreditCardUniqueId(ctx context.Context) CreditCardApiGetCreditCardUniqueIdRequest {
	return CreditCardApiGetCreditCardUniqueIdRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreditCardUniqueId
func (a *CreditCardApiService) GetCreditCardUniqueIdExecute(r CreditCardApiGetCreditCardUniqueIdRequest) (*CreditCardUniqueId, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreditCardUniqueId
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetCreditCardUniqueId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/creditCards/vaultedId"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.creditCardUniqueIdRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetHotelInterfaceCustomDataRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	interfaceLogoId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInstructions *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetHotelInterfaceCustomDataRequest) Authorization(authorization string) CreditCardApiGetHotelInterfaceCustomDataRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetHotelInterfaceCustomDataRequest) XAppKey(xAppKey string) CreditCardApiGetHotelInterfaceCustomDataRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetHotelInterfaceCustomDataRequest) XHotelid(xHotelid string) CreditCardApiGetHotelInterfaceCustomDataRequest {
	r.xHotelid = &xHotelid
	return r
}

// Transaction codes of a Hotel Interface.
func (r CreditCardApiGetHotelInterfaceCustomDataRequest) FetchInstructions(fetchInstructions string) CreditCardApiGetHotelInterfaceCustomDataRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r CreditCardApiGetHotelInterfaceCustomDataRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetHotelInterfaceCustomDataRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetHotelInterfaceCustomDataRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetHotelInterfaceCustomDataRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetHotelInterfaceCustomDataRequest) Execute() (*HotelInterfaceDetail, *http.Response, error) {
	return r.ApiService.GetHotelInterfaceCustomDataExecute(r)
}

/*
GetHotelInterfaceCustomData Operation to fetch hotel interface custom data.

Operation to fetch hotel interface custom data. <p><strong>OperationId:</strong>getHotelInterfaceCustomData</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceLogoId Unique ID of the hotel interface logo
 @param hotelId Unique ID of the hotel in OPERA
 @return CreditCardApiGetHotelInterfaceCustomDataRequest
*/
func (a *CreditCardApiService) GetHotelInterfaceCustomData(ctx context.Context, interfaceLogoId string, hotelId string) CreditCardApiGetHotelInterfaceCustomDataRequest {
	return CreditCardApiGetHotelInterfaceCustomDataRequest{
		ApiService: a,
		ctx: ctx,
		interfaceLogoId: interfaceLogoId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return HotelInterfaceDetail
func (a *CreditCardApiService) GetHotelInterfaceCustomDataExecute(r CreditCardApiGetHotelInterfaceCustomDataRequest) (*HotelInterfaceDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HotelInterfaceDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetHotelInterfaceCustomData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceLogoId}/customData"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceLogoId"+"}", url.PathEscape(parameterValueToString(r.interfaceLogoId, "interfaceLogoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceLogoId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceLogoId must have at least 1 elements")
	}
	if strlen(r.interfaceLogoId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceLogoId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fetchInstructions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", r.fetchInstructions, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetPrepaidCardRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	hotelId *string
	cardNumber *string
	authorization *string
	xAppKey *string
	xHotelid *string
	interfaceId *string
	interfaceIdType *string
	reservationId *string
	reservationIdType *string
	pin *string
	xExternalsystem *string
	acceptLanguage *string
}

// Hotel code.
func (r CreditCardApiGetPrepaidCardRequest) HotelId(hotelId string) CreditCardApiGetPrepaidCardRequest {
	r.hotelId = &hotelId
	return r
}

// Prepaid card number.
func (r CreditCardApiGetPrepaidCardRequest) CardNumber(cardNumber string) CreditCardApiGetPrepaidCardRequest {
	r.cardNumber = &cardNumber
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetPrepaidCardRequest) Authorization(authorization string) CreditCardApiGetPrepaidCardRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetPrepaidCardRequest) XAppKey(xAppKey string) CreditCardApiGetPrepaidCardRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetPrepaidCardRequest) XHotelid(xHotelid string) CreditCardApiGetPrepaidCardRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetPrepaidCardRequest) InterfaceId(interfaceId string) CreditCardApiGetPrepaidCardRequest {
	r.interfaceId = &interfaceId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetPrepaidCardRequest) InterfaceIdType(interfaceIdType string) CreditCardApiGetPrepaidCardRequest {
	r.interfaceIdType = &interfaceIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetPrepaidCardRequest) ReservationId(reservationId string) CreditCardApiGetPrepaidCardRequest {
	r.reservationId = &reservationId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetPrepaidCardRequest) ReservationIdType(reservationIdType string) CreditCardApiGetPrepaidCardRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// PIN code associated for the prepaid card.
func (r CreditCardApiGetPrepaidCardRequest) Pin(pin string) CreditCardApiGetPrepaidCardRequest {
	r.pin = &pin
	return r
}

// External system code.
func (r CreditCardApiGetPrepaidCardRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetPrepaidCardRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetPrepaidCardRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetPrepaidCardRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetPrepaidCardRequest) Execute() (*PrepaidCardDetails, *http.Response, error) {
	return r.ApiService.GetPrepaidCardExecute(r)
}

/*
GetPrepaidCard Operation to fetch Prepaid Card.

 <p><strong>OperationId:</strong>getPrepaidCard</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetPrepaidCardRequest
*/
func (a *CreditCardApiService) GetPrepaidCard(ctx context.Context) CreditCardApiGetPrepaidCardRequest {
	return CreditCardApiGetPrepaidCardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PrepaidCardDetails
func (a *CreditCardApiService) GetPrepaidCardExecute(r CreditCardApiGetPrepaidCardRequest) (*PrepaidCardDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrepaidCardDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetPrepaidCard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/prepaidCard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumber", r.cardNumber, "")
	if r.interfaceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceId", r.interfaceId, "")
	}
	if r.interfaceIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceIdType", r.interfaceIdType, "")
	}
	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
	}
	if r.reservationIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", r.reservationIdType, "")
	}
	if r.pin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pin", r.pin, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetPrepaidCardBalanceRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	hotelId *string
	cardNumber *string
	authorization *string
	xAppKey *string
	xHotelid *string
	interfaceId *string
	interfaceIdType *string
	reservationId *string
	reservationIdType *string
	pin *string
	xExternalsystem *string
	acceptLanguage *string
}

// Hotel code.
func (r CreditCardApiGetPrepaidCardBalanceRequest) HotelId(hotelId string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.hotelId = &hotelId
	return r
}

// Prepaid card number.
func (r CreditCardApiGetPrepaidCardBalanceRequest) CardNumber(cardNumber string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.cardNumber = &cardNumber
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetPrepaidCardBalanceRequest) Authorization(authorization string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetPrepaidCardBalanceRequest) XAppKey(xAppKey string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetPrepaidCardBalanceRequest) XHotelid(xHotelid string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetPrepaidCardBalanceRequest) InterfaceId(interfaceId string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.interfaceId = &interfaceId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetPrepaidCardBalanceRequest) InterfaceIdType(interfaceIdType string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.interfaceIdType = &interfaceIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetPrepaidCardBalanceRequest) ReservationId(reservationId string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.reservationId = &reservationId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetPrepaidCardBalanceRequest) ReservationIdType(reservationIdType string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// PIN code associated for the prepaid card.
func (r CreditCardApiGetPrepaidCardBalanceRequest) Pin(pin string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.pin = &pin
	return r
}

// External system code.
func (r CreditCardApiGetPrepaidCardBalanceRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetPrepaidCardBalanceRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetPrepaidCardBalanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetPrepaidCardBalanceRequest) Execute() (*PrepaidCardBalanceDetails, *http.Response, error) {
	return r.ApiService.GetPrepaidCardBalanceExecute(r)
}

/*
GetPrepaidCardBalance Operation to fetch prepaid card balance.

 <p><strong>OperationId:</strong>getPrepaidCardBalance</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetPrepaidCardBalanceRequest
*/
func (a *CreditCardApiService) GetPrepaidCardBalance(ctx context.Context) CreditCardApiGetPrepaidCardBalanceRequest {
	return CreditCardApiGetPrepaidCardBalanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PrepaidCardBalanceDetails
func (a *CreditCardApiService) GetPrepaidCardBalanceExecute(r CreditCardApiGetPrepaidCardBalanceRequest) (*PrepaidCardBalanceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrepaidCardBalanceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetPrepaidCardBalance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/prepaidCardBalance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumber", r.cardNumber, "")
	if r.interfaceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceId", r.interfaceId, "")
	}
	if r.interfaceIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceIdType", r.interfaceIdType, "")
	}
	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
	}
	if r.reservationIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", r.reservationIdType, "")
	}
	if r.pin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pin", r.pin, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiGetPrepaidCardsRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	hotelId *string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeCardDetails *bool
	reservationId *string
	idExtension *int32
	idContext *string
	type_ *string
	cardNo *string
	roomNo *string
	nameWildCard *string
	firstNameWildCard *string
	xExternalsystem *string
	acceptLanguage *string
}

// Hotel code.
func (r CreditCardApiGetPrepaidCardsRequest) HotelId(hotelId string) CreditCardApiGetPrepaidCardsRequest {
	r.hotelId = &hotelId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiGetPrepaidCardsRequest) Authorization(authorization string) CreditCardApiGetPrepaidCardsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiGetPrepaidCardsRequest) XAppKey(xAppKey string) CreditCardApiGetPrepaidCardsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiGetPrepaidCardsRequest) XHotelid(xHotelid string) CreditCardApiGetPrepaidCardsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Configuring this flag to be TRUE will fetch and return card details from vendor interface.
func (r CreditCardApiGetPrepaidCardsRequest) IncludeCardDetails(includeCardDetails bool) CreditCardApiGetPrepaidCardsRequest {
	r.includeCardDetails = &includeCardDetails
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiGetPrepaidCardsRequest) ReservationId(reservationId string) CreditCardApiGetPrepaidCardsRequest {
	r.reservationId = &reservationId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CreditCardApiGetPrepaidCardsRequest) IdExtension(idExtension int32) CreditCardApiGetPrepaidCardsRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CreditCardApiGetPrepaidCardsRequest) IdContext(idContext string) CreditCardApiGetPrepaidCardsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiGetPrepaidCardsRequest) Type_(type_ string) CreditCardApiGetPrepaidCardsRequest {
	r.type_ = &type_
	return r
}

// Prepaid card number.
func (r CreditCardApiGetPrepaidCardsRequest) CardNo(cardNo string) CreditCardApiGetPrepaidCardsRequest {
	r.cardNo = &cardNo
	return r
}

// Room No search criteria.
func (r CreditCardApiGetPrepaidCardsRequest) RoomNo(roomNo string) CreditCardApiGetPrepaidCardsRequest {
	r.roomNo = &roomNo
	return r
}

// Last name search criteria.
func (r CreditCardApiGetPrepaidCardsRequest) NameWildCard(nameWildCard string) CreditCardApiGetPrepaidCardsRequest {
	r.nameWildCard = &nameWildCard
	return r
}

// First name search criteria.
func (r CreditCardApiGetPrepaidCardsRequest) FirstNameWildCard(firstNameWildCard string) CreditCardApiGetPrepaidCardsRequest {
	r.firstNameWildCard = &firstNameWildCard
	return r
}

// External system code.
func (r CreditCardApiGetPrepaidCardsRequest) XExternalsystem(xExternalsystem string) CreditCardApiGetPrepaidCardsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiGetPrepaidCardsRequest) AcceptLanguage(acceptLanguage string) CreditCardApiGetPrepaidCardsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiGetPrepaidCardsRequest) Execute() (*PrepaidCards, *http.Response, error) {
	return r.ApiService.GetPrepaidCardsExecute(r)
}

/*
GetPrepaidCards Operation to fetch PrepaidCards.

 <p><strong>OperationId:</strong>getPrepaidCards</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiGetPrepaidCardsRequest
*/
func (a *CreditCardApiService) GetPrepaidCards(ctx context.Context) CreditCardApiGetPrepaidCardsRequest {
	return CreditCardApiGetPrepaidCardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PrepaidCards
func (a *CreditCardApiService) GetPrepaidCardsExecute(r CreditCardApiGetPrepaidCardsRequest) (*PrepaidCards, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrepaidCards
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.GetPrepaidCards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/prepaidCards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	if r.includeCardDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeCardDetails", r.includeCardDetails, "")
	}
	if r.reservationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationId", r.reservationId, "")
	}
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
	}
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.cardNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNo", r.cardNo, "")
	}
	if r.roomNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomNo", r.roomNo, "")
	}
	if r.nameWildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameWildCard", r.nameWildCard, "")
	}
	if r.firstNameWildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstNameWildCard", r.firstNameWildCard, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiPutSecureApplicationSettingsRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	applicationSecureSetting *PutSecureApplicationSettingsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiPutSecureApplicationSettingsRequest) Authorization(authorization string) CreditCardApiPutSecureApplicationSettingsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiPutSecureApplicationSettingsRequest) XAppKey(xAppKey string) CreditCardApiPutSecureApplicationSettingsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiPutSecureApplicationSettingsRequest) XHotelid(xHotelid string) CreditCardApiPutSecureApplicationSettingsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for reading the configured device delimiters.
func (r CreditCardApiPutSecureApplicationSettingsRequest) ApplicationSecureSetting(applicationSecureSetting PutSecureApplicationSettingsRequest) CreditCardApiPutSecureApplicationSettingsRequest {
	r.applicationSecureSetting = &applicationSecureSetting
	return r
}

// External system code.
func (r CreditCardApiPutSecureApplicationSettingsRequest) XExternalsystem(xExternalsystem string) CreditCardApiPutSecureApplicationSettingsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiPutSecureApplicationSettingsRequest) AcceptLanguage(acceptLanguage string) CreditCardApiPutSecureApplicationSettingsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiPutSecureApplicationSettingsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutSecureApplicationSettingsExecute(r)
}

/*
PutSecureApplicationSettings Operation to change AR SecureApplicationSettings.

Operation to update one or more secure application settings. <p><strong>OperationId:</strong>putSecureApplicationSettings</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiPutSecureApplicationSettingsRequest
*/
func (a *CreditCardApiService) PutSecureApplicationSettings(ctx context.Context) CreditCardApiPutSecureApplicationSettingsRequest {
	return CreditCardApiPutSecureApplicationSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CreditCardApiService) PutSecureApplicationSettingsExecute(r CreditCardApiPutSecureApplicationSettingsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.PutSecureApplicationSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secureApplicationSettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.applicationSecureSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiUpdateInterfaceCustomDataRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	interfaceLogoId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelInterfaceDetail *UpdateInterfaceCustomDataRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiUpdateInterfaceCustomDataRequest) Authorization(authorization string) CreditCardApiUpdateInterfaceCustomDataRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiUpdateInterfaceCustomDataRequest) XAppKey(xAppKey string) CreditCardApiUpdateInterfaceCustomDataRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiUpdateInterfaceCustomDataRequest) XHotelid(xHotelid string) CreditCardApiUpdateInterfaceCustomDataRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating a Hotel Interface.
func (r CreditCardApiUpdateInterfaceCustomDataRequest) HotelInterfaceDetail(hotelInterfaceDetail UpdateInterfaceCustomDataRequest) CreditCardApiUpdateInterfaceCustomDataRequest {
	r.hotelInterfaceDetail = &hotelInterfaceDetail
	return r
}

// External system code.
func (r CreditCardApiUpdateInterfaceCustomDataRequest) XExternalsystem(xExternalsystem string) CreditCardApiUpdateInterfaceCustomDataRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiUpdateInterfaceCustomDataRequest) AcceptLanguage(acceptLanguage string) CreditCardApiUpdateInterfaceCustomDataRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiUpdateInterfaceCustomDataRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.UpdateInterfaceCustomDataExecute(r)
}

/*
UpdateInterfaceCustomData Operation to update hotel interface custom data.

Operation to update hotel interface custom data. <p><strong>OperationId:</strong>updateInterfaceCustomData</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceLogoId Unique ID of the hotel interface logo
 @param hotelId Unique ID of the hotel in OPERA
 @return CreditCardApiUpdateInterfaceCustomDataRequest
*/
func (a *CreditCardApiService) UpdateInterfaceCustomData(ctx context.Context, interfaceLogoId string, hotelId string) CreditCardApiUpdateInterfaceCustomDataRequest {
	return CreditCardApiUpdateInterfaceCustomDataRequest{
		ApiService: a,
		ctx: ctx,
		interfaceLogoId: interfaceLogoId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *CreditCardApiService) UpdateInterfaceCustomDataExecute(r CreditCardApiUpdateInterfaceCustomDataRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.UpdateInterfaceCustomData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceLogoId}/customData"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceLogoId"+"}", url.PathEscape(parameterValueToString(r.interfaceLogoId, "interfaceLogoId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceLogoId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceLogoId must have at least 1 elements")
	}
	if strlen(r.interfaceLogoId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceLogoId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.hotelInterfaceDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CreditCardApiValidateCreditCardTypeRequest struct {
	ctx context.Context
	ApiService *CreditCardApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationID *string
	reservationIDIdExtension *int32
	reservationIDIdContext *string
	reservationIDType *string
	paymentMethodDescription *string
	paymentMethodFolioView *int32
	paymentMethod *string
	attachCreditCardToProfile *bool
	cardHolderName *string
	cardNumber *string
	cardNumberLast4Digits *string
	cardNumberMasked *string
	cardNumberType *string
	cardType *string
	expirationDate *string
	expirationDateExpired *bool
	expirationDateMasked *string
	processing *string
	swiped *bool
	userDefinedCardType *string
	cardId *string
	cardIdExtension *int32
	cardIdContext *string
	cardIdType *string
	currentAuthorizedAmount *float32
	currentAuthorizedAmountCurrencyCode *string
	approvalAmountNeeded *float32
	approvalAmountNeededCurrencyCode *string
	balanceAmount *float32
	balanceCurrencyCode *string
	authorizationRuleCode *int32
	authorizationRuleAmount *float32
	authorizationRuleCurrencyCode *string
	authorizationRulePercent *float32
	emailFolio *bool
	emailFolioInfoId *string
	emailFolioInfoIDExtension *int32
	emailFolioInfoIDContext *string
	emailFolioInfoType *string
	emailFolioInfoCreateDateTime *string
	emailFolioInfoCreatorID *string
	emailFolioInfoEmailAddress *string
	emailFolioInfoEmailFormat *string
	emailFolioInfoLastModifierID *string
	emailFolioInfoLastModifyDateTime *string
	emailFolioInfoOrderSequence *float32
	emailFolioInfoPrimaryInd *bool
	emailFolioInfoPurgeDate *string
	emailEmailFolioInfoType *string
	emailFolioInfoTypeDescription *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CreditCardApiValidateCreditCardTypeRequest) Authorization(authorization string) CreditCardApiValidateCreditCardTypeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r CreditCardApiValidateCreditCardTypeRequest) XAppKey(xAppKey string) CreditCardApiValidateCreditCardTypeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CreditCardApiValidateCreditCardTypeRequest) XHotelid(xHotelid string) CreditCardApiValidateCreditCardTypeRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiValidateCreditCardTypeRequest) ReservationID(reservationID string) CreditCardApiValidateCreditCardTypeRequest {
	r.reservationID = &reservationID
	return r
}

// Additional identifying value assigned by the creating system.
func (r CreditCardApiValidateCreditCardTypeRequest) ReservationIDIdExtension(reservationIDIdExtension int32) CreditCardApiValidateCreditCardTypeRequest {
	r.reservationIDIdExtension = &reservationIDIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CreditCardApiValidateCreditCardTypeRequest) ReservationIDIdContext(reservationIDIdContext string) CreditCardApiValidateCreditCardTypeRequest {
	r.reservationIDIdContext = &reservationIDIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiValidateCreditCardTypeRequest) ReservationIDType(reservationIDType string) CreditCardApiValidateCreditCardTypeRequest {
	r.reservationIDType = &reservationIDType
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) PaymentMethodDescription(paymentMethodDescription string) CreditCardApiValidateCreditCardTypeRequest {
	r.paymentMethodDescription = &paymentMethodDescription
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) PaymentMethodFolioView(paymentMethodFolioView int32) CreditCardApiValidateCreditCardTypeRequest {
	r.paymentMethodFolioView = &paymentMethodFolioView
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) PaymentMethod(paymentMethod string) CreditCardApiValidateCreditCardTypeRequest {
	r.paymentMethod = &paymentMethod
	return r
}

// Attach the credit card to profile.
func (r CreditCardApiValidateCreditCardTypeRequest) AttachCreditCardToProfile(attachCreditCardToProfile bool) CreditCardApiValidateCreditCardTypeRequest {
	r.attachCreditCardToProfile = &attachCreditCardToProfile
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) CardHolderName(cardHolderName string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardHolderName = &cardHolderName
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) CardNumber(cardNumber string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardNumber = &cardNumber
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) CardNumberLast4Digits(cardNumberLast4Digits string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardNumberLast4Digits = &cardNumberLast4Digits
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) CardNumberMasked(cardNumberMasked string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardNumberMasked = &cardNumberMasked
	return r
}

// Simple type for indicating if credit card number is tokenized.
func (r CreditCardApiValidateCreditCardTypeRequest) CardNumberType(cardNumberType string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardNumberType = &cardNumberType
	return r
}

// This is required for Credit Card Payment Methods. This indicates the type of Credit Card associated with this payment method.
func (r CreditCardApiValidateCreditCardTypeRequest) CardType(cardType string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardType = &cardType
	return r
}

// Expiration date of the credit card
func (r CreditCardApiValidateCreditCardTypeRequest) ExpirationDate(expirationDate string) CreditCardApiValidateCreditCardTypeRequest {
	r.expirationDate = &expirationDate
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) ExpirationDateExpired(expirationDateExpired bool) CreditCardApiValidateCreditCardTypeRequest {
	r.expirationDateExpired = &expirationDateExpired
	return r
}

// Masked Expiration date of the credit card
func (r CreditCardApiValidateCreditCardTypeRequest) ExpirationDateMasked(expirationDateMasked string) CreditCardApiValidateCreditCardTypeRequest {
	r.expirationDateMasked = &expirationDateMasked
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) Processing(processing string) CreditCardApiValidateCreditCardTypeRequest {
	r.processing = &processing
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) Swiped(swiped bool) CreditCardApiValidateCreditCardTypeRequest {
	r.swiped = &swiped
	return r
}

// Indicates the user defined credit card type if credit card type from a defined list is not provided
func (r CreditCardApiValidateCreditCardTypeRequest) UserDefinedCardType(userDefinedCardType string) CreditCardApiValidateCreditCardTypeRequest {
	r.userDefinedCardType = &userDefinedCardType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiValidateCreditCardTypeRequest) CardId(cardId string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardId = &cardId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CreditCardApiValidateCreditCardTypeRequest) CardIdExtension(cardIdExtension int32) CreditCardApiValidateCreditCardTypeRequest {
	r.cardIdExtension = &cardIdExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CreditCardApiValidateCreditCardTypeRequest) CardIdContext(cardIdContext string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardIdContext = &cardIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiValidateCreditCardTypeRequest) CardIdType(cardIdType string) CreditCardApiValidateCreditCardTypeRequest {
	r.cardIdType = &cardIdType
	return r
}

// A monetary amount.
func (r CreditCardApiValidateCreditCardTypeRequest) CurrentAuthorizedAmount(currentAuthorizedAmount float32) CreditCardApiValidateCreditCardTypeRequest {
	r.currentAuthorizedAmount = &currentAuthorizedAmount
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r CreditCardApiValidateCreditCardTypeRequest) CurrentAuthorizedAmountCurrencyCode(currentAuthorizedAmountCurrencyCode string) CreditCardApiValidateCreditCardTypeRequest {
	r.currentAuthorizedAmountCurrencyCode = &currentAuthorizedAmountCurrencyCode
	return r
}

// A monetary amount.
func (r CreditCardApiValidateCreditCardTypeRequest) ApprovalAmountNeeded(approvalAmountNeeded float32) CreditCardApiValidateCreditCardTypeRequest {
	r.approvalAmountNeeded = &approvalAmountNeeded
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r CreditCardApiValidateCreditCardTypeRequest) ApprovalAmountNeededCurrencyCode(approvalAmountNeededCurrencyCode string) CreditCardApiValidateCreditCardTypeRequest {
	r.approvalAmountNeededCurrencyCode = &approvalAmountNeededCurrencyCode
	return r
}

// A monetary amount.
func (r CreditCardApiValidateCreditCardTypeRequest) BalanceAmount(balanceAmount float32) CreditCardApiValidateCreditCardTypeRequest {
	r.balanceAmount = &balanceAmount
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r CreditCardApiValidateCreditCardTypeRequest) BalanceCurrencyCode(balanceCurrencyCode string) CreditCardApiValidateCreditCardTypeRequest {
	r.balanceCurrencyCode = &balanceCurrencyCode
	return r
}

// The authorization rule code.
func (r CreditCardApiValidateCreditCardTypeRequest) AuthorizationRuleCode(authorizationRuleCode int32) CreditCardApiValidateCreditCardTypeRequest {
	r.authorizationRuleCode = &authorizationRuleCode
	return r
}

// A monetary amount.
func (r CreditCardApiValidateCreditCardTypeRequest) AuthorizationRuleAmount(authorizationRuleAmount float32) CreditCardApiValidateCreditCardTypeRequest {
	r.authorizationRuleAmount = &authorizationRuleAmount
	return r
}

// Provides a currency code to reflect the currency in which an amount may be expressed.
func (r CreditCardApiValidateCreditCardTypeRequest) AuthorizationRuleCurrencyCode(authorizationRuleCurrencyCode string) CreditCardApiValidateCreditCardTypeRequest {
	r.authorizationRuleCurrencyCode = &authorizationRuleCurrencyCode
	return r
}

// A percentage value if the authorization rule is percentage based.
func (r CreditCardApiValidateCreditCardTypeRequest) AuthorizationRulePercent(authorizationRulePercent float32) CreditCardApiValidateCreditCardTypeRequest {
	r.authorizationRulePercent = &authorizationRulePercent
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolio(emailFolio bool) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolio = &emailFolio
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoId(emailFolioInfoId string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoId = &emailFolioInfoId
	return r
}

// Additional identifying value assigned by the creating system.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoIDExtension(emailFolioInfoIDExtension int32) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoIDExtension = &emailFolioInfoIDExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoIDContext(emailFolioInfoIDContext string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoIDContext = &emailFolioInfoIDContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoType(emailFolioInfoType string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoType = &emailFolioInfoType
	return r
}

// Time stamp of the creation.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoCreateDateTime(emailFolioInfoCreateDateTime string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoCreateDateTime = &emailFolioInfoCreateDateTime
	return r
}

// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoCreatorID(emailFolioInfoCreatorID string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoCreatorID = &emailFolioInfoCreatorID
	return r
}

// Defines the e-mail address.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoEmailAddress(emailFolioInfoEmailAddress string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoEmailAddress = &emailFolioInfoEmailAddress
	return r
}

// Supported Email format.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoEmailFormat(emailFolioInfoEmailFormat string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoEmailFormat = &emailFolioInfoEmailFormat
	return r
}

// Identifies the last software system or person to modify a record.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoLastModifierID(emailFolioInfoLastModifierID string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoLastModifierID = &emailFolioInfoLastModifierID
	return r
}

// Time stamp of last modification.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoLastModifyDateTime(emailFolioInfoLastModifyDateTime string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoLastModifyDateTime = &emailFolioInfoLastModifyDateTime
	return r
}

// Display Order sequence.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoOrderSequence(emailFolioInfoOrderSequence float32) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoOrderSequence = &emailFolioInfoOrderSequence
	return r
}

// When true, indicates a primary information.
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoPrimaryInd(emailFolioInfoPrimaryInd bool) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoPrimaryInd = &emailFolioInfoPrimaryInd
	return r
}

// Date an item will be purged from a database (e.g., from a live database to an archive).
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoPurgeDate(emailFolioInfoPurgeDate string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoPurgeDate = &emailFolioInfoPurgeDate
	return r
}

// Defines the purpose of the e-mail address (e.g. personal, business, listserve).
func (r CreditCardApiValidateCreditCardTypeRequest) EmailEmailFolioInfoType(emailEmailFolioInfoType string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailEmailFolioInfoType = &emailEmailFolioInfoType
	return r
}

// Describes the Type code
func (r CreditCardApiValidateCreditCardTypeRequest) EmailFolioInfoTypeDescription(emailFolioInfoTypeDescription string) CreditCardApiValidateCreditCardTypeRequest {
	r.emailFolioInfoTypeDescription = &emailFolioInfoTypeDescription
	return r
}

// External system code.
func (r CreditCardApiValidateCreditCardTypeRequest) XExternalsystem(xExternalsystem string) CreditCardApiValidateCreditCardTypeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CreditCardApiValidateCreditCardTypeRequest) AcceptLanguage(acceptLanguage string) CreditCardApiValidateCreditCardTypeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CreditCardApiValidateCreditCardTypeRequest) Execute() (*CreditCardTypeValidationStatus, *http.Response, error) {
	return r.ApiService.ValidateCreditCardTypeExecute(r)
}

/*
ValidateCreditCardType Operation to validate CreditCardType.

 <p><strong>OperationId:</strong>validateCreditCardType</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CreditCardApiValidateCreditCardTypeRequest
*/
func (a *CreditCardApiService) ValidateCreditCardType(ctx context.Context) CreditCardApiValidateCreditCardTypeRequest {
	return CreditCardApiValidateCreditCardTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreditCardTypeValidationStatus
func (a *CreditCardApiService) ValidateCreditCardTypeExecute(r CreditCardApiValidateCreditCardTypeRequest) (*CreditCardTypeValidationStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreditCardTypeValidationStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CreditCardApiService.ValidateCreditCardType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/creditCardTypes/validate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.reservationID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationID", r.reservationID, "")
	}
	if r.reservationIDIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIDIdExtension", r.reservationIDIdExtension, "")
	}
	if r.reservationIDIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIDIdContext", r.reservationIDIdContext, "")
	}
	if r.reservationIDType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIDType", r.reservationIDType, "")
	}
	if r.paymentMethodDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethodDescription", r.paymentMethodDescription, "")
	}
	if r.paymentMethodFolioView != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethodFolioView", r.paymentMethodFolioView, "")
	}
	if r.paymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethod", r.paymentMethod, "")
	}
	if r.attachCreditCardToProfile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attachCreditCardToProfile", r.attachCreditCardToProfile, "")
	}
	if r.cardHolderName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardHolderName", r.cardHolderName, "")
	}
	if r.cardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumber", r.cardNumber, "")
	}
	if r.cardNumberLast4Digits != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumberLast4Digits", r.cardNumberLast4Digits, "")
	}
	if r.cardNumberMasked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumberMasked", r.cardNumberMasked, "")
	}
	if r.cardNumberType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardNumberType", r.cardNumberType, "")
	}
	if r.cardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardType", r.cardType, "")
	}
	if r.expirationDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expirationDate", r.expirationDate, "")
	}
	if r.expirationDateExpired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expirationDateExpired", r.expirationDateExpired, "")
	}
	if r.expirationDateMasked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expirationDateMasked", r.expirationDateMasked, "")
	}
	if r.processing != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "processing", r.processing, "")
	}
	if r.swiped != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "swiped", r.swiped, "")
	}
	if r.userDefinedCardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userDefinedCardType", r.userDefinedCardType, "")
	}
	if r.cardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardId", r.cardId, "")
	}
	if r.cardIdExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdExtension", r.cardIdExtension, "")
	}
	if r.cardIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdContext", r.cardIdContext, "")
	}
	if r.cardIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cardIdType", r.cardIdType, "")
	}
	if r.currentAuthorizedAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currentAuthorizedAmount", r.currentAuthorizedAmount, "")
	}
	if r.currentAuthorizedAmountCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currentAuthorizedAmountCurrencyCode", r.currentAuthorizedAmountCurrencyCode, "")
	}
	if r.approvalAmountNeeded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalAmountNeeded", r.approvalAmountNeeded, "")
	}
	if r.approvalAmountNeededCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalAmountNeededCurrencyCode", r.approvalAmountNeededCurrencyCode, "")
	}
	if r.balanceAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "balanceAmount", r.balanceAmount, "")
	}
	if r.balanceCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "balanceCurrencyCode", r.balanceCurrencyCode, "")
	}
	if r.authorizationRuleCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRuleCode", r.authorizationRuleCode, "")
	}
	if r.authorizationRuleAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRuleAmount", r.authorizationRuleAmount, "")
	}
	if r.authorizationRuleCurrencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRuleCurrencyCode", r.authorizationRuleCurrencyCode, "")
	}
	if r.authorizationRulePercent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authorizationRulePercent", r.authorizationRulePercent, "")
	}
	if r.emailFolio != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolio", r.emailFolio, "")
	}
	if r.emailFolioInfoId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoId", r.emailFolioInfoId, "")
	}
	if r.emailFolioInfoIDExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoIDExtension", r.emailFolioInfoIDExtension, "")
	}
	if r.emailFolioInfoIDContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoIDContext", r.emailFolioInfoIDContext, "")
	}
	if r.emailFolioInfoType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoType", r.emailFolioInfoType, "")
	}
	if r.emailFolioInfoCreateDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoCreateDateTime", r.emailFolioInfoCreateDateTime, "")
	}
	if r.emailFolioInfoCreatorID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoCreatorID", r.emailFolioInfoCreatorID, "")
	}
	if r.emailFolioInfoEmailAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoEmailAddress", r.emailFolioInfoEmailAddress, "")
	}
	if r.emailFolioInfoEmailFormat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoEmailFormat", r.emailFolioInfoEmailFormat, "")
	}
	if r.emailFolioInfoLastModifierID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoLastModifierID", r.emailFolioInfoLastModifierID, "")
	}
	if r.emailFolioInfoLastModifyDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoLastModifyDateTime", r.emailFolioInfoLastModifyDateTime, "")
	}
	if r.emailFolioInfoOrderSequence != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoOrderSequence", r.emailFolioInfoOrderSequence, "")
	}
	if r.emailFolioInfoPrimaryInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoPrimaryInd", r.emailFolioInfoPrimaryInd, "")
	}
	if r.emailFolioInfoPurgeDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoPurgeDate", r.emailFolioInfoPurgeDate, "")
	}
	if r.emailEmailFolioInfoType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailEmailFolioInfoType", r.emailEmailFolioInfoType, "")
	}
	if r.emailFolioInfoTypeDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailFolioInfoTypeDescription", r.emailFolioInfoTypeDescription, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
