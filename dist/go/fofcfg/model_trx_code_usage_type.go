/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TrxCodeUsageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrxCodeUsageType{}

// TrxCodeUsageType Details about the element on which the transaction code is being used.
type TrxCodeUsageType struct {
	// Name of the element type on which the transaction code is being used.
	UsageName *string `json:"usageName,omitempty"`
	// Specific codes of the element type on which the transaction code is being used.
	UsageDetail *string `json:"usageDetail,omitempty"`
}

// NewTrxCodeUsageType instantiates a new TrxCodeUsageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrxCodeUsageType() *TrxCodeUsageType {
	this := TrxCodeUsageType{}
	return &this
}

// NewTrxCodeUsageTypeWithDefaults instantiates a new TrxCodeUsageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrxCodeUsageTypeWithDefaults() *TrxCodeUsageType {
	this := TrxCodeUsageType{}
	return &this
}

// GetUsageName returns the UsageName field value if set, zero value otherwise.
func (o *TrxCodeUsageType) GetUsageName() string {
	if o == nil || IsNil(o.UsageName) {
		var ret string
		return ret
	}
	return *o.UsageName
}

// GetUsageNameOk returns a tuple with the UsageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeUsageType) GetUsageNameOk() (*string, bool) {
	if o == nil || IsNil(o.UsageName) {
		return nil, false
	}
	return o.UsageName, true
}

// HasUsageName returns a boolean if a field has been set.
func (o *TrxCodeUsageType) HasUsageName() bool {
	if o != nil && !IsNil(o.UsageName) {
		return true
	}

	return false
}

// SetUsageName gets a reference to the given string and assigns it to the UsageName field.
func (o *TrxCodeUsageType) SetUsageName(v string) {
	o.UsageName = &v
}

// GetUsageDetail returns the UsageDetail field value if set, zero value otherwise.
func (o *TrxCodeUsageType) GetUsageDetail() string {
	if o == nil || IsNil(o.UsageDetail) {
		var ret string
		return ret
	}
	return *o.UsageDetail
}

// GetUsageDetailOk returns a tuple with the UsageDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeUsageType) GetUsageDetailOk() (*string, bool) {
	if o == nil || IsNil(o.UsageDetail) {
		return nil, false
	}
	return o.UsageDetail, true
}

// HasUsageDetail returns a boolean if a field has been set.
func (o *TrxCodeUsageType) HasUsageDetail() bool {
	if o != nil && !IsNil(o.UsageDetail) {
		return true
	}

	return false
}

// SetUsageDetail gets a reference to the given string and assigns it to the UsageDetail field.
func (o *TrxCodeUsageType) SetUsageDetail(v string) {
	o.UsageDetail = &v
}

func (o TrxCodeUsageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrxCodeUsageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UsageName) {
		toSerialize["usageName"] = o.UsageName
	}
	if !IsNil(o.UsageDetail) {
		toSerialize["usageDetail"] = o.UsageDetail
	}
	return toSerialize, nil
}

type NullableTrxCodeUsageType struct {
	value *TrxCodeUsageType
	isSet bool
}

func (v NullableTrxCodeUsageType) Get() *TrxCodeUsageType {
	return v.value
}

func (v *NullableTrxCodeUsageType) Set(val *TrxCodeUsageType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrxCodeUsageType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrxCodeUsageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrxCodeUsageType(val *TrxCodeUsageType) *NullableTrxCodeUsageType {
	return &NullableTrxCodeUsageType{value: val, isSet: true}
}

func (v NullableTrxCodeUsageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrxCodeUsageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


