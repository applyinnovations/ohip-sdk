/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// MaskDialNumberType Mask the dialled digits as per the room configuration.
type MaskDialNumberType string

// List of maskDialNumberType
const (
	MASKDIALNUMBERTYPE_NO_MASKING MaskDialNumberType = "NoMasking"
	MASKDIALNUMBERTYPE_MASK_LAST2_DIGITS MaskDialNumberType = "MaskLast2Digits"
	MASKDIALNUMBERTYPE_MASK_LAST4_DIGITS MaskDialNumberType = "MaskLast4Digits"
	MASKDIALNUMBERTYPE_MASK4_DIGITS_LEAVE_LAST2_INTACT MaskDialNumberType = "Mask4DigitsLeaveLast2Intact"
	MASKDIALNUMBERTYPE_MASK_ALL_EXCEPT_FIRST2 MaskDialNumberType = "MaskAllExceptFirst2"
	MASKDIALNUMBERTYPE_MASK_ALL MaskDialNumberType = "MaskAll"
	MASKDIALNUMBERTYPE_MASKING_PER_ROOM MaskDialNumberType = "MaskingPerRoom"
)

// All allowed values of MaskDialNumberType enum
var AllowedMaskDialNumberTypeEnumValues = []MaskDialNumberType{
	"NoMasking",
	"MaskLast2Digits",
	"MaskLast4Digits",
	"Mask4DigitsLeaveLast2Intact",
	"MaskAllExceptFirst2",
	"MaskAll",
	"MaskingPerRoom",
}

func (v *MaskDialNumberType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MaskDialNumberType(value)
	for _, existing := range AllowedMaskDialNumberTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MaskDialNumberType", value)
}

// NewMaskDialNumberTypeFromValue returns a pointer to a valid MaskDialNumberType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMaskDialNumberTypeFromValue(v string) (*MaskDialNumberType, error) {
	ev := MaskDialNumberType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MaskDialNumberType: valid values are %v", v, AllowedMaskDialNumberTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MaskDialNumberType) IsValid() bool {
	for _, existing := range AllowedMaskDialNumberTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to maskDialNumberType value
func (v MaskDialNumberType) Ptr() *MaskDialNumberType {
	return &v
}

type NullableMaskDialNumberType struct {
	value *MaskDialNumberType
	isSet bool
}

func (v NullableMaskDialNumberType) Get() *MaskDialNumberType {
	return v.value
}

func (v *NullableMaskDialNumberType) Set(val *MaskDialNumberType) {
	v.value = val
	v.isSet = true
}

func (v NullableMaskDialNumberType) IsSet() bool {
	return v.isSet
}

func (v *NullableMaskDialNumberType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaskDialNumberType(val *MaskDialNumberType) *NullableMaskDialNumberType {
	return &NullableMaskDialNumberType{value: val, isSet: true}
}

func (v NullableMaskDialNumberType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaskDialNumberType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

