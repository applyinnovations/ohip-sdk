/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the PaymentMethodType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMethodType{}

// PaymentMethodType Provides information about the payment methods. CreditCardCode and CreditCardType help to determine if EFTs are allowed.
type PaymentMethodType struct {
	// Description of the payment method.
	Description *string `json:"description,omitempty"`
	PaymentCard *PaymentCardType `json:"paymentCard,omitempty"`
	PaymentMethodTransactionInfo *PaymentMethodTransactionInfoType `json:"paymentMethodTransactionInfo,omitempty"`
	PaymentMethodUsage *PaymentMethodUsageType `json:"paymentMethodUsage,omitempty"`
	CreditLimit *CreditLimitType `json:"creditLimit,omitempty"`
	// Property from which the payment method belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Defines the unique identifier for this payment method.
	PaymentMethod *string `json:"paymentMethod,omitempty"`
	CalculatePoints *CalculatePointsType `json:"calculatePoints,omitempty"`
	// Indicates whether the payment method is inactive or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Display Order sequence.
	OrderSequence *float32 `json:"orderSequence,omitempty"`
}

// NewPaymentMethodType instantiates a new PaymentMethodType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodType() *PaymentMethodType {
	this := PaymentMethodType{}
	return &this
}

// NewPaymentMethodTypeWithDefaults instantiates a new PaymentMethodType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodTypeWithDefaults() *PaymentMethodType {
	this := PaymentMethodType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PaymentMethodType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentMethodType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PaymentMethodType) SetDescription(v string) {
	o.Description = &v
}

// GetPaymentCard returns the PaymentCard field value if set, zero value otherwise.
func (o *PaymentMethodType) GetPaymentCard() PaymentCardType {
	if o == nil || IsNil(o.PaymentCard) {
		var ret PaymentCardType
		return ret
	}
	return *o.PaymentCard
}

// GetPaymentCardOk returns a tuple with the PaymentCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetPaymentCardOk() (*PaymentCardType, bool) {
	if o == nil || IsNil(o.PaymentCard) {
		return nil, false
	}
	return o.PaymentCard, true
}

// HasPaymentCard returns a boolean if a field has been set.
func (o *PaymentMethodType) HasPaymentCard() bool {
	if o != nil && !IsNil(o.PaymentCard) {
		return true
	}

	return false
}

// SetPaymentCard gets a reference to the given PaymentCardType and assigns it to the PaymentCard field.
func (o *PaymentMethodType) SetPaymentCard(v PaymentCardType) {
	o.PaymentCard = &v
}

// GetPaymentMethodTransactionInfo returns the PaymentMethodTransactionInfo field value if set, zero value otherwise.
func (o *PaymentMethodType) GetPaymentMethodTransactionInfo() PaymentMethodTransactionInfoType {
	if o == nil || IsNil(o.PaymentMethodTransactionInfo) {
		var ret PaymentMethodTransactionInfoType
		return ret
	}
	return *o.PaymentMethodTransactionInfo
}

// GetPaymentMethodTransactionInfoOk returns a tuple with the PaymentMethodTransactionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetPaymentMethodTransactionInfoOk() (*PaymentMethodTransactionInfoType, bool) {
	if o == nil || IsNil(o.PaymentMethodTransactionInfo) {
		return nil, false
	}
	return o.PaymentMethodTransactionInfo, true
}

// HasPaymentMethodTransactionInfo returns a boolean if a field has been set.
func (o *PaymentMethodType) HasPaymentMethodTransactionInfo() bool {
	if o != nil && !IsNil(o.PaymentMethodTransactionInfo) {
		return true
	}

	return false
}

// SetPaymentMethodTransactionInfo gets a reference to the given PaymentMethodTransactionInfoType and assigns it to the PaymentMethodTransactionInfo field.
func (o *PaymentMethodType) SetPaymentMethodTransactionInfo(v PaymentMethodTransactionInfoType) {
	o.PaymentMethodTransactionInfo = &v
}

// GetPaymentMethodUsage returns the PaymentMethodUsage field value if set, zero value otherwise.
func (o *PaymentMethodType) GetPaymentMethodUsage() PaymentMethodUsageType {
	if o == nil || IsNil(o.PaymentMethodUsage) {
		var ret PaymentMethodUsageType
		return ret
	}
	return *o.PaymentMethodUsage
}

// GetPaymentMethodUsageOk returns a tuple with the PaymentMethodUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetPaymentMethodUsageOk() (*PaymentMethodUsageType, bool) {
	if o == nil || IsNil(o.PaymentMethodUsage) {
		return nil, false
	}
	return o.PaymentMethodUsage, true
}

// HasPaymentMethodUsage returns a boolean if a field has been set.
func (o *PaymentMethodType) HasPaymentMethodUsage() bool {
	if o != nil && !IsNil(o.PaymentMethodUsage) {
		return true
	}

	return false
}

// SetPaymentMethodUsage gets a reference to the given PaymentMethodUsageType and assigns it to the PaymentMethodUsage field.
func (o *PaymentMethodType) SetPaymentMethodUsage(v PaymentMethodUsageType) {
	o.PaymentMethodUsage = &v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *PaymentMethodType) GetCreditLimit() CreditLimitType {
	if o == nil || IsNil(o.CreditLimit) {
		var ret CreditLimitType
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetCreditLimitOk() (*CreditLimitType, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *PaymentMethodType) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given CreditLimitType and assigns it to the CreditLimit field.
func (o *PaymentMethodType) SetCreditLimit(v CreditLimitType) {
	o.CreditLimit = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *PaymentMethodType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *PaymentMethodType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *PaymentMethodType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *PaymentMethodType) GetPaymentMethod() string {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret string
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetPaymentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *PaymentMethodType) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given string and assigns it to the PaymentMethod field.
func (o *PaymentMethodType) SetPaymentMethod(v string) {
	o.PaymentMethod = &v
}

// GetCalculatePoints returns the CalculatePoints field value if set, zero value otherwise.
func (o *PaymentMethodType) GetCalculatePoints() CalculatePointsType {
	if o == nil || IsNil(o.CalculatePoints) {
		var ret CalculatePointsType
		return ret
	}
	return *o.CalculatePoints
}

// GetCalculatePointsOk returns a tuple with the CalculatePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetCalculatePointsOk() (*CalculatePointsType, bool) {
	if o == nil || IsNil(o.CalculatePoints) {
		return nil, false
	}
	return o.CalculatePoints, true
}

// HasCalculatePoints returns a boolean if a field has been set.
func (o *PaymentMethodType) HasCalculatePoints() bool {
	if o != nil && !IsNil(o.CalculatePoints) {
		return true
	}

	return false
}

// SetCalculatePoints gets a reference to the given CalculatePointsType and assigns it to the CalculatePoints field.
func (o *PaymentMethodType) SetCalculatePoints(v CalculatePointsType) {
	o.CalculatePoints = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *PaymentMethodType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *PaymentMethodType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *PaymentMethodType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetOrderSequence returns the OrderSequence field value if set, zero value otherwise.
func (o *PaymentMethodType) GetOrderSequence() float32 {
	if o == nil || IsNil(o.OrderSequence) {
		var ret float32
		return ret
	}
	return *o.OrderSequence
}

// GetOrderSequenceOk returns a tuple with the OrderSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodType) GetOrderSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.OrderSequence) {
		return nil, false
	}
	return o.OrderSequence, true
}

// HasOrderSequence returns a boolean if a field has been set.
func (o *PaymentMethodType) HasOrderSequence() bool {
	if o != nil && !IsNil(o.OrderSequence) {
		return true
	}

	return false
}

// SetOrderSequence gets a reference to the given float32 and assigns it to the OrderSequence field.
func (o *PaymentMethodType) SetOrderSequence(v float32) {
	o.OrderSequence = &v
}

func (o PaymentMethodType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethodType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.PaymentCard) {
		toSerialize["paymentCard"] = o.PaymentCard
	}
	if !IsNil(o.PaymentMethodTransactionInfo) {
		toSerialize["paymentMethodTransactionInfo"] = o.PaymentMethodTransactionInfo
	}
	if !IsNil(o.PaymentMethodUsage) {
		toSerialize["paymentMethodUsage"] = o.PaymentMethodUsage
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	if !IsNil(o.CalculatePoints) {
		toSerialize["calculatePoints"] = o.CalculatePoints
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.OrderSequence) {
		toSerialize["orderSequence"] = o.OrderSequence
	}
	return toSerialize, nil
}

type NullablePaymentMethodType struct {
	value *PaymentMethodType
	isSet bool
}

func (v NullablePaymentMethodType) Get() *PaymentMethodType {
	return v.value
}

func (v *NullablePaymentMethodType) Set(val *PaymentMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodType(val *PaymentMethodType) *NullablePaymentMethodType {
	return &NullablePaymentMethodType{value: val, isSet: true}
}

func (v NullablePaymentMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


