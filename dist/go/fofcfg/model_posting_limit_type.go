/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// PostingLimitType Simple Type for Posting Limit Types.
type PostingLimitType string

// List of postingLimitType
const (
	POSTINGLIMITTYPE_DAILY PostingLimitType = "Daily"
	POSTINGLIMITTYPE_MONTHLY PostingLimitType = "Monthly"
	POSTINGLIMITTYPE_PER_TRANSACTION PostingLimitType = "PerTransaction"
)

// All allowed values of PostingLimitType enum
var AllowedPostingLimitTypeEnumValues = []PostingLimitType{
	"Daily",
	"Monthly",
	"PerTransaction",
}

func (v *PostingLimitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostingLimitType(value)
	for _, existing := range AllowedPostingLimitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostingLimitType", value)
}

// NewPostingLimitTypeFromValue returns a pointer to a valid PostingLimitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostingLimitTypeFromValue(v string) (*PostingLimitType, error) {
	ev := PostingLimitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostingLimitType: valid values are %v", v, AllowedPostingLimitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostingLimitType) IsValid() bool {
	for _, existing := range AllowedPostingLimitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to postingLimitType value
func (v PostingLimitType) Ptr() *PostingLimitType {
	return &v
}

type NullablePostingLimitType struct {
	value *PostingLimitType
	isSet bool
}

func (v NullablePostingLimitType) Get() *PostingLimitType {
	return v.value
}

func (v *NullablePostingLimitType) Set(val *PostingLimitType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostingLimitType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostingLimitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostingLimitType(val *PostingLimitType) *NullablePostingLimitType {
	return &NullablePostingLimitType{value: val, isSet: true}
}

func (v NullablePostingLimitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostingLimitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

