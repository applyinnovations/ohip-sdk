/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the GLMappingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GLMappingType{}

// GLMappingType Gl mapping for transaction codes specific to hotels like Hilton.
type GLMappingType struct {
	// Hilton Department Group Item Id
	ItemId *string `json:"itemId,omitempty"`
	// Hilton Department Group Code
	DepartmentCode *string `json:"departmentCode,omitempty"`
	// Hilton GL Account code Description
	AccountCode *string `json:"accountCode,omitempty"`
	// Hilton GL Account code Description
	AccountDescription *string `json:"accountDescription,omitempty"`
	// Hilton GL Account Currency Code
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Hilton GL Account StatCode
	StatCode *string `json:"statCode,omitempty"`
	// Hilton Product Code
	ProductCode *string `json:"productCode,omitempty"`
	// Hilton GL Charge Category Code
	ChargeCode *string `json:"chargeCode,omitempty"`
	// Hilton Account Category Code
	AccountingCategory *string `json:"accountingCategory,omitempty"`
}

// NewGLMappingType instantiates a new GLMappingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGLMappingType() *GLMappingType {
	this := GLMappingType{}
	return &this
}

// NewGLMappingTypeWithDefaults instantiates a new GLMappingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGLMappingTypeWithDefaults() *GLMappingType {
	this := GLMappingType{}
	return &this
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *GLMappingType) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *GLMappingType) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *GLMappingType) SetItemId(v string) {
	o.ItemId = &v
}

// GetDepartmentCode returns the DepartmentCode field value if set, zero value otherwise.
func (o *GLMappingType) GetDepartmentCode() string {
	if o == nil || IsNil(o.DepartmentCode) {
		var ret string
		return ret
	}
	return *o.DepartmentCode
}

// GetDepartmentCodeOk returns a tuple with the DepartmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetDepartmentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DepartmentCode) {
		return nil, false
	}
	return o.DepartmentCode, true
}

// HasDepartmentCode returns a boolean if a field has been set.
func (o *GLMappingType) HasDepartmentCode() bool {
	if o != nil && !IsNil(o.DepartmentCode) {
		return true
	}

	return false
}

// SetDepartmentCode gets a reference to the given string and assigns it to the DepartmentCode field.
func (o *GLMappingType) SetDepartmentCode(v string) {
	o.DepartmentCode = &v
}

// GetAccountCode returns the AccountCode field value if set, zero value otherwise.
func (o *GLMappingType) GetAccountCode() string {
	if o == nil || IsNil(o.AccountCode) {
		var ret string
		return ret
	}
	return *o.AccountCode
}

// GetAccountCodeOk returns a tuple with the AccountCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetAccountCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountCode) {
		return nil, false
	}
	return o.AccountCode, true
}

// HasAccountCode returns a boolean if a field has been set.
func (o *GLMappingType) HasAccountCode() bool {
	if o != nil && !IsNil(o.AccountCode) {
		return true
	}

	return false
}

// SetAccountCode gets a reference to the given string and assigns it to the AccountCode field.
func (o *GLMappingType) SetAccountCode(v string) {
	o.AccountCode = &v
}

// GetAccountDescription returns the AccountDescription field value if set, zero value otherwise.
func (o *GLMappingType) GetAccountDescription() string {
	if o == nil || IsNil(o.AccountDescription) {
		var ret string
		return ret
	}
	return *o.AccountDescription
}

// GetAccountDescriptionOk returns a tuple with the AccountDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetAccountDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.AccountDescription) {
		return nil, false
	}
	return o.AccountDescription, true
}

// HasAccountDescription returns a boolean if a field has been set.
func (o *GLMappingType) HasAccountDescription() bool {
	if o != nil && !IsNil(o.AccountDescription) {
		return true
	}

	return false
}

// SetAccountDescription gets a reference to the given string and assigns it to the AccountDescription field.
func (o *GLMappingType) SetAccountDescription(v string) {
	o.AccountDescription = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *GLMappingType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *GLMappingType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *GLMappingType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetStatCode returns the StatCode field value if set, zero value otherwise.
func (o *GLMappingType) GetStatCode() string {
	if o == nil || IsNil(o.StatCode) {
		var ret string
		return ret
	}
	return *o.StatCode
}

// GetStatCodeOk returns a tuple with the StatCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetStatCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatCode) {
		return nil, false
	}
	return o.StatCode, true
}

// HasStatCode returns a boolean if a field has been set.
func (o *GLMappingType) HasStatCode() bool {
	if o != nil && !IsNil(o.StatCode) {
		return true
	}

	return false
}

// SetStatCode gets a reference to the given string and assigns it to the StatCode field.
func (o *GLMappingType) SetStatCode(v string) {
	o.StatCode = &v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *GLMappingType) GetProductCode() string {
	if o == nil || IsNil(o.ProductCode) {
		var ret string
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetProductCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCode) {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *GLMappingType) HasProductCode() bool {
	if o != nil && !IsNil(o.ProductCode) {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given string and assigns it to the ProductCode field.
func (o *GLMappingType) SetProductCode(v string) {
	o.ProductCode = &v
}

// GetChargeCode returns the ChargeCode field value if set, zero value otherwise.
func (o *GLMappingType) GetChargeCode() string {
	if o == nil || IsNil(o.ChargeCode) {
		var ret string
		return ret
	}
	return *o.ChargeCode
}

// GetChargeCodeOk returns a tuple with the ChargeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetChargeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChargeCode) {
		return nil, false
	}
	return o.ChargeCode, true
}

// HasChargeCode returns a boolean if a field has been set.
func (o *GLMappingType) HasChargeCode() bool {
	if o != nil && !IsNil(o.ChargeCode) {
		return true
	}

	return false
}

// SetChargeCode gets a reference to the given string and assigns it to the ChargeCode field.
func (o *GLMappingType) SetChargeCode(v string) {
	o.ChargeCode = &v
}

// GetAccountingCategory returns the AccountingCategory field value if set, zero value otherwise.
func (o *GLMappingType) GetAccountingCategory() string {
	if o == nil || IsNil(o.AccountingCategory) {
		var ret string
		return ret
	}
	return *o.AccountingCategory
}

// GetAccountingCategoryOk returns a tuple with the AccountingCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GLMappingType) GetAccountingCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.AccountingCategory) {
		return nil, false
	}
	return o.AccountingCategory, true
}

// HasAccountingCategory returns a boolean if a field has been set.
func (o *GLMappingType) HasAccountingCategory() bool {
	if o != nil && !IsNil(o.AccountingCategory) {
		return true
	}

	return false
}

// SetAccountingCategory gets a reference to the given string and assigns it to the AccountingCategory field.
func (o *GLMappingType) SetAccountingCategory(v string) {
	o.AccountingCategory = &v
}

func (o GLMappingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GLMappingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.DepartmentCode) {
		toSerialize["departmentCode"] = o.DepartmentCode
	}
	if !IsNil(o.AccountCode) {
		toSerialize["accountCode"] = o.AccountCode
	}
	if !IsNil(o.AccountDescription) {
		toSerialize["accountDescription"] = o.AccountDescription
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.StatCode) {
		toSerialize["statCode"] = o.StatCode
	}
	if !IsNil(o.ProductCode) {
		toSerialize["productCode"] = o.ProductCode
	}
	if !IsNil(o.ChargeCode) {
		toSerialize["chargeCode"] = o.ChargeCode
	}
	if !IsNil(o.AccountingCategory) {
		toSerialize["accountingCategory"] = o.AccountingCategory
	}
	return toSerialize, nil
}

type NullableGLMappingType struct {
	value *GLMappingType
	isSet bool
}

func (v NullableGLMappingType) Get() *GLMappingType {
	return v.value
}

func (v *NullableGLMappingType) Set(val *GLMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableGLMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableGLMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGLMappingType(val *GLMappingType) *NullableGLMappingType {
	return &NullableGLMappingType{value: val, isSet: true}
}

func (v NullableGLMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGLMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


