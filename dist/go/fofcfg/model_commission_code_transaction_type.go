/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CommissionCodeTransactionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionCodeTransactionType{}

// CommissionCodeTransactionType Revenue based commission details.
type CommissionCodeTransactionType struct {
	BasedOnNetAmount *bool `json:"basedOnNetAmount,omitempty"`
	CommissionPaidDetails *CommissionPaidDetailsType `json:"commissionPaidDetails,omitempty"`
	TransactionCode *string `json:"transactionCode,omitempty"`
	TransactionCodeDesc *string `json:"transactionCodeDesc,omitempty"`
}

// NewCommissionCodeTransactionType instantiates a new CommissionCodeTransactionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionCodeTransactionType() *CommissionCodeTransactionType {
	this := CommissionCodeTransactionType{}
	return &this
}

// NewCommissionCodeTransactionTypeWithDefaults instantiates a new CommissionCodeTransactionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionCodeTransactionTypeWithDefaults() *CommissionCodeTransactionType {
	this := CommissionCodeTransactionType{}
	return &this
}

// GetBasedOnNetAmount returns the BasedOnNetAmount field value if set, zero value otherwise.
func (o *CommissionCodeTransactionType) GetBasedOnNetAmount() bool {
	if o == nil || IsNil(o.BasedOnNetAmount) {
		var ret bool
		return ret
	}
	return *o.BasedOnNetAmount
}

// GetBasedOnNetAmountOk returns a tuple with the BasedOnNetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeTransactionType) GetBasedOnNetAmountOk() (*bool, bool) {
	if o == nil || IsNil(o.BasedOnNetAmount) {
		return nil, false
	}
	return o.BasedOnNetAmount, true
}

// HasBasedOnNetAmount returns a boolean if a field has been set.
func (o *CommissionCodeTransactionType) HasBasedOnNetAmount() bool {
	if o != nil && !IsNil(o.BasedOnNetAmount) {
		return true
	}

	return false
}

// SetBasedOnNetAmount gets a reference to the given bool and assigns it to the BasedOnNetAmount field.
func (o *CommissionCodeTransactionType) SetBasedOnNetAmount(v bool) {
	o.BasedOnNetAmount = &v
}

// GetCommissionPaidDetails returns the CommissionPaidDetails field value if set, zero value otherwise.
func (o *CommissionCodeTransactionType) GetCommissionPaidDetails() CommissionPaidDetailsType {
	if o == nil || IsNil(o.CommissionPaidDetails) {
		var ret CommissionPaidDetailsType
		return ret
	}
	return *o.CommissionPaidDetails
}

// GetCommissionPaidDetailsOk returns a tuple with the CommissionPaidDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeTransactionType) GetCommissionPaidDetailsOk() (*CommissionPaidDetailsType, bool) {
	if o == nil || IsNil(o.CommissionPaidDetails) {
		return nil, false
	}
	return o.CommissionPaidDetails, true
}

// HasCommissionPaidDetails returns a boolean if a field has been set.
func (o *CommissionCodeTransactionType) HasCommissionPaidDetails() bool {
	if o != nil && !IsNil(o.CommissionPaidDetails) {
		return true
	}

	return false
}

// SetCommissionPaidDetails gets a reference to the given CommissionPaidDetailsType and assigns it to the CommissionPaidDetails field.
func (o *CommissionCodeTransactionType) SetCommissionPaidDetails(v CommissionPaidDetailsType) {
	o.CommissionPaidDetails = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *CommissionCodeTransactionType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeTransactionType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *CommissionCodeTransactionType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *CommissionCodeTransactionType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionCodeDesc returns the TransactionCodeDesc field value if set, zero value otherwise.
func (o *CommissionCodeTransactionType) GetTransactionCodeDesc() string {
	if o == nil || IsNil(o.TransactionCodeDesc) {
		var ret string
		return ret
	}
	return *o.TransactionCodeDesc
}

// GetTransactionCodeDescOk returns a tuple with the TransactionCodeDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeTransactionType) GetTransactionCodeDescOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCodeDesc) {
		return nil, false
	}
	return o.TransactionCodeDesc, true
}

// HasTransactionCodeDesc returns a boolean if a field has been set.
func (o *CommissionCodeTransactionType) HasTransactionCodeDesc() bool {
	if o != nil && !IsNil(o.TransactionCodeDesc) {
		return true
	}

	return false
}

// SetTransactionCodeDesc gets a reference to the given string and assigns it to the TransactionCodeDesc field.
func (o *CommissionCodeTransactionType) SetTransactionCodeDesc(v string) {
	o.TransactionCodeDesc = &v
}

func (o CommissionCodeTransactionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionCodeTransactionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BasedOnNetAmount) {
		toSerialize["basedOnNetAmount"] = o.BasedOnNetAmount
	}
	if !IsNil(o.CommissionPaidDetails) {
		toSerialize["commissionPaidDetails"] = o.CommissionPaidDetails
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionCodeDesc) {
		toSerialize["transactionCodeDesc"] = o.TransactionCodeDesc
	}
	return toSerialize, nil
}

type NullableCommissionCodeTransactionType struct {
	value *CommissionCodeTransactionType
	isSet bool
}

func (v NullableCommissionCodeTransactionType) Get() *CommissionCodeTransactionType {
	return v.value
}

func (v *NullableCommissionCodeTransactionType) Set(val *CommissionCodeTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionCodeTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionCodeTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionCodeTransactionType(val *CommissionCodeTransactionType) *NullableCommissionCodeTransactionType {
	return &NullableCommissionCodeTransactionType{value: val, isSet: true}
}

func (v NullableCommissionCodeTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionCodeTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


