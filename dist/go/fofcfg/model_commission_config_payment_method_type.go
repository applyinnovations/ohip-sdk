/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CommissionConfigPaymentMethodType This value of the enum is used for Payment methods
type CommissionConfigPaymentMethodType string

// List of commissionConfigPaymentMethodType
const (
	COMMISSIONCONFIGPAYMENTMETHODTYPE_CHECK CommissionConfigPaymentMethodType = "Check"
	COMMISSIONCONFIGPAYMENTMETHODTYPE_CENTRALLY_PAID CommissionConfigPaymentMethodType = "CentrallyPaid"
	COMMISSIONCONFIGPAYMENTMETHODTYPE_EFT CommissionConfigPaymentMethodType = "Eft"
)

// All allowed values of CommissionConfigPaymentMethodType enum
var AllowedCommissionConfigPaymentMethodTypeEnumValues = []CommissionConfigPaymentMethodType{
	"Check",
	"CentrallyPaid",
	"Eft",
}

func (v *CommissionConfigPaymentMethodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommissionConfigPaymentMethodType(value)
	for _, existing := range AllowedCommissionConfigPaymentMethodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommissionConfigPaymentMethodType", value)
}

// NewCommissionConfigPaymentMethodTypeFromValue returns a pointer to a valid CommissionConfigPaymentMethodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionConfigPaymentMethodTypeFromValue(v string) (*CommissionConfigPaymentMethodType, error) {
	ev := CommissionConfigPaymentMethodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionConfigPaymentMethodType: valid values are %v", v, AllowedCommissionConfigPaymentMethodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionConfigPaymentMethodType) IsValid() bool {
	for _, existing := range AllowedCommissionConfigPaymentMethodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to commissionConfigPaymentMethodType value
func (v CommissionConfigPaymentMethodType) Ptr() *CommissionConfigPaymentMethodType {
	return &v
}

type NullableCommissionConfigPaymentMethodType struct {
	value *CommissionConfigPaymentMethodType
	isSet bool
}

func (v NullableCommissionConfigPaymentMethodType) Get() *CommissionConfigPaymentMethodType {
	return v.value
}

func (v *NullableCommissionConfigPaymentMethodType) Set(val *CommissionConfigPaymentMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionConfigPaymentMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionConfigPaymentMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionConfigPaymentMethodType(val *CommissionConfigPaymentMethodType) *NullableCommissionConfigPaymentMethodType {
	return &NullableCommissionConfigPaymentMethodType{value: val, isSet: true}
}

func (v NullableCommissionConfigPaymentMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionConfigPaymentMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

