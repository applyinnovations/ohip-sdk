/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the AdjustmentCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdjustmentCodeType{}

// AdjustmentCodeType Provides information about Adjustment Codes.
type AdjustmentCodeType struct {
	// Code of the Hotel.
	HotelId *string `json:"hotelId,omitempty"`
	// Adjustment Reason Code
	Code *string `json:"code,omitempty"`
	CodeType *AdjustmentReasonCodeType `json:"codeType,omitempty"`
	// Adjustment Reason Description
	Description *string `json:"description,omitempty"`
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	// BIR Guest Type in Adjustment Codes.
	BIRGuest *string `json:"bIRGuest,omitempty"`
	AmountOrPercentageFlag *AmountOrPercentage `json:"amountOrPercentageFlag,omitempty"`
	ManagedBy *ManagedByOptions `json:"managedBy,omitempty"`
}

// NewAdjustmentCodeType instantiates a new AdjustmentCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdjustmentCodeType() *AdjustmentCodeType {
	this := AdjustmentCodeType{}
	return &this
}

// NewAdjustmentCodeTypeWithDefaults instantiates a new AdjustmentCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdjustmentCodeTypeWithDefaults() *AdjustmentCodeType {
	this := AdjustmentCodeType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AdjustmentCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AdjustmentCodeType) SetCode(v string) {
	o.Code = &v
}

// GetCodeType returns the CodeType field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetCodeType() AdjustmentReasonCodeType {
	if o == nil || IsNil(o.CodeType) {
		var ret AdjustmentReasonCodeType
		return ret
	}
	return *o.CodeType
}

// GetCodeTypeOk returns a tuple with the CodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetCodeTypeOk() (*AdjustmentReasonCodeType, bool) {
	if o == nil || IsNil(o.CodeType) {
		return nil, false
	}
	return o.CodeType, true
}

// HasCodeType returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasCodeType() bool {
	if o != nil && !IsNil(o.CodeType) {
		return true
	}

	return false
}

// SetCodeType gets a reference to the given AdjustmentReasonCodeType and assigns it to the CodeType field.
func (o *AdjustmentCodeType) SetCodeType(v AdjustmentReasonCodeType) {
	o.CodeType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdjustmentCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *AdjustmentCodeType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetBIRGuest returns the BIRGuest field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetBIRGuest() string {
	if o == nil || IsNil(o.BIRGuest) {
		var ret string
		return ret
	}
	return *o.BIRGuest
}

// GetBIRGuestOk returns a tuple with the BIRGuest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetBIRGuestOk() (*string, bool) {
	if o == nil || IsNil(o.BIRGuest) {
		return nil, false
	}
	return o.BIRGuest, true
}

// HasBIRGuest returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasBIRGuest() bool {
	if o != nil && !IsNil(o.BIRGuest) {
		return true
	}

	return false
}

// SetBIRGuest gets a reference to the given string and assigns it to the BIRGuest field.
func (o *AdjustmentCodeType) SetBIRGuest(v string) {
	o.BIRGuest = &v
}

// GetAmountOrPercentageFlag returns the AmountOrPercentageFlag field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetAmountOrPercentageFlag() AmountOrPercentage {
	if o == nil || IsNil(o.AmountOrPercentageFlag) {
		var ret AmountOrPercentage
		return ret
	}
	return *o.AmountOrPercentageFlag
}

// GetAmountOrPercentageFlagOk returns a tuple with the AmountOrPercentageFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetAmountOrPercentageFlagOk() (*AmountOrPercentage, bool) {
	if o == nil || IsNil(o.AmountOrPercentageFlag) {
		return nil, false
	}
	return o.AmountOrPercentageFlag, true
}

// HasAmountOrPercentageFlag returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasAmountOrPercentageFlag() bool {
	if o != nil && !IsNil(o.AmountOrPercentageFlag) {
		return true
	}

	return false
}

// SetAmountOrPercentageFlag gets a reference to the given AmountOrPercentage and assigns it to the AmountOrPercentageFlag field.
func (o *AdjustmentCodeType) SetAmountOrPercentageFlag(v AmountOrPercentage) {
	o.AmountOrPercentageFlag = &v
}

// GetManagedBy returns the ManagedBy field value if set, zero value otherwise.
func (o *AdjustmentCodeType) GetManagedBy() ManagedByOptions {
	if o == nil || IsNil(o.ManagedBy) {
		var ret ManagedByOptions
		return ret
	}
	return *o.ManagedBy
}

// GetManagedByOk returns a tuple with the ManagedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdjustmentCodeType) GetManagedByOk() (*ManagedByOptions, bool) {
	if o == nil || IsNil(o.ManagedBy) {
		return nil, false
	}
	return o.ManagedBy, true
}

// HasManagedBy returns a boolean if a field has been set.
func (o *AdjustmentCodeType) HasManagedBy() bool {
	if o != nil && !IsNil(o.ManagedBy) {
		return true
	}

	return false
}

// SetManagedBy gets a reference to the given ManagedByOptions and assigns it to the ManagedBy field.
func (o *AdjustmentCodeType) SetManagedBy(v ManagedByOptions) {
	o.ManagedBy = &v
}

func (o AdjustmentCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdjustmentCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CodeType) {
		toSerialize["codeType"] = o.CodeType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.BIRGuest) {
		toSerialize["bIRGuest"] = o.BIRGuest
	}
	if !IsNil(o.AmountOrPercentageFlag) {
		toSerialize["amountOrPercentageFlag"] = o.AmountOrPercentageFlag
	}
	if !IsNil(o.ManagedBy) {
		toSerialize["managedBy"] = o.ManagedBy
	}
	return toSerialize, nil
}

type NullableAdjustmentCodeType struct {
	value *AdjustmentCodeType
	isSet bool
}

func (v NullableAdjustmentCodeType) Get() *AdjustmentCodeType {
	return v.value
}

func (v *NullableAdjustmentCodeType) Set(val *AdjustmentCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdjustmentCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdjustmentCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdjustmentCodeType(val *AdjustmentCodeType) *NullableAdjustmentCodeType {
	return &NullableAdjustmentCodeType{value: val, isSet: true}
}

func (v NullableAdjustmentCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdjustmentCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


