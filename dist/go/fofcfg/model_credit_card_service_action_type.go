/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CreditCardServiceActionType Instruction to call direct vendor service.
type CreditCardServiceActionType string

// List of creditCardServiceActionType
const (
	CREDITCARDSERVICEACTIONTYPE_IFC_INTERFACE CreditCardServiceActionType = "IfcInterface"
	CREDITCARDSERVICEACTIONTYPE_DIRECT_VENDOR CreditCardServiceActionType = "DirectVendor"
)

// All allowed values of CreditCardServiceActionType enum
var AllowedCreditCardServiceActionTypeEnumValues = []CreditCardServiceActionType{
	"IfcInterface",
	"DirectVendor",
}

func (v *CreditCardServiceActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreditCardServiceActionType(value)
	for _, existing := range AllowedCreditCardServiceActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreditCardServiceActionType", value)
}

// NewCreditCardServiceActionTypeFromValue returns a pointer to a valid CreditCardServiceActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreditCardServiceActionTypeFromValue(v string) (*CreditCardServiceActionType, error) {
	ev := CreditCardServiceActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreditCardServiceActionType: valid values are %v", v, AllowedCreditCardServiceActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreditCardServiceActionType) IsValid() bool {
	for _, existing := range AllowedCreditCardServiceActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to creditCardServiceActionType value
func (v CreditCardServiceActionType) Ptr() *CreditCardServiceActionType {
	return &v
}

type NullableCreditCardServiceActionType struct {
	value *CreditCardServiceActionType
	isSet bool
}

func (v NullableCreditCardServiceActionType) Get() *CreditCardServiceActionType {
	return v.value
}

func (v *NullableCreditCardServiceActionType) Set(val *CreditCardServiceActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditCardServiceActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditCardServiceActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditCardServiceActionType(val *CreditCardServiceActionType) *NullableCreditCardServiceActionType {
	return &NullableCreditCardServiceActionType{value: val, isSet: true}
}

func (v NullableCreditCardServiceActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditCardServiceActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

