/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// PaymentTrxCodeTypeType Other Payment Type Transaction.
type PaymentTrxCodeTypeType string

// List of paymentTrxCodeTypeType
const (
	PAYMENTTRXCODETYPETYPE_CASH PaymentTrxCodeTypeType = "Cash"
	PAYMENTTRXCODETYPETYPE_CHECK PaymentTrxCodeTypeType = "Check"
	PAYMENTTRXCODETYPETYPE_CREDIT_CARD PaymentTrxCodeTypeType = "CreditCard"
	PAYMENTTRXCODETYPETYPE_OTHERS PaymentTrxCodeTypeType = "Others"
)

// All allowed values of PaymentTrxCodeTypeType enum
var AllowedPaymentTrxCodeTypeTypeEnumValues = []PaymentTrxCodeTypeType{
	"Cash",
	"Check",
	"CreditCard",
	"Others",
}

func (v *PaymentTrxCodeTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentTrxCodeTypeType(value)
	for _, existing := range AllowedPaymentTrxCodeTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentTrxCodeTypeType", value)
}

// NewPaymentTrxCodeTypeTypeFromValue returns a pointer to a valid PaymentTrxCodeTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentTrxCodeTypeTypeFromValue(v string) (*PaymentTrxCodeTypeType, error) {
	ev := PaymentTrxCodeTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentTrxCodeTypeType: valid values are %v", v, AllowedPaymentTrxCodeTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentTrxCodeTypeType) IsValid() bool {
	for _, existing := range AllowedPaymentTrxCodeTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paymentTrxCodeTypeType value
func (v PaymentTrxCodeTypeType) Ptr() *PaymentTrxCodeTypeType {
	return &v
}

type NullablePaymentTrxCodeTypeType struct {
	value *PaymentTrxCodeTypeType
	isSet bool
}

func (v NullablePaymentTrxCodeTypeType) Get() *PaymentTrxCodeTypeType {
	return v.value
}

func (v *NullablePaymentTrxCodeTypeType) Set(val *PaymentTrxCodeTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTrxCodeTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTrxCodeTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTrxCodeTypeType(val *PaymentTrxCodeTypeType) *NullablePaymentTrxCodeTypeType {
	return &NullablePaymentTrxCodeTypeType{value: val, isSet: true}
}

func (v NullablePaymentTrxCodeTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTrxCodeTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

