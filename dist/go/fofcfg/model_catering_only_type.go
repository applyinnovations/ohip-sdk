/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CateringOnlyType For Catering and Event.
type CateringOnlyType string

// List of cateringOnlyType
const (
	CATERINGONLYTYPE_YES CateringOnlyType = "Yes"
	CATERINGONLYTYPE_NO CateringOnlyType = "No"
	CATERINGONLYTYPE_BOTH CateringOnlyType = "Both"
)

// All allowed values of CateringOnlyType enum
var AllowedCateringOnlyTypeEnumValues = []CateringOnlyType{
	"Yes",
	"No",
	"Both",
}

func (v *CateringOnlyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CateringOnlyType(value)
	for _, existing := range AllowedCateringOnlyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CateringOnlyType", value)
}

// NewCateringOnlyTypeFromValue returns a pointer to a valid CateringOnlyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCateringOnlyTypeFromValue(v string) (*CateringOnlyType, error) {
	ev := CateringOnlyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CateringOnlyType: valid values are %v", v, AllowedCateringOnlyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CateringOnlyType) IsValid() bool {
	for _, existing := range AllowedCateringOnlyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cateringOnlyType value
func (v CateringOnlyType) Ptr() *CateringOnlyType {
	return &v
}

type NullableCateringOnlyType struct {
	value *CateringOnlyType
	isSet bool
}

func (v NullableCateringOnlyType) Get() *CateringOnlyType {
	return v.value
}

func (v *NullableCateringOnlyType) Set(val *CateringOnlyType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringOnlyType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringOnlyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringOnlyType(val *CateringOnlyType) *NullableCateringOnlyType {
	return &NullableCateringOnlyType{value: val, isSet: true}
}

func (v NullableCateringOnlyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringOnlyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

