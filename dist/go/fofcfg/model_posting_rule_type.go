/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// PostingRuleType Simple Type for Posting Rule Types.
type PostingRuleType string

// List of postingRuleType
const (
	POSTINGRULETYPE_ALL_NIGHTS PostingRuleType = "AllNights"
	POSTINGRULETYPE_DEPOSIT_ONLY PostingRuleType = "DepositOnly"
	POSTINGRULETYPE_FIRST_NIGHT PostingRuleType = "FirstNight"
)

// All allowed values of PostingRuleType enum
var AllowedPostingRuleTypeEnumValues = []PostingRuleType{
	"AllNights",
	"DepositOnly",
	"FirstNight",
}

func (v *PostingRuleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostingRuleType(value)
	for _, existing := range AllowedPostingRuleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostingRuleType", value)
}

// NewPostingRuleTypeFromValue returns a pointer to a valid PostingRuleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostingRuleTypeFromValue(v string) (*PostingRuleType, error) {
	ev := PostingRuleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostingRuleType: valid values are %v", v, AllowedPostingRuleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostingRuleType) IsValid() bool {
	for _, existing := range AllowedPostingRuleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to postingRuleType value
func (v PostingRuleType) Ptr() *PostingRuleType {
	return &v
}

type NullablePostingRuleType struct {
	value *PostingRuleType
	isSet bool
}

func (v NullablePostingRuleType) Get() *PostingRuleType {
	return v.value
}

func (v *NullablePostingRuleType) Set(val *PostingRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostingRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostingRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostingRuleType(val *PostingRuleType) *NullablePostingRuleType {
	return &NullablePostingRuleType{value: val, isSet: true}
}

func (v NullablePostingRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostingRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

