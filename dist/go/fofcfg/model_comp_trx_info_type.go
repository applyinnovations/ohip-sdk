/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CompTrxInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompTrxInfoType{}

// CompTrxInfoType Transaction codes info.
type CompTrxInfoType struct {
	// Transaction codes info.
	Description *string `json:"description,omitempty"`
	// Unique identifier for the Transaction code.
	TransactionCode *string `json:"transactionCode,omitempty"`
}

// NewCompTrxInfoType instantiates a new CompTrxInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompTrxInfoType() *CompTrxInfoType {
	this := CompTrxInfoType{}
	return &this
}

// NewCompTrxInfoTypeWithDefaults instantiates a new CompTrxInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompTrxInfoTypeWithDefaults() *CompTrxInfoType {
	this := CompTrxInfoType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CompTrxInfoType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompTrxInfoType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CompTrxInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CompTrxInfoType) SetDescription(v string) {
	o.Description = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *CompTrxInfoType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompTrxInfoType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *CompTrxInfoType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *CompTrxInfoType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

func (o CompTrxInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompTrxInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	return toSerialize, nil
}

type NullableCompTrxInfoType struct {
	value *CompTrxInfoType
	isSet bool
}

func (v NullableCompTrxInfoType) Get() *CompTrxInfoType {
	return v.value
}

func (v *NullableCompTrxInfoType) Set(val *CompTrxInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompTrxInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompTrxInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompTrxInfoType(val *CompTrxInfoType) *NullableCompTrxInfoType {
	return &NullableCompTrxInfoType{value: val, isSet: true}
}

func (v NullableCompTrxInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompTrxInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


