/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CurrencyHandlingType Simple Type for Posting Limit Types.
type CurrencyHandlingType string

// List of currencyHandlingType
const (
	CURRENCYHANDLINGTYPE_LOCAL CurrencyHandlingType = "Local"
	CURRENCYHANDLINGTYPE_FOREIGN CurrencyHandlingType = "Foreign"
)

// All allowed values of CurrencyHandlingType enum
var AllowedCurrencyHandlingTypeEnumValues = []CurrencyHandlingType{
	"Local",
	"Foreign",
}

func (v *CurrencyHandlingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CurrencyHandlingType(value)
	for _, existing := range AllowedCurrencyHandlingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CurrencyHandlingType", value)
}

// NewCurrencyHandlingTypeFromValue returns a pointer to a valid CurrencyHandlingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyHandlingTypeFromValue(v string) (*CurrencyHandlingType, error) {
	ev := CurrencyHandlingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CurrencyHandlingType: valid values are %v", v, AllowedCurrencyHandlingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CurrencyHandlingType) IsValid() bool {
	for _, existing := range AllowedCurrencyHandlingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to currencyHandlingType value
func (v CurrencyHandlingType) Ptr() *CurrencyHandlingType {
	return &v
}

type NullableCurrencyHandlingType struct {
	value *CurrencyHandlingType
	isSet bool
}

func (v NullableCurrencyHandlingType) Get() *CurrencyHandlingType {
	return v.value
}

func (v *NullableCurrencyHandlingType) Set(val *CurrencyHandlingType) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyHandlingType) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyHandlingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyHandlingType(val *CurrencyHandlingType) *NullableCurrencyHandlingType {
	return &NullableCurrencyHandlingType{value: val, isSet: true}
}

func (v NullableCurrencyHandlingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyHandlingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

