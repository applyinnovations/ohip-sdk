/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CompAuthorizerDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompAuthorizerDetailType{}

// CompAuthorizerDetailType Detail information related to comp authorizers.
type CompAuthorizerDetailType struct {
	// Arrangement code for the detail limit.
	ArrangementCode *string `json:"arrangementCode,omitempty"`
	// Arrangement id for the arrangement code.
	ArrangementId *int32 `json:"arrangementId,omitempty"`
	// Authorization group for the instruction.
	AuthorizationGroup *string `json:"authorizationGroup,omitempty"`
	// Description for the transaction code or the arrangement code.
	Description *string `json:"description,omitempty"`
	// Rate code for the instruction.
	RateCode *string `json:"rateCode,omitempty"`
	// Transaction code for the detail limit.
	TransactionCode *string `json:"transactionCode,omitempty"`
}

// NewCompAuthorizerDetailType instantiates a new CompAuthorizerDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompAuthorizerDetailType() *CompAuthorizerDetailType {
	this := CompAuthorizerDetailType{}
	return &this
}

// NewCompAuthorizerDetailTypeWithDefaults instantiates a new CompAuthorizerDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompAuthorizerDetailTypeWithDefaults() *CompAuthorizerDetailType {
	this := CompAuthorizerDetailType{}
	return &this
}

// GetArrangementCode returns the ArrangementCode field value if set, zero value otherwise.
func (o *CompAuthorizerDetailType) GetArrangementCode() string {
	if o == nil || IsNil(o.ArrangementCode) {
		var ret string
		return ret
	}
	return *o.ArrangementCode
}

// GetArrangementCodeOk returns a tuple with the ArrangementCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerDetailType) GetArrangementCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ArrangementCode) {
		return nil, false
	}
	return o.ArrangementCode, true
}

// HasArrangementCode returns a boolean if a field has been set.
func (o *CompAuthorizerDetailType) HasArrangementCode() bool {
	if o != nil && !IsNil(o.ArrangementCode) {
		return true
	}

	return false
}

// SetArrangementCode gets a reference to the given string and assigns it to the ArrangementCode field.
func (o *CompAuthorizerDetailType) SetArrangementCode(v string) {
	o.ArrangementCode = &v
}

// GetArrangementId returns the ArrangementId field value if set, zero value otherwise.
func (o *CompAuthorizerDetailType) GetArrangementId() int32 {
	if o == nil || IsNil(o.ArrangementId) {
		var ret int32
		return ret
	}
	return *o.ArrangementId
}

// GetArrangementIdOk returns a tuple with the ArrangementId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerDetailType) GetArrangementIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ArrangementId) {
		return nil, false
	}
	return o.ArrangementId, true
}

// HasArrangementId returns a boolean if a field has been set.
func (o *CompAuthorizerDetailType) HasArrangementId() bool {
	if o != nil && !IsNil(o.ArrangementId) {
		return true
	}

	return false
}

// SetArrangementId gets a reference to the given int32 and assigns it to the ArrangementId field.
func (o *CompAuthorizerDetailType) SetArrangementId(v int32) {
	o.ArrangementId = &v
}

// GetAuthorizationGroup returns the AuthorizationGroup field value if set, zero value otherwise.
func (o *CompAuthorizerDetailType) GetAuthorizationGroup() string {
	if o == nil || IsNil(o.AuthorizationGroup) {
		var ret string
		return ret
	}
	return *o.AuthorizationGroup
}

// GetAuthorizationGroupOk returns a tuple with the AuthorizationGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerDetailType) GetAuthorizationGroupOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizationGroup) {
		return nil, false
	}
	return o.AuthorizationGroup, true
}

// HasAuthorizationGroup returns a boolean if a field has been set.
func (o *CompAuthorizerDetailType) HasAuthorizationGroup() bool {
	if o != nil && !IsNil(o.AuthorizationGroup) {
		return true
	}

	return false
}

// SetAuthorizationGroup gets a reference to the given string and assigns it to the AuthorizationGroup field.
func (o *CompAuthorizerDetailType) SetAuthorizationGroup(v string) {
	o.AuthorizationGroup = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CompAuthorizerDetailType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerDetailType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CompAuthorizerDetailType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CompAuthorizerDetailType) SetDescription(v string) {
	o.Description = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *CompAuthorizerDetailType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerDetailType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *CompAuthorizerDetailType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *CompAuthorizerDetailType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *CompAuthorizerDetailType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerDetailType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *CompAuthorizerDetailType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *CompAuthorizerDetailType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

func (o CompAuthorizerDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompAuthorizerDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArrangementCode) {
		toSerialize["arrangementCode"] = o.ArrangementCode
	}
	if !IsNil(o.ArrangementId) {
		toSerialize["arrangementId"] = o.ArrangementId
	}
	if !IsNil(o.AuthorizationGroup) {
		toSerialize["authorizationGroup"] = o.AuthorizationGroup
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	return toSerialize, nil
}

type NullableCompAuthorizerDetailType struct {
	value *CompAuthorizerDetailType
	isSet bool
}

func (v NullableCompAuthorizerDetailType) Get() *CompAuthorizerDetailType {
	return v.value
}

func (v *NullableCompAuthorizerDetailType) Set(val *CompAuthorizerDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompAuthorizerDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompAuthorizerDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompAuthorizerDetailType(val *CompAuthorizerDetailType) *NullableCompAuthorizerDetailType {
	return &NullableCompAuthorizerDetailType{value: val, isSet: true}
}

func (v NullableCompAuthorizerDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompAuthorizerDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


