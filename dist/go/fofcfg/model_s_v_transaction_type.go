/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// SVTransactionType Status of the Hotel Interface either STOPPED or RUNNING.
type SVTransactionType string

// List of sVTransactionType
const (
	SVTRANSACTIONTYPE_OPERA_TRANSACTION SVTransactionType = "OperaTransaction"
	SVTRANSACTIONTYPE_VENDOR_TRANSACTION SVTransactionType = "VendorTransaction"
	SVTRANSACTIONTYPE_OPERA_AND_VENDOR_TRANSACTION SVTransactionType = "OperaAndVendorTransaction"
)

// All allowed values of SVTransactionType enum
var AllowedSVTransactionTypeEnumValues = []SVTransactionType{
	"OperaTransaction",
	"VendorTransaction",
	"OperaAndVendorTransaction",
}

func (v *SVTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SVTransactionType(value)
	for _, existing := range AllowedSVTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SVTransactionType", value)
}

// NewSVTransactionTypeFromValue returns a pointer to a valid SVTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSVTransactionTypeFromValue(v string) (*SVTransactionType, error) {
	ev := SVTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SVTransactionType: valid values are %v", v, AllowedSVTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SVTransactionType) IsValid() bool {
	for _, existing := range AllowedSVTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to sVTransactionType value
func (v SVTransactionType) Ptr() *SVTransactionType {
	return &v
}

type NullableSVTransactionType struct {
	value *SVTransactionType
	isSet bool
}

func (v NullableSVTransactionType) Get() *SVTransactionType {
	return v.value
}

func (v *NullableSVTransactionType) Set(val *SVTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSVTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSVTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSVTransactionType(val *SVTransactionType) *NullableSVTransactionType {
	return &NullableSVTransactionType{value: val, isSet: true}
}

func (v NullableSVTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSVTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

