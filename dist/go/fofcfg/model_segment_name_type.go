/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// SegmentNameType Forecast.
type SegmentNameType string

// List of segmentNameType
const (
	SEGMENTNAMETYPE_MARKET SegmentNameType = "Market"
	SEGMENTNAMETYPE_RATE SegmentNameType = "Rate"
	SEGMENTNAMETYPE_CUSTOM SegmentNameType = "Custom"
	SEGMENTNAMETYPE_TRANSACTION SegmentNameType = "Transaction"
	SEGMENTNAMETYPE_CATERING SegmentNameType = "Catering"
)

// All allowed values of SegmentNameType enum
var AllowedSegmentNameTypeEnumValues = []SegmentNameType{
	"Market",
	"Rate",
	"Custom",
	"Transaction",
	"Catering",
}

func (v *SegmentNameType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SegmentNameType(value)
	for _, existing := range AllowedSegmentNameTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SegmentNameType", value)
}

// NewSegmentNameTypeFromValue returns a pointer to a valid SegmentNameType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSegmentNameTypeFromValue(v string) (*SegmentNameType, error) {
	ev := SegmentNameType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SegmentNameType: valid values are %v", v, AllowedSegmentNameTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SegmentNameType) IsValid() bool {
	for _, existing := range AllowedSegmentNameTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to segmentNameType value
func (v SegmentNameType) Ptr() *SegmentNameType {
	return &v
}

type NullableSegmentNameType struct {
	value *SegmentNameType
	isSet bool
}

func (v NullableSegmentNameType) Get() *SegmentNameType {
	return v.value
}

func (v *NullableSegmentNameType) Set(val *SegmentNameType) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentNameType) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentNameType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentNameType(val *SegmentNameType) *NullableSegmentNameType {
	return &NullableSegmentNameType{value: val, isSet: true}
}

func (v NullableSegmentNameType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentNameType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

