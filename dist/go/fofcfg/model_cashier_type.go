/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CashierType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashierType{}

// CashierType Cashiers Information.
type CashierType struct {
	// List of application users associated with the cashier
	AppUsers []ApplicationUserType `json:"appUsers,omitempty"`
	// User(s) assigned to the cashier.
	AttachedUser *string `json:"attachedUser,omitempty"`
	// Numeric code for cashier ID.
	CashierId *float32 `json:"cashierId,omitempty"`
	CashierType *CashierTypeType `json:"cashierType,omitempty"`
	// The currency code used by the hotel that the cashier belongs to.
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Selected if the cashier is allowed to drop below or above the required drop amount.
	FloatOverShort *bool `json:"floatOverShort,omitempty"`
	// Indicator that tells whether the cashier is active or not.
	Inactive *bool `json:"inactive,omitempty"`
	// Indicator that this cashier is the one to be used by Kiosk Partner to carry out postings and payments for the guest.
	Kiosk *bool `json:"kiosk,omitempty"`
	// Name assigned to the cashier.
	Name *string `json:"name,omitempty"`
	// Indicator that tells whether the cashier is open or not.
	Open *bool `json:"open,omitempty"`
	// The Starting Amount in the Cashier drawer.
	StartingAmount *float32 `json:"startingAmount,omitempty"`
	UsageInfo *CashierTypeUsageInfo `json:"usageInfo,omitempty"`
}

// NewCashierType instantiates a new CashierType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashierType() *CashierType {
	this := CashierType{}
	return &this
}

// NewCashierTypeWithDefaults instantiates a new CashierType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashierTypeWithDefaults() *CashierType {
	this := CashierType{}
	return &this
}

// GetAppUsers returns the AppUsers field value if set, zero value otherwise.
func (o *CashierType) GetAppUsers() []ApplicationUserType {
	if o == nil || IsNil(o.AppUsers) {
		var ret []ApplicationUserType
		return ret
	}
	return o.AppUsers
}

// GetAppUsersOk returns a tuple with the AppUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetAppUsersOk() ([]ApplicationUserType, bool) {
	if o == nil || IsNil(o.AppUsers) {
		return nil, false
	}
	return o.AppUsers, true
}

// HasAppUsers returns a boolean if a field has been set.
func (o *CashierType) HasAppUsers() bool {
	if o != nil && !IsNil(o.AppUsers) {
		return true
	}

	return false
}

// SetAppUsers gets a reference to the given []ApplicationUserType and assigns it to the AppUsers field.
func (o *CashierType) SetAppUsers(v []ApplicationUserType) {
	o.AppUsers = v
}

// GetAttachedUser returns the AttachedUser field value if set, zero value otherwise.
func (o *CashierType) GetAttachedUser() string {
	if o == nil || IsNil(o.AttachedUser) {
		var ret string
		return ret
	}
	return *o.AttachedUser
}

// GetAttachedUserOk returns a tuple with the AttachedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetAttachedUserOk() (*string, bool) {
	if o == nil || IsNil(o.AttachedUser) {
		return nil, false
	}
	return o.AttachedUser, true
}

// HasAttachedUser returns a boolean if a field has been set.
func (o *CashierType) HasAttachedUser() bool {
	if o != nil && !IsNil(o.AttachedUser) {
		return true
	}

	return false
}

// SetAttachedUser gets a reference to the given string and assigns it to the AttachedUser field.
func (o *CashierType) SetAttachedUser(v string) {
	o.AttachedUser = &v
}

// GetCashierId returns the CashierId field value if set, zero value otherwise.
func (o *CashierType) GetCashierId() float32 {
	if o == nil || IsNil(o.CashierId) {
		var ret float32
		return ret
	}
	return *o.CashierId
}

// GetCashierIdOk returns a tuple with the CashierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetCashierIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CashierId) {
		return nil, false
	}
	return o.CashierId, true
}

// HasCashierId returns a boolean if a field has been set.
func (o *CashierType) HasCashierId() bool {
	if o != nil && !IsNil(o.CashierId) {
		return true
	}

	return false
}

// SetCashierId gets a reference to the given float32 and assigns it to the CashierId field.
func (o *CashierType) SetCashierId(v float32) {
	o.CashierId = &v
}

// GetCashierType returns the CashierType field value if set, zero value otherwise.
func (o *CashierType) GetCashierType() CashierTypeType {
	if o == nil || IsNil(o.CashierType) {
		var ret CashierTypeType
		return ret
	}
	return *o.CashierType
}

// GetCashierTypeOk returns a tuple with the CashierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetCashierTypeOk() (*CashierTypeType, bool) {
	if o == nil || IsNil(o.CashierType) {
		return nil, false
	}
	return o.CashierType, true
}

// HasCashierType returns a boolean if a field has been set.
func (o *CashierType) HasCashierType() bool {
	if o != nil && !IsNil(o.CashierType) {
		return true
	}

	return false
}

// SetCashierType gets a reference to the given CashierTypeType and assigns it to the CashierType field.
func (o *CashierType) SetCashierType(v CashierTypeType) {
	o.CashierType = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *CashierType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *CashierType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *CashierType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetFloatOverShort returns the FloatOverShort field value if set, zero value otherwise.
func (o *CashierType) GetFloatOverShort() bool {
	if o == nil || IsNil(o.FloatOverShort) {
		var ret bool
		return ret
	}
	return *o.FloatOverShort
}

// GetFloatOverShortOk returns a tuple with the FloatOverShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetFloatOverShortOk() (*bool, bool) {
	if o == nil || IsNil(o.FloatOverShort) {
		return nil, false
	}
	return o.FloatOverShort, true
}

// HasFloatOverShort returns a boolean if a field has been set.
func (o *CashierType) HasFloatOverShort() bool {
	if o != nil && !IsNil(o.FloatOverShort) {
		return true
	}

	return false
}

// SetFloatOverShort gets a reference to the given bool and assigns it to the FloatOverShort field.
func (o *CashierType) SetFloatOverShort(v bool) {
	o.FloatOverShort = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *CashierType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *CashierType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *CashierType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetKiosk returns the Kiosk field value if set, zero value otherwise.
func (o *CashierType) GetKiosk() bool {
	if o == nil || IsNil(o.Kiosk) {
		var ret bool
		return ret
	}
	return *o.Kiosk
}

// GetKioskOk returns a tuple with the Kiosk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetKioskOk() (*bool, bool) {
	if o == nil || IsNil(o.Kiosk) {
		return nil, false
	}
	return o.Kiosk, true
}

// HasKiosk returns a boolean if a field has been set.
func (o *CashierType) HasKiosk() bool {
	if o != nil && !IsNil(o.Kiosk) {
		return true
	}

	return false
}

// SetKiosk gets a reference to the given bool and assigns it to the Kiosk field.
func (o *CashierType) SetKiosk(v bool) {
	o.Kiosk = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CashierType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CashierType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CashierType) SetName(v string) {
	o.Name = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *CashierType) GetOpen() bool {
	if o == nil || IsNil(o.Open) {
		var ret bool
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetOpenOk() (*bool, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *CashierType) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given bool and assigns it to the Open field.
func (o *CashierType) SetOpen(v bool) {
	o.Open = &v
}

// GetStartingAmount returns the StartingAmount field value if set, zero value otherwise.
func (o *CashierType) GetStartingAmount() float32 {
	if o == nil || IsNil(o.StartingAmount) {
		var ret float32
		return ret
	}
	return *o.StartingAmount
}

// GetStartingAmountOk returns a tuple with the StartingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetStartingAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.StartingAmount) {
		return nil, false
	}
	return o.StartingAmount, true
}

// HasStartingAmount returns a boolean if a field has been set.
func (o *CashierType) HasStartingAmount() bool {
	if o != nil && !IsNil(o.StartingAmount) {
		return true
	}

	return false
}

// SetStartingAmount gets a reference to the given float32 and assigns it to the StartingAmount field.
func (o *CashierType) SetStartingAmount(v float32) {
	o.StartingAmount = &v
}

// GetUsageInfo returns the UsageInfo field value if set, zero value otherwise.
func (o *CashierType) GetUsageInfo() CashierTypeUsageInfo {
	if o == nil || IsNil(o.UsageInfo) {
		var ret CashierTypeUsageInfo
		return ret
	}
	return *o.UsageInfo
}

// GetUsageInfoOk returns a tuple with the UsageInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierType) GetUsageInfoOk() (*CashierTypeUsageInfo, bool) {
	if o == nil || IsNil(o.UsageInfo) {
		return nil, false
	}
	return o.UsageInfo, true
}

// HasUsageInfo returns a boolean if a field has been set.
func (o *CashierType) HasUsageInfo() bool {
	if o != nil && !IsNil(o.UsageInfo) {
		return true
	}

	return false
}

// SetUsageInfo gets a reference to the given CashierTypeUsageInfo and assigns it to the UsageInfo field.
func (o *CashierType) SetUsageInfo(v CashierTypeUsageInfo) {
	o.UsageInfo = &v
}

func (o CashierType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashierType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppUsers) {
		toSerialize["appUsers"] = o.AppUsers
	}
	if !IsNil(o.AttachedUser) {
		toSerialize["attachedUser"] = o.AttachedUser
	}
	if !IsNil(o.CashierId) {
		toSerialize["cashierId"] = o.CashierId
	}
	if !IsNil(o.CashierType) {
		toSerialize["cashierType"] = o.CashierType
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.FloatOverShort) {
		toSerialize["floatOverShort"] = o.FloatOverShort
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Kiosk) {
		toSerialize["kiosk"] = o.Kiosk
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.StartingAmount) {
		toSerialize["startingAmount"] = o.StartingAmount
	}
	if !IsNil(o.UsageInfo) {
		toSerialize["usageInfo"] = o.UsageInfo
	}
	return toSerialize, nil
}

type NullableCashierType struct {
	value *CashierType
	isSet bool
}

func (v NullableCashierType) Get() *CashierType {
	return v.value
}

func (v *NullableCashierType) Set(val *CashierType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierType(val *CashierType) *NullableCashierType {
	return &NullableCashierType{value: val, isSet: true}
}

func (v NullableCashierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


