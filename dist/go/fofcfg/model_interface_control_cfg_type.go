/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the InterfaceControlCfgType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceControlCfgType{}

// InterfaceControlCfgType struct for InterfaceControlCfgType
type InterfaceControlCfgType struct {
	// Hotel Code of the hotel interface.
	HotelId *string `json:"hotelId,omitempty"`
	// Internal code of a translation configuration setup.
	InternalCode *int32 `json:"internalCode,omitempty"`
	// Logo of the hotel interface.
	Logo *string `json:"logo,omitempty"`
	// Merchant Id of a translation configuration setup.
	MerchantId *string `json:"merchantId,omitempty"`
	// Origin code of a translation configuration setup.
	OriginCode *string `json:"originCode,omitempty"`
}

// NewInterfaceControlCfgType instantiates a new InterfaceControlCfgType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceControlCfgType() *InterfaceControlCfgType {
	this := InterfaceControlCfgType{}
	return &this
}

// NewInterfaceControlCfgTypeWithDefaults instantiates a new InterfaceControlCfgType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceControlCfgTypeWithDefaults() *InterfaceControlCfgType {
	this := InterfaceControlCfgType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfaceControlCfgType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlCfgType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfaceControlCfgType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfaceControlCfgType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInternalCode returns the InternalCode field value if set, zero value otherwise.
func (o *InterfaceControlCfgType) GetInternalCode() int32 {
	if o == nil || IsNil(o.InternalCode) {
		var ret int32
		return ret
	}
	return *o.InternalCode
}

// GetInternalCodeOk returns a tuple with the InternalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlCfgType) GetInternalCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.InternalCode) {
		return nil, false
	}
	return o.InternalCode, true
}

// HasInternalCode returns a boolean if a field has been set.
func (o *InterfaceControlCfgType) HasInternalCode() bool {
	if o != nil && !IsNil(o.InternalCode) {
		return true
	}

	return false
}

// SetInternalCode gets a reference to the given int32 and assigns it to the InternalCode field.
func (o *InterfaceControlCfgType) SetInternalCode(v int32) {
	o.InternalCode = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InterfaceControlCfgType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlCfgType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InterfaceControlCfgType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InterfaceControlCfgType) SetLogo(v string) {
	o.Logo = &v
}

// GetMerchantId returns the MerchantId field value if set, zero value otherwise.
func (o *InterfaceControlCfgType) GetMerchantId() string {
	if o == nil || IsNil(o.MerchantId) {
		var ret string
		return ret
	}
	return *o.MerchantId
}

// GetMerchantIdOk returns a tuple with the MerchantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlCfgType) GetMerchantIdOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantId) {
		return nil, false
	}
	return o.MerchantId, true
}

// HasMerchantId returns a boolean if a field has been set.
func (o *InterfaceControlCfgType) HasMerchantId() bool {
	if o != nil && !IsNil(o.MerchantId) {
		return true
	}

	return false
}

// SetMerchantId gets a reference to the given string and assigns it to the MerchantId field.
func (o *InterfaceControlCfgType) SetMerchantId(v string) {
	o.MerchantId = &v
}

// GetOriginCode returns the OriginCode field value if set, zero value otherwise.
func (o *InterfaceControlCfgType) GetOriginCode() string {
	if o == nil || IsNil(o.OriginCode) {
		var ret string
		return ret
	}
	return *o.OriginCode
}

// GetOriginCodeOk returns a tuple with the OriginCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlCfgType) GetOriginCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OriginCode) {
		return nil, false
	}
	return o.OriginCode, true
}

// HasOriginCode returns a boolean if a field has been set.
func (o *InterfaceControlCfgType) HasOriginCode() bool {
	if o != nil && !IsNil(o.OriginCode) {
		return true
	}

	return false
}

// SetOriginCode gets a reference to the given string and assigns it to the OriginCode field.
func (o *InterfaceControlCfgType) SetOriginCode(v string) {
	o.OriginCode = &v
}

func (o InterfaceControlCfgType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceControlCfgType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InternalCode) {
		toSerialize["internalCode"] = o.InternalCode
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.MerchantId) {
		toSerialize["merchantId"] = o.MerchantId
	}
	if !IsNil(o.OriginCode) {
		toSerialize["originCode"] = o.OriginCode
	}
	return toSerialize, nil
}

type NullableInterfaceControlCfgType struct {
	value *InterfaceControlCfgType
	isSet bool
}

func (v NullableInterfaceControlCfgType) Get() *InterfaceControlCfgType {
	return v.value
}

func (v *NullableInterfaceControlCfgType) Set(val *InterfaceControlCfgType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceControlCfgType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceControlCfgType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceControlCfgType(val *InterfaceControlCfgType) *NullableInterfaceControlCfgType {
	return &NullableInterfaceControlCfgType{value: val, isSet: true}
}

func (v NullableInterfaceControlCfgType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceControlCfgType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


