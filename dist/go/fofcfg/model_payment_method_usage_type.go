/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the PaymentMethodUsageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMethodUsageType{}

// PaymentMethodUsageType This provides information about the various usage options permitted for the given payment method.
type PaymentMethodUsageType struct {
	// Indicates if this payment method can be used for Accounts Receivables.
	AccountsReceivable *bool `json:"accountsReceivable,omitempty"`
	// Indicates if the payment method can be used for Guest Billing
	Billing *bool `json:"billing,omitempty"`
	// Indicates if this payment method is a Cash type payment method.
	Cash *bool `json:"cash,omitempty"`
	// Indicates if this payment method can be used for Comp Accounting.
	CompAccounting *bool `json:"compAccounting,omitempty"`
	// Indicates if this payment method can be used for Deposit payments.
	Deposit *bool `json:"deposit,omitempty"`
	// Indicates if postings can be manually added to the Reservation when this payment method is used.
	Posting *bool `json:"posting,omitempty"`
	// Indicates if this payment method can be used as a Reservation payment method.
	Reservation *bool `json:"reservation,omitempty"`
}

// NewPaymentMethodUsageType instantiates a new PaymentMethodUsageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodUsageType() *PaymentMethodUsageType {
	this := PaymentMethodUsageType{}
	return &this
}

// NewPaymentMethodUsageTypeWithDefaults instantiates a new PaymentMethodUsageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodUsageTypeWithDefaults() *PaymentMethodUsageType {
	this := PaymentMethodUsageType{}
	return &this
}

// GetAccountsReceivable returns the AccountsReceivable field value if set, zero value otherwise.
func (o *PaymentMethodUsageType) GetAccountsReceivable() bool {
	if o == nil || IsNil(o.AccountsReceivable) {
		var ret bool
		return ret
	}
	return *o.AccountsReceivable
}

// GetAccountsReceivableOk returns a tuple with the AccountsReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUsageType) GetAccountsReceivableOk() (*bool, bool) {
	if o == nil || IsNil(o.AccountsReceivable) {
		return nil, false
	}
	return o.AccountsReceivable, true
}

// HasAccountsReceivable returns a boolean if a field has been set.
func (o *PaymentMethodUsageType) HasAccountsReceivable() bool {
	if o != nil && !IsNil(o.AccountsReceivable) {
		return true
	}

	return false
}

// SetAccountsReceivable gets a reference to the given bool and assigns it to the AccountsReceivable field.
func (o *PaymentMethodUsageType) SetAccountsReceivable(v bool) {
	o.AccountsReceivable = &v
}

// GetBilling returns the Billing field value if set, zero value otherwise.
func (o *PaymentMethodUsageType) GetBilling() bool {
	if o == nil || IsNil(o.Billing) {
		var ret bool
		return ret
	}
	return *o.Billing
}

// GetBillingOk returns a tuple with the Billing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUsageType) GetBillingOk() (*bool, bool) {
	if o == nil || IsNil(o.Billing) {
		return nil, false
	}
	return o.Billing, true
}

// HasBilling returns a boolean if a field has been set.
func (o *PaymentMethodUsageType) HasBilling() bool {
	if o != nil && !IsNil(o.Billing) {
		return true
	}

	return false
}

// SetBilling gets a reference to the given bool and assigns it to the Billing field.
func (o *PaymentMethodUsageType) SetBilling(v bool) {
	o.Billing = &v
}

// GetCash returns the Cash field value if set, zero value otherwise.
func (o *PaymentMethodUsageType) GetCash() bool {
	if o == nil || IsNil(o.Cash) {
		var ret bool
		return ret
	}
	return *o.Cash
}

// GetCashOk returns a tuple with the Cash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUsageType) GetCashOk() (*bool, bool) {
	if o == nil || IsNil(o.Cash) {
		return nil, false
	}
	return o.Cash, true
}

// HasCash returns a boolean if a field has been set.
func (o *PaymentMethodUsageType) HasCash() bool {
	if o != nil && !IsNil(o.Cash) {
		return true
	}

	return false
}

// SetCash gets a reference to the given bool and assigns it to the Cash field.
func (o *PaymentMethodUsageType) SetCash(v bool) {
	o.Cash = &v
}

// GetCompAccounting returns the CompAccounting field value if set, zero value otherwise.
func (o *PaymentMethodUsageType) GetCompAccounting() bool {
	if o == nil || IsNil(o.CompAccounting) {
		var ret bool
		return ret
	}
	return *o.CompAccounting
}

// GetCompAccountingOk returns a tuple with the CompAccounting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUsageType) GetCompAccountingOk() (*bool, bool) {
	if o == nil || IsNil(o.CompAccounting) {
		return nil, false
	}
	return o.CompAccounting, true
}

// HasCompAccounting returns a boolean if a field has been set.
func (o *PaymentMethodUsageType) HasCompAccounting() bool {
	if o != nil && !IsNil(o.CompAccounting) {
		return true
	}

	return false
}

// SetCompAccounting gets a reference to the given bool and assigns it to the CompAccounting field.
func (o *PaymentMethodUsageType) SetCompAccounting(v bool) {
	o.CompAccounting = &v
}

// GetDeposit returns the Deposit field value if set, zero value otherwise.
func (o *PaymentMethodUsageType) GetDeposit() bool {
	if o == nil || IsNil(o.Deposit) {
		var ret bool
		return ret
	}
	return *o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUsageType) GetDepositOk() (*bool, bool) {
	if o == nil || IsNil(o.Deposit) {
		return nil, false
	}
	return o.Deposit, true
}

// HasDeposit returns a boolean if a field has been set.
func (o *PaymentMethodUsageType) HasDeposit() bool {
	if o != nil && !IsNil(o.Deposit) {
		return true
	}

	return false
}

// SetDeposit gets a reference to the given bool and assigns it to the Deposit field.
func (o *PaymentMethodUsageType) SetDeposit(v bool) {
	o.Deposit = &v
}

// GetPosting returns the Posting field value if set, zero value otherwise.
func (o *PaymentMethodUsageType) GetPosting() bool {
	if o == nil || IsNil(o.Posting) {
		var ret bool
		return ret
	}
	return *o.Posting
}

// GetPostingOk returns a tuple with the Posting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUsageType) GetPostingOk() (*bool, bool) {
	if o == nil || IsNil(o.Posting) {
		return nil, false
	}
	return o.Posting, true
}

// HasPosting returns a boolean if a field has been set.
func (o *PaymentMethodUsageType) HasPosting() bool {
	if o != nil && !IsNil(o.Posting) {
		return true
	}

	return false
}

// SetPosting gets a reference to the given bool and assigns it to the Posting field.
func (o *PaymentMethodUsageType) SetPosting(v bool) {
	o.Posting = &v
}

// GetReservation returns the Reservation field value if set, zero value otherwise.
func (o *PaymentMethodUsageType) GetReservation() bool {
	if o == nil || IsNil(o.Reservation) {
		var ret bool
		return ret
	}
	return *o.Reservation
}

// GetReservationOk returns a tuple with the Reservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodUsageType) GetReservationOk() (*bool, bool) {
	if o == nil || IsNil(o.Reservation) {
		return nil, false
	}
	return o.Reservation, true
}

// HasReservation returns a boolean if a field has been set.
func (o *PaymentMethodUsageType) HasReservation() bool {
	if o != nil && !IsNil(o.Reservation) {
		return true
	}

	return false
}

// SetReservation gets a reference to the given bool and assigns it to the Reservation field.
func (o *PaymentMethodUsageType) SetReservation(v bool) {
	o.Reservation = &v
}

func (o PaymentMethodUsageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethodUsageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountsReceivable) {
		toSerialize["accountsReceivable"] = o.AccountsReceivable
	}
	if !IsNil(o.Billing) {
		toSerialize["billing"] = o.Billing
	}
	if !IsNil(o.Cash) {
		toSerialize["cash"] = o.Cash
	}
	if !IsNil(o.CompAccounting) {
		toSerialize["compAccounting"] = o.CompAccounting
	}
	if !IsNil(o.Deposit) {
		toSerialize["deposit"] = o.Deposit
	}
	if !IsNil(o.Posting) {
		toSerialize["posting"] = o.Posting
	}
	if !IsNil(o.Reservation) {
		toSerialize["reservation"] = o.Reservation
	}
	return toSerialize, nil
}

type NullablePaymentMethodUsageType struct {
	value *PaymentMethodUsageType
	isSet bool
}

func (v NullablePaymentMethodUsageType) Get() *PaymentMethodUsageType {
	return v.value
}

func (v *NullablePaymentMethodUsageType) Set(val *PaymentMethodUsageType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodUsageType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodUsageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodUsageType(val *PaymentMethodUsageType) *NullablePaymentMethodUsageType {
	return &NullablePaymentMethodUsageType{value: val, isSet: true}
}

func (v NullablePaymentMethodUsageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodUsageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


