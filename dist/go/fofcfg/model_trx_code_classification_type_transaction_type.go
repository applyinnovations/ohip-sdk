/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TrxCodeClassificationTypeTransactionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrxCodeClassificationTypeTransactionType{}

// TrxCodeClassificationTypeTransactionType Transaction Code Type detail.
type TrxCodeClassificationTypeTransactionType struct {
	Code *TransactionCodeTypeType `json:"code,omitempty"`
	// Tax Code if the transaction Code if it is of type Tax.
	TaxCode *int32 `json:"taxCode,omitempty"`
}

// NewTrxCodeClassificationTypeTransactionType instantiates a new TrxCodeClassificationTypeTransactionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrxCodeClassificationTypeTransactionType() *TrxCodeClassificationTypeTransactionType {
	this := TrxCodeClassificationTypeTransactionType{}
	return &this
}

// NewTrxCodeClassificationTypeTransactionTypeWithDefaults instantiates a new TrxCodeClassificationTypeTransactionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrxCodeClassificationTypeTransactionTypeWithDefaults() *TrxCodeClassificationTypeTransactionType {
	this := TrxCodeClassificationTypeTransactionType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrxCodeClassificationTypeTransactionType) GetCode() TransactionCodeTypeType {
	if o == nil || IsNil(o.Code) {
		var ret TransactionCodeTypeType
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeClassificationTypeTransactionType) GetCodeOk() (*TransactionCodeTypeType, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrxCodeClassificationTypeTransactionType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given TransactionCodeTypeType and assigns it to the Code field.
func (o *TrxCodeClassificationTypeTransactionType) SetCode(v TransactionCodeTypeType) {
	o.Code = &v
}

// GetTaxCode returns the TaxCode field value if set, zero value otherwise.
func (o *TrxCodeClassificationTypeTransactionType) GetTaxCode() int32 {
	if o == nil || IsNil(o.TaxCode) {
		var ret int32
		return ret
	}
	return *o.TaxCode
}

// GetTaxCodeOk returns a tuple with the TaxCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeClassificationTypeTransactionType) GetTaxCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.TaxCode) {
		return nil, false
	}
	return o.TaxCode, true
}

// HasTaxCode returns a boolean if a field has been set.
func (o *TrxCodeClassificationTypeTransactionType) HasTaxCode() bool {
	if o != nil && !IsNil(o.TaxCode) {
		return true
	}

	return false
}

// SetTaxCode gets a reference to the given int32 and assigns it to the TaxCode field.
func (o *TrxCodeClassificationTypeTransactionType) SetTaxCode(v int32) {
	o.TaxCode = &v
}

func (o TrxCodeClassificationTypeTransactionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrxCodeClassificationTypeTransactionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.TaxCode) {
		toSerialize["taxCode"] = o.TaxCode
	}
	return toSerialize, nil
}

type NullableTrxCodeClassificationTypeTransactionType struct {
	value *TrxCodeClassificationTypeTransactionType
	isSet bool
}

func (v NullableTrxCodeClassificationTypeTransactionType) Get() *TrxCodeClassificationTypeTransactionType {
	return v.value
}

func (v *NullableTrxCodeClassificationTypeTransactionType) Set(val *TrxCodeClassificationTypeTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrxCodeClassificationTypeTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrxCodeClassificationTypeTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrxCodeClassificationTypeTransactionType(val *TrxCodeClassificationTypeTransactionType) *NullableTrxCodeClassificationTypeTransactionType {
	return &NullableTrxCodeClassificationTypeTransactionType{value: val, isSet: true}
}

func (v NullableTrxCodeClassificationTypeTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrxCodeClassificationTypeTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


