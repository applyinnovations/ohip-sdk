/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CustomChargeExemptionConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomChargeExemptionConfigType{}

// CustomChargeExemptionConfigType Provides information about Exemptions.
type CustomChargeExemptionConfigType struct {
	// Exemption Desciption
	Description *string `json:"description,omitempty"`
	// Date till the Exemption will be effective.
	EndDate *string `json:"endDate,omitempty"`
	// Exemption
	Exemption *string `json:"exemption,omitempty"`
	// Code of the Hotel.
	HotelId *string `json:"hotelId,omitempty"`
	// Date when this Exemption is Inactive
	InactiveDate *string `json:"inactiveDate,omitempty"`
	// Indicator that tells whether to include inactive Custom Charge Ememptions.
	IncludeInactive *bool `json:"includeInactive,omitempty"`
	// Exemption Percentage
	Percentage *float32 `json:"percentage,omitempty"`
	// Flag specifying if custom charge exemptions is property level or not.
	PropertyExemption *bool `json:"propertyExemption,omitempty"`
	// Date when this Exemption will be effective
	StartDate *string `json:"startDate,omitempty"`
}

// NewCustomChargeExemptionConfigType instantiates a new CustomChargeExemptionConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomChargeExemptionConfigType() *CustomChargeExemptionConfigType {
	this := CustomChargeExemptionConfigType{}
	return &this
}

// NewCustomChargeExemptionConfigTypeWithDefaults instantiates a new CustomChargeExemptionConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomChargeExemptionConfigTypeWithDefaults() *CustomChargeExemptionConfigType {
	this := CustomChargeExemptionConfigType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomChargeExemptionConfigType) SetDescription(v string) {
	o.Description = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CustomChargeExemptionConfigType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetExemption returns the Exemption field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetExemption() string {
	if o == nil || IsNil(o.Exemption) {
		var ret string
		return ret
	}
	return *o.Exemption
}

// GetExemptionOk returns a tuple with the Exemption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetExemptionOk() (*string, bool) {
	if o == nil || IsNil(o.Exemption) {
		return nil, false
	}
	return o.Exemption, true
}

// HasExemption returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasExemption() bool {
	if o != nil && !IsNil(o.Exemption) {
		return true
	}

	return false
}

// SetExemption gets a reference to the given string and assigns it to the Exemption field.
func (o *CustomChargeExemptionConfigType) SetExemption(v string) {
	o.Exemption = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CustomChargeExemptionConfigType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInactiveDate returns the InactiveDate field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetInactiveDate() string {
	if o == nil || IsNil(o.InactiveDate) {
		var ret string
		return ret
	}
	return *o.InactiveDate
}

// GetInactiveDateOk returns a tuple with the InactiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetInactiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.InactiveDate) {
		return nil, false
	}
	return o.InactiveDate, true
}

// HasInactiveDate returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasInactiveDate() bool {
	if o != nil && !IsNil(o.InactiveDate) {
		return true
	}

	return false
}

// SetInactiveDate gets a reference to the given string and assigns it to the InactiveDate field.
func (o *CustomChargeExemptionConfigType) SetInactiveDate(v string) {
	o.InactiveDate = &v
}

// GetIncludeInactive returns the IncludeInactive field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetIncludeInactive() bool {
	if o == nil || IsNil(o.IncludeInactive) {
		var ret bool
		return ret
	}
	return *o.IncludeInactive
}

// GetIncludeInactiveOk returns a tuple with the IncludeInactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetIncludeInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeInactive) {
		return nil, false
	}
	return o.IncludeInactive, true
}

// HasIncludeInactive returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasIncludeInactive() bool {
	if o != nil && !IsNil(o.IncludeInactive) {
		return true
	}

	return false
}

// SetIncludeInactive gets a reference to the given bool and assigns it to the IncludeInactive field.
func (o *CustomChargeExemptionConfigType) SetIncludeInactive(v bool) {
	o.IncludeInactive = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetPercentage() float32 {
	if o == nil || IsNil(o.Percentage) {
		var ret float32
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given float32 and assigns it to the Percentage field.
func (o *CustomChargeExemptionConfigType) SetPercentage(v float32) {
	o.Percentage = &v
}

// GetPropertyExemption returns the PropertyExemption field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetPropertyExemption() bool {
	if o == nil || IsNil(o.PropertyExemption) {
		var ret bool
		return ret
	}
	return *o.PropertyExemption
}

// GetPropertyExemptionOk returns a tuple with the PropertyExemption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetPropertyExemptionOk() (*bool, bool) {
	if o == nil || IsNil(o.PropertyExemption) {
		return nil, false
	}
	return o.PropertyExemption, true
}

// HasPropertyExemption returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasPropertyExemption() bool {
	if o != nil && !IsNil(o.PropertyExemption) {
		return true
	}

	return false
}

// SetPropertyExemption gets a reference to the given bool and assigns it to the PropertyExemption field.
func (o *CustomChargeExemptionConfigType) SetPropertyExemption(v bool) {
	o.PropertyExemption = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CustomChargeExemptionConfigType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomChargeExemptionConfigType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CustomChargeExemptionConfigType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CustomChargeExemptionConfigType) SetStartDate(v string) {
	o.StartDate = &v
}

func (o CustomChargeExemptionConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomChargeExemptionConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Exemption) {
		toSerialize["exemption"] = o.Exemption
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InactiveDate) {
		toSerialize["inactiveDate"] = o.InactiveDate
	}
	if !IsNil(o.IncludeInactive) {
		toSerialize["includeInactive"] = o.IncludeInactive
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.PropertyExemption) {
		toSerialize["propertyExemption"] = o.PropertyExemption
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	return toSerialize, nil
}

type NullableCustomChargeExemptionConfigType struct {
	value *CustomChargeExemptionConfigType
	isSet bool
}

func (v NullableCustomChargeExemptionConfigType) Get() *CustomChargeExemptionConfigType {
	return v.value
}

func (v *NullableCustomChargeExemptionConfigType) Set(val *CustomChargeExemptionConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomChargeExemptionConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomChargeExemptionConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomChargeExemptionConfigType(val *CustomChargeExemptionConfigType) *NullableCustomChargeExemptionConfigType {
	return &NullableCustomChargeExemptionConfigType{value: val, isSet: true}
}

func (v NullableCustomChargeExemptionConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomChargeExemptionConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


