/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the PaymentCardType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentCardType{}

// PaymentCardType Contains credit card information.
type PaymentCardType struct {
	CardUsageRules *CardUsageRulesType `json:"cardUsageRules,omitempty"`
	Validation *PaymentMethodValidationRuleType `json:"validation,omitempty"`
	// The merchant number to use when settling or transmitting credit card information.
	MerchantNumber *string `json:"merchantNumber,omitempty"`
	Option *CardOptionType `json:"option,omitempty"`
	CardType *CardTypeType `json:"cardType,omitempty"`
	// User defined credit card type if credit card type from a defined list is not provided.
	UserDefinedCardType *string `json:"userDefinedCardType,omitempty"`
	Processing *CardProcessingType `json:"processing,omitempty"`
}

// NewPaymentCardType instantiates a new PaymentCardType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentCardType() *PaymentCardType {
	this := PaymentCardType{}
	return &this
}

// NewPaymentCardTypeWithDefaults instantiates a new PaymentCardType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentCardTypeWithDefaults() *PaymentCardType {
	this := PaymentCardType{}
	return &this
}

// GetCardUsageRules returns the CardUsageRules field value if set, zero value otherwise.
func (o *PaymentCardType) GetCardUsageRules() CardUsageRulesType {
	if o == nil || IsNil(o.CardUsageRules) {
		var ret CardUsageRulesType
		return ret
	}
	return *o.CardUsageRules
}

// GetCardUsageRulesOk returns a tuple with the CardUsageRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCardType) GetCardUsageRulesOk() (*CardUsageRulesType, bool) {
	if o == nil || IsNil(o.CardUsageRules) {
		return nil, false
	}
	return o.CardUsageRules, true
}

// HasCardUsageRules returns a boolean if a field has been set.
func (o *PaymentCardType) HasCardUsageRules() bool {
	if o != nil && !IsNil(o.CardUsageRules) {
		return true
	}

	return false
}

// SetCardUsageRules gets a reference to the given CardUsageRulesType and assigns it to the CardUsageRules field.
func (o *PaymentCardType) SetCardUsageRules(v CardUsageRulesType) {
	o.CardUsageRules = &v
}

// GetValidation returns the Validation field value if set, zero value otherwise.
func (o *PaymentCardType) GetValidation() PaymentMethodValidationRuleType {
	if o == nil || IsNil(o.Validation) {
		var ret PaymentMethodValidationRuleType
		return ret
	}
	return *o.Validation
}

// GetValidationOk returns a tuple with the Validation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCardType) GetValidationOk() (*PaymentMethodValidationRuleType, bool) {
	if o == nil || IsNil(o.Validation) {
		return nil, false
	}
	return o.Validation, true
}

// HasValidation returns a boolean if a field has been set.
func (o *PaymentCardType) HasValidation() bool {
	if o != nil && !IsNil(o.Validation) {
		return true
	}

	return false
}

// SetValidation gets a reference to the given PaymentMethodValidationRuleType and assigns it to the Validation field.
func (o *PaymentCardType) SetValidation(v PaymentMethodValidationRuleType) {
	o.Validation = &v
}

// GetMerchantNumber returns the MerchantNumber field value if set, zero value otherwise.
func (o *PaymentCardType) GetMerchantNumber() string {
	if o == nil || IsNil(o.MerchantNumber) {
		var ret string
		return ret
	}
	return *o.MerchantNumber
}

// GetMerchantNumberOk returns a tuple with the MerchantNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCardType) GetMerchantNumberOk() (*string, bool) {
	if o == nil || IsNil(o.MerchantNumber) {
		return nil, false
	}
	return o.MerchantNumber, true
}

// HasMerchantNumber returns a boolean if a field has been set.
func (o *PaymentCardType) HasMerchantNumber() bool {
	if o != nil && !IsNil(o.MerchantNumber) {
		return true
	}

	return false
}

// SetMerchantNumber gets a reference to the given string and assigns it to the MerchantNumber field.
func (o *PaymentCardType) SetMerchantNumber(v string) {
	o.MerchantNumber = &v
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *PaymentCardType) GetOption() CardOptionType {
	if o == nil || IsNil(o.Option) {
		var ret CardOptionType
		return ret
	}
	return *o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCardType) GetOptionOk() (*CardOptionType, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *PaymentCardType) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given CardOptionType and assigns it to the Option field.
func (o *PaymentCardType) SetOption(v CardOptionType) {
	o.Option = &v
}

// GetCardType returns the CardType field value if set, zero value otherwise.
func (o *PaymentCardType) GetCardType() CardTypeType {
	if o == nil || IsNil(o.CardType) {
		var ret CardTypeType
		return ret
	}
	return *o.CardType
}

// GetCardTypeOk returns a tuple with the CardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCardType) GetCardTypeOk() (*CardTypeType, bool) {
	if o == nil || IsNil(o.CardType) {
		return nil, false
	}
	return o.CardType, true
}

// HasCardType returns a boolean if a field has been set.
func (o *PaymentCardType) HasCardType() bool {
	if o != nil && !IsNil(o.CardType) {
		return true
	}

	return false
}

// SetCardType gets a reference to the given CardTypeType and assigns it to the CardType field.
func (o *PaymentCardType) SetCardType(v CardTypeType) {
	o.CardType = &v
}

// GetUserDefinedCardType returns the UserDefinedCardType field value if set, zero value otherwise.
func (o *PaymentCardType) GetUserDefinedCardType() string {
	if o == nil || IsNil(o.UserDefinedCardType) {
		var ret string
		return ret
	}
	return *o.UserDefinedCardType
}

// GetUserDefinedCardTypeOk returns a tuple with the UserDefinedCardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCardType) GetUserDefinedCardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserDefinedCardType) {
		return nil, false
	}
	return o.UserDefinedCardType, true
}

// HasUserDefinedCardType returns a boolean if a field has been set.
func (o *PaymentCardType) HasUserDefinedCardType() bool {
	if o != nil && !IsNil(o.UserDefinedCardType) {
		return true
	}

	return false
}

// SetUserDefinedCardType gets a reference to the given string and assigns it to the UserDefinedCardType field.
func (o *PaymentCardType) SetUserDefinedCardType(v string) {
	o.UserDefinedCardType = &v
}

// GetProcessing returns the Processing field value if set, zero value otherwise.
func (o *PaymentCardType) GetProcessing() CardProcessingType {
	if o == nil || IsNil(o.Processing) {
		var ret CardProcessingType
		return ret
	}
	return *o.Processing
}

// GetProcessingOk returns a tuple with the Processing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentCardType) GetProcessingOk() (*CardProcessingType, bool) {
	if o == nil || IsNil(o.Processing) {
		return nil, false
	}
	return o.Processing, true
}

// HasProcessing returns a boolean if a field has been set.
func (o *PaymentCardType) HasProcessing() bool {
	if o != nil && !IsNil(o.Processing) {
		return true
	}

	return false
}

// SetProcessing gets a reference to the given CardProcessingType and assigns it to the Processing field.
func (o *PaymentCardType) SetProcessing(v CardProcessingType) {
	o.Processing = &v
}

func (o PaymentCardType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentCardType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CardUsageRules) {
		toSerialize["cardUsageRules"] = o.CardUsageRules
	}
	if !IsNil(o.Validation) {
		toSerialize["validation"] = o.Validation
	}
	if !IsNil(o.MerchantNumber) {
		toSerialize["merchantNumber"] = o.MerchantNumber
	}
	if !IsNil(o.Option) {
		toSerialize["option"] = o.Option
	}
	if !IsNil(o.CardType) {
		toSerialize["cardType"] = o.CardType
	}
	if !IsNil(o.UserDefinedCardType) {
		toSerialize["userDefinedCardType"] = o.UserDefinedCardType
	}
	if !IsNil(o.Processing) {
		toSerialize["processing"] = o.Processing
	}
	return toSerialize, nil
}

type NullablePaymentCardType struct {
	value *PaymentCardType
	isSet bool
}

func (v NullablePaymentCardType) Get() *PaymentCardType {
	return v.value
}

func (v *NullablePaymentCardType) Set(val *PaymentCardType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentCardType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentCardType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentCardType(val *PaymentCardType) *NullablePaymentCardType {
	return &NullablePaymentCardType{value: val, isSet: true}
}

func (v NullablePaymentCardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentCardType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


