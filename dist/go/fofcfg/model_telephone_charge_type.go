/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// TelephoneChargeType Auto Choose
type TelephoneChargeType string

// List of telephoneChargeType
const (
	TELEPHONECHARGETYPE__0 TelephoneChargeType = "0"
	TELEPHONECHARGETYPE__1 TelephoneChargeType = "1"
	TELEPHONECHARGETYPE__2 TelephoneChargeType = "2"
)

// All allowed values of TelephoneChargeType enum
var AllowedTelephoneChargeTypeEnumValues = []TelephoneChargeType{
	"0",
	"1",
	"2",
}

func (v *TelephoneChargeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TelephoneChargeType(value)
	for _, existing := range AllowedTelephoneChargeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TelephoneChargeType", value)
}

// NewTelephoneChargeTypeFromValue returns a pointer to a valid TelephoneChargeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTelephoneChargeTypeFromValue(v string) (*TelephoneChargeType, error) {
	ev := TelephoneChargeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TelephoneChargeType: valid values are %v", v, AllowedTelephoneChargeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TelephoneChargeType) IsValid() bool {
	for _, existing := range AllowedTelephoneChargeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to telephoneChargeType value
func (v TelephoneChargeType) Ptr() *TelephoneChargeType {
	return &v
}

type NullableTelephoneChargeType struct {
	value *TelephoneChargeType
	isSet bool
}

func (v NullableTelephoneChargeType) Get() *TelephoneChargeType {
	return v.value
}

func (v *NullableTelephoneChargeType) Set(val *TelephoneChargeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTelephoneChargeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTelephoneChargeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelephoneChargeType(val *TelephoneChargeType) *NullableTelephoneChargeType {
	return &NullableTelephoneChargeType{value: val, isSet: true}
}

func (v NullableTelephoneChargeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelephoneChargeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

