/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the FiscalPeriodEditType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalPeriodEditType{}

// FiscalPeriodEditType Values of the old primary key.
type FiscalPeriodEditType struct {
	// Resort for which the Period is defined.
	HotelId *string `json:"hotelId,omitempty"`
	// Id of the Year.
	YearId *float32 `json:"yearId,omitempty"`
	// Start Date of the Period
	StartDate *string `json:"startDate,omitempty"`
	NewPeriod *FiscalPeriodType `json:"newPeriod,omitempty"`
}

// NewFiscalPeriodEditType instantiates a new FiscalPeriodEditType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalPeriodEditType() *FiscalPeriodEditType {
	this := FiscalPeriodEditType{}
	return &this
}

// NewFiscalPeriodEditTypeWithDefaults instantiates a new FiscalPeriodEditType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalPeriodEditTypeWithDefaults() *FiscalPeriodEditType {
	this := FiscalPeriodEditType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FiscalPeriodEditType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodEditType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FiscalPeriodEditType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FiscalPeriodEditType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetYearId returns the YearId field value if set, zero value otherwise.
func (o *FiscalPeriodEditType) GetYearId() float32 {
	if o == nil || IsNil(o.YearId) {
		var ret float32
		return ret
	}
	return *o.YearId
}

// GetYearIdOk returns a tuple with the YearId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodEditType) GetYearIdOk() (*float32, bool) {
	if o == nil || IsNil(o.YearId) {
		return nil, false
	}
	return o.YearId, true
}

// HasYearId returns a boolean if a field has been set.
func (o *FiscalPeriodEditType) HasYearId() bool {
	if o != nil && !IsNil(o.YearId) {
		return true
	}

	return false
}

// SetYearId gets a reference to the given float32 and assigns it to the YearId field.
func (o *FiscalPeriodEditType) SetYearId(v float32) {
	o.YearId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *FiscalPeriodEditType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodEditType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *FiscalPeriodEditType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *FiscalPeriodEditType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetNewPeriod returns the NewPeriod field value if set, zero value otherwise.
func (o *FiscalPeriodEditType) GetNewPeriod() FiscalPeriodType {
	if o == nil || IsNil(o.NewPeriod) {
		var ret FiscalPeriodType
		return ret
	}
	return *o.NewPeriod
}

// GetNewPeriodOk returns a tuple with the NewPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalPeriodEditType) GetNewPeriodOk() (*FiscalPeriodType, bool) {
	if o == nil || IsNil(o.NewPeriod) {
		return nil, false
	}
	return o.NewPeriod, true
}

// HasNewPeriod returns a boolean if a field has been set.
func (o *FiscalPeriodEditType) HasNewPeriod() bool {
	if o != nil && !IsNil(o.NewPeriod) {
		return true
	}

	return false
}

// SetNewPeriod gets a reference to the given FiscalPeriodType and assigns it to the NewPeriod field.
func (o *FiscalPeriodEditType) SetNewPeriod(v FiscalPeriodType) {
	o.NewPeriod = &v
}

func (o FiscalPeriodEditType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalPeriodEditType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.YearId) {
		toSerialize["yearId"] = o.YearId
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.NewPeriod) {
		toSerialize["newPeriod"] = o.NewPeriod
	}
	return toSerialize, nil
}

type NullableFiscalPeriodEditType struct {
	value *FiscalPeriodEditType
	isSet bool
}

func (v NullableFiscalPeriodEditType) Get() *FiscalPeriodEditType {
	return v.value
}

func (v *NullableFiscalPeriodEditType) Set(val *FiscalPeriodEditType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalPeriodEditType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalPeriodEditType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalPeriodEditType(val *FiscalPeriodEditType) *NullableFiscalPeriodEditType {
	return &NullableFiscalPeriodEditType{value: val, isSet: true}
}

func (v NullableFiscalPeriodEditType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalPeriodEditType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


