/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the MonthlyCateringInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonthlyCateringInfoType{}

// MonthlyCateringInfoType Holds monthly Catering summary information
type MonthlyCateringInfoType struct {
	// No of Covers for a month.
	Covers *int32 `json:"covers,omitempty"`
	// Month number
	Month *int32 `json:"month,omitempty"`
	// Revenue total for a month.
	Revenue *float32 `json:"revenue,omitempty"`
}

// NewMonthlyCateringInfoType instantiates a new MonthlyCateringInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyCateringInfoType() *MonthlyCateringInfoType {
	this := MonthlyCateringInfoType{}
	return &this
}

// NewMonthlyCateringInfoTypeWithDefaults instantiates a new MonthlyCateringInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyCateringInfoTypeWithDefaults() *MonthlyCateringInfoType {
	this := MonthlyCateringInfoType{}
	return &this
}

// GetCovers returns the Covers field value if set, zero value otherwise.
func (o *MonthlyCateringInfoType) GetCovers() int32 {
	if o == nil || IsNil(o.Covers) {
		var ret int32
		return ret
	}
	return *o.Covers
}

// GetCoversOk returns a tuple with the Covers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyCateringInfoType) GetCoversOk() (*int32, bool) {
	if o == nil || IsNil(o.Covers) {
		return nil, false
	}
	return o.Covers, true
}

// HasCovers returns a boolean if a field has been set.
func (o *MonthlyCateringInfoType) HasCovers() bool {
	if o != nil && !IsNil(o.Covers) {
		return true
	}

	return false
}

// SetCovers gets a reference to the given int32 and assigns it to the Covers field.
func (o *MonthlyCateringInfoType) SetCovers(v int32) {
	o.Covers = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *MonthlyCateringInfoType) GetMonth() int32 {
	if o == nil || IsNil(o.Month) {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyCateringInfoType) GetMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MonthlyCateringInfoType) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *MonthlyCateringInfoType) SetMonth(v int32) {
	o.Month = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *MonthlyCateringInfoType) GetRevenue() float32 {
	if o == nil || IsNil(o.Revenue) {
		var ret float32
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyCateringInfoType) GetRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *MonthlyCateringInfoType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float32 and assigns it to the Revenue field.
func (o *MonthlyCateringInfoType) SetRevenue(v float32) {
	o.Revenue = &v
}

func (o MonthlyCateringInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonthlyCateringInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Covers) {
		toSerialize["covers"] = o.Covers
	}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	return toSerialize, nil
}

type NullableMonthlyCateringInfoType struct {
	value *MonthlyCateringInfoType
	isSet bool
}

func (v NullableMonthlyCateringInfoType) Get() *MonthlyCateringInfoType {
	return v.value
}

func (v *NullableMonthlyCateringInfoType) Set(val *MonthlyCateringInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyCateringInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyCateringInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyCateringInfoType(val *MonthlyCateringInfoType) *NullableMonthlyCateringInfoType {
	return &NullableMonthlyCateringInfoType{value: val, isSet: true}
}

func (v NullableMonthlyCateringInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyCateringInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


