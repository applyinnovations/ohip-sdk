/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the PaymentMethodTransactionInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentMethodTransactionInfoType{}

// PaymentMethodTransactionInfoType Provides information about the transactions including the transaction code, group, subgroup and the posting amount.
type PaymentMethodTransactionInfoType struct {
	Description *string `json:"description,omitempty"`
	PostingAmount *PostingAmountType `json:"postingAmount,omitempty"`
	Surcharge *SurchargeType `json:"surcharge,omitempty"`
	TransactionCode *string `json:"transactionCode,omitempty"`
	TransactionGroup *string `json:"transactionGroup,omitempty"`
	TransactionSubGroup *string `json:"transactionSubGroup,omitempty"`
	TransactionDisplay *string `json:"transactionDisplay,omitempty"`
}

// NewPaymentMethodTransactionInfoType instantiates a new PaymentMethodTransactionInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodTransactionInfoType() *PaymentMethodTransactionInfoType {
	this := PaymentMethodTransactionInfoType{}
	return &this
}

// NewPaymentMethodTransactionInfoTypeWithDefaults instantiates a new PaymentMethodTransactionInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodTransactionInfoTypeWithDefaults() *PaymentMethodTransactionInfoType {
	this := PaymentMethodTransactionInfoType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PaymentMethodTransactionInfoType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodTransactionInfoType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PaymentMethodTransactionInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PaymentMethodTransactionInfoType) SetDescription(v string) {
	o.Description = &v
}

// GetPostingAmount returns the PostingAmount field value if set, zero value otherwise.
func (o *PaymentMethodTransactionInfoType) GetPostingAmount() PostingAmountType {
	if o == nil || IsNil(o.PostingAmount) {
		var ret PostingAmountType
		return ret
	}
	return *o.PostingAmount
}

// GetPostingAmountOk returns a tuple with the PostingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodTransactionInfoType) GetPostingAmountOk() (*PostingAmountType, bool) {
	if o == nil || IsNil(o.PostingAmount) {
		return nil, false
	}
	return o.PostingAmount, true
}

// HasPostingAmount returns a boolean if a field has been set.
func (o *PaymentMethodTransactionInfoType) HasPostingAmount() bool {
	if o != nil && !IsNil(o.PostingAmount) {
		return true
	}

	return false
}

// SetPostingAmount gets a reference to the given PostingAmountType and assigns it to the PostingAmount field.
func (o *PaymentMethodTransactionInfoType) SetPostingAmount(v PostingAmountType) {
	o.PostingAmount = &v
}

// GetSurcharge returns the Surcharge field value if set, zero value otherwise.
func (o *PaymentMethodTransactionInfoType) GetSurcharge() SurchargeType {
	if o == nil || IsNil(o.Surcharge) {
		var ret SurchargeType
		return ret
	}
	return *o.Surcharge
}

// GetSurchargeOk returns a tuple with the Surcharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodTransactionInfoType) GetSurchargeOk() (*SurchargeType, bool) {
	if o == nil || IsNil(o.Surcharge) {
		return nil, false
	}
	return o.Surcharge, true
}

// HasSurcharge returns a boolean if a field has been set.
func (o *PaymentMethodTransactionInfoType) HasSurcharge() bool {
	if o != nil && !IsNil(o.Surcharge) {
		return true
	}

	return false
}

// SetSurcharge gets a reference to the given SurchargeType and assigns it to the Surcharge field.
func (o *PaymentMethodTransactionInfoType) SetSurcharge(v SurchargeType) {
	o.Surcharge = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *PaymentMethodTransactionInfoType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodTransactionInfoType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *PaymentMethodTransactionInfoType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *PaymentMethodTransactionInfoType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionGroup returns the TransactionGroup field value if set, zero value otherwise.
func (o *PaymentMethodTransactionInfoType) GetTransactionGroup() string {
	if o == nil || IsNil(o.TransactionGroup) {
		var ret string
		return ret
	}
	return *o.TransactionGroup
}

// GetTransactionGroupOk returns a tuple with the TransactionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodTransactionInfoType) GetTransactionGroupOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionGroup) {
		return nil, false
	}
	return o.TransactionGroup, true
}

// HasTransactionGroup returns a boolean if a field has been set.
func (o *PaymentMethodTransactionInfoType) HasTransactionGroup() bool {
	if o != nil && !IsNil(o.TransactionGroup) {
		return true
	}

	return false
}

// SetTransactionGroup gets a reference to the given string and assigns it to the TransactionGroup field.
func (o *PaymentMethodTransactionInfoType) SetTransactionGroup(v string) {
	o.TransactionGroup = &v
}

// GetTransactionSubGroup returns the TransactionSubGroup field value if set, zero value otherwise.
func (o *PaymentMethodTransactionInfoType) GetTransactionSubGroup() string {
	if o == nil || IsNil(o.TransactionSubGroup) {
		var ret string
		return ret
	}
	return *o.TransactionSubGroup
}

// GetTransactionSubGroupOk returns a tuple with the TransactionSubGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodTransactionInfoType) GetTransactionSubGroupOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionSubGroup) {
		return nil, false
	}
	return o.TransactionSubGroup, true
}

// HasTransactionSubGroup returns a boolean if a field has been set.
func (o *PaymentMethodTransactionInfoType) HasTransactionSubGroup() bool {
	if o != nil && !IsNil(o.TransactionSubGroup) {
		return true
	}

	return false
}

// SetTransactionSubGroup gets a reference to the given string and assigns it to the TransactionSubGroup field.
func (o *PaymentMethodTransactionInfoType) SetTransactionSubGroup(v string) {
	o.TransactionSubGroup = &v
}

// GetTransactionDisplay returns the TransactionDisplay field value if set, zero value otherwise.
func (o *PaymentMethodTransactionInfoType) GetTransactionDisplay() string {
	if o == nil || IsNil(o.TransactionDisplay) {
		var ret string
		return ret
	}
	return *o.TransactionDisplay
}

// GetTransactionDisplayOk returns a tuple with the TransactionDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodTransactionInfoType) GetTransactionDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDisplay) {
		return nil, false
	}
	return o.TransactionDisplay, true
}

// HasTransactionDisplay returns a boolean if a field has been set.
func (o *PaymentMethodTransactionInfoType) HasTransactionDisplay() bool {
	if o != nil && !IsNil(o.TransactionDisplay) {
		return true
	}

	return false
}

// SetTransactionDisplay gets a reference to the given string and assigns it to the TransactionDisplay field.
func (o *PaymentMethodTransactionInfoType) SetTransactionDisplay(v string) {
	o.TransactionDisplay = &v
}

func (o PaymentMethodTransactionInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentMethodTransactionInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.PostingAmount) {
		toSerialize["postingAmount"] = o.PostingAmount
	}
	if !IsNil(o.Surcharge) {
		toSerialize["surcharge"] = o.Surcharge
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionGroup) {
		toSerialize["transactionGroup"] = o.TransactionGroup
	}
	if !IsNil(o.TransactionSubGroup) {
		toSerialize["transactionSubGroup"] = o.TransactionSubGroup
	}
	if !IsNil(o.TransactionDisplay) {
		toSerialize["transactionDisplay"] = o.TransactionDisplay
	}
	return toSerialize, nil
}

type NullablePaymentMethodTransactionInfoType struct {
	value *PaymentMethodTransactionInfoType
	isSet bool
}

func (v NullablePaymentMethodTransactionInfoType) Get() *PaymentMethodTransactionInfoType {
	return v.value
}

func (v *NullablePaymentMethodTransactionInfoType) Set(val *PaymentMethodTransactionInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodTransactionInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodTransactionInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodTransactionInfoType(val *PaymentMethodTransactionInfoType) *NullablePaymentMethodTransactionInfoType {
	return &NullablePaymentMethodTransactionInfoType{value: val, isSet: true}
}

func (v NullablePaymentMethodTransactionInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodTransactionInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


