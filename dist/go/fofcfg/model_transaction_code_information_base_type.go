/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TransactionCodeInformationBaseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionCodeInformationBaseType{}

// TransactionCodeInformationBaseType Budget Forecast information for Transaction segment code.
type TransactionCodeInformationBaseType struct {
	// Transaction code for which budget forecast information is fetched.
	TransactionCode *string `json:"transactionCode,omitempty"`
	// Transaction code group of segment code.
	TransactionCodeGrp *string `json:"transactionCodeGrp,omitempty"`
	// Transaction code description for Transaction code.
	TransactionCodeDescription *string `json:"transactionCodeDescription,omitempty"`
	BudgetInfo *TransactionInfoType `json:"budgetInfo,omitempty"`
	ForecastInfo *TransactionInfoType `json:"forecastInfo,omitempty"`
}

// NewTransactionCodeInformationBaseType instantiates a new TransactionCodeInformationBaseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCodeInformationBaseType() *TransactionCodeInformationBaseType {
	this := TransactionCodeInformationBaseType{}
	return &this
}

// NewTransactionCodeInformationBaseTypeWithDefaults instantiates a new TransactionCodeInformationBaseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCodeInformationBaseTypeWithDefaults() *TransactionCodeInformationBaseType {
	this := TransactionCodeInformationBaseType{}
	return &this
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *TransactionCodeInformationBaseType) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationBaseType) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *TransactionCodeInformationBaseType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *TransactionCodeInformationBaseType) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetTransactionCodeGrp returns the TransactionCodeGrp field value if set, zero value otherwise.
func (o *TransactionCodeInformationBaseType) GetTransactionCodeGrp() string {
	if o == nil || IsNil(o.TransactionCodeGrp) {
		var ret string
		return ret
	}
	return *o.TransactionCodeGrp
}

// GetTransactionCodeGrpOk returns a tuple with the TransactionCodeGrp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationBaseType) GetTransactionCodeGrpOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCodeGrp) {
		return nil, false
	}
	return o.TransactionCodeGrp, true
}

// HasTransactionCodeGrp returns a boolean if a field has been set.
func (o *TransactionCodeInformationBaseType) HasTransactionCodeGrp() bool {
	if o != nil && !IsNil(o.TransactionCodeGrp) {
		return true
	}

	return false
}

// SetTransactionCodeGrp gets a reference to the given string and assigns it to the TransactionCodeGrp field.
func (o *TransactionCodeInformationBaseType) SetTransactionCodeGrp(v string) {
	o.TransactionCodeGrp = &v
}

// GetTransactionCodeDescription returns the TransactionCodeDescription field value if set, zero value otherwise.
func (o *TransactionCodeInformationBaseType) GetTransactionCodeDescription() string {
	if o == nil || IsNil(o.TransactionCodeDescription) {
		var ret string
		return ret
	}
	return *o.TransactionCodeDescription
}

// GetTransactionCodeDescriptionOk returns a tuple with the TransactionCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationBaseType) GetTransactionCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCodeDescription) {
		return nil, false
	}
	return o.TransactionCodeDescription, true
}

// HasTransactionCodeDescription returns a boolean if a field has been set.
func (o *TransactionCodeInformationBaseType) HasTransactionCodeDescription() bool {
	if o != nil && !IsNil(o.TransactionCodeDescription) {
		return true
	}

	return false
}

// SetTransactionCodeDescription gets a reference to the given string and assigns it to the TransactionCodeDescription field.
func (o *TransactionCodeInformationBaseType) SetTransactionCodeDescription(v string) {
	o.TransactionCodeDescription = &v
}

// GetBudgetInfo returns the BudgetInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationBaseType) GetBudgetInfo() TransactionInfoType {
	if o == nil || IsNil(o.BudgetInfo) {
		var ret TransactionInfoType
		return ret
	}
	return *o.BudgetInfo
}

// GetBudgetInfoOk returns a tuple with the BudgetInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationBaseType) GetBudgetInfoOk() (*TransactionInfoType, bool) {
	if o == nil || IsNil(o.BudgetInfo) {
		return nil, false
	}
	return o.BudgetInfo, true
}

// HasBudgetInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationBaseType) HasBudgetInfo() bool {
	if o != nil && !IsNil(o.BudgetInfo) {
		return true
	}

	return false
}

// SetBudgetInfo gets a reference to the given TransactionInfoType and assigns it to the BudgetInfo field.
func (o *TransactionCodeInformationBaseType) SetBudgetInfo(v TransactionInfoType) {
	o.BudgetInfo = &v
}

// GetForecastInfo returns the ForecastInfo field value if set, zero value otherwise.
func (o *TransactionCodeInformationBaseType) GetForecastInfo() TransactionInfoType {
	if o == nil || IsNil(o.ForecastInfo) {
		var ret TransactionInfoType
		return ret
	}
	return *o.ForecastInfo
}

// GetForecastInfoOk returns a tuple with the ForecastInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCodeInformationBaseType) GetForecastInfoOk() (*TransactionInfoType, bool) {
	if o == nil || IsNil(o.ForecastInfo) {
		return nil, false
	}
	return o.ForecastInfo, true
}

// HasForecastInfo returns a boolean if a field has been set.
func (o *TransactionCodeInformationBaseType) HasForecastInfo() bool {
	if o != nil && !IsNil(o.ForecastInfo) {
		return true
	}

	return false
}

// SetForecastInfo gets a reference to the given TransactionInfoType and assigns it to the ForecastInfo field.
func (o *TransactionCodeInformationBaseType) SetForecastInfo(v TransactionInfoType) {
	o.ForecastInfo = &v
}

func (o TransactionCodeInformationBaseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionCodeInformationBaseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.TransactionCodeGrp) {
		toSerialize["transactionCodeGrp"] = o.TransactionCodeGrp
	}
	if !IsNil(o.TransactionCodeDescription) {
		toSerialize["transactionCodeDescription"] = o.TransactionCodeDescription
	}
	if !IsNil(o.BudgetInfo) {
		toSerialize["budgetInfo"] = o.BudgetInfo
	}
	if !IsNil(o.ForecastInfo) {
		toSerialize["forecastInfo"] = o.ForecastInfo
	}
	return toSerialize, nil
}

type NullableTransactionCodeInformationBaseType struct {
	value *TransactionCodeInformationBaseType
	isSet bool
}

func (v NullableTransactionCodeInformationBaseType) Get() *TransactionCodeInformationBaseType {
	return v.value
}

func (v *NullableTransactionCodeInformationBaseType) Set(val *TransactionCodeInformationBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCodeInformationBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCodeInformationBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCodeInformationBaseType(val *TransactionCodeInformationBaseType) *NullableTransactionCodeInformationBaseType {
	return &NullableTransactionCodeInformationBaseType{value: val, isSet: true}
}

func (v NullableTransactionCodeInformationBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCodeInformationBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


