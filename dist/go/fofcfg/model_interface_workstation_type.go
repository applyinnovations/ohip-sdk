/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the InterfaceWorkstationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceWorkstationType{}

// InterfaceWorkstationType struct for InterfaceWorkstationType
type InterfaceWorkstationType struct {
	// Hotel Code of a workstation.
	HotelId *string `json:"hotelId,omitempty"`
	// Logo of a workstation.
	Logo *string `json:"logo,omitempty"`
	// Internal code of a workstation.
	InternalCode *int32 `json:"internalCode,omitempty"`
	// Workstation of a hotel interface.
	Workstation *string `json:"workstation,omitempty"`
	// IP of a workstation.
	DeviceIp *string `json:"deviceIp,omitempty"`
	// Location of a workstation.
	Location *string `json:"location,omitempty"`
	// Type of a workstation.
	Type *string `json:"type,omitempty"`
	// Device Group / Area.
	DeviceLocation *string `json:"deviceLocation,omitempty"`
}

// NewInterfaceWorkstationType instantiates a new InterfaceWorkstationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceWorkstationType() *InterfaceWorkstationType {
	this := InterfaceWorkstationType{}
	return &this
}

// NewInterfaceWorkstationTypeWithDefaults instantiates a new InterfaceWorkstationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceWorkstationTypeWithDefaults() *InterfaceWorkstationType {
	this := InterfaceWorkstationType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfaceWorkstationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InterfaceWorkstationType) SetLogo(v string) {
	o.Logo = &v
}

// GetInternalCode returns the InternalCode field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetInternalCode() int32 {
	if o == nil || IsNil(o.InternalCode) {
		var ret int32
		return ret
	}
	return *o.InternalCode
}

// GetInternalCodeOk returns a tuple with the InternalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetInternalCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.InternalCode) {
		return nil, false
	}
	return o.InternalCode, true
}

// HasInternalCode returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasInternalCode() bool {
	if o != nil && !IsNil(o.InternalCode) {
		return true
	}

	return false
}

// SetInternalCode gets a reference to the given int32 and assigns it to the InternalCode field.
func (o *InterfaceWorkstationType) SetInternalCode(v int32) {
	o.InternalCode = &v
}

// GetWorkstation returns the Workstation field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetWorkstation() string {
	if o == nil || IsNil(o.Workstation) {
		var ret string
		return ret
	}
	return *o.Workstation
}

// GetWorkstationOk returns a tuple with the Workstation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetWorkstationOk() (*string, bool) {
	if o == nil || IsNil(o.Workstation) {
		return nil, false
	}
	return o.Workstation, true
}

// HasWorkstation returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasWorkstation() bool {
	if o != nil && !IsNil(o.Workstation) {
		return true
	}

	return false
}

// SetWorkstation gets a reference to the given string and assigns it to the Workstation field.
func (o *InterfaceWorkstationType) SetWorkstation(v string) {
	o.Workstation = &v
}

// GetDeviceIp returns the DeviceIp field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetDeviceIp() string {
	if o == nil || IsNil(o.DeviceIp) {
		var ret string
		return ret
	}
	return *o.DeviceIp
}

// GetDeviceIpOk returns a tuple with the DeviceIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetDeviceIpOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceIp) {
		return nil, false
	}
	return o.DeviceIp, true
}

// HasDeviceIp returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasDeviceIp() bool {
	if o != nil && !IsNil(o.DeviceIp) {
		return true
	}

	return false
}

// SetDeviceIp gets a reference to the given string and assigns it to the DeviceIp field.
func (o *InterfaceWorkstationType) SetDeviceIp(v string) {
	o.DeviceIp = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *InterfaceWorkstationType) SetLocation(v string) {
	o.Location = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InterfaceWorkstationType) SetType(v string) {
	o.Type = &v
}

// GetDeviceLocation returns the DeviceLocation field value if set, zero value otherwise.
func (o *InterfaceWorkstationType) GetDeviceLocation() string {
	if o == nil || IsNil(o.DeviceLocation) {
		var ret string
		return ret
	}
	return *o.DeviceLocation
}

// GetDeviceLocationOk returns a tuple with the DeviceLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceWorkstationType) GetDeviceLocationOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceLocation) {
		return nil, false
	}
	return o.DeviceLocation, true
}

// HasDeviceLocation returns a boolean if a field has been set.
func (o *InterfaceWorkstationType) HasDeviceLocation() bool {
	if o != nil && !IsNil(o.DeviceLocation) {
		return true
	}

	return false
}

// SetDeviceLocation gets a reference to the given string and assigns it to the DeviceLocation field.
func (o *InterfaceWorkstationType) SetDeviceLocation(v string) {
	o.DeviceLocation = &v
}

func (o InterfaceWorkstationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceWorkstationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.InternalCode) {
		toSerialize["internalCode"] = o.InternalCode
	}
	if !IsNil(o.Workstation) {
		toSerialize["workstation"] = o.Workstation
	}
	if !IsNil(o.DeviceIp) {
		toSerialize["deviceIp"] = o.DeviceIp
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DeviceLocation) {
		toSerialize["deviceLocation"] = o.DeviceLocation
	}
	return toSerialize, nil
}

type NullableInterfaceWorkstationType struct {
	value *InterfaceWorkstationType
	isSet bool
}

func (v NullableInterfaceWorkstationType) Get() *InterfaceWorkstationType {
	return v.value
}

func (v *NullableInterfaceWorkstationType) Set(val *InterfaceWorkstationType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceWorkstationType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceWorkstationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceWorkstationType(val *InterfaceWorkstationType) *NullableInterfaceWorkstationType {
	return &NullableInterfaceWorkstationType{value: val, isSet: true}
}

func (v NullableInterfaceWorkstationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceWorkstationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


