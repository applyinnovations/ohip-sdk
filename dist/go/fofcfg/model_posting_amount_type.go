/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the PostingAmountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostingAmountType{}

// PostingAmountType struct for PostingAmountType
type PostingAmountType struct {
	MinimumAmount *CurrencyAmountType `json:"minimumAmount,omitempty"`
	MaximumAmount *CurrencyAmountType `json:"maximumAmount,omitempty"`
}

// NewPostingAmountType instantiates a new PostingAmountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostingAmountType() *PostingAmountType {
	this := PostingAmountType{}
	return &this
}

// NewPostingAmountTypeWithDefaults instantiates a new PostingAmountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostingAmountTypeWithDefaults() *PostingAmountType {
	this := PostingAmountType{}
	return &this
}

// GetMinimumAmount returns the MinimumAmount field value if set, zero value otherwise.
func (o *PostingAmountType) GetMinimumAmount() CurrencyAmountType {
	if o == nil || IsNil(o.MinimumAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.MinimumAmount
}

// GetMinimumAmountOk returns a tuple with the MinimumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingAmountType) GetMinimumAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.MinimumAmount) {
		return nil, false
	}
	return o.MinimumAmount, true
}

// HasMinimumAmount returns a boolean if a field has been set.
func (o *PostingAmountType) HasMinimumAmount() bool {
	if o != nil && !IsNil(o.MinimumAmount) {
		return true
	}

	return false
}

// SetMinimumAmount gets a reference to the given CurrencyAmountType and assigns it to the MinimumAmount field.
func (o *PostingAmountType) SetMinimumAmount(v CurrencyAmountType) {
	o.MinimumAmount = &v
}

// GetMaximumAmount returns the MaximumAmount field value if set, zero value otherwise.
func (o *PostingAmountType) GetMaximumAmount() CurrencyAmountType {
	if o == nil || IsNil(o.MaximumAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.MaximumAmount
}

// GetMaximumAmountOk returns a tuple with the MaximumAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostingAmountType) GetMaximumAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.MaximumAmount) {
		return nil, false
	}
	return o.MaximumAmount, true
}

// HasMaximumAmount returns a boolean if a field has been set.
func (o *PostingAmountType) HasMaximumAmount() bool {
	if o != nil && !IsNil(o.MaximumAmount) {
		return true
	}

	return false
}

// SetMaximumAmount gets a reference to the given CurrencyAmountType and assigns it to the MaximumAmount field.
func (o *PostingAmountType) SetMaximumAmount(v CurrencyAmountType) {
	o.MaximumAmount = &v
}

func (o PostingAmountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostingAmountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinimumAmount) {
		toSerialize["minimumAmount"] = o.MinimumAmount
	}
	if !IsNil(o.MaximumAmount) {
		toSerialize["maximumAmount"] = o.MaximumAmount
	}
	return toSerialize, nil
}

type NullablePostingAmountType struct {
	value *PostingAmountType
	isSet bool
}

func (v NullablePostingAmountType) Get() *PostingAmountType {
	return v.value
}

func (v *NullablePostingAmountType) Set(val *PostingAmountType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostingAmountType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostingAmountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostingAmountType(val *PostingAmountType) *NullablePostingAmountType {
	return &NullablePostingAmountType{value: val, isSet: true}
}

func (v NullablePostingAmountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostingAmountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


