/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CompTypeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompTypeType{}

// CompTypeType Information representation of Comp Type.
type CompTypeType struct {
	// Code is used to identify the CompType.
	CompTypeCode *string `json:"compTypeCode,omitempty"`
	// Text is used to describe the CompType.
	CompTypeDescription *string `json:"compTypeDescription,omitempty"`
	// Comp Type record sequence number.
	DisplayOrder *float32 `json:"displayOrder,omitempty"`
}

// NewCompTypeType instantiates a new CompTypeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompTypeType() *CompTypeType {
	this := CompTypeType{}
	return &this
}

// NewCompTypeTypeWithDefaults instantiates a new CompTypeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompTypeTypeWithDefaults() *CompTypeType {
	this := CompTypeType{}
	return &this
}

// GetCompTypeCode returns the CompTypeCode field value if set, zero value otherwise.
func (o *CompTypeType) GetCompTypeCode() string {
	if o == nil || IsNil(o.CompTypeCode) {
		var ret string
		return ret
	}
	return *o.CompTypeCode
}

// GetCompTypeCodeOk returns a tuple with the CompTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompTypeType) GetCompTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CompTypeCode) {
		return nil, false
	}
	return o.CompTypeCode, true
}

// HasCompTypeCode returns a boolean if a field has been set.
func (o *CompTypeType) HasCompTypeCode() bool {
	if o != nil && !IsNil(o.CompTypeCode) {
		return true
	}

	return false
}

// SetCompTypeCode gets a reference to the given string and assigns it to the CompTypeCode field.
func (o *CompTypeType) SetCompTypeCode(v string) {
	o.CompTypeCode = &v
}

// GetCompTypeDescription returns the CompTypeDescription field value if set, zero value otherwise.
func (o *CompTypeType) GetCompTypeDescription() string {
	if o == nil || IsNil(o.CompTypeDescription) {
		var ret string
		return ret
	}
	return *o.CompTypeDescription
}

// GetCompTypeDescriptionOk returns a tuple with the CompTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompTypeType) GetCompTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CompTypeDescription) {
		return nil, false
	}
	return o.CompTypeDescription, true
}

// HasCompTypeDescription returns a boolean if a field has been set.
func (o *CompTypeType) HasCompTypeDescription() bool {
	if o != nil && !IsNil(o.CompTypeDescription) {
		return true
	}

	return false
}

// SetCompTypeDescription gets a reference to the given string and assigns it to the CompTypeDescription field.
func (o *CompTypeType) SetCompTypeDescription(v string) {
	o.CompTypeDescription = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *CompTypeType) GetDisplayOrder() float32 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret float32
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompTypeType) GetDisplayOrderOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// HasDisplayOrder returns a boolean if a field has been set.
func (o *CompTypeType) HasDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given float32 and assigns it to the DisplayOrder field.
func (o *CompTypeType) SetDisplayOrder(v float32) {
	o.DisplayOrder = &v
}

func (o CompTypeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompTypeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompTypeCode) {
		toSerialize["compTypeCode"] = o.CompTypeCode
	}
	if !IsNil(o.CompTypeDescription) {
		toSerialize["compTypeDescription"] = o.CompTypeDescription
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	return toSerialize, nil
}

type NullableCompTypeType struct {
	value *CompTypeType
	isSet bool
}

func (v NullableCompTypeType) Get() *CompTypeType {
	return v.value
}

func (v *NullableCompTypeType) Set(val *CompTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompTypeType(val *CompTypeType) *NullableCompTypeType {
	return &NullableCompTypeType{value: val, isSet: true}
}

func (v NullableCompTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


