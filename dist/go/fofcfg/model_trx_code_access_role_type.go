/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TrxCodeAccessRoleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrxCodeAccessRoleType{}

// TrxCodeAccessRoleType Role having access to set of transaction codes
type TrxCodeAccessRoleType struct {
	// Role code
	Code *string `json:"code,omitempty"`
	// Transaction Codes associated with particular Hotel
	Hotel []HotelTrxCodesAccessType `json:"hotel,omitempty"`
	Level *RoleLevelType `json:"level,omitempty"`
	// Role level code, for Chain Level code Level code will be Chain Code the role belongs to and for Hotel level role it will b the Hotel Code the role belongs to.
	LevelCode *string `json:"levelCode,omitempty"`
}

// NewTrxCodeAccessRoleType instantiates a new TrxCodeAccessRoleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrxCodeAccessRoleType() *TrxCodeAccessRoleType {
	this := TrxCodeAccessRoleType{}
	return &this
}

// NewTrxCodeAccessRoleTypeWithDefaults instantiates a new TrxCodeAccessRoleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrxCodeAccessRoleTypeWithDefaults() *TrxCodeAccessRoleType {
	this := TrxCodeAccessRoleType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TrxCodeAccessRoleType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeAccessRoleType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TrxCodeAccessRoleType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TrxCodeAccessRoleType) SetCode(v string) {
	o.Code = &v
}

// GetHotel returns the Hotel field value if set, zero value otherwise.
func (o *TrxCodeAccessRoleType) GetHotel() []HotelTrxCodesAccessType {
	if o == nil || IsNil(o.Hotel) {
		var ret []HotelTrxCodesAccessType
		return ret
	}
	return o.Hotel
}

// GetHotelOk returns a tuple with the Hotel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeAccessRoleType) GetHotelOk() ([]HotelTrxCodesAccessType, bool) {
	if o == nil || IsNil(o.Hotel) {
		return nil, false
	}
	return o.Hotel, true
}

// HasHotel returns a boolean if a field has been set.
func (o *TrxCodeAccessRoleType) HasHotel() bool {
	if o != nil && !IsNil(o.Hotel) {
		return true
	}

	return false
}

// SetHotel gets a reference to the given []HotelTrxCodesAccessType and assigns it to the Hotel field.
func (o *TrxCodeAccessRoleType) SetHotel(v []HotelTrxCodesAccessType) {
	o.Hotel = v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *TrxCodeAccessRoleType) GetLevel() RoleLevelType {
	if o == nil || IsNil(o.Level) {
		var ret RoleLevelType
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeAccessRoleType) GetLevelOk() (*RoleLevelType, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *TrxCodeAccessRoleType) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given RoleLevelType and assigns it to the Level field.
func (o *TrxCodeAccessRoleType) SetLevel(v RoleLevelType) {
	o.Level = &v
}

// GetLevelCode returns the LevelCode field value if set, zero value otherwise.
func (o *TrxCodeAccessRoleType) GetLevelCode() string {
	if o == nil || IsNil(o.LevelCode) {
		var ret string
		return ret
	}
	return *o.LevelCode
}

// GetLevelCodeOk returns a tuple with the LevelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrxCodeAccessRoleType) GetLevelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LevelCode) {
		return nil, false
	}
	return o.LevelCode, true
}

// HasLevelCode returns a boolean if a field has been set.
func (o *TrxCodeAccessRoleType) HasLevelCode() bool {
	if o != nil && !IsNil(o.LevelCode) {
		return true
	}

	return false
}

// SetLevelCode gets a reference to the given string and assigns it to the LevelCode field.
func (o *TrxCodeAccessRoleType) SetLevelCode(v string) {
	o.LevelCode = &v
}

func (o TrxCodeAccessRoleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrxCodeAccessRoleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Hotel) {
		toSerialize["hotel"] = o.Hotel
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.LevelCode) {
		toSerialize["levelCode"] = o.LevelCode
	}
	return toSerialize, nil
}

type NullableTrxCodeAccessRoleType struct {
	value *TrxCodeAccessRoleType
	isSet bool
}

func (v NullableTrxCodeAccessRoleType) Get() *TrxCodeAccessRoleType {
	return v.value
}

func (v *NullableTrxCodeAccessRoleType) Set(val *TrxCodeAccessRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrxCodeAccessRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrxCodeAccessRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrxCodeAccessRoleType(val *TrxCodeAccessRoleType) *NullableTrxCodeAccessRoleType {
	return &NullableTrxCodeAccessRoleType{value: val, isSet: true}
}

func (v NullableTrxCodeAccessRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrxCodeAccessRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


