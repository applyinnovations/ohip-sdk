/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// TransactionCodeTypeType Other Charges Transaction.
type TransactionCodeTypeType string

// List of transactionCodeTypeType
const (
	TRANSACTIONCODETYPETYPE_LODGING TransactionCodeTypeType = "Lodging"
	TRANSACTIONCODETYPETYPE_FOOD_AND_BEVERAGE TransactionCodeTypeType = "FoodAndBeverage"
	TRANSACTIONCODETYPETYPE_TELEPHONE TransactionCodeTypeType = "Telephone"
	TRANSACTIONCODETYPETYPE_MINIBAR TransactionCodeTypeType = "Minibar"
	TRANSACTIONCODETYPETYPE_TAX TransactionCodeTypeType = "Tax"
	TRANSACTIONCODETYPETYPE_NON_REVENUE TransactionCodeTypeType = "NonRevenue"
	TRANSACTIONCODETYPETYPE_OTHERS TransactionCodeTypeType = "Others"
)

// All allowed values of TransactionCodeTypeType enum
var AllowedTransactionCodeTypeTypeEnumValues = []TransactionCodeTypeType{
	"Lodging",
	"FoodAndBeverage",
	"Telephone",
	"Minibar",
	"Tax",
	"NonRevenue",
	"Others",
}

func (v *TransactionCodeTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionCodeTypeType(value)
	for _, existing := range AllowedTransactionCodeTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionCodeTypeType", value)
}

// NewTransactionCodeTypeTypeFromValue returns a pointer to a valid TransactionCodeTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionCodeTypeTypeFromValue(v string) (*TransactionCodeTypeType, error) {
	ev := TransactionCodeTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionCodeTypeType: valid values are %v", v, AllowedTransactionCodeTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionCodeTypeType) IsValid() bool {
	for _, existing := range AllowedTransactionCodeTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transactionCodeTypeType value
func (v TransactionCodeTypeType) Ptr() *TransactionCodeTypeType {
	return &v
}

type NullableTransactionCodeTypeType struct {
	value *TransactionCodeTypeType
	isSet bool
}

func (v NullableTransactionCodeTypeType) Get() *TransactionCodeTypeType {
	return v.value
}

func (v *NullableTransactionCodeTypeType) Set(val *TransactionCodeTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCodeTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCodeTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCodeTypeType(val *TransactionCodeTypeType) *NullableTransactionCodeTypeType {
	return &NullableTransactionCodeTypeType{value: val, isSet: true}
}

func (v NullableTransactionCodeTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCodeTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

