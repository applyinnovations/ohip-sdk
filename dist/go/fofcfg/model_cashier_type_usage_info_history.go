/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CashierTypeUsageInfoHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CashierTypeUsageInfoHistory{}

// CashierTypeUsageInfoHistory Statistics about the use of the cashier.
type CashierTypeUsageInfoHistory struct {
	// The date that the cashier last opened.
	LastOpened *string `json:"lastOpened,omitempty"`
	// The number of times the cashier has opened their account today.
	TimesOpened *int32 `json:"timesOpened,omitempty"`
}

// NewCashierTypeUsageInfoHistory instantiates a new CashierTypeUsageInfoHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashierTypeUsageInfoHistory() *CashierTypeUsageInfoHistory {
	this := CashierTypeUsageInfoHistory{}
	return &this
}

// NewCashierTypeUsageInfoHistoryWithDefaults instantiates a new CashierTypeUsageInfoHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashierTypeUsageInfoHistoryWithDefaults() *CashierTypeUsageInfoHistory {
	this := CashierTypeUsageInfoHistory{}
	return &this
}

// GetLastOpened returns the LastOpened field value if set, zero value otherwise.
func (o *CashierTypeUsageInfoHistory) GetLastOpened() string {
	if o == nil || IsNil(o.LastOpened) {
		var ret string
		return ret
	}
	return *o.LastOpened
}

// GetLastOpenedOk returns a tuple with the LastOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierTypeUsageInfoHistory) GetLastOpenedOk() (*string, bool) {
	if o == nil || IsNil(o.LastOpened) {
		return nil, false
	}
	return o.LastOpened, true
}

// HasLastOpened returns a boolean if a field has been set.
func (o *CashierTypeUsageInfoHistory) HasLastOpened() bool {
	if o != nil && !IsNil(o.LastOpened) {
		return true
	}

	return false
}

// SetLastOpened gets a reference to the given string and assigns it to the LastOpened field.
func (o *CashierTypeUsageInfoHistory) SetLastOpened(v string) {
	o.LastOpened = &v
}

// GetTimesOpened returns the TimesOpened field value if set, zero value otherwise.
func (o *CashierTypeUsageInfoHistory) GetTimesOpened() int32 {
	if o == nil || IsNil(o.TimesOpened) {
		var ret int32
		return ret
	}
	return *o.TimesOpened
}

// GetTimesOpenedOk returns a tuple with the TimesOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashierTypeUsageInfoHistory) GetTimesOpenedOk() (*int32, bool) {
	if o == nil || IsNil(o.TimesOpened) {
		return nil, false
	}
	return o.TimesOpened, true
}

// HasTimesOpened returns a boolean if a field has been set.
func (o *CashierTypeUsageInfoHistory) HasTimesOpened() bool {
	if o != nil && !IsNil(o.TimesOpened) {
		return true
	}

	return false
}

// SetTimesOpened gets a reference to the given int32 and assigns it to the TimesOpened field.
func (o *CashierTypeUsageInfoHistory) SetTimesOpened(v int32) {
	o.TimesOpened = &v
}

func (o CashierTypeUsageInfoHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CashierTypeUsageInfoHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastOpened) {
		toSerialize["lastOpened"] = o.LastOpened
	}
	if !IsNil(o.TimesOpened) {
		toSerialize["timesOpened"] = o.TimesOpened
	}
	return toSerialize, nil
}

type NullableCashierTypeUsageInfoHistory struct {
	value *CashierTypeUsageInfoHistory
	isSet bool
}

func (v NullableCashierTypeUsageInfoHistory) Get() *CashierTypeUsageInfoHistory {
	return v.value
}

func (v *NullableCashierTypeUsageInfoHistory) Set(val *CashierTypeUsageInfoHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierTypeUsageInfoHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierTypeUsageInfoHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierTypeUsageInfoHistory(val *CashierTypeUsageInfoHistory) *NullableCashierTypeUsageInfoHistory {
	return &NullableCashierTypeUsageInfoHistory{value: val, isSet: true}
}

func (v NullableCashierTypeUsageInfoHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierTypeUsageInfoHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


