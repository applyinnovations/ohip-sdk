/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CalculatePointsType Defines when the points are to be calculated.
type CalculatePointsType string

// List of calculatePointsType
const (
	CALCULATEPOINTSTYPE_ALWAYS CalculatePointsType = "Always"
	CALCULATEPOINTSTYPE_PROMPT CalculatePointsType = "Prompt"
	CALCULATEPOINTSTYPE_NEVER CalculatePointsType = "Never"
)

// All allowed values of CalculatePointsType enum
var AllowedCalculatePointsTypeEnumValues = []CalculatePointsType{
	"Always",
	"Prompt",
	"Never",
}

func (v *CalculatePointsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalculatePointsType(value)
	for _, existing := range AllowedCalculatePointsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalculatePointsType", value)
}

// NewCalculatePointsTypeFromValue returns a pointer to a valid CalculatePointsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalculatePointsTypeFromValue(v string) (*CalculatePointsType, error) {
	ev := CalculatePointsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalculatePointsType: valid values are %v", v, AllowedCalculatePointsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalculatePointsType) IsValid() bool {
	for _, existing := range AllowedCalculatePointsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to calculatePointsType value
func (v CalculatePointsType) Ptr() *CalculatePointsType {
	return &v
}

type NullableCalculatePointsType struct {
	value *CalculatePointsType
	isSet bool
}

func (v NullableCalculatePointsType) Get() *CalculatePointsType {
	return v.value
}

func (v *NullableCalculatePointsType) Set(val *CalculatePointsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatePointsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatePointsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatePointsType(val *CalculatePointsType) *NullableCalculatePointsType {
	return &NullableCalculatePointsType{value: val, isSet: true}
}

func (v NullableCalculatePointsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatePointsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

