/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// ARPrintPreferenceType Preference type when separate folios has to be included in the statement
type ARPrintPreferenceType string

// List of aRPrintPreferenceType
const (
	ARPRINTPREFERENCETYPE_INVOICES_WITHOUT_DETAILS ARPrintPreferenceType = "InvoicesWithoutDetails"
	ARPRINTPREFERENCETYPE_INVOICES_WITH_DETAILS ARPrintPreferenceType = "InvoicesWithDetails"
	ARPRINTPREFERENCETYPE_SEPARATE_FOLIOS ARPrintPreferenceType = "SeparateFolios"
)

// All allowed values of ARPrintPreferenceType enum
var AllowedARPrintPreferenceTypeEnumValues = []ARPrintPreferenceType{
	"InvoicesWithoutDetails",
	"InvoicesWithDetails",
	"SeparateFolios",
}

func (v *ARPrintPreferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ARPrintPreferenceType(value)
	for _, existing := range AllowedARPrintPreferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ARPrintPreferenceType", value)
}

// NewARPrintPreferenceTypeFromValue returns a pointer to a valid ARPrintPreferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewARPrintPreferenceTypeFromValue(v string) (*ARPrintPreferenceType, error) {
	ev := ARPrintPreferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ARPrintPreferenceType: valid values are %v", v, AllowedARPrintPreferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ARPrintPreferenceType) IsValid() bool {
	for _, existing := range AllowedARPrintPreferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to aRPrintPreferenceType value
func (v ARPrintPreferenceType) Ptr() *ARPrintPreferenceType {
	return &v
}

type NullableARPrintPreferenceType struct {
	value *ARPrintPreferenceType
	isSet bool
}

func (v NullableARPrintPreferenceType) Get() *ARPrintPreferenceType {
	return v.value
}

func (v *NullableARPrintPreferenceType) Set(val *ARPrintPreferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableARPrintPreferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableARPrintPreferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableARPrintPreferenceType(val *ARPrintPreferenceType) *NullableARPrintPreferenceType {
	return &NullableARPrintPreferenceType{value: val, isSet: true}
}

func (v NullableARPrintPreferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableARPrintPreferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

