/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the DeleteSegmentCodeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteSegmentCodeInfoType{}

// DeleteSegmentCodeInfoType Holds segment code information to delete.
type DeleteSegmentCodeInfoType struct {
	// Flag to include Budget revenue/nights information.
	Budget *bool `json:"budget,omitempty"`
	BudgetMonth *MonthNoType `json:"budgetMonth,omitempty"`
	DeleteInformation *BudgetInfoDeleteType `json:"deleteInformation,omitempty"`
	// Flag to include Forecast revenue/nights information.
	Forecast *bool `json:"forecast,omitempty"`
	Segment *SegmentNameType `json:"segment,omitempty"`
	SegmentCode []string `json:"segmentCode,omitempty"`
	// segment code group.
	SegmentCodeGroup *string `json:"segmentCodeGroup,omitempty"`
}

// NewDeleteSegmentCodeInfoType instantiates a new DeleteSegmentCodeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteSegmentCodeInfoType() *DeleteSegmentCodeInfoType {
	this := DeleteSegmentCodeInfoType{}
	return &this
}

// NewDeleteSegmentCodeInfoTypeWithDefaults instantiates a new DeleteSegmentCodeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteSegmentCodeInfoTypeWithDefaults() *DeleteSegmentCodeInfoType {
	this := DeleteSegmentCodeInfoType{}
	return &this
}

// GetBudget returns the Budget field value if set, zero value otherwise.
func (o *DeleteSegmentCodeInfoType) GetBudget() bool {
	if o == nil || IsNil(o.Budget) {
		var ret bool
		return ret
	}
	return *o.Budget
}

// GetBudgetOk returns a tuple with the Budget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSegmentCodeInfoType) GetBudgetOk() (*bool, bool) {
	if o == nil || IsNil(o.Budget) {
		return nil, false
	}
	return o.Budget, true
}

// HasBudget returns a boolean if a field has been set.
func (o *DeleteSegmentCodeInfoType) HasBudget() bool {
	if o != nil && !IsNil(o.Budget) {
		return true
	}

	return false
}

// SetBudget gets a reference to the given bool and assigns it to the Budget field.
func (o *DeleteSegmentCodeInfoType) SetBudget(v bool) {
	o.Budget = &v
}

// GetBudgetMonth returns the BudgetMonth field value if set, zero value otherwise.
func (o *DeleteSegmentCodeInfoType) GetBudgetMonth() MonthNoType {
	if o == nil || IsNil(o.BudgetMonth) {
		var ret MonthNoType
		return ret
	}
	return *o.BudgetMonth
}

// GetBudgetMonthOk returns a tuple with the BudgetMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSegmentCodeInfoType) GetBudgetMonthOk() (*MonthNoType, bool) {
	if o == nil || IsNil(o.BudgetMonth) {
		return nil, false
	}
	return o.BudgetMonth, true
}

// HasBudgetMonth returns a boolean if a field has been set.
func (o *DeleteSegmentCodeInfoType) HasBudgetMonth() bool {
	if o != nil && !IsNil(o.BudgetMonth) {
		return true
	}

	return false
}

// SetBudgetMonth gets a reference to the given MonthNoType and assigns it to the BudgetMonth field.
func (o *DeleteSegmentCodeInfoType) SetBudgetMonth(v MonthNoType) {
	o.BudgetMonth = &v
}

// GetDeleteInformation returns the DeleteInformation field value if set, zero value otherwise.
func (o *DeleteSegmentCodeInfoType) GetDeleteInformation() BudgetInfoDeleteType {
	if o == nil || IsNil(o.DeleteInformation) {
		var ret BudgetInfoDeleteType
		return ret
	}
	return *o.DeleteInformation
}

// GetDeleteInformationOk returns a tuple with the DeleteInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSegmentCodeInfoType) GetDeleteInformationOk() (*BudgetInfoDeleteType, bool) {
	if o == nil || IsNil(o.DeleteInformation) {
		return nil, false
	}
	return o.DeleteInformation, true
}

// HasDeleteInformation returns a boolean if a field has been set.
func (o *DeleteSegmentCodeInfoType) HasDeleteInformation() bool {
	if o != nil && !IsNil(o.DeleteInformation) {
		return true
	}

	return false
}

// SetDeleteInformation gets a reference to the given BudgetInfoDeleteType and assigns it to the DeleteInformation field.
func (o *DeleteSegmentCodeInfoType) SetDeleteInformation(v BudgetInfoDeleteType) {
	o.DeleteInformation = &v
}

// GetForecast returns the Forecast field value if set, zero value otherwise.
func (o *DeleteSegmentCodeInfoType) GetForecast() bool {
	if o == nil || IsNil(o.Forecast) {
		var ret bool
		return ret
	}
	return *o.Forecast
}

// GetForecastOk returns a tuple with the Forecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSegmentCodeInfoType) GetForecastOk() (*bool, bool) {
	if o == nil || IsNil(o.Forecast) {
		return nil, false
	}
	return o.Forecast, true
}

// HasForecast returns a boolean if a field has been set.
func (o *DeleteSegmentCodeInfoType) HasForecast() bool {
	if o != nil && !IsNil(o.Forecast) {
		return true
	}

	return false
}

// SetForecast gets a reference to the given bool and assigns it to the Forecast field.
func (o *DeleteSegmentCodeInfoType) SetForecast(v bool) {
	o.Forecast = &v
}

// GetSegment returns the Segment field value if set, zero value otherwise.
func (o *DeleteSegmentCodeInfoType) GetSegment() SegmentNameType {
	if o == nil || IsNil(o.Segment) {
		var ret SegmentNameType
		return ret
	}
	return *o.Segment
}

// GetSegmentOk returns a tuple with the Segment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSegmentCodeInfoType) GetSegmentOk() (*SegmentNameType, bool) {
	if o == nil || IsNil(o.Segment) {
		return nil, false
	}
	return o.Segment, true
}

// HasSegment returns a boolean if a field has been set.
func (o *DeleteSegmentCodeInfoType) HasSegment() bool {
	if o != nil && !IsNil(o.Segment) {
		return true
	}

	return false
}

// SetSegment gets a reference to the given SegmentNameType and assigns it to the Segment field.
func (o *DeleteSegmentCodeInfoType) SetSegment(v SegmentNameType) {
	o.Segment = &v
}

// GetSegmentCode returns the SegmentCode field value if set, zero value otherwise.
func (o *DeleteSegmentCodeInfoType) GetSegmentCode() []string {
	if o == nil || IsNil(o.SegmentCode) {
		var ret []string
		return ret
	}
	return o.SegmentCode
}

// GetSegmentCodeOk returns a tuple with the SegmentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSegmentCodeInfoType) GetSegmentCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.SegmentCode) {
		return nil, false
	}
	return o.SegmentCode, true
}

// HasSegmentCode returns a boolean if a field has been set.
func (o *DeleteSegmentCodeInfoType) HasSegmentCode() bool {
	if o != nil && !IsNil(o.SegmentCode) {
		return true
	}

	return false
}

// SetSegmentCode gets a reference to the given []string and assigns it to the SegmentCode field.
func (o *DeleteSegmentCodeInfoType) SetSegmentCode(v []string) {
	o.SegmentCode = v
}

// GetSegmentCodeGroup returns the SegmentCodeGroup field value if set, zero value otherwise.
func (o *DeleteSegmentCodeInfoType) GetSegmentCodeGroup() string {
	if o == nil || IsNil(o.SegmentCodeGroup) {
		var ret string
		return ret
	}
	return *o.SegmentCodeGroup
}

// GetSegmentCodeGroupOk returns a tuple with the SegmentCodeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteSegmentCodeInfoType) GetSegmentCodeGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SegmentCodeGroup) {
		return nil, false
	}
	return o.SegmentCodeGroup, true
}

// HasSegmentCodeGroup returns a boolean if a field has been set.
func (o *DeleteSegmentCodeInfoType) HasSegmentCodeGroup() bool {
	if o != nil && !IsNil(o.SegmentCodeGroup) {
		return true
	}

	return false
}

// SetSegmentCodeGroup gets a reference to the given string and assigns it to the SegmentCodeGroup field.
func (o *DeleteSegmentCodeInfoType) SetSegmentCodeGroup(v string) {
	o.SegmentCodeGroup = &v
}

func (o DeleteSegmentCodeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteSegmentCodeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Budget) {
		toSerialize["budget"] = o.Budget
	}
	if !IsNil(o.BudgetMonth) {
		toSerialize["budgetMonth"] = o.BudgetMonth
	}
	if !IsNil(o.DeleteInformation) {
		toSerialize["deleteInformation"] = o.DeleteInformation
	}
	if !IsNil(o.Forecast) {
		toSerialize["forecast"] = o.Forecast
	}
	if !IsNil(o.Segment) {
		toSerialize["segment"] = o.Segment
	}
	if !IsNil(o.SegmentCode) {
		toSerialize["segmentCode"] = o.SegmentCode
	}
	if !IsNil(o.SegmentCodeGroup) {
		toSerialize["segmentCodeGroup"] = o.SegmentCodeGroup
	}
	return toSerialize, nil
}

type NullableDeleteSegmentCodeInfoType struct {
	value *DeleteSegmentCodeInfoType
	isSet bool
}

func (v NullableDeleteSegmentCodeInfoType) Get() *DeleteSegmentCodeInfoType {
	return v.value
}

func (v *NullableDeleteSegmentCodeInfoType) Set(val *DeleteSegmentCodeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteSegmentCodeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteSegmentCodeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteSegmentCodeInfoType(val *DeleteSegmentCodeInfoType) *NullableDeleteSegmentCodeInfoType {
	return &NullableDeleteSegmentCodeInfoType{value: val, isSet: true}
}

func (v NullableDeleteSegmentCodeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteSegmentCodeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


