/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// FolioReportGroupType The Folio Report Group name. The folio report will be defined under each group and based on where the folio has to be printed, Opera will pick up the correct folio report name to print.
type FolioReportGroupType string

// List of folioReportGroupType
const (
	FOLIOREPORTGROUPTYPE_GUEST FolioReportGroupType = "Guest"
	FOLIOREPORTGROUPTYPE_GROUP FolioReportGroupType = "Group"
	FOLIOREPORTGROUPTYPE_ACCOUNTS_RECEIVABLES FolioReportGroupType = "AccountsReceivables"
	FOLIOREPORTGROUPTYPE_PASSER_BY FolioReportGroupType = "PasserBy"
	FOLIOREPORTGROUPTYPE_POST_IT FolioReportGroupType = "PostIt"
	FOLIOREPORTGROUPTYPE_EXPENSE FolioReportGroupType = "Expense"
	FOLIOREPORTGROUPTYPE_CORRECTION_HEADER FolioReportGroupType = "CorrectionHeader"
)

// All allowed values of FolioReportGroupType enum
var AllowedFolioReportGroupTypeEnumValues = []FolioReportGroupType{
	"Guest",
	"Group",
	"AccountsReceivables",
	"PasserBy",
	"PostIt",
	"Expense",
	"CorrectionHeader",
}

func (v *FolioReportGroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FolioReportGroupType(value)
	for _, existing := range AllowedFolioReportGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FolioReportGroupType", value)
}

// NewFolioReportGroupTypeFromValue returns a pointer to a valid FolioReportGroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFolioReportGroupTypeFromValue(v string) (*FolioReportGroupType, error) {
	ev := FolioReportGroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FolioReportGroupType: valid values are %v", v, AllowedFolioReportGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FolioReportGroupType) IsValid() bool {
	for _, existing := range AllowedFolioReportGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to folioReportGroupType value
func (v FolioReportGroupType) Ptr() *FolioReportGroupType {
	return &v
}

type NullableFolioReportGroupType struct {
	value *FolioReportGroupType
	isSet bool
}

func (v NullableFolioReportGroupType) Get() *FolioReportGroupType {
	return v.value
}

func (v *NullableFolioReportGroupType) Set(val *FolioReportGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioReportGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioReportGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioReportGroupType(val *FolioReportGroupType) *NullableFolioReportGroupType {
	return &NullableFolioReportGroupType{value: val, isSet: true}
}

func (v NullableFolioReportGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioReportGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

