/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// TrackItActionStatusType Defined Values for Status of the Track it Action.
type TrackItActionStatusType string

// List of trackItActionStatusType
const (
	TRACKITACTIONSTATUSTYPE_OPEN TrackItActionStatusType = "Open"
	TRACKITACTIONSTATUSTYPE_CLOSED TrackItActionStatusType = "Closed"
)

// All allowed values of TrackItActionStatusType enum
var AllowedTrackItActionStatusTypeEnumValues = []TrackItActionStatusType{
	"Open",
	"Closed",
}

func (v *TrackItActionStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TrackItActionStatusType(value)
	for _, existing := range AllowedTrackItActionStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TrackItActionStatusType", value)
}

// NewTrackItActionStatusTypeFromValue returns a pointer to a valid TrackItActionStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTrackItActionStatusTypeFromValue(v string) (*TrackItActionStatusType, error) {
	ev := TrackItActionStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TrackItActionStatusType: valid values are %v", v, AllowedTrackItActionStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TrackItActionStatusType) IsValid() bool {
	for _, existing := range AllowedTrackItActionStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to trackItActionStatusType value
func (v TrackItActionStatusType) Ptr() *TrackItActionStatusType {
	return &v
}

type NullableTrackItActionStatusType struct {
	value *TrackItActionStatusType
	isSet bool
}

func (v NullableTrackItActionStatusType) Get() *TrackItActionStatusType {
	return v.value
}

func (v *NullableTrackItActionStatusType) Set(val *TrackItActionStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackItActionStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackItActionStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackItActionStatusType(val *TrackItActionStatusType) *NullableTrackItActionStatusType {
	return &NullableTrackItActionStatusType{value: val, isSet: true}
}

func (v NullableTrackItActionStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackItActionStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

