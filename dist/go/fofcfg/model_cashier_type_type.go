/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CashierTypeType The types of cashier.
type CashierTypeType string

// List of cashierTypeType
const (
	CASHIERTYPETYPE_CASHIER CashierTypeType = "Cashier"
	CASHIERTYPETYPE_INTERFACE_CASHIER CashierTypeType = "InterfaceCashier"
	CASHIERTYPETYPE_LDAP_TEMPLATE CashierTypeType = "LDAPTemplate"
)

// All allowed values of CashierTypeType enum
var AllowedCashierTypeTypeEnumValues = []CashierTypeType{
	"Cashier",
	"InterfaceCashier",
	"LDAPTemplate",
}

func (v *CashierTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CashierTypeType(value)
	for _, existing := range AllowedCashierTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CashierTypeType", value)
}

// NewCashierTypeTypeFromValue returns a pointer to a valid CashierTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCashierTypeTypeFromValue(v string) (*CashierTypeType, error) {
	ev := CashierTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CashierTypeType: valid values are %v", v, AllowedCashierTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CashierTypeType) IsValid() bool {
	for _, existing := range AllowedCashierTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cashierTypeType value
func (v CashierTypeType) Ptr() *CashierTypeType {
	return &v
}

type NullableCashierTypeType struct {
	value *CashierTypeType
	isSet bool
}

func (v NullableCashierTypeType) Get() *CashierTypeType {
	return v.value
}

func (v *NullableCashierTypeType) Set(val *CashierTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCashierTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCashierTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashierTypeType(val *CashierTypeType) *NullableCashierTypeType {
	return &NullableCashierTypeType{value: val, isSet: true}
}

func (v NullableCashierTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashierTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

