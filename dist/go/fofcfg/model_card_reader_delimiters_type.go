/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CardReaderDelimitersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardReaderDelimitersType{}

// CardReaderDelimitersType Configured delimiters for parsing a card track data based on a particular card reader device.
type CardReaderDelimitersType struct {
	// Character to be used as Additional Info End Separator.
	AdditionalInfoEndSeparator *string `json:"additionalInfoEndSeparator,omitempty"`
	// String to be used to indicate whether KSNField, ET1Field, ET2Field should be interpreted as field positions or field IDs.
	AdditionalInfoFormatType *string `json:"additionalInfoFormatType,omitempty"`
	// Character to be used as Additional Info Separator.
	AdditionalInfoSeparator *string `json:"additionalInfoSeparator,omitempty"`
	// Character to be used as Guest Name separator.
	CardHolderNameSeparator *string `json:"cardHolderNameSeparator,omitempty"`
	// Device ID to which this delimiter is assigned.
	DeviceId *int32 `json:"deviceId,omitempty"`
	// Interpreted as the field position or field ID of Encrypted Track 1, depending on the value of Additional Information Format Type.
	ET1Field *int32 `json:"eT1Field,omitempty"`
	// Interpreted as the field position or field ID of Encrypted Track 2, depending on the value of Additional Information Format Type.
	ET2Field *int32 `json:"eT2Field,omitempty"`
	// Encryption Format Code.
	EncryptionFormatCode *string `json:"encryptionFormatCode,omitempty"`
	// Character to be used as End of Track Separator.
	EndOfTrackSeparator *string `json:"endOfTrackSeparator,omitempty"`
	// Character that will denote the start of Expiry Date.
	ExpirationDateStartCharacter *string `json:"expirationDateStartCharacter,omitempty"`
	// Interpreted as the field position or field ID of KSN, depending on the value of Additional Information Format Type.
	KSNField *int32 `json:"kSNField,omitempty"`
	// The Regular Expression pattern of the token that is present in the track data if data was inputted manually through the device instead of swiping.
	ManualTokenPattern *string `json:"manualTokenPattern,omitempty"`
	// A flag indicating whether the data from the device is encrypted or not.
	SecureDevice *bool `json:"secureDevice,omitempty"`
	// Software ID of device.
	SoftwareId *string `json:"softwareId,omitempty"`
	// Character to be used as Track2 Separator.
	Track2Separator *string `json:"track2Separator,omitempty"`
	// The Regular Expression pattern of the track data that is generated by this device.
	TrackDataPattern *string `json:"trackDataPattern,omitempty"`
}

// NewCardReaderDelimitersType instantiates a new CardReaderDelimitersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardReaderDelimitersType() *CardReaderDelimitersType {
	this := CardReaderDelimitersType{}
	return &this
}

// NewCardReaderDelimitersTypeWithDefaults instantiates a new CardReaderDelimitersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardReaderDelimitersTypeWithDefaults() *CardReaderDelimitersType {
	this := CardReaderDelimitersType{}
	return &this
}

// GetAdditionalInfoEndSeparator returns the AdditionalInfoEndSeparator field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetAdditionalInfoEndSeparator() string {
	if o == nil || IsNil(o.AdditionalInfoEndSeparator) {
		var ret string
		return ret
	}
	return *o.AdditionalInfoEndSeparator
}

// GetAdditionalInfoEndSeparatorOk returns a tuple with the AdditionalInfoEndSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetAdditionalInfoEndSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfoEndSeparator) {
		return nil, false
	}
	return o.AdditionalInfoEndSeparator, true
}

// HasAdditionalInfoEndSeparator returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasAdditionalInfoEndSeparator() bool {
	if o != nil && !IsNil(o.AdditionalInfoEndSeparator) {
		return true
	}

	return false
}

// SetAdditionalInfoEndSeparator gets a reference to the given string and assigns it to the AdditionalInfoEndSeparator field.
func (o *CardReaderDelimitersType) SetAdditionalInfoEndSeparator(v string) {
	o.AdditionalInfoEndSeparator = &v
}

// GetAdditionalInfoFormatType returns the AdditionalInfoFormatType field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetAdditionalInfoFormatType() string {
	if o == nil || IsNil(o.AdditionalInfoFormatType) {
		var ret string
		return ret
	}
	return *o.AdditionalInfoFormatType
}

// GetAdditionalInfoFormatTypeOk returns a tuple with the AdditionalInfoFormatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetAdditionalInfoFormatTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfoFormatType) {
		return nil, false
	}
	return o.AdditionalInfoFormatType, true
}

// HasAdditionalInfoFormatType returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasAdditionalInfoFormatType() bool {
	if o != nil && !IsNil(o.AdditionalInfoFormatType) {
		return true
	}

	return false
}

// SetAdditionalInfoFormatType gets a reference to the given string and assigns it to the AdditionalInfoFormatType field.
func (o *CardReaderDelimitersType) SetAdditionalInfoFormatType(v string) {
	o.AdditionalInfoFormatType = &v
}

// GetAdditionalInfoSeparator returns the AdditionalInfoSeparator field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetAdditionalInfoSeparator() string {
	if o == nil || IsNil(o.AdditionalInfoSeparator) {
		var ret string
		return ret
	}
	return *o.AdditionalInfoSeparator
}

// GetAdditionalInfoSeparatorOk returns a tuple with the AdditionalInfoSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetAdditionalInfoSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalInfoSeparator) {
		return nil, false
	}
	return o.AdditionalInfoSeparator, true
}

// HasAdditionalInfoSeparator returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasAdditionalInfoSeparator() bool {
	if o != nil && !IsNil(o.AdditionalInfoSeparator) {
		return true
	}

	return false
}

// SetAdditionalInfoSeparator gets a reference to the given string and assigns it to the AdditionalInfoSeparator field.
func (o *CardReaderDelimitersType) SetAdditionalInfoSeparator(v string) {
	o.AdditionalInfoSeparator = &v
}

// GetCardHolderNameSeparator returns the CardHolderNameSeparator field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetCardHolderNameSeparator() string {
	if o == nil || IsNil(o.CardHolderNameSeparator) {
		var ret string
		return ret
	}
	return *o.CardHolderNameSeparator
}

// GetCardHolderNameSeparatorOk returns a tuple with the CardHolderNameSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetCardHolderNameSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.CardHolderNameSeparator) {
		return nil, false
	}
	return o.CardHolderNameSeparator, true
}

// HasCardHolderNameSeparator returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasCardHolderNameSeparator() bool {
	if o != nil && !IsNil(o.CardHolderNameSeparator) {
		return true
	}

	return false
}

// SetCardHolderNameSeparator gets a reference to the given string and assigns it to the CardHolderNameSeparator field.
func (o *CardReaderDelimitersType) SetCardHolderNameSeparator(v string) {
	o.CardHolderNameSeparator = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetDeviceId() int32 {
	if o == nil || IsNil(o.DeviceId) {
		var ret int32
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetDeviceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given int32 and assigns it to the DeviceId field.
func (o *CardReaderDelimitersType) SetDeviceId(v int32) {
	o.DeviceId = &v
}

// GetET1Field returns the ET1Field field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetET1Field() int32 {
	if o == nil || IsNil(o.ET1Field) {
		var ret int32
		return ret
	}
	return *o.ET1Field
}

// GetET1FieldOk returns a tuple with the ET1Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetET1FieldOk() (*int32, bool) {
	if o == nil || IsNil(o.ET1Field) {
		return nil, false
	}
	return o.ET1Field, true
}

// HasET1Field returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasET1Field() bool {
	if o != nil && !IsNil(o.ET1Field) {
		return true
	}

	return false
}

// SetET1Field gets a reference to the given int32 and assigns it to the ET1Field field.
func (o *CardReaderDelimitersType) SetET1Field(v int32) {
	o.ET1Field = &v
}

// GetET2Field returns the ET2Field field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetET2Field() int32 {
	if o == nil || IsNil(o.ET2Field) {
		var ret int32
		return ret
	}
	return *o.ET2Field
}

// GetET2FieldOk returns a tuple with the ET2Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetET2FieldOk() (*int32, bool) {
	if o == nil || IsNil(o.ET2Field) {
		return nil, false
	}
	return o.ET2Field, true
}

// HasET2Field returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasET2Field() bool {
	if o != nil && !IsNil(o.ET2Field) {
		return true
	}

	return false
}

// SetET2Field gets a reference to the given int32 and assigns it to the ET2Field field.
func (o *CardReaderDelimitersType) SetET2Field(v int32) {
	o.ET2Field = &v
}

// GetEncryptionFormatCode returns the EncryptionFormatCode field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetEncryptionFormatCode() string {
	if o == nil || IsNil(o.EncryptionFormatCode) {
		var ret string
		return ret
	}
	return *o.EncryptionFormatCode
}

// GetEncryptionFormatCodeOk returns a tuple with the EncryptionFormatCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetEncryptionFormatCodeOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionFormatCode) {
		return nil, false
	}
	return o.EncryptionFormatCode, true
}

// HasEncryptionFormatCode returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasEncryptionFormatCode() bool {
	if o != nil && !IsNil(o.EncryptionFormatCode) {
		return true
	}

	return false
}

// SetEncryptionFormatCode gets a reference to the given string and assigns it to the EncryptionFormatCode field.
func (o *CardReaderDelimitersType) SetEncryptionFormatCode(v string) {
	o.EncryptionFormatCode = &v
}

// GetEndOfTrackSeparator returns the EndOfTrackSeparator field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetEndOfTrackSeparator() string {
	if o == nil || IsNil(o.EndOfTrackSeparator) {
		var ret string
		return ret
	}
	return *o.EndOfTrackSeparator
}

// GetEndOfTrackSeparatorOk returns a tuple with the EndOfTrackSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetEndOfTrackSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.EndOfTrackSeparator) {
		return nil, false
	}
	return o.EndOfTrackSeparator, true
}

// HasEndOfTrackSeparator returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasEndOfTrackSeparator() bool {
	if o != nil && !IsNil(o.EndOfTrackSeparator) {
		return true
	}

	return false
}

// SetEndOfTrackSeparator gets a reference to the given string and assigns it to the EndOfTrackSeparator field.
func (o *CardReaderDelimitersType) SetEndOfTrackSeparator(v string) {
	o.EndOfTrackSeparator = &v
}

// GetExpirationDateStartCharacter returns the ExpirationDateStartCharacter field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetExpirationDateStartCharacter() string {
	if o == nil || IsNil(o.ExpirationDateStartCharacter) {
		var ret string
		return ret
	}
	return *o.ExpirationDateStartCharacter
}

// GetExpirationDateStartCharacterOk returns a tuple with the ExpirationDateStartCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetExpirationDateStartCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDateStartCharacter) {
		return nil, false
	}
	return o.ExpirationDateStartCharacter, true
}

// HasExpirationDateStartCharacter returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasExpirationDateStartCharacter() bool {
	if o != nil && !IsNil(o.ExpirationDateStartCharacter) {
		return true
	}

	return false
}

// SetExpirationDateStartCharacter gets a reference to the given string and assigns it to the ExpirationDateStartCharacter field.
func (o *CardReaderDelimitersType) SetExpirationDateStartCharacter(v string) {
	o.ExpirationDateStartCharacter = &v
}

// GetKSNField returns the KSNField field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetKSNField() int32 {
	if o == nil || IsNil(o.KSNField) {
		var ret int32
		return ret
	}
	return *o.KSNField
}

// GetKSNFieldOk returns a tuple with the KSNField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetKSNFieldOk() (*int32, bool) {
	if o == nil || IsNil(o.KSNField) {
		return nil, false
	}
	return o.KSNField, true
}

// HasKSNField returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasKSNField() bool {
	if o != nil && !IsNil(o.KSNField) {
		return true
	}

	return false
}

// SetKSNField gets a reference to the given int32 and assigns it to the KSNField field.
func (o *CardReaderDelimitersType) SetKSNField(v int32) {
	o.KSNField = &v
}

// GetManualTokenPattern returns the ManualTokenPattern field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetManualTokenPattern() string {
	if o == nil || IsNil(o.ManualTokenPattern) {
		var ret string
		return ret
	}
	return *o.ManualTokenPattern
}

// GetManualTokenPatternOk returns a tuple with the ManualTokenPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetManualTokenPatternOk() (*string, bool) {
	if o == nil || IsNil(o.ManualTokenPattern) {
		return nil, false
	}
	return o.ManualTokenPattern, true
}

// HasManualTokenPattern returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasManualTokenPattern() bool {
	if o != nil && !IsNil(o.ManualTokenPattern) {
		return true
	}

	return false
}

// SetManualTokenPattern gets a reference to the given string and assigns it to the ManualTokenPattern field.
func (o *CardReaderDelimitersType) SetManualTokenPattern(v string) {
	o.ManualTokenPattern = &v
}

// GetSecureDevice returns the SecureDevice field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetSecureDevice() bool {
	if o == nil || IsNil(o.SecureDevice) {
		var ret bool
		return ret
	}
	return *o.SecureDevice
}

// GetSecureDeviceOk returns a tuple with the SecureDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetSecureDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.SecureDevice) {
		return nil, false
	}
	return o.SecureDevice, true
}

// HasSecureDevice returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasSecureDevice() bool {
	if o != nil && !IsNil(o.SecureDevice) {
		return true
	}

	return false
}

// SetSecureDevice gets a reference to the given bool and assigns it to the SecureDevice field.
func (o *CardReaderDelimitersType) SetSecureDevice(v bool) {
	o.SecureDevice = &v
}

// GetSoftwareId returns the SoftwareId field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetSoftwareId() string {
	if o == nil || IsNil(o.SoftwareId) {
		var ret string
		return ret
	}
	return *o.SoftwareId
}

// GetSoftwareIdOk returns a tuple with the SoftwareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetSoftwareIdOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareId) {
		return nil, false
	}
	return o.SoftwareId, true
}

// HasSoftwareId returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasSoftwareId() bool {
	if o != nil && !IsNil(o.SoftwareId) {
		return true
	}

	return false
}

// SetSoftwareId gets a reference to the given string and assigns it to the SoftwareId field.
func (o *CardReaderDelimitersType) SetSoftwareId(v string) {
	o.SoftwareId = &v
}

// GetTrack2Separator returns the Track2Separator field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetTrack2Separator() string {
	if o == nil || IsNil(o.Track2Separator) {
		var ret string
		return ret
	}
	return *o.Track2Separator
}

// GetTrack2SeparatorOk returns a tuple with the Track2Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetTrack2SeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Track2Separator) {
		return nil, false
	}
	return o.Track2Separator, true
}

// HasTrack2Separator returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasTrack2Separator() bool {
	if o != nil && !IsNil(o.Track2Separator) {
		return true
	}

	return false
}

// SetTrack2Separator gets a reference to the given string and assigns it to the Track2Separator field.
func (o *CardReaderDelimitersType) SetTrack2Separator(v string) {
	o.Track2Separator = &v
}

// GetTrackDataPattern returns the TrackDataPattern field value if set, zero value otherwise.
func (o *CardReaderDelimitersType) GetTrackDataPattern() string {
	if o == nil || IsNil(o.TrackDataPattern) {
		var ret string
		return ret
	}
	return *o.TrackDataPattern
}

// GetTrackDataPatternOk returns a tuple with the TrackDataPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardReaderDelimitersType) GetTrackDataPatternOk() (*string, bool) {
	if o == nil || IsNil(o.TrackDataPattern) {
		return nil, false
	}
	return o.TrackDataPattern, true
}

// HasTrackDataPattern returns a boolean if a field has been set.
func (o *CardReaderDelimitersType) HasTrackDataPattern() bool {
	if o != nil && !IsNil(o.TrackDataPattern) {
		return true
	}

	return false
}

// SetTrackDataPattern gets a reference to the given string and assigns it to the TrackDataPattern field.
func (o *CardReaderDelimitersType) SetTrackDataPattern(v string) {
	o.TrackDataPattern = &v
}

func (o CardReaderDelimitersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardReaderDelimitersType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalInfoEndSeparator) {
		toSerialize["additionalInfoEndSeparator"] = o.AdditionalInfoEndSeparator
	}
	if !IsNil(o.AdditionalInfoFormatType) {
		toSerialize["additionalInfoFormatType"] = o.AdditionalInfoFormatType
	}
	if !IsNil(o.AdditionalInfoSeparator) {
		toSerialize["additionalInfoSeparator"] = o.AdditionalInfoSeparator
	}
	if !IsNil(o.CardHolderNameSeparator) {
		toSerialize["cardHolderNameSeparator"] = o.CardHolderNameSeparator
	}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.ET1Field) {
		toSerialize["eT1Field"] = o.ET1Field
	}
	if !IsNil(o.ET2Field) {
		toSerialize["eT2Field"] = o.ET2Field
	}
	if !IsNil(o.EncryptionFormatCode) {
		toSerialize["encryptionFormatCode"] = o.EncryptionFormatCode
	}
	if !IsNil(o.EndOfTrackSeparator) {
		toSerialize["endOfTrackSeparator"] = o.EndOfTrackSeparator
	}
	if !IsNil(o.ExpirationDateStartCharacter) {
		toSerialize["expirationDateStartCharacter"] = o.ExpirationDateStartCharacter
	}
	if !IsNil(o.KSNField) {
		toSerialize["kSNField"] = o.KSNField
	}
	if !IsNil(o.ManualTokenPattern) {
		toSerialize["manualTokenPattern"] = o.ManualTokenPattern
	}
	if !IsNil(o.SecureDevice) {
		toSerialize["secureDevice"] = o.SecureDevice
	}
	if !IsNil(o.SoftwareId) {
		toSerialize["softwareId"] = o.SoftwareId
	}
	if !IsNil(o.Track2Separator) {
		toSerialize["track2Separator"] = o.Track2Separator
	}
	if !IsNil(o.TrackDataPattern) {
		toSerialize["trackDataPattern"] = o.TrackDataPattern
	}
	return toSerialize, nil
}

type NullableCardReaderDelimitersType struct {
	value *CardReaderDelimitersType
	isSet bool
}

func (v NullableCardReaderDelimitersType) Get() *CardReaderDelimitersType {
	return v.value
}

func (v *NullableCardReaderDelimitersType) Set(val *CardReaderDelimitersType) {
	v.value = val
	v.isSet = true
}

func (v NullableCardReaderDelimitersType) IsSet() bool {
	return v.isSet
}

func (v *NullableCardReaderDelimitersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardReaderDelimitersType(val *CardReaderDelimitersType) *NullableCardReaderDelimitersType {
	return &NullableCardReaderDelimitersType{value: val, isSet: true}
}

func (v NullableCardReaderDelimitersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardReaderDelimitersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


