/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// TransactionDiscountType The type on which the transaction discount is based. e.g MembershipType , MembershipLevel
type TransactionDiscountType string

// List of transactionDiscountType
const (
	TRANSACTIONDISCOUNTTYPE_MEMBERSHIP_TYPE TransactionDiscountType = "MembershipType"
	TRANSACTIONDISCOUNTTYPE_MEMBERSHIP_LEVEL TransactionDiscountType = "MembershipLevel"
)

// All allowed values of TransactionDiscountType enum
var AllowedTransactionDiscountTypeEnumValues = []TransactionDiscountType{
	"MembershipType",
	"MembershipLevel",
}

func (v *TransactionDiscountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionDiscountType(value)
	for _, existing := range AllowedTransactionDiscountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionDiscountType", value)
}

// NewTransactionDiscountTypeFromValue returns a pointer to a valid TransactionDiscountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionDiscountTypeFromValue(v string) (*TransactionDiscountType, error) {
	ev := TransactionDiscountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionDiscountType: valid values are %v", v, AllowedTransactionDiscountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionDiscountType) IsValid() bool {
	for _, existing := range AllowedTransactionDiscountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transactionDiscountType value
func (v TransactionDiscountType) Ptr() *TransactionDiscountType {
	return &v
}

type NullableTransactionDiscountType struct {
	value *TransactionDiscountType
	isSet bool
}

func (v NullableTransactionDiscountType) Get() *TransactionDiscountType {
	return v.value
}

func (v *NullableTransactionDiscountType) Set(val *TransactionDiscountType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDiscountType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDiscountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDiscountType(val *TransactionDiscountType) *NullableTransactionDiscountType {
	return &NullableTransactionDiscountType{value: val, isSet: true}
}

func (v NullableTransactionDiscountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDiscountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

