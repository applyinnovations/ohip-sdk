/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the RateCodeInformationBaseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateCodeInformationBaseType{}

// RateCodeInformationBaseType Budget Forecast information for budget segment code.
type RateCodeInformationBaseType struct {
	// Segment code for which budget forecast information is fetched.
	RateCode *string `json:"rateCode,omitempty"`
	// Segment code description for segment code.
	RateCodeDescription *string `json:"rateCodeDescription,omitempty"`
	BudgetRevenueInfo *RevenueNightsInfoType `json:"budgetRevenueInfo,omitempty"`
	ForecastRevenueInfo *RevenueNightsInfoType `json:"forecastRevenueInfo,omitempty"`
}

// NewRateCodeInformationBaseType instantiates a new RateCodeInformationBaseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateCodeInformationBaseType() *RateCodeInformationBaseType {
	this := RateCodeInformationBaseType{}
	return &this
}

// NewRateCodeInformationBaseTypeWithDefaults instantiates a new RateCodeInformationBaseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateCodeInformationBaseTypeWithDefaults() *RateCodeInformationBaseType {
	this := RateCodeInformationBaseType{}
	return &this
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *RateCodeInformationBaseType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCodeInformationBaseType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *RateCodeInformationBaseType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *RateCodeInformationBaseType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetRateCodeDescription returns the RateCodeDescription field value if set, zero value otherwise.
func (o *RateCodeInformationBaseType) GetRateCodeDescription() string {
	if o == nil || IsNil(o.RateCodeDescription) {
		var ret string
		return ret
	}
	return *o.RateCodeDescription
}

// GetRateCodeDescriptionOk returns a tuple with the RateCodeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCodeInformationBaseType) GetRateCodeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RateCodeDescription) {
		return nil, false
	}
	return o.RateCodeDescription, true
}

// HasRateCodeDescription returns a boolean if a field has been set.
func (o *RateCodeInformationBaseType) HasRateCodeDescription() bool {
	if o != nil && !IsNil(o.RateCodeDescription) {
		return true
	}

	return false
}

// SetRateCodeDescription gets a reference to the given string and assigns it to the RateCodeDescription field.
func (o *RateCodeInformationBaseType) SetRateCodeDescription(v string) {
	o.RateCodeDescription = &v
}

// GetBudgetRevenueInfo returns the BudgetRevenueInfo field value if set, zero value otherwise.
func (o *RateCodeInformationBaseType) GetBudgetRevenueInfo() RevenueNightsInfoType {
	if o == nil || IsNil(o.BudgetRevenueInfo) {
		var ret RevenueNightsInfoType
		return ret
	}
	return *o.BudgetRevenueInfo
}

// GetBudgetRevenueInfoOk returns a tuple with the BudgetRevenueInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCodeInformationBaseType) GetBudgetRevenueInfoOk() (*RevenueNightsInfoType, bool) {
	if o == nil || IsNil(o.BudgetRevenueInfo) {
		return nil, false
	}
	return o.BudgetRevenueInfo, true
}

// HasBudgetRevenueInfo returns a boolean if a field has been set.
func (o *RateCodeInformationBaseType) HasBudgetRevenueInfo() bool {
	if o != nil && !IsNil(o.BudgetRevenueInfo) {
		return true
	}

	return false
}

// SetBudgetRevenueInfo gets a reference to the given RevenueNightsInfoType and assigns it to the BudgetRevenueInfo field.
func (o *RateCodeInformationBaseType) SetBudgetRevenueInfo(v RevenueNightsInfoType) {
	o.BudgetRevenueInfo = &v
}

// GetForecastRevenueInfo returns the ForecastRevenueInfo field value if set, zero value otherwise.
func (o *RateCodeInformationBaseType) GetForecastRevenueInfo() RevenueNightsInfoType {
	if o == nil || IsNil(o.ForecastRevenueInfo) {
		var ret RevenueNightsInfoType
		return ret
	}
	return *o.ForecastRevenueInfo
}

// GetForecastRevenueInfoOk returns a tuple with the ForecastRevenueInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateCodeInformationBaseType) GetForecastRevenueInfoOk() (*RevenueNightsInfoType, bool) {
	if o == nil || IsNil(o.ForecastRevenueInfo) {
		return nil, false
	}
	return o.ForecastRevenueInfo, true
}

// HasForecastRevenueInfo returns a boolean if a field has been set.
func (o *RateCodeInformationBaseType) HasForecastRevenueInfo() bool {
	if o != nil && !IsNil(o.ForecastRevenueInfo) {
		return true
	}

	return false
}

// SetForecastRevenueInfo gets a reference to the given RevenueNightsInfoType and assigns it to the ForecastRevenueInfo field.
func (o *RateCodeInformationBaseType) SetForecastRevenueInfo(v RevenueNightsInfoType) {
	o.ForecastRevenueInfo = &v
}

func (o RateCodeInformationBaseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateCodeInformationBaseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.RateCodeDescription) {
		toSerialize["rateCodeDescription"] = o.RateCodeDescription
	}
	if !IsNil(o.BudgetRevenueInfo) {
		toSerialize["budgetRevenueInfo"] = o.BudgetRevenueInfo
	}
	if !IsNil(o.ForecastRevenueInfo) {
		toSerialize["forecastRevenueInfo"] = o.ForecastRevenueInfo
	}
	return toSerialize, nil
}

type NullableRateCodeInformationBaseType struct {
	value *RateCodeInformationBaseType
	isSet bool
}

func (v NullableRateCodeInformationBaseType) Get() *RateCodeInformationBaseType {
	return v.value
}

func (v *NullableRateCodeInformationBaseType) Set(val *RateCodeInformationBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateCodeInformationBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateCodeInformationBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateCodeInformationBaseType(val *RateCodeInformationBaseType) *NullableRateCodeInformationBaseType {
	return &NullableRateCodeInformationBaseType{value: val, isSet: true}
}

func (v NullableRateCodeInformationBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateCodeInformationBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


