/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the UDFGenerateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UDFGenerateType{}

// UDFGenerateType Defines UDF rule for generates.
type UDFGenerateType struct {
	// Defines User Defined Function to calculate generates.
	UDF *string `json:"uDF,omitempty"`
	// Collection of function arguments and their corresponding values.
	UDFFunctionArguments []FunctionArgumentType `json:"uDFFunctionArguments,omitempty"`
	// The function name of the User Defined Function used to calculate generates.
	UDFFunctionName *string `json:"uDFFunctionName,omitempty"`
}

// NewUDFGenerateType instantiates a new UDFGenerateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUDFGenerateType() *UDFGenerateType {
	this := UDFGenerateType{}
	return &this
}

// NewUDFGenerateTypeWithDefaults instantiates a new UDFGenerateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUDFGenerateTypeWithDefaults() *UDFGenerateType {
	this := UDFGenerateType{}
	return &this
}

// GetUDF returns the UDF field value if set, zero value otherwise.
func (o *UDFGenerateType) GetUDF() string {
	if o == nil || IsNil(o.UDF) {
		var ret string
		return ret
	}
	return *o.UDF
}

// GetUDFOk returns a tuple with the UDF field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFGenerateType) GetUDFOk() (*string, bool) {
	if o == nil || IsNil(o.UDF) {
		return nil, false
	}
	return o.UDF, true
}

// HasUDF returns a boolean if a field has been set.
func (o *UDFGenerateType) HasUDF() bool {
	if o != nil && !IsNil(o.UDF) {
		return true
	}

	return false
}

// SetUDF gets a reference to the given string and assigns it to the UDF field.
func (o *UDFGenerateType) SetUDF(v string) {
	o.UDF = &v
}

// GetUDFFunctionArguments returns the UDFFunctionArguments field value if set, zero value otherwise.
func (o *UDFGenerateType) GetUDFFunctionArguments() []FunctionArgumentType {
	if o == nil || IsNil(o.UDFFunctionArguments) {
		var ret []FunctionArgumentType
		return ret
	}
	return o.UDFFunctionArguments
}

// GetUDFFunctionArgumentsOk returns a tuple with the UDFFunctionArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFGenerateType) GetUDFFunctionArgumentsOk() ([]FunctionArgumentType, bool) {
	if o == nil || IsNil(o.UDFFunctionArguments) {
		return nil, false
	}
	return o.UDFFunctionArguments, true
}

// HasUDFFunctionArguments returns a boolean if a field has been set.
func (o *UDFGenerateType) HasUDFFunctionArguments() bool {
	if o != nil && !IsNil(o.UDFFunctionArguments) {
		return true
	}

	return false
}

// SetUDFFunctionArguments gets a reference to the given []FunctionArgumentType and assigns it to the UDFFunctionArguments field.
func (o *UDFGenerateType) SetUDFFunctionArguments(v []FunctionArgumentType) {
	o.UDFFunctionArguments = v
}

// GetUDFFunctionName returns the UDFFunctionName field value if set, zero value otherwise.
func (o *UDFGenerateType) GetUDFFunctionName() string {
	if o == nil || IsNil(o.UDFFunctionName) {
		var ret string
		return ret
	}
	return *o.UDFFunctionName
}

// GetUDFFunctionNameOk returns a tuple with the UDFFunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFGenerateType) GetUDFFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.UDFFunctionName) {
		return nil, false
	}
	return o.UDFFunctionName, true
}

// HasUDFFunctionName returns a boolean if a field has been set.
func (o *UDFGenerateType) HasUDFFunctionName() bool {
	if o != nil && !IsNil(o.UDFFunctionName) {
		return true
	}

	return false
}

// SetUDFFunctionName gets a reference to the given string and assigns it to the UDFFunctionName field.
func (o *UDFGenerateType) SetUDFFunctionName(v string) {
	o.UDFFunctionName = &v
}

func (o UDFGenerateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UDFGenerateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UDF) {
		toSerialize["uDF"] = o.UDF
	}
	if !IsNil(o.UDFFunctionArguments) {
		toSerialize["uDFFunctionArguments"] = o.UDFFunctionArguments
	}
	if !IsNil(o.UDFFunctionName) {
		toSerialize["uDFFunctionName"] = o.UDFFunctionName
	}
	return toSerialize, nil
}

type NullableUDFGenerateType struct {
	value *UDFGenerateType
	isSet bool
}

func (v NullableUDFGenerateType) Get() *UDFGenerateType {
	return v.value
}

func (v *NullableUDFGenerateType) Set(val *UDFGenerateType) {
	v.value = val
	v.isSet = true
}

func (v NullableUDFGenerateType) IsSet() bool {
	return v.isSet
}

func (v *NullableUDFGenerateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUDFGenerateType(val *UDFGenerateType) *NullableUDFGenerateType {
	return &NullableUDFGenerateType{value: val, isSet: true}
}

func (v NullableUDFGenerateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUDFGenerateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


