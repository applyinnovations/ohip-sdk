/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// StatusTypes Defines status in terms of time.
type StatusTypes string

// List of statusTypes
const (
	STATUSTYPES_FUTURE StatusTypes = "Future"
	STATUSTYPES_CURRENT StatusTypes = "Current"
	STATUSTYPES_PAST StatusTypes = "Past"
)

// All allowed values of StatusTypes enum
var AllowedStatusTypesEnumValues = []StatusTypes{
	"Future",
	"Current",
	"Past",
}

func (v *StatusTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusTypes(value)
	for _, existing := range AllowedStatusTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusTypes", value)
}

// NewStatusTypesFromValue returns a pointer to a valid StatusTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusTypesFromValue(v string) (*StatusTypes, error) {
	ev := StatusTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusTypes: valid values are %v", v, AllowedStatusTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusTypes) IsValid() bool {
	for _, existing := range AllowedStatusTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to statusTypes value
func (v StatusTypes) Ptr() *StatusTypes {
	return &v
}

type NullableStatusTypes struct {
	value *StatusTypes
	isSet bool
}

func (v NullableStatusTypes) Get() *StatusTypes {
	return v.value
}

func (v *NullableStatusTypes) Set(val *StatusTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusTypes(val *StatusTypes) *NullableStatusTypes {
	return &NullableStatusTypes{value: val, isSet: true}
}

func (v NullableStatusTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

