/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the MonthlyRevenueNightsInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonthlyRevenueNightsInfoType{}

// MonthlyRevenueNightsInfoType Holds monthly revenue summary information
type MonthlyRevenueNightsInfoType struct {
	// Month number
	Month *int32 `json:"month,omitempty"`
	// Revenue total for a month.
	Revenue *float32 `json:"revenue,omitempty"`
	// No of nights for a month.
	RoomNights *int32 `json:"roomNights,omitempty"`
}

// NewMonthlyRevenueNightsInfoType instantiates a new MonthlyRevenueNightsInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyRevenueNightsInfoType() *MonthlyRevenueNightsInfoType {
	this := MonthlyRevenueNightsInfoType{}
	return &this
}

// NewMonthlyRevenueNightsInfoTypeWithDefaults instantiates a new MonthlyRevenueNightsInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyRevenueNightsInfoTypeWithDefaults() *MonthlyRevenueNightsInfoType {
	this := MonthlyRevenueNightsInfoType{}
	return &this
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *MonthlyRevenueNightsInfoType) GetMonth() int32 {
	if o == nil || IsNil(o.Month) {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyRevenueNightsInfoType) GetMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MonthlyRevenueNightsInfoType) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *MonthlyRevenueNightsInfoType) SetMonth(v int32) {
	o.Month = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *MonthlyRevenueNightsInfoType) GetRevenue() float32 {
	if o == nil || IsNil(o.Revenue) {
		var ret float32
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyRevenueNightsInfoType) GetRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *MonthlyRevenueNightsInfoType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float32 and assigns it to the Revenue field.
func (o *MonthlyRevenueNightsInfoType) SetRevenue(v float32) {
	o.Revenue = &v
}

// GetRoomNights returns the RoomNights field value if set, zero value otherwise.
func (o *MonthlyRevenueNightsInfoType) GetRoomNights() int32 {
	if o == nil || IsNil(o.RoomNights) {
		var ret int32
		return ret
	}
	return *o.RoomNights
}

// GetRoomNightsOk returns a tuple with the RoomNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyRevenueNightsInfoType) GetRoomNightsOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomNights) {
		return nil, false
	}
	return o.RoomNights, true
}

// HasRoomNights returns a boolean if a field has been set.
func (o *MonthlyRevenueNightsInfoType) HasRoomNights() bool {
	if o != nil && !IsNil(o.RoomNights) {
		return true
	}

	return false
}

// SetRoomNights gets a reference to the given int32 and assigns it to the RoomNights field.
func (o *MonthlyRevenueNightsInfoType) SetRoomNights(v int32) {
	o.RoomNights = &v
}

func (o MonthlyRevenueNightsInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonthlyRevenueNightsInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.RoomNights) {
		toSerialize["roomNights"] = o.RoomNights
	}
	return toSerialize, nil
}

type NullableMonthlyRevenueNightsInfoType struct {
	value *MonthlyRevenueNightsInfoType
	isSet bool
}

func (v NullableMonthlyRevenueNightsInfoType) Get() *MonthlyRevenueNightsInfoType {
	return v.value
}

func (v *NullableMonthlyRevenueNightsInfoType) Set(val *MonthlyRevenueNightsInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyRevenueNightsInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyRevenueNightsInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyRevenueNightsInfoType(val *MonthlyRevenueNightsInfoType) *NullableMonthlyRevenueNightsInfoType {
	return &NullableMonthlyRevenueNightsInfoType{value: val, isSet: true}
}

func (v NullableMonthlyRevenueNightsInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyRevenueNightsInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


