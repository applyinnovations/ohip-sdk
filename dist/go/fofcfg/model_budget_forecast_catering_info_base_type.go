/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the BudgetForecastCateringInfoBaseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetForecastCateringInfoBaseType{}

// BudgetForecastCateringInfoBaseType Budget Forecast information for budget Catering codes.
type BudgetForecastCateringInfoBaseType struct {
	// Budget Forecast information for Catering segment code .
	CateringCodeInformation []CateringCodeInformationBaseType `json:"cateringCodeInformation,omitempty"`
	// Flag to indicate if covers information has to be included.
	Covers *bool `json:"covers,omitempty"`
	// Flag to indicate if revenue information has to be included.
	Revenue *bool `json:"revenue,omitempty"`
}

// NewBudgetForecastCateringInfoBaseType instantiates a new BudgetForecastCateringInfoBaseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetForecastCateringInfoBaseType() *BudgetForecastCateringInfoBaseType {
	this := BudgetForecastCateringInfoBaseType{}
	return &this
}

// NewBudgetForecastCateringInfoBaseTypeWithDefaults instantiates a new BudgetForecastCateringInfoBaseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetForecastCateringInfoBaseTypeWithDefaults() *BudgetForecastCateringInfoBaseType {
	this := BudgetForecastCateringInfoBaseType{}
	return &this
}

// GetCateringCodeInformation returns the CateringCodeInformation field value if set, zero value otherwise.
func (o *BudgetForecastCateringInfoBaseType) GetCateringCodeInformation() []CateringCodeInformationBaseType {
	if o == nil || IsNil(o.CateringCodeInformation) {
		var ret []CateringCodeInformationBaseType
		return ret
	}
	return o.CateringCodeInformation
}

// GetCateringCodeInformationOk returns a tuple with the CateringCodeInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastCateringInfoBaseType) GetCateringCodeInformationOk() ([]CateringCodeInformationBaseType, bool) {
	if o == nil || IsNil(o.CateringCodeInformation) {
		return nil, false
	}
	return o.CateringCodeInformation, true
}

// HasCateringCodeInformation returns a boolean if a field has been set.
func (o *BudgetForecastCateringInfoBaseType) HasCateringCodeInformation() bool {
	if o != nil && !IsNil(o.CateringCodeInformation) {
		return true
	}

	return false
}

// SetCateringCodeInformation gets a reference to the given []CateringCodeInformationBaseType and assigns it to the CateringCodeInformation field.
func (o *BudgetForecastCateringInfoBaseType) SetCateringCodeInformation(v []CateringCodeInformationBaseType) {
	o.CateringCodeInformation = v
}

// GetCovers returns the Covers field value if set, zero value otherwise.
func (o *BudgetForecastCateringInfoBaseType) GetCovers() bool {
	if o == nil || IsNil(o.Covers) {
		var ret bool
		return ret
	}
	return *o.Covers
}

// GetCoversOk returns a tuple with the Covers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastCateringInfoBaseType) GetCoversOk() (*bool, bool) {
	if o == nil || IsNil(o.Covers) {
		return nil, false
	}
	return o.Covers, true
}

// HasCovers returns a boolean if a field has been set.
func (o *BudgetForecastCateringInfoBaseType) HasCovers() bool {
	if o != nil && !IsNil(o.Covers) {
		return true
	}

	return false
}

// SetCovers gets a reference to the given bool and assigns it to the Covers field.
func (o *BudgetForecastCateringInfoBaseType) SetCovers(v bool) {
	o.Covers = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *BudgetForecastCateringInfoBaseType) GetRevenue() bool {
	if o == nil || IsNil(o.Revenue) {
		var ret bool
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastCateringInfoBaseType) GetRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *BudgetForecastCateringInfoBaseType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given bool and assigns it to the Revenue field.
func (o *BudgetForecastCateringInfoBaseType) SetRevenue(v bool) {
	o.Revenue = &v
}

func (o BudgetForecastCateringInfoBaseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetForecastCateringInfoBaseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CateringCodeInformation) {
		toSerialize["cateringCodeInformation"] = o.CateringCodeInformation
	}
	if !IsNil(o.Covers) {
		toSerialize["covers"] = o.Covers
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	return toSerialize, nil
}

type NullableBudgetForecastCateringInfoBaseType struct {
	value *BudgetForecastCateringInfoBaseType
	isSet bool
}

func (v NullableBudgetForecastCateringInfoBaseType) Get() *BudgetForecastCateringInfoBaseType {
	return v.value
}

func (v *NullableBudgetForecastCateringInfoBaseType) Set(val *BudgetForecastCateringInfoBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetForecastCateringInfoBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetForecastCateringInfoBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetForecastCateringInfoBaseType(val *BudgetForecastCateringInfoBaseType) *NullableBudgetForecastCateringInfoBaseType {
	return &NullableBudgetForecastCateringInfoBaseType{value: val, isSet: true}
}

func (v NullableBudgetForecastCateringInfoBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetForecastCateringInfoBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


