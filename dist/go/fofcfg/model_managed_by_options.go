/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// ManagedByOptions Describes of the Configuration is Managed by Enterprise or Property.
type ManagedByOptions string

// List of managedByOptions
const (
	MANAGEDBYOPTIONS_ENTERPRISE_MANAGED ManagedByOptions = "EnterpriseManaged"
	MANAGEDBYOPTIONS_PROPERTY_MANAGED ManagedByOptions = "PropertyManaged"
	MANAGEDBYOPTIONS_ENTERPRISE_ENFORCED ManagedByOptions = "EnterpriseEnforced"
	MANAGEDBYOPTIONS_PROPERTY_OVERRIDDEN ManagedByOptions = "PropertyOverridden"
)

// All allowed values of ManagedByOptions enum
var AllowedManagedByOptionsEnumValues = []ManagedByOptions{
	"EnterpriseManaged",
	"PropertyManaged",
	"EnterpriseEnforced",
	"PropertyOverridden",
}

func (v *ManagedByOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagedByOptions(value)
	for _, existing := range AllowedManagedByOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagedByOptions", value)
}

// NewManagedByOptionsFromValue returns a pointer to a valid ManagedByOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagedByOptionsFromValue(v string) (*ManagedByOptions, error) {
	ev := ManagedByOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagedByOptions: valid values are %v", v, AllowedManagedByOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagedByOptions) IsValid() bool {
	for _, existing := range AllowedManagedByOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to managedByOptions value
func (v ManagedByOptions) Ptr() *ManagedByOptions {
	return &v
}

type NullableManagedByOptions struct {
	value *ManagedByOptions
	isSet bool
}

func (v NullableManagedByOptions) Get() *ManagedByOptions {
	return v.value
}

func (v *NullableManagedByOptions) Set(val *ManagedByOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedByOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedByOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedByOptions(val *ManagedByOptions) *NullableManagedByOptions {
	return &NullableManagedByOptions{value: val, isSet: true}
}

func (v NullableManagedByOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedByOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

