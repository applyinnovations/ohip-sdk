/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the MonthlyCustomVarianceInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonthlyCustomVarianceInfoType{}

// MonthlyCustomVarianceInfoType Value Variance information for a CUSTOM code for a month.
type MonthlyCustomVarianceInfoType struct {
	// Month number
	Month *int32 `json:"month,omitempty"`
	// Variance for a month.
	Variance *float32 `json:"variance,omitempty"`
}

// NewMonthlyCustomVarianceInfoType instantiates a new MonthlyCustomVarianceInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyCustomVarianceInfoType() *MonthlyCustomVarianceInfoType {
	this := MonthlyCustomVarianceInfoType{}
	return &this
}

// NewMonthlyCustomVarianceInfoTypeWithDefaults instantiates a new MonthlyCustomVarianceInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyCustomVarianceInfoTypeWithDefaults() *MonthlyCustomVarianceInfoType {
	this := MonthlyCustomVarianceInfoType{}
	return &this
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *MonthlyCustomVarianceInfoType) GetMonth() int32 {
	if o == nil || IsNil(o.Month) {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyCustomVarianceInfoType) GetMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MonthlyCustomVarianceInfoType) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *MonthlyCustomVarianceInfoType) SetMonth(v int32) {
	o.Month = &v
}

// GetVariance returns the Variance field value if set, zero value otherwise.
func (o *MonthlyCustomVarianceInfoType) GetVariance() float32 {
	if o == nil || IsNil(o.Variance) {
		var ret float32
		return ret
	}
	return *o.Variance
}

// GetVarianceOk returns a tuple with the Variance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyCustomVarianceInfoType) GetVarianceOk() (*float32, bool) {
	if o == nil || IsNil(o.Variance) {
		return nil, false
	}
	return o.Variance, true
}

// HasVariance returns a boolean if a field has been set.
func (o *MonthlyCustomVarianceInfoType) HasVariance() bool {
	if o != nil && !IsNil(o.Variance) {
		return true
	}

	return false
}

// SetVariance gets a reference to the given float32 and assigns it to the Variance field.
func (o *MonthlyCustomVarianceInfoType) SetVariance(v float32) {
	o.Variance = &v
}

func (o MonthlyCustomVarianceInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonthlyCustomVarianceInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.Variance) {
		toSerialize["variance"] = o.Variance
	}
	return toSerialize, nil
}

type NullableMonthlyCustomVarianceInfoType struct {
	value *MonthlyCustomVarianceInfoType
	isSet bool
}

func (v NullableMonthlyCustomVarianceInfoType) Get() *MonthlyCustomVarianceInfoType {
	return v.value
}

func (v *NullableMonthlyCustomVarianceInfoType) Set(val *MonthlyCustomVarianceInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyCustomVarianceInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyCustomVarianceInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyCustomVarianceInfoType(val *MonthlyCustomVarianceInfoType) *NullableMonthlyCustomVarianceInfoType {
	return &NullableMonthlyCustomVarianceInfoType{value: val, isSet: true}
}

func (v NullableMonthlyCustomVarianceInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyCustomVarianceInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


