/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the AuthorizerTrxLimitType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizerTrxLimitType{}

// AuthorizerTrxLimitType A representation of the information of Transaction Limit.
type AuthorizerTrxLimitType struct {
	// Set of Billing Instruction codes.
	BillingInstructions []CodeDescriptionType `json:"billingInstructions,omitempty"`
	// Credit Limit for a transaction.
	CreditLimit *float32 `json:"creditLimit,omitempty"`
	// Group Header Id for a transaction row.
	GroupHeaderId *float32 `json:"groupHeaderId,omitempty"`
	// Occurrence Limit for a transaction.
	OccurrenceLimit *float32 `json:"occurrenceLimit,omitempty"`
	// List of Transaction codes info.
	TransactionCodes []CodeDescriptionType `json:"transactionCodes,omitempty"`
}

// NewAuthorizerTrxLimitType instantiates a new AuthorizerTrxLimitType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizerTrxLimitType() *AuthorizerTrxLimitType {
	this := AuthorizerTrxLimitType{}
	return &this
}

// NewAuthorizerTrxLimitTypeWithDefaults instantiates a new AuthorizerTrxLimitType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizerTrxLimitTypeWithDefaults() *AuthorizerTrxLimitType {
	this := AuthorizerTrxLimitType{}
	return &this
}

// GetBillingInstructions returns the BillingInstructions field value if set, zero value otherwise.
func (o *AuthorizerTrxLimitType) GetBillingInstructions() []CodeDescriptionType {
	if o == nil || IsNil(o.BillingInstructions) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.BillingInstructions
}

// GetBillingInstructionsOk returns a tuple with the BillingInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizerTrxLimitType) GetBillingInstructionsOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.BillingInstructions) {
		return nil, false
	}
	return o.BillingInstructions, true
}

// HasBillingInstructions returns a boolean if a field has been set.
func (o *AuthorizerTrxLimitType) HasBillingInstructions() bool {
	if o != nil && !IsNil(o.BillingInstructions) {
		return true
	}

	return false
}

// SetBillingInstructions gets a reference to the given []CodeDescriptionType and assigns it to the BillingInstructions field.
func (o *AuthorizerTrxLimitType) SetBillingInstructions(v []CodeDescriptionType) {
	o.BillingInstructions = v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *AuthorizerTrxLimitType) GetCreditLimit() float32 {
	if o == nil || IsNil(o.CreditLimit) {
		var ret float32
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizerTrxLimitType) GetCreditLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *AuthorizerTrxLimitType) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given float32 and assigns it to the CreditLimit field.
func (o *AuthorizerTrxLimitType) SetCreditLimit(v float32) {
	o.CreditLimit = &v
}

// GetGroupHeaderId returns the GroupHeaderId field value if set, zero value otherwise.
func (o *AuthorizerTrxLimitType) GetGroupHeaderId() float32 {
	if o == nil || IsNil(o.GroupHeaderId) {
		var ret float32
		return ret
	}
	return *o.GroupHeaderId
}

// GetGroupHeaderIdOk returns a tuple with the GroupHeaderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizerTrxLimitType) GetGroupHeaderIdOk() (*float32, bool) {
	if o == nil || IsNil(o.GroupHeaderId) {
		return nil, false
	}
	return o.GroupHeaderId, true
}

// HasGroupHeaderId returns a boolean if a field has been set.
func (o *AuthorizerTrxLimitType) HasGroupHeaderId() bool {
	if o != nil && !IsNil(o.GroupHeaderId) {
		return true
	}

	return false
}

// SetGroupHeaderId gets a reference to the given float32 and assigns it to the GroupHeaderId field.
func (o *AuthorizerTrxLimitType) SetGroupHeaderId(v float32) {
	o.GroupHeaderId = &v
}

// GetOccurrenceLimit returns the OccurrenceLimit field value if set, zero value otherwise.
func (o *AuthorizerTrxLimitType) GetOccurrenceLimit() float32 {
	if o == nil || IsNil(o.OccurrenceLimit) {
		var ret float32
		return ret
	}
	return *o.OccurrenceLimit
}

// GetOccurrenceLimitOk returns a tuple with the OccurrenceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizerTrxLimitType) GetOccurrenceLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.OccurrenceLimit) {
		return nil, false
	}
	return o.OccurrenceLimit, true
}

// HasOccurrenceLimit returns a boolean if a field has been set.
func (o *AuthorizerTrxLimitType) HasOccurrenceLimit() bool {
	if o != nil && !IsNil(o.OccurrenceLimit) {
		return true
	}

	return false
}

// SetOccurrenceLimit gets a reference to the given float32 and assigns it to the OccurrenceLimit field.
func (o *AuthorizerTrxLimitType) SetOccurrenceLimit(v float32) {
	o.OccurrenceLimit = &v
}

// GetTransactionCodes returns the TransactionCodes field value if set, zero value otherwise.
func (o *AuthorizerTrxLimitType) GetTransactionCodes() []CodeDescriptionType {
	if o == nil || IsNil(o.TransactionCodes) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.TransactionCodes
}

// GetTransactionCodesOk returns a tuple with the TransactionCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizerTrxLimitType) GetTransactionCodesOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.TransactionCodes) {
		return nil, false
	}
	return o.TransactionCodes, true
}

// HasTransactionCodes returns a boolean if a field has been set.
func (o *AuthorizerTrxLimitType) HasTransactionCodes() bool {
	if o != nil && !IsNil(o.TransactionCodes) {
		return true
	}

	return false
}

// SetTransactionCodes gets a reference to the given []CodeDescriptionType and assigns it to the TransactionCodes field.
func (o *AuthorizerTrxLimitType) SetTransactionCodes(v []CodeDescriptionType) {
	o.TransactionCodes = v
}

func (o AuthorizerTrxLimitType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizerTrxLimitType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingInstructions) {
		toSerialize["billingInstructions"] = o.BillingInstructions
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	if !IsNil(o.GroupHeaderId) {
		toSerialize["groupHeaderId"] = o.GroupHeaderId
	}
	if !IsNil(o.OccurrenceLimit) {
		toSerialize["occurrenceLimit"] = o.OccurrenceLimit
	}
	if !IsNil(o.TransactionCodes) {
		toSerialize["transactionCodes"] = o.TransactionCodes
	}
	return toSerialize, nil
}

type NullableAuthorizerTrxLimitType struct {
	value *AuthorizerTrxLimitType
	isSet bool
}

func (v NullableAuthorizerTrxLimitType) Get() *AuthorizerTrxLimitType {
	return v.value
}

func (v *NullableAuthorizerTrxLimitType) Set(val *AuthorizerTrxLimitType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizerTrxLimitType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizerTrxLimitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizerTrxLimitType(val *AuthorizerTrxLimitType) *NullableAuthorizerTrxLimitType {
	return &NullableAuthorizerTrxLimitType{value: val, isSet: true}
}

func (v NullableAuthorizerTrxLimitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizerTrxLimitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


