/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// FolioTypeProfileAttributes Profile is not configured with Tax Id.
type FolioTypeProfileAttributes string

// List of folioTypeProfileAttributes
const (
	FOLIOTYPEPROFILEATTRIBUTES_WITHOUT_TAX_ID FolioTypeProfileAttributes = "WithoutTaxId"
)

// All allowed values of FolioTypeProfileAttributes enum
var AllowedFolioTypeProfileAttributesEnumValues = []FolioTypeProfileAttributes{
	"WithoutTaxId",
}

func (v *FolioTypeProfileAttributes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FolioTypeProfileAttributes(value)
	for _, existing := range AllowedFolioTypeProfileAttributesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FolioTypeProfileAttributes", value)
}

// NewFolioTypeProfileAttributesFromValue returns a pointer to a valid FolioTypeProfileAttributes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFolioTypeProfileAttributesFromValue(v string) (*FolioTypeProfileAttributes, error) {
	ev := FolioTypeProfileAttributes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FolioTypeProfileAttributes: valid values are %v", v, AllowedFolioTypeProfileAttributesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FolioTypeProfileAttributes) IsValid() bool {
	for _, existing := range AllowedFolioTypeProfileAttributesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to folioTypeProfileAttributes value
func (v FolioTypeProfileAttributes) Ptr() *FolioTypeProfileAttributes {
	return &v
}

type NullableFolioTypeProfileAttributes struct {
	value *FolioTypeProfileAttributes
	isSet bool
}

func (v NullableFolioTypeProfileAttributes) Get() *FolioTypeProfileAttributes {
	return v.value
}

func (v *NullableFolioTypeProfileAttributes) Set(val *FolioTypeProfileAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableFolioTypeProfileAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableFolioTypeProfileAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolioTypeProfileAttributes(val *FolioTypeProfileAttributes) *NullableFolioTypeProfileAttributes {
	return &NullableFolioTypeProfileAttributes{value: val, isSet: true}
}

func (v NullableFolioTypeProfileAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolioTypeProfileAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

