/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the FiscalCommandType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalCommandType{}

// FiscalCommandType Fiscal Command details.
type FiscalCommandType struct {
	// Unique code of the hotel.
	HotelId *string `json:"hotelId,omitempty"`
	// Fiscal Command.
	FiscalCommandCode *string `json:"fiscalCommandCode,omitempty"`
	FiscalPartnerCodes []string `json:"fiscalPartnerCodes,omitempty"`
	// Fiscal Command description that is only used during a fetch.
	Description *string `json:"description,omitempty"`
	// A flag that determines whether to fetch active records or inactive records.
	Inactive *bool `json:"inactive,omitempty"`
}

// NewFiscalCommandType instantiates a new FiscalCommandType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalCommandType() *FiscalCommandType {
	this := FiscalCommandType{}
	return &this
}

// NewFiscalCommandTypeWithDefaults instantiates a new FiscalCommandType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalCommandTypeWithDefaults() *FiscalCommandType {
	this := FiscalCommandType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FiscalCommandType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalCommandType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FiscalCommandType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FiscalCommandType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetFiscalCommandCode returns the FiscalCommandCode field value if set, zero value otherwise.
func (o *FiscalCommandType) GetFiscalCommandCode() string {
	if o == nil || IsNil(o.FiscalCommandCode) {
		var ret string
		return ret
	}
	return *o.FiscalCommandCode
}

// GetFiscalCommandCodeOk returns a tuple with the FiscalCommandCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalCommandType) GetFiscalCommandCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FiscalCommandCode) {
		return nil, false
	}
	return o.FiscalCommandCode, true
}

// HasFiscalCommandCode returns a boolean if a field has been set.
func (o *FiscalCommandType) HasFiscalCommandCode() bool {
	if o != nil && !IsNil(o.FiscalCommandCode) {
		return true
	}

	return false
}

// SetFiscalCommandCode gets a reference to the given string and assigns it to the FiscalCommandCode field.
func (o *FiscalCommandType) SetFiscalCommandCode(v string) {
	o.FiscalCommandCode = &v
}

// GetFiscalPartnerCodes returns the FiscalPartnerCodes field value if set, zero value otherwise.
func (o *FiscalCommandType) GetFiscalPartnerCodes() []string {
	if o == nil || IsNil(o.FiscalPartnerCodes) {
		var ret []string
		return ret
	}
	return o.FiscalPartnerCodes
}

// GetFiscalPartnerCodesOk returns a tuple with the FiscalPartnerCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalCommandType) GetFiscalPartnerCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.FiscalPartnerCodes) {
		return nil, false
	}
	return o.FiscalPartnerCodes, true
}

// HasFiscalPartnerCodes returns a boolean if a field has been set.
func (o *FiscalCommandType) HasFiscalPartnerCodes() bool {
	if o != nil && !IsNil(o.FiscalPartnerCodes) {
		return true
	}

	return false
}

// SetFiscalPartnerCodes gets a reference to the given []string and assigns it to the FiscalPartnerCodes field.
func (o *FiscalCommandType) SetFiscalPartnerCodes(v []string) {
	o.FiscalPartnerCodes = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FiscalCommandType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalCommandType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FiscalCommandType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FiscalCommandType) SetDescription(v string) {
	o.Description = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *FiscalCommandType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalCommandType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *FiscalCommandType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *FiscalCommandType) SetInactive(v bool) {
	o.Inactive = &v
}

func (o FiscalCommandType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalCommandType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.FiscalCommandCode) {
		toSerialize["fiscalCommandCode"] = o.FiscalCommandCode
	}
	if !IsNil(o.FiscalPartnerCodes) {
		toSerialize["fiscalPartnerCodes"] = o.FiscalPartnerCodes
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	return toSerialize, nil
}

type NullableFiscalCommandType struct {
	value *FiscalCommandType
	isSet bool
}

func (v NullableFiscalCommandType) Get() *FiscalCommandType {
	return v.value
}

func (v *NullableFiscalCommandType) Set(val *FiscalCommandType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalCommandType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalCommandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalCommandType(val *FiscalCommandType) *NullableFiscalCommandType {
	return &NullableFiscalCommandType{value: val, isSet: true}
}

func (v NullableFiscalCommandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalCommandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


