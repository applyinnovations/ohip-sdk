/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CardValidationRuleTypeType Defines rules to be used for card validation.
type CardValidationRuleTypeType string

// List of cardValidationRuleTypeType
const (
	CARDVALIDATIONRULETYPETYPE_MOD7 CardValidationRuleTypeType = "Mod7"
	CARDVALIDATIONRULETYPETYPE_MOD10 CardValidationRuleTypeType = "Mod10"
	CARDVALIDATIONRULETYPETYPE_UDEF CardValidationRuleTypeType = "Udef"
	CARDVALIDATIONRULETYPETYPE_NOVALID CardValidationRuleTypeType = "Novalid"
)

// All allowed values of CardValidationRuleTypeType enum
var AllowedCardValidationRuleTypeTypeEnumValues = []CardValidationRuleTypeType{
	"Mod7",
	"Mod10",
	"Udef",
	"Novalid",
}

func (v *CardValidationRuleTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardValidationRuleTypeType(value)
	for _, existing := range AllowedCardValidationRuleTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardValidationRuleTypeType", value)
}

// NewCardValidationRuleTypeTypeFromValue returns a pointer to a valid CardValidationRuleTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardValidationRuleTypeTypeFromValue(v string) (*CardValidationRuleTypeType, error) {
	ev := CardValidationRuleTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardValidationRuleTypeType: valid values are %v", v, AllowedCardValidationRuleTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardValidationRuleTypeType) IsValid() bool {
	for _, existing := range AllowedCardValidationRuleTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cardValidationRuleTypeType value
func (v CardValidationRuleTypeType) Ptr() *CardValidationRuleTypeType {
	return &v
}

type NullableCardValidationRuleTypeType struct {
	value *CardValidationRuleTypeType
	isSet bool
}

func (v NullableCardValidationRuleTypeType) Get() *CardValidationRuleTypeType {
	return v.value
}

func (v *NullableCardValidationRuleTypeType) Set(val *CardValidationRuleTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCardValidationRuleTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCardValidationRuleTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardValidationRuleTypeType(val *CardValidationRuleTypeType) *NullableCardValidationRuleTypeType {
	return &NullableCardValidationRuleTypeType{value: val, isSet: true}
}

func (v NullableCardValidationRuleTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardValidationRuleTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

