/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the BudgetForecastCateringInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetForecastCateringInfoType{}

// BudgetForecastCateringInfoType Budget Forecast information for budget Catering codes.
type BudgetForecastCateringInfoType struct {
	// Budget Forecast totals information for Catering segment.
	CateringCodeInformation []CateringCodeInformationType `json:"cateringCodeInformation,omitempty"`
	CateringTotalsInformation *CateringTotalsInformationType `json:"cateringTotalsInformation,omitempty"`
}

// NewBudgetForecastCateringInfoType instantiates a new BudgetForecastCateringInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetForecastCateringInfoType() *BudgetForecastCateringInfoType {
	this := BudgetForecastCateringInfoType{}
	return &this
}

// NewBudgetForecastCateringInfoTypeWithDefaults instantiates a new BudgetForecastCateringInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetForecastCateringInfoTypeWithDefaults() *BudgetForecastCateringInfoType {
	this := BudgetForecastCateringInfoType{}
	return &this
}

// GetCateringCodeInformation returns the CateringCodeInformation field value if set, zero value otherwise.
func (o *BudgetForecastCateringInfoType) GetCateringCodeInformation() []CateringCodeInformationType {
	if o == nil || IsNil(o.CateringCodeInformation) {
		var ret []CateringCodeInformationType
		return ret
	}
	return o.CateringCodeInformation
}

// GetCateringCodeInformationOk returns a tuple with the CateringCodeInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastCateringInfoType) GetCateringCodeInformationOk() ([]CateringCodeInformationType, bool) {
	if o == nil || IsNil(o.CateringCodeInformation) {
		return nil, false
	}
	return o.CateringCodeInformation, true
}

// HasCateringCodeInformation returns a boolean if a field has been set.
func (o *BudgetForecastCateringInfoType) HasCateringCodeInformation() bool {
	if o != nil && !IsNil(o.CateringCodeInformation) {
		return true
	}

	return false
}

// SetCateringCodeInformation gets a reference to the given []CateringCodeInformationType and assigns it to the CateringCodeInformation field.
func (o *BudgetForecastCateringInfoType) SetCateringCodeInformation(v []CateringCodeInformationType) {
	o.CateringCodeInformation = v
}

// GetCateringTotalsInformation returns the CateringTotalsInformation field value if set, zero value otherwise.
func (o *BudgetForecastCateringInfoType) GetCateringTotalsInformation() CateringTotalsInformationType {
	if o == nil || IsNil(o.CateringTotalsInformation) {
		var ret CateringTotalsInformationType
		return ret
	}
	return *o.CateringTotalsInformation
}

// GetCateringTotalsInformationOk returns a tuple with the CateringTotalsInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastCateringInfoType) GetCateringTotalsInformationOk() (*CateringTotalsInformationType, bool) {
	if o == nil || IsNil(o.CateringTotalsInformation) {
		return nil, false
	}
	return o.CateringTotalsInformation, true
}

// HasCateringTotalsInformation returns a boolean if a field has been set.
func (o *BudgetForecastCateringInfoType) HasCateringTotalsInformation() bool {
	if o != nil && !IsNil(o.CateringTotalsInformation) {
		return true
	}

	return false
}

// SetCateringTotalsInformation gets a reference to the given CateringTotalsInformationType and assigns it to the CateringTotalsInformation field.
func (o *BudgetForecastCateringInfoType) SetCateringTotalsInformation(v CateringTotalsInformationType) {
	o.CateringTotalsInformation = &v
}

func (o BudgetForecastCateringInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetForecastCateringInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CateringCodeInformation) {
		toSerialize["cateringCodeInformation"] = o.CateringCodeInformation
	}
	if !IsNil(o.CateringTotalsInformation) {
		toSerialize["cateringTotalsInformation"] = o.CateringTotalsInformation
	}
	return toSerialize, nil
}

type NullableBudgetForecastCateringInfoType struct {
	value *BudgetForecastCateringInfoType
	isSet bool
}

func (v NullableBudgetForecastCateringInfoType) Get() *BudgetForecastCateringInfoType {
	return v.value
}

func (v *NullableBudgetForecastCateringInfoType) Set(val *BudgetForecastCateringInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetForecastCateringInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetForecastCateringInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetForecastCateringInfoType(val *BudgetForecastCateringInfoType) *NullableBudgetForecastCateringInfoType {
	return &NullableBudgetForecastCateringInfoType{value: val, isSet: true}
}

func (v NullableBudgetForecastCateringInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetForecastCateringInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


