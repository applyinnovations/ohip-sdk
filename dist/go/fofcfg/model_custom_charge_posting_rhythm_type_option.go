/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CustomChargePostingRhythmTypeOption Defined values for posting rhythm LOV.
type CustomChargePostingRhythmTypeOption string

// List of customChargePostingRhythmTypeOption
const (
	CUSTOMCHARGEPOSTINGRHYTHMTYPEOPTION_POST_EVERY_NIGHT_FOR_X_NIGHTS CustomChargePostingRhythmTypeOption = "PostEveryNightForXNights"
	CUSTOMCHARGEPOSTINGRHYTHMTYPEOPTION_POST_ON_EVERY_X_NIGHTS_STARTING_Y_NIGHT CustomChargePostingRhythmTypeOption = "PostOnEveryXNightsStartingYNight"
)

// All allowed values of CustomChargePostingRhythmTypeOption enum
var AllowedCustomChargePostingRhythmTypeOptionEnumValues = []CustomChargePostingRhythmTypeOption{
	"PostEveryNightForXNights",
	"PostOnEveryXNightsStartingYNight",
}

func (v *CustomChargePostingRhythmTypeOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CustomChargePostingRhythmTypeOption(value)
	for _, existing := range AllowedCustomChargePostingRhythmTypeOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CustomChargePostingRhythmTypeOption", value)
}

// NewCustomChargePostingRhythmTypeOptionFromValue returns a pointer to a valid CustomChargePostingRhythmTypeOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCustomChargePostingRhythmTypeOptionFromValue(v string) (*CustomChargePostingRhythmTypeOption, error) {
	ev := CustomChargePostingRhythmTypeOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CustomChargePostingRhythmTypeOption: valid values are %v", v, AllowedCustomChargePostingRhythmTypeOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CustomChargePostingRhythmTypeOption) IsValid() bool {
	for _, existing := range AllowedCustomChargePostingRhythmTypeOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to customChargePostingRhythmTypeOption value
func (v CustomChargePostingRhythmTypeOption) Ptr() *CustomChargePostingRhythmTypeOption {
	return &v
}

type NullableCustomChargePostingRhythmTypeOption struct {
	value *CustomChargePostingRhythmTypeOption
	isSet bool
}

func (v NullableCustomChargePostingRhythmTypeOption) Get() *CustomChargePostingRhythmTypeOption {
	return v.value
}

func (v *NullableCustomChargePostingRhythmTypeOption) Set(val *CustomChargePostingRhythmTypeOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomChargePostingRhythmTypeOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomChargePostingRhythmTypeOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomChargePostingRhythmTypeOption(val *CustomChargePostingRhythmTypeOption) *NullableCustomChargePostingRhythmTypeOption {
	return &NullableCustomChargePostingRhythmTypeOption{value: val, isSet: true}
}

func (v NullableCustomChargePostingRhythmTypeOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomChargePostingRhythmTypeOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

