/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// AdjustmentReasonCodeType Defines values for Adjustment reason codes. e.g. ADJ for adjustment, COR for correction, DEL for deletion.
type AdjustmentReasonCodeType string

// List of adjustmentReasonCodeType
const (
	ADJUSTMENTREASONCODETYPE_ADJUSTMENT AdjustmentReasonCodeType = "Adjustment"
	ADJUSTMENTREASONCODETYPE_CORRECTION AdjustmentReasonCodeType = "Correction"
	ADJUSTMENTREASONCODETYPE_DELETION AdjustmentReasonCodeType = "Deletion"
	ADJUSTMENTREASONCODETYPE_SERVICE_RECOVERY AdjustmentReasonCodeType = "ServiceRecovery"
	ADJUSTMENTREASONCODETYPE_CREDIT_BILL AdjustmentReasonCodeType = "CreditBill"
)

// All allowed values of AdjustmentReasonCodeType enum
var AllowedAdjustmentReasonCodeTypeEnumValues = []AdjustmentReasonCodeType{
	"Adjustment",
	"Correction",
	"Deletion",
	"ServiceRecovery",
	"CreditBill",
}

func (v *AdjustmentReasonCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AdjustmentReasonCodeType(value)
	for _, existing := range AllowedAdjustmentReasonCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AdjustmentReasonCodeType", value)
}

// NewAdjustmentReasonCodeTypeFromValue returns a pointer to a valid AdjustmentReasonCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAdjustmentReasonCodeTypeFromValue(v string) (*AdjustmentReasonCodeType, error) {
	ev := AdjustmentReasonCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AdjustmentReasonCodeType: valid values are %v", v, AllowedAdjustmentReasonCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AdjustmentReasonCodeType) IsValid() bool {
	for _, existing := range AllowedAdjustmentReasonCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to adjustmentReasonCodeType value
func (v AdjustmentReasonCodeType) Ptr() *AdjustmentReasonCodeType {
	return &v
}

type NullableAdjustmentReasonCodeType struct {
	value *AdjustmentReasonCodeType
	isSet bool
}

func (v NullableAdjustmentReasonCodeType) Get() *AdjustmentReasonCodeType {
	return v.value
}

func (v *NullableAdjustmentReasonCodeType) Set(val *AdjustmentReasonCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdjustmentReasonCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdjustmentReasonCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdjustmentReasonCodeType(val *AdjustmentReasonCodeType) *NullableAdjustmentReasonCodeType {
	return &NullableAdjustmentReasonCodeType{value: val, isSet: true}
}

func (v NullableAdjustmentReasonCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdjustmentReasonCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

