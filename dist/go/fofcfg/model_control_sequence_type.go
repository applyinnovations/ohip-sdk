/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the ControlSequenceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlSequenceType{}

// ControlSequenceType Provides information about the OPERA Control Sequence
type ControlSequenceType struct {
	// Control Sequence code associated with Hotel
	HotelId *string `json:"hotelId,omitempty"`
	ControlCode *ControlSequenceCodeType `json:"controlCode,omitempty"`
	FolioType *FolioCodeDescriptionType `json:"folioType,omitempty"`
	// Minimum value of Opera Control Sequence
	Minimum *float32 `json:"minimum,omitempty"`
	// Maximum value of Opera Control Sequence
	Maximum *float32 `json:"maximum,omitempty"`
	// Opera Control Sequence belongs to country
	CountryCode *string `json:"countryCode,omitempty"`
	// Current Sequence Value for the OPERA Sequence
	SequenceValue *float32 `json:"sequenceValue,omitempty"`
}

// NewControlSequenceType instantiates a new ControlSequenceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlSequenceType() *ControlSequenceType {
	this := ControlSequenceType{}
	return &this
}

// NewControlSequenceTypeWithDefaults instantiates a new ControlSequenceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlSequenceTypeWithDefaults() *ControlSequenceType {
	this := ControlSequenceType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ControlSequenceType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlSequenceType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ControlSequenceType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ControlSequenceType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetControlCode returns the ControlCode field value if set, zero value otherwise.
func (o *ControlSequenceType) GetControlCode() ControlSequenceCodeType {
	if o == nil || IsNil(o.ControlCode) {
		var ret ControlSequenceCodeType
		return ret
	}
	return *o.ControlCode
}

// GetControlCodeOk returns a tuple with the ControlCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlSequenceType) GetControlCodeOk() (*ControlSequenceCodeType, bool) {
	if o == nil || IsNil(o.ControlCode) {
		return nil, false
	}
	return o.ControlCode, true
}

// HasControlCode returns a boolean if a field has been set.
func (o *ControlSequenceType) HasControlCode() bool {
	if o != nil && !IsNil(o.ControlCode) {
		return true
	}

	return false
}

// SetControlCode gets a reference to the given ControlSequenceCodeType and assigns it to the ControlCode field.
func (o *ControlSequenceType) SetControlCode(v ControlSequenceCodeType) {
	o.ControlCode = &v
}

// GetFolioType returns the FolioType field value if set, zero value otherwise.
func (o *ControlSequenceType) GetFolioType() FolioCodeDescriptionType {
	if o == nil || IsNil(o.FolioType) {
		var ret FolioCodeDescriptionType
		return ret
	}
	return *o.FolioType
}

// GetFolioTypeOk returns a tuple with the FolioType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlSequenceType) GetFolioTypeOk() (*FolioCodeDescriptionType, bool) {
	if o == nil || IsNil(o.FolioType) {
		return nil, false
	}
	return o.FolioType, true
}

// HasFolioType returns a boolean if a field has been set.
func (o *ControlSequenceType) HasFolioType() bool {
	if o != nil && !IsNil(o.FolioType) {
		return true
	}

	return false
}

// SetFolioType gets a reference to the given FolioCodeDescriptionType and assigns it to the FolioType field.
func (o *ControlSequenceType) SetFolioType(v FolioCodeDescriptionType) {
	o.FolioType = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *ControlSequenceType) GetMinimum() float32 {
	if o == nil || IsNil(o.Minimum) {
		var ret float32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlSequenceType) GetMinimumOk() (*float32, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *ControlSequenceType) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given float32 and assigns it to the Minimum field.
func (o *ControlSequenceType) SetMinimum(v float32) {
	o.Minimum = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *ControlSequenceType) GetMaximum() float32 {
	if o == nil || IsNil(o.Maximum) {
		var ret float32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlSequenceType) GetMaximumOk() (*float32, bool) {
	if o == nil || IsNil(o.Maximum) {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *ControlSequenceType) HasMaximum() bool {
	if o != nil && !IsNil(o.Maximum) {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given float32 and assigns it to the Maximum field.
func (o *ControlSequenceType) SetMaximum(v float32) {
	o.Maximum = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *ControlSequenceType) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlSequenceType) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *ControlSequenceType) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *ControlSequenceType) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetSequenceValue returns the SequenceValue field value if set, zero value otherwise.
func (o *ControlSequenceType) GetSequenceValue() float32 {
	if o == nil || IsNil(o.SequenceValue) {
		var ret float32
		return ret
	}
	return *o.SequenceValue
}

// GetSequenceValueOk returns a tuple with the SequenceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlSequenceType) GetSequenceValueOk() (*float32, bool) {
	if o == nil || IsNil(o.SequenceValue) {
		return nil, false
	}
	return o.SequenceValue, true
}

// HasSequenceValue returns a boolean if a field has been set.
func (o *ControlSequenceType) HasSequenceValue() bool {
	if o != nil && !IsNil(o.SequenceValue) {
		return true
	}

	return false
}

// SetSequenceValue gets a reference to the given float32 and assigns it to the SequenceValue field.
func (o *ControlSequenceType) SetSequenceValue(v float32) {
	o.SequenceValue = &v
}

func (o ControlSequenceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlSequenceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ControlCode) {
		toSerialize["controlCode"] = o.ControlCode
	}
	if !IsNil(o.FolioType) {
		toSerialize["folioType"] = o.FolioType
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	if !IsNil(o.Maximum) {
		toSerialize["maximum"] = o.Maximum
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.SequenceValue) {
		toSerialize["sequenceValue"] = o.SequenceValue
	}
	return toSerialize, nil
}

type NullableControlSequenceType struct {
	value *ControlSequenceType
	isSet bool
}

func (v NullableControlSequenceType) Get() *ControlSequenceType {
	return v.value
}

func (v *NullableControlSequenceType) Set(val *ControlSequenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableControlSequenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableControlSequenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlSequenceType(val *ControlSequenceType) *NullableControlSequenceType {
	return &NullableControlSequenceType{value: val, isSet: true}
}

func (v NullableControlSequenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlSequenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


