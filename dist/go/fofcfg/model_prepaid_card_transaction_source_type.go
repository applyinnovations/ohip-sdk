/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// PrepaidCardTransactionSourceType Vendor transaction source type.
type PrepaidCardTransactionSourceType string

// List of prepaidCardTransactionSourceType
const (
	PREPAIDCARDTRANSACTIONSOURCETYPE_OPERA PrepaidCardTransactionSourceType = "Opera"
	PREPAIDCARDTRANSACTIONSOURCETYPE_VENDOR PrepaidCardTransactionSourceType = "Vendor"
)

// All allowed values of PrepaidCardTransactionSourceType enum
var AllowedPrepaidCardTransactionSourceTypeEnumValues = []PrepaidCardTransactionSourceType{
	"Opera",
	"Vendor",
}

func (v *PrepaidCardTransactionSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrepaidCardTransactionSourceType(value)
	for _, existing := range AllowedPrepaidCardTransactionSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrepaidCardTransactionSourceType", value)
}

// NewPrepaidCardTransactionSourceTypeFromValue returns a pointer to a valid PrepaidCardTransactionSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrepaidCardTransactionSourceTypeFromValue(v string) (*PrepaidCardTransactionSourceType, error) {
	ev := PrepaidCardTransactionSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrepaidCardTransactionSourceType: valid values are %v", v, AllowedPrepaidCardTransactionSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrepaidCardTransactionSourceType) IsValid() bool {
	for _, existing := range AllowedPrepaidCardTransactionSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to prepaidCardTransactionSourceType value
func (v PrepaidCardTransactionSourceType) Ptr() *PrepaidCardTransactionSourceType {
	return &v
}

type NullablePrepaidCardTransactionSourceType struct {
	value *PrepaidCardTransactionSourceType
	isSet bool
}

func (v NullablePrepaidCardTransactionSourceType) Get() *PrepaidCardTransactionSourceType {
	return v.value
}

func (v *NullablePrepaidCardTransactionSourceType) Set(val *PrepaidCardTransactionSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepaidCardTransactionSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepaidCardTransactionSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepaidCardTransactionSourceType(val *PrepaidCardTransactionSourceType) *NullablePrepaidCardTransactionSourceType {
	return &NullablePrepaidCardTransactionSourceType{value: val, isSet: true}
}

func (v NullablePrepaidCardTransactionSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepaidCardTransactionSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

