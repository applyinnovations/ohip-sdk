/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the BankAccounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankAccounts{}

// BankAccounts Request object to edit Bank Accounts
type BankAccounts struct {
	// List of bank accounts.
	BankAccounts []ConfigBankAccountType `json:"bankAccounts,omitempty"`
	// Update default confirmation response
	UpdateDefault *bool `json:"updateDefault,omitempty"`
	// Update default for currency confirmation response
	UpdateDefaultForCurrency *bool `json:"updateDefaultForCurrency,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewBankAccounts instantiates a new BankAccounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankAccounts() *BankAccounts {
	this := BankAccounts{}
	return &this
}

// NewBankAccountsWithDefaults instantiates a new BankAccounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankAccountsWithDefaults() *BankAccounts {
	this := BankAccounts{}
	return &this
}

// GetBankAccounts returns the BankAccounts field value if set, zero value otherwise.
func (o *BankAccounts) GetBankAccounts() []ConfigBankAccountType {
	if o == nil || IsNil(o.BankAccounts) {
		var ret []ConfigBankAccountType
		return ret
	}
	return o.BankAccounts
}

// GetBankAccountsOk returns a tuple with the BankAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccounts) GetBankAccountsOk() ([]ConfigBankAccountType, bool) {
	if o == nil || IsNil(o.BankAccounts) {
		return nil, false
	}
	return o.BankAccounts, true
}

// HasBankAccounts returns a boolean if a field has been set.
func (o *BankAccounts) HasBankAccounts() bool {
	if o != nil && !IsNil(o.BankAccounts) {
		return true
	}

	return false
}

// SetBankAccounts gets a reference to the given []ConfigBankAccountType and assigns it to the BankAccounts field.
func (o *BankAccounts) SetBankAccounts(v []ConfigBankAccountType) {
	o.BankAccounts = v
}

// GetUpdateDefault returns the UpdateDefault field value if set, zero value otherwise.
func (o *BankAccounts) GetUpdateDefault() bool {
	if o == nil || IsNil(o.UpdateDefault) {
		var ret bool
		return ret
	}
	return *o.UpdateDefault
}

// GetUpdateDefaultOk returns a tuple with the UpdateDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccounts) GetUpdateDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDefault) {
		return nil, false
	}
	return o.UpdateDefault, true
}

// HasUpdateDefault returns a boolean if a field has been set.
func (o *BankAccounts) HasUpdateDefault() bool {
	if o != nil && !IsNil(o.UpdateDefault) {
		return true
	}

	return false
}

// SetUpdateDefault gets a reference to the given bool and assigns it to the UpdateDefault field.
func (o *BankAccounts) SetUpdateDefault(v bool) {
	o.UpdateDefault = &v
}

// GetUpdateDefaultForCurrency returns the UpdateDefaultForCurrency field value if set, zero value otherwise.
func (o *BankAccounts) GetUpdateDefaultForCurrency() bool {
	if o == nil || IsNil(o.UpdateDefaultForCurrency) {
		var ret bool
		return ret
	}
	return *o.UpdateDefaultForCurrency
}

// GetUpdateDefaultForCurrencyOk returns a tuple with the UpdateDefaultForCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccounts) GetUpdateDefaultForCurrencyOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateDefaultForCurrency) {
		return nil, false
	}
	return o.UpdateDefaultForCurrency, true
}

// HasUpdateDefaultForCurrency returns a boolean if a field has been set.
func (o *BankAccounts) HasUpdateDefaultForCurrency() bool {
	if o != nil && !IsNil(o.UpdateDefaultForCurrency) {
		return true
	}

	return false
}

// SetUpdateDefaultForCurrency gets a reference to the given bool and assigns it to the UpdateDefaultForCurrency field.
func (o *BankAccounts) SetUpdateDefaultForCurrency(v bool) {
	o.UpdateDefaultForCurrency = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *BankAccounts) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccounts) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *BankAccounts) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *BankAccounts) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *BankAccounts) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankAccounts) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BankAccounts) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *BankAccounts) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o BankAccounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankAccounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAccounts) {
		toSerialize["bankAccounts"] = o.BankAccounts
	}
	if !IsNil(o.UpdateDefault) {
		toSerialize["updateDefault"] = o.UpdateDefault
	}
	if !IsNil(o.UpdateDefaultForCurrency) {
		toSerialize["updateDefaultForCurrency"] = o.UpdateDefaultForCurrency
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableBankAccounts struct {
	value *BankAccounts
	isSet bool
}

func (v NullableBankAccounts) Get() *BankAccounts {
	return v.value
}

func (v *NullableBankAccounts) Set(val *BankAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableBankAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableBankAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankAccounts(val *BankAccounts) *NullableBankAccounts {
	return &NullableBankAccounts{value: val, isSet: true}
}

func (v NullableBankAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


