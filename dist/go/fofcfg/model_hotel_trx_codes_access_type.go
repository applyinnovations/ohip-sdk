/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the HotelTrxCodesAccessType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelTrxCodesAccessType{}

// HotelTrxCodesAccessType Transaction Codes associated with particular Hotel
type HotelTrxCodesAccessType struct {
	// Transaction Code and Description. Description is for information only and is used for fetch operation.
	TransactionCode []CodeDescriptionType `json:"transactionCode,omitempty"`
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
}

// NewHotelTrxCodesAccessType instantiates a new HotelTrxCodesAccessType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelTrxCodesAccessType() *HotelTrxCodesAccessType {
	this := HotelTrxCodesAccessType{}
	return &this
}

// NewHotelTrxCodesAccessTypeWithDefaults instantiates a new HotelTrxCodesAccessType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelTrxCodesAccessTypeWithDefaults() *HotelTrxCodesAccessType {
	this := HotelTrxCodesAccessType{}
	return &this
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *HotelTrxCodesAccessType) GetTransactionCode() []CodeDescriptionType {
	if o == nil || IsNil(o.TransactionCode) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelTrxCodesAccessType) GetTransactionCodeOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *HotelTrxCodesAccessType) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given []CodeDescriptionType and assigns it to the TransactionCode field.
func (o *HotelTrxCodesAccessType) SetTransactionCode(v []CodeDescriptionType) {
	o.TransactionCode = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelTrxCodesAccessType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelTrxCodesAccessType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelTrxCodesAccessType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelTrxCodesAccessType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o HotelTrxCodesAccessType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelTrxCodesAccessType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableHotelTrxCodesAccessType struct {
	value *HotelTrxCodesAccessType
	isSet bool
}

func (v NullableHotelTrxCodesAccessType) Get() *HotelTrxCodesAccessType {
	return v.value
}

func (v *NullableHotelTrxCodesAccessType) Set(val *HotelTrxCodesAccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelTrxCodesAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelTrxCodesAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelTrxCodesAccessType(val *HotelTrxCodesAccessType) *NullableHotelTrxCodesAccessType {
	return &NullableHotelTrxCodesAccessType{value: val, isSet: true}
}

func (v NullableHotelTrxCodesAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelTrxCodesAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


