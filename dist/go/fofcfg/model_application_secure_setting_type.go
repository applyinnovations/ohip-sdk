/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the ApplicationSecureSettingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationSecureSettingType{}

// ApplicationSecureSettingType Internal settings that is mainly used to get a secure information on the type.
type ApplicationSecureSettingType struct {
	LevelCode *string `json:"levelCode,omitempty"`
	LevelType *ApplicationSettingLevelType `json:"levelType,omitempty"`
	Name *string `json:"name,omitempty"`
	SecuredValue *string `json:"securedValue,omitempty"`
}

// NewApplicationSecureSettingType instantiates a new ApplicationSecureSettingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSecureSettingType() *ApplicationSecureSettingType {
	this := ApplicationSecureSettingType{}
	return &this
}

// NewApplicationSecureSettingTypeWithDefaults instantiates a new ApplicationSecureSettingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSecureSettingTypeWithDefaults() *ApplicationSecureSettingType {
	this := ApplicationSecureSettingType{}
	return &this
}

// GetLevelCode returns the LevelCode field value if set, zero value otherwise.
func (o *ApplicationSecureSettingType) GetLevelCode() string {
	if o == nil || IsNil(o.LevelCode) {
		var ret string
		return ret
	}
	return *o.LevelCode
}

// GetLevelCodeOk returns a tuple with the LevelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecureSettingType) GetLevelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LevelCode) {
		return nil, false
	}
	return o.LevelCode, true
}

// HasLevelCode returns a boolean if a field has been set.
func (o *ApplicationSecureSettingType) HasLevelCode() bool {
	if o != nil && !IsNil(o.LevelCode) {
		return true
	}

	return false
}

// SetLevelCode gets a reference to the given string and assigns it to the LevelCode field.
func (o *ApplicationSecureSettingType) SetLevelCode(v string) {
	o.LevelCode = &v
}

// GetLevelType returns the LevelType field value if set, zero value otherwise.
func (o *ApplicationSecureSettingType) GetLevelType() ApplicationSettingLevelType {
	if o == nil || IsNil(o.LevelType) {
		var ret ApplicationSettingLevelType
		return ret
	}
	return *o.LevelType
}

// GetLevelTypeOk returns a tuple with the LevelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecureSettingType) GetLevelTypeOk() (*ApplicationSettingLevelType, bool) {
	if o == nil || IsNil(o.LevelType) {
		return nil, false
	}
	return o.LevelType, true
}

// HasLevelType returns a boolean if a field has been set.
func (o *ApplicationSecureSettingType) HasLevelType() bool {
	if o != nil && !IsNil(o.LevelType) {
		return true
	}

	return false
}

// SetLevelType gets a reference to the given ApplicationSettingLevelType and assigns it to the LevelType field.
func (o *ApplicationSecureSettingType) SetLevelType(v ApplicationSettingLevelType) {
	o.LevelType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApplicationSecureSettingType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecureSettingType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationSecureSettingType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApplicationSecureSettingType) SetName(v string) {
	o.Name = &v
}

// GetSecuredValue returns the SecuredValue field value if set, zero value otherwise.
func (o *ApplicationSecureSettingType) GetSecuredValue() string {
	if o == nil || IsNil(o.SecuredValue) {
		var ret string
		return ret
	}
	return *o.SecuredValue
}

// GetSecuredValueOk returns a tuple with the SecuredValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecureSettingType) GetSecuredValueOk() (*string, bool) {
	if o == nil || IsNil(o.SecuredValue) {
		return nil, false
	}
	return o.SecuredValue, true
}

// HasSecuredValue returns a boolean if a field has been set.
func (o *ApplicationSecureSettingType) HasSecuredValue() bool {
	if o != nil && !IsNil(o.SecuredValue) {
		return true
	}

	return false
}

// SetSecuredValue gets a reference to the given string and assigns it to the SecuredValue field.
func (o *ApplicationSecureSettingType) SetSecuredValue(v string) {
	o.SecuredValue = &v
}

func (o ApplicationSecureSettingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationSecureSettingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LevelCode) {
		toSerialize["levelCode"] = o.LevelCode
	}
	if !IsNil(o.LevelType) {
		toSerialize["levelType"] = o.LevelType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SecuredValue) {
		toSerialize["securedValue"] = o.SecuredValue
	}
	return toSerialize, nil
}

type NullableApplicationSecureSettingType struct {
	value *ApplicationSecureSettingType
	isSet bool
}

func (v NullableApplicationSecureSettingType) Get() *ApplicationSecureSettingType {
	return v.value
}

func (v *NullableApplicationSecureSettingType) Set(val *ApplicationSecureSettingType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSecureSettingType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSecureSettingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSecureSettingType(val *ApplicationSecureSettingType) *NullableApplicationSecureSettingType {
	return &NullableApplicationSecureSettingType{value: val, isSet: true}
}

func (v NullableApplicationSecureSettingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSecureSettingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


