/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TransactionAdjustmentType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionAdjustmentType{}

// TransactionAdjustmentType Combination of Adjustment Reason Code and Transaction Adjustment Code.
type TransactionAdjustmentType struct {
	// Adjustment reason Code
	AdjustmentReasonCode *string `json:"adjustmentReasonCode,omitempty"`
	// Adjustment Transaction Code
	AdjustmentTransactionCode *string `json:"adjustmentTransactionCode,omitempty"`
}

// NewTransactionAdjustmentType instantiates a new TransactionAdjustmentType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionAdjustmentType() *TransactionAdjustmentType {
	this := TransactionAdjustmentType{}
	return &this
}

// NewTransactionAdjustmentTypeWithDefaults instantiates a new TransactionAdjustmentType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionAdjustmentTypeWithDefaults() *TransactionAdjustmentType {
	this := TransactionAdjustmentType{}
	return &this
}

// GetAdjustmentReasonCode returns the AdjustmentReasonCode field value if set, zero value otherwise.
func (o *TransactionAdjustmentType) GetAdjustmentReasonCode() string {
	if o == nil || IsNil(o.AdjustmentReasonCode) {
		var ret string
		return ret
	}
	return *o.AdjustmentReasonCode
}

// GetAdjustmentReasonCodeOk returns a tuple with the AdjustmentReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAdjustmentType) GetAdjustmentReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustmentReasonCode) {
		return nil, false
	}
	return o.AdjustmentReasonCode, true
}

// HasAdjustmentReasonCode returns a boolean if a field has been set.
func (o *TransactionAdjustmentType) HasAdjustmentReasonCode() bool {
	if o != nil && !IsNil(o.AdjustmentReasonCode) {
		return true
	}

	return false
}

// SetAdjustmentReasonCode gets a reference to the given string and assigns it to the AdjustmentReasonCode field.
func (o *TransactionAdjustmentType) SetAdjustmentReasonCode(v string) {
	o.AdjustmentReasonCode = &v
}

// GetAdjustmentTransactionCode returns the AdjustmentTransactionCode field value if set, zero value otherwise.
func (o *TransactionAdjustmentType) GetAdjustmentTransactionCode() string {
	if o == nil || IsNil(o.AdjustmentTransactionCode) {
		var ret string
		return ret
	}
	return *o.AdjustmentTransactionCode
}

// GetAdjustmentTransactionCodeOk returns a tuple with the AdjustmentTransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAdjustmentType) GetAdjustmentTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AdjustmentTransactionCode) {
		return nil, false
	}
	return o.AdjustmentTransactionCode, true
}

// HasAdjustmentTransactionCode returns a boolean if a field has been set.
func (o *TransactionAdjustmentType) HasAdjustmentTransactionCode() bool {
	if o != nil && !IsNil(o.AdjustmentTransactionCode) {
		return true
	}

	return false
}

// SetAdjustmentTransactionCode gets a reference to the given string and assigns it to the AdjustmentTransactionCode field.
func (o *TransactionAdjustmentType) SetAdjustmentTransactionCode(v string) {
	o.AdjustmentTransactionCode = &v
}

func (o TransactionAdjustmentType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionAdjustmentType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdjustmentReasonCode) {
		toSerialize["adjustmentReasonCode"] = o.AdjustmentReasonCode
	}
	if !IsNil(o.AdjustmentTransactionCode) {
		toSerialize["adjustmentTransactionCode"] = o.AdjustmentTransactionCode
	}
	return toSerialize, nil
}

type NullableTransactionAdjustmentType struct {
	value *TransactionAdjustmentType
	isSet bool
}

func (v NullableTransactionAdjustmentType) Get() *TransactionAdjustmentType {
	return v.value
}

func (v *NullableTransactionAdjustmentType) Set(val *TransactionAdjustmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAdjustmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAdjustmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAdjustmentType(val *TransactionAdjustmentType) *NullableTransactionAdjustmentType {
	return &NullableTransactionAdjustmentType{value: val, isSet: true}
}

func (v NullableTransactionAdjustmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAdjustmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


