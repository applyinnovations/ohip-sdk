/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CopyTransactionCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyTransactionCodeType{}

// CopyTransactionCodeType The type gives details of the source transaction code to be copied. Details also include the new code and description with which the transaction code will be copied under the same hotel code.
type CopyTransactionCodeType struct {
	// Source transaction code to be copied.
	SourceTransactionCode *string `json:"sourceTransactionCode,omitempty"`
	CopyAs *CodeDescriptionType `json:"copyAs,omitempty"`
}

// NewCopyTransactionCodeType instantiates a new CopyTransactionCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyTransactionCodeType() *CopyTransactionCodeType {
	this := CopyTransactionCodeType{}
	return &this
}

// NewCopyTransactionCodeTypeWithDefaults instantiates a new CopyTransactionCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyTransactionCodeTypeWithDefaults() *CopyTransactionCodeType {
	this := CopyTransactionCodeType{}
	return &this
}

// GetSourceTransactionCode returns the SourceTransactionCode field value if set, zero value otherwise.
func (o *CopyTransactionCodeType) GetSourceTransactionCode() string {
	if o == nil || IsNil(o.SourceTransactionCode) {
		var ret string
		return ret
	}
	return *o.SourceTransactionCode
}

// GetSourceTransactionCodeOk returns a tuple with the SourceTransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyTransactionCodeType) GetSourceTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SourceTransactionCode) {
		return nil, false
	}
	return o.SourceTransactionCode, true
}

// HasSourceTransactionCode returns a boolean if a field has been set.
func (o *CopyTransactionCodeType) HasSourceTransactionCode() bool {
	if o != nil && !IsNil(o.SourceTransactionCode) {
		return true
	}

	return false
}

// SetSourceTransactionCode gets a reference to the given string and assigns it to the SourceTransactionCode field.
func (o *CopyTransactionCodeType) SetSourceTransactionCode(v string) {
	o.SourceTransactionCode = &v
}

// GetCopyAs returns the CopyAs field value if set, zero value otherwise.
func (o *CopyTransactionCodeType) GetCopyAs() CodeDescriptionType {
	if o == nil || IsNil(o.CopyAs) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.CopyAs
}

// GetCopyAsOk returns a tuple with the CopyAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyTransactionCodeType) GetCopyAsOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.CopyAs) {
		return nil, false
	}
	return o.CopyAs, true
}

// HasCopyAs returns a boolean if a field has been set.
func (o *CopyTransactionCodeType) HasCopyAs() bool {
	if o != nil && !IsNil(o.CopyAs) {
		return true
	}

	return false
}

// SetCopyAs gets a reference to the given CodeDescriptionType and assigns it to the CopyAs field.
func (o *CopyTransactionCodeType) SetCopyAs(v CodeDescriptionType) {
	o.CopyAs = &v
}

func (o CopyTransactionCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyTransactionCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceTransactionCode) {
		toSerialize["sourceTransactionCode"] = o.SourceTransactionCode
	}
	if !IsNil(o.CopyAs) {
		toSerialize["copyAs"] = o.CopyAs
	}
	return toSerialize, nil
}

type NullableCopyTransactionCodeType struct {
	value *CopyTransactionCodeType
	isSet bool
}

func (v NullableCopyTransactionCodeType) Get() *CopyTransactionCodeType {
	return v.value
}

func (v *NullableCopyTransactionCodeType) Set(val *CopyTransactionCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyTransactionCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyTransactionCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyTransactionCodeType(val *CopyTransactionCodeType) *NullableCopyTransactionCodeType {
	return &NullableCopyTransactionCodeType{value: val, isSet: true}
}

func (v NullableCopyTransactionCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyTransactionCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


