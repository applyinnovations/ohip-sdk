/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// YearTypeType Defined Values for Fiscal Year Type.
type YearTypeType string

// List of yearTypeType
const (
	YEARTYPETYPE_CALENDAR YearTypeType = "Calendar"
	YEARTYPETYPE_FISCAL YearTypeType = "Fiscal"
)

// All allowed values of YearTypeType enum
var AllowedYearTypeTypeEnumValues = []YearTypeType{
	"Calendar",
	"Fiscal",
}

func (v *YearTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := YearTypeType(value)
	for _, existing := range AllowedYearTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid YearTypeType", value)
}

// NewYearTypeTypeFromValue returns a pointer to a valid YearTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewYearTypeTypeFromValue(v string) (*YearTypeType, error) {
	ev := YearTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for YearTypeType: valid values are %v", v, AllowedYearTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v YearTypeType) IsValid() bool {
	for _, existing := range AllowedYearTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to yearTypeType value
func (v YearTypeType) Ptr() *YearTypeType {
	return &v
}

type NullableYearTypeType struct {
	value *YearTypeType
	isSet bool
}

func (v NullableYearTypeType) Get() *YearTypeType {
	return v.value
}

func (v *NullableYearTypeType) Set(val *YearTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableYearTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableYearTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYearTypeType(val *YearTypeType) *NullableYearTypeType {
	return &NullableYearTypeType{value: val, isSet: true}
}

func (v NullableYearTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYearTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

