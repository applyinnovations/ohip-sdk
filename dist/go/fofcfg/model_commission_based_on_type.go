/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// CommissionBasedOnType Commission based on Revenue.
type CommissionBasedOnType string

// List of commissionBasedOnType
const (
	COMMISSIONBASEDONTYPE_RESERVATION CommissionBasedOnType = "Reservation"
	COMMISSIONBASEDONTYPE_REVENUE CommissionBasedOnType = "Revenue"
)

// All allowed values of CommissionBasedOnType enum
var AllowedCommissionBasedOnTypeEnumValues = []CommissionBasedOnType{
	"Reservation",
	"Revenue",
}

func (v *CommissionBasedOnType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommissionBasedOnType(value)
	for _, existing := range AllowedCommissionBasedOnTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommissionBasedOnType", value)
}

// NewCommissionBasedOnTypeFromValue returns a pointer to a valid CommissionBasedOnType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionBasedOnTypeFromValue(v string) (*CommissionBasedOnType, error) {
	ev := CommissionBasedOnType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionBasedOnType: valid values are %v", v, AllowedCommissionBasedOnTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionBasedOnType) IsValid() bool {
	for _, existing := range AllowedCommissionBasedOnTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to commissionBasedOnType value
func (v CommissionBasedOnType) Ptr() *CommissionBasedOnType {
	return &v
}

type NullableCommissionBasedOnType struct {
	value *CommissionBasedOnType
	isSet bool
}

func (v NullableCommissionBasedOnType) Get() *CommissionBasedOnType {
	return v.value
}

func (v *NullableCommissionBasedOnType) Set(val *CommissionBasedOnType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionBasedOnType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionBasedOnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionBasedOnType(val *CommissionBasedOnType) *NullableCommissionBasedOnType {
	return &NullableCommissionBasedOnType{value: val, isSet: true}
}

func (v NullableCommissionBasedOnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionBasedOnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

