/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CommissionConfigApiService CommissionConfigApi service
type CommissionConfigApiService service

type CommissionConfigApiDeleteCommissionCodesRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	hotelIds *[]string
	commissionCodes *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Property of the commission code.
func (r CommissionConfigApiDeleteCommissionCodesRequest) HotelIds(hotelIds []string) CommissionConfigApiDeleteCommissionCodesRequest {
	r.hotelIds = &hotelIds
	return r
}

// Commission code for which details are deleted.
func (r CommissionConfigApiDeleteCommissionCodesRequest) CommissionCodes(commissionCodes []string) CommissionConfigApiDeleteCommissionCodesRequest {
	r.commissionCodes = &commissionCodes
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiDeleteCommissionCodesRequest) Authorization(authorization string) CommissionConfigApiDeleteCommissionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiDeleteCommissionCodesRequest) XAppKey(xAppKey string) CommissionConfigApiDeleteCommissionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiDeleteCommissionCodesRequest) XHotelid(xHotelid string) CommissionConfigApiDeleteCommissionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r CommissionConfigApiDeleteCommissionCodesRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiDeleteCommissionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiDeleteCommissionCodesRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiDeleteCommissionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiDeleteCommissionCodesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteCommissionCodesExecute(r)
}

/*
DeleteCommissionCodes Operation to remove commission codes.

 <p><strong>OperationId:</strong>deleteCommissionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiDeleteCommissionCodesRequest
*/
func (a *CommissionConfigApiService) DeleteCommissionCodes(ctx context.Context) CommissionConfigApiDeleteCommissionCodesRequest {
	return CommissionConfigApiDeleteCommissionCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) DeleteCommissionCodesExecute(r CommissionConfigApiDeleteCommissionCodesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.DeleteCommissionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/commissionCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	{
		t := *r.commissionCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commissionCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commissionCodes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiDeleteConfigBankAccountsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	hotelId *[]string
	bankAccountID *[]float32
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Property of the bank account.
func (r CommissionConfigApiDeleteConfigBankAccountsRequest) HotelId(hotelId []string) CommissionConfigApiDeleteConfigBankAccountsRequest {
	r.hotelId = &hotelId
	return r
}

// Bank account ID.
func (r CommissionConfigApiDeleteConfigBankAccountsRequest) BankAccountID(bankAccountID []float32) CommissionConfigApiDeleteConfigBankAccountsRequest {
	r.bankAccountID = &bankAccountID
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiDeleteConfigBankAccountsRequest) Authorization(authorization string) CommissionConfigApiDeleteConfigBankAccountsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiDeleteConfigBankAccountsRequest) XAppKey(xAppKey string) CommissionConfigApiDeleteConfigBankAccountsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiDeleteConfigBankAccountsRequest) XHotelid(xHotelid string) CommissionConfigApiDeleteConfigBankAccountsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r CommissionConfigApiDeleteConfigBankAccountsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiDeleteConfigBankAccountsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiDeleteConfigBankAccountsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiDeleteConfigBankAccountsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiDeleteConfigBankAccountsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteConfigBankAccountsExecute(r)
}

/*
DeleteConfigBankAccounts Operation to remove config bank accounts.

 <p><strong>OperationId:</strong>deleteConfigBankAccounts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiDeleteConfigBankAccountsRequest
*/
func (a *CommissionConfigApiService) DeleteConfigBankAccounts(ctx context.Context) CommissionConfigApiDeleteConfigBankAccountsRequest {
	return CommissionConfigApiDeleteConfigBankAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) DeleteConfigBankAccountsExecute(r CommissionConfigApiDeleteConfigBankAccountsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.DeleteConfigBankAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configBankAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", t, "multi")
		}
	}
	{
		t := *r.bankAccountID
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountID", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountID", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiDeleteStopProcessingReasonsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	codes *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

func (r CommissionConfigApiDeleteStopProcessingReasonsRequest) Codes(codes []string) CommissionConfigApiDeleteStopProcessingReasonsRequest {
	r.codes = &codes
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiDeleteStopProcessingReasonsRequest) Authorization(authorization string) CommissionConfigApiDeleteStopProcessingReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiDeleteStopProcessingReasonsRequest) XAppKey(xAppKey string) CommissionConfigApiDeleteStopProcessingReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiDeleteStopProcessingReasonsRequest) XHotelid(xHotelid string) CommissionConfigApiDeleteStopProcessingReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r CommissionConfigApiDeleteStopProcessingReasonsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiDeleteStopProcessingReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiDeleteStopProcessingReasonsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiDeleteStopProcessingReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiDeleteStopProcessingReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteStopProcessingReasonsExecute(r)
}

/*
DeleteStopProcessingReasons Operation to remove stop processing reasons.

 <p><strong>OperationId:</strong>deleteStopProcessingReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiDeleteStopProcessingReasonsRequest
*/
func (a *CommissionConfigApiService) DeleteStopProcessingReasons(ctx context.Context) CommissionConfigApiDeleteStopProcessingReasonsRequest {
	return CommissionConfigApiDeleteStopProcessingReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) DeleteStopProcessingReasonsExecute(r CommissionConfigApiDeleteStopProcessingReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.DeleteStopProcessingReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stopProcessingReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiGetCommissionCodeRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	commissionCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiGetCommissionCodeRequest) Authorization(authorization string) CommissionConfigApiGetCommissionCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiGetCommissionCodeRequest) XAppKey(xAppKey string) CommissionConfigApiGetCommissionCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiGetCommissionCodeRequest) XHotelid(xHotelid string) CommissionConfigApiGetCommissionCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r CommissionConfigApiGetCommissionCodeRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiGetCommissionCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiGetCommissionCodeRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiGetCommissionCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiGetCommissionCodeRequest) Execute() (*CommissionCodeDetail, *http.Response, error) {
	return r.ApiService.GetCommissionCodeExecute(r)
}

/*
GetCommissionCode Operation to fetch commission code.

 <p><strong>OperationId:</strong>getCommissionCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param commissionCode Commission Code in OPERA
 @param hotelId Unique ID of the hotel in OPERA
 @return CommissionConfigApiGetCommissionCodeRequest
*/
func (a *CommissionConfigApiService) GetCommissionCode(ctx context.Context, commissionCode string, hotelId string) CommissionConfigApiGetCommissionCodeRequest {
	return CommissionConfigApiGetCommissionCodeRequest{
		ApiService: a,
		ctx: ctx,
		commissionCode: commissionCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CommissionCodeDetail
func (a *CommissionConfigApiService) GetCommissionCodeExecute(r CommissionConfigApiGetCommissionCodeRequest) (*CommissionCodeDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionCodeDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.GetCommissionCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/commissionCode/{commissionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"commissionCode"+"}", url.PathEscape(parameterValueToString(r.commissionCode, "commissionCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.commissionCode) < 1 {
		return localVarReturnValue, nil, reportError("commissionCode must have at least 1 elements")
	}
	if strlen(r.commissionCode) > 2000 {
		return localVarReturnValue, nil, reportError("commissionCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiGetCommissionCodesRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	hotelIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	commissionCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

func (r CommissionConfigApiGetCommissionCodesRequest) HotelIds(hotelIds []string) CommissionConfigApiGetCommissionCodesRequest {
	r.hotelIds = &hotelIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiGetCommissionCodesRequest) Authorization(authorization string) CommissionConfigApiGetCommissionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiGetCommissionCodesRequest) XAppKey(xAppKey string) CommissionConfigApiGetCommissionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiGetCommissionCodesRequest) XHotelid(xHotelid string) CommissionConfigApiGetCommissionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r CommissionConfigApiGetCommissionCodesRequest) CommissionCodes(commissionCodes []string) CommissionConfigApiGetCommissionCodesRequest {
	r.commissionCodes = &commissionCodes
	return r
}

// External system code.
func (r CommissionConfigApiGetCommissionCodesRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiGetCommissionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiGetCommissionCodesRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiGetCommissionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiGetCommissionCodesRequest) Execute() (*CommissionCodesSummary, *http.Response, error) {
	return r.ApiService.GetCommissionCodesExecute(r)
}

/*
GetCommissionCodes Operation to fetch commission codes.

 <p><strong>OperationId:</strong>getCommissionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiGetCommissionCodesRequest
*/
func (a *CommissionConfigApiService) GetCommissionCodes(ctx context.Context) CommissionConfigApiGetCommissionCodesRequest {
	return CommissionConfigApiGetCommissionCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommissionCodesSummary
func (a *CommissionConfigApiService) GetCommissionCodesExecute(r CommissionConfigApiGetCommissionCodesRequest) (*CommissionCodesSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommissionCodesSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.GetCommissionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/commissionCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.commissionCodes != nil {
		t := *r.commissionCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commissionCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commissionCodes", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiGetConfigBankAccountsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	hotels *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	bankCodes *[]string
	wildCard *string
	xExternalsystem *string
	acceptLanguage *string
}

func (r CommissionConfigApiGetConfigBankAccountsRequest) Hotels(hotels []string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.hotels = &hotels
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiGetConfigBankAccountsRequest) Authorization(authorization string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiGetConfigBankAccountsRequest) XAppKey(xAppKey string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiGetConfigBankAccountsRequest) XHotelid(xHotelid string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Codes to be searched.
func (r CommissionConfigApiGetConfigBankAccountsRequest) BankCodes(bankCodes []string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.bankCodes = &bankCodes
	return r
}

// Wildcard search on the code.
func (r CommissionConfigApiGetConfigBankAccountsRequest) WildCard(wildCard string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.wildCard = &wildCard
	return r
}

// External system code.
func (r CommissionConfigApiGetConfigBankAccountsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiGetConfigBankAccountsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiGetConfigBankAccountsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiGetConfigBankAccountsRequest) Execute() (*BankAccountsInfo, *http.Response, error) {
	return r.ApiService.GetConfigBankAccountsExecute(r)
}

/*
GetConfigBankAccounts Operation to fetch config bank accounts.

 <p><strong>OperationId:</strong>getConfigBankAccounts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiGetConfigBankAccountsRequest
*/
func (a *CommissionConfigApiService) GetConfigBankAccounts(ctx context.Context) CommissionConfigApiGetConfigBankAccountsRequest {
	return CommissionConfigApiGetConfigBankAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankAccountsInfo
func (a *CommissionConfigApiService) GetConfigBankAccountsExecute(r CommissionConfigApiGetConfigBankAccountsRequest) (*BankAccountsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankAccountsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.GetConfigBankAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configBankAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotels", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotels", t, "multi")
		}
	}
	if r.bankCodes != nil {
		t := *r.bankCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "bankCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "bankCodes", t, "multi")
		}
	}
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiGetStopProcessingReasonsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInactive *bool
	codes *[]string
	wildCard *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiGetStopProcessingReasonsRequest) Authorization(authorization string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiGetStopProcessingReasonsRequest) XAppKey(xAppKey string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiGetStopProcessingReasonsRequest) XHotelid(xHotelid string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Determines wether to fetch inactive records or not.
func (r CommissionConfigApiGetStopProcessingReasonsRequest) FetchInactive(fetchInactive bool) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.fetchInactive = &fetchInactive
	return r
}

// Codes to be searched.
func (r CommissionConfigApiGetStopProcessingReasonsRequest) Codes(codes []string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.codes = &codes
	return r
}

// Wildcard search on the code.
func (r CommissionConfigApiGetStopProcessingReasonsRequest) WildCard(wildCard string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.wildCard = &wildCard
	return r
}

// Description of the code.
func (r CommissionConfigApiGetStopProcessingReasonsRequest) Description(description string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.description = &description
	return r
}

// External system code.
func (r CommissionConfigApiGetStopProcessingReasonsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiGetStopProcessingReasonsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiGetStopProcessingReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiGetStopProcessingReasonsRequest) Execute() (*StopProcessingReasons, *http.Response, error) {
	return r.ApiService.GetStopProcessingReasonsExecute(r)
}

/*
GetStopProcessingReasons Operation to fetch stop processing reasons.

 <p><strong>OperationId:</strong>getStopProcessingReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiGetStopProcessingReasonsRequest
*/
func (a *CommissionConfigApiService) GetStopProcessingReasons(ctx context.Context) CommissionConfigApiGetStopProcessingReasonsRequest {
	return CommissionConfigApiGetStopProcessingReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StopProcessingReasons
func (a *CommissionConfigApiService) GetStopProcessingReasonsExecute(r CommissionConfigApiGetStopProcessingReasonsRequest) (*StopProcessingReasons, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StopProcessingReasons
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.GetStopProcessingReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stopProcessingReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fetchInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInactive", r.fetchInactive, "")
	}
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
	}
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiPostCommissionCodesRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	commissionCodes *PutCommissionCodesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiPostCommissionCodesRequest) Authorization(authorization string) CommissionConfigApiPostCommissionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiPostCommissionCodesRequest) XAppKey(xAppKey string) CommissionConfigApiPostCommissionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiPostCommissionCodesRequest) XHotelid(xHotelid string) CommissionConfigApiPostCommissionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create new commission codes.
func (r CommissionConfigApiPostCommissionCodesRequest) CommissionCodes(commissionCodes PutCommissionCodesRequest) CommissionConfigApiPostCommissionCodesRequest {
	r.commissionCodes = &commissionCodes
	return r
}

// External system code.
func (r CommissionConfigApiPostCommissionCodesRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiPostCommissionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiPostCommissionCodesRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiPostCommissionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiPostCommissionCodesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostCommissionCodesExecute(r)
}

/*
PostCommissionCodes Operation to create commission codes.

 <p><strong>OperationId:</strong>postCommissionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiPostCommissionCodesRequest
*/
func (a *CommissionConfigApiService) PostCommissionCodes(ctx context.Context) CommissionConfigApiPostCommissionCodesRequest {
	return CommissionConfigApiPostCommissionCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) PostCommissionCodesExecute(r CommissionConfigApiPostCommissionCodesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.PostCommissionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/commissionCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.commissionCodes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiPostConfigBankAccountsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	bankAccounts *PutConfigBankAccountsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiPostConfigBankAccountsRequest) Authorization(authorization string) CommissionConfigApiPostConfigBankAccountsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiPostConfigBankAccountsRequest) XAppKey(xAppKey string) CommissionConfigApiPostConfigBankAccountsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiPostConfigBankAccountsRequest) XHotelid(xHotelid string) CommissionConfigApiPostConfigBankAccountsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create Bank Accounts
func (r CommissionConfigApiPostConfigBankAccountsRequest) BankAccounts(bankAccounts PutConfigBankAccountsRequest) CommissionConfigApiPostConfigBankAccountsRequest {
	r.bankAccounts = &bankAccounts
	return r
}

// External system code.
func (r CommissionConfigApiPostConfigBankAccountsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiPostConfigBankAccountsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiPostConfigBankAccountsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiPostConfigBankAccountsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiPostConfigBankAccountsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostConfigBankAccountsExecute(r)
}

/*
PostConfigBankAccounts Operation to create config bank accounts.

 <p><strong>OperationId:</strong>postConfigBankAccounts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiPostConfigBankAccountsRequest
*/
func (a *CommissionConfigApiService) PostConfigBankAccounts(ctx context.Context) CommissionConfigApiPostConfigBankAccountsRequest {
	return CommissionConfigApiPostConfigBankAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) PostConfigBankAccountsExecute(r CommissionConfigApiPostConfigBankAccountsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.PostConfigBankAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configBankAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.bankAccounts
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiPostStopProcessingReasonsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	stopProcessingReasons *PutStopProcessingReasonsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiPostStopProcessingReasonsRequest) Authorization(authorization string) CommissionConfigApiPostStopProcessingReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiPostStopProcessingReasonsRequest) XAppKey(xAppKey string) CommissionConfigApiPostStopProcessingReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiPostStopProcessingReasonsRequest) XHotelid(xHotelid string) CommissionConfigApiPostStopProcessingReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating Stop Processing Reason
func (r CommissionConfigApiPostStopProcessingReasonsRequest) StopProcessingReasons(stopProcessingReasons PutStopProcessingReasonsRequest) CommissionConfigApiPostStopProcessingReasonsRequest {
	r.stopProcessingReasons = &stopProcessingReasons
	return r
}

// External system code.
func (r CommissionConfigApiPostStopProcessingReasonsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiPostStopProcessingReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiPostStopProcessingReasonsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiPostStopProcessingReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiPostStopProcessingReasonsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostStopProcessingReasonsExecute(r)
}

/*
PostStopProcessingReasons Operation to create stop processing reasons.

 <p><strong>OperationId:</strong>postStopProcessingReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiPostStopProcessingReasonsRequest
*/
func (a *CommissionConfigApiService) PostStopProcessingReasons(ctx context.Context) CommissionConfigApiPostStopProcessingReasonsRequest {
	return CommissionConfigApiPostStopProcessingReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) PostStopProcessingReasonsExecute(r CommissionConfigApiPostStopProcessingReasonsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.PostStopProcessingReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stopProcessingReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.stopProcessingReasons
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiPutCommissionCodesRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	commissionCodes *PutCommissionCodesRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiPutCommissionCodesRequest) Authorization(authorization string) CommissionConfigApiPutCommissionCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiPutCommissionCodesRequest) XAppKey(xAppKey string) CommissionConfigApiPutCommissionCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiPutCommissionCodesRequest) XHotelid(xHotelid string) CommissionConfigApiPutCommissionCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to update commission codes.
func (r CommissionConfigApiPutCommissionCodesRequest) CommissionCodes(commissionCodes PutCommissionCodesRequest) CommissionConfigApiPutCommissionCodesRequest {
	r.commissionCodes = &commissionCodes
	return r
}

// External system code.
func (r CommissionConfigApiPutCommissionCodesRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiPutCommissionCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiPutCommissionCodesRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiPutCommissionCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiPutCommissionCodesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutCommissionCodesExecute(r)
}

/*
PutCommissionCodes Operation to change commission codes.

 <p><strong>OperationId:</strong>putCommissionCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiPutCommissionCodesRequest
*/
func (a *CommissionConfigApiService) PutCommissionCodes(ctx context.Context) CommissionConfigApiPutCommissionCodesRequest {
	return CommissionConfigApiPutCommissionCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) PutCommissionCodesExecute(r CommissionConfigApiPutCommissionCodesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.PutCommissionCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/commissionCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.commissionCodes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiPutConfigBankAccountsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	bankAccounts *PutConfigBankAccountsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiPutConfigBankAccountsRequest) Authorization(authorization string) CommissionConfigApiPutConfigBankAccountsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiPutConfigBankAccountsRequest) XAppKey(xAppKey string) CommissionConfigApiPutConfigBankAccountsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiPutConfigBankAccountsRequest) XHotelid(xHotelid string) CommissionConfigApiPutConfigBankAccountsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to edit Bank Accounts
func (r CommissionConfigApiPutConfigBankAccountsRequest) BankAccounts(bankAccounts PutConfigBankAccountsRequest) CommissionConfigApiPutConfigBankAccountsRequest {
	r.bankAccounts = &bankAccounts
	return r
}

// External system code.
func (r CommissionConfigApiPutConfigBankAccountsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiPutConfigBankAccountsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiPutConfigBankAccountsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiPutConfigBankAccountsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiPutConfigBankAccountsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutConfigBankAccountsExecute(r)
}

/*
PutConfigBankAccounts Operation to change config bank accounts.

 <p><strong>OperationId:</strong>putConfigBankAccounts</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiPutConfigBankAccountsRequest
*/
func (a *CommissionConfigApiService) PutConfigBankAccounts(ctx context.Context) CommissionConfigApiPutConfigBankAccountsRequest {
	return CommissionConfigApiPutConfigBankAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *CommissionConfigApiService) PutConfigBankAccountsExecute(r CommissionConfigApiPutConfigBankAccountsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.PutConfigBankAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configBankAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.bankAccounts
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommissionConfigApiPutStopProcessingReasonsRequest struct {
	ctx context.Context
	ApiService *CommissionConfigApiService
	authorization *string
	xAppKey *string
	xHotelid *string
	stopProcessingReasons *PutStopProcessingReasonsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r CommissionConfigApiPutStopProcessingReasonsRequest) Authorization(authorization string) CommissionConfigApiPutStopProcessingReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner’s Application Key
func (r CommissionConfigApiPutStopProcessingReasonsRequest) XAppKey(xAppKey string) CommissionConfigApiPutStopProcessingReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r CommissionConfigApiPutStopProcessingReasonsRequest) XHotelid(xHotelid string) CommissionConfigApiPutStopProcessingReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing Stop Processing Reason.
func (r CommissionConfigApiPutStopProcessingReasonsRequest) StopProcessingReasons(stopProcessingReasons PutStopProcessingReasonsRequest) CommissionConfigApiPutStopProcessingReasonsRequest {
	r.stopProcessingReasons = &stopProcessingReasons
	return r
}

// External system code.
func (r CommissionConfigApiPutStopProcessingReasonsRequest) XExternalsystem(xExternalsystem string) CommissionConfigApiPutStopProcessingReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r CommissionConfigApiPutStopProcessingReasonsRequest) AcceptLanguage(acceptLanguage string) CommissionConfigApiPutStopProcessingReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r CommissionConfigApiPutStopProcessingReasonsRequest) Execute() (*StopProcessingReasons, *http.Response, error) {
	return r.ApiService.PutStopProcessingReasonsExecute(r)
}

/*
PutStopProcessingReasons Operation to change stop processing reasons.

 <p><strong>OperationId:</strong>putStopProcessingReasons</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CommissionConfigApiPutStopProcessingReasonsRequest
*/
func (a *CommissionConfigApiService) PutStopProcessingReasons(ctx context.Context) CommissionConfigApiPutStopProcessingReasonsRequest {
	return CommissionConfigApiPutStopProcessingReasonsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StopProcessingReasons
func (a *CommissionConfigApiService) PutStopProcessingReasonsExecute(r CommissionConfigApiPutStopProcessingReasonsRequest) (*StopProcessingReasons, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StopProcessingReasons
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionConfigApiService.PutStopProcessingReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stopProcessingReasons"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.stopProcessingReasons
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
