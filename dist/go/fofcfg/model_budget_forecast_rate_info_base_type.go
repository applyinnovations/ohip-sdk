/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the BudgetForecastRateInfoBaseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetForecastRateInfoBaseType{}

// BudgetForecastRateInfoBaseType Budget Forecast information for budget segment codes.
type BudgetForecastRateInfoBaseType struct {
	// Flag to indicate if nights information has to be included.
	Nights *bool `json:"nights,omitempty"`
	// Budget Forecast information for budget segment code .
	RateCodeInformation []RateCodeInformationBaseType `json:"rateCodeInformation,omitempty"`
	// Flag to indicate if revenue information has to be included.
	Revenue *bool `json:"revenue,omitempty"`
}

// NewBudgetForecastRateInfoBaseType instantiates a new BudgetForecastRateInfoBaseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetForecastRateInfoBaseType() *BudgetForecastRateInfoBaseType {
	this := BudgetForecastRateInfoBaseType{}
	return &this
}

// NewBudgetForecastRateInfoBaseTypeWithDefaults instantiates a new BudgetForecastRateInfoBaseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetForecastRateInfoBaseTypeWithDefaults() *BudgetForecastRateInfoBaseType {
	this := BudgetForecastRateInfoBaseType{}
	return &this
}

// GetNights returns the Nights field value if set, zero value otherwise.
func (o *BudgetForecastRateInfoBaseType) GetNights() bool {
	if o == nil || IsNil(o.Nights) {
		var ret bool
		return ret
	}
	return *o.Nights
}

// GetNightsOk returns a tuple with the Nights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastRateInfoBaseType) GetNightsOk() (*bool, bool) {
	if o == nil || IsNil(o.Nights) {
		return nil, false
	}
	return o.Nights, true
}

// HasNights returns a boolean if a field has been set.
func (o *BudgetForecastRateInfoBaseType) HasNights() bool {
	if o != nil && !IsNil(o.Nights) {
		return true
	}

	return false
}

// SetNights gets a reference to the given bool and assigns it to the Nights field.
func (o *BudgetForecastRateInfoBaseType) SetNights(v bool) {
	o.Nights = &v
}

// GetRateCodeInformation returns the RateCodeInformation field value if set, zero value otherwise.
func (o *BudgetForecastRateInfoBaseType) GetRateCodeInformation() []RateCodeInformationBaseType {
	if o == nil || IsNil(o.RateCodeInformation) {
		var ret []RateCodeInformationBaseType
		return ret
	}
	return o.RateCodeInformation
}

// GetRateCodeInformationOk returns a tuple with the RateCodeInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastRateInfoBaseType) GetRateCodeInformationOk() ([]RateCodeInformationBaseType, bool) {
	if o == nil || IsNil(o.RateCodeInformation) {
		return nil, false
	}
	return o.RateCodeInformation, true
}

// HasRateCodeInformation returns a boolean if a field has been set.
func (o *BudgetForecastRateInfoBaseType) HasRateCodeInformation() bool {
	if o != nil && !IsNil(o.RateCodeInformation) {
		return true
	}

	return false
}

// SetRateCodeInformation gets a reference to the given []RateCodeInformationBaseType and assigns it to the RateCodeInformation field.
func (o *BudgetForecastRateInfoBaseType) SetRateCodeInformation(v []RateCodeInformationBaseType) {
	o.RateCodeInformation = v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *BudgetForecastRateInfoBaseType) GetRevenue() bool {
	if o == nil || IsNil(o.Revenue) {
		var ret bool
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastRateInfoBaseType) GetRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *BudgetForecastRateInfoBaseType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given bool and assigns it to the Revenue field.
func (o *BudgetForecastRateInfoBaseType) SetRevenue(v bool) {
	o.Revenue = &v
}

func (o BudgetForecastRateInfoBaseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetForecastRateInfoBaseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nights) {
		toSerialize["nights"] = o.Nights
	}
	if !IsNil(o.RateCodeInformation) {
		toSerialize["rateCodeInformation"] = o.RateCodeInformation
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	return toSerialize, nil
}

type NullableBudgetForecastRateInfoBaseType struct {
	value *BudgetForecastRateInfoBaseType
	isSet bool
}

func (v NullableBudgetForecastRateInfoBaseType) Get() *BudgetForecastRateInfoBaseType {
	return v.value
}

func (v *NullableBudgetForecastRateInfoBaseType) Set(val *BudgetForecastRateInfoBaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetForecastRateInfoBaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetForecastRateInfoBaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetForecastRateInfoBaseType(val *BudgetForecastRateInfoBaseType) *NullableBudgetForecastRateInfoBaseType {
	return &NullableBudgetForecastRateInfoBaseType{value: val, isSet: true}
}

func (v NullableBudgetForecastRateInfoBaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetForecastRateInfoBaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


