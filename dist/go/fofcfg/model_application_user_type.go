/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the ApplicationUserType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationUserType{}

// ApplicationUserType Information to uniquely identify an application user
type ApplicationUserType struct {
	// Name of the application user
	AppUser *string `json:"appUser,omitempty"`
	AppUserId *UniqueIDType `json:"appUserId,omitempty"`
}

// NewApplicationUserType instantiates a new ApplicationUserType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationUserType() *ApplicationUserType {
	this := ApplicationUserType{}
	return &this
}

// NewApplicationUserTypeWithDefaults instantiates a new ApplicationUserType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationUserTypeWithDefaults() *ApplicationUserType {
	this := ApplicationUserType{}
	return &this
}

// GetAppUser returns the AppUser field value if set, zero value otherwise.
func (o *ApplicationUserType) GetAppUser() string {
	if o == nil || IsNil(o.AppUser) {
		var ret string
		return ret
	}
	return *o.AppUser
}

// GetAppUserOk returns a tuple with the AppUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUserType) GetAppUserOk() (*string, bool) {
	if o == nil || IsNil(o.AppUser) {
		return nil, false
	}
	return o.AppUser, true
}

// HasAppUser returns a boolean if a field has been set.
func (o *ApplicationUserType) HasAppUser() bool {
	if o != nil && !IsNil(o.AppUser) {
		return true
	}

	return false
}

// SetAppUser gets a reference to the given string and assigns it to the AppUser field.
func (o *ApplicationUserType) SetAppUser(v string) {
	o.AppUser = &v
}

// GetAppUserId returns the AppUserId field value if set, zero value otherwise.
func (o *ApplicationUserType) GetAppUserId() UniqueIDType {
	if o == nil || IsNil(o.AppUserId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AppUserId
}

// GetAppUserIdOk returns a tuple with the AppUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationUserType) GetAppUserIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AppUserId) {
		return nil, false
	}
	return o.AppUserId, true
}

// HasAppUserId returns a boolean if a field has been set.
func (o *ApplicationUserType) HasAppUserId() bool {
	if o != nil && !IsNil(o.AppUserId) {
		return true
	}

	return false
}

// SetAppUserId gets a reference to the given UniqueIDType and assigns it to the AppUserId field.
func (o *ApplicationUserType) SetAppUserId(v UniqueIDType) {
	o.AppUserId = &v
}

func (o ApplicationUserType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationUserType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppUser) {
		toSerialize["appUser"] = o.AppUser
	}
	if !IsNil(o.AppUserId) {
		toSerialize["appUserId"] = o.AppUserId
	}
	return toSerialize, nil
}

type NullableApplicationUserType struct {
	value *ApplicationUserType
	isSet bool
}

func (v NullableApplicationUserType) Get() *ApplicationUserType {
	return v.value
}

func (v *NullableApplicationUserType) Set(val *ApplicationUserType) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationUserType) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationUserType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationUserType(val *ApplicationUserType) *NullableApplicationUserType {
	return &NullableApplicationUserType{value: val, isSet: true}
}

func (v NullableApplicationUserType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationUserType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


