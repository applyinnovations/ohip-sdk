/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CalculatePostingCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculatePostingCharge{}

// CalculatePostingCharge Corresponds to each charge that will be posted against the transaction code based from the test criteria.
type CalculatePostingCharge struct {
	// Hotel code of the associated transaction code.
	HotelId *string `json:"hotelId,omitempty"`
	// The associated transaction code of the posting.
	TransactionCode *string `json:"transactionCode,omitempty"`
	// Description of the transaction code.
	Description *string `json:"description,omitempty"`
	Level *GenerateLevelType `json:"level,omitempty"`
	// The amount that will be posted against the transaction code.
	Amount *float32 `json:"amount,omitempty"`
	// The formula that is used to calculate the generates.
	Formula *string `json:"formula,omitempty"`
	Bucket *PostingBucket `json:"bucket,omitempty"`
	// The order in which the charge will be posted. The base posting will always be 0 (zero) followed by generates associated in order of which they were created.
	Sequence *int32 `json:"sequence,omitempty"`
	// Indicates whether it is the base posting.
	BasePosting *bool `json:"basePosting,omitempty"`
}

// NewCalculatePostingCharge instantiates a new CalculatePostingCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatePostingCharge() *CalculatePostingCharge {
	this := CalculatePostingCharge{}
	return &this
}

// NewCalculatePostingChargeWithDefaults instantiates a new CalculatePostingCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatePostingChargeWithDefaults() *CalculatePostingCharge {
	this := CalculatePostingCharge{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CalculatePostingCharge) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetTransactionCode() string {
	if o == nil || IsNil(o.TransactionCode) {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetTransactionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionCode) {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasTransactionCode() bool {
	if o != nil && !IsNil(o.TransactionCode) {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *CalculatePostingCharge) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CalculatePostingCharge) SetDescription(v string) {
	o.Description = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetLevel() GenerateLevelType {
	if o == nil || IsNil(o.Level) {
		var ret GenerateLevelType
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetLevelOk() (*GenerateLevelType, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given GenerateLevelType and assigns it to the Level field.
func (o *CalculatePostingCharge) SetLevel(v GenerateLevelType) {
	o.Level = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetAmount() float32 {
	if o == nil || IsNil(o.Amount) {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *CalculatePostingCharge) SetAmount(v float32) {
	o.Amount = &v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetFormula() string {
	if o == nil || IsNil(o.Formula) {
		var ret string
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetFormulaOk() (*string, bool) {
	if o == nil || IsNil(o.Formula) {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasFormula() bool {
	if o != nil && !IsNil(o.Formula) {
		return true
	}

	return false
}

// SetFormula gets a reference to the given string and assigns it to the Formula field.
func (o *CalculatePostingCharge) SetFormula(v string) {
	o.Formula = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetBucket() PostingBucket {
	if o == nil || IsNil(o.Bucket) {
		var ret PostingBucket
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetBucketOk() (*PostingBucket, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given PostingBucket and assigns it to the Bucket field.
func (o *CalculatePostingCharge) SetBucket(v PostingBucket) {
	o.Bucket = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *CalculatePostingCharge) SetSequence(v int32) {
	o.Sequence = &v
}

// GetBasePosting returns the BasePosting field value if set, zero value otherwise.
func (o *CalculatePostingCharge) GetBasePosting() bool {
	if o == nil || IsNil(o.BasePosting) {
		var ret bool
		return ret
	}
	return *o.BasePosting
}

// GetBasePostingOk returns a tuple with the BasePosting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatePostingCharge) GetBasePostingOk() (*bool, bool) {
	if o == nil || IsNil(o.BasePosting) {
		return nil, false
	}
	return o.BasePosting, true
}

// HasBasePosting returns a boolean if a field has been set.
func (o *CalculatePostingCharge) HasBasePosting() bool {
	if o != nil && !IsNil(o.BasePosting) {
		return true
	}

	return false
}

// SetBasePosting gets a reference to the given bool and assigns it to the BasePosting field.
func (o *CalculatePostingCharge) SetBasePosting(v bool) {
	o.BasePosting = &v
}

func (o CalculatePostingCharge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculatePostingCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TransactionCode) {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Formula) {
		toSerialize["formula"] = o.Formula
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	if !IsNil(o.BasePosting) {
		toSerialize["basePosting"] = o.BasePosting
	}
	return toSerialize, nil
}

type NullableCalculatePostingCharge struct {
	value *CalculatePostingCharge
	isSet bool
}

func (v NullableCalculatePostingCharge) Get() *CalculatePostingCharge {
	return v.value
}

func (v *NullableCalculatePostingCharge) Set(val *CalculatePostingCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatePostingCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatePostingCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatePostingCharge(val *CalculatePostingCharge) *NullableCalculatePostingCharge {
	return &NullableCalculatePostingCharge{value: val, isSet: true}
}

func (v NullableCalculatePostingCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatePostingCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


