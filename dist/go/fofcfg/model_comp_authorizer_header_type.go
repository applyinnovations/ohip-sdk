/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CompAuthorizerHeaderType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompAuthorizerHeaderType{}

// CompAuthorizerHeaderType Detail information related to comp authorizers.
type CompAuthorizerHeaderType struct {
	// Comp authorizer details information.
	CompAuthorizerDetails []CompAuthorizerDetailType `json:"compAuthorizerDetails,omitempty"`
	// Credit limit associated for the authorizer.
	CreditLimit *int32 `json:"creditLimit,omitempty"`
	// Credit limit already used up for the authorizer.
	OccurenceLimit *int32 `json:"occurenceLimit,omitempty"`
}

// NewCompAuthorizerHeaderType instantiates a new CompAuthorizerHeaderType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompAuthorizerHeaderType() *CompAuthorizerHeaderType {
	this := CompAuthorizerHeaderType{}
	return &this
}

// NewCompAuthorizerHeaderTypeWithDefaults instantiates a new CompAuthorizerHeaderType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompAuthorizerHeaderTypeWithDefaults() *CompAuthorizerHeaderType {
	this := CompAuthorizerHeaderType{}
	return &this
}

// GetCompAuthorizerDetails returns the CompAuthorizerDetails field value if set, zero value otherwise.
func (o *CompAuthorizerHeaderType) GetCompAuthorizerDetails() []CompAuthorizerDetailType {
	if o == nil || IsNil(o.CompAuthorizerDetails) {
		var ret []CompAuthorizerDetailType
		return ret
	}
	return o.CompAuthorizerDetails
}

// GetCompAuthorizerDetailsOk returns a tuple with the CompAuthorizerDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerHeaderType) GetCompAuthorizerDetailsOk() ([]CompAuthorizerDetailType, bool) {
	if o == nil || IsNil(o.CompAuthorizerDetails) {
		return nil, false
	}
	return o.CompAuthorizerDetails, true
}

// HasCompAuthorizerDetails returns a boolean if a field has been set.
func (o *CompAuthorizerHeaderType) HasCompAuthorizerDetails() bool {
	if o != nil && !IsNil(o.CompAuthorizerDetails) {
		return true
	}

	return false
}

// SetCompAuthorizerDetails gets a reference to the given []CompAuthorizerDetailType and assigns it to the CompAuthorizerDetails field.
func (o *CompAuthorizerHeaderType) SetCompAuthorizerDetails(v []CompAuthorizerDetailType) {
	o.CompAuthorizerDetails = v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *CompAuthorizerHeaderType) GetCreditLimit() int32 {
	if o == nil || IsNil(o.CreditLimit) {
		var ret int32
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerHeaderType) GetCreditLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *CompAuthorizerHeaderType) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given int32 and assigns it to the CreditLimit field.
func (o *CompAuthorizerHeaderType) SetCreditLimit(v int32) {
	o.CreditLimit = &v
}

// GetOccurenceLimit returns the OccurenceLimit field value if set, zero value otherwise.
func (o *CompAuthorizerHeaderType) GetOccurenceLimit() int32 {
	if o == nil || IsNil(o.OccurenceLimit) {
		var ret int32
		return ret
	}
	return *o.OccurenceLimit
}

// GetOccurenceLimitOk returns a tuple with the OccurenceLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompAuthorizerHeaderType) GetOccurenceLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.OccurenceLimit) {
		return nil, false
	}
	return o.OccurenceLimit, true
}

// HasOccurenceLimit returns a boolean if a field has been set.
func (o *CompAuthorizerHeaderType) HasOccurenceLimit() bool {
	if o != nil && !IsNil(o.OccurenceLimit) {
		return true
	}

	return false
}

// SetOccurenceLimit gets a reference to the given int32 and assigns it to the OccurenceLimit field.
func (o *CompAuthorizerHeaderType) SetOccurenceLimit(v int32) {
	o.OccurenceLimit = &v
}

func (o CompAuthorizerHeaderType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompAuthorizerHeaderType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompAuthorizerDetails) {
		toSerialize["compAuthorizerDetails"] = o.CompAuthorizerDetails
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	if !IsNil(o.OccurenceLimit) {
		toSerialize["occurenceLimit"] = o.OccurenceLimit
	}
	return toSerialize, nil
}

type NullableCompAuthorizerHeaderType struct {
	value *CompAuthorizerHeaderType
	isSet bool
}

func (v NullableCompAuthorizerHeaderType) Get() *CompAuthorizerHeaderType {
	return v.value
}

func (v *NullableCompAuthorizerHeaderType) Set(val *CompAuthorizerHeaderType) {
	v.value = val
	v.isSet = true
}

func (v NullableCompAuthorizerHeaderType) IsSet() bool {
	return v.isSet
}

func (v *NullableCompAuthorizerHeaderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompAuthorizerHeaderType(val *CompAuthorizerHeaderType) *NullableCompAuthorizerHeaderType {
	return &NullableCompAuthorizerHeaderType{value: val, isSet: true}
}

func (v NullableCompAuthorizerHeaderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompAuthorizerHeaderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


