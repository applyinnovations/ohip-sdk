/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the ForeignCurrencyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForeignCurrencyType{}

// ForeignCurrencyType Provides information about the Foreign Currency Code.
type ForeignCurrencyType struct {
	// Code of the Foreign Currency
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// Provides information about various limits on the Currency Code
	CurrencyLimits []CurrencyLimitType `json:"currencyLimits,omitempty"`
	// Number of Decimal places defined for the Foreign Currency Code
	Decimals *int32 `json:"decimals,omitempty"`
	// Description of the Foreign Currency Code
	Description *string `json:"description,omitempty"`
	// Display Sequence
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Indicates if the Foreign Currency Code is inactive
	Inactive *bool `json:"inactive,omitempty"`
	// Indicates if the Currency is available for selling
	SellCurrency *bool `json:"sellCurrency,omitempty"`
	// Symbol defined for the Currency
	Symbol *string `json:"symbol,omitempty"`
}

// NewForeignCurrencyType instantiates a new ForeignCurrencyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForeignCurrencyType() *ForeignCurrencyType {
	this := ForeignCurrencyType{}
	return &this
}

// NewForeignCurrencyTypeWithDefaults instantiates a new ForeignCurrencyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForeignCurrencyTypeWithDefaults() *ForeignCurrencyType {
	this := ForeignCurrencyType{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ForeignCurrencyType) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencyLimits returns the CurrencyLimits field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetCurrencyLimits() []CurrencyLimitType {
	if o == nil || IsNil(o.CurrencyLimits) {
		var ret []CurrencyLimitType
		return ret
	}
	return o.CurrencyLimits
}

// GetCurrencyLimitsOk returns a tuple with the CurrencyLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetCurrencyLimitsOk() ([]CurrencyLimitType, bool) {
	if o == nil || IsNil(o.CurrencyLimits) {
		return nil, false
	}
	return o.CurrencyLimits, true
}

// HasCurrencyLimits returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasCurrencyLimits() bool {
	if o != nil && !IsNil(o.CurrencyLimits) {
		return true
	}

	return false
}

// SetCurrencyLimits gets a reference to the given []CurrencyLimitType and assigns it to the CurrencyLimits field.
func (o *ForeignCurrencyType) SetCurrencyLimits(v []CurrencyLimitType) {
	o.CurrencyLimits = v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetDecimals() int32 {
	if o == nil || IsNil(o.Decimals) {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetDecimalsOk() (*int32, bool) {
	if o == nil || IsNil(o.Decimals) {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasDecimals() bool {
	if o != nil && !IsNil(o.Decimals) {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *ForeignCurrencyType) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ForeignCurrencyType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *ForeignCurrencyType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ForeignCurrencyType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetSellCurrency returns the SellCurrency field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetSellCurrency() bool {
	if o == nil || IsNil(o.SellCurrency) {
		var ret bool
		return ret
	}
	return *o.SellCurrency
}

// GetSellCurrencyOk returns a tuple with the SellCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetSellCurrencyOk() (*bool, bool) {
	if o == nil || IsNil(o.SellCurrency) {
		return nil, false
	}
	return o.SellCurrency, true
}

// HasSellCurrency returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasSellCurrency() bool {
	if o != nil && !IsNil(o.SellCurrency) {
		return true
	}

	return false
}

// SetSellCurrency gets a reference to the given bool and assigns it to the SellCurrency field.
func (o *ForeignCurrencyType) SetSellCurrency(v bool) {
	o.SellCurrency = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ForeignCurrencyType) GetSymbol() string {
	if o == nil || IsNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForeignCurrencyType) GetSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ForeignCurrencyType) HasSymbol() bool {
	if o != nil && !IsNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ForeignCurrencyType) SetSymbol(v string) {
	o.Symbol = &v
}

func (o ForeignCurrencyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForeignCurrencyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.CurrencyLimits) {
		toSerialize["currencyLimits"] = o.CurrencyLimits
	}
	if !IsNil(o.Decimals) {
		toSerialize["decimals"] = o.Decimals
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.SellCurrency) {
		toSerialize["sellCurrency"] = o.SellCurrency
	}
	if !IsNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	return toSerialize, nil
}

type NullableForeignCurrencyType struct {
	value *ForeignCurrencyType
	isSet bool
}

func (v NullableForeignCurrencyType) Get() *ForeignCurrencyType {
	return v.value
}

func (v *NullableForeignCurrencyType) Set(val *ForeignCurrencyType) {
	v.value = val
	v.isSet = true
}

func (v NullableForeignCurrencyType) IsSet() bool {
	return v.isSet
}

func (v *NullableForeignCurrencyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForeignCurrencyType(val *ForeignCurrencyType) *NullableForeignCurrencyType {
	return &NullableForeignCurrencyType{value: val, isSet: true}
}

func (v NullableForeignCurrencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForeignCurrencyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


