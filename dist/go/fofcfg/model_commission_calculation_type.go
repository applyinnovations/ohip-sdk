/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the CommissionCalculationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionCalculationType{}

// CommissionCalculationType Commission calculation type based on details.
type CommissionCalculationType struct {
	ReservationBasedCommission *ReservationBasedCommissionType `json:"reservationBasedCommission,omitempty"`
	// Revenue based commission details.
	RevenueBasedCommission []CommissionCodeTransactionType `json:"revenueBasedCommission,omitempty"`
}

// NewCommissionCalculationType instantiates a new CommissionCalculationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionCalculationType() *CommissionCalculationType {
	this := CommissionCalculationType{}
	return &this
}

// NewCommissionCalculationTypeWithDefaults instantiates a new CommissionCalculationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionCalculationTypeWithDefaults() *CommissionCalculationType {
	this := CommissionCalculationType{}
	return &this
}

// GetReservationBasedCommission returns the ReservationBasedCommission field value if set, zero value otherwise.
func (o *CommissionCalculationType) GetReservationBasedCommission() ReservationBasedCommissionType {
	if o == nil || IsNil(o.ReservationBasedCommission) {
		var ret ReservationBasedCommissionType
		return ret
	}
	return *o.ReservationBasedCommission
}

// GetReservationBasedCommissionOk returns a tuple with the ReservationBasedCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCalculationType) GetReservationBasedCommissionOk() (*ReservationBasedCommissionType, bool) {
	if o == nil || IsNil(o.ReservationBasedCommission) {
		return nil, false
	}
	return o.ReservationBasedCommission, true
}

// HasReservationBasedCommission returns a boolean if a field has been set.
func (o *CommissionCalculationType) HasReservationBasedCommission() bool {
	if o != nil && !IsNil(o.ReservationBasedCommission) {
		return true
	}

	return false
}

// SetReservationBasedCommission gets a reference to the given ReservationBasedCommissionType and assigns it to the ReservationBasedCommission field.
func (o *CommissionCalculationType) SetReservationBasedCommission(v ReservationBasedCommissionType) {
	o.ReservationBasedCommission = &v
}

// GetRevenueBasedCommission returns the RevenueBasedCommission field value if set, zero value otherwise.
func (o *CommissionCalculationType) GetRevenueBasedCommission() []CommissionCodeTransactionType {
	if o == nil || IsNil(o.RevenueBasedCommission) {
		var ret []CommissionCodeTransactionType
		return ret
	}
	return o.RevenueBasedCommission
}

// GetRevenueBasedCommissionOk returns a tuple with the RevenueBasedCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCalculationType) GetRevenueBasedCommissionOk() ([]CommissionCodeTransactionType, bool) {
	if o == nil || IsNil(o.RevenueBasedCommission) {
		return nil, false
	}
	return o.RevenueBasedCommission, true
}

// HasRevenueBasedCommission returns a boolean if a field has been set.
func (o *CommissionCalculationType) HasRevenueBasedCommission() bool {
	if o != nil && !IsNil(o.RevenueBasedCommission) {
		return true
	}

	return false
}

// SetRevenueBasedCommission gets a reference to the given []CommissionCodeTransactionType and assigns it to the RevenueBasedCommission field.
func (o *CommissionCalculationType) SetRevenueBasedCommission(v []CommissionCodeTransactionType) {
	o.RevenueBasedCommission = v
}

func (o CommissionCalculationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionCalculationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationBasedCommission) {
		toSerialize["reservationBasedCommission"] = o.ReservationBasedCommission
	}
	if !IsNil(o.RevenueBasedCommission) {
		toSerialize["revenueBasedCommission"] = o.RevenueBasedCommission
	}
	return toSerialize, nil
}

type NullableCommissionCalculationType struct {
	value *CommissionCalculationType
	isSet bool
}

func (v NullableCommissionCalculationType) Get() *CommissionCalculationType {
	return v.value
}

func (v *NullableCommissionCalculationType) Set(val *CommissionCalculationType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionCalculationType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionCalculationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionCalculationType(val *CommissionCalculationType) *NullableCommissionCalculationType {
	return &NullableCommissionCalculationType{value: val, isSet: true}
}

func (v NullableCommissionCalculationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionCalculationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


