/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
	"fmt"
)

// GenerateCalcBucketType Generates calculation bucket/group. Percentage generates are calculated against amount in one of the the calculation bucket.
type GenerateCalcBucketType string

// List of generateCalcBucketType
const (
	GENERATECALCBUCKETTYPE_BASE GenerateCalcBucketType = "Base"
	GENERATECALCBUCKETTYPE_BUCKET1 GenerateCalcBucketType = "Bucket1"
	GENERATECALCBUCKETTYPE_BUCKET2 GenerateCalcBucketType = "Bucket2"
	GENERATECALCBUCKETTYPE_BUCKET3 GenerateCalcBucketType = "Bucket3"
)

// All allowed values of GenerateCalcBucketType enum
var AllowedGenerateCalcBucketTypeEnumValues = []GenerateCalcBucketType{
	"Base",
	"Bucket1",
	"Bucket2",
	"Bucket3",
}

func (v *GenerateCalcBucketType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GenerateCalcBucketType(value)
	for _, existing := range AllowedGenerateCalcBucketTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GenerateCalcBucketType", value)
}

// NewGenerateCalcBucketTypeFromValue returns a pointer to a valid GenerateCalcBucketType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGenerateCalcBucketTypeFromValue(v string) (*GenerateCalcBucketType, error) {
	ev := GenerateCalcBucketType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GenerateCalcBucketType: valid values are %v", v, AllowedGenerateCalcBucketTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GenerateCalcBucketType) IsValid() bool {
	for _, existing := range AllowedGenerateCalcBucketTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to generateCalcBucketType value
func (v GenerateCalcBucketType) Ptr() *GenerateCalcBucketType {
	return &v
}

type NullableGenerateCalcBucketType struct {
	value *GenerateCalcBucketType
	isSet bool
}

func (v NullableGenerateCalcBucketType) Get() *GenerateCalcBucketType {
	return v.value
}

func (v *NullableGenerateCalcBucketType) Set(val *GenerateCalcBucketType) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateCalcBucketType) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateCalcBucketType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateCalcBucketType(val *GenerateCalcBucketType) *NullableGenerateCalcBucketType {
	return &NullableGenerateCalcBucketType{value: val, isSet: true}
}

func (v NullableGenerateCalcBucketType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateCalcBucketType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

