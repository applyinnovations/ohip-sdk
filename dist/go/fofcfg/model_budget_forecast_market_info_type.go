/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the BudgetForecastMarketInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BudgetForecastMarketInfoType{}

// BudgetForecastMarketInfoType Budget Forecast information for budget segment codes.
type BudgetForecastMarketInfoType struct {
	// Budget Forecast information for segment.
	MarketCodeInformation []MarketCodeInformationType `json:"marketCodeInformation,omitempty"`
	MarketCodeTotalInformation *MarketCodeTotalInformationType `json:"marketCodeTotalInformation,omitempty"`
}

// NewBudgetForecastMarketInfoType instantiates a new BudgetForecastMarketInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetForecastMarketInfoType() *BudgetForecastMarketInfoType {
	this := BudgetForecastMarketInfoType{}
	return &this
}

// NewBudgetForecastMarketInfoTypeWithDefaults instantiates a new BudgetForecastMarketInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetForecastMarketInfoTypeWithDefaults() *BudgetForecastMarketInfoType {
	this := BudgetForecastMarketInfoType{}
	return &this
}

// GetMarketCodeInformation returns the MarketCodeInformation field value if set, zero value otherwise.
func (o *BudgetForecastMarketInfoType) GetMarketCodeInformation() []MarketCodeInformationType {
	if o == nil || IsNil(o.MarketCodeInformation) {
		var ret []MarketCodeInformationType
		return ret
	}
	return o.MarketCodeInformation
}

// GetMarketCodeInformationOk returns a tuple with the MarketCodeInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastMarketInfoType) GetMarketCodeInformationOk() ([]MarketCodeInformationType, bool) {
	if o == nil || IsNil(o.MarketCodeInformation) {
		return nil, false
	}
	return o.MarketCodeInformation, true
}

// HasMarketCodeInformation returns a boolean if a field has been set.
func (o *BudgetForecastMarketInfoType) HasMarketCodeInformation() bool {
	if o != nil && !IsNil(o.MarketCodeInformation) {
		return true
	}

	return false
}

// SetMarketCodeInformation gets a reference to the given []MarketCodeInformationType and assigns it to the MarketCodeInformation field.
func (o *BudgetForecastMarketInfoType) SetMarketCodeInformation(v []MarketCodeInformationType) {
	o.MarketCodeInformation = v
}

// GetMarketCodeTotalInformation returns the MarketCodeTotalInformation field value if set, zero value otherwise.
func (o *BudgetForecastMarketInfoType) GetMarketCodeTotalInformation() MarketCodeTotalInformationType {
	if o == nil || IsNil(o.MarketCodeTotalInformation) {
		var ret MarketCodeTotalInformationType
		return ret
	}
	return *o.MarketCodeTotalInformation
}

// GetMarketCodeTotalInformationOk returns a tuple with the MarketCodeTotalInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetForecastMarketInfoType) GetMarketCodeTotalInformationOk() (*MarketCodeTotalInformationType, bool) {
	if o == nil || IsNil(o.MarketCodeTotalInformation) {
		return nil, false
	}
	return o.MarketCodeTotalInformation, true
}

// HasMarketCodeTotalInformation returns a boolean if a field has been set.
func (o *BudgetForecastMarketInfoType) HasMarketCodeTotalInformation() bool {
	if o != nil && !IsNil(o.MarketCodeTotalInformation) {
		return true
	}

	return false
}

// SetMarketCodeTotalInformation gets a reference to the given MarketCodeTotalInformationType and assigns it to the MarketCodeTotalInformation field.
func (o *BudgetForecastMarketInfoType) SetMarketCodeTotalInformation(v MarketCodeTotalInformationType) {
	o.MarketCodeTotalInformation = &v
}

func (o BudgetForecastMarketInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BudgetForecastMarketInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MarketCodeInformation) {
		toSerialize["marketCodeInformation"] = o.MarketCodeInformation
	}
	if !IsNil(o.MarketCodeTotalInformation) {
		toSerialize["marketCodeTotalInformation"] = o.MarketCodeTotalInformation
	}
	return toSerialize, nil
}

type NullableBudgetForecastMarketInfoType struct {
	value *BudgetForecastMarketInfoType
	isSet bool
}

func (v NullableBudgetForecastMarketInfoType) Get() *BudgetForecastMarketInfoType {
	return v.value
}

func (v *NullableBudgetForecastMarketInfoType) Set(val *BudgetForecastMarketInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetForecastMarketInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetForecastMarketInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetForecastMarketInfoType(val *BudgetForecastMarketInfoType) *NullableBudgetForecastMarketInfoType {
	return &NullableBudgetForecastMarketInfoType{value: val, isSet: true}
}

func (v NullableBudgetForecastMarketInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetForecastMarketInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


