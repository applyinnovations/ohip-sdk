/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the SerialPortConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SerialPortConfigType{}

// SerialPortConfigType struct for SerialPortConfigType
type SerialPortConfigType struct {
	// IP address of the interface server
	PortNumber *string `json:"portNumber,omitempty"`
	BaudRate *string `json:"baudRate,omitempty"`
	Parity *string `json:"parity,omitempty"`
	DataBits *int32 `json:"dataBits,omitempty"`
	StopBits *int32 `json:"stopBits,omitempty"`
}

// NewSerialPortConfigType instantiates a new SerialPortConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSerialPortConfigType() *SerialPortConfigType {
	this := SerialPortConfigType{}
	return &this
}

// NewSerialPortConfigTypeWithDefaults instantiates a new SerialPortConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSerialPortConfigTypeWithDefaults() *SerialPortConfigType {
	this := SerialPortConfigType{}
	return &this
}

// GetPortNumber returns the PortNumber field value if set, zero value otherwise.
func (o *SerialPortConfigType) GetPortNumber() string {
	if o == nil || IsNil(o.PortNumber) {
		var ret string
		return ret
	}
	return *o.PortNumber
}

// GetPortNumberOk returns a tuple with the PortNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerialPortConfigType) GetPortNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PortNumber) {
		return nil, false
	}
	return o.PortNumber, true
}

// HasPortNumber returns a boolean if a field has been set.
func (o *SerialPortConfigType) HasPortNumber() bool {
	if o != nil && !IsNil(o.PortNumber) {
		return true
	}

	return false
}

// SetPortNumber gets a reference to the given string and assigns it to the PortNumber field.
func (o *SerialPortConfigType) SetPortNumber(v string) {
	o.PortNumber = &v
}

// GetBaudRate returns the BaudRate field value if set, zero value otherwise.
func (o *SerialPortConfigType) GetBaudRate() string {
	if o == nil || IsNil(o.BaudRate) {
		var ret string
		return ret
	}
	return *o.BaudRate
}

// GetBaudRateOk returns a tuple with the BaudRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerialPortConfigType) GetBaudRateOk() (*string, bool) {
	if o == nil || IsNil(o.BaudRate) {
		return nil, false
	}
	return o.BaudRate, true
}

// HasBaudRate returns a boolean if a field has been set.
func (o *SerialPortConfigType) HasBaudRate() bool {
	if o != nil && !IsNil(o.BaudRate) {
		return true
	}

	return false
}

// SetBaudRate gets a reference to the given string and assigns it to the BaudRate field.
func (o *SerialPortConfigType) SetBaudRate(v string) {
	o.BaudRate = &v
}

// GetParity returns the Parity field value if set, zero value otherwise.
func (o *SerialPortConfigType) GetParity() string {
	if o == nil || IsNil(o.Parity) {
		var ret string
		return ret
	}
	return *o.Parity
}

// GetParityOk returns a tuple with the Parity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerialPortConfigType) GetParityOk() (*string, bool) {
	if o == nil || IsNil(o.Parity) {
		return nil, false
	}
	return o.Parity, true
}

// HasParity returns a boolean if a field has been set.
func (o *SerialPortConfigType) HasParity() bool {
	if o != nil && !IsNil(o.Parity) {
		return true
	}

	return false
}

// SetParity gets a reference to the given string and assigns it to the Parity field.
func (o *SerialPortConfigType) SetParity(v string) {
	o.Parity = &v
}

// GetDataBits returns the DataBits field value if set, zero value otherwise.
func (o *SerialPortConfigType) GetDataBits() int32 {
	if o == nil || IsNil(o.DataBits) {
		var ret int32
		return ret
	}
	return *o.DataBits
}

// GetDataBitsOk returns a tuple with the DataBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerialPortConfigType) GetDataBitsOk() (*int32, bool) {
	if o == nil || IsNil(o.DataBits) {
		return nil, false
	}
	return o.DataBits, true
}

// HasDataBits returns a boolean if a field has been set.
func (o *SerialPortConfigType) HasDataBits() bool {
	if o != nil && !IsNil(o.DataBits) {
		return true
	}

	return false
}

// SetDataBits gets a reference to the given int32 and assigns it to the DataBits field.
func (o *SerialPortConfigType) SetDataBits(v int32) {
	o.DataBits = &v
}

// GetStopBits returns the StopBits field value if set, zero value otherwise.
func (o *SerialPortConfigType) GetStopBits() int32 {
	if o == nil || IsNil(o.StopBits) {
		var ret int32
		return ret
	}
	return *o.StopBits
}

// GetStopBitsOk returns a tuple with the StopBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerialPortConfigType) GetStopBitsOk() (*int32, bool) {
	if o == nil || IsNil(o.StopBits) {
		return nil, false
	}
	return o.StopBits, true
}

// HasStopBits returns a boolean if a field has been set.
func (o *SerialPortConfigType) HasStopBits() bool {
	if o != nil && !IsNil(o.StopBits) {
		return true
	}

	return false
}

// SetStopBits gets a reference to the given int32 and assigns it to the StopBits field.
func (o *SerialPortConfigType) SetStopBits(v int32) {
	o.StopBits = &v
}

func (o SerialPortConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SerialPortConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PortNumber) {
		toSerialize["portNumber"] = o.PortNumber
	}
	if !IsNil(o.BaudRate) {
		toSerialize["baudRate"] = o.BaudRate
	}
	if !IsNil(o.Parity) {
		toSerialize["parity"] = o.Parity
	}
	if !IsNil(o.DataBits) {
		toSerialize["dataBits"] = o.DataBits
	}
	if !IsNil(o.StopBits) {
		toSerialize["stopBits"] = o.StopBits
	}
	return toSerialize, nil
}

type NullableSerialPortConfigType struct {
	value *SerialPortConfigType
	isSet bool
}

func (v NullableSerialPortConfigType) Get() *SerialPortConfigType {
	return v.value
}

func (v *NullableSerialPortConfigType) Set(val *SerialPortConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableSerialPortConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableSerialPortConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSerialPortConfigType(val *SerialPortConfigType) *NullableSerialPortConfigType {
	return &NullableSerialPortConfigType{value: val, isSet: true}
}

func (v NullableSerialPortConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSerialPortConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


