/*
OPERA Cloud Front Desk Configuration API

APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fofcfg

import (
	"encoding/json"
)

// checks if the TaxTypeCalcRuleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxTypeCalcRuleType{}

// TaxTypeCalcRuleType Defines the Calculation Rule for the generate.
type TaxTypeCalcRuleType struct {
	// Existance of this type indicates that the generate will not be effective. This is mainly used on Tax Type based generates rule.
	DoNotPost map[string]interface{} `json:"doNotPost,omitempty"`
	FlatAmount *FlatAmtGenerateType `json:"flatAmount,omitempty"`
	Percentage *PercentageGenerateType `json:"percentage,omitempty"`
	RoundingMethod *GenerateRoundingMethodType `json:"roundingMethod,omitempty"`
	UDF *UDFGenerateType `json:"uDF,omitempty"`
}

// NewTaxTypeCalcRuleType instantiates a new TaxTypeCalcRuleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxTypeCalcRuleType() *TaxTypeCalcRuleType {
	this := TaxTypeCalcRuleType{}
	return &this
}

// NewTaxTypeCalcRuleTypeWithDefaults instantiates a new TaxTypeCalcRuleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxTypeCalcRuleTypeWithDefaults() *TaxTypeCalcRuleType {
	this := TaxTypeCalcRuleType{}
	return &this
}

// GetDoNotPost returns the DoNotPost field value if set, zero value otherwise.
func (o *TaxTypeCalcRuleType) GetDoNotPost() map[string]interface{} {
	if o == nil || IsNil(o.DoNotPost) {
		var ret map[string]interface{}
		return ret
	}
	return o.DoNotPost
}

// GetDoNotPostOk returns a tuple with the DoNotPost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxTypeCalcRuleType) GetDoNotPostOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DoNotPost) {
		return map[string]interface{}{}, false
	}
	return o.DoNotPost, true
}

// HasDoNotPost returns a boolean if a field has been set.
func (o *TaxTypeCalcRuleType) HasDoNotPost() bool {
	if o != nil && !IsNil(o.DoNotPost) {
		return true
	}

	return false
}

// SetDoNotPost gets a reference to the given map[string]interface{} and assigns it to the DoNotPost field.
func (o *TaxTypeCalcRuleType) SetDoNotPost(v map[string]interface{}) {
	o.DoNotPost = v
}

// GetFlatAmount returns the FlatAmount field value if set, zero value otherwise.
func (o *TaxTypeCalcRuleType) GetFlatAmount() FlatAmtGenerateType {
	if o == nil || IsNil(o.FlatAmount) {
		var ret FlatAmtGenerateType
		return ret
	}
	return *o.FlatAmount
}

// GetFlatAmountOk returns a tuple with the FlatAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxTypeCalcRuleType) GetFlatAmountOk() (*FlatAmtGenerateType, bool) {
	if o == nil || IsNil(o.FlatAmount) {
		return nil, false
	}
	return o.FlatAmount, true
}

// HasFlatAmount returns a boolean if a field has been set.
func (o *TaxTypeCalcRuleType) HasFlatAmount() bool {
	if o != nil && !IsNil(o.FlatAmount) {
		return true
	}

	return false
}

// SetFlatAmount gets a reference to the given FlatAmtGenerateType and assigns it to the FlatAmount field.
func (o *TaxTypeCalcRuleType) SetFlatAmount(v FlatAmtGenerateType) {
	o.FlatAmount = &v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *TaxTypeCalcRuleType) GetPercentage() PercentageGenerateType {
	if o == nil || IsNil(o.Percentage) {
		var ret PercentageGenerateType
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxTypeCalcRuleType) GetPercentageOk() (*PercentageGenerateType, bool) {
	if o == nil || IsNil(o.Percentage) {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *TaxTypeCalcRuleType) HasPercentage() bool {
	if o != nil && !IsNil(o.Percentage) {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given PercentageGenerateType and assigns it to the Percentage field.
func (o *TaxTypeCalcRuleType) SetPercentage(v PercentageGenerateType) {
	o.Percentage = &v
}

// GetRoundingMethod returns the RoundingMethod field value if set, zero value otherwise.
func (o *TaxTypeCalcRuleType) GetRoundingMethod() GenerateRoundingMethodType {
	if o == nil || IsNil(o.RoundingMethod) {
		var ret GenerateRoundingMethodType
		return ret
	}
	return *o.RoundingMethod
}

// GetRoundingMethodOk returns a tuple with the RoundingMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxTypeCalcRuleType) GetRoundingMethodOk() (*GenerateRoundingMethodType, bool) {
	if o == nil || IsNil(o.RoundingMethod) {
		return nil, false
	}
	return o.RoundingMethod, true
}

// HasRoundingMethod returns a boolean if a field has been set.
func (o *TaxTypeCalcRuleType) HasRoundingMethod() bool {
	if o != nil && !IsNil(o.RoundingMethod) {
		return true
	}

	return false
}

// SetRoundingMethod gets a reference to the given GenerateRoundingMethodType and assigns it to the RoundingMethod field.
func (o *TaxTypeCalcRuleType) SetRoundingMethod(v GenerateRoundingMethodType) {
	o.RoundingMethod = &v
}

// GetUDF returns the UDF field value if set, zero value otherwise.
func (o *TaxTypeCalcRuleType) GetUDF() UDFGenerateType {
	if o == nil || IsNil(o.UDF) {
		var ret UDFGenerateType
		return ret
	}
	return *o.UDF
}

// GetUDFOk returns a tuple with the UDF field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxTypeCalcRuleType) GetUDFOk() (*UDFGenerateType, bool) {
	if o == nil || IsNil(o.UDF) {
		return nil, false
	}
	return o.UDF, true
}

// HasUDF returns a boolean if a field has been set.
func (o *TaxTypeCalcRuleType) HasUDF() bool {
	if o != nil && !IsNil(o.UDF) {
		return true
	}

	return false
}

// SetUDF gets a reference to the given UDFGenerateType and assigns it to the UDF field.
func (o *TaxTypeCalcRuleType) SetUDF(v UDFGenerateType) {
	o.UDF = &v
}

func (o TaxTypeCalcRuleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxTypeCalcRuleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DoNotPost) {
		toSerialize["doNotPost"] = o.DoNotPost
	}
	if !IsNil(o.FlatAmount) {
		toSerialize["flatAmount"] = o.FlatAmount
	}
	if !IsNil(o.Percentage) {
		toSerialize["percentage"] = o.Percentage
	}
	if !IsNil(o.RoundingMethod) {
		toSerialize["roundingMethod"] = o.RoundingMethod
	}
	if !IsNil(o.UDF) {
		toSerialize["uDF"] = o.UDF
	}
	return toSerialize, nil
}

type NullableTaxTypeCalcRuleType struct {
	value *TaxTypeCalcRuleType
	isSet bool
}

func (v NullableTaxTypeCalcRuleType) Get() *TaxTypeCalcRuleType {
	return v.value
}

func (v *NullableTaxTypeCalcRuleType) Set(val *TaxTypeCalcRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxTypeCalcRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxTypeCalcRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxTypeCalcRuleType(val *TaxTypeCalcRuleType) *NullableTaxTypeCalcRuleType {
	return &NullableTaxTypeCalcRuleType{value: val, isSet: true}
}

func (v NullableTaxTypeCalcRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxTypeCalcRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


