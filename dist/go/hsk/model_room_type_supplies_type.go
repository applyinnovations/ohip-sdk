/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomTypeSuppliesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomTypeSuppliesType{}

// RoomTypeSuppliesType List of the facility codes.
type RoomTypeSuppliesType struct {
	FacilityCode []FacilityCodeType `json:"facilityCode,omitempty"`
	// Room type code.
	Type *string `json:"type,omitempty"`
}

// NewRoomTypeSuppliesType instantiates a new RoomTypeSuppliesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomTypeSuppliesType() *RoomTypeSuppliesType {
	this := RoomTypeSuppliesType{}
	return &this
}

// NewRoomTypeSuppliesTypeWithDefaults instantiates a new RoomTypeSuppliesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomTypeSuppliesTypeWithDefaults() *RoomTypeSuppliesType {
	this := RoomTypeSuppliesType{}
	return &this
}

// GetFacilityCode returns the FacilityCode field value if set, zero value otherwise.
func (o *RoomTypeSuppliesType) GetFacilityCode() []FacilityCodeType {
	if o == nil || IsNil(o.FacilityCode) {
		var ret []FacilityCodeType
		return ret
	}
	return o.FacilityCode
}

// GetFacilityCodeOk returns a tuple with the FacilityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeSuppliesType) GetFacilityCodeOk() ([]FacilityCodeType, bool) {
	if o == nil || IsNil(o.FacilityCode) {
		return nil, false
	}
	return o.FacilityCode, true
}

// HasFacilityCode returns a boolean if a field has been set.
func (o *RoomTypeSuppliesType) HasFacilityCode() bool {
	if o != nil && !IsNil(o.FacilityCode) {
		return true
	}

	return false
}

// SetFacilityCode gets a reference to the given []FacilityCodeType and assigns it to the FacilityCode field.
func (o *RoomTypeSuppliesType) SetFacilityCode(v []FacilityCodeType) {
	o.FacilityCode = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoomTypeSuppliesType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomTypeSuppliesType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoomTypeSuppliesType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoomTypeSuppliesType) SetType(v string) {
	o.Type = &v
}

func (o RoomTypeSuppliesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomTypeSuppliesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FacilityCode) {
		toSerialize["facilityCode"] = o.FacilityCode
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRoomTypeSuppliesType struct {
	value *RoomTypeSuppliesType
	isSet bool
}

func (v NullableRoomTypeSuppliesType) Get() *RoomTypeSuppliesType {
	return v.value
}

func (v *NullableRoomTypeSuppliesType) Set(val *RoomTypeSuppliesType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomTypeSuppliesType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomTypeSuppliesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomTypeSuppliesType(val *RoomTypeSuppliesType) *NullableRoomTypeSuppliesType {
	return &NullableRoomTypeSuppliesType{value: val, isSet: true}
}

func (v NullableRoomTypeSuppliesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomTypeSuppliesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


