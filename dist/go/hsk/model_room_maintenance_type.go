/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomMaintenanceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomMaintenanceType{}

// RoomMaintenanceType Base maintenance type
type RoomMaintenanceType struct {
	// Maintenance Code
	MaintenanceCode *string `json:"maintenanceCode,omitempty"`
	// Maintenance remarks
	Remarks *string `json:"remarks,omitempty"`
	MaintenanceId *UniqueIDType `json:"maintenanceId,omitempty"`
	RoomInfo *RoomType `json:"roomInfo,omitempty"`
	ResolveInfo *ResolveRoomMaintenanceType `json:"resolveInfo,omitempty"`
	AssignedUserInfo *AssignedUserType `json:"assignedUserInfo,omitempty"`
	// Collection of image results.
	Images []ImageResultType `json:"images,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
}

// NewRoomMaintenanceType instantiates a new RoomMaintenanceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomMaintenanceType() *RoomMaintenanceType {
	this := RoomMaintenanceType{}
	return &this
}

// NewRoomMaintenanceTypeWithDefaults instantiates a new RoomMaintenanceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomMaintenanceTypeWithDefaults() *RoomMaintenanceType {
	this := RoomMaintenanceType{}
	return &this
}

// GetMaintenanceCode returns the MaintenanceCode field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetMaintenanceCode() string {
	if o == nil || IsNil(o.MaintenanceCode) {
		var ret string
		return ret
	}
	return *o.MaintenanceCode
}

// GetMaintenanceCodeOk returns a tuple with the MaintenanceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetMaintenanceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenanceCode) {
		return nil, false
	}
	return o.MaintenanceCode, true
}

// HasMaintenanceCode returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasMaintenanceCode() bool {
	if o != nil && !IsNil(o.MaintenanceCode) {
		return true
	}

	return false
}

// SetMaintenanceCode gets a reference to the given string and assigns it to the MaintenanceCode field.
func (o *RoomMaintenanceType) SetMaintenanceCode(v string) {
	o.MaintenanceCode = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetRemarks() string {
	if o == nil || IsNil(o.Remarks) {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.Remarks) {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasRemarks() bool {
	if o != nil && !IsNil(o.Remarks) {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *RoomMaintenanceType) SetRemarks(v string) {
	o.Remarks = &v
}

// GetMaintenanceId returns the MaintenanceId field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetMaintenanceId() UniqueIDType {
	if o == nil || IsNil(o.MaintenanceId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MaintenanceId
}

// GetMaintenanceIdOk returns a tuple with the MaintenanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetMaintenanceIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MaintenanceId) {
		return nil, false
	}
	return o.MaintenanceId, true
}

// HasMaintenanceId returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasMaintenanceId() bool {
	if o != nil && !IsNil(o.MaintenanceId) {
		return true
	}

	return false
}

// SetMaintenanceId gets a reference to the given UniqueIDType and assigns it to the MaintenanceId field.
func (o *RoomMaintenanceType) SetMaintenanceId(v UniqueIDType) {
	o.MaintenanceId = &v
}

// GetRoomInfo returns the RoomInfo field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetRoomInfo() RoomType {
	if o == nil || IsNil(o.RoomInfo) {
		var ret RoomType
		return ret
	}
	return *o.RoomInfo
}

// GetRoomInfoOk returns a tuple with the RoomInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetRoomInfoOk() (*RoomType, bool) {
	if o == nil || IsNil(o.RoomInfo) {
		return nil, false
	}
	return o.RoomInfo, true
}

// HasRoomInfo returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasRoomInfo() bool {
	if o != nil && !IsNil(o.RoomInfo) {
		return true
	}

	return false
}

// SetRoomInfo gets a reference to the given RoomType and assigns it to the RoomInfo field.
func (o *RoomMaintenanceType) SetRoomInfo(v RoomType) {
	o.RoomInfo = &v
}

// GetResolveInfo returns the ResolveInfo field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetResolveInfo() ResolveRoomMaintenanceType {
	if o == nil || IsNil(o.ResolveInfo) {
		var ret ResolveRoomMaintenanceType
		return ret
	}
	return *o.ResolveInfo
}

// GetResolveInfoOk returns a tuple with the ResolveInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetResolveInfoOk() (*ResolveRoomMaintenanceType, bool) {
	if o == nil || IsNil(o.ResolveInfo) {
		return nil, false
	}
	return o.ResolveInfo, true
}

// HasResolveInfo returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasResolveInfo() bool {
	if o != nil && !IsNil(o.ResolveInfo) {
		return true
	}

	return false
}

// SetResolveInfo gets a reference to the given ResolveRoomMaintenanceType and assigns it to the ResolveInfo field.
func (o *RoomMaintenanceType) SetResolveInfo(v ResolveRoomMaintenanceType) {
	o.ResolveInfo = &v
}

// GetAssignedUserInfo returns the AssignedUserInfo field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetAssignedUserInfo() AssignedUserType {
	if o == nil || IsNil(o.AssignedUserInfo) {
		var ret AssignedUserType
		return ret
	}
	return *o.AssignedUserInfo
}

// GetAssignedUserInfoOk returns a tuple with the AssignedUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetAssignedUserInfoOk() (*AssignedUserType, bool) {
	if o == nil || IsNil(o.AssignedUserInfo) {
		return nil, false
	}
	return o.AssignedUserInfo, true
}

// HasAssignedUserInfo returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasAssignedUserInfo() bool {
	if o != nil && !IsNil(o.AssignedUserInfo) {
		return true
	}

	return false
}

// SetAssignedUserInfo gets a reference to the given AssignedUserType and assigns it to the AssignedUserInfo field.
func (o *RoomMaintenanceType) SetAssignedUserInfo(v AssignedUserType) {
	o.AssignedUserInfo = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetImages() []ImageResultType {
	if o == nil || IsNil(o.Images) {
		var ret []ImageResultType
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetImagesOk() ([]ImageResultType, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImageResultType and assigns it to the Images field.
func (o *RoomMaintenanceType) SetImages(v []ImageResultType) {
	o.Images = v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *RoomMaintenanceType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *RoomMaintenanceType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *RoomMaintenanceType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *RoomMaintenanceType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *RoomMaintenanceType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *RoomMaintenanceType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *RoomMaintenanceType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

func (o RoomMaintenanceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomMaintenanceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaintenanceCode) {
		toSerialize["maintenanceCode"] = o.MaintenanceCode
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	if !IsNil(o.MaintenanceId) {
		toSerialize["maintenanceId"] = o.MaintenanceId
	}
	if !IsNil(o.RoomInfo) {
		toSerialize["roomInfo"] = o.RoomInfo
	}
	if !IsNil(o.ResolveInfo) {
		toSerialize["resolveInfo"] = o.ResolveInfo
	}
	if !IsNil(o.AssignedUserInfo) {
		toSerialize["assignedUserInfo"] = o.AssignedUserInfo
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	return toSerialize, nil
}

type NullableRoomMaintenanceType struct {
	value *RoomMaintenanceType
	isSet bool
}

func (v NullableRoomMaintenanceType) Get() *RoomMaintenanceType {
	return v.value
}

func (v *NullableRoomMaintenanceType) Set(val *RoomMaintenanceType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomMaintenanceType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomMaintenanceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomMaintenanceType(val *RoomMaintenanceType) *NullableRoomMaintenanceType {
	return &NullableRoomMaintenanceType{value: val, isSet: true}
}

func (v NullableRoomMaintenanceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomMaintenanceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


