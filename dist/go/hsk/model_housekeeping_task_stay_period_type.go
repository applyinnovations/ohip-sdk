/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
	"fmt"
)

// HousekeepingTaskStayPeriodType Simple type for controlling the fetch operations of the housekeeping schedule request.
type HousekeepingTaskStayPeriodType string

// List of housekeepingTaskStayPeriodType
const (
	HOUSEKEEPINGTASKSTAYPERIODTYPE_ENTIRE_STAY HousekeepingTaskStayPeriodType = "EntireStay"
	HOUSEKEEPINGTASKSTAYPERIODTYPE_SPECIFIC_DATES HousekeepingTaskStayPeriodType = "SpecificDates"
)

// All allowed values of HousekeepingTaskStayPeriodType enum
var AllowedHousekeepingTaskStayPeriodTypeEnumValues = []HousekeepingTaskStayPeriodType{
	"EntireStay",
	"SpecificDates",
}

func (v *HousekeepingTaskStayPeriodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HousekeepingTaskStayPeriodType(value)
	for _, existing := range AllowedHousekeepingTaskStayPeriodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HousekeepingTaskStayPeriodType", value)
}

// NewHousekeepingTaskStayPeriodTypeFromValue returns a pointer to a valid HousekeepingTaskStayPeriodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHousekeepingTaskStayPeriodTypeFromValue(v string) (*HousekeepingTaskStayPeriodType, error) {
	ev := HousekeepingTaskStayPeriodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HousekeepingTaskStayPeriodType: valid values are %v", v, AllowedHousekeepingTaskStayPeriodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HousekeepingTaskStayPeriodType) IsValid() bool {
	for _, existing := range AllowedHousekeepingTaskStayPeriodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to housekeepingTaskStayPeriodType value
func (v HousekeepingTaskStayPeriodType) Ptr() *HousekeepingTaskStayPeriodType {
	return &v
}

type NullableHousekeepingTaskStayPeriodType struct {
	value *HousekeepingTaskStayPeriodType
	isSet bool
}

func (v NullableHousekeepingTaskStayPeriodType) Get() *HousekeepingTaskStayPeriodType {
	return v.value
}

func (v *NullableHousekeepingTaskStayPeriodType) Set(val *HousekeepingTaskStayPeriodType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingTaskStayPeriodType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingTaskStayPeriodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingTaskStayPeriodType(val *HousekeepingTaskStayPeriodType) *NullableHousekeepingTaskStayPeriodType {
	return &NullableHousekeepingTaskStayPeriodType{value: val, isSet: true}
}

func (v NullableHousekeepingTaskStayPeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingTaskStayPeriodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

