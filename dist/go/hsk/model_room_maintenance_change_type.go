/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomMaintenanceChangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomMaintenanceChangeType{}

// RoomMaintenanceChangeType Base maintenance type
type RoomMaintenanceChangeType struct {
	// Maintenance Code
	MaintenanceCode *string `json:"maintenanceCode,omitempty"`
	// Maintenance remarks
	Remarks *string `json:"remarks,omitempty"`
	MaintenanceId *UniqueIDType `json:"maintenanceId,omitempty"`
	AssignedUserInfo *AssignedUserType `json:"assignedUserInfo,omitempty"`
	RoomId *string `json:"roomId,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
}

// NewRoomMaintenanceChangeType instantiates a new RoomMaintenanceChangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomMaintenanceChangeType() *RoomMaintenanceChangeType {
	this := RoomMaintenanceChangeType{}
	return &this
}

// NewRoomMaintenanceChangeTypeWithDefaults instantiates a new RoomMaintenanceChangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomMaintenanceChangeTypeWithDefaults() *RoomMaintenanceChangeType {
	this := RoomMaintenanceChangeType{}
	return &this
}

// GetMaintenanceCode returns the MaintenanceCode field value if set, zero value otherwise.
func (o *RoomMaintenanceChangeType) GetMaintenanceCode() string {
	if o == nil || IsNil(o.MaintenanceCode) {
		var ret string
		return ret
	}
	return *o.MaintenanceCode
}

// GetMaintenanceCodeOk returns a tuple with the MaintenanceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceChangeType) GetMaintenanceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MaintenanceCode) {
		return nil, false
	}
	return o.MaintenanceCode, true
}

// HasMaintenanceCode returns a boolean if a field has been set.
func (o *RoomMaintenanceChangeType) HasMaintenanceCode() bool {
	if o != nil && !IsNil(o.MaintenanceCode) {
		return true
	}

	return false
}

// SetMaintenanceCode gets a reference to the given string and assigns it to the MaintenanceCode field.
func (o *RoomMaintenanceChangeType) SetMaintenanceCode(v string) {
	o.MaintenanceCode = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *RoomMaintenanceChangeType) GetRemarks() string {
	if o == nil || IsNil(o.Remarks) {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceChangeType) GetRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.Remarks) {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *RoomMaintenanceChangeType) HasRemarks() bool {
	if o != nil && !IsNil(o.Remarks) {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *RoomMaintenanceChangeType) SetRemarks(v string) {
	o.Remarks = &v
}

// GetMaintenanceId returns the MaintenanceId field value if set, zero value otherwise.
func (o *RoomMaintenanceChangeType) GetMaintenanceId() UniqueIDType {
	if o == nil || IsNil(o.MaintenanceId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MaintenanceId
}

// GetMaintenanceIdOk returns a tuple with the MaintenanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceChangeType) GetMaintenanceIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MaintenanceId) {
		return nil, false
	}
	return o.MaintenanceId, true
}

// HasMaintenanceId returns a boolean if a field has been set.
func (o *RoomMaintenanceChangeType) HasMaintenanceId() bool {
	if o != nil && !IsNil(o.MaintenanceId) {
		return true
	}

	return false
}

// SetMaintenanceId gets a reference to the given UniqueIDType and assigns it to the MaintenanceId field.
func (o *RoomMaintenanceChangeType) SetMaintenanceId(v UniqueIDType) {
	o.MaintenanceId = &v
}

// GetAssignedUserInfo returns the AssignedUserInfo field value if set, zero value otherwise.
func (o *RoomMaintenanceChangeType) GetAssignedUserInfo() AssignedUserType {
	if o == nil || IsNil(o.AssignedUserInfo) {
		var ret AssignedUserType
		return ret
	}
	return *o.AssignedUserInfo
}

// GetAssignedUserInfoOk returns a tuple with the AssignedUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceChangeType) GetAssignedUserInfoOk() (*AssignedUserType, bool) {
	if o == nil || IsNil(o.AssignedUserInfo) {
		return nil, false
	}
	return o.AssignedUserInfo, true
}

// HasAssignedUserInfo returns a boolean if a field has been set.
func (o *RoomMaintenanceChangeType) HasAssignedUserInfo() bool {
	if o != nil && !IsNil(o.AssignedUserInfo) {
		return true
	}

	return false
}

// SetAssignedUserInfo gets a reference to the given AssignedUserType and assigns it to the AssignedUserInfo field.
func (o *RoomMaintenanceChangeType) SetAssignedUserInfo(v AssignedUserType) {
	o.AssignedUserInfo = &v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *RoomMaintenanceChangeType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceChangeType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *RoomMaintenanceChangeType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *RoomMaintenanceChangeType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomMaintenanceChangeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomMaintenanceChangeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomMaintenanceChangeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomMaintenanceChangeType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o RoomMaintenanceChangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomMaintenanceChangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaintenanceCode) {
		toSerialize["maintenanceCode"] = o.MaintenanceCode
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	if !IsNil(o.MaintenanceId) {
		toSerialize["maintenanceId"] = o.MaintenanceId
	}
	if !IsNil(o.AssignedUserInfo) {
		toSerialize["assignedUserInfo"] = o.AssignedUserInfo
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableRoomMaintenanceChangeType struct {
	value *RoomMaintenanceChangeType
	isSet bool
}

func (v NullableRoomMaintenanceChangeType) Get() *RoomMaintenanceChangeType {
	return v.value
}

func (v *NullableRoomMaintenanceChangeType) Set(val *RoomMaintenanceChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomMaintenanceChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomMaintenanceChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomMaintenanceChangeType(val *RoomMaintenanceChangeType) *NullableRoomMaintenanceChangeType {
	return &NullableRoomMaintenanceChangeType{value: val, isSet: true}
}

func (v NullableRoomMaintenanceChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomMaintenanceChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


