/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the Schedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schedule{}

// Schedule Return object that contains a list of facility tasks for the reservation specified in RQ.
type Schedule struct {
	GuestHouseKeepingInstructions *ResHousekeepingType `json:"guestHouseKeepingInstructions,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	HousekeepingSchedule *ReservationHousekeepingScheduleType `json:"housekeepingSchedule,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule() *Schedule {
	this := Schedule{}
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	return &this
}

// GetGuestHouseKeepingInstructions returns the GuestHouseKeepingInstructions field value if set, zero value otherwise.
func (o *Schedule) GetGuestHouseKeepingInstructions() ResHousekeepingType {
	if o == nil || IsNil(o.GuestHouseKeepingInstructions) {
		var ret ResHousekeepingType
		return ret
	}
	return *o.GuestHouseKeepingInstructions
}

// GetGuestHouseKeepingInstructionsOk returns a tuple with the GuestHouseKeepingInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetGuestHouseKeepingInstructionsOk() (*ResHousekeepingType, bool) {
	if o == nil || IsNil(o.GuestHouseKeepingInstructions) {
		return nil, false
	}
	return o.GuestHouseKeepingInstructions, true
}

// HasGuestHouseKeepingInstructions returns a boolean if a field has been set.
func (o *Schedule) HasGuestHouseKeepingInstructions() bool {
	if o != nil && !IsNil(o.GuestHouseKeepingInstructions) {
		return true
	}

	return false
}

// SetGuestHouseKeepingInstructions gets a reference to the given ResHousekeepingType and assigns it to the GuestHouseKeepingInstructions field.
func (o *Schedule) SetGuestHouseKeepingInstructions(v ResHousekeepingType) {
	o.GuestHouseKeepingInstructions = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *Schedule) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *Schedule) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *Schedule) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHousekeepingSchedule returns the HousekeepingSchedule field value if set, zero value otherwise.
func (o *Schedule) GetHousekeepingSchedule() ReservationHousekeepingScheduleType {
	if o == nil || IsNil(o.HousekeepingSchedule) {
		var ret ReservationHousekeepingScheduleType
		return ret
	}
	return *o.HousekeepingSchedule
}

// GetHousekeepingScheduleOk returns a tuple with the HousekeepingSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetHousekeepingScheduleOk() (*ReservationHousekeepingScheduleType, bool) {
	if o == nil || IsNil(o.HousekeepingSchedule) {
		return nil, false
	}
	return o.HousekeepingSchedule, true
}

// HasHousekeepingSchedule returns a boolean if a field has been set.
func (o *Schedule) HasHousekeepingSchedule() bool {
	if o != nil && !IsNil(o.HousekeepingSchedule) {
		return true
	}

	return false
}

// SetHousekeepingSchedule gets a reference to the given ReservationHousekeepingScheduleType and assigns it to the HousekeepingSchedule field.
func (o *Schedule) SetHousekeepingSchedule(v ReservationHousekeepingScheduleType) {
	o.HousekeepingSchedule = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Schedule) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Schedule) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *Schedule) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *Schedule) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *Schedule) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *Schedule) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Schedule) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Schedule) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *Schedule) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GuestHouseKeepingInstructions) {
		toSerialize["guestHouseKeepingInstructions"] = o.GuestHouseKeepingInstructions
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HousekeepingSchedule) {
		toSerialize["housekeepingSchedule"] = o.HousekeepingSchedule
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


