/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomInformationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomInformationType{}

// RoomInformationType Room Information needed in updating the status.
type RoomInformationType struct {
	RoomId *string `json:"roomId,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
}

// NewRoomInformationType instantiates a new RoomInformationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomInformationType() *RoomInformationType {
	this := RoomInformationType{}
	return &this
}

// NewRoomInformationTypeWithDefaults instantiates a new RoomInformationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomInformationTypeWithDefaults() *RoomInformationType {
	this := RoomInformationType{}
	return &this
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *RoomInformationType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInformationType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *RoomInformationType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *RoomInformationType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *RoomInformationType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomInformationType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *RoomInformationType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *RoomInformationType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

func (o RoomInformationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomInformationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	return toSerialize, nil
}

type NullableRoomInformationType struct {
	value *RoomInformationType
	isSet bool
}

func (v NullableRoomInformationType) Get() *RoomInformationType {
	return v.value
}

func (v *NullableRoomInformationType) Set(val *RoomInformationType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomInformationType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomInformationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomInformationType(val *RoomInformationType) *NullableRoomInformationType {
	return &NullableRoomInformationType{value: val, isSet: true}
}

func (v NullableRoomInformationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomInformationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


