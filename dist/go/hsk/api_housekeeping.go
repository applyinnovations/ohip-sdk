/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// HousekeepingAPIService HousekeepingAPI service
type HousekeepingAPIService service

type HousekeepingAPIAutoGenerateTaskSheetsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheets *TaskSheets
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIAutoGenerateTaskSheetsRequest) Authorization(authorization string) HousekeepingAPIAutoGenerateTaskSheetsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIAutoGenerateTaskSheetsRequest) XAppKey(xAppKey string) HousekeepingAPIAutoGenerateTaskSheetsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIAutoGenerateTaskSheetsRequest) XHotelid(xHotelid string) HousekeepingAPIAutoGenerateTaskSheetsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for generating housekeeping Task Sheets automatically. To generate task sheets automatically the minimum required criteria is the Task Date, Task Code, Number of Attendants/Tasksheets required and the Room Statuses. Based on the criteria defined, task sheets will be created and the rooms will be assigned to the Tasksheets. Example: if the criteria defines that Dirty room status to be used to generate 5 sheets, then only those rooms which have the status &#x3D; Dirty will be used and will be assigned to the 5 sheets.
func (r HousekeepingAPIAutoGenerateTaskSheetsRequest) TaskSheets(taskSheets TaskSheets) HousekeepingAPIAutoGenerateTaskSheetsRequest {
	r.taskSheets = &taskSheets
	return r
}

// External system code.
func (r HousekeepingAPIAutoGenerateTaskSheetsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIAutoGenerateTaskSheetsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIAutoGenerateTaskSheetsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIAutoGenerateTaskSheetsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIAutoGenerateTaskSheetsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.AutoGenerateTaskSheetsExecute(r)
}

/*
AutoGenerateTaskSheets Auto generate the task sheets

This API will allow you to Auto generate the task sheets. <p><strong>OperationId:</strong>autoGenerateTaskSheets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIAutoGenerateTaskSheetsRequest
*/
func (a *HousekeepingAPIService) AutoGenerateTaskSheets(ctx context.Context, hotelId string) HousekeepingAPIAutoGenerateTaskSheetsRequest {
	return HousekeepingAPIAutoGenerateTaskSheetsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) AutoGenerateTaskSheetsExecute(r HousekeepingAPIAutoGenerateTaskSheetsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.AutoGenerateTaskSheets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/autoTaskSheets"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheets
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPICancelServicingTaskRoomRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	sheetNumber string
	roomId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskRoom *TaskRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPICancelServicingTaskRoomRequest) Authorization(authorization string) HousekeepingAPICancelServicingTaskRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPICancelServicingTaskRoomRequest) XAppKey(xAppKey string) HousekeepingAPICancelServicingTaskRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPICancelServicingTaskRoomRequest) XHotelid(xHotelid string) HousekeepingAPICancelServicingTaskRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to cancel the servicing of a task room.
func (r HousekeepingAPICancelServicingTaskRoomRequest) TaskRoom(taskRoom TaskRoom) HousekeepingAPICancelServicingTaskRoomRequest {
	r.taskRoom = &taskRoom
	return r
}

// External system code.
func (r HousekeepingAPICancelServicingTaskRoomRequest) XExternalsystem(xExternalsystem string) HousekeepingAPICancelServicingTaskRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPICancelServicingTaskRoomRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPICancelServicingTaskRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPICancelServicingTaskRoomRequest) Execute() (*CanceledServicingTaskRoom, *http.Response, error) {
	return r.ApiService.CancelServicingTaskRoomExecute(r)
}

/*
CancelServicingTaskRoom Cancel servicing task room

This API will allow you to cancel servicing task room. <p><strong>OperationId:</strong>cancelServicingTaskRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sheetNumber
 @param roomId
 @param hotelId
 @return HousekeepingAPICancelServicingTaskRoomRequest
*/
func (a *HousekeepingAPIService) CancelServicingTaskRoom(ctx context.Context, sheetNumber string, roomId string, hotelId string) HousekeepingAPICancelServicingTaskRoomRequest {
	return HousekeepingAPICancelServicingTaskRoomRequest{
		ApiService: a,
		ctx: ctx,
		sheetNumber: sheetNumber,
		roomId: roomId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CanceledServicingTaskRoom
func (a *HousekeepingAPIService) CancelServicingTaskRoomExecute(r HousekeepingAPICancelServicingTaskRoomRequest) (*CanceledServicingTaskRoom, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CanceledServicingTaskRoom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.CancelServicingTaskRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"sheetNumber"+"}", url.PathEscape(parameterValueToString(r.sheetNumber, "sheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("sheetNumber must have at least 1 elements")
	}
	if strlen(r.sheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("sheetNumber must have less than 2000 elements")
	}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPICompleteOutOfOrderRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	completeRoomRepair *CompleteOutOfOrderRoomsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPICompleteOutOfOrderRoomsRequest) Authorization(authorization string) HousekeepingAPICompleteOutOfOrderRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPICompleteOutOfOrderRoomsRequest) XAppKey(xAppKey string) HousekeepingAPICompleteOutOfOrderRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPICompleteOutOfOrderRoomsRequest) XHotelid(xHotelid string) HousekeepingAPICompleteOutOfOrderRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r HousekeepingAPICompleteOutOfOrderRoomsRequest) CompleteRoomRepair(completeRoomRepair CompleteOutOfOrderRoomsRequest) HousekeepingAPICompleteOutOfOrderRoomsRequest {
	r.completeRoomRepair = &completeRoomRepair
	return r
}

// External system code.
func (r HousekeepingAPICompleteOutOfOrderRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPICompleteOutOfOrderRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPICompleteOutOfOrderRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPICompleteOutOfOrderRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPICompleteOutOfOrderRoomsRequest) Execute() (*CompleteRoomRepairStatus, *http.Response, error) {
	return r.ApiService.CompleteOutOfOrderRoomsExecute(r)
}

/*
CompleteOutOfOrderRooms Complete rooms Out Of Order

Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code for which Out Of Order rooms needs to be returned to Clean, Inspected, Dirty or Pickup status.
 @return HousekeepingAPICompleteOutOfOrderRoomsRequest
*/
func (a *HousekeepingAPIService) CompleteOutOfOrderRooms(ctx context.Context, hotelId string) HousekeepingAPICompleteOutOfOrderRoomsRequest {
	return HousekeepingAPICompleteOutOfOrderRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CompleteRoomRepairStatus
func (a *HousekeepingAPIService) CompleteOutOfOrderRoomsExecute(r HousekeepingAPICompleteOutOfOrderRoomsRequest) (*CompleteRoomRepairStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompleteRoomRepairStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.CompleteOutOfOrderRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/outOfOrderRooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.completeRoomRepair
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPICompleteOutOfServiceRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	completeRoomRepair *CompleteOutOfServiceRoomsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPICompleteOutOfServiceRoomsRequest) Authorization(authorization string) HousekeepingAPICompleteOutOfServiceRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPICompleteOutOfServiceRoomsRequest) XAppKey(xAppKey string) HousekeepingAPICompleteOutOfServiceRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPICompleteOutOfServiceRoomsRequest) XHotelid(xHotelid string) HousekeepingAPICompleteOutOfServiceRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r HousekeepingAPICompleteOutOfServiceRoomsRequest) CompleteRoomRepair(completeRoomRepair CompleteOutOfServiceRoomsRequest) HousekeepingAPICompleteOutOfServiceRoomsRequest {
	r.completeRoomRepair = &completeRoomRepair
	return r
}

// External system code.
func (r HousekeepingAPICompleteOutOfServiceRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPICompleteOutOfServiceRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPICompleteOutOfServiceRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPICompleteOutOfServiceRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPICompleteOutOfServiceRoomsRequest) Execute() (*CompleteRoomRepairStatus, *http.Response, error) {
	return r.ApiService.CompleteOutOfServiceRoomsExecute(r)
}

/*
CompleteOutOfServiceRooms Complete Rooms Out of Service

Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code for which Out Of Service rooms needs to be returned to Clean, Inspected, Dirty or Pickup status.
 @return HousekeepingAPICompleteOutOfServiceRoomsRequest
*/
func (a *HousekeepingAPIService) CompleteOutOfServiceRooms(ctx context.Context, hotelId string) HousekeepingAPICompleteOutOfServiceRoomsRequest {
	return HousekeepingAPICompleteOutOfServiceRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CompleteRoomRepairStatus
func (a *HousekeepingAPIService) CompleteOutOfServiceRoomsExecute(r HousekeepingAPICompleteOutOfServiceRoomsRequest) (*CompleteRoomRepairStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompleteRoomRepairStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.CompleteOutOfServiceRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/outOfServiceRooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.completeRoomRepair
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPICompleteServicingTaskRoomRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	sheetNumber string
	roomId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskRoom *TaskRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPICompleteServicingTaskRoomRequest) Authorization(authorization string) HousekeepingAPICompleteServicingTaskRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPICompleteServicingTaskRoomRequest) XAppKey(xAppKey string) HousekeepingAPICompleteServicingTaskRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPICompleteServicingTaskRoomRequest) XHotelid(xHotelid string) HousekeepingAPICompleteServicingTaskRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to complete servicing of a task room. This will complete the servicing and set the end time and status to COMPLETED.
func (r HousekeepingAPICompleteServicingTaskRoomRequest) TaskRoom(taskRoom TaskRoom) HousekeepingAPICompleteServicingTaskRoomRequest {
	r.taskRoom = &taskRoom
	return r
}

// External system code.
func (r HousekeepingAPICompleteServicingTaskRoomRequest) XExternalsystem(xExternalsystem string) HousekeepingAPICompleteServicingTaskRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPICompleteServicingTaskRoomRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPICompleteServicingTaskRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPICompleteServicingTaskRoomRequest) Execute() (*CompletedServicingTaskRoom, *http.Response, error) {
	return r.ApiService.CompleteServicingTaskRoomExecute(r)
}

/*
CompleteServicingTaskRoom Complete servicing task room

This API will allow you to complete servicing task room. <p><strong>OperationId:</strong>completeServicingTaskRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sheetNumber
 @param roomId
 @param hotelId
 @return HousekeepingAPICompleteServicingTaskRoomRequest
*/
func (a *HousekeepingAPIService) CompleteServicingTaskRoom(ctx context.Context, sheetNumber string, roomId string, hotelId string) HousekeepingAPICompleteServicingTaskRoomRequest {
	return HousekeepingAPICompleteServicingTaskRoomRequest{
		ApiService: a,
		ctx: ctx,
		sheetNumber: sheetNumber,
		roomId: roomId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CompletedServicingTaskRoom
func (a *HousekeepingAPIService) CompleteServicingTaskRoomExecute(r HousekeepingAPICompleteServicingTaskRoomRequest) (*CompletedServicingTaskRoom, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompletedServicingTaskRoom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.CompleteServicingTaskRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/complete"
	localVarPath = strings.Replace(localVarPath, "{"+"sheetNumber"+"}", url.PathEscape(parameterValueToString(r.sheetNumber, "sheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("sheetNumber must have at least 1 elements")
	}
	if strlen(r.sheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("sheetNumber must have less than 2000 elements")
	}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	taskCodesBreakOutId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest) Authorization(authorization string) HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest) XAppKey(xAppKey string) HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest) XHotelid(xHotelid string) HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteHouseKeepingTaskSheetsExecute(r)
}

/*
DeleteHouseKeepingTaskSheets Delete all the hotel task sheets for an existing Task Sheet Set.

Use this API to delete all task sheets for an existing task sheet set for a specific property. Task Sheet Sets can be used to break out the rooms to be cleaned by the housekeeping attendants.<p><strong>OperationId:</strong>deleteHouseKeepingTaskSheets</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Indicates Unique Hotel Code for which the task sheets will be deleted.
 @param taskCodesBreakOutId Indicates Unique breakout ID for which the task sheets will be deleted.
 @return HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest
*/
func (a *HousekeepingAPIService) DeleteHouseKeepingTaskSheets(ctx context.Context, hotelId string, taskCodesBreakOutId string) HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest {
	return HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		taskCodesBreakOutId: taskCodesBreakOutId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) DeleteHouseKeepingTaskSheetsExecute(r HousekeepingAPIDeleteHouseKeepingTaskSheetsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.DeleteHouseKeepingTaskSheets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/houseKeepingTasks/{taskCodesBreakOutId}"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"taskCodesBreakOutId"+"}", url.PathEscape(parameterValueToString(r.taskCodesBreakOutId, "taskCodesBreakOutId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.taskCodesBreakOutId) < 1 {
		return localVarReturnValue, nil, reportError("taskCodesBreakOutId must have at least 1 elements")
	}
	if strlen(r.taskCodesBreakOutId) > 2000 {
		return localVarReturnValue, nil, reportError("taskCodesBreakOutId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	scheduleDate *string
	attendantId *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Schedule date of attendants&#39; assignment. Used when attendants to scheduled are of the same date.
func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) ScheduleDate(scheduleDate string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	r.scheduleDate = &scheduleDate
	return r
}

// ID of the attendant.
func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) AttendantId(attendantId []string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	r.attendantId = &attendantId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) Authorization(authorization string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) XAppKey(xAppKey string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) XHotelid(xHotelid string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteHousekeepingAttendantScheduleExecute(r)
}

/*
DeleteHousekeepingAttendantSchedule Delete housekeeping attendant schedule

This API will allow you to delete housekeeping attendant schedule. <p><strong>OperationId:</strong>deleteHousekeepingAttendantSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest
*/
func (a *HousekeepingAPIService) DeleteHousekeepingAttendantSchedule(ctx context.Context, hotelId string) HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest {
	return HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) DeleteHousekeepingAttendantScheduleExecute(r HousekeepingAPIDeleteHousekeepingAttendantScheduleRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.DeleteHousekeepingAttendantSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/attendants/houseKeepingTasks"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "scheduleDate", r.scheduleDate, "")
	{
		t := *r.attendantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "attendantId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "attendantId", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIDeleteReservationHousekeepingTasksRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	customized *bool
	cycleStartDay *int32
	endDate *string
	startDate *string
	facilityTaskCode *string
	facilityTaskDescription *string
	facilityTaskPriority *int32
	taskDate *[]string
	taskStartDate *[]string
	taskEndDate *[]string
	stayPeriod *[]string
	frequency *[]int32
	taskCycleStartDay *[]int32
	roomType *[]string
	roomId *[]string
	facilityCodes *[]string
	facilityCodesDescription *[]string
	facilityCodesQuantity *[]int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) Authorization(authorization string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) XAppKey(xAppKey string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) XHotelid(xHotelid string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.xHotelid = &xHotelid
	return r
}

// Signifies whether task has been customized or not.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) Customized(customized bool) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.customized = &customized
	return r
}

// Signifies the shift of the housekeeping schedule.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) CycleStartDay(cycleStartDay int32) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.cycleStartDay = &cycleStartDay
	return r
}

// Date at which facility tasks stopped being retrieved.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) EndDate(endDate string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.endDate = &endDate
	return r
}

// Date at which facility tasks started being retrieved.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) StartDate(startDate string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.startDate = &startDate
	return r
}

// Code of the housekeeping task.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) FacilityTaskCode(facilityTaskCode string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.facilityTaskCode = &facilityTaskCode
	return r
}

// Facility task description.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) FacilityTaskDescription(facilityTaskDescription string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.facilityTaskDescription = &facilityTaskDescription
	return r
}

// Signifies the priority of the task.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) FacilityTaskPriority(facilityTaskPriority int32) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.facilityTaskPriority = &facilityTaskPriority
	return r
}

// A reservation date on which task must occur.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) TaskDate(taskDate []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.taskDate = &taskDate
	return r
}

// Date on which the task needs to start being performed.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) TaskStartDate(taskStartDate []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.taskStartDate = &taskStartDate
	return r
}

// Date on which task will stop being performed.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) TaskEndDate(taskEndDate []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.taskEndDate = &taskEndDate
	return r
}

// Simple type for controlling the fetch operations of the housekeeping schedule request.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) StayPeriod(stayPeriod []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.stayPeriod = &stayPeriod
	return r
}

// Signifies frequency(i.e. every 2 days) with which task is to be performed.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) Frequency(frequency []int32) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.frequency = &frequency
	return r
}

// Signifies offset(in days) i.e. start on 3rd day from arrival.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) TaskCycleStartDay(taskCycleStartDay []int32) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.taskCycleStartDay = &taskCycleStartDay
	return r
}

// Signifies the room type for which task is being performed .
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) RoomType(roomType []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.roomType = &roomType
	return r
}

// Room number at which task is to be performed.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) RoomId(roomId []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.roomId = &roomId
	return r
}

// Facility code value.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) FacilityCodes(facilityCodes []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.facilityCodes = &facilityCodes
	return r
}

// Facility Code.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) FacilityCodesDescription(facilityCodesDescription []string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.facilityCodesDescription = &facilityCodesDescription
	return r
}

// Signifies the quantity.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) FacilityCodesQuantity(facilityCodesQuantity []int32) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.facilityCodesQuantity = &facilityCodesQuantity
	return r
}

// External system code.
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteReservationHousekeepingTasksExecute(r)
}

/*
DeleteReservationHousekeepingTasks Delete reservation housekeeping task

This API will allow you to delete reservation housekeeping task. <p><strong>OperationId:</strong>deleteReservationHousekeepingTasks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPIDeleteReservationHousekeepingTasksRequest
*/
func (a *HousekeepingAPIService) DeleteReservationHousekeepingTasks(ctx context.Context, reservationId string, hotelId string) HousekeepingAPIDeleteReservationHousekeepingTasksRequest {
	return HousekeepingAPIDeleteReservationHousekeepingTasksRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) DeleteReservationHousekeepingTasksExecute(r HousekeepingAPIDeleteReservationHousekeepingTasksRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.DeleteReservationHousekeepingTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.customized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customized", r.customized, "")
  }
	if r.cycleStartDay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cycleStartDay", r.cycleStartDay, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
  }
	if r.facilityTaskCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facilityTaskCode", r.facilityTaskCode, "")
  }
	if r.facilityTaskDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facilityTaskDescription", r.facilityTaskDescription, "")
  }
	if r.facilityTaskPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "facilityTaskPriority", r.facilityTaskPriority, "")
  }
	if r.taskDate != nil {
		t := *r.taskDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskDate", t, "multi")
		}
  }
	if r.taskStartDate != nil {
		t := *r.taskStartDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskStartDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskStartDate", t, "multi")
		}
  }
	if r.taskEndDate != nil {
		t := *r.taskEndDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskEndDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskEndDate", t, "multi")
		}
  }
	if r.stayPeriod != nil {
		t := *r.stayPeriod
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "stayPeriod", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "stayPeriod", t, "multi")
		}
  }
	if r.frequency != nil {
		t := *r.frequency
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "frequency", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "frequency", t, "multi")
		}
  }
	if r.taskCycleStartDay != nil {
		t := *r.taskCycleStartDay
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskCycleStartDay", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskCycleStartDay", t, "multi")
		}
  }
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
  }
	if r.roomId != nil {
		t := *r.roomId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", t, "multi")
		}
  }
	if r.facilityCodes != nil {
		t := *r.facilityCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facilityCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facilityCodes", t, "multi")
		}
  }
	if r.facilityCodesDescription != nil {
		t := *r.facilityCodesDescription
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facilityCodesDescription", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facilityCodesDescription", t, "multi")
		}
  }
	if r.facilityCodesQuantity != nil {
		t := *r.facilityCodesQuantity
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facilityCodesQuantity", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facilityCodesQuantity", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIDeleteRoomMaintenanceRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	mainteananceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIDeleteRoomMaintenanceRequest) Authorization(authorization string) HousekeepingAPIDeleteRoomMaintenanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIDeleteRoomMaintenanceRequest) XAppKey(xAppKey string) HousekeepingAPIDeleteRoomMaintenanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIDeleteRoomMaintenanceRequest) XHotelid(xHotelid string) HousekeepingAPIDeleteRoomMaintenanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r HousekeepingAPIDeleteRoomMaintenanceRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIDeleteRoomMaintenanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIDeleteRoomMaintenanceRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIDeleteRoomMaintenanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIDeleteRoomMaintenanceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteRoomMaintenanceExecute(r)
}

/*
DeleteRoomMaintenance Delete the maintenances for rooms

Use this API to delete maintenances from rooms. <p><strong>OperationId:</strong>deleteRoomMaintenance</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mainteananceId
 @param hotelId
 @return HousekeepingAPIDeleteRoomMaintenanceRequest
*/
func (a *HousekeepingAPIService) DeleteRoomMaintenance(ctx context.Context, mainteananceId string, hotelId string) HousekeepingAPIDeleteRoomMaintenanceRequest {
	return HousekeepingAPIDeleteRoomMaintenanceRequest{
		ApiService: a,
		ctx: ctx,
		mainteananceId: mainteananceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) DeleteRoomMaintenanceExecute(r HousekeepingAPIDeleteRoomMaintenanceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.DeleteRoomMaintenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/maintenances/{mainteananceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"mainteananceId"+"}", url.PathEscape(parameterValueToString(r.mainteananceId, "mainteananceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.mainteananceId) < 1 {
		return localVarReturnValue, nil, reportError("mainteananceId must have at least 1 elements")
	}
	if strlen(r.mainteananceId) > 2000 {
		return localVarReturnValue, nil, reportError("mainteananceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIDeleteTaskSheetRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	sheetNumber *int32
	taskCodes *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	date *string
	xExternalsystem *string
	acceptLanguage *string
}

// The Task Sheet number. This will be a sequential number for the task sheets generated for a particular Task Code.
func (r HousekeepingAPIDeleteTaskSheetRequest) SheetNumber(sheetNumber int32) HousekeepingAPIDeleteTaskSheetRequest {
	r.sheetNumber = &sheetNumber
	return r
}

// The Code for the task.
func (r HousekeepingAPIDeleteTaskSheetRequest) TaskCodes(taskCodes []string) HousekeepingAPIDeleteTaskSheetRequest {
	r.taskCodes = &taskCodes
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIDeleteTaskSheetRequest) Authorization(authorization string) HousekeepingAPIDeleteTaskSheetRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIDeleteTaskSheetRequest) XAppKey(xAppKey string) HousekeepingAPIDeleteTaskSheetRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIDeleteTaskSheetRequest) XHotelid(xHotelid string) HousekeepingAPIDeleteTaskSheetRequest {
	r.xHotelid = &xHotelid
	return r
}

// The date for which the task sheet applies.
func (r HousekeepingAPIDeleteTaskSheetRequest) Date(date string) HousekeepingAPIDeleteTaskSheetRequest {
	r.date = &date
	return r
}

// External system code.
func (r HousekeepingAPIDeleteTaskSheetRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIDeleteTaskSheetRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIDeleteTaskSheetRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIDeleteTaskSheetRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIDeleteTaskSheetRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteTaskSheetExecute(r)
}

/*
DeleteTaskSheet Delete the task sheet

This API allows you to delete the task sheet. <p><strong>OperationId:</strong>deleteTaskSheet</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIDeleteTaskSheetRequest
*/
func (a *HousekeepingAPIService) DeleteTaskSheet(ctx context.Context, hotelId string) HousekeepingAPIDeleteTaskSheetRequest {
	return HousekeepingAPIDeleteTaskSheetRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) DeleteTaskSheetExecute(r HousekeepingAPIDeleteTaskSheetRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.DeleteTaskSheet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "sheetNumber", r.sheetNumber, "")
	{
		t := *r.taskCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", t, "multi")
		}
	}
	if r.date != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIDeleteTaskSheetRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	sheetNumber *int32
	taskCodes *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	date *string
	roomId *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// The Task Sheet number. This will be a sequential number for the task sheets generated for a particular Task Code.
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) SheetNumber(sheetNumber int32) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.sheetNumber = &sheetNumber
	return r
}

// The Code for the task.
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) TaskCodes(taskCodes []string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.taskCodes = &taskCodes
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) Authorization(authorization string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// The date for which the task sheet applies.
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) Date(date string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.date = &date
	return r
}

// Code of the room.
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) RoomId(roomId []string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.roomId = &roomId
	return r
}

// External system code.
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIDeleteTaskSheetRoomsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteTaskSheetRoomsExecute(r)
}

/*
DeleteTaskSheetRooms Delete task sheet rooms

This API allows you to delete task sheet rooms. <p><strong>OperationId:</strong>deleteTaskSheetRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIDeleteTaskSheetRoomsRequest
*/
func (a *HousekeepingAPIService) DeleteTaskSheetRooms(ctx context.Context, hotelId string) HousekeepingAPIDeleteTaskSheetRoomsRequest {
	return HousekeepingAPIDeleteTaskSheetRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) DeleteTaskSheetRoomsExecute(r HousekeepingAPIDeleteTaskSheetRoomsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.DeleteTaskSheetRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/rooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "sheetNumber", r.sheetNumber, "")
	{
		t := *r.taskCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", t, "multi")
		}
	}
	if r.date != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "")
  }
	if r.roomId != nil {
		t := *r.roomId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIDeleteTaskSheetTemplateRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	taskSheetTemplateCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIDeleteTaskSheetTemplateRequest) Authorization(authorization string) HousekeepingAPIDeleteTaskSheetTemplateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIDeleteTaskSheetTemplateRequest) XAppKey(xAppKey string) HousekeepingAPIDeleteTaskSheetTemplateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIDeleteTaskSheetTemplateRequest) XHotelid(xHotelid string) HousekeepingAPIDeleteTaskSheetTemplateRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r HousekeepingAPIDeleteTaskSheetTemplateRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIDeleteTaskSheetTemplateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIDeleteTaskSheetTemplateRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIDeleteTaskSheetTemplateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIDeleteTaskSheetTemplateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteTaskSheetTemplateExecute(r)
}

/*
DeleteTaskSheetTemplate Delete task sheet templates

This API allows you to delete task sheet templates. <p><strong>OperationId:</strong>deleteTaskSheetTemplate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskSheetTemplateCode
 @param hotelId
 @return HousekeepingAPIDeleteTaskSheetTemplateRequest
*/
func (a *HousekeepingAPIService) DeleteTaskSheetTemplate(ctx context.Context, taskSheetTemplateCode string, hotelId string) HousekeepingAPIDeleteTaskSheetTemplateRequest {
	return HousekeepingAPIDeleteTaskSheetTemplateRequest{
		ApiService: a,
		ctx: ctx,
		taskSheetTemplateCode: taskSheetTemplateCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) DeleteTaskSheetTemplateExecute(r HousekeepingAPIDeleteTaskSheetTemplateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.DeleteTaskSheetTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheetTemplates/{taskSheetTemplateCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskSheetTemplateCode"+"}", url.PathEscape(parameterValueToString(r.taskSheetTemplateCode, "taskSheetTemplateCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.taskSheetTemplateCode) < 1 {
		return localVarReturnValue, nil, reportError("taskSheetTemplateCode must have at least 1 elements")
	}
	if strlen(r.taskSheetTemplateCode) > 2000 {
		return localVarReturnValue, nil, reportError("taskSheetTemplateCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIEditReservationHousekeepingTasksRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	schedule *Schedule
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIEditReservationHousekeepingTasksRequest) Authorization(authorization string) HousekeepingAPIEditReservationHousekeepingTasksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIEditReservationHousekeepingTasksRequest) XAppKey(xAppKey string) HousekeepingAPIEditReservationHousekeepingTasksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIEditReservationHousekeepingTasksRequest) XHotelid(xHotelid string) HousekeepingAPIEditReservationHousekeepingTasksRequest {
	r.xHotelid = &xHotelid
	return r
}

// A schedule with task(s) to be edited for the given reservation.
func (r HousekeepingAPIEditReservationHousekeepingTasksRequest) Schedule(schedule Schedule) HousekeepingAPIEditReservationHousekeepingTasksRequest {
	r.schedule = &schedule
	return r
}

// External system code.
func (r HousekeepingAPIEditReservationHousekeepingTasksRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIEditReservationHousekeepingTasksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIEditReservationHousekeepingTasksRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIEditReservationHousekeepingTasksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIEditReservationHousekeepingTasksRequest) Execute() (*Schedule, *http.Response, error) {
	return r.ApiService.EditReservationHousekeepingTasksExecute(r)
}

/*
EditReservationHousekeepingTasks Update reservation housekeeping tasks

This API will allow you to update reservation housekeeping tasks. <p><strong>OperationId:</strong>editReservationHousekeepingTasks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPIEditReservationHousekeepingTasksRequest
*/
func (a *HousekeepingAPIService) EditReservationHousekeepingTasks(ctx context.Context, reservationId string, hotelId string) HousekeepingAPIEditReservationHousekeepingTasksRequest {
	return HousekeepingAPIEditReservationHousekeepingTasksRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Schedule
func (a *HousekeepingAPIService) EditReservationHousekeepingTasksExecute(r HousekeepingAPIEditReservationHousekeepingTasksRequest) (*Schedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Schedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.EditReservationHousekeepingTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.schedule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIEndServiceBreakRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	taskSheetNumber string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskRoom *TaskRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIEndServiceBreakRequest) Authorization(authorization string) HousekeepingAPIEndServiceBreakRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIEndServiceBreakRequest) XAppKey(xAppKey string) HousekeepingAPIEndServiceBreakRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIEndServiceBreakRequest) XHotelid(xHotelid string) HousekeepingAPIEndServiceBreakRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to end service break.
func (r HousekeepingAPIEndServiceBreakRequest) TaskRoom(taskRoom TaskRoom) HousekeepingAPIEndServiceBreakRequest {
	r.taskRoom = &taskRoom
	return r
}

// External system code.
func (r HousekeepingAPIEndServiceBreakRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIEndServiceBreakRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIEndServiceBreakRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIEndServiceBreakRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIEndServiceBreakRequest) Execute() (*EndedServiceBreak, *http.Response, error) {
	return r.ApiService.EndServiceBreakExecute(r)
}

/*
EndServiceBreak End the service break

This API allows you to end the Attendant's service break. <p><strong>OperationId:</strong>endServiceBreak</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskSheetNumber
 @param hotelId
 @return HousekeepingAPIEndServiceBreakRequest
*/
func (a *HousekeepingAPIService) EndServiceBreak(ctx context.Context, taskSheetNumber string, hotelId string) HousekeepingAPIEndServiceBreakRequest {
	return HousekeepingAPIEndServiceBreakRequest{
		ApiService: a,
		ctx: ctx,
		taskSheetNumber: taskSheetNumber,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return EndedServiceBreak
func (a *HousekeepingAPIService) EndServiceBreakExecute(r HousekeepingAPIEndServiceBreakRequest) (*EndedServiceBreak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EndedServiceBreak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.EndServiceBreak")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/{taskSheetNumber}/end"
	localVarPath = strings.Replace(localVarPath, "{"+"taskSheetNumber"+"}", url.PathEscape(parameterValueToString(r.taskSheetNumber, "taskSheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.taskSheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("taskSheetNumber must have at least 1 elements")
	}
	if strlen(r.taskSheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("taskSheetNumber must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetFacilityForecastRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	startDate *string
	endDate *string
	duration *string
	codes *[]string
	usePriority *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetFacilityForecastRequest) Authorization(authorization string) HousekeepingAPIGetFacilityForecastRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetFacilityForecastRequest) XAppKey(xAppKey string) HousekeepingAPIGetFacilityForecastRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetFacilityForecastRequest) XHotelid(xHotelid string) HousekeepingAPIGetFacilityForecastRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r HousekeepingAPIGetFacilityForecastRequest) StartDate(startDate string) HousekeepingAPIGetFacilityForecastRequest {
	r.startDate = &startDate
	return r
}

func (r HousekeepingAPIGetFacilityForecastRequest) EndDate(endDate string) HousekeepingAPIGetFacilityForecastRequest {
	r.endDate = &endDate
	return r
}

func (r HousekeepingAPIGetFacilityForecastRequest) Duration(duration string) HousekeepingAPIGetFacilityForecastRequest {
	r.duration = &duration
	return r
}

func (r HousekeepingAPIGetFacilityForecastRequest) Codes(codes []string) HousekeepingAPIGetFacilityForecastRequest {
	r.codes = &codes
	return r
}

// .
func (r HousekeepingAPIGetFacilityForecastRequest) UsePriority(usePriority bool) HousekeepingAPIGetFacilityForecastRequest {
	r.usePriority = &usePriority
	return r
}

// External system code.
func (r HousekeepingAPIGetFacilityForecastRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetFacilityForecastRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetFacilityForecastRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetFacilityForecastRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetFacilityForecastRequest) Execute() (*FacilityForecast, *http.Response, error) {
	return r.ApiService.GetFacilityForecastExecute(r)
}

/*
GetFacilityForecast Get facility forecast

This API will allow you to get facility forecast for Housekeeping attendants and tasks for a current or future start date . <p><strong>OperationId:</strong>getFacilityForecast</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIGetFacilityForecastRequest
*/
func (a *HousekeepingAPIService) GetFacilityForecast(ctx context.Context, hotelId string) HousekeepingAPIGetFacilityForecastRequest {
	return HousekeepingAPIGetFacilityForecastRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FacilityForecast
func (a *HousekeepingAPIService) GetFacilityForecastExecute(r HousekeepingAPIGetFacilityForecastRequest) (*FacilityForecast, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FacilityForecast
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetFacilityForecast")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/forecastTaskSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
  }
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "Codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "Codes", t, "multi")
		}
  }
	if r.usePriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "usePriority", r.usePriority, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetGuestHousekeepingNotesRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationIdContext *string
	reservationIdType *string
	room *string
	housekeepingInstruction *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) Authorization(authorization string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) XAppKey(xAppKey string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) XHotelid(xHotelid string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) ReservationIdContext(reservationIdContext string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.reservationIdContext = &reservationIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) ReservationIdType(reservationIdType string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// Room to which housekeeping record belongs.
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) Room(room string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.room = &room
	return r
}

// Simple type for housekeeping instructions that can be used in requests for partial operations.
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) HousekeepingInstruction(housekeepingInstruction []string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.housekeepingInstruction = &housekeepingInstruction
	return r
}

// External system code.
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetGuestHousekeepingNotesRequest) Execute() (*GuestHousekeepingInstructions, *http.Response, error) {
	return r.ApiService.GetGuestHousekeepingNotesExecute(r)
}

/*
GetGuestHousekeepingNotes Get the guest housekeeping instructions

This API will allow you to get the guest housekeeping instructions. <p><strong>OperationId:</strong>getGuestHousekeepingNotes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPIGetGuestHousekeepingNotesRequest
*/
func (a *HousekeepingAPIService) GetGuestHousekeepingNotes(ctx context.Context, reservationId string, hotelId string) HousekeepingAPIGetGuestHousekeepingNotesRequest {
	return HousekeepingAPIGetGuestHousekeepingNotesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GuestHousekeepingInstructions
func (a *HousekeepingAPIService) GetGuestHousekeepingNotesExecute(r HousekeepingAPIGetGuestHousekeepingNotesRequest) (*GuestHousekeepingInstructions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GuestHousekeepingInstructions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetGuestHousekeepingNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingNotes"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.reservationIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdContext", r.reservationIdContext, "")
  }
	if r.reservationIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", r.reservationIdType, "")
  }
	if r.room != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "room", r.room, "")
  }
	if r.housekeepingInstruction != nil {
		t := *r.housekeepingInstruction
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingInstruction", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingInstruction", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetHouseKeepingTasksRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	taskDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	attendantInRoomOnly *bool
	generateCleaningSequence *bool
	includeReservationInfo *bool
	includeTaskSheetDetails *bool
	includeTaskSheetsSummary *bool
	sortByCleaningSequence *bool
	taskCodes *[]string
	taskHotelCodes *[]string
	taskSequences *[]int32
	taskDescriptions *[]string
	taskInstructions *[]string
	facilityDepartureTask *[]bool
	linenChange *[]bool
	taskCodesBreakOutId *string
	taskCodesBreakOutIdContext *string
	taskCodesBreakOutIdType *string
	attendantId *string
	taskSheetNumber *[]int32
	housekeepingRoomStatus *[]string
	guestService *[]string
	roomStatusToChange *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Date for which the Task Assignment information is required.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskDate(taskDate string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskDate = &taskDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetHouseKeepingTasksRequest) Authorization(authorization string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetHouseKeepingTasksRequest) XAppKey(xAppKey string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetHouseKeepingTasksRequest) XHotelid(xHotelid string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.xHotelid = &xHotelid
	return r
}

// Query only rooms with attendant working in them.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) AttendantInRoomOnly(attendantInRoomOnly bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.attendantInRoomOnly = &attendantInRoomOnly
	return r
}

// Setting this to true will generate a sequence based on the current condition of the room for cleaning. This sequence would be the same sequence with which the Task Companion works.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) GenerateCleaningSequence(generateCleaningSequence bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.generateCleaningSequence = &generateCleaningSequence
	return r
}

// Setting this to true will include reservation information associated to the room.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) IncludeReservationInfo(includeReservationInfo bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.includeReservationInfo = &includeReservationInfo
	return r
}

// This will include room details for the Task Sheets. If summary information is only required, then this could be set to false. If a Task Sheet Number is included in the Search and this flag is set to true, then the details for that particular Task Sheet will be returned. For all other task sheets, the IncludeTaskSheetsSummary will determine if Summary details are required or not.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) IncludeTaskSheetDetails(includeTaskSheetDetails bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.includeTaskSheetDetails = &includeTaskSheetDetails
	return r
}

// Setting this to true, will return Summary information for the task sheets required. If a Task Sheet Number is included in the Search and IncludeTaskSheetDetails is set to false and IncludeTaskSheetsSummary is false, then only the Summary information for that particular task sheet will be returned. IncludeTaskSheetDetails &#x3D; True, IncludeTaskSheetsSummary &#x3D; True : includes all task sheets details and summary IncludeTaskSheetDetails &#x3D; false, IncludeTaskSheetsSummary &#x3D; True : includes only summary IncludeTaskSheetDetails &#x3D; false, IncludeTaskSheetsSummary &#x3D; false, Task Sheet No &#x3D;null : no task sheet detail or summary for any of the tasksheets. Returns the Task Assignnment header. IncludeTaskSheetDetails &#x3D; True, IncludeTaskSheetsSummary &#x3D; True, Task Sheet No &#x3D; XX : includes task sheets detail for XX and summary for others. IncludeTaskSheetDetails &#x3D; false, IncludeTaskSheetsSummary &#x3D; True, Task Sheet No &#x3D; XX : includes summary for all including XX. IncludeTaskSheetDetails &#x3D; false, IncludeTaskSheetsSummary &#x3D; false, Task Sheet No &#x3D; XX : includes summary for XX. No information for others.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) IncludeTaskSheetsSummary(includeTaskSheetsSummary bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.includeTaskSheetsSummary = &includeTaskSheetsSummary
	return r
}

// The rooms in the task sheet would be sorted with the cleaning sequence. The normal sort would be done based on the Default Sequence.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) SortByCleaningSequence(sortByCleaningSequence bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.sortByCleaningSequence = &sortByCleaningSequence
	return r
}

// The Code for the task.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskCodes(taskCodes []string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskCodes = &taskCodes
	return r
}

// Property for which the Task Assignment information is required.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskHotelCodes(taskHotelCodes []string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskHotelCodes = &taskHotelCodes
	return r
}

// Ordering sequence for display.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskSequences(taskSequences []int32) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskSequences = &taskSequences
	return r
}

// Description of the Task Code.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskDescriptions(taskDescriptions []string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskDescriptions = &taskDescriptions
	return r
}

// Instructions for this Task Code.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskInstructions(taskInstructions []string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskInstructions = &taskInstructions
	return r
}

// Indicates if this task code is the default departure task for Facility Tasks. This requires
func (r HousekeepingAPIGetHouseKeepingTasksRequest) FacilityDepartureTask(facilityDepartureTask []bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.facilityDepartureTask = &facilityDepartureTask
	return r
}

// Indicates if a linen change is necessary.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) LinenChange(linenChange []bool) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.linenChange = &linenChange
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskCodesBreakOutId(taskCodesBreakOutId string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskCodesBreakOutId = &taskCodesBreakOutId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskCodesBreakOutIdContext(taskCodesBreakOutIdContext string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskCodesBreakOutIdContext = &taskCodesBreakOutIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskCodesBreakOutIdType(taskCodesBreakOutIdType string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskCodesBreakOutIdType = &taskCodesBreakOutIdType
	return r
}

// Attendant ID for which the Task Sheets are assigned.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) AttendantId(attendantId string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.attendantId = &attendantId
	return r
}

// Specific Task Sheet number for which the information is required.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) TaskSheetNumber(taskSheetNumber []int32) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.taskSheetNumber = &taskSheetNumber
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) HousekeepingRoomStatus(housekeepingRoomStatus []string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.housekeepingRoomStatus = &housekeepingRoomStatus
	return r
}

// Possible values for the Guest Service Status.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) GuestService(guestService []string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.guestService = &guestService
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) RoomStatusToChange(roomStatusToChange []string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.roomStatusToChange = &roomStatusToChange
	return r
}

// External system code.
func (r HousekeepingAPIGetHouseKeepingTasksRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetHouseKeepingTasksRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetHouseKeepingTasksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetHouseKeepingTasksRequest) Execute() (*TaskAssignment, *http.Response, error) {
	return r.ApiService.GetHouseKeepingTasksExecute(r)
}

/*
GetHouseKeepingTasks Get the existing task sheets

This API will allow you to get the existing task sheets. <p><strong>OperationId:</strong>getHouseKeepingTasks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIGetHouseKeepingTasksRequest
*/
func (a *HousekeepingAPIService) GetHouseKeepingTasks(ctx context.Context, hotelId string) HousekeepingAPIGetHouseKeepingTasksRequest {
	return HousekeepingAPIGetHouseKeepingTasksRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return TaskAssignment
func (a *HousekeepingAPIService) GetHouseKeepingTasksExecute(r HousekeepingAPIGetHouseKeepingTasksRequest) (*TaskAssignment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetHouseKeepingTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/houseKeepingtasks"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "taskDate", r.taskDate, "")
	if r.attendantInRoomOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attendantInRoomOnly", r.attendantInRoomOnly, "")
  }
	if r.generateCleaningSequence != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "generateCleaningSequence", r.generateCleaningSequence, "")
  }
	if r.includeReservationInfo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeReservationInfo", r.includeReservationInfo, "")
  }
	if r.includeTaskSheetDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTaskSheetDetails", r.includeTaskSheetDetails, "")
  }
	if r.includeTaskSheetsSummary != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTaskSheetsSummary", r.includeTaskSheetsSummary, "")
  }
	if r.sortByCleaningSequence != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortByCleaningSequence", r.sortByCleaningSequence, "")
  }
	if r.taskCodes != nil {
		t := *r.taskCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", t, "multi")
		}
  }
	if r.taskHotelCodes != nil {
		t := *r.taskHotelCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskHotelCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskHotelCodes", t, "multi")
		}
  }
	if r.taskSequences != nil {
		t := *r.taskSequences
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskSequences", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskSequences", t, "multi")
		}
  }
	if r.taskDescriptions != nil {
		t := *r.taskDescriptions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskDescriptions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskDescriptions", t, "multi")
		}
  }
	if r.taskInstructions != nil {
		t := *r.taskInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskInstructions", t, "multi")
		}
  }
	if r.facilityDepartureTask != nil {
		t := *r.facilityDepartureTask
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "facilityDepartureTask", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "facilityDepartureTask", t, "multi")
		}
  }
	if r.linenChange != nil {
		t := *r.linenChange
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "linenChange", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "linenChange", t, "multi")
		}
  }
	if r.taskCodesBreakOutId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodesBreakOutId", r.taskCodesBreakOutId, "")
  }
	if r.taskCodesBreakOutIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodesBreakOutIdContext", r.taskCodesBreakOutIdContext, "")
  }
	if r.taskCodesBreakOutIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodesBreakOutIdType", r.taskCodesBreakOutIdType, "")
  }
	if r.attendantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attendantId", r.attendantId, "")
  }
	if r.taskSheetNumber != nil {
		t := *r.taskSheetNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskSheetNumber", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskSheetNumber", t, "multi")
		}
  }
	if r.housekeepingRoomStatus != nil {
		t := *r.housekeepingRoomStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatus", t, "multi")
		}
  }
	if r.guestService != nil {
		t := *r.guestService
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "guestService", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "guestService", t, "multi")
		}
  }
	if r.roomStatusToChange != nil {
		t := *r.roomStatusToChange
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomStatusToChange", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomStatusToChange", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetHousekeepingAttendantsScheduleRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	scheduleStartDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	scheduleEndDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// The starting value of the date range.
func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) ScheduleStartDate(scheduleStartDate string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	r.scheduleStartDate = &scheduleStartDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) Authorization(authorization string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) XAppKey(xAppKey string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) XHotelid(xHotelid string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// The ending value of the date range.
func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) ScheduleEndDate(scheduleEndDate string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	r.scheduleEndDate = &scheduleEndDate
	return r
}

// External system code.
func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) Execute() (*AttendantSchedule, *http.Response, error) {
	return r.ApiService.GetHousekeepingAttendantsScheduleExecute(r)
}

/*
GetHousekeepingAttendantsSchedule Get the housekeeping attendants schedule

This API will allow you to get the housekeeping attendants schedule. <p><strong>OperationId:</strong>getHousekeepingAttendantsSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIGetHousekeepingAttendantsScheduleRequest
*/
func (a *HousekeepingAPIService) GetHousekeepingAttendantsSchedule(ctx context.Context, hotelId string) HousekeepingAPIGetHousekeepingAttendantsScheduleRequest {
	return HousekeepingAPIGetHousekeepingAttendantsScheduleRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return AttendantSchedule
func (a *HousekeepingAPIService) GetHousekeepingAttendantsScheduleExecute(r HousekeepingAPIGetHousekeepingAttendantsScheduleRequest) (*AttendantSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AttendantSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetHousekeepingAttendantsSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/attendants/houseKeepingTasks"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "scheduleStartDate", r.scheduleStartDate, "")
	if r.scheduleEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scheduleEndDate", r.scheduleEndDate, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetHousekeepingDiscrepanciesRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomDiscrepancyStatus *[]string
	fromRoomNumber *string
	toRoomNumber *string
	roomClass *[]string
	housekeepingEndDate *string
	housekeepingStartDate *string
	floor *[]string
	dueOut *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) Authorization(authorization string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) XAppKey(xAppKey string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) XHotelid(xHotelid string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Simple type for discrepant room status instructions to be used in requests for fetching housekeeping and front office room discrepancy. Valid values are Sleep, Skip, Person Discrepancy, Due Out Only.
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) RoomDiscrepancyStatus(roomDiscrepancyStatus []string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.roomDiscrepancyStatus = &roomDiscrepancyStatus
	return r
}

func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) FromRoomNumber(fromRoomNumber string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.fromRoomNumber = &fromRoomNumber
	return r
}

func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) ToRoomNumber(toRoomNumber string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.toRoomNumber = &toRoomNumber
	return r
}

// Room Class of the Room.
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) RoomClass(roomClass []string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.roomClass = &roomClass
	return r
}

// The ending value of the date range.
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) HousekeepingEndDate(housekeepingEndDate string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.housekeepingEndDate = &housekeepingEndDate
	return r
}

// The starting value of the date range.
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) HousekeepingStartDate(housekeepingStartDate string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.housekeepingStartDate = &housekeepingStartDate
	return r
}

// The floor of room to be fetched.
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) Floor(floor []string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.floor = &floor
	return r
}

// List the rooms based on the flag DUE OUT for departure only.
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) DueOut(dueOut bool) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.dueOut = &dueOut
	return r
}

// External system code.
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) Execute() (*Rooms, *http.Response, error) {
	return r.ApiService.GetHousekeepingDiscrepanciesExecute(r)
}

/*
GetHousekeepingDiscrepancies Get hotel housekeeping discrepant rooms

Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIGetHousekeepingDiscrepanciesRequest
*/
func (a *HousekeepingAPIService) GetHousekeepingDiscrepancies(ctx context.Context, hotelId string) HousekeepingAPIGetHousekeepingDiscrepanciesRequest {
	return HousekeepingAPIGetHousekeepingDiscrepanciesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Rooms
func (a *HousekeepingAPIService) GetHousekeepingDiscrepanciesExecute(r HousekeepingAPIGetHousekeepingDiscrepanciesRequest) (*Rooms, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rooms
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetHousekeepingDiscrepancies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/housekeepingDiscrepancies"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.roomDiscrepancyStatus != nil {
		t := *r.roomDiscrepancyStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomDiscrepancyStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomDiscrepancyStatus", t, "multi")
		}
  }
	if r.fromRoomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoomNumber", r.fromRoomNumber, "")
  }
	if r.toRoomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoomNumber", r.toRoomNumber, "")
  }
	if r.roomClass != nil {
		t := *r.roomClass
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", t, "multi")
		}
  }
	if r.housekeepingEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingEndDate", r.housekeepingEndDate, "")
  }
	if r.housekeepingStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingStartDate", r.housekeepingStartDate, "")
  }
	if r.floor != nil {
		t := *r.floor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "floor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "floor", t, "multi")
		}
  }
	if r.dueOut != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dueOut", r.dueOut, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetHousekeepingOverviewRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	housekeepingRoomStatus *[]string
	frontOfficeRoomStatus *[]string
	turndownStatus *[]string
	roomParityStatus *[]string
	serviceRequestStatus *[]string
	roomAssignmentStatus *[]string
	fetchInstructions *[]string
	fromRoomNumber *string
	toRoomNumber *string
	floor *[]string
	roomType *[]string
	roomClass *[]string
	building *[]string
	roomFeatures *[]string
	daySection *[]string
	eveningSection *[]string
	reservationStatus *[]string
	guestServiceRequest *string
	roomIdText *string
	excludeCombo *bool
	cleaningPriorityOnly *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetHousekeepingOverviewRequest) Authorization(authorization string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetHousekeepingOverviewRequest) XAppKey(xAppKey string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetHousekeepingOverviewRequest) XHotelid(xHotelid string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) Limit(limit int32) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) Offset(offset int32) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.offset = &offset
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) HousekeepingRoomStatus(housekeepingRoomStatus []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.housekeepingRoomStatus = &housekeepingRoomStatus
	return r
}

// Simple type for front office room status instructions to be used in requests for fetching housekeeping rooms. Valid values are Vacant and Occupied.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) FrontOfficeRoomStatus(frontOfficeRoomStatus []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.frontOfficeRoomStatus = &frontOfficeRoomStatus
	return r
}

// Simple type for turndown status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Required, Not Required and Completed.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) TurndownStatus(turndownStatus []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.turndownStatus = &turndownStatus
	return r
}

// Simple type for room parity instructions to be used in requests for fetching housekeeping rooms. Valid status values are Odd and Even.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) RoomParityStatus(roomParityStatus []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.roomParityStatus = &roomParityStatus
	return r
}

func (r HousekeepingAPIGetHousekeepingOverviewRequest) ServiceRequestStatus(serviceRequestStatus []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.serviceRequestStatus = &serviceRequestStatus
	return r
}

func (r HousekeepingAPIGetHousekeepingOverviewRequest) RoomAssignmentStatus(roomAssignmentStatus []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.roomAssignmentStatus = &roomAssignmentStatus
	return r
}

// Simple type for housekeeping instructions that can be used in requests for partial operations.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) FetchInstructions(fetchInstructions []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

func (r HousekeepingAPIGetHousekeepingOverviewRequest) FromRoomNumber(fromRoomNumber string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.fromRoomNumber = &fromRoomNumber
	return r
}

func (r HousekeepingAPIGetHousekeepingOverviewRequest) ToRoomNumber(toRoomNumber string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.toRoomNumber = &toRoomNumber
	return r
}

// The floor of room to be fetched.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) Floor(floor []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.floor = &floor
	return r
}

// Room Type of the Room.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) RoomType(roomType []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.roomType = &roomType
	return r
}

// Room Class of the Room.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) RoomClass(roomClass []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.roomClass = &roomClass
	return r
}

// Building of the Room.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) Building(building []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.building = &building
	return r
}

// Features of the Room.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) RoomFeatures(roomFeatures []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.roomFeatures = &roomFeatures
	return r
}

// AM Sections of the Room.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) DaySection(daySection []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.daySection = &daySection
	return r
}

// PM Sections of the Room.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) EveningSection(eveningSection []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.eveningSection = &eveningSection
	return r
}

// The status of the reservation to which this Room is assigned.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) ReservationStatus(reservationStatus []string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.reservationStatus = &reservationStatus
	return r
}

// Possible values for the Guest Service Status.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) GuestServiceRequest(guestServiceRequest string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.guestServiceRequest = &guestServiceRequest
	return r
}

// Wild Card entry for Room numbers to be Fetched.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) RoomIdText(roomIdText string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.roomIdText = &roomIdText
	return r
}

// Indicates we need to exclude the combo rooms while fetching the housekeeping details.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) ExcludeCombo(excludeCombo bool) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.excludeCombo = &excludeCombo
	return r
}

// Determines whether fetching cleaning priority rooms only.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) CleaningPriorityOnly(cleaningPriorityOnly bool) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.cleaningPriorityOnly = &cleaningPriorityOnly
	return r
}

// External system code.
func (r HousekeepingAPIGetHousekeepingOverviewRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetHousekeepingOverviewRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetHousekeepingOverviewRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetHousekeepingOverviewRequest) Execute() (*HousekeepingBoard, *http.Response, error) {
	return r.ApiService.GetHousekeepingOverviewExecute(r)
}

/*
GetHousekeepingOverview Get housekeeping rooms overview

Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code for which Housekeeping overview needs to be fetched
 @return HousekeepingAPIGetHousekeepingOverviewRequest
*/
func (a *HousekeepingAPIService) GetHousekeepingOverview(ctx context.Context, hotelId string) HousekeepingAPIGetHousekeepingOverviewRequest {
	return HousekeepingAPIGetHousekeepingOverviewRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return HousekeepingBoard
func (a *HousekeepingAPIService) GetHousekeepingOverviewExecute(r HousekeepingAPIGetHousekeepingOverviewRequest) (*HousekeepingBoard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HousekeepingBoard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetHousekeepingOverview")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/housekeepingOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.housekeepingRoomStatus != nil {
		t := *r.housekeepingRoomStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatus", t, "multi")
		}
  }
	if r.frontOfficeRoomStatus != nil {
		t := *r.frontOfficeRoomStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "frontOfficeRoomStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "frontOfficeRoomStatus", t, "multi")
		}
  }
	if r.turndownStatus != nil {
		t := *r.turndownStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "turndownStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "turndownStatus", t, "multi")
		}
  }
	if r.roomParityStatus != nil {
		t := *r.roomParityStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomParityStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomParityStatus", t, "multi")
		}
  }
	if r.serviceRequestStatus != nil {
		t := *r.serviceRequestStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "serviceRequestStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "serviceRequestStatus", t, "multi")
		}
  }
	if r.roomAssignmentStatus != nil {
		t := *r.roomAssignmentStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomAssignmentStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomAssignmentStatus", t, "multi")
		}
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	if r.fromRoomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoomNumber", r.fromRoomNumber, "")
  }
	if r.toRoomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoomNumber", r.toRoomNumber, "")
  }
	if r.floor != nil {
		t := *r.floor
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "floor", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "floor", t, "multi")
		}
  }
	if r.roomType != nil {
		t := *r.roomType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", t, "multi")
		}
  }
	if r.roomClass != nil {
		t := *r.roomClass
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClass", t, "multi")
		}
  }
	if r.building != nil {
		t := *r.building
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "building", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "building", t, "multi")
		}
  }
	if r.roomFeatures != nil {
		t := *r.roomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", t, "multi")
		}
  }
	if r.daySection != nil {
		t := *r.daySection
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "daySection", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "daySection", t, "multi")
		}
  }
	if r.eveningSection != nil {
		t := *r.eveningSection
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "eveningSection", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "eveningSection", t, "multi")
		}
  }
	if r.reservationStatus != nil {
		t := *r.reservationStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", t, "multi")
		}
  }
	if r.guestServiceRequest != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "guestServiceRequest", r.guestServiceRequest, "")
  }
	if r.roomIdText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomIdText", r.roomIdText, "")
  }
	if r.excludeCombo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeCombo", r.excludeCombo, "")
  }
	if r.cleaningPriorityOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cleaningPriorityOnly", r.cleaningPriorityOnly, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetOutOfOrderRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	startDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomId *string
	endDate *string
	roomTypes *[]string
	roomClasses *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// The start date for which the out of order / out of service rooms are to be fetched.
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) StartDate(startDate string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.startDate = &startDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) Authorization(authorization string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// From this Room number onwards to be Fetched.
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) RoomId(roomId string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.roomId = &roomId
	return r
}

// The end date for which the out of order / out of service rooms are to be fetched.
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) EndDate(endDate string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.endDate = &endDate
	return r
}

// The room type of out of order / out of service rooms to be fetched.
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) RoomTypes(roomTypes []string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.roomTypes = &roomTypes
	return r
}

// The room class of out of order / out of service rooms to be fetched.
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) RoomClasses(roomClasses []string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.roomClasses = &roomClasses
	return r
}

// External system code.
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetOutOfOrderRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetOutOfOrderRoomsRequest) Execute() (*Rooms, *http.Response, error) {
	return r.ApiService.GetOutOfOrderRoomsExecute(r)
}

/*
GetOutOfOrderRooms Get Out of Order Rooms

Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code for which Out Of Order rooms needs to be fetched.
 @return HousekeepingAPIGetOutOfOrderRoomsRequest
*/
func (a *HousekeepingAPIService) GetOutOfOrderRooms(ctx context.Context, hotelId string) HousekeepingAPIGetOutOfOrderRoomsRequest {
	return HousekeepingAPIGetOutOfOrderRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Rooms
func (a *HousekeepingAPIService) GetOutOfOrderRoomsExecute(r HousekeepingAPIGetOutOfOrderRoomsRequest) (*Rooms, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rooms
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetOutOfOrderRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/outOfOrderRooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.roomTypes != nil {
		t := *r.roomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", t, "multi")
		}
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetOutOfServiceRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	startDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomId *string
	endDate *string
	roomTypes *[]string
	roomClasses *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// The start date for which the out of order / out of service rooms are to be fetched.
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) StartDate(startDate string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.startDate = &startDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) Authorization(authorization string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// From this Room number onwards to be Fetched.
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) RoomId(roomId string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.roomId = &roomId
	return r
}

// The end date for which the out of order / out of service rooms are to be fetched.
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) EndDate(endDate string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.endDate = &endDate
	return r
}

// The room type of out of order / out of service rooms to be fetched.
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) RoomTypes(roomTypes []string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.roomTypes = &roomTypes
	return r
}

// The room class of out of order / out of service rooms to be fetched.
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) RoomClasses(roomClasses []string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.roomClasses = &roomClasses
	return r
}

// External system code.
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetOutOfServiceRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetOutOfServiceRoomsRequest) Execute() (*Rooms, *http.Response, error) {
	return r.ApiService.GetOutOfServiceRoomsExecute(r)
}

/*
GetOutOfServiceRooms Get Out of Service Rooms

Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code for which Out Of Service rooms needs to be fetched.
 @return HousekeepingAPIGetOutOfServiceRoomsRequest
*/
func (a *HousekeepingAPIService) GetOutOfServiceRooms(ctx context.Context, hotelId string) HousekeepingAPIGetOutOfServiceRoomsRequest {
	return HousekeepingAPIGetOutOfServiceRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Rooms
func (a *HousekeepingAPIService) GetOutOfServiceRoomsExecute(r HousekeepingAPIGetOutOfServiceRoomsRequest) (*Rooms, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rooms
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetOutOfServiceRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/outOfServiceRooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.roomTypes != nil {
		t := *r.roomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", t, "multi")
		}
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetReservationHousekeepingScheduleRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationIdContext *string
	reservationIdType *string
	beginDate *string
	endDate *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) Authorization(authorization string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) XAppKey(xAppKey string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) XHotelid(xHotelid string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) ReservationIdContext(reservationIdContext string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.reservationIdContext = &reservationIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) ReservationIdType(reservationIdType string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.reservationIdType = &reservationIdType
	return r
}

// Begin date from which to start fetching facility tasks.
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) BeginDate(beginDate string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.beginDate = &beginDate
	return r
}

// End date for facility task schedule request.
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) EndDate(endDate string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.endDate = &endDate
	return r
}

// Simple type for controlling the fetch operations of the housekeeping schedule request.
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) FetchInstructions(fetchInstructions []string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetReservationHousekeepingScheduleRequest) Execute() (*Schedule, *http.Response, error) {
	return r.ApiService.GetReservationHousekeepingScheduleExecute(r)
}

/*
GetReservationHousekeepingSchedule Get reservation housekeeping schedule

This API will allow you to get reservation housekeeping schedule. <p><strong>OperationId:</strong>getReservationHousekeepingSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPIGetReservationHousekeepingScheduleRequest
*/
func (a *HousekeepingAPIService) GetReservationHousekeepingSchedule(ctx context.Context, reservationId string, hotelId string) HousekeepingAPIGetReservationHousekeepingScheduleRequest {
	return HousekeepingAPIGetReservationHousekeepingScheduleRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Schedule
func (a *HousekeepingAPIService) GetReservationHousekeepingScheduleExecute(r HousekeepingAPIGetReservationHousekeepingScheduleRequest) (*Schedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Schedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetReservationHousekeepingSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.reservationIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdContext", r.reservationIdContext, "")
  }
	if r.reservationIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationIdType", r.reservationIdType, "")
  }
	if r.beginDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "beginDate", r.beginDate, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetRoomConditionsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomConditionsOnly *bool
	roomWithoutConditionsOnly *bool
	room *string
	fromRoomNumber *string
	toRoomNumber *string
	roomConditions *[]string
	roomTypes *[]string
	roomClasses *[]string
	frontOfficeRoomStatus *[]string
	reservationStatuses *[]string
	roomAssignmentStatus *[]string
	floors *[]string
	roomFeatures *[]string
	amSections *[]string
	pmSections *[]string
	buildings *[]string
	housekeepingRoomStatus *[]string
	roomParityStatus *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetRoomConditionsRequest) Authorization(authorization string) HousekeepingAPIGetRoomConditionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetRoomConditionsRequest) XAppKey(xAppKey string) HousekeepingAPIGetRoomConditionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetRoomConditionsRequest) XHotelid(xHotelid string) HousekeepingAPIGetRoomConditionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Include rooms with conditions only.
func (r HousekeepingAPIGetRoomConditionsRequest) RoomConditionsOnly(roomConditionsOnly bool) HousekeepingAPIGetRoomConditionsRequest {
	r.roomConditionsOnly = &roomConditionsOnly
	return r
}

// Include rooms without conditions only.
func (r HousekeepingAPIGetRoomConditionsRequest) RoomWithoutConditionsOnly(roomWithoutConditionsOnly bool) HousekeepingAPIGetRoomConditionsRequest {
	r.roomWithoutConditionsOnly = &roomWithoutConditionsOnly
	return r
}

// Identifier of the room.
func (r HousekeepingAPIGetRoomConditionsRequest) Room(room string) HousekeepingAPIGetRoomConditionsRequest {
	r.room = &room
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) FromRoomNumber(fromRoomNumber string) HousekeepingAPIGetRoomConditionsRequest {
	r.fromRoomNumber = &fromRoomNumber
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) ToRoomNumber(toRoomNumber string) HousekeepingAPIGetRoomConditionsRequest {
	r.toRoomNumber = &toRoomNumber
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) RoomConditions(roomConditions []string) HousekeepingAPIGetRoomConditionsRequest {
	r.roomConditions = &roomConditions
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) RoomTypes(roomTypes []string) HousekeepingAPIGetRoomConditionsRequest {
	r.roomTypes = &roomTypes
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) RoomClasses(roomClasses []string) HousekeepingAPIGetRoomConditionsRequest {
	r.roomClasses = &roomClasses
	return r
}

// Simple type for front office room status instructions to be used in requests for fetching housekeeping rooms. Valid values are Vacant and Occupied.
func (r HousekeepingAPIGetRoomConditionsRequest) FrontOfficeRoomStatus(frontOfficeRoomStatus []string) HousekeepingAPIGetRoomConditionsRequest {
	r.frontOfficeRoomStatus = &frontOfficeRoomStatus
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) ReservationStatuses(reservationStatuses []string) HousekeepingAPIGetRoomConditionsRequest {
	r.reservationStatuses = &reservationStatuses
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) RoomAssignmentStatus(roomAssignmentStatus []string) HousekeepingAPIGetRoomConditionsRequest {
	r.roomAssignmentStatus = &roomAssignmentStatus
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) Floors(floors []string) HousekeepingAPIGetRoomConditionsRequest {
	r.floors = &floors
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) RoomFeatures(roomFeatures []string) HousekeepingAPIGetRoomConditionsRequest {
	r.roomFeatures = &roomFeatures
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) AmSections(amSections []string) HousekeepingAPIGetRoomConditionsRequest {
	r.amSections = &amSections
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) PmSections(pmSections []string) HousekeepingAPIGetRoomConditionsRequest {
	r.pmSections = &pmSections
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) Buildings(buildings []string) HousekeepingAPIGetRoomConditionsRequest {
	r.buildings = &buildings
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r HousekeepingAPIGetRoomConditionsRequest) HousekeepingRoomStatus(housekeepingRoomStatus []string) HousekeepingAPIGetRoomConditionsRequest {
	r.housekeepingRoomStatus = &housekeepingRoomStatus
	return r
}

// Simple type for room parity instructions to be used in requests for fetching housekeeping rooms. Valid status values are Odd and Even.
func (r HousekeepingAPIGetRoomConditionsRequest) RoomParityStatus(roomParityStatus []string) HousekeepingAPIGetRoomConditionsRequest {
	r.roomParityStatus = &roomParityStatus
	return r
}

// External system code.
func (r HousekeepingAPIGetRoomConditionsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetRoomConditionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetRoomConditionsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetRoomConditionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetRoomConditionsRequest) Execute() (*Rooms, *http.Response, error) {
	return r.ApiService.GetRoomConditionsExecute(r)
}

/*
GetRoomConditions Get rooms condition

This API will allow you to get a list of rooms that have a condition set. <p><strong>OperationId:</strong>getRoomConditions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIGetRoomConditionsRequest
*/
func (a *HousekeepingAPIService) GetRoomConditions(ctx context.Context, hotelId string) HousekeepingAPIGetRoomConditionsRequest {
	return HousekeepingAPIGetRoomConditionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Rooms
func (a *HousekeepingAPIService) GetRoomConditionsExecute(r HousekeepingAPIGetRoomConditionsRequest) (*Rooms, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rooms
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetRoomConditions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/conditions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.roomConditionsOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomConditionsOnly", r.roomConditionsOnly, "")
  }
	if r.roomWithoutConditionsOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomWithoutConditionsOnly", r.roomWithoutConditionsOnly, "")
  }
	if r.room != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "room", r.room, "")
  }
	if r.fromRoomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoomNumber", r.fromRoomNumber, "")
  }
	if r.toRoomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoomNumber", r.toRoomNumber, "")
  }
	if r.roomConditions != nil {
		t := *r.roomConditions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomConditions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomConditions", t, "multi")
		}
  }
	if r.roomTypes != nil {
		t := *r.roomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", t, "multi")
		}
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	if r.frontOfficeRoomStatus != nil {
		t := *r.frontOfficeRoomStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "frontOfficeRoomStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "frontOfficeRoomStatus", t, "multi")
		}
  }
	if r.reservationStatuses != nil {
		t := *r.reservationStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatuses", t, "multi")
		}
  }
	if r.roomAssignmentStatus != nil {
		t := *r.roomAssignmentStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomAssignmentStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomAssignmentStatus", t, "multi")
		}
  }
	if r.floors != nil {
		t := *r.floors
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "floors", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "floors", t, "multi")
		}
  }
	if r.roomFeatures != nil {
		t := *r.roomFeatures
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomFeatures", t, "multi")
		}
  }
	if r.amSections != nil {
		t := *r.amSections
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "amSections", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "amSections", t, "multi")
		}
  }
	if r.pmSections != nil {
		t := *r.pmSections
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "pmSections", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "pmSections", t, "multi")
		}
  }
	if r.buildings != nil {
		t := *r.buildings
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "buildings", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "buildings", t, "multi")
		}
  }
	if r.housekeepingRoomStatus != nil {
		t := *r.housekeepingRoomStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingRoomStatus", t, "multi")
		}
  }
	if r.roomParityStatus != nil {
		t := *r.roomParityStatus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomParityStatus", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomParityStatus", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetRoomMaintenanceRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomIdText *string
	roomId *string
	roomClasses *[]string
	roomTypes *[]string
	maintenanceCodes *[]string
	roomMaintenanceStatus *string
	assignedUserId *[]string
	assignedUserIdContext *[]string
	assignedUserIdType *[]string
	maintenanceId *string
	maintenanceIdContext *string
	maintenanceIdType *string
	resolvedEndDate *string
	resolvedStartDate *string
	includeImages *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetRoomMaintenanceRequest) Authorization(authorization string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetRoomMaintenanceRequest) XAppKey(xAppKey string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetRoomMaintenanceRequest) XHotelid(xHotelid string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Wildcard Room filter.
func (r HousekeepingAPIGetRoomMaintenanceRequest) RoomIdText(roomIdText string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.roomIdText = &roomIdText
	return r
}

// Room Number filter.
func (r HousekeepingAPIGetRoomMaintenanceRequest) RoomId(roomId string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.roomId = &roomId
	return r
}

func (r HousekeepingAPIGetRoomMaintenanceRequest) RoomClasses(roomClasses []string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.roomClasses = &roomClasses
	return r
}

func (r HousekeepingAPIGetRoomMaintenanceRequest) RoomTypes(roomTypes []string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.roomTypes = &roomTypes
	return r
}

func (r HousekeepingAPIGetRoomMaintenanceRequest) MaintenanceCodes(maintenanceCodes []string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.maintenanceCodes = &maintenanceCodes
	return r
}

// Room Maintenance Status.
func (r HousekeepingAPIGetRoomMaintenanceRequest) RoomMaintenanceStatus(roomMaintenanceStatus string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.roomMaintenanceStatus = &roomMaintenanceStatus
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r HousekeepingAPIGetRoomMaintenanceRequest) AssignedUserId(assignedUserId []string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.assignedUserId = &assignedUserId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r HousekeepingAPIGetRoomMaintenanceRequest) AssignedUserIdContext(assignedUserIdContext []string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.assignedUserIdContext = &assignedUserIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r HousekeepingAPIGetRoomMaintenanceRequest) AssignedUserIdType(assignedUserIdType []string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.assignedUserIdType = &assignedUserIdType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r HousekeepingAPIGetRoomMaintenanceRequest) MaintenanceId(maintenanceId string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.maintenanceId = &maintenanceId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r HousekeepingAPIGetRoomMaintenanceRequest) MaintenanceIdContext(maintenanceIdContext string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.maintenanceIdContext = &maintenanceIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r HousekeepingAPIGetRoomMaintenanceRequest) MaintenanceIdType(maintenanceIdType string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.maintenanceIdType = &maintenanceIdType
	return r
}

// The ending value of the date range.
func (r HousekeepingAPIGetRoomMaintenanceRequest) ResolvedEndDate(resolvedEndDate string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.resolvedEndDate = &resolvedEndDate
	return r
}

// The starting value of the date range.
func (r HousekeepingAPIGetRoomMaintenanceRequest) ResolvedStartDate(resolvedStartDate string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.resolvedStartDate = &resolvedStartDate
	return r
}

// Indicator that tells whether to include Images in search results.
func (r HousekeepingAPIGetRoomMaintenanceRequest) IncludeImages(includeImages bool) HousekeepingAPIGetRoomMaintenanceRequest {
	r.includeImages = &includeImages
	return r
}

// External system code.
func (r HousekeepingAPIGetRoomMaintenanceRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetRoomMaintenanceRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetRoomMaintenanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetRoomMaintenanceRequest) Execute() (*RoomMaintenanceDetails, *http.Response, error) {
	return r.ApiService.GetRoomMaintenanceExecute(r)
}

/*
GetRoomMaintenance Get the maintenance rooms

Use this API to get a list of rooms with maintenances. <p><strong>OperationId:</strong>getRoomMaintenance</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIGetRoomMaintenanceRequest
*/
func (a *HousekeepingAPIService) GetRoomMaintenance(ctx context.Context, hotelId string) HousekeepingAPIGetRoomMaintenanceRequest {
	return HousekeepingAPIGetRoomMaintenanceRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RoomMaintenanceDetails
func (a *HousekeepingAPIService) GetRoomMaintenanceExecute(r HousekeepingAPIGetRoomMaintenanceRequest) (*RoomMaintenanceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomMaintenanceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetRoomMaintenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/maintenances"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.roomIdText != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomIdText", r.roomIdText, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	if r.roomTypes != nil {
		t := *r.roomTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypes", t, "multi")
		}
  }
	if r.maintenanceCodes != nil {
		t := *r.maintenanceCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "maintenanceCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "maintenanceCodes", t, "multi")
		}
  }
	if r.roomMaintenanceStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomMaintenanceStatus", r.roomMaintenanceStatus, "")
  }
	if r.assignedUserId != nil {
		t := *r.assignedUserId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assignedUserId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assignedUserId", t, "multi")
		}
  }
	if r.assignedUserIdContext != nil {
		t := *r.assignedUserIdContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assignedUserIdContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assignedUserIdContext", t, "multi")
		}
  }
	if r.assignedUserIdType != nil {
		t := *r.assignedUserIdType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "assignedUserIdType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "assignedUserIdType", t, "multi")
		}
  }
	if r.maintenanceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maintenanceId", r.maintenanceId, "")
  }
	if r.maintenanceIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maintenanceIdContext", r.maintenanceIdContext, "")
  }
	if r.maintenanceIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maintenanceIdType", r.maintenanceIdType, "")
  }
	if r.resolvedEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolvedEndDate", r.resolvedEndDate, "")
  }
	if r.resolvedStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resolvedStartDate", r.resolvedStartDate, "")
  }
	if r.includeImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeImages", r.includeImages, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetTaskCompanionRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	sheetNumber string
	hotelId string
	taskCodes *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskDate *string
	roomId *string
	skipRoomNumbers *[]string
	roomStatusToChange *[]string
	xExternalsystem *string
	acceptLanguage *string
}

func (r HousekeepingAPIGetTaskCompanionRequest) TaskCodes(taskCodes []string) HousekeepingAPIGetTaskCompanionRequest {
	r.taskCodes = &taskCodes
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetTaskCompanionRequest) Authorization(authorization string) HousekeepingAPIGetTaskCompanionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetTaskCompanionRequest) XAppKey(xAppKey string) HousekeepingAPIGetTaskCompanionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetTaskCompanionRequest) XHotelid(xHotelid string) HousekeepingAPIGetTaskCompanionRequest {
	r.xHotelid = &xHotelid
	return r
}

// Date for which the task sheet was created. By default this would be the current business date.
func (r HousekeepingAPIGetTaskCompanionRequest) TaskDate(taskDate string) HousekeepingAPIGetTaskCompanionRequest {
	r.taskDate = &taskDate
	return r
}

// Choice to search by a room number if a particular room is required.
func (r HousekeepingAPIGetTaskCompanionRequest) RoomId(roomId string) HousekeepingAPIGetTaskCompanionRequest {
	r.roomId = &roomId
	return r
}

// Room number that should be skipped.
func (r HousekeepingAPIGetTaskCompanionRequest) SkipRoomNumbers(skipRoomNumbers []string) HousekeepingAPIGetTaskCompanionRequest {
	r.skipRoomNumbers = &skipRoomNumbers
	return r
}

// Simple type for room status instructions to be used in requests for fetching housekeeping rooms. Valid status values are Clean, Dirty, Pickup, Inspected, OutOfOrder, OutOfService.
func (r HousekeepingAPIGetTaskCompanionRequest) RoomStatusToChange(roomStatusToChange []string) HousekeepingAPIGetTaskCompanionRequest {
	r.roomStatusToChange = &roomStatusToChange
	return r
}

// External system code.
func (r HousekeepingAPIGetTaskCompanionRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetTaskCompanionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetTaskCompanionRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetTaskCompanionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetTaskCompanionRequest) Execute() (*TaskCompanion, *http.Response, error) {
	return r.ApiService.GetTaskCompanionExecute(r)
}

/*
GetTaskCompanion Get task companion

This API allows you to get task companion. <p><strong>OperationId:</strong>getTaskCompanion</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sheetNumber
 @param hotelId
 @return HousekeepingAPIGetTaskCompanionRequest
*/
func (a *HousekeepingAPIService) GetTaskCompanion(ctx context.Context, sheetNumber string, hotelId string) HousekeepingAPIGetTaskCompanionRequest {
	return HousekeepingAPIGetTaskCompanionRequest{
		ApiService: a,
		ctx: ctx,
		sheetNumber: sheetNumber,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return TaskCompanion
func (a *HousekeepingAPIService) GetTaskCompanionExecute(r HousekeepingAPIGetTaskCompanionRequest) (*TaskCompanion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCompanion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetTaskCompanion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/sheets/{sheetNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"sheetNumber"+"}", url.PathEscape(parameterValueToString(r.sheetNumber, "sheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("sheetNumber must have at least 1 elements")
	}
	if strlen(r.sheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("sheetNumber must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	{
		t := *r.taskCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "taskCodes", t, "multi")
		}
	}
	if r.taskDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "taskDate", r.taskDate, "")
  }
	if r.roomId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", r.roomId, "")
  }
	if r.skipRoomNumbers != nil {
		t := *r.skipRoomNumbers
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "skipRoomNumbers", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "skipRoomNumbers", t, "multi")
		}
  }
	if r.roomStatusToChange != nil {
		t := *r.roomStatusToChange
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomStatusToChange", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomStatusToChange", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIGetTaskSheetTemplateRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	templateCode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIGetTaskSheetTemplateRequest) Authorization(authorization string) HousekeepingAPIGetTaskSheetTemplateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIGetTaskSheetTemplateRequest) XAppKey(xAppKey string) HousekeepingAPIGetTaskSheetTemplateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIGetTaskSheetTemplateRequest) XHotelid(xHotelid string) HousekeepingAPIGetTaskSheetTemplateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Template name for the task sheet.
func (r HousekeepingAPIGetTaskSheetTemplateRequest) TemplateCode(templateCode string) HousekeepingAPIGetTaskSheetTemplateRequest {
	r.templateCode = &templateCode
	return r
}

// External system code.
func (r HousekeepingAPIGetTaskSheetTemplateRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIGetTaskSheetTemplateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIGetTaskSheetTemplateRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIGetTaskSheetTemplateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIGetTaskSheetTemplateRequest) Execute() (*TaskSheetTemplate, *http.Response, error) {
	return r.ApiService.GetTaskSheetTemplateExecute(r)
}

/*
GetTaskSheetTemplate Get the task sheet templates

This API allows you to get the task sheet templates. <p><strong>OperationId:</strong>getTaskSheetTemplate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code for which task sheet templates needs to be fetched
 @return HousekeepingAPIGetTaskSheetTemplateRequest
*/
func (a *HousekeepingAPIService) GetTaskSheetTemplate(ctx context.Context, hotelId string) HousekeepingAPIGetTaskSheetTemplateRequest {
	return HousekeepingAPIGetTaskSheetTemplateRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return TaskSheetTemplate
func (a *HousekeepingAPIService) GetTaskSheetTemplateExecute(r HousekeepingAPIGetTaskSheetTemplateRequest) (*TaskSheetTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskSheetTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.GetTaskSheetTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheetTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.templateCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "templateCode", r.templateCode, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPILockTaskSheetRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	sheetNumber string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheetToLock *TaskSheetToLock
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPILockTaskSheetRequest) Authorization(authorization string) HousekeepingAPILockTaskSheetRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPILockTaskSheetRequest) XAppKey(xAppKey string) HousekeepingAPILockTaskSheetRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPILockTaskSheetRequest) XHotelid(xHotelid string) HousekeepingAPILockTaskSheetRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for locking a task sheet.
func (r HousekeepingAPILockTaskSheetRequest) TaskSheetToLock(taskSheetToLock TaskSheetToLock) HousekeepingAPILockTaskSheetRequest {
	r.taskSheetToLock = &taskSheetToLock
	return r
}

// External system code.
func (r HousekeepingAPILockTaskSheetRequest) XExternalsystem(xExternalsystem string) HousekeepingAPILockTaskSheetRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPILockTaskSheetRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPILockTaskSheetRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPILockTaskSheetRequest) Execute() (*LockedTaskSheet, *http.Response, error) {
	return r.ApiService.LockTaskSheetExecute(r)
}

/*
LockTaskSheet Lock the task sheet

This API allows you to Lock the task sheet. <p><strong>OperationId:</strong>lockTaskSheet</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sheetNumber
 @param hotelId
 @return HousekeepingAPILockTaskSheetRequest
*/
func (a *HousekeepingAPIService) LockTaskSheet(ctx context.Context, sheetNumber string, hotelId string) HousekeepingAPILockTaskSheetRequest {
	return HousekeepingAPILockTaskSheetRequest{
		ApiService: a,
		ctx: ctx,
		sheetNumber: sheetNumber,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return LockedTaskSheet
func (a *HousekeepingAPIService) LockTaskSheetExecute(r HousekeepingAPILockTaskSheetRequest) (*LockedTaskSheet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LockedTaskSheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.LockTaskSheet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/{sheetNumber}/lock"
	localVarPath = strings.Replace(localVarPath, "{"+"sheetNumber"+"}", url.PathEscape(parameterValueToString(r.sheetNumber, "sheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("sheetNumber must have at least 1 elements")
	}
	if strlen(r.sheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("sheetNumber must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheetToLock
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIMergeTaskSheetRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	toTaskSequenceNo string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheetToMerge *TaskSheetToMerge
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIMergeTaskSheetRequest) Authorization(authorization string) HousekeepingAPIMergeTaskSheetRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIMergeTaskSheetRequest) XAppKey(xAppKey string) HousekeepingAPIMergeTaskSheetRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIMergeTaskSheetRequest) XHotelid(xHotelid string) HousekeepingAPIMergeTaskSheetRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for merging task sheets.
func (r HousekeepingAPIMergeTaskSheetRequest) TaskSheetToMerge(taskSheetToMerge TaskSheetToMerge) HousekeepingAPIMergeTaskSheetRequest {
	r.taskSheetToMerge = &taskSheetToMerge
	return r
}

// External system code.
func (r HousekeepingAPIMergeTaskSheetRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIMergeTaskSheetRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIMergeTaskSheetRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIMergeTaskSheetRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIMergeTaskSheetRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.MergeTaskSheetExecute(r)
}

/*
MergeTaskSheet Merge task sheet

This API allows you to merge task sheet. <p><strong>OperationId:</strong>mergeTaskSheet</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param toTaskSequenceNo
 @param hotelId
 @return HousekeepingAPIMergeTaskSheetRequest
*/
func (a *HousekeepingAPIService) MergeTaskSheet(ctx context.Context, toTaskSequenceNo string, hotelId string) HousekeepingAPIMergeTaskSheetRequest {
	return HousekeepingAPIMergeTaskSheetRequest{
		ApiService: a,
		ctx: ctx,
		toTaskSequenceNo: toTaskSequenceNo,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) MergeTaskSheetExecute(r HousekeepingAPIMergeTaskSheetRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.MergeTaskSheet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/{toTaskSequenceNo}/merge"
	localVarPath = strings.Replace(localVarPath, "{"+"toTaskSequenceNo"+"}", url.PathEscape(parameterValueToString(r.toTaskSequenceNo, "toTaskSequenceNo")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.toTaskSequenceNo) < 1 {
		return localVarReturnValue, nil, reportError("toTaskSequenceNo must have at least 1 elements")
	}
	if strlen(r.toTaskSequenceNo) > 2000 {
		return localVarReturnValue, nil, reportError("toTaskSequenceNo must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheetToMerge
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIMoveTaskRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	moveTaskRooms *MoveTaskRooms
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIMoveTaskRoomsRequest) Authorization(authorization string) HousekeepingAPIMoveTaskRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIMoveTaskRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIMoveTaskRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIMoveTaskRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIMoveTaskRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for moving rooms between task sheets.
func (r HousekeepingAPIMoveTaskRoomsRequest) MoveTaskRooms(moveTaskRooms MoveTaskRooms) HousekeepingAPIMoveTaskRoomsRequest {
	r.moveTaskRooms = &moveTaskRooms
	return r
}

// External system code.
func (r HousekeepingAPIMoveTaskRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIMoveTaskRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIMoveTaskRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIMoveTaskRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIMoveTaskRoomsRequest) Execute() (*MovedTaskRoomsRS, *http.Response, error) {
	return r.ApiService.MoveTaskRoomsExecute(r)
}

/*
MoveTaskRooms Move the task rooms

This API will allow you to Move the tasksheet rooms. <p><strong>OperationId:</strong>moveTaskRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIMoveTaskRoomsRequest
*/
func (a *HousekeepingAPIService) MoveTaskRooms(ctx context.Context, hotelId string) HousekeepingAPIMoveTaskRoomsRequest {
	return HousekeepingAPIMoveTaskRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return MovedTaskRoomsRS
func (a *HousekeepingAPIService) MoveTaskRoomsExecute(r HousekeepingAPIMoveTaskRoomsRequest) (*MovedTaskRoomsRS, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MovedTaskRoomsRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.MoveTaskRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/moveTaskRooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.moveTaskRooms
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPostHousekeepingAttendantScheduleRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	attendantSchedule *AttendantSchedule
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) Authorization(authorization string) HousekeepingAPIPostHousekeepingAttendantScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) XAppKey(xAppKey string) HousekeepingAPIPostHousekeepingAttendantScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) XHotelid(xHotelid string) HousekeepingAPIPostHousekeepingAttendantScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for creating the attendant schedule.
func (r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) AttendantSchedule(attendantSchedule AttendantSchedule) HousekeepingAPIPostHousekeepingAttendantScheduleRequest {
	r.attendantSchedule = &attendantSchedule
	return r
}

// External system code.
func (r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPostHousekeepingAttendantScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPostHousekeepingAttendantScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostHousekeepingAttendantScheduleExecute(r)
}

/*
PostHousekeepingAttendantSchedule Create housekeeping attendant schedule

This API will allow you to create housekeeping attendant schedule. <p><strong>OperationId:</strong>postHousekeepingAttendantSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIPostHousekeepingAttendantScheduleRequest
*/
func (a *HousekeepingAPIService) PostHousekeepingAttendantSchedule(ctx context.Context, hotelId string) HousekeepingAPIPostHousekeepingAttendantScheduleRequest {
	return HousekeepingAPIPostHousekeepingAttendantScheduleRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PostHousekeepingAttendantScheduleExecute(r HousekeepingAPIPostHousekeepingAttendantScheduleRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PostHousekeepingAttendantSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/schedules/houseKeepingTasks"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.attendantSchedule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPostOutOfOrderRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomRepairOutOfOrder *PostOutOfOrderRoomsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPostOutOfOrderRoomsRequest) Authorization(authorization string) HousekeepingAPIPostOutOfOrderRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPostOutOfOrderRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIPostOutOfOrderRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPostOutOfOrderRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIPostOutOfOrderRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r HousekeepingAPIPostOutOfOrderRoomsRequest) RoomRepairOutOfOrder(roomRepairOutOfOrder PostOutOfOrderRoomsRequest) HousekeepingAPIPostOutOfOrderRoomsRequest {
	r.roomRepairOutOfOrder = &roomRepairOutOfOrder
	return r
}

// External system code.
func (r HousekeepingAPIPostOutOfOrderRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPostOutOfOrderRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPostOutOfOrderRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPostOutOfOrderRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPostOutOfOrderRoomsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostOutOfOrderRoomsExecute(r)
}

/*
PostOutOfOrderRooms Set multiple rooms to Out Of Order

This API allows you to initially set rooms to 'Out Of Order' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code of Room(s) which is to be set as Out Of Order.
 @return HousekeepingAPIPostOutOfOrderRoomsRequest
*/
func (a *HousekeepingAPIService) PostOutOfOrderRooms(ctx context.Context, hotelId string) HousekeepingAPIPostOutOfOrderRoomsRequest {
	return HousekeepingAPIPostOutOfOrderRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PostOutOfOrderRoomsExecute(r HousekeepingAPIPostOutOfOrderRoomsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PostOutOfOrderRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/outOfOrderRooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomRepairOutOfOrder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPostOutOfServiceRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomRepairOutOfService *PostOutOfServiceRoomsRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPostOutOfServiceRoomsRequest) Authorization(authorization string) HousekeepingAPIPostOutOfServiceRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPostOutOfServiceRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIPostOutOfServiceRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPostOutOfServiceRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIPostOutOfServiceRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r HousekeepingAPIPostOutOfServiceRoomsRequest) RoomRepairOutOfService(roomRepairOutOfService PostOutOfServiceRoomsRequest) HousekeepingAPIPostOutOfServiceRoomsRequest {
	r.roomRepairOutOfService = &roomRepairOutOfService
	return r
}

// External system code.
func (r HousekeepingAPIPostOutOfServiceRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPostOutOfServiceRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPostOutOfServiceRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPostOutOfServiceRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPostOutOfServiceRoomsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostOutOfServiceRoomsExecute(r)
}

/*
PostOutOfServiceRooms Set multiple rooms to Out Of Service

This API allows you to initially set rooms to 'Out Of Service' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code of Room(s) which is to be set as Out Of Service.
 @return HousekeepingAPIPostOutOfServiceRoomsRequest
*/
func (a *HousekeepingAPIService) PostOutOfServiceRooms(ctx context.Context, hotelId string) HousekeepingAPIPostOutOfServiceRoomsRequest {
	return HousekeepingAPIPostOutOfServiceRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PostOutOfServiceRoomsExecute(r HousekeepingAPIPostOutOfServiceRoomsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PostOutOfServiceRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/outOfServiceRooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomRepairOutOfService
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPostReservationHousekeepingTasksRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	schedule *Schedule
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPostReservationHousekeepingTasksRequest) Authorization(authorization string) HousekeepingAPIPostReservationHousekeepingTasksRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPostReservationHousekeepingTasksRequest) XAppKey(xAppKey string) HousekeepingAPIPostReservationHousekeepingTasksRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPostReservationHousekeepingTasksRequest) XHotelid(xHotelid string) HousekeepingAPIPostReservationHousekeepingTasksRequest {
	r.xHotelid = &xHotelid
	return r
}

// A schedule with task(s) to be created for the given reservation.
func (r HousekeepingAPIPostReservationHousekeepingTasksRequest) Schedule(schedule Schedule) HousekeepingAPIPostReservationHousekeepingTasksRequest {
	r.schedule = &schedule
	return r
}

// External system code.
func (r HousekeepingAPIPostReservationHousekeepingTasksRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPostReservationHousekeepingTasksRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPostReservationHousekeepingTasksRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPostReservationHousekeepingTasksRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPostReservationHousekeepingTasksRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostReservationHousekeepingTasksExecute(r)
}

/*
PostReservationHousekeepingTasks Create reservation housekeeping tasks

This API will allow you to create reservation housekeeping tasks. <p><strong>OperationId:</strong>postReservationHousekeepingTasks</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPIPostReservationHousekeepingTasksRequest
*/
func (a *HousekeepingAPIService) PostReservationHousekeepingTasks(ctx context.Context, reservationId string, hotelId string) HousekeepingAPIPostReservationHousekeepingTasksRequest {
	return HousekeepingAPIPostReservationHousekeepingTasksRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PostReservationHousekeepingTasksExecute(r HousekeepingAPIPostReservationHousekeepingTasksRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PostReservationHousekeepingTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.schedule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPostRoomMaintenanceRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	maintenanceCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomMaintenanceRequest *RoomMaintenanceRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPostRoomMaintenanceRequest) Authorization(authorization string) HousekeepingAPIPostRoomMaintenanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPostRoomMaintenanceRequest) XAppKey(xAppKey string) HousekeepingAPIPostRoomMaintenanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPostRoomMaintenanceRequest) XHotelid(xHotelid string) HousekeepingAPIPostRoomMaintenanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create a room maintenance record.
func (r HousekeepingAPIPostRoomMaintenanceRequest) RoomMaintenanceRequest(roomMaintenanceRequest RoomMaintenanceRequest) HousekeepingAPIPostRoomMaintenanceRequest {
	r.roomMaintenanceRequest = &roomMaintenanceRequest
	return r
}

// External system code.
func (r HousekeepingAPIPostRoomMaintenanceRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPostRoomMaintenanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPostRoomMaintenanceRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPostRoomMaintenanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPostRoomMaintenanceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostRoomMaintenanceExecute(r)
}

/*
PostRoomMaintenance Create maintenances for rooms

Use this API to create maintenances for rooms. <p><strong>OperationId:</strong>postRoomMaintenance</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param maintenanceCode
 @param hotelId
 @return HousekeepingAPIPostRoomMaintenanceRequest
*/
func (a *HousekeepingAPIService) PostRoomMaintenance(ctx context.Context, maintenanceCode string, hotelId string) HousekeepingAPIPostRoomMaintenanceRequest {
	return HousekeepingAPIPostRoomMaintenanceRequest{
		ApiService: a,
		ctx: ctx,
		maintenanceCode: maintenanceCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PostRoomMaintenanceExecute(r HousekeepingAPIPostRoomMaintenanceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PostRoomMaintenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/maintenanceCodes/{maintenanceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"maintenanceCode"+"}", url.PathEscape(parameterValueToString(r.maintenanceCode, "maintenanceCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.maintenanceCode) < 1 {
		return localVarReturnValue, nil, reportError("maintenanceCode must have at least 1 elements")
	}
	if strlen(r.maintenanceCode) > 2000 {
		return localVarReturnValue, nil, reportError("maintenanceCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomMaintenanceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPostTaskSheetRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheet *TaskSheet
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPostTaskSheetRequest) Authorization(authorization string) HousekeepingAPIPostTaskSheetRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPostTaskSheetRequest) XAppKey(xAppKey string) HousekeepingAPIPostTaskSheetRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPostTaskSheetRequest) XHotelid(xHotelid string) HousekeepingAPIPostTaskSheetRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create a new task sheet. Details for the task sheet required are the Task Code, Task Date and Resort. Task Instructions and total credits if not provided will be retrieved from the task code setup. If room and attendant information is sent, this will be added to the task sheet created.
func (r HousekeepingAPIPostTaskSheetRequest) TaskSheet(taskSheet TaskSheet) HousekeepingAPIPostTaskSheetRequest {
	r.taskSheet = &taskSheet
	return r
}

// External system code.
func (r HousekeepingAPIPostTaskSheetRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPostTaskSheetRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPostTaskSheetRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPostTaskSheetRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPostTaskSheetRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostTaskSheetExecute(r)
}

/*
PostTaskSheet Create the task sheet

This API allows you to create the task sheet. <p><strong>OperationId:</strong>postTaskSheet</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIPostTaskSheetRequest
*/
func (a *HousekeepingAPIService) PostTaskSheet(ctx context.Context, hotelId string) HousekeepingAPIPostTaskSheetRequest {
	return HousekeepingAPIPostTaskSheetRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PostTaskSheetExecute(r HousekeepingAPIPostTaskSheetRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PostTaskSheet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPostTaskSheetRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheet *TaskSheet
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPostTaskSheetRoomsRequest) Authorization(authorization string) HousekeepingAPIPostTaskSheetRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPostTaskSheetRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIPostTaskSheetRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPostTaskSheetRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIPostTaskSheetRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create(add) a room in a task sheet. Details for the task sheet required are the Task Code, Task Date and Resort. The room element will contain the list of rooms that are to be added to the task sheet. These rooms will be added to the existing rooms on the task sheet. Room instructions and credits will be updated for each room.
func (r HousekeepingAPIPostTaskSheetRoomsRequest) TaskSheet(taskSheet TaskSheet) HousekeepingAPIPostTaskSheetRoomsRequest {
	r.taskSheet = &taskSheet
	return r
}

// External system code.
func (r HousekeepingAPIPostTaskSheetRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPostTaskSheetRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPostTaskSheetRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPostTaskSheetRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPostTaskSheetRoomsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostTaskSheetRoomsExecute(r)
}

/*
PostTaskSheetRooms Create the task sheet rooms

This API allows you to create the task sheet rooms. <p><strong>OperationId:</strong>postTaskSheetRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIPostTaskSheetRoomsRequest
*/
func (a *HousekeepingAPIService) PostTaskSheetRooms(ctx context.Context, hotelId string) HousekeepingAPIPostTaskSheetRoomsRequest {
	return HousekeepingAPIPostTaskSheetRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PostTaskSheetRoomsExecute(r HousekeepingAPIPostTaskSheetRoomsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PostTaskSheetRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/rooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPutRoomCleaningPriorityRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	roomId *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Collection of room numbers.
func (r HousekeepingAPIPutRoomCleaningPriorityRequest) RoomId(roomId []string) HousekeepingAPIPutRoomCleaningPriorityRequest {
	r.roomId = &roomId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPutRoomCleaningPriorityRequest) Authorization(authorization string) HousekeepingAPIPutRoomCleaningPriorityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPutRoomCleaningPriorityRequest) XAppKey(xAppKey string) HousekeepingAPIPutRoomCleaningPriorityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPutRoomCleaningPriorityRequest) XHotelid(xHotelid string) HousekeepingAPIPutRoomCleaningPriorityRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r HousekeepingAPIPutRoomCleaningPriorityRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPutRoomCleaningPriorityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPutRoomCleaningPriorityRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPutRoomCleaningPriorityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPutRoomCleaningPriorityRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutRoomCleaningPriorityExecute(r)
}

/*
PutRoomCleaningPriority Delete room cleaning priority

This API will allow you to delete room cleaning priority. <p><strong>OperationId:</strong>putRoomCleaningPriority</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIPutRoomCleaningPriorityRequest
*/
func (a *HousekeepingAPIService) PutRoomCleaningPriority(ctx context.Context, hotelId string) HousekeepingAPIPutRoomCleaningPriorityRequest {
	return HousekeepingAPIPutRoomCleaningPriorityRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *HousekeepingAPIService) PutRoomCleaningPriorityExecute(r HousekeepingAPIPutRoomCleaningPriorityRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PutRoomCleaningPriority")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/cleaningPriority"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	{
		t := *r.roomId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomId", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPutRoomMaintenanceRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	maintenanceId string
	roomId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomMaintenance *RoomMaintenance
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPutRoomMaintenanceRequest) Authorization(authorization string) HousekeepingAPIPutRoomMaintenanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPutRoomMaintenanceRequest) XAppKey(xAppKey string) HousekeepingAPIPutRoomMaintenanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPutRoomMaintenanceRequest) XHotelid(xHotelid string) HousekeepingAPIPutRoomMaintenanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to change room maintenance details.
func (r HousekeepingAPIPutRoomMaintenanceRequest) RoomMaintenance(roomMaintenance RoomMaintenance) HousekeepingAPIPutRoomMaintenanceRequest {
	r.roomMaintenance = &roomMaintenance
	return r
}

// External system code.
func (r HousekeepingAPIPutRoomMaintenanceRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPutRoomMaintenanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPutRoomMaintenanceRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPutRoomMaintenanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPutRoomMaintenanceRequest) Execute() (*ChangedRoomMaintenance, *http.Response, error) {
	return r.ApiService.PutRoomMaintenanceExecute(r)
}

/*
PutRoomMaintenance Change maintenances for rooms

Use this API to change the maintenances for rooms. <p><strong>OperationId:</strong>putRoomMaintenance</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param maintenanceId
 @param roomId
 @param hotelId
 @return HousekeepingAPIPutRoomMaintenanceRequest
*/
func (a *HousekeepingAPIService) PutRoomMaintenance(ctx context.Context, maintenanceId string, roomId string, hotelId string) HousekeepingAPIPutRoomMaintenanceRequest {
	return HousekeepingAPIPutRoomMaintenanceRequest{
		ApiService: a,
		ctx: ctx,
		maintenanceId: maintenanceId,
		roomId: roomId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedRoomMaintenance
func (a *HousekeepingAPIService) PutRoomMaintenanceExecute(r HousekeepingAPIPutRoomMaintenanceRequest) (*ChangedRoomMaintenance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedRoomMaintenance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PutRoomMaintenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/{roomId}/maintenances/{maintenanceId}"
	localVarPath = strings.Replace(localVarPath, "{"+"maintenanceId"+"}", url.PathEscape(parameterValueToString(r.maintenanceId, "maintenanceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.maintenanceId) < 1 {
		return localVarReturnValue, nil, reportError("maintenanceId must have at least 1 elements")
	}
	if strlen(r.maintenanceId) > 2000 {
		return localVarReturnValue, nil, reportError("maintenanceId must have less than 2000 elements")
	}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomMaintenance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPutRoomRelatedStatusRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	housekeepingRoomStatusCriteria *PutRoomRelatedStatusRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPutRoomRelatedStatusRequest) Authorization(authorization string) HousekeepingAPIPutRoomRelatedStatusRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPutRoomRelatedStatusRequest) XAppKey(xAppKey string) HousekeepingAPIPutRoomRelatedStatusRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPutRoomRelatedStatusRequest) XHotelid(xHotelid string) HousekeepingAPIPutRoomRelatedStatusRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r HousekeepingAPIPutRoomRelatedStatusRequest) HousekeepingRoomStatusCriteria(housekeepingRoomStatusCriteria PutRoomRelatedStatusRequest) HousekeepingAPIPutRoomRelatedStatusRequest {
	r.housekeepingRoomStatusCriteria = &housekeepingRoomStatusCriteria
	return r
}

// External system code.
func (r HousekeepingAPIPutRoomRelatedStatusRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPutRoomRelatedStatusRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPutRoomRelatedStatusRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPutRoomRelatedStatusRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPutRoomRelatedStatusRequest) Execute() (*HousekeepingRoomStatus, *http.Response, error) {
	return r.ApiService.PutRoomRelatedStatusExecute(r)
}

/*
PutRoomRelatedStatus Update Housekeeping Room Status

Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel Code for which housekeeping room status, housekeeping status or turndown status have to be modified
 @return HousekeepingAPIPutRoomRelatedStatusRequest
*/
func (a *HousekeepingAPIService) PutRoomRelatedStatus(ctx context.Context, hotelId string) HousekeepingAPIPutRoomRelatedStatusRequest {
	return HousekeepingAPIPutRoomRelatedStatusRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return HousekeepingRoomStatus
func (a *HousekeepingAPIService) PutRoomRelatedStatusExecute(r HousekeepingAPIPutRoomRelatedStatusRequest) (*HousekeepingRoomStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HousekeepingRoomStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PutRoomRelatedStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/status"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.housekeepingRoomStatusCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPutTaskSheetRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheet *TaskSheet
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPutTaskSheetRequest) Authorization(authorization string) HousekeepingAPIPutTaskSheetRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPutTaskSheetRequest) XAppKey(xAppKey string) HousekeepingAPIPutTaskSheetRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPutTaskSheetRequest) XHotelid(xHotelid string) HousekeepingAPIPutTaskSheetRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request of Changing a Task Sheet. The task instructions, total credits, attendant information and room information can be changed on a task sheet. Task Instructions , Total Credits and Attendants will be replaced with what is sent in this request. Example: If the task instructions is null in the request, the task instructions on the task sheet will be updated to null. If rooms are sent as part of this request, this will replace the existing rooms on the task sheet. If rooms are not sent, then the original rooms will remain. The task date, hotel code, task sheet number and task code is required to search for the task sheet which has to be changed
func (r HousekeepingAPIPutTaskSheetRequest) TaskSheet(taskSheet TaskSheet) HousekeepingAPIPutTaskSheetRequest {
	r.taskSheet = &taskSheet
	return r
}

// External system code.
func (r HousekeepingAPIPutTaskSheetRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPutTaskSheetRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPutTaskSheetRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPutTaskSheetRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPutTaskSheetRequest) Execute() (*ChangedTaskSheet, *http.Response, error) {
	return r.ApiService.PutTaskSheetExecute(r)
}

/*
PutTaskSheet Change the task sheet

This API allows you to change the task sheet. <p><strong>OperationId:</strong>putTaskSheet</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIPutTaskSheetRequest
*/
func (a *HousekeepingAPIService) PutTaskSheet(ctx context.Context, hotelId string) HousekeepingAPIPutTaskSheetRequest {
	return HousekeepingAPIPutTaskSheetRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedTaskSheet
func (a *HousekeepingAPIService) PutTaskSheetExecute(r HousekeepingAPIPutTaskSheetRequest) (*ChangedTaskSheet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedTaskSheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PutTaskSheet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPutTaskSheetRoomsRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheet *TaskSheet
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPutTaskSheetRoomsRequest) Authorization(authorization string) HousekeepingAPIPutTaskSheetRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPutTaskSheetRoomsRequest) XAppKey(xAppKey string) HousekeepingAPIPutTaskSheetRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPutTaskSheetRoomsRequest) XHotelid(xHotelid string) HousekeepingAPIPutTaskSheetRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to change a room on a task sheet. The information that can be changed are the room instructions and credits. The instructions and credits for a room will be updated based on the information sent in this request. The criteria required to search for the particular task sheet to update requires the HotelCode, Task Sheet Number, Task Code and Task Date.
func (r HousekeepingAPIPutTaskSheetRoomsRequest) TaskSheet(taskSheet TaskSheet) HousekeepingAPIPutTaskSheetRoomsRequest {
	r.taskSheet = &taskSheet
	return r
}

// External system code.
func (r HousekeepingAPIPutTaskSheetRoomsRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPutTaskSheetRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPutTaskSheetRoomsRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPutTaskSheetRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPutTaskSheetRoomsRequest) Execute() (*ChangedTaskSheetRooms, *http.Response, error) {
	return r.ApiService.PutTaskSheetRoomsExecute(r)
}

/*
PutTaskSheetRooms Change the task sheet rooms

This API allows you to change the task sheet rooms. <p><strong>OperationId:</strong>putTaskSheetRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPIPutTaskSheetRoomsRequest
*/
func (a *HousekeepingAPIService) PutTaskSheetRooms(ctx context.Context, hotelId string) HousekeepingAPIPutTaskSheetRoomsRequest {
	return HousekeepingAPIPutTaskSheetRoomsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedTaskSheetRooms
func (a *HousekeepingAPIService) PutTaskSheetRoomsExecute(r HousekeepingAPIPutTaskSheetRoomsRequest) (*ChangedTaskSheetRooms, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedTaskSheetRooms
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PutTaskSheetRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/rooms"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIPutTaskSheetTemplateRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	taskSheetTemplateCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheetTemplate *TaskSheetTemplate
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIPutTaskSheetTemplateRequest) Authorization(authorization string) HousekeepingAPIPutTaskSheetTemplateRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIPutTaskSheetTemplateRequest) XAppKey(xAppKey string) HousekeepingAPIPutTaskSheetTemplateRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIPutTaskSheetTemplateRequest) XHotelid(xHotelid string) HousekeepingAPIPutTaskSheetTemplateRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for changing task sheet template.
func (r HousekeepingAPIPutTaskSheetTemplateRequest) TaskSheetTemplate(taskSheetTemplate TaskSheetTemplate) HousekeepingAPIPutTaskSheetTemplateRequest {
	r.taskSheetTemplate = &taskSheetTemplate
	return r
}

// External system code.
func (r HousekeepingAPIPutTaskSheetTemplateRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIPutTaskSheetTemplateRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIPutTaskSheetTemplateRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIPutTaskSheetTemplateRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIPutTaskSheetTemplateRequest) Execute() (*ChangedTaskSheetTemplate, *http.Response, error) {
	return r.ApiService.PutTaskSheetTemplateExecute(r)
}

/*
PutTaskSheetTemplate Change the task sheet templates

This API allows you to change the task sheet templates. <p><strong>OperationId:</strong>putTaskSheetTemplate</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskSheetTemplateCode
 @param hotelId
 @return HousekeepingAPIPutTaskSheetTemplateRequest
*/
func (a *HousekeepingAPIService) PutTaskSheetTemplate(ctx context.Context, taskSheetTemplateCode string, hotelId string) HousekeepingAPIPutTaskSheetTemplateRequest {
	return HousekeepingAPIPutTaskSheetTemplateRequest{
		ApiService: a,
		ctx: ctx,
		taskSheetTemplateCode: taskSheetTemplateCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedTaskSheetTemplate
func (a *HousekeepingAPIService) PutTaskSheetTemplateExecute(r HousekeepingAPIPutTaskSheetTemplateRequest) (*ChangedTaskSheetTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedTaskSheetTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.PutTaskSheetTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheetTemplates/{taskSheetTemplateCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskSheetTemplateCode"+"}", url.PathEscape(parameterValueToString(r.taskSheetTemplateCode, "taskSheetTemplateCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.taskSheetTemplateCode) < 1 {
		return localVarReturnValue, nil, reportError("taskSheetTemplateCode must have at least 1 elements")
	}
	if strlen(r.taskSheetTemplateCode) > 2000 {
		return localVarReturnValue, nil, reportError("taskSheetTemplateCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheetTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIResetReservationHousekeepingScheduleRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	scheduleSearch *ScheduleSearch
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIResetReservationHousekeepingScheduleRequest) Authorization(authorization string) HousekeepingAPIResetReservationHousekeepingScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIResetReservationHousekeepingScheduleRequest) XAppKey(xAppKey string) HousekeepingAPIResetReservationHousekeepingScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIResetReservationHousekeepingScheduleRequest) XHotelid(xHotelid string) HousekeepingAPIResetReservationHousekeepingScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request with basic information reservation needed for the reset of the schedule.
func (r HousekeepingAPIResetReservationHousekeepingScheduleRequest) ScheduleSearch(scheduleSearch ScheduleSearch) HousekeepingAPIResetReservationHousekeepingScheduleRequest {
	r.scheduleSearch = &scheduleSearch
	return r
}

// External system code.
func (r HousekeepingAPIResetReservationHousekeepingScheduleRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIResetReservationHousekeepingScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIResetReservationHousekeepingScheduleRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIResetReservationHousekeepingScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIResetReservationHousekeepingScheduleRequest) Execute() (*ScheduledSearch, *http.Response, error) {
	return r.ApiService.ResetReservationHousekeepingScheduleExecute(r)
}

/*
ResetReservationHousekeepingSchedule Reset reservation housekeeping schedule

This API will allow you to reset reservation housekeeping schedule. <p><strong>OperationId:</strong>resetReservationHousekeepingSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPIResetReservationHousekeepingScheduleRequest
*/
func (a *HousekeepingAPIService) ResetReservationHousekeepingSchedule(ctx context.Context, reservationId string, hotelId string) HousekeepingAPIResetReservationHousekeepingScheduleRequest {
	return HousekeepingAPIResetReservationHousekeepingScheduleRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ScheduledSearch
func (a *HousekeepingAPIService) ResetReservationHousekeepingScheduleExecute(r HousekeepingAPIResetReservationHousekeepingScheduleRequest) (*ScheduledSearch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledSearch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.ResetReservationHousekeepingSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules/reset"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.scheduleSearch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIResolveRoomMaintenanceRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	mainteananceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomMaintenance *RoomMaintenance
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIResolveRoomMaintenanceRequest) Authorization(authorization string) HousekeepingAPIResolveRoomMaintenanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIResolveRoomMaintenanceRequest) XAppKey(xAppKey string) HousekeepingAPIResolveRoomMaintenanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIResolveRoomMaintenanceRequest) XHotelid(xHotelid string) HousekeepingAPIResolveRoomMaintenanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to resolve a room maintenance request.
func (r HousekeepingAPIResolveRoomMaintenanceRequest) RoomMaintenance(roomMaintenance RoomMaintenance) HousekeepingAPIResolveRoomMaintenanceRequest {
	r.roomMaintenance = &roomMaintenance
	return r
}

// External system code.
func (r HousekeepingAPIResolveRoomMaintenanceRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIResolveRoomMaintenanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIResolveRoomMaintenanceRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIResolveRoomMaintenanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIResolveRoomMaintenanceRequest) Execute() (*ResolvedRoomMaintenance, *http.Response, error) {
	return r.ApiService.ResolveRoomMaintenanceExecute(r)
}

/*
ResolveRoomMaintenance Resolve maintenances for rooms

Use this API to Resolve maintenances for rooms. <p><strong>OperationId:</strong>resolveRoomMaintenance</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mainteananceId
 @param hotelId
 @return HousekeepingAPIResolveRoomMaintenanceRequest
*/
func (a *HousekeepingAPIService) ResolveRoomMaintenance(ctx context.Context, mainteananceId string, hotelId string) HousekeepingAPIResolveRoomMaintenanceRequest {
	return HousekeepingAPIResolveRoomMaintenanceRequest{
		ApiService: a,
		ctx: ctx,
		mainteananceId: mainteananceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ResolvedRoomMaintenance
func (a *HousekeepingAPIService) ResolveRoomMaintenanceExecute(r HousekeepingAPIResolveRoomMaintenanceRequest) (*ResolvedRoomMaintenance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResolvedRoomMaintenance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.ResolveRoomMaintenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/maintenances/{mainteananceId}/resolve"
	localVarPath = strings.Replace(localVarPath, "{"+"mainteananceId"+"}", url.PathEscape(parameterValueToString(r.mainteananceId, "mainteananceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.mainteananceId) < 1 {
		return localVarReturnValue, nil, reportError("mainteananceId must have at least 1 elements")
	}
	if strlen(r.mainteananceId) > 2000 {
		return localVarReturnValue, nil, reportError("mainteananceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomMaintenance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPISetGuestHousekeepingNotesRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	guestHousekeepingServiceRequest *GuestHousekeepingServiceRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPISetGuestHousekeepingNotesRequest) Authorization(authorization string) HousekeepingAPISetGuestHousekeepingNotesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPISetGuestHousekeepingNotesRequest) XAppKey(xAppKey string) HousekeepingAPISetGuestHousekeepingNotesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPISetGuestHousekeepingNotesRequest) XHotelid(xHotelid string) HousekeepingAPISetGuestHousekeepingNotesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to get set guest housekeeping instructions for the room.
func (r HousekeepingAPISetGuestHousekeepingNotesRequest) GuestHousekeepingServiceRequest(guestHousekeepingServiceRequest GuestHousekeepingServiceRequest) HousekeepingAPISetGuestHousekeepingNotesRequest {
	r.guestHousekeepingServiceRequest = &guestHousekeepingServiceRequest
	return r
}

// External system code.
func (r HousekeepingAPISetGuestHousekeepingNotesRequest) XExternalsystem(xExternalsystem string) HousekeepingAPISetGuestHousekeepingNotesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPISetGuestHousekeepingNotesRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPISetGuestHousekeepingNotesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPISetGuestHousekeepingNotesRequest) Execute() (*GuestHousekeepingService, *http.Response, error) {
	return r.ApiService.SetGuestHousekeepingNotesExecute(r)
}

/*
SetGuestHousekeepingNotes Set guest housekeeping instructions

This API will allow you to Set guest housekeeping instructions. <p><strong>OperationId:</strong>setGuestHousekeepingNotes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPISetGuestHousekeepingNotesRequest
*/
func (a *HousekeepingAPIService) SetGuestHousekeepingNotes(ctx context.Context, reservationId string, hotelId string) HousekeepingAPISetGuestHousekeepingNotesRequest {
	return HousekeepingAPISetGuestHousekeepingNotesRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GuestHousekeepingService
func (a *HousekeepingAPIService) SetGuestHousekeepingNotesExecute(r HousekeepingAPISetGuestHousekeepingNotesRequest) (*GuestHousekeepingService, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GuestHousekeepingService
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.SetGuestHousekeepingNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingNotes"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.guestHousekeepingServiceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPISetGuestHousekeepingServiceRequestRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	guestHousekeepingServiceRequestCriteria *GuestHousekeepingServiceRequestCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) Authorization(authorization string) HousekeepingAPISetGuestHousekeepingServiceRequestRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) XAppKey(xAppKey string) HousekeepingAPISetGuestHousekeepingServiceRequestRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) XHotelid(xHotelid string) HousekeepingAPISetGuestHousekeepingServiceRequestRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to set the Guest Service status of an occupied room. The service status can be Do Not Disturb or Make Up Room.
func (r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) GuestHousekeepingServiceRequestCriteria(guestHousekeepingServiceRequestCriteria GuestHousekeepingServiceRequestCriteria) HousekeepingAPISetGuestHousekeepingServiceRequestRequest {
	r.guestHousekeepingServiceRequestCriteria = &guestHousekeepingServiceRequestCriteria
	return r
}

// External system code.
func (r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) XExternalsystem(xExternalsystem string) HousekeepingAPISetGuestHousekeepingServiceRequestRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPISetGuestHousekeepingServiceRequestRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) Execute() (*GuestHousekeepingServiceRequestStatus, *http.Response, error) {
	return r.ApiService.SetGuestHousekeepingServiceRequestExecute(r)
}

/*
SetGuestHousekeepingServiceRequest Set the Guest housekeeping service requests

This API allows you to Set the guest housekeeping service requests <p><strong>OperationId:</strong>setGuestHousekeepingServiceRequest</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPISetGuestHousekeepingServiceRequestRequest
*/
func (a *HousekeepingAPIService) SetGuestHousekeepingServiceRequest(ctx context.Context, hotelId string) HousekeepingAPISetGuestHousekeepingServiceRequestRequest {
	return HousekeepingAPISetGuestHousekeepingServiceRequestRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return GuestHousekeepingServiceRequestStatus
func (a *HousekeepingAPIService) SetGuestHousekeepingServiceRequestExecute(r HousekeepingAPISetGuestHousekeepingServiceRequestRequest) (*GuestHousekeepingServiceRequestStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GuestHousekeepingServiceRequestStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.SetGuestHousekeepingServiceRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/serviceRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.guestHousekeepingServiceRequestCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPISetRoomCleaningPriorityRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	roomId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomCleaningPriority *RoomCleaningPriority
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPISetRoomCleaningPriorityRequest) Authorization(authorization string) HousekeepingAPISetRoomCleaningPriorityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPISetRoomCleaningPriorityRequest) XAppKey(xAppKey string) HousekeepingAPISetRoomCleaningPriorityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPISetRoomCleaningPriorityRequest) XHotelid(xHotelid string) HousekeepingAPISetRoomCleaningPriorityRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to set a list of rooms as priority for cleaning. This will set a flag as priority and a priority number at the bottom of the current priority line.
func (r HousekeepingAPISetRoomCleaningPriorityRequest) RoomCleaningPriority(roomCleaningPriority RoomCleaningPriority) HousekeepingAPISetRoomCleaningPriorityRequest {
	r.roomCleaningPriority = &roomCleaningPriority
	return r
}

// External system code.
func (r HousekeepingAPISetRoomCleaningPriorityRequest) XExternalsystem(xExternalsystem string) HousekeepingAPISetRoomCleaningPriorityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPISetRoomCleaningPriorityRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPISetRoomCleaningPriorityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPISetRoomCleaningPriorityRequest) Execute() (*RoomCleaningPriorityRequestStatus, *http.Response, error) {
	return r.ApiService.SetRoomCleaningPriorityExecute(r)
}

/*
SetRoomCleaningPriority Set the room cleaning priority

This API will allow you to set the room cleaning priority. <p><strong>OperationId:</strong>setRoomCleaningPriority</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomId
 @param hotelId
 @return HousekeepingAPISetRoomCleaningPriorityRequest
*/
func (a *HousekeepingAPIService) SetRoomCleaningPriority(ctx context.Context, roomId string, hotelId string) HousekeepingAPISetRoomCleaningPriorityRequest {
	return HousekeepingAPISetRoomCleaningPriorityRequest{
		ApiService: a,
		ctx: ctx,
		roomId: roomId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RoomCleaningPriorityRequestStatus
func (a *HousekeepingAPIService) SetRoomCleaningPriorityExecute(r HousekeepingAPISetRoomCleaningPriorityRequest) (*RoomCleaningPriorityRequestStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomCleaningPriorityRequestStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.SetRoomCleaningPriority")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/{roomId}/cleaningPriority"
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomCleaningPriority
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPISetRoomConditionRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomCondition *RoomCondition
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPISetRoomConditionRequest) Authorization(authorization string) HousekeepingAPISetRoomConditionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPISetRoomConditionRequest) XAppKey(xAppKey string) HousekeepingAPISetRoomConditionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPISetRoomConditionRequest) XHotelid(xHotelid string) HousekeepingAPISetRoomConditionRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request element for setting room condition.
func (r HousekeepingAPISetRoomConditionRequest) RoomCondition(roomCondition RoomCondition) HousekeepingAPISetRoomConditionRequest {
	r.roomCondition = &roomCondition
	return r
}

// External system code.
func (r HousekeepingAPISetRoomConditionRequest) XExternalsystem(xExternalsystem string) HousekeepingAPISetRoomConditionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPISetRoomConditionRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPISetRoomConditionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPISetRoomConditionRequest) Execute() (*RoomConditionRequestStatus, *http.Response, error) {
	return r.ApiService.SetRoomConditionExecute(r)
}

/*
SetRoomCondition Set rooms condition

This API will allow you to set, change, or delete a condition on rooms. A condition is used to designate rooms that are available for show, set aside for special housekeeping attention, or are to be treated differently for any other reason. <p><strong>OperationId:</strong>setRoomCondition</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return HousekeepingAPISetRoomConditionRequest
*/
func (a *HousekeepingAPIService) SetRoomCondition(ctx context.Context, hotelId string) HousekeepingAPISetRoomConditionRequest {
	return HousekeepingAPISetRoomConditionRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return RoomConditionRequestStatus
func (a *HousekeepingAPIService) SetRoomConditionExecute(r HousekeepingAPISetRoomConditionRequest) (*RoomConditionRequestStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoomConditionRequestStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.SetRoomCondition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/conditions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomCondition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIShiftReservationHousekeepingScheduleRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	reservationId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	scheduleShiftRequest *ScheduleShiftRequest
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) Authorization(authorization string) HousekeepingAPIShiftReservationHousekeepingScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) XAppKey(xAppKey string) HousekeepingAPIShiftReservationHousekeepingScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) XHotelid(xHotelid string) HousekeepingAPIShiftReservationHousekeepingScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request with the information needed for the shift of the schedule.
func (r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) ScheduleShiftRequest(scheduleShiftRequest ScheduleShiftRequest) HousekeepingAPIShiftReservationHousekeepingScheduleRequest {
	r.scheduleShiftRequest = &scheduleShiftRequest
	return r
}

// External system code.
func (r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIShiftReservationHousekeepingScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIShiftReservationHousekeepingScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) Execute() (*ScheduledShiftRequest, *http.Response, error) {
	return r.ApiService.ShiftReservationHousekeepingScheduleExecute(r)
}

/*
ShiftReservationHousekeepingSchedule Shift reservation housekeeping schedule

This API will allow you to shift reservation housekeeping schedule. <p><strong>OperationId:</strong>shiftReservationHousekeepingSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservationId
 @param hotelId
 @return HousekeepingAPIShiftReservationHousekeepingScheduleRequest
*/
func (a *HousekeepingAPIService) ShiftReservationHousekeepingSchedule(ctx context.Context, reservationId string, hotelId string) HousekeepingAPIShiftReservationHousekeepingScheduleRequest {
	return HousekeepingAPIShiftReservationHousekeepingScheduleRequest{
		ApiService: a,
		ctx: ctx,
		reservationId: reservationId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ScheduledShiftRequest
func (a *HousekeepingAPIService) ShiftReservationHousekeepingScheduleExecute(r HousekeepingAPIShiftReservationHousekeepingScheduleRequest) (*ScheduledShiftRequest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledShiftRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.ShiftReservationHousekeepingSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules/shift"
	localVarPath = strings.Replace(localVarPath, "{"+"reservationId"+"}", url.PathEscape(parameterValueToString(r.reservationId, "reservationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.reservationId) < 1 {
		return localVarReturnValue, nil, reportError("reservationId must have at least 1 elements")
	}
	if strlen(r.reservationId) > 2000 {
		return localVarReturnValue, nil, reportError("reservationId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.scheduleShiftRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPISkipServicingTaskRoomRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	sheetNumber string
	roomId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskRoom *TaskRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPISkipServicingTaskRoomRequest) Authorization(authorization string) HousekeepingAPISkipServicingTaskRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPISkipServicingTaskRoomRequest) XAppKey(xAppKey string) HousekeepingAPISkipServicingTaskRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPISkipServicingTaskRoomRequest) XHotelid(xHotelid string) HousekeepingAPISkipServicingTaskRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to start servicing a task room. When the attendant starts working on a room this request can be called to set the times and the status to WORKING for the room.
func (r HousekeepingAPISkipServicingTaskRoomRequest) TaskRoom(taskRoom TaskRoom) HousekeepingAPISkipServicingTaskRoomRequest {
	r.taskRoom = &taskRoom
	return r
}

// External system code.
func (r HousekeepingAPISkipServicingTaskRoomRequest) XExternalsystem(xExternalsystem string) HousekeepingAPISkipServicingTaskRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPISkipServicingTaskRoomRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPISkipServicingTaskRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPISkipServicingTaskRoomRequest) Execute() (*SkipedServicingTaskRoom, *http.Response, error) {
	return r.ApiService.SkipServicingTaskRoomExecute(r)
}

/*
SkipServicingTaskRoom Skip servicing task room

This API will allow you to Skip servicing task room. <p><strong>OperationId:</strong>skipServicingTaskRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sheetNumber
 @param roomId
 @param hotelId
 @return HousekeepingAPISkipServicingTaskRoomRequest
*/
func (a *HousekeepingAPIService) SkipServicingTaskRoom(ctx context.Context, sheetNumber string, roomId string, hotelId string) HousekeepingAPISkipServicingTaskRoomRequest {
	return HousekeepingAPISkipServicingTaskRoomRequest{
		ApiService: a,
		ctx: ctx,
		sheetNumber: sheetNumber,
		roomId: roomId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return SkipedServicingTaskRoom
func (a *HousekeepingAPIService) SkipServicingTaskRoomExecute(r HousekeepingAPISkipServicingTaskRoomRequest) (*SkipedServicingTaskRoom, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SkipedServicingTaskRoom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.SkipServicingTaskRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/skip"
	localVarPath = strings.Replace(localVarPath, "{"+"sheetNumber"+"}", url.PathEscape(parameterValueToString(r.sheetNumber, "sheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("sheetNumber must have at least 1 elements")
	}
	if strlen(r.sheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("sheetNumber must have less than 2000 elements")
	}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIStartServiceBreakRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	taskSheetNumber string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskRoom *TaskRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIStartServiceBreakRequest) Authorization(authorization string) HousekeepingAPIStartServiceBreakRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIStartServiceBreakRequest) XAppKey(xAppKey string) HousekeepingAPIStartServiceBreakRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIStartServiceBreakRequest) XHotelid(xHotelid string) HousekeepingAPIStartServiceBreakRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to start service break.
func (r HousekeepingAPIStartServiceBreakRequest) TaskRoom(taskRoom TaskRoom) HousekeepingAPIStartServiceBreakRequest {
	r.taskRoom = &taskRoom
	return r
}

// External system code.
func (r HousekeepingAPIStartServiceBreakRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIStartServiceBreakRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIStartServiceBreakRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIStartServiceBreakRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIStartServiceBreakRequest) Execute() (*StartedServiceBreak, *http.Response, error) {
	return r.ApiService.StartServiceBreakExecute(r)
}

/*
StartServiceBreak Start the service break

This API allows you to Start the Attendant's service break. <p><strong>OperationId:</strong>startServiceBreak</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskSheetNumber
 @param hotelId
 @return HousekeepingAPIStartServiceBreakRequest
*/
func (a *HousekeepingAPIService) StartServiceBreak(ctx context.Context, taskSheetNumber string, hotelId string) HousekeepingAPIStartServiceBreakRequest {
	return HousekeepingAPIStartServiceBreakRequest{
		ApiService: a,
		ctx: ctx,
		taskSheetNumber: taskSheetNumber,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return StartedServiceBreak
func (a *HousekeepingAPIService) StartServiceBreakExecute(r HousekeepingAPIStartServiceBreakRequest) (*StartedServiceBreak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StartedServiceBreak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.StartServiceBreak")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/{taskSheetNumber}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"taskSheetNumber"+"}", url.PathEscape(parameterValueToString(r.taskSheetNumber, "taskSheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.taskSheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("taskSheetNumber must have at least 1 elements")
	}
	if strlen(r.taskSheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("taskSheetNumber must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIStartServicingTaskRoomRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	sheetNumber string
	roomId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskRoom *TaskRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIStartServicingTaskRoomRequest) Authorization(authorization string) HousekeepingAPIStartServicingTaskRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIStartServicingTaskRoomRequest) XAppKey(xAppKey string) HousekeepingAPIStartServicingTaskRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIStartServicingTaskRoomRequest) XHotelid(xHotelid string) HousekeepingAPIStartServicingTaskRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to start servicing a task room. When the attendant starts working on a room this request can be called to set the times and the status to WORKING for the room.
func (r HousekeepingAPIStartServicingTaskRoomRequest) TaskRoom(taskRoom TaskRoom) HousekeepingAPIStartServicingTaskRoomRequest {
	r.taskRoom = &taskRoom
	return r
}

// External system code.
func (r HousekeepingAPIStartServicingTaskRoomRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIStartServicingTaskRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIStartServicingTaskRoomRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIStartServicingTaskRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIStartServicingTaskRoomRequest) Execute() (*ServiceTime, *http.Response, error) {
	return r.ApiService.StartServicingTaskRoomExecute(r)
}

/*
StartServicingTaskRoom Start servicing task room

This API will allow you to start servicing task room. <p><strong>OperationId:</strong>startServicingTaskRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sheetNumber
 @param roomId
 @param hotelId
 @return HousekeepingAPIStartServicingTaskRoomRequest
*/
func (a *HousekeepingAPIService) StartServicingTaskRoom(ctx context.Context, sheetNumber string, roomId string, hotelId string) HousekeepingAPIStartServicingTaskRoomRequest {
	return HousekeepingAPIStartServicingTaskRoomRequest{
		ApiService: a,
		ctx: ctx,
		sheetNumber: sheetNumber,
		roomId: roomId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ServiceTime
func (a *HousekeepingAPIService) StartServicingTaskRoomExecute(r HousekeepingAPIStartServicingTaskRoomRequest) (*ServiceTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.StartServicingTaskRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"sheetNumber"+"}", url.PathEscape(parameterValueToString(r.sheetNumber, "sheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("sheetNumber must have at least 1 elements")
	}
	if strlen(r.sheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("sheetNumber must have less than 2000 elements")
	}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIUnResolveRoomMaintenanceRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	mainteananceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomMaintenance *RoomMaintenance
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIUnResolveRoomMaintenanceRequest) Authorization(authorization string) HousekeepingAPIUnResolveRoomMaintenanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIUnResolveRoomMaintenanceRequest) XAppKey(xAppKey string) HousekeepingAPIUnResolveRoomMaintenanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIUnResolveRoomMaintenanceRequest) XHotelid(xHotelid string) HousekeepingAPIUnResolveRoomMaintenanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to set unresolved status for room maintenance request.
func (r HousekeepingAPIUnResolveRoomMaintenanceRequest) RoomMaintenance(roomMaintenance RoomMaintenance) HousekeepingAPIUnResolveRoomMaintenanceRequest {
	r.roomMaintenance = &roomMaintenance
	return r
}

// External system code.
func (r HousekeepingAPIUnResolveRoomMaintenanceRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIUnResolveRoomMaintenanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIUnResolveRoomMaintenanceRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIUnResolveRoomMaintenanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIUnResolveRoomMaintenanceRequest) Execute() (*UnresolvedRoomMaintenance, *http.Response, error) {
	return r.ApiService.UnResolveRoomMaintenanceExecute(r)
}

/*
UnResolveRoomMaintenance unResolve the maintenances for rooms

Use this API to unResolve maintenances for rooms. <p><strong>OperationId:</strong>unResolveRoomMaintenance</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mainteananceId
 @param hotelId
 @return HousekeepingAPIUnResolveRoomMaintenanceRequest
*/
func (a *HousekeepingAPIService) UnResolveRoomMaintenance(ctx context.Context, mainteananceId string, hotelId string) HousekeepingAPIUnResolveRoomMaintenanceRequest {
	return HousekeepingAPIUnResolveRoomMaintenanceRequest{
		ApiService: a,
		ctx: ctx,
		mainteananceId: mainteananceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return UnresolvedRoomMaintenance
func (a *HousekeepingAPIService) UnResolveRoomMaintenanceExecute(r HousekeepingAPIUnResolveRoomMaintenanceRequest) (*UnresolvedRoomMaintenance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnresolvedRoomMaintenance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.UnResolveRoomMaintenance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/maintenances/{mainteananceId}/unResolve"
	localVarPath = strings.Replace(localVarPath, "{"+"mainteananceId"+"}", url.PathEscape(parameterValueToString(r.mainteananceId, "mainteananceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.mainteananceId) < 1 {
		return localVarReturnValue, nil, reportError("mainteananceId must have at least 1 elements")
	}
	if strlen(r.mainteananceId) > 2000 {
		return localVarReturnValue, nil, reportError("mainteananceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.roomMaintenance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type HousekeepingAPIUnlockTaskSheetRequest struct {
	ctx context.Context
	ApiService *HousekeepingAPIService
	sheetNumber string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	taskSheetToUnlock *TaskSheetToUnlock
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r HousekeepingAPIUnlockTaskSheetRequest) Authorization(authorization string) HousekeepingAPIUnlockTaskSheetRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r HousekeepingAPIUnlockTaskSheetRequest) XAppKey(xAppKey string) HousekeepingAPIUnlockTaskSheetRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r HousekeepingAPIUnlockTaskSheetRequest) XHotelid(xHotelid string) HousekeepingAPIUnlockTaskSheetRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request for unlocking a task sheet.
func (r HousekeepingAPIUnlockTaskSheetRequest) TaskSheetToUnlock(taskSheetToUnlock TaskSheetToUnlock) HousekeepingAPIUnlockTaskSheetRequest {
	r.taskSheetToUnlock = &taskSheetToUnlock
	return r
}

// External system code.
func (r HousekeepingAPIUnlockTaskSheetRequest) XExternalsystem(xExternalsystem string) HousekeepingAPIUnlockTaskSheetRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r HousekeepingAPIUnlockTaskSheetRequest) AcceptLanguage(acceptLanguage string) HousekeepingAPIUnlockTaskSheetRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r HousekeepingAPIUnlockTaskSheetRequest) Execute() (*UnlockedTaskSheet, *http.Response, error) {
	return r.ApiService.UnlockTaskSheetExecute(r)
}

/*
UnlockTaskSheet Unlock the task sheet

This API allows you to Unlock the task sheet. <p><strong>OperationId:</strong>unlockTaskSheet</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sheetNumber
 @param hotelId
 @return HousekeepingAPIUnlockTaskSheetRequest
*/
func (a *HousekeepingAPIService) UnlockTaskSheet(ctx context.Context, sheetNumber string, hotelId string) HousekeepingAPIUnlockTaskSheetRequest {
	return HousekeepingAPIUnlockTaskSheetRequest{
		ApiService: a,
		ctx: ctx,
		sheetNumber: sheetNumber,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return UnlockedTaskSheet
func (a *HousekeepingAPIService) UnlockTaskSheetExecute(r HousekeepingAPIUnlockTaskSheetRequest) (*UnlockedTaskSheet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnlockedTaskSheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HousekeepingAPIService.UnlockTaskSheet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/taskSheets/{sheetNumber}/unlock"
	localVarPath = strings.Replace(localVarPath, "{"+"sheetNumber"+"}", url.PathEscape(parameterValueToString(r.sheetNumber, "sheetNumber")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sheetNumber) < 1 {
		return localVarReturnValue, nil, reportError("sheetNumber must have at least 1 elements")
	}
	if strlen(r.sheetNumber) > 2000 {
		return localVarReturnValue, nil, reportError("sheetNumber must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.taskSheetToUnlock
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
