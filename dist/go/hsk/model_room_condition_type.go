/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the RoomConditionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomConditionType{}

// RoomConditionType Condition to be assigned on the room.
type RoomConditionType struct {
	RoomCondition *CodeDescriptionType `json:"roomCondition,omitempty"`
	AssignmentType *RoomConditionAssigmentType `json:"assignmentType,omitempty"`
	// Remarks on room condition assignment.
	Remarks *string `json:"remarks,omitempty"`
}

// NewRoomConditionType instantiates a new RoomConditionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomConditionType() *RoomConditionType {
	this := RoomConditionType{}
	return &this
}

// NewRoomConditionTypeWithDefaults instantiates a new RoomConditionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomConditionTypeWithDefaults() *RoomConditionType {
	this := RoomConditionType{}
	return &this
}

// GetRoomCondition returns the RoomCondition field value if set, zero value otherwise.
func (o *RoomConditionType) GetRoomCondition() CodeDescriptionType {
	if o == nil || IsNil(o.RoomCondition) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.RoomCondition
}

// GetRoomConditionOk returns a tuple with the RoomCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomConditionType) GetRoomConditionOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.RoomCondition) {
		return nil, false
	}
	return o.RoomCondition, true
}

// HasRoomCondition returns a boolean if a field has been set.
func (o *RoomConditionType) HasRoomCondition() bool {
	if o != nil && !IsNil(o.RoomCondition) {
		return true
	}

	return false
}

// SetRoomCondition gets a reference to the given CodeDescriptionType and assigns it to the RoomCondition field.
func (o *RoomConditionType) SetRoomCondition(v CodeDescriptionType) {
	o.RoomCondition = &v
}

// GetAssignmentType returns the AssignmentType field value if set, zero value otherwise.
func (o *RoomConditionType) GetAssignmentType() RoomConditionAssigmentType {
	if o == nil || IsNil(o.AssignmentType) {
		var ret RoomConditionAssigmentType
		return ret
	}
	return *o.AssignmentType
}

// GetAssignmentTypeOk returns a tuple with the AssignmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomConditionType) GetAssignmentTypeOk() (*RoomConditionAssigmentType, bool) {
	if o == nil || IsNil(o.AssignmentType) {
		return nil, false
	}
	return o.AssignmentType, true
}

// HasAssignmentType returns a boolean if a field has been set.
func (o *RoomConditionType) HasAssignmentType() bool {
	if o != nil && !IsNil(o.AssignmentType) {
		return true
	}

	return false
}

// SetAssignmentType gets a reference to the given RoomConditionAssigmentType and assigns it to the AssignmentType field.
func (o *RoomConditionType) SetAssignmentType(v RoomConditionAssigmentType) {
	o.AssignmentType = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *RoomConditionType) GetRemarks() string {
	if o == nil || IsNil(o.Remarks) {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomConditionType) GetRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.Remarks) {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *RoomConditionType) HasRemarks() bool {
	if o != nil && !IsNil(o.Remarks) {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *RoomConditionType) SetRemarks(v string) {
	o.Remarks = &v
}

func (o RoomConditionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomConditionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomCondition) {
		toSerialize["roomCondition"] = o.RoomCondition
	}
	if !IsNil(o.AssignmentType) {
		toSerialize["assignmentType"] = o.AssignmentType
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	return toSerialize, nil
}

type NullableRoomConditionType struct {
	value *RoomConditionType
	isSet bool
}

func (v NullableRoomConditionType) Get() *RoomConditionType {
	return v.value
}

func (v *NullableRoomConditionType) Set(val *RoomConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomConditionType(val *RoomConditionType) *NullableRoomConditionType {
	return &NullableRoomConditionType{value: val, isSet: true}
}

func (v NullableRoomConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


