/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the ImageResultType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageResultType{}

// ImageResultType struct for ImageResultType
type ImageResultType struct {
	// Base64Image image content of the file.
	Base64Image *string `json:"base64Image,omitempty"`
	// Image file to upload.
	Image *string `json:"image,omitempty"`
	ImageId *UniqueIDType `json:"imageId,omitempty"`
	ImageLinkId *UniqueIDType `json:"imageLinkId,omitempty"`
	// Image set describing path of image.
	ImageSet *string `json:"imageSet,omitempty"`
	LinkId *UniqueIDType `json:"linkId,omitempty"`
	// Mime type of the Image.
	MimeType *string `json:"mimeType,omitempty"`
}

// NewImageResultType instantiates a new ImageResultType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageResultType() *ImageResultType {
	this := ImageResultType{}
	return &this
}

// NewImageResultTypeWithDefaults instantiates a new ImageResultType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageResultTypeWithDefaults() *ImageResultType {
	this := ImageResultType{}
	return &this
}

// GetBase64Image returns the Base64Image field value if set, zero value otherwise.
func (o *ImageResultType) GetBase64Image() string {
	if o == nil || IsNil(o.Base64Image) {
		var ret string
		return ret
	}
	return *o.Base64Image
}

// GetBase64ImageOk returns a tuple with the Base64Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageResultType) GetBase64ImageOk() (*string, bool) {
	if o == nil || IsNil(o.Base64Image) {
		return nil, false
	}
	return o.Base64Image, true
}

// HasBase64Image returns a boolean if a field has been set.
func (o *ImageResultType) HasBase64Image() bool {
	if o != nil && !IsNil(o.Base64Image) {
		return true
	}

	return false
}

// SetBase64Image gets a reference to the given string and assigns it to the Base64Image field.
func (o *ImageResultType) SetBase64Image(v string) {
	o.Base64Image = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ImageResultType) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageResultType) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ImageResultType) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ImageResultType) SetImage(v string) {
	o.Image = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *ImageResultType) GetImageId() UniqueIDType {
	if o == nil || IsNil(o.ImageId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageResultType) GetImageIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *ImageResultType) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given UniqueIDType and assigns it to the ImageId field.
func (o *ImageResultType) SetImageId(v UniqueIDType) {
	o.ImageId = &v
}

// GetImageLinkId returns the ImageLinkId field value if set, zero value otherwise.
func (o *ImageResultType) GetImageLinkId() UniqueIDType {
	if o == nil || IsNil(o.ImageLinkId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ImageLinkId
}

// GetImageLinkIdOk returns a tuple with the ImageLinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageResultType) GetImageLinkIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ImageLinkId) {
		return nil, false
	}
	return o.ImageLinkId, true
}

// HasImageLinkId returns a boolean if a field has been set.
func (o *ImageResultType) HasImageLinkId() bool {
	if o != nil && !IsNil(o.ImageLinkId) {
		return true
	}

	return false
}

// SetImageLinkId gets a reference to the given UniqueIDType and assigns it to the ImageLinkId field.
func (o *ImageResultType) SetImageLinkId(v UniqueIDType) {
	o.ImageLinkId = &v
}

// GetImageSet returns the ImageSet field value if set, zero value otherwise.
func (o *ImageResultType) GetImageSet() string {
	if o == nil || IsNil(o.ImageSet) {
		var ret string
		return ret
	}
	return *o.ImageSet
}

// GetImageSetOk returns a tuple with the ImageSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageResultType) GetImageSetOk() (*string, bool) {
	if o == nil || IsNil(o.ImageSet) {
		return nil, false
	}
	return o.ImageSet, true
}

// HasImageSet returns a boolean if a field has been set.
func (o *ImageResultType) HasImageSet() bool {
	if o != nil && !IsNil(o.ImageSet) {
		return true
	}

	return false
}

// SetImageSet gets a reference to the given string and assigns it to the ImageSet field.
func (o *ImageResultType) SetImageSet(v string) {
	o.ImageSet = &v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *ImageResultType) GetLinkId() UniqueIDType {
	if o == nil || IsNil(o.LinkId) {
		var ret UniqueIDType
		return ret
	}
	return *o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageResultType) GetLinkIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.LinkId) {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *ImageResultType) HasLinkId() bool {
	if o != nil && !IsNil(o.LinkId) {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given UniqueIDType and assigns it to the LinkId field.
func (o *ImageResultType) SetLinkId(v UniqueIDType) {
	o.LinkId = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *ImageResultType) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageResultType) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *ImageResultType) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *ImageResultType) SetMimeType(v string) {
	o.MimeType = &v
}

func (o ImageResultType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageResultType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Base64Image) {
		toSerialize["base64Image"] = o.Base64Image
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.ImageId) {
		toSerialize["imageId"] = o.ImageId
	}
	if !IsNil(o.ImageLinkId) {
		toSerialize["imageLinkId"] = o.ImageLinkId
	}
	if !IsNil(o.ImageSet) {
		toSerialize["imageSet"] = o.ImageSet
	}
	if !IsNil(o.LinkId) {
		toSerialize["linkId"] = o.LinkId
	}
	if !IsNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	return toSerialize, nil
}

type NullableImageResultType struct {
	value *ImageResultType
	isSet bool
}

func (v NullableImageResultType) Get() *ImageResultType {
	return v.value
}

func (v *NullableImageResultType) Set(val *ImageResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageResultType(val *ImageResultType) *NullableImageResultType {
	return &NullableImageResultType{value: val, isSet: true}
}

func (v NullableImageResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


