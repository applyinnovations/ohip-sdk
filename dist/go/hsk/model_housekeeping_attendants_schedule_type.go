/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the HousekeepingAttendantsScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HousekeepingAttendantsScheduleType{}

// HousekeepingAttendantsScheduleType Collection of Attendants.
type HousekeepingAttendantsScheduleType struct {
	// Property code the Housekeeping Attendant belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Schedule date of attendants' assignment. Used when attendants to scheduled are of the same date.
	ScheduleDate *string `json:"scheduleDate,omitempty"`
	AttendantsSchedule []HousekeepingAttendantScheduleType `json:"attendantsSchedule,omitempty"`
}

// NewHousekeepingAttendantsScheduleType instantiates a new HousekeepingAttendantsScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHousekeepingAttendantsScheduleType() *HousekeepingAttendantsScheduleType {
	this := HousekeepingAttendantsScheduleType{}
	return &this
}

// NewHousekeepingAttendantsScheduleTypeWithDefaults instantiates a new HousekeepingAttendantsScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHousekeepingAttendantsScheduleTypeWithDefaults() *HousekeepingAttendantsScheduleType {
	this := HousekeepingAttendantsScheduleType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HousekeepingAttendantsScheduleType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingAttendantsScheduleType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HousekeepingAttendantsScheduleType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HousekeepingAttendantsScheduleType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetScheduleDate returns the ScheduleDate field value if set, zero value otherwise.
func (o *HousekeepingAttendantsScheduleType) GetScheduleDate() string {
	if o == nil || IsNil(o.ScheduleDate) {
		var ret string
		return ret
	}
	return *o.ScheduleDate
}

// GetScheduleDateOk returns a tuple with the ScheduleDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingAttendantsScheduleType) GetScheduleDateOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleDate) {
		return nil, false
	}
	return o.ScheduleDate, true
}

// HasScheduleDate returns a boolean if a field has been set.
func (o *HousekeepingAttendantsScheduleType) HasScheduleDate() bool {
	if o != nil && !IsNil(o.ScheduleDate) {
		return true
	}

	return false
}

// SetScheduleDate gets a reference to the given string and assigns it to the ScheduleDate field.
func (o *HousekeepingAttendantsScheduleType) SetScheduleDate(v string) {
	o.ScheduleDate = &v
}

// GetAttendantsSchedule returns the AttendantsSchedule field value if set, zero value otherwise.
func (o *HousekeepingAttendantsScheduleType) GetAttendantsSchedule() []HousekeepingAttendantScheduleType {
	if o == nil || IsNil(o.AttendantsSchedule) {
		var ret []HousekeepingAttendantScheduleType
		return ret
	}
	return o.AttendantsSchedule
}

// GetAttendantsScheduleOk returns a tuple with the AttendantsSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingAttendantsScheduleType) GetAttendantsScheduleOk() ([]HousekeepingAttendantScheduleType, bool) {
	if o == nil || IsNil(o.AttendantsSchedule) {
		return nil, false
	}
	return o.AttendantsSchedule, true
}

// HasAttendantsSchedule returns a boolean if a field has been set.
func (o *HousekeepingAttendantsScheduleType) HasAttendantsSchedule() bool {
	if o != nil && !IsNil(o.AttendantsSchedule) {
		return true
	}

	return false
}

// SetAttendantsSchedule gets a reference to the given []HousekeepingAttendantScheduleType and assigns it to the AttendantsSchedule field.
func (o *HousekeepingAttendantsScheduleType) SetAttendantsSchedule(v []HousekeepingAttendantScheduleType) {
	o.AttendantsSchedule = v
}

func (o HousekeepingAttendantsScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HousekeepingAttendantsScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ScheduleDate) {
		toSerialize["scheduleDate"] = o.ScheduleDate
	}
	if !IsNil(o.AttendantsSchedule) {
		toSerialize["attendantsSchedule"] = o.AttendantsSchedule
	}
	return toSerialize, nil
}

type NullableHousekeepingAttendantsScheduleType struct {
	value *HousekeepingAttendantsScheduleType
	isSet bool
}

func (v NullableHousekeepingAttendantsScheduleType) Get() *HousekeepingAttendantsScheduleType {
	return v.value
}

func (v *NullableHousekeepingAttendantsScheduleType) Set(val *HousekeepingAttendantsScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingAttendantsScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingAttendantsScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingAttendantsScheduleType(val *HousekeepingAttendantsScheduleType) *NullableHousekeepingAttendantsScheduleType {
	return &NullableHousekeepingAttendantsScheduleType{value: val, isSet: true}
}

func (v NullableHousekeepingAttendantsScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingAttendantsScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


