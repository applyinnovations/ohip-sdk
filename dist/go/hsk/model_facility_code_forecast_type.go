/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the FacilityCodeForecastType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FacilityCodeForecastType{}

// FacilityCodeForecastType A facility code and its forecast.
type FacilityCodeForecastType struct {
	Code *CodeDescriptionType `json:"code,omitempty"`
	// Collection of dates and their quantities.
	Forecast []ForecastQuantityType `json:"forecast,omitempty"`
}

// NewFacilityCodeForecastType instantiates a new FacilityCodeForecastType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacilityCodeForecastType() *FacilityCodeForecastType {
	this := FacilityCodeForecastType{}
	return &this
}

// NewFacilityCodeForecastTypeWithDefaults instantiates a new FacilityCodeForecastType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacilityCodeForecastTypeWithDefaults() *FacilityCodeForecastType {
	this := FacilityCodeForecastType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FacilityCodeForecastType) GetCode() CodeDescriptionType {
	if o == nil || IsNil(o.Code) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacilityCodeForecastType) GetCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FacilityCodeForecastType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given CodeDescriptionType and assigns it to the Code field.
func (o *FacilityCodeForecastType) SetCode(v CodeDescriptionType) {
	o.Code = &v
}

// GetForecast returns the Forecast field value if set, zero value otherwise.
func (o *FacilityCodeForecastType) GetForecast() []ForecastQuantityType {
	if o == nil || IsNil(o.Forecast) {
		var ret []ForecastQuantityType
		return ret
	}
	return o.Forecast
}

// GetForecastOk returns a tuple with the Forecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacilityCodeForecastType) GetForecastOk() ([]ForecastQuantityType, bool) {
	if o == nil || IsNil(o.Forecast) {
		return nil, false
	}
	return o.Forecast, true
}

// HasForecast returns a boolean if a field has been set.
func (o *FacilityCodeForecastType) HasForecast() bool {
	if o != nil && !IsNil(o.Forecast) {
		return true
	}

	return false
}

// SetForecast gets a reference to the given []ForecastQuantityType and assigns it to the Forecast field.
func (o *FacilityCodeForecastType) SetForecast(v []ForecastQuantityType) {
	o.Forecast = v
}

func (o FacilityCodeForecastType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FacilityCodeForecastType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Forecast) {
		toSerialize["forecast"] = o.Forecast
	}
	return toSerialize, nil
}

type NullableFacilityCodeForecastType struct {
	value *FacilityCodeForecastType
	isSet bool
}

func (v NullableFacilityCodeForecastType) Get() *FacilityCodeForecastType {
	return v.value
}

func (v *NullableFacilityCodeForecastType) Set(val *FacilityCodeForecastType) {
	v.value = val
	v.isSet = true
}

func (v NullableFacilityCodeForecastType) IsSet() bool {
	return v.isSet
}

func (v *NullableFacilityCodeForecastType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacilityCodeForecastType(val *FacilityCodeForecastType) *NullableFacilityCodeForecastType {
	return &NullableFacilityCodeForecastType{value: val, isSet: true}
}

func (v NullableFacilityCodeForecastType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacilityCodeForecastType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


