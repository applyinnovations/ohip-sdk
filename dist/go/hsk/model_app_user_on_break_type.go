/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the AppUserOnBreakType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppUserOnBreakType{}

// AppUserOnBreakType Information about on break start time and the application user who goes on break.
type AppUserOnBreakType struct {
	AppUser *ApplicationUserType `json:"appUser,omitempty"`
	// Start time when the break started.
	StartTime *string `json:"startTime,omitempty"`
}

// NewAppUserOnBreakType instantiates a new AppUserOnBreakType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppUserOnBreakType() *AppUserOnBreakType {
	this := AppUserOnBreakType{}
	return &this
}

// NewAppUserOnBreakTypeWithDefaults instantiates a new AppUserOnBreakType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppUserOnBreakTypeWithDefaults() *AppUserOnBreakType {
	this := AppUserOnBreakType{}
	return &this
}

// GetAppUser returns the AppUser field value if set, zero value otherwise.
func (o *AppUserOnBreakType) GetAppUser() ApplicationUserType {
	if o == nil || IsNil(o.AppUser) {
		var ret ApplicationUserType
		return ret
	}
	return *o.AppUser
}

// GetAppUserOk returns a tuple with the AppUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUserOnBreakType) GetAppUserOk() (*ApplicationUserType, bool) {
	if o == nil || IsNil(o.AppUser) {
		return nil, false
	}
	return o.AppUser, true
}

// HasAppUser returns a boolean if a field has been set.
func (o *AppUserOnBreakType) HasAppUser() bool {
	if o != nil && !IsNil(o.AppUser) {
		return true
	}

	return false
}

// SetAppUser gets a reference to the given ApplicationUserType and assigns it to the AppUser field.
func (o *AppUserOnBreakType) SetAppUser(v ApplicationUserType) {
	o.AppUser = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *AppUserOnBreakType) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppUserOnBreakType) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *AppUserOnBreakType) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *AppUserOnBreakType) SetStartTime(v string) {
	o.StartTime = &v
}

func (o AppUserOnBreakType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppUserOnBreakType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppUser) {
		toSerialize["appUser"] = o.AppUser
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableAppUserOnBreakType struct {
	value *AppUserOnBreakType
	isSet bool
}

func (v NullableAppUserOnBreakType) Get() *AppUserOnBreakType {
	return v.value
}

func (v *NullableAppUserOnBreakType) Set(val *AppUserOnBreakType) {
	v.value = val
	v.isSet = true
}

func (v NullableAppUserOnBreakType) IsSet() bool {
	return v.isSet
}

func (v *NullableAppUserOnBreakType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppUserOnBreakType(val *AppUserOnBreakType) *NullableAppUserOnBreakType {
	return &NullableAppUserOnBreakType{value: val, isSet: true}
}

func (v NullableAppUserOnBreakType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppUserOnBreakType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


