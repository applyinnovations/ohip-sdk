/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the MoveTaskRoomsCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MoveTaskRoomsCriteriaType{}

// MoveTaskRoomsCriteriaType Type for moving rooms between two task sheets.
type MoveTaskRoomsCriteriaType struct {
	// The task sheet number from which the rooms are being moved.
	FromTaskSheetNumber *int32 `json:"fromTaskSheetNumber,omitempty"`
	// The property where the task sheets exist for which the rooms are being moved.
	HotelId *string `json:"hotelId,omitempty"`
	// List of rooms which have to be moved from one task sheet to another.
	Rooms []RoomType `json:"rooms,omitempty"`
	// The task code for the task sheets, for which the rooms are being moved.
	TaskCode []HousekeepingTaskCodeType `json:"taskCode,omitempty"`
	// The date of the task sheet.
	TaskDate *string `json:"taskDate,omitempty"`
	// The task sheet number to which the rooms should be moved.
	ToTaskSheetNumber *int32 `json:"toTaskSheetNumber,omitempty"`
}

// NewMoveTaskRoomsCriteriaType instantiates a new MoveTaskRoomsCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoveTaskRoomsCriteriaType() *MoveTaskRoomsCriteriaType {
	this := MoveTaskRoomsCriteriaType{}
	return &this
}

// NewMoveTaskRoomsCriteriaTypeWithDefaults instantiates a new MoveTaskRoomsCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoveTaskRoomsCriteriaTypeWithDefaults() *MoveTaskRoomsCriteriaType {
	this := MoveTaskRoomsCriteriaType{}
	return &this
}

// GetFromTaskSheetNumber returns the FromTaskSheetNumber field value if set, zero value otherwise.
func (o *MoveTaskRoomsCriteriaType) GetFromTaskSheetNumber() int32 {
	if o == nil || IsNil(o.FromTaskSheetNumber) {
		var ret int32
		return ret
	}
	return *o.FromTaskSheetNumber
}

// GetFromTaskSheetNumberOk returns a tuple with the FromTaskSheetNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskRoomsCriteriaType) GetFromTaskSheetNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.FromTaskSheetNumber) {
		return nil, false
	}
	return o.FromTaskSheetNumber, true
}

// HasFromTaskSheetNumber returns a boolean if a field has been set.
func (o *MoveTaskRoomsCriteriaType) HasFromTaskSheetNumber() bool {
	if o != nil && !IsNil(o.FromTaskSheetNumber) {
		return true
	}

	return false
}

// SetFromTaskSheetNumber gets a reference to the given int32 and assigns it to the FromTaskSheetNumber field.
func (o *MoveTaskRoomsCriteriaType) SetFromTaskSheetNumber(v int32) {
	o.FromTaskSheetNumber = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MoveTaskRoomsCriteriaType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskRoomsCriteriaType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MoveTaskRoomsCriteriaType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MoveTaskRoomsCriteriaType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *MoveTaskRoomsCriteriaType) GetRooms() []RoomType {
	if o == nil || IsNil(o.Rooms) {
		var ret []RoomType
		return ret
	}
	return o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskRoomsCriteriaType) GetRoomsOk() ([]RoomType, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *MoveTaskRoomsCriteriaType) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given []RoomType and assigns it to the Rooms field.
func (o *MoveTaskRoomsCriteriaType) SetRooms(v []RoomType) {
	o.Rooms = v
}

// GetTaskCode returns the TaskCode field value if set, zero value otherwise.
func (o *MoveTaskRoomsCriteriaType) GetTaskCode() []HousekeepingTaskCodeType {
	if o == nil || IsNil(o.TaskCode) {
		var ret []HousekeepingTaskCodeType
		return ret
	}
	return o.TaskCode
}

// GetTaskCodeOk returns a tuple with the TaskCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskRoomsCriteriaType) GetTaskCodeOk() ([]HousekeepingTaskCodeType, bool) {
	if o == nil || IsNil(o.TaskCode) {
		return nil, false
	}
	return o.TaskCode, true
}

// HasTaskCode returns a boolean if a field has been set.
func (o *MoveTaskRoomsCriteriaType) HasTaskCode() bool {
	if o != nil && !IsNil(o.TaskCode) {
		return true
	}

	return false
}

// SetTaskCode gets a reference to the given []HousekeepingTaskCodeType and assigns it to the TaskCode field.
func (o *MoveTaskRoomsCriteriaType) SetTaskCode(v []HousekeepingTaskCodeType) {
	o.TaskCode = v
}

// GetTaskDate returns the TaskDate field value if set, zero value otherwise.
func (o *MoveTaskRoomsCriteriaType) GetTaskDate() string {
	if o == nil || IsNil(o.TaskDate) {
		var ret string
		return ret
	}
	return *o.TaskDate
}

// GetTaskDateOk returns a tuple with the TaskDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskRoomsCriteriaType) GetTaskDateOk() (*string, bool) {
	if o == nil || IsNil(o.TaskDate) {
		return nil, false
	}
	return o.TaskDate, true
}

// HasTaskDate returns a boolean if a field has been set.
func (o *MoveTaskRoomsCriteriaType) HasTaskDate() bool {
	if o != nil && !IsNil(o.TaskDate) {
		return true
	}

	return false
}

// SetTaskDate gets a reference to the given string and assigns it to the TaskDate field.
func (o *MoveTaskRoomsCriteriaType) SetTaskDate(v string) {
	o.TaskDate = &v
}

// GetToTaskSheetNumber returns the ToTaskSheetNumber field value if set, zero value otherwise.
func (o *MoveTaskRoomsCriteriaType) GetToTaskSheetNumber() int32 {
	if o == nil || IsNil(o.ToTaskSheetNumber) {
		var ret int32
		return ret
	}
	return *o.ToTaskSheetNumber
}

// GetToTaskSheetNumberOk returns a tuple with the ToTaskSheetNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoveTaskRoomsCriteriaType) GetToTaskSheetNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.ToTaskSheetNumber) {
		return nil, false
	}
	return o.ToTaskSheetNumber, true
}

// HasToTaskSheetNumber returns a boolean if a field has been set.
func (o *MoveTaskRoomsCriteriaType) HasToTaskSheetNumber() bool {
	if o != nil && !IsNil(o.ToTaskSheetNumber) {
		return true
	}

	return false
}

// SetToTaskSheetNumber gets a reference to the given int32 and assigns it to the ToTaskSheetNumber field.
func (o *MoveTaskRoomsCriteriaType) SetToTaskSheetNumber(v int32) {
	o.ToTaskSheetNumber = &v
}

func (o MoveTaskRoomsCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MoveTaskRoomsCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromTaskSheetNumber) {
		toSerialize["fromTaskSheetNumber"] = o.FromTaskSheetNumber
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	if !IsNil(o.TaskCode) {
		toSerialize["taskCode"] = o.TaskCode
	}
	if !IsNil(o.TaskDate) {
		toSerialize["taskDate"] = o.TaskDate
	}
	if !IsNil(o.ToTaskSheetNumber) {
		toSerialize["toTaskSheetNumber"] = o.ToTaskSheetNumber
	}
	return toSerialize, nil
}

type NullableMoveTaskRoomsCriteriaType struct {
	value *MoveTaskRoomsCriteriaType
	isSet bool
}

func (v NullableMoveTaskRoomsCriteriaType) Get() *MoveTaskRoomsCriteriaType {
	return v.value
}

func (v *NullableMoveTaskRoomsCriteriaType) Set(val *MoveTaskRoomsCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableMoveTaskRoomsCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableMoveTaskRoomsCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoveTaskRoomsCriteriaType(val *MoveTaskRoomsCriteriaType) *NullableMoveTaskRoomsCriteriaType {
	return &NullableMoveTaskRoomsCriteriaType{value: val, isSet: true}
}

func (v NullableMoveTaskRoomsCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoveTaskRoomsCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


