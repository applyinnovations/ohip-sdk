/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the ForecastQuantityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForecastQuantityType{}

// ForecastQuantityType Quatity data for a single day.
type ForecastQuantityType struct {
	// Date of the statistic.
	Date *string `json:"date,omitempty"`
	// Indicates whether the day is a weekend day or not.
	IsWeekend *bool `json:"isWeekend,omitempty"`
	// The actual quantity
	Quantity *int32 `json:"quantity,omitempty"`
	// This is a break-down of the different room types and their tasks count on a date.
	RoomTypeBreakDown []RoomTypeTaskType `json:"roomTypeBreakDown,omitempty"`
}

// NewForecastQuantityType instantiates a new ForecastQuantityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForecastQuantityType() *ForecastQuantityType {
	this := ForecastQuantityType{}
	return &this
}

// NewForecastQuantityTypeWithDefaults instantiates a new ForecastQuantityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForecastQuantityTypeWithDefaults() *ForecastQuantityType {
	this := ForecastQuantityType{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ForecastQuantityType) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastQuantityType) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ForecastQuantityType) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ForecastQuantityType) SetDate(v string) {
	o.Date = &v
}

// GetIsWeekend returns the IsWeekend field value if set, zero value otherwise.
func (o *ForecastQuantityType) GetIsWeekend() bool {
	if o == nil || IsNil(o.IsWeekend) {
		var ret bool
		return ret
	}
	return *o.IsWeekend
}

// GetIsWeekendOk returns a tuple with the IsWeekend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastQuantityType) GetIsWeekendOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWeekend) {
		return nil, false
	}
	return o.IsWeekend, true
}

// HasIsWeekend returns a boolean if a field has been set.
func (o *ForecastQuantityType) HasIsWeekend() bool {
	if o != nil && !IsNil(o.IsWeekend) {
		return true
	}

	return false
}

// SetIsWeekend gets a reference to the given bool and assigns it to the IsWeekend field.
func (o *ForecastQuantityType) SetIsWeekend(v bool) {
	o.IsWeekend = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ForecastQuantityType) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastQuantityType) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ForecastQuantityType) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ForecastQuantityType) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetRoomTypeBreakDown returns the RoomTypeBreakDown field value if set, zero value otherwise.
func (o *ForecastQuantityType) GetRoomTypeBreakDown() []RoomTypeTaskType {
	if o == nil || IsNil(o.RoomTypeBreakDown) {
		var ret []RoomTypeTaskType
		return ret
	}
	return o.RoomTypeBreakDown
}

// GetRoomTypeBreakDownOk returns a tuple with the RoomTypeBreakDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastQuantityType) GetRoomTypeBreakDownOk() ([]RoomTypeTaskType, bool) {
	if o == nil || IsNil(o.RoomTypeBreakDown) {
		return nil, false
	}
	return o.RoomTypeBreakDown, true
}

// HasRoomTypeBreakDown returns a boolean if a field has been set.
func (o *ForecastQuantityType) HasRoomTypeBreakDown() bool {
	if o != nil && !IsNil(o.RoomTypeBreakDown) {
		return true
	}

	return false
}

// SetRoomTypeBreakDown gets a reference to the given []RoomTypeTaskType and assigns it to the RoomTypeBreakDown field.
func (o *ForecastQuantityType) SetRoomTypeBreakDown(v []RoomTypeTaskType) {
	o.RoomTypeBreakDown = v
}

func (o ForecastQuantityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForecastQuantityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.IsWeekend) {
		toSerialize["isWeekend"] = o.IsWeekend
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.RoomTypeBreakDown) {
		toSerialize["roomTypeBreakDown"] = o.RoomTypeBreakDown
	}
	return toSerialize, nil
}

type NullableForecastQuantityType struct {
	value *ForecastQuantityType
	isSet bool
}

func (v NullableForecastQuantityType) Get() *ForecastQuantityType {
	return v.value
}

func (v *NullableForecastQuantityType) Set(val *ForecastQuantityType) {
	v.value = val
	v.isSet = true
}

func (v NullableForecastQuantityType) IsSet() bool {
	return v.isSet
}

func (v *NullableForecastQuantityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForecastQuantityType(val *ForecastQuantityType) *NullableForecastQuantityType {
	return &NullableForecastQuantityType{value: val, isSet: true}
}

func (v NullableForecastQuantityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForecastQuantityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


