/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
)

// checks if the HousekeepingAttendantScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HousekeepingAttendantScheduleType{}

// HousekeepingAttendantScheduleType Criteria to manage the attendant schedule.
type HousekeepingAttendantScheduleType struct {
	// Partial name of an attendant.
	Name *string `json:"name,omitempty"`
	// ID of the attendant.
	AttendantId *string `json:"attendantId,omitempty"`
	// Date the attendant will be assigned.
	Date *string `json:"date,omitempty"`
}

// NewHousekeepingAttendantScheduleType instantiates a new HousekeepingAttendantScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHousekeepingAttendantScheduleType() *HousekeepingAttendantScheduleType {
	this := HousekeepingAttendantScheduleType{}
	return &this
}

// NewHousekeepingAttendantScheduleTypeWithDefaults instantiates a new HousekeepingAttendantScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHousekeepingAttendantScheduleTypeWithDefaults() *HousekeepingAttendantScheduleType {
	this := HousekeepingAttendantScheduleType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HousekeepingAttendantScheduleType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingAttendantScheduleType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HousekeepingAttendantScheduleType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HousekeepingAttendantScheduleType) SetName(v string) {
	o.Name = &v
}

// GetAttendantId returns the AttendantId field value if set, zero value otherwise.
func (o *HousekeepingAttendantScheduleType) GetAttendantId() string {
	if o == nil || IsNil(o.AttendantId) {
		var ret string
		return ret
	}
	return *o.AttendantId
}

// GetAttendantIdOk returns a tuple with the AttendantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingAttendantScheduleType) GetAttendantIdOk() (*string, bool) {
	if o == nil || IsNil(o.AttendantId) {
		return nil, false
	}
	return o.AttendantId, true
}

// HasAttendantId returns a boolean if a field has been set.
func (o *HousekeepingAttendantScheduleType) HasAttendantId() bool {
	if o != nil && !IsNil(o.AttendantId) {
		return true
	}

	return false
}

// SetAttendantId gets a reference to the given string and assigns it to the AttendantId field.
func (o *HousekeepingAttendantScheduleType) SetAttendantId(v string) {
	o.AttendantId = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HousekeepingAttendantScheduleType) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingAttendantScheduleType) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HousekeepingAttendantScheduleType) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *HousekeepingAttendantScheduleType) SetDate(v string) {
	o.Date = &v
}

func (o HousekeepingAttendantScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HousekeepingAttendantScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AttendantId) {
		toSerialize["attendantId"] = o.AttendantId
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableHousekeepingAttendantScheduleType struct {
	value *HousekeepingAttendantScheduleType
	isSet bool
}

func (v NullableHousekeepingAttendantScheduleType) Get() *HousekeepingAttendantScheduleType {
	return v.value
}

func (v *NullableHousekeepingAttendantScheduleType) Set(val *HousekeepingAttendantScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingAttendantScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingAttendantScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingAttendantScheduleType(val *HousekeepingAttendantScheduleType) *NullableHousekeepingAttendantScheduleType {
	return &NullableHousekeepingAttendantScheduleType{value: val, isSet: true}
}

func (v NullableHousekeepingAttendantScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingAttendantScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


