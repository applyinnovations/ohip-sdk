/*
OPERA Cloud Housekeeping Service API

Testing HousekeepingApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hsk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/hsk"
)

func Test_hsk_HousekeepingApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HousekeepingApiService AutoGenerateTaskSheets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.AutoGenerateTaskSheets(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService CancelServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.CancelServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService CompleteOutOfOrderRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.CompleteOutOfOrderRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService CompleteOutOfServiceRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.CompleteOutOfServiceRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService CompleteServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.CompleteServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService DeleteHouseKeepingTaskSheets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var taskCodesBreakOutId string

		resp, httpRes, err := apiClient.HousekeepingApi.DeleteHouseKeepingTaskSheets(context.Background(), hotelId, taskCodesBreakOutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService DeleteHousekeepingAttendantSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.DeleteHousekeepingAttendantSchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService DeleteReservationHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.DeleteReservationHousekeepingTasks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService DeleteRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mainteananceId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.DeleteRoomMaintenance(context.Background(), mainteananceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService DeleteTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.DeleteTaskSheet(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService DeleteTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.DeleteTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService DeleteTaskSheetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetTemplateCode string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.DeleteTaskSheetTemplate(context.Background(), taskSheetTemplateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService EditReservationHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.EditReservationHousekeepingTasks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService EndServiceBreak", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.EndServiceBreak(context.Background(), taskSheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetFacilityForecast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetFacilityForecast(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetGuestHousekeepingNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetGuestHousekeepingNotes(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetHouseKeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetHouseKeepingTasks(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetHousekeepingAttendantsSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetHousekeepingAttendantsSchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetHousekeepingDiscrepancies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetHousekeepingDiscrepancies(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetHousekeepingOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetHousekeepingOverview(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetOutOfOrderRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetOutOfOrderRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetOutOfServiceRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetOutOfServiceRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetReservationHousekeepingSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetReservationHousekeepingSchedule(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetRoomConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetRoomConditions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetRoomMaintenance(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetTaskCompanion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetTaskCompanion(context.Background(), sheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService GetTaskSheetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.GetTaskSheetTemplate(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService LockTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.LockTaskSheet(context.Background(), sheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService MergeTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toTaskSequenceNo string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.MergeTaskSheet(context.Background(), toTaskSequenceNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService MoveTaskRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.MoveTaskRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PostHousekeepingAttendantSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PostHousekeepingAttendantSchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PostOutOfOrderRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PostOutOfOrderRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PostOutOfServiceRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PostOutOfServiceRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PostReservationHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PostReservationHousekeepingTasks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PostRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maintenanceCode string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PostRoomMaintenance(context.Background(), maintenanceCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PostTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PostTaskSheet(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PostTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PostTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PutRoomCleaningPriority", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PutRoomCleaningPriority(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PutRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maintenanceId string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PutRoomMaintenance(context.Background(), maintenanceId, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PutRoomRelatedStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PutRoomRelatedStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PutTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PutTaskSheet(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PutTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PutTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService PutTaskSheetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetTemplateCode string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.PutTaskSheetTemplate(context.Background(), taskSheetTemplateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService ResetReservationHousekeepingSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.ResetReservationHousekeepingSchedule(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService ResolveRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mainteananceId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.ResolveRoomMaintenance(context.Background(), mainteananceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService SetGuestHousekeepingNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.SetGuestHousekeepingNotes(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService SetGuestHousekeepingServiceRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.SetGuestHousekeepingServiceRequest(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService SetRoomCleaningPriority", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.SetRoomCleaningPriority(context.Background(), roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService SetRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.SetRoomCondition(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService ShiftReservationHousekeepingSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.ShiftReservationHousekeepingSchedule(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService SkipServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.SkipServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService StartServiceBreak", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.StartServiceBreak(context.Background(), taskSheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService StartServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.StartServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService UnResolveRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mainteananceId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.UnResolveRoomMaintenance(context.Background(), mainteananceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingApiService UnlockTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingApi.UnlockTaskSheet(context.Background(), sheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
