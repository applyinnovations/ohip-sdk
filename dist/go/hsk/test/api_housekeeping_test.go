/*
OPERA Cloud Housekeeping Service API

Testing HousekeepingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package hsk

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/hsk"
)

func Test_hsk_HousekeepingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HousekeepingAPIService AutoGenerateTaskSheets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.AutoGenerateTaskSheets(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService CancelServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.CancelServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService CompleteOutOfOrderRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.CompleteOutOfOrderRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService CompleteOutOfServiceRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.CompleteOutOfServiceRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService CompleteServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.CompleteServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService DeleteHouseKeepingTaskSheets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var taskCodesBreakOutId string

		resp, httpRes, err := apiClient.HousekeepingAPI.DeleteHouseKeepingTaskSheets(context.Background(), hotelId, taskCodesBreakOutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService DeleteHousekeepingAttendantSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.DeleteHousekeepingAttendantSchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService DeleteReservationHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.DeleteReservationHousekeepingTasks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService DeleteRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mainteananceId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.DeleteRoomMaintenance(context.Background(), mainteananceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService DeleteTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.DeleteTaskSheet(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService DeleteTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.DeleteTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService DeleteTaskSheetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetTemplateCode string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.DeleteTaskSheetTemplate(context.Background(), taskSheetTemplateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService EditReservationHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.EditReservationHousekeepingTasks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService EndServiceBreak", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.EndServiceBreak(context.Background(), taskSheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetFacilityForecast", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetFacilityForecast(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetGuestHousekeepingNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetGuestHousekeepingNotes(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetHouseKeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetHouseKeepingTasks(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetHousekeepingAttendantsSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetHousekeepingAttendantsSchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetHousekeepingDiscrepancies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetHousekeepingDiscrepancies(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetHousekeepingOverview", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetHousekeepingOverview(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetOutOfOrderRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetOutOfOrderRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetOutOfServiceRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetOutOfServiceRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetReservationHousekeepingSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetReservationHousekeepingSchedule(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetRoomConditions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetRoomConditions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetRoomMaintenance(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetTaskCompanion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetTaskCompanion(context.Background(), sheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService GetTaskSheetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.GetTaskSheetTemplate(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService LockTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.LockTaskSheet(context.Background(), sheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService MergeTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toTaskSequenceNo string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.MergeTaskSheet(context.Background(), toTaskSequenceNo, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService MoveTaskRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.MoveTaskRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PostHousekeepingAttendantSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PostHousekeepingAttendantSchedule(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PostOutOfOrderRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PostOutOfOrderRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PostOutOfServiceRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PostOutOfServiceRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PostReservationHousekeepingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PostReservationHousekeepingTasks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PostRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maintenanceCode string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PostRoomMaintenance(context.Background(), maintenanceCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PostTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PostTaskSheet(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PostTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PostTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PutRoomCleaningPriority", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PutRoomCleaningPriority(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PutRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maintenanceId string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PutRoomMaintenance(context.Background(), maintenanceId, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PutRoomRelatedStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PutRoomRelatedStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PutTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PutTaskSheet(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PutTaskSheetRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PutTaskSheetRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService PutTaskSheetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetTemplateCode string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.PutTaskSheetTemplate(context.Background(), taskSheetTemplateCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService ResetReservationHousekeepingSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.ResetReservationHousekeepingSchedule(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService ResolveRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mainteananceId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.ResolveRoomMaintenance(context.Background(), mainteananceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService SetGuestHousekeepingNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.SetGuestHousekeepingNotes(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService SetGuestHousekeepingServiceRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.SetGuestHousekeepingServiceRequest(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService SetRoomCleaningPriority", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.SetRoomCleaningPriority(context.Background(), roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService SetRoomCondition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.SetRoomCondition(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService ShiftReservationHousekeepingSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.ShiftReservationHousekeepingSchedule(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService SkipServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.SkipServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService StartServiceBreak", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskSheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.StartServiceBreak(context.Background(), taskSheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService StartServicingTaskRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.StartServicingTaskRoom(context.Background(), sheetNumber, roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService UnResolveRoomMaintenance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mainteananceId string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.UnResolveRoomMaintenance(context.Background(), mainteananceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HousekeepingAPIService UnlockTaskSheet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sheetNumber string
		var hotelId string

		resp, httpRes, err := apiClient.HousekeepingAPI.UnlockTaskSheet(context.Background(), sheetNumber, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
