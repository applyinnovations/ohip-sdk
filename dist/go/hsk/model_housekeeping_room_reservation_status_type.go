/*
OPERA Cloud Housekeeping Service API

APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package hsk

import (
	"encoding/json"
	"fmt"
)

// HousekeepingRoomReservationStatusType Room Reservation status types used in housekeeping. These may be different from the actual reservation statuses as these relate to the current reservation for the room.
type HousekeepingRoomReservationStatusType string

// List of housekeepingRoomReservationStatusType
const (
	HOUSEKEEPINGROOMRESERVATIONSTATUSTYPE_ARRIVAL HousekeepingRoomReservationStatusType = "Arrival"
	HOUSEKEEPINGROOMRESERVATIONSTATUSTYPE_ARRIVED HousekeepingRoomReservationStatusType = "Arrived"
	HOUSEKEEPINGROOMRESERVATIONSTATUSTYPE_DAY_USE HousekeepingRoomReservationStatusType = "DayUse"
	HOUSEKEEPINGROOMRESERVATIONSTATUSTYPE_DUE_OUT HousekeepingRoomReservationStatusType = "DueOut"
	HOUSEKEEPINGROOMRESERVATIONSTATUSTYPE_DEPARTED HousekeepingRoomReservationStatusType = "Departed"
	HOUSEKEEPINGROOMRESERVATIONSTATUSTYPE_NOT_RESERVED HousekeepingRoomReservationStatusType = "NotReserved"
	HOUSEKEEPINGROOMRESERVATIONSTATUSTYPE_STAY_OVER HousekeepingRoomReservationStatusType = "StayOver"
)

// All allowed values of HousekeepingRoomReservationStatusType enum
var AllowedHousekeepingRoomReservationStatusTypeEnumValues = []HousekeepingRoomReservationStatusType{
	"Arrival",
	"Arrived",
	"DayUse",
	"DueOut",
	"Departed",
	"NotReserved",
	"StayOver",
}

func (v *HousekeepingRoomReservationStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HousekeepingRoomReservationStatusType(value)
	for _, existing := range AllowedHousekeepingRoomReservationStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HousekeepingRoomReservationStatusType", value)
}

// NewHousekeepingRoomReservationStatusTypeFromValue returns a pointer to a valid HousekeepingRoomReservationStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHousekeepingRoomReservationStatusTypeFromValue(v string) (*HousekeepingRoomReservationStatusType, error) {
	ev := HousekeepingRoomReservationStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HousekeepingRoomReservationStatusType: valid values are %v", v, AllowedHousekeepingRoomReservationStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HousekeepingRoomReservationStatusType) IsValid() bool {
	for _, existing := range AllowedHousekeepingRoomReservationStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to housekeepingRoomReservationStatusType value
func (v HousekeepingRoomReservationStatusType) Ptr() *HousekeepingRoomReservationStatusType {
	return &v
}

type NullableHousekeepingRoomReservationStatusType struct {
	value *HousekeepingRoomReservationStatusType
	isSet bool
}

func (v NullableHousekeepingRoomReservationStatusType) Get() *HousekeepingRoomReservationStatusType {
	return v.value
}

func (v *NullableHousekeepingRoomReservationStatusType) Set(val *HousekeepingRoomReservationStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingRoomReservationStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingRoomReservationStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingRoomReservationStatusType(val *HousekeepingRoomReservationStatusType) *NullableHousekeepingRoomReservationStatusType {
	return &NullableHousekeepingRoomReservationStatusType{value: val, isSet: true}
}

func (v NullableHousekeepingRoomReservationStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingRoomReservationStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

