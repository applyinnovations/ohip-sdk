/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the HotelExternalDevicesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelExternalDevicesType{}

// HotelExternalDevicesType Type for the external device supported by the hotel.
type HotelExternalDevicesType struct {
	// Property for which the device is configured.
	HotelId *string `json:"hotelId,omitempty"`
	SupportedDevices []SupportedExternalDeviceType `json:"supportedDevices,omitempty"`
}

// NewHotelExternalDevicesType instantiates a new HotelExternalDevicesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelExternalDevicesType() *HotelExternalDevicesType {
	this := HotelExternalDevicesType{}
	return &this
}

// NewHotelExternalDevicesTypeWithDefaults instantiates a new HotelExternalDevicesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelExternalDevicesTypeWithDefaults() *HotelExternalDevicesType {
	this := HotelExternalDevicesType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelExternalDevicesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelExternalDevicesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelExternalDevicesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelExternalDevicesType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetSupportedDevices returns the SupportedDevices field value if set, zero value otherwise.
func (o *HotelExternalDevicesType) GetSupportedDevices() []SupportedExternalDeviceType {
	if o == nil || IsNil(o.SupportedDevices) {
		var ret []SupportedExternalDeviceType
		return ret
	}
	return o.SupportedDevices
}

// GetSupportedDevicesOk returns a tuple with the SupportedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelExternalDevicesType) GetSupportedDevicesOk() ([]SupportedExternalDeviceType, bool) {
	if o == nil || IsNil(o.SupportedDevices) {
		return nil, false
	}
	return o.SupportedDevices, true
}

// HasSupportedDevices returns a boolean if a field has been set.
func (o *HotelExternalDevicesType) HasSupportedDevices() bool {
	if o != nil && !IsNil(o.SupportedDevices) {
		return true
	}

	return false
}

// SetSupportedDevices gets a reference to the given []SupportedExternalDeviceType and assigns it to the SupportedDevices field.
func (o *HotelExternalDevicesType) SetSupportedDevices(v []SupportedExternalDeviceType) {
	o.SupportedDevices = v
}

func (o HotelExternalDevicesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelExternalDevicesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.SupportedDevices) {
		toSerialize["supportedDevices"] = o.SupportedDevices
	}
	return toSerialize, nil
}

type NullableHotelExternalDevicesType struct {
	value *HotelExternalDevicesType
	isSet bool
}

func (v NullableHotelExternalDevicesType) Get() *HotelExternalDevicesType {
	return v.value
}

func (v *NullableHotelExternalDevicesType) Set(val *HotelExternalDevicesType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelExternalDevicesType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelExternalDevicesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelExternalDevicesType(val *HotelExternalDevicesType) *NullableHotelExternalDevicesType {
	return &NullableHotelExternalDevicesType{value: val, isSet: true}
}

func (v NullableHotelExternalDevicesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelExternalDevicesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


