/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
	"fmt"
)

// DataLineType Line Out
type DataLineType string

// List of dataLineType
const (
	DATALINETYPE_IN DataLineType = "In"
	DATALINETYPE_OUT DataLineType = "Out"
)

// All allowed values of DataLineType enum
var AllowedDataLineTypeEnumValues = []DataLineType{
	"In",
	"Out",
}

func (v *DataLineType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataLineType(value)
	for _, existing := range AllowedDataLineTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataLineType", value)
}

// NewDataLineTypeFromValue returns a pointer to a valid DataLineType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataLineTypeFromValue(v string) (*DataLineType, error) {
	ev := DataLineType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataLineType: valid values are %v", v, AllowedDataLineTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataLineType) IsValid() bool {
	for _, existing := range AllowedDataLineTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dataLineType value
func (v DataLineType) Ptr() *DataLineType {
	return &v
}

type NullableDataLineType struct {
	value *DataLineType
	isSet bool
}

func (v NullableDataLineType) Get() *DataLineType {
	return v.value
}

func (v *NullableDataLineType) Set(val *DataLineType) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLineType) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLineType(val *DataLineType) *NullableDataLineType {
	return &NullableDataLineType{value: val, isSet: true}
}

func (v NullableDataLineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

