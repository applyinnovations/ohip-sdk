/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the UDFMappingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UDFMappingType{}

// UDFMappingType Generic self-contained request object that is used when updating and fetching UDFs.
type UDFMappingType struct {
	// Name of the user-defined function (UDF) field.
	UDFName *string `json:"uDFName,omitempty"`
	// Label the user-defined function (UDF) field shared with external system which will be send in the request message for mapping of actual UDF Name.
	UDFLabel *string `json:"uDFLabel,omitempty"`
	// A flag to indicate whether the UDF mapping is active in the Interface system or not.
	Active *bool `json:"active,omitempty"`
	// A flag to indicate whether the update is allowed in the Interface system or not.
	UpdateAllowed *bool `json:"updateAllowed,omitempty"`
	// A reference to the type of object defined by the Type for Reservation and Profile Type.
	Type *string `json:"type,omitempty"`
}

// NewUDFMappingType instantiates a new UDFMappingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUDFMappingType() *UDFMappingType {
	this := UDFMappingType{}
	return &this
}

// NewUDFMappingTypeWithDefaults instantiates a new UDFMappingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUDFMappingTypeWithDefaults() *UDFMappingType {
	this := UDFMappingType{}
	return &this
}

// GetUDFName returns the UDFName field value if set, zero value otherwise.
func (o *UDFMappingType) GetUDFName() string {
	if o == nil || IsNil(o.UDFName) {
		var ret string
		return ret
	}
	return *o.UDFName
}

// GetUDFNameOk returns a tuple with the UDFName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFMappingType) GetUDFNameOk() (*string, bool) {
	if o == nil || IsNil(o.UDFName) {
		return nil, false
	}
	return o.UDFName, true
}

// HasUDFName returns a boolean if a field has been set.
func (o *UDFMappingType) HasUDFName() bool {
	if o != nil && !IsNil(o.UDFName) {
		return true
	}

	return false
}

// SetUDFName gets a reference to the given string and assigns it to the UDFName field.
func (o *UDFMappingType) SetUDFName(v string) {
	o.UDFName = &v
}

// GetUDFLabel returns the UDFLabel field value if set, zero value otherwise.
func (o *UDFMappingType) GetUDFLabel() string {
	if o == nil || IsNil(o.UDFLabel) {
		var ret string
		return ret
	}
	return *o.UDFLabel
}

// GetUDFLabelOk returns a tuple with the UDFLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFMappingType) GetUDFLabelOk() (*string, bool) {
	if o == nil || IsNil(o.UDFLabel) {
		return nil, false
	}
	return o.UDFLabel, true
}

// HasUDFLabel returns a boolean if a field has been set.
func (o *UDFMappingType) HasUDFLabel() bool {
	if o != nil && !IsNil(o.UDFLabel) {
		return true
	}

	return false
}

// SetUDFLabel gets a reference to the given string and assigns it to the UDFLabel field.
func (o *UDFMappingType) SetUDFLabel(v string) {
	o.UDFLabel = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UDFMappingType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFMappingType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *UDFMappingType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UDFMappingType) SetActive(v bool) {
	o.Active = &v
}

// GetUpdateAllowed returns the UpdateAllowed field value if set, zero value otherwise.
func (o *UDFMappingType) GetUpdateAllowed() bool {
	if o == nil || IsNil(o.UpdateAllowed) {
		var ret bool
		return ret
	}
	return *o.UpdateAllowed
}

// GetUpdateAllowedOk returns a tuple with the UpdateAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFMappingType) GetUpdateAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateAllowed) {
		return nil, false
	}
	return o.UpdateAllowed, true
}

// HasUpdateAllowed returns a boolean if a field has been set.
func (o *UDFMappingType) HasUpdateAllowed() bool {
	if o != nil && !IsNil(o.UpdateAllowed) {
		return true
	}

	return false
}

// SetUpdateAllowed gets a reference to the given bool and assigns it to the UpdateAllowed field.
func (o *UDFMappingType) SetUpdateAllowed(v bool) {
	o.UpdateAllowed = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UDFMappingType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFMappingType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UDFMappingType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UDFMappingType) SetType(v string) {
	o.Type = &v
}

func (o UDFMappingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UDFMappingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UDFName) {
		toSerialize["uDFName"] = o.UDFName
	}
	if !IsNil(o.UDFLabel) {
		toSerialize["uDFLabel"] = o.UDFLabel
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.UpdateAllowed) {
		toSerialize["updateAllowed"] = o.UpdateAllowed
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUDFMappingType struct {
	value *UDFMappingType
	isSet bool
}

func (v NullableUDFMappingType) Get() *UDFMappingType {
	return v.value
}

func (v *NullableUDFMappingType) Set(val *UDFMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableUDFMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableUDFMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUDFMappingType(val *UDFMappingType) *NullableUDFMappingType {
	return &NullableUDFMappingType{value: val, isSet: true}
}

func (v NullableUDFMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUDFMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


