/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the ExternalDeviceConfigurationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalDeviceConfigurationType{}

// ExternalDeviceConfigurationType Type for the configurations available to the device.
type ExternalDeviceConfigurationType struct {
	// Property for which the device is configured.
	HotelId *string `json:"hotelId,omitempty"`
	Device *SupportedExternalDeviceType `json:"device,omitempty"`
	DeviceConfigurations []DeviceConfigurationType `json:"deviceConfigurations,omitempty"`
	// Type that contains the mappings of the codes used in the external device to the code used in OPERA.
	CodeMappings []DeviceMappingType `json:"codeMappings,omitempty"`
}

// NewExternalDeviceConfigurationType instantiates a new ExternalDeviceConfigurationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalDeviceConfigurationType() *ExternalDeviceConfigurationType {
	this := ExternalDeviceConfigurationType{}
	return &this
}

// NewExternalDeviceConfigurationTypeWithDefaults instantiates a new ExternalDeviceConfigurationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalDeviceConfigurationTypeWithDefaults() *ExternalDeviceConfigurationType {
	this := ExternalDeviceConfigurationType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ExternalDeviceConfigurationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalDeviceConfigurationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ExternalDeviceConfigurationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ExternalDeviceConfigurationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *ExternalDeviceConfigurationType) GetDevice() SupportedExternalDeviceType {
	if o == nil || IsNil(o.Device) {
		var ret SupportedExternalDeviceType
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalDeviceConfigurationType) GetDeviceOk() (*SupportedExternalDeviceType, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *ExternalDeviceConfigurationType) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given SupportedExternalDeviceType and assigns it to the Device field.
func (o *ExternalDeviceConfigurationType) SetDevice(v SupportedExternalDeviceType) {
	o.Device = &v
}

// GetDeviceConfigurations returns the DeviceConfigurations field value if set, zero value otherwise.
func (o *ExternalDeviceConfigurationType) GetDeviceConfigurations() []DeviceConfigurationType {
	if o == nil || IsNil(o.DeviceConfigurations) {
		var ret []DeviceConfigurationType
		return ret
	}
	return o.DeviceConfigurations
}

// GetDeviceConfigurationsOk returns a tuple with the DeviceConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalDeviceConfigurationType) GetDeviceConfigurationsOk() ([]DeviceConfigurationType, bool) {
	if o == nil || IsNil(o.DeviceConfigurations) {
		return nil, false
	}
	return o.DeviceConfigurations, true
}

// HasDeviceConfigurations returns a boolean if a field has been set.
func (o *ExternalDeviceConfigurationType) HasDeviceConfigurations() bool {
	if o != nil && !IsNil(o.DeviceConfigurations) {
		return true
	}

	return false
}

// SetDeviceConfigurations gets a reference to the given []DeviceConfigurationType and assigns it to the DeviceConfigurations field.
func (o *ExternalDeviceConfigurationType) SetDeviceConfigurations(v []DeviceConfigurationType) {
	o.DeviceConfigurations = v
}

// GetCodeMappings returns the CodeMappings field value if set, zero value otherwise.
func (o *ExternalDeviceConfigurationType) GetCodeMappings() []DeviceMappingType {
	if o == nil || IsNil(o.CodeMappings) {
		var ret []DeviceMappingType
		return ret
	}
	return o.CodeMappings
}

// GetCodeMappingsOk returns a tuple with the CodeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalDeviceConfigurationType) GetCodeMappingsOk() ([]DeviceMappingType, bool) {
	if o == nil || IsNil(o.CodeMappings) {
		return nil, false
	}
	return o.CodeMappings, true
}

// HasCodeMappings returns a boolean if a field has been set.
func (o *ExternalDeviceConfigurationType) HasCodeMappings() bool {
	if o != nil && !IsNil(o.CodeMappings) {
		return true
	}

	return false
}

// SetCodeMappings gets a reference to the given []DeviceMappingType and assigns it to the CodeMappings field.
func (o *ExternalDeviceConfigurationType) SetCodeMappings(v []DeviceMappingType) {
	o.CodeMappings = v
}

func (o ExternalDeviceConfigurationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalDeviceConfigurationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DeviceConfigurations) {
		toSerialize["deviceConfigurations"] = o.DeviceConfigurations
	}
	if !IsNil(o.CodeMappings) {
		toSerialize["codeMappings"] = o.CodeMappings
	}
	return toSerialize, nil
}

type NullableExternalDeviceConfigurationType struct {
	value *ExternalDeviceConfigurationType
	isSet bool
}

func (v NullableExternalDeviceConfigurationType) Get() *ExternalDeviceConfigurationType {
	return v.value
}

func (v *NullableExternalDeviceConfigurationType) Set(val *ExternalDeviceConfigurationType) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalDeviceConfigurationType) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalDeviceConfigurationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalDeviceConfigurationType(val *ExternalDeviceConfigurationType) *NullableExternalDeviceConfigurationType {
	return &NullableExternalDeviceConfigurationType{value: val, isSet: true}
}

func (v NullableExternalDeviceConfigurationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalDeviceConfigurationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


