/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the DefinedNameFormatType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefinedNameFormatType{}

// DefinedNameFormatType struct for DefinedNameFormatType
type DefinedNameFormatType struct {
	// Hotel Code where the defined name format is associated.
	HotelId *string `json:"hotelId,omitempty"`
	// ID of the defined name format.
	DefinedFormatId *string `json:"definedFormatId,omitempty"`
	// Table from which the info will be retrieved.
	ExpressionTable *string `json:"expressionTable,omitempty"`
	// Expression of the defined name format It basically contains all formats that are being set.
	Expression *string `json:"expression,omitempty"`
	// Logo of the hotel interface.
	Logo *string `json:"logo,omitempty"`
}

// NewDefinedNameFormatType instantiates a new DefinedNameFormatType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefinedNameFormatType() *DefinedNameFormatType {
	this := DefinedNameFormatType{}
	return &this
}

// NewDefinedNameFormatTypeWithDefaults instantiates a new DefinedNameFormatType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefinedNameFormatTypeWithDefaults() *DefinedNameFormatType {
	this := DefinedNameFormatType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *DefinedNameFormatType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedNameFormatType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *DefinedNameFormatType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *DefinedNameFormatType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetDefinedFormatId returns the DefinedFormatId field value if set, zero value otherwise.
func (o *DefinedNameFormatType) GetDefinedFormatId() string {
	if o == nil || IsNil(o.DefinedFormatId) {
		var ret string
		return ret
	}
	return *o.DefinedFormatId
}

// GetDefinedFormatIdOk returns a tuple with the DefinedFormatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedNameFormatType) GetDefinedFormatIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefinedFormatId) {
		return nil, false
	}
	return o.DefinedFormatId, true
}

// HasDefinedFormatId returns a boolean if a field has been set.
func (o *DefinedNameFormatType) HasDefinedFormatId() bool {
	if o != nil && !IsNil(o.DefinedFormatId) {
		return true
	}

	return false
}

// SetDefinedFormatId gets a reference to the given string and assigns it to the DefinedFormatId field.
func (o *DefinedNameFormatType) SetDefinedFormatId(v string) {
	o.DefinedFormatId = &v
}

// GetExpressionTable returns the ExpressionTable field value if set, zero value otherwise.
func (o *DefinedNameFormatType) GetExpressionTable() string {
	if o == nil || IsNil(o.ExpressionTable) {
		var ret string
		return ret
	}
	return *o.ExpressionTable
}

// GetExpressionTableOk returns a tuple with the ExpressionTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedNameFormatType) GetExpressionTableOk() (*string, bool) {
	if o == nil || IsNil(o.ExpressionTable) {
		return nil, false
	}
	return o.ExpressionTable, true
}

// HasExpressionTable returns a boolean if a field has been set.
func (o *DefinedNameFormatType) HasExpressionTable() bool {
	if o != nil && !IsNil(o.ExpressionTable) {
		return true
	}

	return false
}

// SetExpressionTable gets a reference to the given string and assigns it to the ExpressionTable field.
func (o *DefinedNameFormatType) SetExpressionTable(v string) {
	o.ExpressionTable = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *DefinedNameFormatType) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedNameFormatType) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *DefinedNameFormatType) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *DefinedNameFormatType) SetExpression(v string) {
	o.Expression = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *DefinedNameFormatType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefinedNameFormatType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *DefinedNameFormatType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *DefinedNameFormatType) SetLogo(v string) {
	o.Logo = &v
}

func (o DefinedNameFormatType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefinedNameFormatType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.DefinedFormatId) {
		toSerialize["definedFormatId"] = o.DefinedFormatId
	}
	if !IsNil(o.ExpressionTable) {
		toSerialize["expressionTable"] = o.ExpressionTable
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	return toSerialize, nil
}

type NullableDefinedNameFormatType struct {
	value *DefinedNameFormatType
	isSet bool
}

func (v NullableDefinedNameFormatType) Get() *DefinedNameFormatType {
	return v.value
}

func (v *NullableDefinedNameFormatType) Set(val *DefinedNameFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullableDefinedNameFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullableDefinedNameFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefinedNameFormatType(val *DefinedNameFormatType) *NullableDefinedNameFormatType {
	return &NullableDefinedNameFormatType{value: val, isSet: true}
}

func (v NullableDefinedNameFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefinedNameFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


