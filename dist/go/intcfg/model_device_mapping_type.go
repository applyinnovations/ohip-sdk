/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the DeviceMappingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceMappingType{}

// DeviceMappingType Type that contains the codes used in/provided by the external device and their counterpart in OPERA.
type DeviceMappingType struct {
	// Internal code type of the mapping entry.
	CodeType *string `json:"codeType,omitempty"`
	// Code used/provided by the external device or application.
	ExternalCode *string `json:"externalCode,omitempty"`
	// Display name of the code mapping.
	DisplayName *string `json:"displayName,omitempty"`
	// Corresponding code value in OPERA.
	OperaCode *string `json:"operaCode,omitempty"`
}

// NewDeviceMappingType instantiates a new DeviceMappingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceMappingType() *DeviceMappingType {
	this := DeviceMappingType{}
	return &this
}

// NewDeviceMappingTypeWithDefaults instantiates a new DeviceMappingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceMappingTypeWithDefaults() *DeviceMappingType {
	this := DeviceMappingType{}
	return &this
}

// GetCodeType returns the CodeType field value if set, zero value otherwise.
func (o *DeviceMappingType) GetCodeType() string {
	if o == nil || IsNil(o.CodeType) {
		var ret string
		return ret
	}
	return *o.CodeType
}

// GetCodeTypeOk returns a tuple with the CodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMappingType) GetCodeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CodeType) {
		return nil, false
	}
	return o.CodeType, true
}

// HasCodeType returns a boolean if a field has been set.
func (o *DeviceMappingType) HasCodeType() bool {
	if o != nil && !IsNil(o.CodeType) {
		return true
	}

	return false
}

// SetCodeType gets a reference to the given string and assigns it to the CodeType field.
func (o *DeviceMappingType) SetCodeType(v string) {
	o.CodeType = &v
}

// GetExternalCode returns the ExternalCode field value if set, zero value otherwise.
func (o *DeviceMappingType) GetExternalCode() string {
	if o == nil || IsNil(o.ExternalCode) {
		var ret string
		return ret
	}
	return *o.ExternalCode
}

// GetExternalCodeOk returns a tuple with the ExternalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMappingType) GetExternalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalCode) {
		return nil, false
	}
	return o.ExternalCode, true
}

// HasExternalCode returns a boolean if a field has been set.
func (o *DeviceMappingType) HasExternalCode() bool {
	if o != nil && !IsNil(o.ExternalCode) {
		return true
	}

	return false
}

// SetExternalCode gets a reference to the given string and assigns it to the ExternalCode field.
func (o *DeviceMappingType) SetExternalCode(v string) {
	o.ExternalCode = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DeviceMappingType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMappingType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DeviceMappingType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DeviceMappingType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetOperaCode returns the OperaCode field value if set, zero value otherwise.
func (o *DeviceMappingType) GetOperaCode() string {
	if o == nil || IsNil(o.OperaCode) {
		var ret string
		return ret
	}
	return *o.OperaCode
}

// GetOperaCodeOk returns a tuple with the OperaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMappingType) GetOperaCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OperaCode) {
		return nil, false
	}
	return o.OperaCode, true
}

// HasOperaCode returns a boolean if a field has been set.
func (o *DeviceMappingType) HasOperaCode() bool {
	if o != nil && !IsNil(o.OperaCode) {
		return true
	}

	return false
}

// SetOperaCode gets a reference to the given string and assigns it to the OperaCode field.
func (o *DeviceMappingType) SetOperaCode(v string) {
	o.OperaCode = &v
}

func (o DeviceMappingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceMappingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeType) {
		toSerialize["codeType"] = o.CodeType
	}
	if !IsNil(o.ExternalCode) {
		toSerialize["externalCode"] = o.ExternalCode
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.OperaCode) {
		toSerialize["operaCode"] = o.OperaCode
	}
	return toSerialize, nil
}

type NullableDeviceMappingType struct {
	value *DeviceMappingType
	isSet bool
}

func (v NullableDeviceMappingType) Get() *DeviceMappingType {
	return v.value
}

func (v *NullableDeviceMappingType) Set(val *DeviceMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceMappingType(val *DeviceMappingType) *NullableDeviceMappingType {
	return &NullableDeviceMappingType{value: val, isSet: true}
}

func (v NullableDeviceMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


