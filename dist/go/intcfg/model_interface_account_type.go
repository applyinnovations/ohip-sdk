/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the InterfaceAccountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceAccountType{}

// InterfaceAccountType struct for InterfaceAccountType
type InterfaceAccountType struct {
	// Hotel Code of the Interface Account.
	HotelId *string `json:"hotelId,omitempty"`
	// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
	Logo *string `json:"logo,omitempty"`
	PostingAccount *PostingAccountType `json:"postingAccount,omitempty"`
}

// NewInterfaceAccountType instantiates a new InterfaceAccountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceAccountType() *InterfaceAccountType {
	this := InterfaceAccountType{}
	return &this
}

// NewInterfaceAccountTypeWithDefaults instantiates a new InterfaceAccountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceAccountTypeWithDefaults() *InterfaceAccountType {
	this := InterfaceAccountType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfaceAccountType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceAccountType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfaceAccountType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfaceAccountType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InterfaceAccountType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceAccountType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InterfaceAccountType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InterfaceAccountType) SetLogo(v string) {
	o.Logo = &v
}

// GetPostingAccount returns the PostingAccount field value if set, zero value otherwise.
func (o *InterfaceAccountType) GetPostingAccount() PostingAccountType {
	if o == nil || IsNil(o.PostingAccount) {
		var ret PostingAccountType
		return ret
	}
	return *o.PostingAccount
}

// GetPostingAccountOk returns a tuple with the PostingAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceAccountType) GetPostingAccountOk() (*PostingAccountType, bool) {
	if o == nil || IsNil(o.PostingAccount) {
		return nil, false
	}
	return o.PostingAccount, true
}

// HasPostingAccount returns a boolean if a field has been set.
func (o *InterfaceAccountType) HasPostingAccount() bool {
	if o != nil && !IsNil(o.PostingAccount) {
		return true
	}

	return false
}

// SetPostingAccount gets a reference to the given PostingAccountType and assigns it to the PostingAccount field.
func (o *InterfaceAccountType) SetPostingAccount(v PostingAccountType) {
	o.PostingAccount = &v
}

func (o InterfaceAccountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceAccountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.PostingAccount) {
		toSerialize["postingAccount"] = o.PostingAccount
	}
	return toSerialize, nil
}

type NullableInterfaceAccountType struct {
	value *InterfaceAccountType
	isSet bool
}

func (v NullableInterfaceAccountType) Get() *InterfaceAccountType {
	return v.value
}

func (v *NullableInterfaceAccountType) Set(val *InterfaceAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceAccountType(val *InterfaceAccountType) *NullableInterfaceAccountType {
	return &NullableInterfaceAccountType{value: val, isSet: true}
}

func (v NullableInterfaceAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


