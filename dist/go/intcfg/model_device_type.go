/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
	"fmt"
)

// DeviceType the model 'DeviceType'
type DeviceType string

// List of deviceType
const (
	DEVICETYPE_SCANNER DeviceType = "Scanner"
	DEVICETYPE_CREDIT_CARD DeviceType = "CreditCard"
	DEVICETYPE_FISCAL DeviceType = "Fiscal"
	DEVICETYPE_DEVICE DeviceType = "Device"
)

// All allowed values of DeviceType enum
var AllowedDeviceTypeEnumValues = []DeviceType{
	"Scanner",
	"CreditCard",
	"Fiscal",
	"Device",
}

func (v *DeviceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceType(value)
	for _, existing := range AllowedDeviceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceType", value)
}

// NewDeviceTypeFromValue returns a pointer to a valid DeviceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceTypeFromValue(v string) (*DeviceType, error) {
	ev := DeviceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceType: valid values are %v", v, AllowedDeviceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceType) IsValid() bool {
	for _, existing := range AllowedDeviceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to deviceType value
func (v DeviceType) Ptr() *DeviceType {
	return &v
}

type NullableDeviceType struct {
	value *DeviceType
	isSet bool
}

func (v NullableDeviceType) Get() *DeviceType {
	return v.value
}

func (v *NullableDeviceType) Set(val *DeviceType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceType(val *DeviceType) *NullableDeviceType {
	return &NullableDeviceType{value: val, isSet: true}
}

func (v NullableDeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

