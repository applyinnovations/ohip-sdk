/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the SupportedExternalDeviceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportedExternalDeviceType{}

// SupportedExternalDeviceType External device details.
type SupportedExternalDeviceType struct {
	DeviceType *DeviceType `json:"deviceType,omitempty"`
	DeviceCode *DeviceCode `json:"deviceCode,omitempty"`
	// The area where the device is installed
	DeviceArea *string `json:"deviceArea,omitempty"`
	// External device display name.
	DisplayName *string `json:"displayName,omitempty"`
	// Indicator if device type is mobile or desktop.
	MobileYN *bool `json:"mobileYN,omitempty"`
	// Indicator if device type is mobile or desktop.
	DesktopYN *bool `json:"desktopYN,omitempty"`
	// The address which the Cash Register ID ( Device ID ) is associated with.
	RegisterAddress *string `json:"registerAddress,omitempty"`
	// External device Value.
	DeviceValue *string `json:"deviceValue,omitempty"`
	// Used for fiscal partner codes. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	FiscalPartnerCode *string `json:"fiscalPartnerCode,omitempty"`
	// Flag to designate the primary Fiscal Terminal.
	Primary *bool `json:"primary,omitempty"`
	// Flag that indicates whether the device is active.
	Active *bool `json:"active,omitempty"`
	Id *string `json:"id,omitempty"`
	Label *string `json:"label,omitempty"`
	TranslatableLabel *TranslationTextType2000 `json:"translatableLabel,omitempty"`
	IDEditable *bool `json:"iDEditable,omitempty"`
}

// NewSupportedExternalDeviceType instantiates a new SupportedExternalDeviceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedExternalDeviceType() *SupportedExternalDeviceType {
	this := SupportedExternalDeviceType{}
	return &this
}

// NewSupportedExternalDeviceTypeWithDefaults instantiates a new SupportedExternalDeviceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedExternalDeviceTypeWithDefaults() *SupportedExternalDeviceType {
	this := SupportedExternalDeviceType{}
	return &this
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetDeviceType() DeviceType {
	if o == nil || IsNil(o.DeviceType) {
		var ret DeviceType
		return ret
	}
	return *o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetDeviceTypeOk() (*DeviceType, bool) {
	if o == nil || IsNil(o.DeviceType) {
		return nil, false
	}
	return o.DeviceType, true
}

// HasDeviceType returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasDeviceType() bool {
	if o != nil && !IsNil(o.DeviceType) {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given DeviceType and assigns it to the DeviceType field.
func (o *SupportedExternalDeviceType) SetDeviceType(v DeviceType) {
	o.DeviceType = &v
}

// GetDeviceCode returns the DeviceCode field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetDeviceCode() DeviceCode {
	if o == nil || IsNil(o.DeviceCode) {
		var ret DeviceCode
		return ret
	}
	return *o.DeviceCode
}

// GetDeviceCodeOk returns a tuple with the DeviceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetDeviceCodeOk() (*DeviceCode, bool) {
	if o == nil || IsNil(o.DeviceCode) {
		return nil, false
	}
	return o.DeviceCode, true
}

// HasDeviceCode returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasDeviceCode() bool {
	if o != nil && !IsNil(o.DeviceCode) {
		return true
	}

	return false
}

// SetDeviceCode gets a reference to the given DeviceCode and assigns it to the DeviceCode field.
func (o *SupportedExternalDeviceType) SetDeviceCode(v DeviceCode) {
	o.DeviceCode = &v
}

// GetDeviceArea returns the DeviceArea field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetDeviceArea() string {
	if o == nil || IsNil(o.DeviceArea) {
		var ret string
		return ret
	}
	return *o.DeviceArea
}

// GetDeviceAreaOk returns a tuple with the DeviceArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetDeviceAreaOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceArea) {
		return nil, false
	}
	return o.DeviceArea, true
}

// HasDeviceArea returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasDeviceArea() bool {
	if o != nil && !IsNil(o.DeviceArea) {
		return true
	}

	return false
}

// SetDeviceArea gets a reference to the given string and assigns it to the DeviceArea field.
func (o *SupportedExternalDeviceType) SetDeviceArea(v string) {
	o.DeviceArea = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SupportedExternalDeviceType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMobileYN returns the MobileYN field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetMobileYN() bool {
	if o == nil || IsNil(o.MobileYN) {
		var ret bool
		return ret
	}
	return *o.MobileYN
}

// GetMobileYNOk returns a tuple with the MobileYN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetMobileYNOk() (*bool, bool) {
	if o == nil || IsNil(o.MobileYN) {
		return nil, false
	}
	return o.MobileYN, true
}

// HasMobileYN returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasMobileYN() bool {
	if o != nil && !IsNil(o.MobileYN) {
		return true
	}

	return false
}

// SetMobileYN gets a reference to the given bool and assigns it to the MobileYN field.
func (o *SupportedExternalDeviceType) SetMobileYN(v bool) {
	o.MobileYN = &v
}

// GetDesktopYN returns the DesktopYN field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetDesktopYN() bool {
	if o == nil || IsNil(o.DesktopYN) {
		var ret bool
		return ret
	}
	return *o.DesktopYN
}

// GetDesktopYNOk returns a tuple with the DesktopYN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetDesktopYNOk() (*bool, bool) {
	if o == nil || IsNil(o.DesktopYN) {
		return nil, false
	}
	return o.DesktopYN, true
}

// HasDesktopYN returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasDesktopYN() bool {
	if o != nil && !IsNil(o.DesktopYN) {
		return true
	}

	return false
}

// SetDesktopYN gets a reference to the given bool and assigns it to the DesktopYN field.
func (o *SupportedExternalDeviceType) SetDesktopYN(v bool) {
	o.DesktopYN = &v
}

// GetRegisterAddress returns the RegisterAddress field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetRegisterAddress() string {
	if o == nil || IsNil(o.RegisterAddress) {
		var ret string
		return ret
	}
	return *o.RegisterAddress
}

// GetRegisterAddressOk returns a tuple with the RegisterAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetRegisterAddressOk() (*string, bool) {
	if o == nil || IsNil(o.RegisterAddress) {
		return nil, false
	}
	return o.RegisterAddress, true
}

// HasRegisterAddress returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasRegisterAddress() bool {
	if o != nil && !IsNil(o.RegisterAddress) {
		return true
	}

	return false
}

// SetRegisterAddress gets a reference to the given string and assigns it to the RegisterAddress field.
func (o *SupportedExternalDeviceType) SetRegisterAddress(v string) {
	o.RegisterAddress = &v
}

// GetDeviceValue returns the DeviceValue field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetDeviceValue() string {
	if o == nil || IsNil(o.DeviceValue) {
		var ret string
		return ret
	}
	return *o.DeviceValue
}

// GetDeviceValueOk returns a tuple with the DeviceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetDeviceValueOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceValue) {
		return nil, false
	}
	return o.DeviceValue, true
}

// HasDeviceValue returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasDeviceValue() bool {
	if o != nil && !IsNil(o.DeviceValue) {
		return true
	}

	return false
}

// SetDeviceValue gets a reference to the given string and assigns it to the DeviceValue field.
func (o *SupportedExternalDeviceType) SetDeviceValue(v string) {
	o.DeviceValue = &v
}

// GetFiscalPartnerCode returns the FiscalPartnerCode field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetFiscalPartnerCode() string {
	if o == nil || IsNil(o.FiscalPartnerCode) {
		var ret string
		return ret
	}
	return *o.FiscalPartnerCode
}

// GetFiscalPartnerCodeOk returns a tuple with the FiscalPartnerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetFiscalPartnerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FiscalPartnerCode) {
		return nil, false
	}
	return o.FiscalPartnerCode, true
}

// HasFiscalPartnerCode returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasFiscalPartnerCode() bool {
	if o != nil && !IsNil(o.FiscalPartnerCode) {
		return true
	}

	return false
}

// SetFiscalPartnerCode gets a reference to the given string and assigns it to the FiscalPartnerCode field.
func (o *SupportedExternalDeviceType) SetFiscalPartnerCode(v string) {
	o.FiscalPartnerCode = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *SupportedExternalDeviceType) SetPrimary(v bool) {
	o.Primary = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SupportedExternalDeviceType) SetActive(v bool) {
	o.Active = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SupportedExternalDeviceType) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *SupportedExternalDeviceType) SetLabel(v string) {
	o.Label = &v
}

// GetTranslatableLabel returns the TranslatableLabel field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetTranslatableLabel() TranslationTextType2000 {
	if o == nil || IsNil(o.TranslatableLabel) {
		var ret TranslationTextType2000
		return ret
	}
	return *o.TranslatableLabel
}

// GetTranslatableLabelOk returns a tuple with the TranslatableLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetTranslatableLabelOk() (*TranslationTextType2000, bool) {
	if o == nil || IsNil(o.TranslatableLabel) {
		return nil, false
	}
	return o.TranslatableLabel, true
}

// HasTranslatableLabel returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasTranslatableLabel() bool {
	if o != nil && !IsNil(o.TranslatableLabel) {
		return true
	}

	return false
}

// SetTranslatableLabel gets a reference to the given TranslationTextType2000 and assigns it to the TranslatableLabel field.
func (o *SupportedExternalDeviceType) SetTranslatableLabel(v TranslationTextType2000) {
	o.TranslatableLabel = &v
}

// GetIDEditable returns the IDEditable field value if set, zero value otherwise.
func (o *SupportedExternalDeviceType) GetIDEditable() bool {
	if o == nil || IsNil(o.IDEditable) {
		var ret bool
		return ret
	}
	return *o.IDEditable
}

// GetIDEditableOk returns a tuple with the IDEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportedExternalDeviceType) GetIDEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.IDEditable) {
		return nil, false
	}
	return o.IDEditable, true
}

// HasIDEditable returns a boolean if a field has been set.
func (o *SupportedExternalDeviceType) HasIDEditable() bool {
	if o != nil && !IsNil(o.IDEditable) {
		return true
	}

	return false
}

// SetIDEditable gets a reference to the given bool and assigns it to the IDEditable field.
func (o *SupportedExternalDeviceType) SetIDEditable(v bool) {
	o.IDEditable = &v
}

func (o SupportedExternalDeviceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportedExternalDeviceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceType) {
		toSerialize["deviceType"] = o.DeviceType
	}
	if !IsNil(o.DeviceCode) {
		toSerialize["deviceCode"] = o.DeviceCode
	}
	if !IsNil(o.DeviceArea) {
		toSerialize["deviceArea"] = o.DeviceArea
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.MobileYN) {
		toSerialize["mobileYN"] = o.MobileYN
	}
	if !IsNil(o.DesktopYN) {
		toSerialize["desktopYN"] = o.DesktopYN
	}
	if !IsNil(o.RegisterAddress) {
		toSerialize["registerAddress"] = o.RegisterAddress
	}
	if !IsNil(o.DeviceValue) {
		toSerialize["deviceValue"] = o.DeviceValue
	}
	if !IsNil(o.FiscalPartnerCode) {
		toSerialize["fiscalPartnerCode"] = o.FiscalPartnerCode
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.TranslatableLabel) {
		toSerialize["translatableLabel"] = o.TranslatableLabel
	}
	if !IsNil(o.IDEditable) {
		toSerialize["iDEditable"] = o.IDEditable
	}
	return toSerialize, nil
}

type NullableSupportedExternalDeviceType struct {
	value *SupportedExternalDeviceType
	isSet bool
}

func (v NullableSupportedExternalDeviceType) Get() *SupportedExternalDeviceType {
	return v.value
}

func (v *NullableSupportedExternalDeviceType) Set(val *SupportedExternalDeviceType) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedExternalDeviceType) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedExternalDeviceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedExternalDeviceType(val *SupportedExternalDeviceType) *NullableSupportedExternalDeviceType {
	return &NullableSupportedExternalDeviceType{value: val, isSet: true}
}

func (v NullableSupportedExternalDeviceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedExternalDeviceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


