/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
	"fmt"
)

// DeviceCode the model 'DeviceCode'
type DeviceCode string

// List of deviceCode
const (
	DEVICECODE_TTI_SCANNER_MOBILE DeviceCode = "TtiScannerMobile"
	DEVICECODE_TTI_SCANNER_DESKTOP DeviceCode = "TtiScannerDesktop"
	DEVICECODE_SAMSOTECH_SCANNER DeviceCode = "SamsotechScanner"
	DEVICECODE_GEN_SCANNER_DESKTOP DeviceCode = "GenScannerDesktop"
	DEVICECODE_GEN_SCANNER_MOBILE DeviceCode = "GenScannerMobile"
	DEVICECODE_CHIP_AND_PIN DeviceCode = "ChipAndPin"
	DEVICECODE_FISCAL_TERMINAL DeviceCode = "FiscalTerminal"
	DEVICECODE_DEVICE DeviceCode = "Device"
)

// All allowed values of DeviceCode enum
var AllowedDeviceCodeEnumValues = []DeviceCode{
	"TtiScannerMobile",
	"TtiScannerDesktop",
	"SamsotechScanner",
	"GenScannerDesktop",
	"GenScannerMobile",
	"ChipAndPin",
	"FiscalTerminal",
	"Device",
}

func (v *DeviceCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DeviceCode(value)
	for _, existing := range AllowedDeviceCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DeviceCode", value)
}

// NewDeviceCodeFromValue returns a pointer to a valid DeviceCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceCodeFromValue(v string) (*DeviceCode, error) {
	ev := DeviceCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DeviceCode: valid values are %v", v, AllowedDeviceCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceCode) IsValid() bool {
	for _, existing := range AllowedDeviceCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to deviceCode value
func (v DeviceCode) Ptr() *DeviceCode {
	return &v
}

type NullableDeviceCode struct {
	value *DeviceCode
	isSet bool
}

func (v NullableDeviceCode) Get() *DeviceCode {
	return v.value
}

func (v *NullableDeviceCode) Set(val *DeviceCode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCode(val *DeviceCode) *NullableDeviceCode {
	return &NullableDeviceCode{value: val, isSet: true}
}

func (v NullableDeviceCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

