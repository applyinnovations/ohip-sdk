/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the InterfaceUnitChargeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceUnitChargeType{}

// InterfaceUnitChargeType struct for InterfaceUnitChargeType
type InterfaceUnitChargeType struct {
	// Trunk ID of the CAS or PBX.
	TrunkId *string `json:"trunkId,omitempty"`
	// Line Types setup in IFC_ROOM table.
	LineType *string `json:"lineType,omitempty"`
	// Guest VIP Code.
	VipCode *string `json:"vipCode,omitempty"`
	// Starting number of units for the unit range.
	StartUnit *int32 `json:"startUnit,omitempty"`
	// Ending number of units for the unit range.
	EndUnit *int32 `json:"endUnit,omitempty"`
	// Amount charged per unit.
	PricePerUnit *int32 `json:"pricePerUnit,omitempty"`
}

// NewInterfaceUnitChargeType instantiates a new InterfaceUnitChargeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceUnitChargeType() *InterfaceUnitChargeType {
	this := InterfaceUnitChargeType{}
	return &this
}

// NewInterfaceUnitChargeTypeWithDefaults instantiates a new InterfaceUnitChargeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceUnitChargeTypeWithDefaults() *InterfaceUnitChargeType {
	this := InterfaceUnitChargeType{}
	return &this
}

// GetTrunkId returns the TrunkId field value if set, zero value otherwise.
func (o *InterfaceUnitChargeType) GetTrunkId() string {
	if o == nil || IsNil(o.TrunkId) {
		var ret string
		return ret
	}
	return *o.TrunkId
}

// GetTrunkIdOk returns a tuple with the TrunkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargeType) GetTrunkIdOk() (*string, bool) {
	if o == nil || IsNil(o.TrunkId) {
		return nil, false
	}
	return o.TrunkId, true
}

// HasTrunkId returns a boolean if a field has been set.
func (o *InterfaceUnitChargeType) HasTrunkId() bool {
	if o != nil && !IsNil(o.TrunkId) {
		return true
	}

	return false
}

// SetTrunkId gets a reference to the given string and assigns it to the TrunkId field.
func (o *InterfaceUnitChargeType) SetTrunkId(v string) {
	o.TrunkId = &v
}

// GetLineType returns the LineType field value if set, zero value otherwise.
func (o *InterfaceUnitChargeType) GetLineType() string {
	if o == nil || IsNil(o.LineType) {
		var ret string
		return ret
	}
	return *o.LineType
}

// GetLineTypeOk returns a tuple with the LineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargeType) GetLineTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LineType) {
		return nil, false
	}
	return o.LineType, true
}

// HasLineType returns a boolean if a field has been set.
func (o *InterfaceUnitChargeType) HasLineType() bool {
	if o != nil && !IsNil(o.LineType) {
		return true
	}

	return false
}

// SetLineType gets a reference to the given string and assigns it to the LineType field.
func (o *InterfaceUnitChargeType) SetLineType(v string) {
	o.LineType = &v
}

// GetVipCode returns the VipCode field value if set, zero value otherwise.
func (o *InterfaceUnitChargeType) GetVipCode() string {
	if o == nil || IsNil(o.VipCode) {
		var ret string
		return ret
	}
	return *o.VipCode
}

// GetVipCodeOk returns a tuple with the VipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargeType) GetVipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VipCode) {
		return nil, false
	}
	return o.VipCode, true
}

// HasVipCode returns a boolean if a field has been set.
func (o *InterfaceUnitChargeType) HasVipCode() bool {
	if o != nil && !IsNil(o.VipCode) {
		return true
	}

	return false
}

// SetVipCode gets a reference to the given string and assigns it to the VipCode field.
func (o *InterfaceUnitChargeType) SetVipCode(v string) {
	o.VipCode = &v
}

// GetStartUnit returns the StartUnit field value if set, zero value otherwise.
func (o *InterfaceUnitChargeType) GetStartUnit() int32 {
	if o == nil || IsNil(o.StartUnit) {
		var ret int32
		return ret
	}
	return *o.StartUnit
}

// GetStartUnitOk returns a tuple with the StartUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargeType) GetStartUnitOk() (*int32, bool) {
	if o == nil || IsNil(o.StartUnit) {
		return nil, false
	}
	return o.StartUnit, true
}

// HasStartUnit returns a boolean if a field has been set.
func (o *InterfaceUnitChargeType) HasStartUnit() bool {
	if o != nil && !IsNil(o.StartUnit) {
		return true
	}

	return false
}

// SetStartUnit gets a reference to the given int32 and assigns it to the StartUnit field.
func (o *InterfaceUnitChargeType) SetStartUnit(v int32) {
	o.StartUnit = &v
}

// GetEndUnit returns the EndUnit field value if set, zero value otherwise.
func (o *InterfaceUnitChargeType) GetEndUnit() int32 {
	if o == nil || IsNil(o.EndUnit) {
		var ret int32
		return ret
	}
	return *o.EndUnit
}

// GetEndUnitOk returns a tuple with the EndUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargeType) GetEndUnitOk() (*int32, bool) {
	if o == nil || IsNil(o.EndUnit) {
		return nil, false
	}
	return o.EndUnit, true
}

// HasEndUnit returns a boolean if a field has been set.
func (o *InterfaceUnitChargeType) HasEndUnit() bool {
	if o != nil && !IsNil(o.EndUnit) {
		return true
	}

	return false
}

// SetEndUnit gets a reference to the given int32 and assigns it to the EndUnit field.
func (o *InterfaceUnitChargeType) SetEndUnit(v int32) {
	o.EndUnit = &v
}

// GetPricePerUnit returns the PricePerUnit field value if set, zero value otherwise.
func (o *InterfaceUnitChargeType) GetPricePerUnit() int32 {
	if o == nil || IsNil(o.PricePerUnit) {
		var ret int32
		return ret
	}
	return *o.PricePerUnit
}

// GetPricePerUnitOk returns a tuple with the PricePerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargeType) GetPricePerUnitOk() (*int32, bool) {
	if o == nil || IsNil(o.PricePerUnit) {
		return nil, false
	}
	return o.PricePerUnit, true
}

// HasPricePerUnit returns a boolean if a field has been set.
func (o *InterfaceUnitChargeType) HasPricePerUnit() bool {
	if o != nil && !IsNil(o.PricePerUnit) {
		return true
	}

	return false
}

// SetPricePerUnit gets a reference to the given int32 and assigns it to the PricePerUnit field.
func (o *InterfaceUnitChargeType) SetPricePerUnit(v int32) {
	o.PricePerUnit = &v
}

func (o InterfaceUnitChargeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceUnitChargeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrunkId) {
		toSerialize["trunkId"] = o.TrunkId
	}
	if !IsNil(o.LineType) {
		toSerialize["lineType"] = o.LineType
	}
	if !IsNil(o.VipCode) {
		toSerialize["vipCode"] = o.VipCode
	}
	if !IsNil(o.StartUnit) {
		toSerialize["startUnit"] = o.StartUnit
	}
	if !IsNil(o.EndUnit) {
		toSerialize["endUnit"] = o.EndUnit
	}
	if !IsNil(o.PricePerUnit) {
		toSerialize["pricePerUnit"] = o.PricePerUnit
	}
	return toSerialize, nil
}

type NullableInterfaceUnitChargeType struct {
	value *InterfaceUnitChargeType
	isSet bool
}

func (v NullableInterfaceUnitChargeType) Get() *InterfaceUnitChargeType {
	return v.value
}

func (v *NullableInterfaceUnitChargeType) Set(val *InterfaceUnitChargeType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceUnitChargeType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceUnitChargeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceUnitChargeType(val *InterfaceUnitChargeType) *NullableInterfaceUnitChargeType {
	return &NullableInterfaceUnitChargeType{value: val, isSet: true}
}

func (v NullableInterfaceUnitChargeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceUnitChargeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


