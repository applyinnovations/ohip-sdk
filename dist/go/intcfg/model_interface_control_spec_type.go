/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the InterfaceControlSpecType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceControlSpecType{}

// InterfaceControlSpecType struct for InterfaceControlSpecType
type InterfaceControlSpecType struct {
	// Hotel Code of the hotel interface.
	HotelId *string `json:"hotelId,omitempty"`
	// Logo of the hotel interface.
	Logo *string `json:"logo,omitempty"`
	// Internal code of a translation specification setup.
	InternalCode *int32 `json:"internalCode,omitempty"`
	// Selector of a translation specification setup.
	Selector *string `json:"selector,omitempty"`
	// Specification of a translation specification setup.
	Specification *string `json:"specification,omitempty"`
	// Priority of a translation specification setup.
	Priority *string `json:"priority,omitempty"`
	// Position of a translation specification setup.
	Position *string `json:"position,omitempty"`
}

// NewInterfaceControlSpecType instantiates a new InterfaceControlSpecType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceControlSpecType() *InterfaceControlSpecType {
	this := InterfaceControlSpecType{}
	return &this
}

// NewInterfaceControlSpecTypeWithDefaults instantiates a new InterfaceControlSpecType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceControlSpecTypeWithDefaults() *InterfaceControlSpecType {
	this := InterfaceControlSpecType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfaceControlSpecType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlSpecType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfaceControlSpecType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfaceControlSpecType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InterfaceControlSpecType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlSpecType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InterfaceControlSpecType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InterfaceControlSpecType) SetLogo(v string) {
	o.Logo = &v
}

// GetInternalCode returns the InternalCode field value if set, zero value otherwise.
func (o *InterfaceControlSpecType) GetInternalCode() int32 {
	if o == nil || IsNil(o.InternalCode) {
		var ret int32
		return ret
	}
	return *o.InternalCode
}

// GetInternalCodeOk returns a tuple with the InternalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlSpecType) GetInternalCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.InternalCode) {
		return nil, false
	}
	return o.InternalCode, true
}

// HasInternalCode returns a boolean if a field has been set.
func (o *InterfaceControlSpecType) HasInternalCode() bool {
	if o != nil && !IsNil(o.InternalCode) {
		return true
	}

	return false
}

// SetInternalCode gets a reference to the given int32 and assigns it to the InternalCode field.
func (o *InterfaceControlSpecType) SetInternalCode(v int32) {
	o.InternalCode = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *InterfaceControlSpecType) GetSelector() string {
	if o == nil || IsNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlSpecType) GetSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *InterfaceControlSpecType) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *InterfaceControlSpecType) SetSelector(v string) {
	o.Selector = &v
}

// GetSpecification returns the Specification field value if set, zero value otherwise.
func (o *InterfaceControlSpecType) GetSpecification() string {
	if o == nil || IsNil(o.Specification) {
		var ret string
		return ret
	}
	return *o.Specification
}

// GetSpecificationOk returns a tuple with the Specification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlSpecType) GetSpecificationOk() (*string, bool) {
	if o == nil || IsNil(o.Specification) {
		return nil, false
	}
	return o.Specification, true
}

// HasSpecification returns a boolean if a field has been set.
func (o *InterfaceControlSpecType) HasSpecification() bool {
	if o != nil && !IsNil(o.Specification) {
		return true
	}

	return false
}

// SetSpecification gets a reference to the given string and assigns it to the Specification field.
func (o *InterfaceControlSpecType) SetSpecification(v string) {
	o.Specification = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *InterfaceControlSpecType) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlSpecType) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *InterfaceControlSpecType) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *InterfaceControlSpecType) SetPriority(v string) {
	o.Priority = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *InterfaceControlSpecType) GetPosition() string {
	if o == nil || IsNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceControlSpecType) GetPositionOk() (*string, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *InterfaceControlSpecType) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *InterfaceControlSpecType) SetPosition(v string) {
	o.Position = &v
}

func (o InterfaceControlSpecType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceControlSpecType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.InternalCode) {
		toSerialize["internalCode"] = o.InternalCode
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Specification) {
		toSerialize["specification"] = o.Specification
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	return toSerialize, nil
}

type NullableInterfaceControlSpecType struct {
	value *InterfaceControlSpecType
	isSet bool
}

func (v NullableInterfaceControlSpecType) Get() *InterfaceControlSpecType {
	return v.value
}

func (v *NullableInterfaceControlSpecType) Set(val *InterfaceControlSpecType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceControlSpecType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceControlSpecType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceControlSpecType(val *InterfaceControlSpecType) *NullableInterfaceControlSpecType {
	return &NullableInterfaceControlSpecType{value: val, isSet: true}
}

func (v NullableInterfaceControlSpecType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceControlSpecType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


