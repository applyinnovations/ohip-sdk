/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
	"fmt"
)

// ClassOfServiceConfigType Class Of Service is set to available and freely switchable.
type ClassOfServiceConfigType string

// List of classOfServiceConfigType
const (
	CLASSOFSERVICECONFIGTYPE_NOT_AVAILABLE ClassOfServiceConfigType = "NotAvailable"
	CLASSOFSERVICECONFIGTYPE_ALWAYS_ON ClassOfServiceConfigType = "AlwaysOn"
	CLASSOFSERVICECONFIGTYPE_ALWAYS_OFF ClassOfServiceConfigType = "AlwaysOff"
	CLASSOFSERVICECONFIGTYPE_FREELY_SWITCHABLE ClassOfServiceConfigType = "FreelySwitchable"
)

// All allowed values of ClassOfServiceConfigType enum
var AllowedClassOfServiceConfigTypeEnumValues = []ClassOfServiceConfigType{
	"NotAvailable",
	"AlwaysOn",
	"AlwaysOff",
	"FreelySwitchable",
}

func (v *ClassOfServiceConfigType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClassOfServiceConfigType(value)
	for _, existing := range AllowedClassOfServiceConfigTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClassOfServiceConfigType", value)
}

// NewClassOfServiceConfigTypeFromValue returns a pointer to a valid ClassOfServiceConfigType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClassOfServiceConfigTypeFromValue(v string) (*ClassOfServiceConfigType, error) {
	ev := ClassOfServiceConfigType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClassOfServiceConfigType: valid values are %v", v, AllowedClassOfServiceConfigTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClassOfServiceConfigType) IsValid() bool {
	for _, existing := range AllowedClassOfServiceConfigTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to classOfServiceConfigType value
func (v ClassOfServiceConfigType) Ptr() *ClassOfServiceConfigType {
	return &v
}

type NullableClassOfServiceConfigType struct {
	value *ClassOfServiceConfigType
	isSet bool
}

func (v NullableClassOfServiceConfigType) Get() *ClassOfServiceConfigType {
	return v.value
}

func (v *NullableClassOfServiceConfigType) Set(val *ClassOfServiceConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableClassOfServiceConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableClassOfServiceConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassOfServiceConfigType(val *ClassOfServiceConfigType) *NullableClassOfServiceConfigType {
	return &NullableClassOfServiceConfigType{value: val, isSet: true}
}

func (v NullableClassOfServiceConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassOfServiceConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

