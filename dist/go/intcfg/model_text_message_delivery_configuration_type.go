/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the TextMessageDeliveryConfigurationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextMessageDeliveryConfigurationType{}

// TextMessageDeliveryConfigurationType Text message delivery configuration
type TextMessageDeliveryConfigurationType struct {
	// Partner or User ID, Text field for Partner ID or User ID for the delivery provider, Name of the Text Messaging Provider.
	UserId *string `json:"userId,omitempty"`
	// Text field for Service type or email server address for the SMTP.
	ServerName *string `json:"serverName,omitempty"`
	// Text field for Service ID or email account for the SMTP as advised by Text Messaging Provider.
	Account *string `json:"account,omitempty"`
	Password *string `json:"password,omitempty"`
	// Number field for Delivery time out in seconds for the message. Any message exceeding this limit will be timed out. Add word Seconds using small grey font next to the number box.
	TimeOut *int32 `json:"timeOut,omitempty"`
	// Text field for URL address or the Text Messaging Provider.
	Url *string `json:"url,omitempty"`
	URLParameter *UrlFormatType `json:"uRLParameter,omitempty"`
	// Text field for entering any special formatting for the delivery, or multi select LOV type, for example the one used for Address Format for selection of SID fields, to allow users choosing from a list of tags that may be used to customize this field.
	Format *string `json:"format,omitempty"`
	// Text field for entering the Text Message for delivery.
	Message *string `json:"message,omitempty"`
	Type *TextDeliveryMethodType `json:"type,omitempty"`
	// Hotel code
	HotelId *string `json:"hotelId,omitempty"`
}

// NewTextMessageDeliveryConfigurationType instantiates a new TextMessageDeliveryConfigurationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextMessageDeliveryConfigurationType() *TextMessageDeliveryConfigurationType {
	this := TextMessageDeliveryConfigurationType{}
	return &this
}

// NewTextMessageDeliveryConfigurationTypeWithDefaults instantiates a new TextMessageDeliveryConfigurationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextMessageDeliveryConfigurationTypeWithDefaults() *TextMessageDeliveryConfigurationType {
	this := TextMessageDeliveryConfigurationType{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *TextMessageDeliveryConfigurationType) SetUserId(v string) {
	o.UserId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *TextMessageDeliveryConfigurationType) SetServerName(v string) {
	o.ServerName = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *TextMessageDeliveryConfigurationType) SetAccount(v string) {
	o.Account = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *TextMessageDeliveryConfigurationType) SetPassword(v string) {
	o.Password = &v
}

// GetTimeOut returns the TimeOut field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetTimeOut() int32 {
	if o == nil || IsNil(o.TimeOut) {
		var ret int32
		return ret
	}
	return *o.TimeOut
}

// GetTimeOutOk returns a tuple with the TimeOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetTimeOutOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeOut) {
		return nil, false
	}
	return o.TimeOut, true
}

// HasTimeOut returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasTimeOut() bool {
	if o != nil && !IsNil(o.TimeOut) {
		return true
	}

	return false
}

// SetTimeOut gets a reference to the given int32 and assigns it to the TimeOut field.
func (o *TextMessageDeliveryConfigurationType) SetTimeOut(v int32) {
	o.TimeOut = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TextMessageDeliveryConfigurationType) SetUrl(v string) {
	o.Url = &v
}

// GetURLParameter returns the URLParameter field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetURLParameter() UrlFormatType {
	if o == nil || IsNil(o.URLParameter) {
		var ret UrlFormatType
		return ret
	}
	return *o.URLParameter
}

// GetURLParameterOk returns a tuple with the URLParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetURLParameterOk() (*UrlFormatType, bool) {
	if o == nil || IsNil(o.URLParameter) {
		return nil, false
	}
	return o.URLParameter, true
}

// HasURLParameter returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasURLParameter() bool {
	if o != nil && !IsNil(o.URLParameter) {
		return true
	}

	return false
}

// SetURLParameter gets a reference to the given UrlFormatType and assigns it to the URLParameter field.
func (o *TextMessageDeliveryConfigurationType) SetURLParameter(v UrlFormatType) {
	o.URLParameter = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *TextMessageDeliveryConfigurationType) SetFormat(v string) {
	o.Format = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TextMessageDeliveryConfigurationType) SetMessage(v string) {
	o.Message = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetType() TextDeliveryMethodType {
	if o == nil || IsNil(o.Type) {
		var ret TextDeliveryMethodType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetTypeOk() (*TextDeliveryMethodType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TextDeliveryMethodType and assigns it to the Type field.
func (o *TextMessageDeliveryConfigurationType) SetType(v TextDeliveryMethodType) {
	o.Type = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *TextMessageDeliveryConfigurationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessageDeliveryConfigurationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *TextMessageDeliveryConfigurationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *TextMessageDeliveryConfigurationType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o TextMessageDeliveryConfigurationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextMessageDeliveryConfigurationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.ServerName) {
		toSerialize["serverName"] = o.ServerName
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.TimeOut) {
		toSerialize["timeOut"] = o.TimeOut
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.URLParameter) {
		toSerialize["uRLParameter"] = o.URLParameter
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableTextMessageDeliveryConfigurationType struct {
	value *TextMessageDeliveryConfigurationType
	isSet bool
}

func (v NullableTextMessageDeliveryConfigurationType) Get() *TextMessageDeliveryConfigurationType {
	return v.value
}

func (v *NullableTextMessageDeliveryConfigurationType) Set(val *TextMessageDeliveryConfigurationType) {
	v.value = val
	v.isSet = true
}

func (v NullableTextMessageDeliveryConfigurationType) IsSet() bool {
	return v.isSet
}

func (v *NullableTextMessageDeliveryConfigurationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextMessageDeliveryConfigurationType(val *TextMessageDeliveryConfigurationType) *NullableTextMessageDeliveryConfigurationType {
	return &NullableTextMessageDeliveryConfigurationType{value: val, isSet: true}
}

func (v NullableTextMessageDeliveryConfigurationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextMessageDeliveryConfigurationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


