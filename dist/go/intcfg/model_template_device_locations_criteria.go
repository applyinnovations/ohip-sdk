/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the TemplateDeviceLocationsCriteria type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateDeviceLocationsCriteria{}

// TemplateDeviceLocationsCriteria Request object for creating template Device locations.
type TemplateDeviceLocationsCriteria struct {
	// List of Device locations at template level.
	TemplateDeviceLocations []TemplateDeviceLocationType `json:"templateDeviceLocations,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewTemplateDeviceLocationsCriteria instantiates a new TemplateDeviceLocationsCriteria object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateDeviceLocationsCriteria() *TemplateDeviceLocationsCriteria {
	this := TemplateDeviceLocationsCriteria{}
	return &this
}

// NewTemplateDeviceLocationsCriteriaWithDefaults instantiates a new TemplateDeviceLocationsCriteria object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateDeviceLocationsCriteriaWithDefaults() *TemplateDeviceLocationsCriteria {
	this := TemplateDeviceLocationsCriteria{}
	return &this
}

// GetTemplateDeviceLocations returns the TemplateDeviceLocations field value if set, zero value otherwise.
func (o *TemplateDeviceLocationsCriteria) GetTemplateDeviceLocations() []TemplateDeviceLocationType {
	if o == nil || IsNil(o.TemplateDeviceLocations) {
		var ret []TemplateDeviceLocationType
		return ret
	}
	return o.TemplateDeviceLocations
}

// GetTemplateDeviceLocationsOk returns a tuple with the TemplateDeviceLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDeviceLocationsCriteria) GetTemplateDeviceLocationsOk() ([]TemplateDeviceLocationType, bool) {
	if o == nil || IsNil(o.TemplateDeviceLocations) {
		return nil, false
	}
	return o.TemplateDeviceLocations, true
}

// HasTemplateDeviceLocations returns a boolean if a field has been set.
func (o *TemplateDeviceLocationsCriteria) HasTemplateDeviceLocations() bool {
	if o != nil && !IsNil(o.TemplateDeviceLocations) {
		return true
	}

	return false
}

// SetTemplateDeviceLocations gets a reference to the given []TemplateDeviceLocationType and assigns it to the TemplateDeviceLocations field.
func (o *TemplateDeviceLocationsCriteria) SetTemplateDeviceLocations(v []TemplateDeviceLocationType) {
	o.TemplateDeviceLocations = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TemplateDeviceLocationsCriteria) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDeviceLocationsCriteria) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TemplateDeviceLocationsCriteria) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *TemplateDeviceLocationsCriteria) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *TemplateDeviceLocationsCriteria) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateDeviceLocationsCriteria) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *TemplateDeviceLocationsCriteria) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *TemplateDeviceLocationsCriteria) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o TemplateDeviceLocationsCriteria) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateDeviceLocationsCriteria) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TemplateDeviceLocations) {
		toSerialize["templateDeviceLocations"] = o.TemplateDeviceLocations
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableTemplateDeviceLocationsCriteria struct {
	value *TemplateDeviceLocationsCriteria
	isSet bool
}

func (v NullableTemplateDeviceLocationsCriteria) Get() *TemplateDeviceLocationsCriteria {
	return v.value
}

func (v *NullableTemplateDeviceLocationsCriteria) Set(val *TemplateDeviceLocationsCriteria) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateDeviceLocationsCriteria) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateDeviceLocationsCriteria) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateDeviceLocationsCriteria(val *TemplateDeviceLocationsCriteria) *NullableTemplateDeviceLocationsCriteria {
	return &NullableTemplateDeviceLocationsCriteria{value: val, isSet: true}
}

func (v NullableTemplateDeviceLocationsCriteria) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateDeviceLocationsCriteria) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


