/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the PayByLinkDeliveryMethodType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayByLinkDeliveryMethodType{}

// PayByLinkDeliveryMethodType Pay By Link delivery method configuration, settings for Email containing payment url
type PayByLinkDeliveryMethodType struct {
	Email *EmailDeliveryConfigurationType `json:"email,omitempty"`
}

// NewPayByLinkDeliveryMethodType instantiates a new PayByLinkDeliveryMethodType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayByLinkDeliveryMethodType() *PayByLinkDeliveryMethodType {
	this := PayByLinkDeliveryMethodType{}
	return &this
}

// NewPayByLinkDeliveryMethodTypeWithDefaults instantiates a new PayByLinkDeliveryMethodType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayByLinkDeliveryMethodTypeWithDefaults() *PayByLinkDeliveryMethodType {
	this := PayByLinkDeliveryMethodType{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PayByLinkDeliveryMethodType) GetEmail() EmailDeliveryConfigurationType {
	if o == nil || IsNil(o.Email) {
		var ret EmailDeliveryConfigurationType
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayByLinkDeliveryMethodType) GetEmailOk() (*EmailDeliveryConfigurationType, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PayByLinkDeliveryMethodType) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given EmailDeliveryConfigurationType and assigns it to the Email field.
func (o *PayByLinkDeliveryMethodType) SetEmail(v EmailDeliveryConfigurationType) {
	o.Email = &v
}

func (o PayByLinkDeliveryMethodType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayByLinkDeliveryMethodType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullablePayByLinkDeliveryMethodType struct {
	value *PayByLinkDeliveryMethodType
	isSet bool
}

func (v NullablePayByLinkDeliveryMethodType) Get() *PayByLinkDeliveryMethodType {
	return v.value
}

func (v *NullablePayByLinkDeliveryMethodType) Set(val *PayByLinkDeliveryMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullablePayByLinkDeliveryMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullablePayByLinkDeliveryMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayByLinkDeliveryMethodType(val *PayByLinkDeliveryMethodType) *NullablePayByLinkDeliveryMethodType {
	return &NullablePayByLinkDeliveryMethodType{value: val, isSet: true}
}

func (v NullablePayByLinkDeliveryMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayByLinkDeliveryMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


