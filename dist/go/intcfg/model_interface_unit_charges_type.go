/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the InterfaceUnitChargesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceUnitChargesType{}

// InterfaceUnitChargesType Collection of Hotel Interface Unit Charges.
type InterfaceUnitChargesType struct {
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
	// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
	Logo *string `json:"logo,omitempty"`
	UnitCharges []InterfaceUnitChargeType `json:"unitCharges,omitempty"`
}

// NewInterfaceUnitChargesType instantiates a new InterfaceUnitChargesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceUnitChargesType() *InterfaceUnitChargesType {
	this := InterfaceUnitChargesType{}
	return &this
}

// NewInterfaceUnitChargesTypeWithDefaults instantiates a new InterfaceUnitChargesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceUnitChargesTypeWithDefaults() *InterfaceUnitChargesType {
	this := InterfaceUnitChargesType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfaceUnitChargesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfaceUnitChargesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfaceUnitChargesType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InterfaceUnitChargesType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargesType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InterfaceUnitChargesType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InterfaceUnitChargesType) SetLogo(v string) {
	o.Logo = &v
}

// GetUnitCharges returns the UnitCharges field value if set, zero value otherwise.
func (o *InterfaceUnitChargesType) GetUnitCharges() []InterfaceUnitChargeType {
	if o == nil || IsNil(o.UnitCharges) {
		var ret []InterfaceUnitChargeType
		return ret
	}
	return o.UnitCharges
}

// GetUnitChargesOk returns a tuple with the UnitCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceUnitChargesType) GetUnitChargesOk() ([]InterfaceUnitChargeType, bool) {
	if o == nil || IsNil(o.UnitCharges) {
		return nil, false
	}
	return o.UnitCharges, true
}

// HasUnitCharges returns a boolean if a field has been set.
func (o *InterfaceUnitChargesType) HasUnitCharges() bool {
	if o != nil && !IsNil(o.UnitCharges) {
		return true
	}

	return false
}

// SetUnitCharges gets a reference to the given []InterfaceUnitChargeType and assigns it to the UnitCharges field.
func (o *InterfaceUnitChargesType) SetUnitCharges(v []InterfaceUnitChargeType) {
	o.UnitCharges = v
}

func (o InterfaceUnitChargesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceUnitChargesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.UnitCharges) {
		toSerialize["unitCharges"] = o.UnitCharges
	}
	return toSerialize, nil
}

type NullableInterfaceUnitChargesType struct {
	value *InterfaceUnitChargesType
	isSet bool
}

func (v NullableInterfaceUnitChargesType) Get() *InterfaceUnitChargesType {
	return v.value
}

func (v *NullableInterfaceUnitChargesType) Set(val *InterfaceUnitChargesType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceUnitChargesType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceUnitChargesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceUnitChargesType(val *InterfaceUnitChargesType) *NullableInterfaceUnitChargesType {
	return &NullableInterfaceUnitChargesType{value: val, isSet: true}
}

func (v NullableInterfaceUnitChargesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceUnitChargesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


