/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ExternalSystemsConfigAPIService ExternalSystemsConfigAPI service
type ExternalSystemsConfigAPIService service

type ExternalSystemsConfigAPIClearCacheRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIClearCacheRequest) Authorization(authorization string) ExternalSystemsConfigAPIClearCacheRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIClearCacheRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIClearCacheRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIClearCacheRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIClearCacheRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIClearCacheRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIClearCacheRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIClearCacheRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIClearCacheRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIClearCacheRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ClearCacheExecute(r)
}

/*
ClearCache Operation to clear cache.

 <p><strong>OperationId:</strong>clearCache</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIClearCacheRequest
*/
func (a *ExternalSystemsConfigAPIService) ClearCache(ctx context.Context) ExternalSystemsConfigAPIClearCacheRequest {
	return ExternalSystemsConfigAPIClearCacheRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) ClearCacheExecute(r ExternalSystemsConfigAPIClearCacheRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.ClearCache")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/config/cache"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	type_ *string
	options *[]string
	configurationId *[]int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) HotelId(hotelId string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.hotelId = &hotelId
	return r
}

// Settings for Text Message Delivery of Queue Reservation status
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) Type_(type_ string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.type_ = &type_
	return r
}

// SFTP delivery configurations
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) Options(options []string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.options = &options
	return r
}

// Unique id associated with this configuration
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) ConfigurationId(configurationId []int32) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.configurationId = &configurationId
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteDeliveryMethodsExecute(r)
}

/*
DeleteDeliveryMethods Operation to remove delivery methods.

 <p><strong>OperationId:</strong>deleteDeliveryMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest
*/
func (a *ExternalSystemsConfigAPIService) DeleteDeliveryMethods(ctx context.Context) ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest {
	return ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeleteDeliveryMethodsExecute(r ExternalSystemsConfigAPIDeleteDeliveryMethodsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeleteDeliveryMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deliveryMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.options != nil {
		t := *r.options
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "options", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "options", t, "multi")
		}
  }
	if r.configurationId != nil {
		t := *r.configurationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "configurationId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "configurationId", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeleteHotelInterfaceRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	logo *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeleteHotelInterfaceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeleteHotelInterfaceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeleteHotelInterfaceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
func (r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) Logo(logo string) ExternalSystemsConfigAPIDeleteHotelInterfaceRequest {
	r.logo = &logo
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeleteHotelInterfaceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeleteHotelInterfaceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteHotelInterfaceExecute(r)
}

/*
DeleteHotelInterface Operation to remove hotel interface.

 <p><strong>OperationId:</strong>deleteHotelInterface</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId
 @return ExternalSystemsConfigAPIDeleteHotelInterfaceRequest
*/
func (a *ExternalSystemsConfigAPIService) DeleteHotelInterface(ctx context.Context, hotelId string) ExternalSystemsConfigAPIDeleteHotelInterfaceRequest {
	return ExternalSystemsConfigAPIDeleteHotelInterfaceRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeleteHotelInterfaceExecute(r ExternalSystemsConfigAPIDeleteHotelInterfaceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeleteHotelInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/hotelInerface"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.logo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logo", r.logo, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeleteInterfaceAccountRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	accountId string
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	autoBalance *bool
	paymentMethod *string
	account *string
	accountDescription *string
	salesOutlet *string
	trxCode *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Auto balance flag of postings setup.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) AutoBalance(autoBalance bool) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.autoBalance = &autoBalance
	return r
}

// Payment method of posting accounts in transaction codes setup.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) PaymentMethod(paymentMethod string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.paymentMethod = &paymentMethod
	return r
}

// Account of posting accounts in transaction codes setup.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) Account(account string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.account = &account
	return r
}

// Account description of posting accounts in transaction codes setup.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) AccountDescription(accountDescription string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.accountDescription = &accountDescription
	return r
}

// Sales outlet of posting accounts in transaction codes setup.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) SalesOutlet(salesOutlet string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.salesOutlet = &salesOutlet
	return r
}

// Transaction code of posting accounts in transaction codes setup.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) TrxCode(trxCode string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.trxCode = &trxCode
	return r
}

// Description of posting accounts in transaction codes setup.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) Description(description string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.description = &description
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteInterfaceAccountExecute(r)
}

/*
DeleteInterfaceAccount Operation to remove interface account.

 <p><strong>OperationId:</strong>deleteInterfaceAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId OPERA Id for Account
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIDeleteInterfaceAccountRequest
*/
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceAccount(ctx context.Context, accountId string, interfaceId string, hotelId string) ExternalSystemsConfigAPIDeleteInterfaceAccountRequest {
	return ExternalSystemsConfigAPIDeleteInterfaceAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceAccountExecute(r ExternalSystemsConfigAPIDeleteInterfaceAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeleteInterfaceAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.accountId) < 1 {
		return localVarReturnValue, nil, reportError("accountId must have at least 1 elements")
	}
	if strlen(r.accountId) > 2000 {
		return localVarReturnValue, nil, reportError("accountId must have less than 2000 elements")
	}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.autoBalance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "autoBalance", r.autoBalance, "")
  }
	if r.paymentMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethod", r.paymentMethod, "")
  }
	if r.account != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account", r.account, "")
  }
	if r.accountDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountDescription", r.accountDescription, "")
  }
	if r.salesOutlet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "salesOutlet", r.salesOutlet, "")
  }
	if r.trxCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trxCode", r.trxCode, "")
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeleteInterfaceMachineRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	machineId string
	authorization *string
	xAppKey *string
	xHotelid *string
	machine *string
	program *string
	controllerPort *int32
	vncPort *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.xHotelid = &xHotelid
	return r
}

// Unique Machine name of the running Interface.
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) Machine(machine string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.machine = &machine
	return r
}

// Path and name of the Interface program running on every Machine.
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) Program(program string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.program = &program
	return r
}

// Opera Interface controller (server) port for the connecting clients.
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) ControllerPort(controllerPort int32) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.controllerPort = &controllerPort
	return r
}

// VNC server port for connecting to the VNC server.
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) VncPort(vncPort int32) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.vncPort = &vncPort
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteInterfaceMachineExecute(r)
}

/*
DeleteInterfaceMachine Operation to remove interface machine.

 <p><strong>OperationId:</strong>deleteInterfaceMachine</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param machineId OPERA Id for machine
 @return ExternalSystemsConfigAPIDeleteInterfaceMachineRequest
*/
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceMachine(ctx context.Context, machineId string) ExternalSystemsConfigAPIDeleteInterfaceMachineRequest {
	return ExternalSystemsConfigAPIDeleteInterfaceMachineRequest{
		ApiService: a,
		ctx: ctx,
		machineId: machineId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceMachineExecute(r ExternalSystemsConfigAPIDeleteInterfaceMachineRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeleteInterfaceMachine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/machines/{machineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"machineId"+"}", url.PathEscape(parameterValueToString(r.machineId, "machineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.machineId) < 1 {
		return localVarReturnValue, nil, reportError("machineId must have at least 1 elements")
	}
	if strlen(r.machineId) > 2000 {
		return localVarReturnValue, nil, reportError("machineId must have less than 2000 elements")
	}

	if r.machine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "machine", r.machine, "")
  }
	if r.program != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "program", r.program, "")
  }
	if r.controllerPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "controllerPort", r.controllerPort, "")
  }
	if r.vncPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vncPort", r.vncPort, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeleteInterfaceRightRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	id *string
	idExtension *int32
	idContext *string
	type_ *string
	right *int32
	code *string
	description *string
	interfaceRightDescription *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Code to which the Interface Right belongs to.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) HotelId(hotelId string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.hotelId = &hotelId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) Id(id string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.id = &id
	return r
}

// Additional identifying value assigned by the creating system.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) IdExtension(idExtension int32) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) IdContext(idContext string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) Type_(type_ string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.type_ = &type_
	return r
}

// Internal code for each allowed right of a Hotel Interface record.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) Right(right int32) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.right = &right
	return r
}

// User defined code for an Interface Right.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) Code(code string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.code = &code
	return r
}

// User defined description for an Interface Right.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) Description(description string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.description = &description
	return r
}

// System Description of an allowed Interface Right.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) InterfaceRightDescription(interfaceRightDescription string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.interfaceRightDescription = &interfaceRightDescription
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteInterfaceRightExecute(r)
}

/*
DeleteInterfaceRight Operation to remove interface right.

 <p><strong>OperationId:</strong>deleteInterfaceRight</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIDeleteInterfaceRightRequest
*/
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceRight(ctx context.Context) ExternalSystemsConfigAPIDeleteInterfaceRightRequest {
	return ExternalSystemsConfigAPIDeleteInterfaceRightRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceRightExecute(r ExternalSystemsConfigAPIDeleteInterfaceRightRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeleteInterfaceRight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaceRights"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.right != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "right", r.right, "")
  }
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	if r.interfaceRightDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceRightDescription", r.interfaceRightDescription, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeleteInterfaceRoomRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	roomType *string
	roomNumber *string
	lineNumber *string
	oldLineNumber *string
	type_ *string
	dataLine *string
	dataLineId *string
	wakeUpCall *bool
	doNotDisturb *string
	classOfService *string
	directInwardDial *string
	messageWaiting *string
	maskDialNumber *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// Front Office Room Type.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) RoomType(roomType string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.roomType = &roomType
	return r
}

// Front Office Room Number.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) RoomNumber(roomNumber string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.roomNumber = &roomNumber
	return r
}

// External System&#39;s extension number.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) LineNumber(lineNumber string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.lineNumber = &lineNumber
	return r
}

// External System&#39;s extension number. It is used for editing a record. It is logically part of the record ID, and can actually be updated.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) OldLineNumber(oldLineNumber string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.oldLineNumber = &oldLineNumber
	return r
}

// Line Type of an Interface Room.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) Type_(type_ string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.type_ = &type_
	return r
}

// Line Out
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) DataLine(dataLine string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.dataLine = &dataLine
	return r
}

// Translation Table Id as defined in the IFC_CTRL table. It is also referred as Xlat Id.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) DataLineId(dataLineId string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.dataLineId = &dataLineId
	return r
}

// Value to set/check if the wake up call funtionality is enabled/disabled for the particular line number.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) WakeUpCall(wakeUpCall bool) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.wakeUpCall = &wakeUpCall
	return r
}

// Do Not Disturb is set to available and freely switchable.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) DoNotDisturb(doNotDisturb string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.doNotDisturb = &doNotDisturb
	return r
}

// Class Of Service is set to available and freely switchable.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) ClassOfService(classOfService string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.classOfService = &classOfService
	return r
}

// Direct Inward Dial is set to available and freely switchable.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) DirectInwardDial(directInwardDial string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.directInwardDial = &directInwardDial
	return r
}

// Message Waiting is set to available and freely switchable.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) MessageWaiting(messageWaiting string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.messageWaiting = &messageWaiting
	return r
}

// Mask the dialled digits as per the room configuration.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) MaskDialNumber(maskDialNumber string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.maskDialNumber = &maskDialNumber
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteInterfaceRoomExecute(r)
}

/*
DeleteInterfaceRoom Operation to remove interface room.

 <p><strong>OperationId:</strong>deleteInterfaceRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIDeleteInterfaceRoomRequest
*/
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceRoom(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIDeleteInterfaceRoomRequest {
	return ExternalSystemsConfigAPIDeleteInterfaceRoomRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceRoomExecute(r ExternalSystemsConfigAPIDeleteInterfaceRoomRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeleteInterfaceRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/rooms"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.roomType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomType", r.roomType, "")
  }
	if r.roomNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomNumber", r.roomNumber, "")
  }
	if r.lineNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lineNumber", r.lineNumber, "")
  }
	if r.oldLineNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "oldLineNumber", r.oldLineNumber, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.dataLine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLine", r.dataLine, "")
  }
	if r.dataLineId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataLineId", r.dataLineId, "")
  }
	if r.wakeUpCall != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wakeUpCall", r.wakeUpCall, "")
  }
	if r.doNotDisturb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "doNotDisturb", r.doNotDisturb, "")
  }
	if r.classOfService != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "classOfService", r.classOfService, "")
  }
	if r.directInwardDial != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "directInwardDial", r.directInwardDial, "")
  }
	if r.messageWaiting != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "messageWaiting", r.messageWaiting, "")
  }
	if r.maskDialNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maskDialNumber", r.maskDialNumber, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	entryCode *string
	status *string
	housekeepingStatus *string
	customRoomTranslation *string
	description *string
	interfaceRoomStatusId *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.xHotelid = &xHotelid
	return r
}

// Entry code of a Hotel Interface Room Status.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) EntryCode(entryCode string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.entryCode = &entryCode
	return r
}

// Room Status which is either Vacant (V) or Occupied (O).
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) Status(status string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.status = &status
	return r
}

// Housekeeping status of a room.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) HousekeepingStatus(housekeepingStatus string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.housekeepingStatus = &housekeepingStatus
	return r
}

// Custom Room Translation of a Hotel Interface. It is a concatenation of a Status (V-Vacant or O-Occupied) and Housekeeping Status (IS-Inspected, CL-Clean, etc.) The delimiter is a period. Sample values are V.IS, V.CL, O.IS, O.CL.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) CustomRoomTranslation(customRoomTranslation string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.customRoomTranslation = &customRoomTranslation
	return r
}

// Description of the Hotel Interface Room Status.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) Description(description string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.description = &description
	return r
}

// Row number to identify all the records belonging to a single group of Hotel Interface Room Status.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) InterfaceRoomStatusId(interfaceRoomStatusId int32) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.interfaceRoomStatusId = &interfaceRoomStatusId
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteInterfaceRoomStatusExecute(r)
}

/*
DeleteInterfaceRoomStatus Operation to remove interface room status.

 <p><strong>OperationId:</strong>deleteInterfaceRoomStatus</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA id for Property
 @param hotelId OPERA id for Property
 @return ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest
*/
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceRoomStatus(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest {
	return ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeleteInterfaceRoomStatusExecute(r ExternalSystemsConfigAPIDeleteInterfaceRoomStatusRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeleteInterfaceRoomStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/roomStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.entryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entryCode", r.entryCode, "")
  }
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
  }
	if r.housekeepingStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "housekeepingStatus", r.housekeepingStatus, "")
  }
	if r.customRoomTranslation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customRoomTranslation", r.customRoomTranslation, "")
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	if r.interfaceRoomStatusId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceRoomStatusId", r.interfaceRoomStatusId, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIDeletePublisherRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	hotelId string
	externalSystemCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	subscriberHotelId *string
	code *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIDeletePublisherRequest) Authorization(authorization string) ExternalSystemsConfigAPIDeletePublisherRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIDeletePublisherRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIDeletePublisherRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIDeletePublisherRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIDeletePublisherRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ExternalSystemsConfigAPIDeletePublisherRequest) SubscriberHotelId(subscriberHotelId string) ExternalSystemsConfigAPIDeletePublisherRequest {
	r.subscriberHotelId = &subscriberHotelId
	return r
}

func (r ExternalSystemsConfigAPIDeletePublisherRequest) Code(code string) ExternalSystemsConfigAPIDeletePublisherRequest {
	r.code = &code
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIDeletePublisherRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIDeletePublisherRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIDeletePublisherRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIDeletePublisherRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIDeletePublisherRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeletePublisherExecute(r)
}

/*
DeletePublisher Operation to remove publisher.

 <p><strong>OperationId:</strong>deletePublisher</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Id used to find a property in OPERA.
 @param externalSystemCode Unique OPERA Code used to find External System in OPERA.
 @return ExternalSystemsConfigAPIDeletePublisherRequest
*/
func (a *ExternalSystemsConfigAPIService) DeletePublisher(ctx context.Context, hotelId string, externalSystemCode string) ExternalSystemsConfigAPIDeletePublisherRequest {
	return ExternalSystemsConfigAPIDeletePublisherRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		externalSystemCode: externalSystemCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) DeletePublisherExecute(r ExternalSystemsConfigAPIDeletePublisherRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.DeletePublisher")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}

	if r.subscriberHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subscriberHotelId", r.subscriberHotelId, "")
  }
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	active *bool
	id *string
	idEditable *bool
	label *string
	deviceType *string
	deviceCode *string
	deviceArea *string
	displayName *string
	mobileYN *bool
	desktopYN *bool
	registerAddress *string
	deviceValue *string
	parameterName *string
	parameterValue *string
	includeInactive *bool
	fiscalPartnerCode *string
	partnerCode *[]string
	fetchInstruction *string
	partnerPayloadType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) HotelId(hotelId string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.hotelId = &hotelId
	return r
}

// Flag that indicates whether the device is active.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) Active(active bool) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.active = &active
	return r
}

func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) Id(id string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.id = &id
	return r
}

func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) IdEditable(idEditable bool) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.idEditable = &idEditable
	return r
}

func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) Label(label string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.label = &label
	return r
}

func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) DeviceType(deviceType string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.deviceType = &deviceType
	return r
}

func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) DeviceCode(deviceCode string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.deviceCode = &deviceCode
	return r
}

// The area where the device is installed
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) DeviceArea(deviceArea string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.deviceArea = &deviceArea
	return r
}

// External device display name.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) DisplayName(displayName string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.displayName = &displayName
	return r
}

// Indicator if device type is mobile or desktop.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) MobileYN(mobileYN bool) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.mobileYN = &mobileYN
	return r
}

// Indicator if device type is mobile or desktop.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) DesktopYN(desktopYN bool) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.desktopYN = &desktopYN
	return r
}

// The address which the Cash Register ID ( Device ID ) is associated with.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) RegisterAddress(registerAddress string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.registerAddress = &registerAddress
	return r
}

// External device Value.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) DeviceValue(deviceValue string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.deviceValue = &deviceValue
	return r
}

// Name of the parameter.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) ParameterName(parameterName string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.parameterName = &parameterName
	return r
}

// Value of the parameter.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) ParameterValue(parameterValue string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.parameterValue = &parameterValue
	return r
}

// Flag to choose to include inactive external devices or not.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) IncludeInactive(includeInactive bool) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.includeInactive = &includeInactive
	return r
}

// Used for fiscal partner codes. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) FiscalPartnerCode(fiscalPartnerCode string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.fiscalPartnerCode = &fiscalPartnerCode
	return r
}

// Used for fiscal partner codes. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) PartnerCode(partnerCode []string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.partnerCode = &partnerCode
	return r
}

// Fetch instructions that can be used for all or partner specific.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) FetchInstruction(fetchInstruction string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.fetchInstruction = &fetchInstruction
	return r
}

// Used for searching a partner code configured with the specified fiscal payload type.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) PartnerPayloadType(partnerPayloadType string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.partnerPayloadType = &partnerPayloadType
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) Execute() (*FetchedConfiguredExternalDevices, *http.Response, error) {
	return r.ApiService.GetConfiguredExternalDevicesExecute(r)
}

/*
GetConfiguredExternalDevices Operation to fetch configured external devices.

 <p><strong>OperationId:</strong>getConfiguredExternalDevices</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest
*/
func (a *ExternalSystemsConfigAPIService) GetConfiguredExternalDevices(ctx context.Context) ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest {
	return ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedConfiguredExternalDevices
func (a *ExternalSystemsConfigAPIService) GetConfiguredExternalDevicesExecute(r ExternalSystemsConfigAPIGetConfiguredExternalDevicesRequest) (*FetchedConfiguredExternalDevices, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedConfiguredExternalDevices
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetConfiguredExternalDevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/configuredExternalDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "active", r.active, "")
  }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idEditable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idEditable", r.idEditable, "")
  }
	if r.label != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label", r.label, "")
  }
	if r.deviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceType", r.deviceType, "")
  }
	if r.deviceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceCode", r.deviceCode, "")
  }
	if r.deviceArea != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceArea", r.deviceArea, "")
  }
	if r.displayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayName", r.displayName, "")
  }
	if r.mobileYN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mobileYN", r.mobileYN, "")
  }
	if r.desktopYN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "desktopYN", r.desktopYN, "")
  }
	if r.registerAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registerAddress", r.registerAddress, "")
  }
	if r.deviceValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceValue", r.deviceValue, "")
  }
	if r.parameterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parameterName", r.parameterName, "")
  }
	if r.parameterValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "parameterValue", r.parameterValue, "")
  }
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	if r.fiscalPartnerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fiscalPartnerCode", r.fiscalPartnerCode, "")
  }
	if r.partnerCode != nil {
		t := *r.partnerCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "partnerCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "partnerCode", t, "multi")
		}
  }
	if r.fetchInstruction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstruction", r.fetchInstruction, "")
  }
	if r.partnerPayloadType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "partnerPayloadType", r.partnerPayloadType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetDeliveryMethodsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	croCode *string
	usages *[]string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Property code.
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) HotelId(hotelId string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.hotelId = &hotelId
	return r
}

// CRO code.
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) CroCode(croCode string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.croCode = &croCode
	return r
}

// Settings for Text Message Delivery of Queue Reservation status
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) Usages(usages []string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.usages = &usages
	return r
}

// If true this will include inactive records(This is only applicable for general SMTP delivery method ).
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) IncludeInactive(includeInactive bool) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) Execute() (*FetchedDeliveryMethods, *http.Response, error) {
	return r.ApiService.GetDeliveryMethodsExecute(r)
}

/*
GetDeliveryMethods Operation to fetch delivery methods.

 <p><strong>OperationId:</strong>getDeliveryMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetDeliveryMethodsRequest
*/
func (a *ExternalSystemsConfigAPIService) GetDeliveryMethods(ctx context.Context) ExternalSystemsConfigAPIGetDeliveryMethodsRequest {
	return ExternalSystemsConfigAPIGetDeliveryMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedDeliveryMethods
func (a *ExternalSystemsConfigAPIService) GetDeliveryMethodsExecute(r ExternalSystemsConfigAPIGetDeliveryMethodsRequest) (*FetchedDeliveryMethods, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedDeliveryMethods
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetDeliveryMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deliveryMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.croCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "croCode", r.croCode, "")
  }
	if r.usages != nil {
		t := *r.usages
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "usages", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "usages", t, "multi")
		}
  }
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	databaseId string
	interfaceId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeInactive *bool
	interfaceCodes *[]string
	hotelIds *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Flag that indicates to include inactive records.
func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) IncludeInactive(includeInactive bool) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.includeInactive = &includeInactive
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) InterfaceCodes(interfaceCodes []string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.interfaceCodes = &interfaceCodes
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) HotelIds(hotelIds []string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.hotelIds = &hotelIds
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) Execute() (*FetchedExternalDatabaseAvailableProperties, *http.Response, error) {
	return r.ApiService.GetExternalDatabaseAvailablePropertiesExecute(r)
}

/*
GetExternalDatabaseAvailableProperties Operation to fetch external database available properties.

 <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param databaseId OPERA Id for Databsase
 @param interfaceId OPERA Id for interface
 @return ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest
*/
func (a *ExternalSystemsConfigAPIService) GetExternalDatabaseAvailableProperties(ctx context.Context, databaseId string, interfaceId string) ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest {
	return ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest{
		ApiService: a,
		ctx: ctx,
		databaseId: databaseId,
		interfaceId: interfaceId,
	}
}

// Execute executes the request
//  @return FetchedExternalDatabaseAvailableProperties
func (a *ExternalSystemsConfigAPIService) GetExternalDatabaseAvailablePropertiesExecute(r ExternalSystemsConfigAPIGetExternalDatabaseAvailablePropertiesRequest) (*FetchedExternalDatabaseAvailableProperties, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedExternalDatabaseAvailableProperties
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetExternalDatabaseAvailableProperties")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaces/{interfaceId}/databases/{databaseId}/availableResorts"
	localVarPath = strings.Replace(localVarPath, "{"+"databaseId"+"}", url.PathEscape(parameterValueToString(r.databaseId, "databaseId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.databaseId) < 1 {
		return localVarReturnValue, nil, reportError("databaseId must have at least 1 elements")
	}
	if strlen(r.databaseId) > 2000 {
		return localVarReturnValue, nil, reportError("databaseId must have less than 2000 elements")
	}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}

	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	if r.interfaceCodes != nil {
		t := *r.interfaceCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceCodes", t, "multi")
		}
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	active *bool
	id *string
	idEditable *bool
	label *string
	deviceType *string
	deviceCode *string
	deviceArea *string
	displayName *string
	mobileYN *bool
	desktopYN *bool
	registerAddress *string
	deviceValue *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) HotelId(hotelId string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.hotelId = &hotelId
	return r
}

// Flag that indicates whether the device is active.
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) Active(active bool) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.active = &active
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) Id(id string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.id = &id
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) IdEditable(idEditable bool) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.idEditable = &idEditable
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) Label(label string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.label = &label
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) DeviceType(deviceType string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.deviceType = &deviceType
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) DeviceCode(deviceCode string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.deviceCode = &deviceCode
	return r
}

// The area where the device is installed
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) DeviceArea(deviceArea string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.deviceArea = &deviceArea
	return r
}

// External device display name.
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) DisplayName(displayName string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.displayName = &displayName
	return r
}

// Indicator if device type is mobile or desktop.
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) MobileYN(mobileYN bool) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.mobileYN = &mobileYN
	return r
}

// Indicator if device type is mobile or desktop.
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) DesktopYN(desktopYN bool) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.desktopYN = &desktopYN
	return r
}

// The address which the Cash Register ID ( Device ID ) is associated with.
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) RegisterAddress(registerAddress string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.registerAddress = &registerAddress
	return r
}

// External device Value.
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) DeviceValue(deviceValue string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.deviceValue = &deviceValue
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) Execute() (*FetchedExternalDeviceConfigurations, *http.Response, error) {
	return r.ApiService.GetExternalDeviceConfigurationsExecute(r)
}

/*
GetExternalDeviceConfigurations Operation to fetch external device configurations.

 <p><strong>OperationId:</strong>getExternalDeviceConfigurations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest
*/
func (a *ExternalSystemsConfigAPIService) GetExternalDeviceConfigurations(ctx context.Context) ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest {
	return ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedExternalDeviceConfigurations
func (a *ExternalSystemsConfigAPIService) GetExternalDeviceConfigurationsExecute(r ExternalSystemsConfigAPIGetExternalDeviceConfigurationsRequest) (*FetchedExternalDeviceConfigurations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedExternalDeviceConfigurations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetExternalDeviceConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalDevices/configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.active != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "active", r.active, "")
  }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idEditable != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idEditable", r.idEditable, "")
  }
	if r.label != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label", r.label, "")
  }
	if r.deviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceType", r.deviceType, "")
  }
	if r.deviceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceCode", r.deviceCode, "")
  }
	if r.deviceArea != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceArea", r.deviceArea, "")
  }
	if r.displayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "displayName", r.displayName, "")
  }
	if r.mobileYN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mobileYN", r.mobileYN, "")
  }
	if r.desktopYN != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "desktopYN", r.desktopYN, "")
  }
	if r.registerAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registerAddress", r.registerAddress, "")
  }
	if r.deviceValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deviceValue", r.deviceValue, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	machine *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for Character Strings, length 0 to 40.
func (r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) Machine(machine string) ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest {
	r.machine = &machine
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) Execute() (*FetchedHotelInterfaceControllerRegistry, *http.Response, error) {
	return r.ApiService.GetHotelInterfaceControllerRegistryExecute(r)
}

/*
GetHotelInterfaceControllerRegistry Operation to fetch hotel interface controller registry.

 <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest
*/
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceControllerRegistry(ctx context.Context) ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest {
	return ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedHotelInterfaceControllerRegistry
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceControllerRegistryExecute(r ExternalSystemsConfigAPIGetHotelInterfaceControllerRegistryRequest) (*FetchedHotelInterfaceControllerRegistry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedHotelInterfaceControllerRegistry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetHotelInterfaceControllerRegistry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaceControllerRegistry"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.machine != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "machine", r.machine, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	logo string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Transaction codes of a Hotel Interface.
func (r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) FetchInstructions(fetchInstructions []string) ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) Execute() (*FetchedHotelInterfaceDetails, *http.Response, error) {
	return r.ApiService.GetHotelInterfaceDetailsExecute(r)
}

/*
GetHotelInterfaceDetails Operation to fetch hotel interface details.

 <p><strong>OperationId:</strong>getHotelInterfaceDetails</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param logo OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest
*/
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceDetails(ctx context.Context, logo string, hotelId string) ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest {
	return ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest{
		ApiService: a,
		ctx: ctx,
		logo: logo,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchedHotelInterfaceDetails
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceDetailsExecute(r ExternalSystemsConfigAPIGetHotelInterfaceDetailsRequest) (*FetchedHotelInterfaceDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedHotelInterfaceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetHotelInterfaceDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/logos/{logo}"
	localVarPath = strings.Replace(localVarPath, "{"+"logo"+"}", url.PathEscape(parameterValueToString(r.logo, "logo")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.logo) < 1 {
		return localVarReturnValue, nil, reportError("logo must have at least 1 elements")
	}
	if strlen(r.logo) > 2000 {
		return localVarReturnValue, nil, reportError("logo must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	hotelIds *[]string
	interfaceTypes *[]string
	logoCodes *[]string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) Limit(limit int32) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) Offset(offset int32) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.offset = &offset
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) HotelIds(hotelIds []string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.hotelIds = &hotelIds
	return r
}

// XML Posting Interface
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) InterfaceTypes(interfaceTypes []string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.interfaceTypes = &interfaceTypes
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) LogoCodes(logoCodes []string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.logoCodes = &logoCodes
	return r
}

// If true this will set the criteria to include inactive records.
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) IncludeInactive(includeInactive bool) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) Execute() (*FetchedHotelInterfaceErrors, *http.Response, error) {
	return r.ApiService.GetHotelInterfaceErrorsExecute(r)
}

/*
GetHotelInterfaceErrors Operation to fetch hotel interface errors.

 <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest
*/
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceErrors(ctx context.Context) ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest {
	return ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedHotelInterfaceErrors
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceErrorsExecute(r ExternalSystemsConfigAPIGetHotelInterfaceErrorsRequest) (*FetchedHotelInterfaceErrors, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedHotelInterfaceErrors
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetHotelInterfaceErrors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaceErrors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.interfaceTypes != nil {
		t := *r.interfaceTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", t, "multi")
		}
  }
	if r.logoCodes != nil {
		t := *r.logoCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "logoCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "logoCodes", t, "multi")
		}
  }
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	hotelIds *[]string
	interfaceTypes *[]string
	logoCodes *[]string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) Limit(limit int32) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) Offset(offset int32) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.offset = &offset
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) HotelIds(hotelIds []string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.hotelIds = &hotelIds
	return r
}

// XML Posting Interface
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) InterfaceTypes(interfaceTypes []string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.interfaceTypes = &interfaceTypes
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) LogoCodes(logoCodes []string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.logoCodes = &logoCodes
	return r
}

// If true this will set the criteria to include inactive records.
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) IncludeInactive(includeInactive bool) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) Execute() (*FetchedHotelInterfaceFailedMessages, *http.Response, error) {
	return r.ApiService.GetHotelInterfaceFailedMessagesExecute(r)
}

/*
GetHotelInterfaceFailedMessages Operation to fetch hotel interface failed messages.

 <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest
*/
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceFailedMessages(ctx context.Context) ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest {
	return ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedHotelInterfaceFailedMessages
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceFailedMessagesExecute(r ExternalSystemsConfigAPIGetHotelInterfaceFailedMessagesRequest) (*FetchedHotelInterfaceFailedMessages, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedHotelInterfaceFailedMessages
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetHotelInterfaceFailedMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaceFailedMessages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.interfaceTypes != nil {
		t := *r.interfaceTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", t, "multi")
		}
  }
	if r.logoCodes != nil {
		t := *r.logoCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "logoCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "logoCodes", t, "multi")
		}
  }
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	hotelIds *[]string
	interfaceTypes *[]string
	logoCodes *[]string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) Limit(limit int32) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) Offset(offset int32) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.offset = &offset
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) HotelIds(hotelIds []string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.hotelIds = &hotelIds
	return r
}

// XML Posting Interface
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) InterfaceTypes(interfaceTypes []string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.interfaceTypes = &interfaceTypes
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) LogoCodes(logoCodes []string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.logoCodes = &logoCodes
	return r
}

// If true this will set the criteria to include inactive records.
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) IncludeInactive(includeInactive bool) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) Execute() (*FetchedHotelInterfaceSchemas, *http.Response, error) {
	return r.ApiService.GetHotelInterfaceSchemasExecute(r)
}

/*
GetHotelInterfaceSchemas Operation to fetch hotel interface schemas.

 <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest
*/
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceSchemas(ctx context.Context) ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest {
	return ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedHotelInterfaceSchemas
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaceSchemasExecute(r ExternalSystemsConfigAPIGetHotelInterfaceSchemasRequest) (*FetchedHotelInterfaceSchemas, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedHotelInterfaceSchemas
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetHotelInterfaceSchemas")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaceSchemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.interfaceTypes != nil {
		t := *r.interfaceTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", t, "multi")
		}
  }
	if r.logoCodes != nil {
		t := *r.logoCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "logoCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "logoCodes", t, "multi")
		}
  }
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetHotelInterfacesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	interfaceTypes *[]string
	logosCodes *[]string
	includeInactive *bool
	includeOutboundCode *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) HotelIds(hotelIds []string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.hotelIds = &hotelIds
	return r
}

// XML Posting Interface
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) InterfaceTypes(interfaceTypes []string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.interfaceTypes = &interfaceTypes
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) LogosCodes(logosCodes []string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.logosCodes = &logosCodes
	return r
}

// If true this will set the criteria to include inactive records.
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) IncludeInactive(includeInactive bool) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.includeInactive = &includeInactive
	return r
}

// If true this will set the criteria to include interfaces that are configured to use outbound code.
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) IncludeOutboundCode(includeOutboundCode bool) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.includeOutboundCode = &includeOutboundCode
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetHotelInterfacesRequest) Execute() (*FetchedHotelInterfaces, *http.Response, error) {
	return r.ApiService.GetHotelInterfacesExecute(r)
}

/*
GetHotelInterfaces Operation to fetch hotel interfaces.

 <p><strong>OperationId:</strong>getHotelInterfaces</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetHotelInterfacesRequest
*/
func (a *ExternalSystemsConfigAPIService) GetHotelInterfaces(ctx context.Context) ExternalSystemsConfigAPIGetHotelInterfacesRequest {
	return ExternalSystemsConfigAPIGetHotelInterfacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedHotelInterfaces
func (a *ExternalSystemsConfigAPIService) GetHotelInterfacesExecute(r ExternalSystemsConfigAPIGetHotelInterfacesRequest) (*FetchedHotelInterfaces, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedHotelInterfaces
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetHotelInterfaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotelInterfaceTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.interfaceTypes != nil {
		t := *r.interfaceTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "interfaceTypes", t, "multi")
		}
  }
	if r.logosCodes != nil {
		t := *r.logosCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "logosCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "logosCodes", t, "multi")
		}
  }
	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	if r.includeOutboundCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeOutboundCode", r.includeOutboundCode, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetInterfaceMachinesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetInterfaceMachinesRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetInterfaceMachinesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetInterfaceMachinesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetInterfaceMachinesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetInterfaceMachinesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetInterfaceMachinesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetInterfaceMachinesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetInterfaceMachinesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetInterfaceMachinesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetInterfaceMachinesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetInterfaceMachinesRequest) Execute() ([]InterfaceMachineType, *http.Response, error) {
	return r.ApiService.GetInterfaceMachinesExecute(r)
}

/*
GetInterfaceMachines Operation to fetch interface machines.

 <p><strong>OperationId:</strong>getInterfaceMachines</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetInterfaceMachinesRequest
*/
func (a *ExternalSystemsConfigAPIService) GetInterfaceMachines(ctx context.Context) ExternalSystemsConfigAPIGetInterfaceMachinesRequest {
	return ExternalSystemsConfigAPIGetInterfaceMachinesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []InterfaceMachineType
func (a *ExternalSystemsConfigAPIService) GetInterfaceMachinesExecute(r ExternalSystemsConfigAPIGetInterfaceMachinesRequest) ([]InterfaceMachineType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InterfaceMachineType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetInterfaceMachines")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/machines"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetInterfaceRightsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	id *string
	idExtension *int32
	idContext *string
	type_ *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) HotelId(hotelId string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.hotelId = &hotelId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) Id(id string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.id = &id
	return r
}

// Additional identifying value assigned by the creating system.
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) IdExtension(idExtension int32) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.idExtension = &idExtension
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) IdContext(idContext string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) Type_(type_ string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.type_ = &type_
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetInterfaceRightsRequest) Execute() ([]InterfaceRightType, *http.Response, error) {
	return r.ApiService.GetInterfaceRightsExecute(r)
}

/*
GetInterfaceRights Operation to fetch interface rights.

 <p><strong>OperationId:</strong>getInterfaceRights</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetInterfaceRightsRequest
*/
func (a *ExternalSystemsConfigAPIService) GetInterfaceRights(ctx context.Context) ExternalSystemsConfigAPIGetInterfaceRightsRequest {
	return ExternalSystemsConfigAPIGetInterfaceRightsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []InterfaceRightType
func (a *ExternalSystemsConfigAPIService) GetInterfaceRightsExecute(r ExternalSystemsConfigAPIGetInterfaceRightsRequest) ([]InterfaceRightType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InterfaceRightType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetInterfaceRights")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaceRights"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idExtension", r.idExtension, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest) Execute() ([]InterfaceRoomStatusType, *http.Response, error) {
	return r.ApiService.GetInterfaceRoomStatusesExecute(r)
}

/*
GetInterfaceRoomStatuses Operation to fetch interface room statuses.

 <p><strong>OperationId:</strong>getInterfaceRoomStatuses</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA id for Property
 @param hotelId OPERA id for Property
 @return ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest
*/
func (a *ExternalSystemsConfigAPIService) GetInterfaceRoomStatuses(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest {
	return ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return []InterfaceRoomStatusType
func (a *ExternalSystemsConfigAPIService) GetInterfaceRoomStatusesExecute(r ExternalSystemsConfigAPIGetInterfaceRoomStatusesRequest) ([]InterfaceRoomStatusType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InterfaceRoomStatusType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetInterfaceRoomStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/roomStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetInterfaceRoomsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	fromRoom *string
	toRoom *string
	fromLineType *string
	toLineType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// From Room Number
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) FromRoom(fromRoom string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.fromRoom = &fromRoom
	return r
}

// To Room Number
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) ToRoom(toRoom string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.toRoom = &toRoom
	return r
}

// From Line Type
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) FromLineType(fromLineType string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.fromLineType = &fromLineType
	return r
}

// To Line Type
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) ToLineType(toLineType string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.toLineType = &toLineType
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) Execute() ([]InterfaceRoomType, *http.Response, error) {
	return r.ApiService.GetInterfaceRoomsExecute(r)
}

/*
GetInterfaceRooms Operation to fetch interface rooms.

 <p><strong>OperationId:</strong>getInterfaceRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIGetInterfaceRoomsRequest
*/
func (a *ExternalSystemsConfigAPIService) GetInterfaceRooms(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIGetInterfaceRoomsRequest {
	return ExternalSystemsConfigAPIGetInterfaceRoomsRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return []InterfaceRoomType
func (a *ExternalSystemsConfigAPIService) GetInterfaceRoomsExecute(r ExternalSystemsConfigAPIGetInterfaceRoomsRequest) ([]InterfaceRoomType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InterfaceRoomType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetInterfaceRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/rooms"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.fromRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoom", r.fromRoom, "")
  }
	if r.toRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoom", r.toRoom, "")
  }
	if r.fromLineType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromLineType", r.fromLineType, "")
  }
	if r.toLineType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toLineType", r.toLineType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	logo *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
func (r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) Logo(logo string) ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest {
	r.logo = &logo
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) Execute() (*FetchedInterfaceUnitCharges, *http.Response, error) {
	return r.ApiService.GetInterfaceUnitChargesExecute(r)
}

/*
GetInterfaceUnitCharges Operation to fetch interface unit charges.

 <p><strong>OperationId:</strong>getInterfaceUnitCharges</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA id for Property
 @param hotelId OPERA id for Property
 @return ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest
*/
func (a *ExternalSystemsConfigAPIService) GetInterfaceUnitCharges(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest {
	return ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return FetchedInterfaceUnitCharges
func (a *ExternalSystemsConfigAPIService) GetInterfaceUnitChargesExecute(r ExternalSystemsConfigAPIGetInterfaceUnitChargesRequest) (*FetchedInterfaceUnitCharges, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedInterfaceUnitCharges
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetInterfaceUnitCharges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/unitCharges"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.logo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "logo", r.logo, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetPublishersRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	externalSystemCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetPublishersRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetPublishersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetPublishersRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetPublishersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetPublishersRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetPublishersRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ExternalSystemsConfigAPIGetPublishersRequest) HotelId(hotelId string) ExternalSystemsConfigAPIGetPublishersRequest {
	r.hotelId = &hotelId
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetPublishersRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetPublishersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetPublishersRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetPublishersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetPublishersRequest) Execute() (*FetchedPublishers, *http.Response, error) {
	return r.ApiService.GetPublishersExecute(r)
}

/*
GetPublishers Operation to fetch publishers.

 <p><strong>OperationId:</strong>getPublishers</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param externalSystemCode Unique OPERA Code used to find External System in OPERA.
 @return ExternalSystemsConfigAPIGetPublishersRequest
*/
func (a *ExternalSystemsConfigAPIService) GetPublishers(ctx context.Context, externalSystemCode string) ExternalSystemsConfigAPIGetPublishersRequest {
	return ExternalSystemsConfigAPIGetPublishersRequest{
		ApiService: a,
		ctx: ctx,
		externalSystemCode: externalSystemCode,
	}
}

// Execute executes the request
//  @return FetchedPublishers
func (a *ExternalSystemsConfigAPIService) GetPublishersExecute(r ExternalSystemsConfigAPIGetPublishersRequest) (*FetchedPublishers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedPublishers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetPublishers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{externalSystemCode}/publishers"
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIGetUDFMappingsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	type_ *string
	uDFName *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) Authorization(authorization string) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A reference to the type of object defined by the Type for Reservation and Profile Type.
func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) Type_(type_ string) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	r.type_ = &type_
	return r
}

// Name of the user-defined function (UDF) field.
func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) UDFName(uDFName string) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	r.uDFName = &uDFName
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIGetUDFMappingsRequest) Execute() (*FetchedUDFMappings, *http.Response, error) {
	return r.ApiService.GetUDFMappingsExecute(r)
}

/*
GetUDFMappings Operation to send a response to the Look up of UDFs.

Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIGetUDFMappingsRequest
*/
func (a *ExternalSystemsConfigAPIService) GetUDFMappings(ctx context.Context) ExternalSystemsConfigAPIGetUDFMappingsRequest {
	return ExternalSystemsConfigAPIGetUDFMappingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchedUDFMappings
func (a *ExternalSystemsConfigAPIService) GetUDFMappingsExecute(r ExternalSystemsConfigAPIGetUDFMappingsRequest) (*FetchedUDFMappings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchedUDFMappings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.GetUDFMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/udfMappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.uDFName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uDFName", r.uDFName, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIImportInterfaceRoomsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	importInterfaceRooms *ImportInterfaceRooms
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) Authorization(authorization string) ExternalSystemsConfigAPIImportInterfaceRoomsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIImportInterfaceRoomsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIImportInterfaceRoomsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for importing the Interface Rooms for a Hotel Interface record.
func (r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) ImportInterfaceRooms(importInterfaceRooms ImportInterfaceRooms) ExternalSystemsConfigAPIImportInterfaceRoomsRequest {
	r.importInterfaceRooms = &importInterfaceRooms
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIImportInterfaceRoomsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIImportInterfaceRoomsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ImportInterfaceRoomsExecute(r)
}

/*
ImportInterfaceRooms Operation to import interface rooms.

 <p><strong>OperationId:</strong>importInterfaceRooms</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIImportInterfaceRoomsRequest
*/
func (a *ExternalSystemsConfigAPIService) ImportInterfaceRooms(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIImportInterfaceRoomsRequest {
	return ExternalSystemsConfigAPIImportInterfaceRoomsRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) ImportInterfaceRoomsExecute(r ExternalSystemsConfigAPIImportInterfaceRoomsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.ImportInterfaceRooms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/rooms/import"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.importInterfaceRooms
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPingRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPingRequest) Authorization(authorization string) ExternalSystemsConfigAPIPingRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPingRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPingRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPingRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPingRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPingRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPingRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPingRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPingRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPingRequest) Execute() (*OperaVersion, *http.Response, error) {
	return r.ApiService.PingExecute(r)
}

/*
Ping Operation to ping.

 <p><strong>OperationId:</strong>ping</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPingRequest
*/
func (a *ExternalSystemsConfigAPIService) Ping(ctx context.Context) ExternalSystemsConfigAPIPingRequest {
	return ExternalSystemsConfigAPIPingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OperaVersion
func (a *ExternalSystemsConfigAPIService) PingExecute(r ExternalSystemsConfigAPIPingRequest) (*OperaVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperaVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.Ping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/config/ping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPostDeliveryMethodsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	createDeliveryMethods *CreateDeliveryMethods
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) Authorization(authorization string) ExternalSystemsConfigAPIPostDeliveryMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPostDeliveryMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPostDeliveryMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create the delivery method for a property/HUB/Chain and its configurations.
func (r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) CreateDeliveryMethods(createDeliveryMethods CreateDeliveryMethods) ExternalSystemsConfigAPIPostDeliveryMethodsRequest {
	r.createDeliveryMethods = &createDeliveryMethods
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPostDeliveryMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPostDeliveryMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostDeliveryMethodsExecute(r)
}

/*
PostDeliveryMethods Operation to create delivery methods.

 <p><strong>OperationId:</strong>postDeliveryMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPostDeliveryMethodsRequest
*/
func (a *ExternalSystemsConfigAPIService) PostDeliveryMethods(ctx context.Context) ExternalSystemsConfigAPIPostDeliveryMethodsRequest {
	return ExternalSystemsConfigAPIPostDeliveryMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) PostDeliveryMethodsExecute(r ExternalSystemsConfigAPIPostDeliveryMethodsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PostDeliveryMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deliveryMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createDeliveryMethods
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPostHotelInterfaceRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelInterface *HotelInterface
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPostHotelInterfaceRequest) Authorization(authorization string) ExternalSystemsConfigAPIPostHotelInterfaceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPostHotelInterfaceRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPostHotelInterfaceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPostHotelInterfaceRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPostHotelInterfaceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a new Hotel Interface.
func (r ExternalSystemsConfigAPIPostHotelInterfaceRequest) HotelInterface(hotelInterface HotelInterface) ExternalSystemsConfigAPIPostHotelInterfaceRequest {
	r.hotelInterface = &hotelInterface
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPostHotelInterfaceRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPostHotelInterfaceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPostHotelInterfaceRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPostHotelInterfaceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPostHotelInterfaceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostHotelInterfaceExecute(r)
}

/*
PostHotelInterface Operation to create hotel interface.

 <p><strong>OperationId:</strong>postHotelInterface</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPostHotelInterfaceRequest
*/
func (a *ExternalSystemsConfigAPIService) PostHotelInterface(ctx context.Context) ExternalSystemsConfigAPIPostHotelInterfaceRequest {
	return ExternalSystemsConfigAPIPostHotelInterfaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) PostHotelInterfaceExecute(r ExternalSystemsConfigAPIPostHotelInterfaceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PostHotelInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotelInerface"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.hotelInterface
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPostInterfaceAccountRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createInterfaceAccount *CreateInterfaceAccount
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPostInterfaceAccountRequest) Authorization(authorization string) ExternalSystemsConfigAPIPostInterfaceAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPostInterfaceAccountRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPostInterfaceAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPostInterfaceAccountRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPostInterfaceAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating an Interface Account of a Hotel Interface record.
func (r ExternalSystemsConfigAPIPostInterfaceAccountRequest) CreateInterfaceAccount(createInterfaceAccount CreateInterfaceAccount) ExternalSystemsConfigAPIPostInterfaceAccountRequest {
	r.createInterfaceAccount = &createInterfaceAccount
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPostInterfaceAccountRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPostInterfaceAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPostInterfaceAccountRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPostInterfaceAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPostInterfaceAccountRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostInterfaceAccountExecute(r)
}

/*
PostInterfaceAccount Operation to create interface account.

 <p><strong>OperationId:</strong>postInterfaceAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIPostInterfaceAccountRequest
*/
func (a *ExternalSystemsConfigAPIService) PostInterfaceAccount(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIPostInterfaceAccountRequest {
	return ExternalSystemsConfigAPIPostInterfaceAccountRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) PostInterfaceAccountExecute(r ExternalSystemsConfigAPIPostInterfaceAccountRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PostInterfaceAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createInterfaceAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPostInterfaceRoomRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createInterfaceRoom *CreateInterfaceRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPostInterfaceRoomRequest) Authorization(authorization string) ExternalSystemsConfigAPIPostInterfaceRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPostInterfaceRoomRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPostInterfaceRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPostInterfaceRoomRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPostInterfaceRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating an Interface Room of a Hotel Interface record.
func (r ExternalSystemsConfigAPIPostInterfaceRoomRequest) CreateInterfaceRoom(createInterfaceRoom CreateInterfaceRoom) ExternalSystemsConfigAPIPostInterfaceRoomRequest {
	r.createInterfaceRoom = &createInterfaceRoom
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPostInterfaceRoomRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPostInterfaceRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPostInterfaceRoomRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPostInterfaceRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPostInterfaceRoomRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostInterfaceRoomExecute(r)
}

/*
PostInterfaceRoom Operation to create interface room.

 <p><strong>OperationId:</strong>postInterfaceRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIPostInterfaceRoomRequest
*/
func (a *ExternalSystemsConfigAPIService) PostInterfaceRoom(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIPostInterfaceRoomRequest {
	return ExternalSystemsConfigAPIPostInterfaceRoomRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) PostInterfaceRoomExecute(r ExternalSystemsConfigAPIPostInterfaceRoomRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PostInterfaceRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/rooms"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createInterfaceRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPostPublishersRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	hotelId string
	externalSystemCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	createPublishers *CreatePublishers
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPostPublishersRequest) Authorization(authorization string) ExternalSystemsConfigAPIPostPublishersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPostPublishersRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPostPublishersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPostPublishersRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPostPublishersRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to create publishers.
func (r ExternalSystemsConfigAPIPostPublishersRequest) CreatePublishers(createPublishers CreatePublishers) ExternalSystemsConfigAPIPostPublishersRequest {
	r.createPublishers = &createPublishers
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPostPublishersRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPostPublishersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPostPublishersRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPostPublishersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPostPublishersRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostPublishersExecute(r)
}

/*
PostPublishers Operation to create publishers.

 <p><strong>OperationId:</strong>postPublishers</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Id used to find a property in OPERA.
 @param externalSystemCode Unique OPERA Code used to find External System in OPERA.
 @return ExternalSystemsConfigAPIPostPublishersRequest
*/
func (a *ExternalSystemsConfigAPIService) PostPublishers(ctx context.Context, hotelId string, externalSystemCode string) ExternalSystemsConfigAPIPostPublishersRequest {
	return ExternalSystemsConfigAPIPostPublishersRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		externalSystemCode: externalSystemCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) PostPublishersExecute(r ExternalSystemsConfigAPIPostPublishersRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PostPublishers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalSystemCode"+"}", url.PathEscape(parameterValueToString(r.externalSystemCode, "externalSystemCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}
	if strlen(r.externalSystemCode) < 1 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have at least 1 elements")
	}
	if strlen(r.externalSystemCode) > 2000 {
		return localVarReturnValue, nil, reportError("externalSystemCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createPublishers
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutDeliveryMethodsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	changeDeliveryMethods *ChangeDeliveryMethods
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutDeliveryMethodsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutDeliveryMethodsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutDeliveryMethodsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to change the delivery method for a property/HUB/Chain and its configurations.
func (r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) ChangeDeliveryMethods(changeDeliveryMethods ChangeDeliveryMethods) ExternalSystemsConfigAPIPutDeliveryMethodsRequest {
	r.changeDeliveryMethods = &changeDeliveryMethods
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutDeliveryMethodsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutDeliveryMethodsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) Execute() (*ChangedDeliveryMethods, *http.Response, error) {
	return r.ApiService.PutDeliveryMethodsExecute(r)
}

/*
PutDeliveryMethods Operation to change delivery methods.

 <p><strong>OperationId:</strong>putDeliveryMethods</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPutDeliveryMethodsRequest
*/
func (a *ExternalSystemsConfigAPIService) PutDeliveryMethods(ctx context.Context) ExternalSystemsConfigAPIPutDeliveryMethodsRequest {
	return ExternalSystemsConfigAPIPutDeliveryMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ChangedDeliveryMethods
func (a *ExternalSystemsConfigAPIService) PutDeliveryMethodsExecute(r ExternalSystemsConfigAPIPutDeliveryMethodsRequest) (*ChangedDeliveryMethods, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedDeliveryMethods
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutDeliveryMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deliveryMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeDeliveryMethods
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	changeExternalDeviceConfigurations *ChangeExternalDeviceConfigurations
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to change the external device activated for the hotel and its configurations.
func (r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) ChangeExternalDeviceConfigurations(changeExternalDeviceConfigurations ChangeExternalDeviceConfigurations) ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest {
	r.changeExternalDeviceConfigurations = &changeExternalDeviceConfigurations
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) Execute() (*ChangedExternalDeviceConfigurations, *http.Response, error) {
	return r.ApiService.PutExternalDeviceConfigurationsExecute(r)
}

/*
PutExternalDeviceConfigurations Operation to change external device configurations.

 <p><strong>OperationId:</strong>putExternalDeviceConfigurations</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest
*/
func (a *ExternalSystemsConfigAPIService) PutExternalDeviceConfigurations(ctx context.Context) ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest {
	return ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ChangedExternalDeviceConfigurations
func (a *ExternalSystemsConfigAPIService) PutExternalDeviceConfigurationsExecute(r ExternalSystemsConfigAPIPutExternalDeviceConfigurationsRequest) (*ChangedExternalDeviceConfigurations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedExternalDeviceConfigurations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutExternalDeviceConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/externalDevices/configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeExternalDeviceConfigurations
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutHotelInterfaceRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelInterface *HotelInterface
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutHotelInterfaceRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutHotelInterfaceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutHotelInterfaceRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutHotelInterfaceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutHotelInterfaceRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutHotelInterfaceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating a Hotel Interface.
func (r ExternalSystemsConfigAPIPutHotelInterfaceRequest) HotelInterface(hotelInterface HotelInterface) ExternalSystemsConfigAPIPutHotelInterfaceRequest {
	r.hotelInterface = &hotelInterface
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutHotelInterfaceRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutHotelInterfaceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutHotelInterfaceRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutHotelInterfaceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutHotelInterfaceRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutHotelInterfaceExecute(r)
}

/*
PutHotelInterface Operation to change hotel interface.

 <p><strong>OperationId:</strong>putHotelInterface</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPutHotelInterfaceRequest
*/
func (a *ExternalSystemsConfigAPIService) PutHotelInterface(ctx context.Context) ExternalSystemsConfigAPIPutHotelInterfaceRequest {
	return ExternalSystemsConfigAPIPutHotelInterfaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExternalSystemsConfigAPIService) PutHotelInterfaceExecute(r ExternalSystemsConfigAPIPutHotelInterfaceRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutHotelInterface")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotelInerface"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.hotelInterface
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutInterfaceAccountRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	accountId string
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeInterfaceAccount *ChangeInterfaceAccount
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutInterfaceAccountRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutInterfaceAccountRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutInterfaceAccountRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutInterfaceAccountRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutInterfaceAccountRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutInterfaceAccountRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating an Interface Account of a Hotel Interface record.
func (r ExternalSystemsConfigAPIPutInterfaceAccountRequest) ChangeInterfaceAccount(changeInterfaceAccount ChangeInterfaceAccount) ExternalSystemsConfigAPIPutInterfaceAccountRequest {
	r.changeInterfaceAccount = &changeInterfaceAccount
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutInterfaceAccountRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutInterfaceAccountRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutInterfaceAccountRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutInterfaceAccountRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutInterfaceAccountRequest) Execute() (*ChangedInterfaceAccount, *http.Response, error) {
	return r.ApiService.PutInterfaceAccountExecute(r)
}

/*
PutInterfaceAccount Operation to change interface account.

 <p><strong>OperationId:</strong>putInterfaceAccount</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId OPERA Id for Account
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIPutInterfaceAccountRequest
*/
func (a *ExternalSystemsConfigAPIService) PutInterfaceAccount(ctx context.Context, accountId string, interfaceId string, hotelId string) ExternalSystemsConfigAPIPutInterfaceAccountRequest {
	return ExternalSystemsConfigAPIPutInterfaceAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedInterfaceAccount
func (a *ExternalSystemsConfigAPIService) PutInterfaceAccountExecute(r ExternalSystemsConfigAPIPutInterfaceAccountRequest) (*ChangedInterfaceAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedInterfaceAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutInterfaceAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/accounts/{accountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"accountId"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.accountId) < 1 {
		return localVarReturnValue, nil, reportError("accountId must have at least 1 elements")
	}
	if strlen(r.accountId) > 2000 {
		return localVarReturnValue, nil, reportError("accountId must have less than 2000 elements")
	}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeInterfaceAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutInterfaceMachineRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	machineId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeInterfaceMachine *ChangeInterfaceMachine
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutInterfaceMachineRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutInterfaceMachineRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutInterfaceMachineRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutInterfaceMachineRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutInterfaceMachineRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutInterfaceMachineRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating a Hotel Interface Machine. If it does not exist, then creates the Hotel Interface Machine.
func (r ExternalSystemsConfigAPIPutInterfaceMachineRequest) ChangeInterfaceMachine(changeInterfaceMachine ChangeInterfaceMachine) ExternalSystemsConfigAPIPutInterfaceMachineRequest {
	r.changeInterfaceMachine = &changeInterfaceMachine
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutInterfaceMachineRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutInterfaceMachineRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutInterfaceMachineRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutInterfaceMachineRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutInterfaceMachineRequest) Execute() (*ChangedInterfaceMachine, *http.Response, error) {
	return r.ApiService.PutInterfaceMachineExecute(r)
}

/*
PutInterfaceMachine Operation to change interface machine.

 <p><strong>OperationId:</strong>putInterfaceMachine</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param machineId OPERA Id for machine
 @return ExternalSystemsConfigAPIPutInterfaceMachineRequest
*/
func (a *ExternalSystemsConfigAPIService) PutInterfaceMachine(ctx context.Context, machineId string) ExternalSystemsConfigAPIPutInterfaceMachineRequest {
	return ExternalSystemsConfigAPIPutInterfaceMachineRequest{
		ApiService: a,
		ctx: ctx,
		machineId: machineId,
	}
}

// Execute executes the request
//  @return ChangedInterfaceMachine
func (a *ExternalSystemsConfigAPIService) PutInterfaceMachineExecute(r ExternalSystemsConfigAPIPutInterfaceMachineRequest) (*ChangedInterfaceMachine, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedInterfaceMachine
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutInterfaceMachine")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/machines/{machineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"machineId"+"}", url.PathEscape(parameterValueToString(r.machineId, "machineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.machineId) < 1 {
		return localVarReturnValue, nil, reportError("machineId must have at least 1 elements")
	}
	if strlen(r.machineId) > 2000 {
		return localVarReturnValue, nil, reportError("machineId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeInterfaceMachine
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutInterfaceRightRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	changeInterfaceRight *ChangeInterfaceRight
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutInterfaceRightRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutInterfaceRightRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutInterfaceRightRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutInterfaceRightRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutInterfaceRightRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutInterfaceRightRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating a Hotel Interface Right. It will create the Hotel Interface Right if it does not exist on the database.
func (r ExternalSystemsConfigAPIPutInterfaceRightRequest) ChangeInterfaceRight(changeInterfaceRight ChangeInterfaceRight) ExternalSystemsConfigAPIPutInterfaceRightRequest {
	r.changeInterfaceRight = &changeInterfaceRight
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutInterfaceRightRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutInterfaceRightRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutInterfaceRightRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutInterfaceRightRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutInterfaceRightRequest) Execute() (*ChangedInterfaceRight, *http.Response, error) {
	return r.ApiService.PutInterfaceRightExecute(r)
}

/*
PutInterfaceRight Operation to change interface right.

 <p><strong>OperationId:</strong>putInterfaceRight</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPutInterfaceRightRequest
*/
func (a *ExternalSystemsConfigAPIService) PutInterfaceRight(ctx context.Context) ExternalSystemsConfigAPIPutInterfaceRightRequest {
	return ExternalSystemsConfigAPIPutInterfaceRightRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ChangedInterfaceRight
func (a *ExternalSystemsConfigAPIService) PutInterfaceRightExecute(r ExternalSystemsConfigAPIPutInterfaceRightRequest) (*ChangedInterfaceRight, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedInterfaceRight
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutInterfaceRight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/interfaceRights"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeInterfaceRight
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutInterfaceRoomRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	roomId string
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeInterfaceRoom *ChangeInterfaceRoom
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutInterfaceRoomRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutInterfaceRoomRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutInterfaceRoomRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutInterfaceRoomRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutInterfaceRoomRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutInterfaceRoomRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating an Interface Room of a Hotel Interface record.
func (r ExternalSystemsConfigAPIPutInterfaceRoomRequest) ChangeInterfaceRoom(changeInterfaceRoom ChangeInterfaceRoom) ExternalSystemsConfigAPIPutInterfaceRoomRequest {
	r.changeInterfaceRoom = &changeInterfaceRoom
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutInterfaceRoomRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutInterfaceRoomRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutInterfaceRoomRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutInterfaceRoomRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutInterfaceRoomRequest) Execute() (*ChangedInterfaceRoom, *http.Response, error) {
	return r.ApiService.PutInterfaceRoomExecute(r)
}

/*
PutInterfaceRoom Operation to change interface room.

 <p><strong>OperationId:</strong>putInterfaceRoom</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param roomId
 @param interfaceId OPERA Id for Logo
 @param hotelId OPERA Id for Property
 @return ExternalSystemsConfigAPIPutInterfaceRoomRequest
*/
func (a *ExternalSystemsConfigAPIService) PutInterfaceRoom(ctx context.Context, roomId string, interfaceId string, hotelId string) ExternalSystemsConfigAPIPutInterfaceRoomRequest {
	return ExternalSystemsConfigAPIPutInterfaceRoomRequest{
		ApiService: a,
		ctx: ctx,
		roomId: roomId,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedInterfaceRoom
func (a *ExternalSystemsConfigAPIService) PutInterfaceRoomExecute(r ExternalSystemsConfigAPIPutInterfaceRoomRequest) (*ChangedInterfaceRoom, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedInterfaceRoom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutInterfaceRoom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/rooms/{roomId}"
	localVarPath = strings.Replace(localVarPath, "{"+"roomId"+"}", url.PathEscape(parameterValueToString(r.roomId, "roomId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.roomId) < 1 {
		return localVarReturnValue, nil, reportError("roomId must have at least 1 elements")
	}
	if strlen(r.roomId) > 2000 {
		return localVarReturnValue, nil, reportError("roomId must have less than 2000 elements")
	}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeInterfaceRoom
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeInterfaceRoomStatus *ChangeInterfaceRoomStatus
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating a Hotel Interface Room Status. If it does not exist, then creates the Hotel Interface Room Status.
func (r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) ChangeInterfaceRoomStatus(changeInterfaceRoomStatus ChangeInterfaceRoomStatus) ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest {
	r.changeInterfaceRoomStatus = &changeInterfaceRoomStatus
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) Execute() (*ChangedInterfaceRoomStatus, *http.Response, error) {
	return r.ApiService.PutInterfaceRoomStatusExecute(r)
}

/*
PutInterfaceRoomStatus Operation to change interface room status.

 <p><strong>OperationId:</strong>putInterfaceRoomStatus</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA id for Property
 @param hotelId OPERA id for Property
 @return ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest
*/
func (a *ExternalSystemsConfigAPIService) PutInterfaceRoomStatus(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest {
	return ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedInterfaceRoomStatus
func (a *ExternalSystemsConfigAPIService) PutInterfaceRoomStatusExecute(r ExternalSystemsConfigAPIPutInterfaceRoomStatusRequest) (*ChangedInterfaceRoomStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedInterfaceRoomStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutInterfaceRoomStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/roomStatus"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeInterfaceRoomStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	interfaceId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	changeInterfaceUnitCharges *ChangeInterfaceUnitCharges
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating Hotel Interface Unit Charges.
func (r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) ChangeInterfaceUnitCharges(changeInterfaceUnitCharges ChangeInterfaceUnitCharges) ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest {
	r.changeInterfaceUnitCharges = &changeInterfaceUnitCharges
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) Execute() (*ChangedInterfaceUnitCharges, *http.Response, error) {
	return r.ApiService.PutInterfaceUnitChargesExecute(r)
}

/*
PutInterfaceUnitCharges Operation to change interface unit charges.

 <p><strong>OperationId:</strong>putInterfaceUnitCharges</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param interfaceId OPERA id for Property
 @param hotelId OPERA id for Property
 @return ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest
*/
func (a *ExternalSystemsConfigAPIService) PutInterfaceUnitCharges(ctx context.Context, interfaceId string, hotelId string) ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest {
	return ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest{
		ApiService: a,
		ctx: ctx,
		interfaceId: interfaceId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ChangedInterfaceUnitCharges
func (a *ExternalSystemsConfigAPIService) PutInterfaceUnitChargesExecute(r ExternalSystemsConfigAPIPutInterfaceUnitChargesRequest) (*ChangedInterfaceUnitCharges, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedInterfaceUnitCharges
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutInterfaceUnitCharges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/interfaces/{interfaceId}/unitCharges"
	localVarPath = strings.Replace(localVarPath, "{"+"interfaceId"+"}", url.PathEscape(parameterValueToString(r.interfaceId, "interfaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.interfaceId) < 1 {
		return localVarReturnValue, nil, reportError("interfaceId must have at least 1 elements")
	}
	if strlen(r.interfaceId) > 2000 {
		return localVarReturnValue, nil, reportError("interfaceId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeInterfaceUnitCharges
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ExternalSystemsConfigAPIPutUDFMappingRequest struct {
	ctx context.Context
	ApiService *ExternalSystemsConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	changeUDFMapping *ChangeUDFMapping
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ExternalSystemsConfigAPIPutUDFMappingRequest) Authorization(authorization string) ExternalSystemsConfigAPIPutUDFMappingRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ExternalSystemsConfigAPIPutUDFMappingRequest) XAppKey(xAppKey string) ExternalSystemsConfigAPIPutUDFMappingRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ExternalSystemsConfigAPIPutUDFMappingRequest) XHotelid(xHotelid string) ExternalSystemsConfigAPIPutUDFMappingRequest {
	r.xHotelid = &xHotelid
	return r
}

// Self-contained Request object that is used when Updating UDFMapping.
func (r ExternalSystemsConfigAPIPutUDFMappingRequest) ChangeUDFMapping(changeUDFMapping ChangeUDFMapping) ExternalSystemsConfigAPIPutUDFMappingRequest {
	r.changeUDFMapping = &changeUDFMapping
	return r
}

// External system code.
func (r ExternalSystemsConfigAPIPutUDFMappingRequest) XExternalsystem(xExternalsystem string) ExternalSystemsConfigAPIPutUDFMappingRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ExternalSystemsConfigAPIPutUDFMappingRequest) AcceptLanguage(acceptLanguage string) ExternalSystemsConfigAPIPutUDFMappingRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ExternalSystemsConfigAPIPutUDFMappingRequest) Execute() (*ChangedUDFMapping, *http.Response, error) {
	return r.ApiService.PutUDFMappingExecute(r)
}

/*
PutUDFMapping Operation to send a response to the Change in UDF.

Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ExternalSystemsConfigAPIPutUDFMappingRequest
*/
func (a *ExternalSystemsConfigAPIService) PutUDFMapping(ctx context.Context) ExternalSystemsConfigAPIPutUDFMappingRequest {
	return ExternalSystemsConfigAPIPutUDFMappingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ChangedUDFMapping
func (a *ExternalSystemsConfigAPIService) PutUDFMappingExecute(r ExternalSystemsConfigAPIPutUDFMappingRequest) (*ChangedUDFMapping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangedUDFMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalSystemsConfigAPIService.PutUDFMapping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/udfMappings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.changeUDFMapping
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
