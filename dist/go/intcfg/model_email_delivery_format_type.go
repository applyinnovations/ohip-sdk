/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
	"fmt"
)

// EmailDeliveryFormatType Email delivery format
type EmailDeliveryFormatType string

// List of emailDeliveryFormatType
const (
	EMAILDELIVERYFORMATTYPE_HTMLCSS EmailDeliveryFormatType = "Htmlcss"
	EMAILDELIVERYFORMATTYPE_PDF EmailDeliveryFormatType = "Pdf"
	EMAILDELIVERYFORMATTYPE_RTF EmailDeliveryFormatType = "Rtf"
	EMAILDELIVERYFORMATTYPE_TIF EmailDeliveryFormatType = "Tif"
)

// All allowed values of EmailDeliveryFormatType enum
var AllowedEmailDeliveryFormatTypeEnumValues = []EmailDeliveryFormatType{
	"Htmlcss",
	"Pdf",
	"Rtf",
	"Tif",
}

func (v *EmailDeliveryFormatType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmailDeliveryFormatType(value)
	for _, existing := range AllowedEmailDeliveryFormatTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmailDeliveryFormatType", value)
}

// NewEmailDeliveryFormatTypeFromValue returns a pointer to a valid EmailDeliveryFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmailDeliveryFormatTypeFromValue(v string) (*EmailDeliveryFormatType, error) {
	ev := EmailDeliveryFormatType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmailDeliveryFormatType: valid values are %v", v, AllowedEmailDeliveryFormatTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmailDeliveryFormatType) IsValid() bool {
	for _, existing := range AllowedEmailDeliveryFormatTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to emailDeliveryFormatType value
func (v EmailDeliveryFormatType) Ptr() *EmailDeliveryFormatType {
	return &v
}

type NullableEmailDeliveryFormatType struct {
	value *EmailDeliveryFormatType
	isSet bool
}

func (v NullableEmailDeliveryFormatType) Get() *EmailDeliveryFormatType {
	return v.value
}

func (v *NullableEmailDeliveryFormatType) Set(val *EmailDeliveryFormatType) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailDeliveryFormatType) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailDeliveryFormatType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailDeliveryFormatType(val *EmailDeliveryFormatType) *NullableEmailDeliveryFormatType {
	return &NullableEmailDeliveryFormatType{value: val, isSet: true}
}

func (v NullableEmailDeliveryFormatType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailDeliveryFormatType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

