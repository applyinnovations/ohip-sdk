/*
OPERA Cloud Integration Configuration API

Testing ExternalSystemsConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package intcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/intcfg"
)

func Test_intcfg_ExternalSystemsConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExternalSystemsConfigApiService DeleteDeliveryMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.DeleteDeliveryMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService DeleteHotelInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.DeleteHotelInterface(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService DeleteInterfaceRight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.DeleteInterfaceRight(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService DeletePublisher", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var externalSystemCode string

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.DeletePublisher(context.Background(), hotelId, externalSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService GetDeliveryMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.GetDeliveryMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService GetExternalDatabaseAvailableProperties", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var databaseId string
		var interfaceId string

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.GetExternalDatabaseAvailableProperties(context.Background(), databaseId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService GetHotelInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.GetHotelInterfaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService GetInterfaceRights", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.GetInterfaceRights(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService GetPublishers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var externalSystemCode string

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.GetPublishers(context.Background(), externalSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService GetUDFMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.GetUDFMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService PostDeliveryMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.PostDeliveryMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService PostPublishers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var externalSystemCode string

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.PostPublishers(context.Background(), hotelId, externalSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService PutDeliveryMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.PutDeliveryMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService PutInterfaceRight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.PutInterfaceRight(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExternalSystemsConfigApiService PutUDFMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExternalSystemsConfigApi.PutUDFMapping(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
