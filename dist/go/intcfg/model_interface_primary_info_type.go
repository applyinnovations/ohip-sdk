/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the InterfacePrimaryInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfacePrimaryInfoType{}

// InterfacePrimaryInfoType struct for InterfacePrimaryInfoType
type InterfacePrimaryInfoType struct {
	InterfaceId *UniqueIDType `json:"interfaceId,omitempty"`
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
	// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
	Logo *string `json:"logo,omitempty"`
	// Name of the Hotel Interface
	InterfaceName *string `json:"interfaceName,omitempty"`
	InterfaceType *HotelInterfaceTypeType `json:"interfaceType,omitempty"`
	// Three letter code that uniquely identifies the external interface.
	ProductCode *string `json:"productCode,omitempty"`
	// Interface License code
	LicenseCode *string `json:"licenseCode,omitempty"`
	// The ID stored in IFC_MACHINES table.
	MachineId *int32 `json:"machineId,omitempty"`
	// Unique machine name of the running IFC.
	MachineName *string `json:"machineName,omitempty"`
	// FKT Logo required for the external interface.
	InterfaceProductCode *string `json:"interfaceProductCode,omitempty"`
	// Stores the Outbound Code to identify the target system.
	OutboundCode *string `json:"outboundCode,omitempty"`
}

// NewInterfacePrimaryInfoType instantiates a new InterfacePrimaryInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfacePrimaryInfoType() *InterfacePrimaryInfoType {
	this := InterfacePrimaryInfoType{}
	return &this
}

// NewInterfacePrimaryInfoTypeWithDefaults instantiates a new InterfacePrimaryInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfacePrimaryInfoTypeWithDefaults() *InterfacePrimaryInfoType {
	this := InterfacePrimaryInfoType{}
	return &this
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetInterfaceId() UniqueIDType {
	if o == nil || IsNil(o.InterfaceId) {
		var ret UniqueIDType
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetInterfaceIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given UniqueIDType and assigns it to the InterfaceId field.
func (o *InterfacePrimaryInfoType) SetInterfaceId(v UniqueIDType) {
	o.InterfaceId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *InterfacePrimaryInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InterfacePrimaryInfoType) SetLogo(v string) {
	o.Logo = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *InterfacePrimaryInfoType) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetInterfaceType returns the InterfaceType field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetInterfaceType() HotelInterfaceTypeType {
	if o == nil || IsNil(o.InterfaceType) {
		var ret HotelInterfaceTypeType
		return ret
	}
	return *o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetInterfaceTypeOk() (*HotelInterfaceTypeType, bool) {
	if o == nil || IsNil(o.InterfaceType) {
		return nil, false
	}
	return o.InterfaceType, true
}

// HasInterfaceType returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasInterfaceType() bool {
	if o != nil && !IsNil(o.InterfaceType) {
		return true
	}

	return false
}

// SetInterfaceType gets a reference to the given HotelInterfaceTypeType and assigns it to the InterfaceType field.
func (o *InterfacePrimaryInfoType) SetInterfaceType(v HotelInterfaceTypeType) {
	o.InterfaceType = &v
}

// GetProductCode returns the ProductCode field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetProductCode() string {
	if o == nil || IsNil(o.ProductCode) {
		var ret string
		return ret
	}
	return *o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetProductCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductCode) {
		return nil, false
	}
	return o.ProductCode, true
}

// HasProductCode returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasProductCode() bool {
	if o != nil && !IsNil(o.ProductCode) {
		return true
	}

	return false
}

// SetProductCode gets a reference to the given string and assigns it to the ProductCode field.
func (o *InterfacePrimaryInfoType) SetProductCode(v string) {
	o.ProductCode = &v
}

// GetLicenseCode returns the LicenseCode field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetLicenseCode() string {
	if o == nil || IsNil(o.LicenseCode) {
		var ret string
		return ret
	}
	return *o.LicenseCode
}

// GetLicenseCodeOk returns a tuple with the LicenseCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetLicenseCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseCode) {
		return nil, false
	}
	return o.LicenseCode, true
}

// HasLicenseCode returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasLicenseCode() bool {
	if o != nil && !IsNil(o.LicenseCode) {
		return true
	}

	return false
}

// SetLicenseCode gets a reference to the given string and assigns it to the LicenseCode field.
func (o *InterfacePrimaryInfoType) SetLicenseCode(v string) {
	o.LicenseCode = &v
}

// GetMachineId returns the MachineId field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetMachineId() int32 {
	if o == nil || IsNil(o.MachineId) {
		var ret int32
		return ret
	}
	return *o.MachineId
}

// GetMachineIdOk returns a tuple with the MachineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetMachineIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MachineId) {
		return nil, false
	}
	return o.MachineId, true
}

// HasMachineId returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasMachineId() bool {
	if o != nil && !IsNil(o.MachineId) {
		return true
	}

	return false
}

// SetMachineId gets a reference to the given int32 and assigns it to the MachineId field.
func (o *InterfacePrimaryInfoType) SetMachineId(v int32) {
	o.MachineId = &v
}

// GetMachineName returns the MachineName field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetMachineName() string {
	if o == nil || IsNil(o.MachineName) {
		var ret string
		return ret
	}
	return *o.MachineName
}

// GetMachineNameOk returns a tuple with the MachineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetMachineNameOk() (*string, bool) {
	if o == nil || IsNil(o.MachineName) {
		return nil, false
	}
	return o.MachineName, true
}

// HasMachineName returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasMachineName() bool {
	if o != nil && !IsNil(o.MachineName) {
		return true
	}

	return false
}

// SetMachineName gets a reference to the given string and assigns it to the MachineName field.
func (o *InterfacePrimaryInfoType) SetMachineName(v string) {
	o.MachineName = &v
}

// GetInterfaceProductCode returns the InterfaceProductCode field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetInterfaceProductCode() string {
	if o == nil || IsNil(o.InterfaceProductCode) {
		var ret string
		return ret
	}
	return *o.InterfaceProductCode
}

// GetInterfaceProductCodeOk returns a tuple with the InterfaceProductCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetInterfaceProductCodeOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceProductCode) {
		return nil, false
	}
	return o.InterfaceProductCode, true
}

// HasInterfaceProductCode returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasInterfaceProductCode() bool {
	if o != nil && !IsNil(o.InterfaceProductCode) {
		return true
	}

	return false
}

// SetInterfaceProductCode gets a reference to the given string and assigns it to the InterfaceProductCode field.
func (o *InterfacePrimaryInfoType) SetInterfaceProductCode(v string) {
	o.InterfaceProductCode = &v
}

// GetOutboundCode returns the OutboundCode field value if set, zero value otherwise.
func (o *InterfacePrimaryInfoType) GetOutboundCode() string {
	if o == nil || IsNil(o.OutboundCode) {
		var ret string
		return ret
	}
	return *o.OutboundCode
}

// GetOutboundCodeOk returns a tuple with the OutboundCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfacePrimaryInfoType) GetOutboundCodeOk() (*string, bool) {
	if o == nil || IsNil(o.OutboundCode) {
		return nil, false
	}
	return o.OutboundCode, true
}

// HasOutboundCode returns a boolean if a field has been set.
func (o *InterfacePrimaryInfoType) HasOutboundCode() bool {
	if o != nil && !IsNil(o.OutboundCode) {
		return true
	}

	return false
}

// SetOutboundCode gets a reference to the given string and assigns it to the OutboundCode field.
func (o *InterfacePrimaryInfoType) SetOutboundCode(v string) {
	o.OutboundCode = &v
}

func (o InterfacePrimaryInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfacePrimaryInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceId) {
		toSerialize["interfaceId"] = o.InterfaceId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.InterfaceName) {
		toSerialize["interfaceName"] = o.InterfaceName
	}
	if !IsNil(o.InterfaceType) {
		toSerialize["interfaceType"] = o.InterfaceType
	}
	if !IsNil(o.ProductCode) {
		toSerialize["productCode"] = o.ProductCode
	}
	if !IsNil(o.LicenseCode) {
		toSerialize["licenseCode"] = o.LicenseCode
	}
	if !IsNil(o.MachineId) {
		toSerialize["machineId"] = o.MachineId
	}
	if !IsNil(o.MachineName) {
		toSerialize["machineName"] = o.MachineName
	}
	if !IsNil(o.InterfaceProductCode) {
		toSerialize["interfaceProductCode"] = o.InterfaceProductCode
	}
	if !IsNil(o.OutboundCode) {
		toSerialize["outboundCode"] = o.OutboundCode
	}
	return toSerialize, nil
}

type NullableInterfacePrimaryInfoType struct {
	value *InterfacePrimaryInfoType
	isSet bool
}

func (v NullableInterfacePrimaryInfoType) Get() *InterfacePrimaryInfoType {
	return v.value
}

func (v *NullableInterfacePrimaryInfoType) Set(val *InterfacePrimaryInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfacePrimaryInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfacePrimaryInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfacePrimaryInfoType(val *InterfacePrimaryInfoType) *NullableInterfacePrimaryInfoType {
	return &NullableInterfacePrimaryInfoType{value: val, isSet: true}
}

func (v NullableInterfacePrimaryInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfacePrimaryInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


