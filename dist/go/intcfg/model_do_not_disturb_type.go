/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
	"fmt"
)

// DoNotDisturbType Do Not Disturb is set to available and freely switchable.
type DoNotDisturbType string

// List of doNotDisturbType
const (
	DONOTDISTURBTYPE_NOT_AVAILABLE DoNotDisturbType = "NotAvailable"
	DONOTDISTURBTYPE_ALWAYS_ON DoNotDisturbType = "AlwaysOn"
	DONOTDISTURBTYPE_ALWAYS_OFF DoNotDisturbType = "AlwaysOff"
	DONOTDISTURBTYPE_FREELY_SWITCHABLE DoNotDisturbType = "FreelySwitchable"
)

// All allowed values of DoNotDisturbType enum
var AllowedDoNotDisturbTypeEnumValues = []DoNotDisturbType{
	"NotAvailable",
	"AlwaysOn",
	"AlwaysOff",
	"FreelySwitchable",
}

func (v *DoNotDisturbType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DoNotDisturbType(value)
	for _, existing := range AllowedDoNotDisturbTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DoNotDisturbType", value)
}

// NewDoNotDisturbTypeFromValue returns a pointer to a valid DoNotDisturbType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDoNotDisturbTypeFromValue(v string) (*DoNotDisturbType, error) {
	ev := DoNotDisturbType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DoNotDisturbType: valid values are %v", v, AllowedDoNotDisturbTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DoNotDisturbType) IsValid() bool {
	for _, existing := range AllowedDoNotDisturbTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to doNotDisturbType value
func (v DoNotDisturbType) Ptr() *DoNotDisturbType {
	return &v
}

type NullableDoNotDisturbType struct {
	value *DoNotDisturbType
	isSet bool
}

func (v NullableDoNotDisturbType) Get() *DoNotDisturbType {
	return v.value
}

func (v *NullableDoNotDisturbType) Set(val *DoNotDisturbType) {
	v.value = val
	v.isSet = true
}

func (v NullableDoNotDisturbType) IsSet() bool {
	return v.isSet
}

func (v *NullableDoNotDisturbType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDoNotDisturbType(val *DoNotDisturbType) *NullableDoNotDisturbType {
	return &NullableDoNotDisturbType{value: val, isSet: true}
}

func (v NullableDoNotDisturbType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDoNotDisturbType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

