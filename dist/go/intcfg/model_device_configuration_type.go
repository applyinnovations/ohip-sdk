/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the DeviceConfigurationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceConfigurationType{}

// DeviceConfigurationType Type that contains the parameters and configurations used by the device.
type DeviceConfigurationType struct {
	// Internal name of the configuration.
	Name *string `json:"name,omitempty"`
	// Configuration display name.
	DisplayName *string `json:"displayName,omitempty"`
	// Value of the configuration.
	Value *string `json:"value,omitempty"`
	// Flag that indicates whether the configuration is required or not.
	Required *bool `json:"required,omitempty"`
	// Flag that indicates whether the configuration value should be encrypted or not.
	Encrypted *bool `json:"encrypted,omitempty"`
}

// NewDeviceConfigurationType instantiates a new DeviceConfigurationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceConfigurationType() *DeviceConfigurationType {
	this := DeviceConfigurationType{}
	return &this
}

// NewDeviceConfigurationTypeWithDefaults instantiates a new DeviceConfigurationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceConfigurationTypeWithDefaults() *DeviceConfigurationType {
	this := DeviceConfigurationType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceConfigurationType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceConfigurationType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceConfigurationType) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DeviceConfigurationType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DeviceConfigurationType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DeviceConfigurationType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DeviceConfigurationType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DeviceConfigurationType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DeviceConfigurationType) SetValue(v string) {
	o.Value = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *DeviceConfigurationType) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationType) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *DeviceConfigurationType) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *DeviceConfigurationType) SetRequired(v bool) {
	o.Required = &v
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *DeviceConfigurationType) GetEncrypted() bool {
	if o == nil || IsNil(o.Encrypted) {
		var ret bool
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceConfigurationType) GetEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Encrypted) {
		return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *DeviceConfigurationType) HasEncrypted() bool {
	if o != nil && !IsNil(o.Encrypted) {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given bool and assigns it to the Encrypted field.
func (o *DeviceConfigurationType) SetEncrypted(v bool) {
	o.Encrypted = &v
}

func (o DeviceConfigurationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceConfigurationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	return toSerialize, nil
}

type NullableDeviceConfigurationType struct {
	value *DeviceConfigurationType
	isSet bool
}

func (v NullableDeviceConfigurationType) Get() *DeviceConfigurationType {
	return v.value
}

func (v *NullableDeviceConfigurationType) Set(val *DeviceConfigurationType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceConfigurationType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceConfigurationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceConfigurationType(val *DeviceConfigurationType) *NullableDeviceConfigurationType {
	return &NullableDeviceConfigurationType{value: val, isSet: true}
}

func (v NullableDeviceConfigurationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceConfigurationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


