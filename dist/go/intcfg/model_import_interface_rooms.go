/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the ImportInterfaceRooms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportInterfaceRooms{}

// ImportInterfaceRooms Request object for importing the Interface Rooms for a Hotel Interface record.
type ImportInterfaceRooms struct {
	Details *ImportInterfaceRoomsType `json:"details,omitempty"`
	DMLCommand *DMLCommandType `json:"dMLCommand,omitempty"`
	TargetedImport *InterfaceRoomType `json:"targetedImport,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewImportInterfaceRooms instantiates a new ImportInterfaceRooms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportInterfaceRooms() *ImportInterfaceRooms {
	this := ImportInterfaceRooms{}
	return &this
}

// NewImportInterfaceRoomsWithDefaults instantiates a new ImportInterfaceRooms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportInterfaceRoomsWithDefaults() *ImportInterfaceRooms {
	this := ImportInterfaceRooms{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ImportInterfaceRooms) GetDetails() ImportInterfaceRoomsType {
	if o == nil || IsNil(o.Details) {
		var ret ImportInterfaceRoomsType
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportInterfaceRooms) GetDetailsOk() (*ImportInterfaceRoomsType, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ImportInterfaceRooms) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given ImportInterfaceRoomsType and assigns it to the Details field.
func (o *ImportInterfaceRooms) SetDetails(v ImportInterfaceRoomsType) {
	o.Details = &v
}

// GetDMLCommand returns the DMLCommand field value if set, zero value otherwise.
func (o *ImportInterfaceRooms) GetDMLCommand() DMLCommandType {
	if o == nil || IsNil(o.DMLCommand) {
		var ret DMLCommandType
		return ret
	}
	return *o.DMLCommand
}

// GetDMLCommandOk returns a tuple with the DMLCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportInterfaceRooms) GetDMLCommandOk() (*DMLCommandType, bool) {
	if o == nil || IsNil(o.DMLCommand) {
		return nil, false
	}
	return o.DMLCommand, true
}

// HasDMLCommand returns a boolean if a field has been set.
func (o *ImportInterfaceRooms) HasDMLCommand() bool {
	if o != nil && !IsNil(o.DMLCommand) {
		return true
	}

	return false
}

// SetDMLCommand gets a reference to the given DMLCommandType and assigns it to the DMLCommand field.
func (o *ImportInterfaceRooms) SetDMLCommand(v DMLCommandType) {
	o.DMLCommand = &v
}

// GetTargetedImport returns the TargetedImport field value if set, zero value otherwise.
func (o *ImportInterfaceRooms) GetTargetedImport() InterfaceRoomType {
	if o == nil || IsNil(o.TargetedImport) {
		var ret InterfaceRoomType
		return ret
	}
	return *o.TargetedImport
}

// GetTargetedImportOk returns a tuple with the TargetedImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportInterfaceRooms) GetTargetedImportOk() (*InterfaceRoomType, bool) {
	if o == nil || IsNil(o.TargetedImport) {
		return nil, false
	}
	return o.TargetedImport, true
}

// HasTargetedImport returns a boolean if a field has been set.
func (o *ImportInterfaceRooms) HasTargetedImport() bool {
	if o != nil && !IsNil(o.TargetedImport) {
		return true
	}

	return false
}

// SetTargetedImport gets a reference to the given InterfaceRoomType and assigns it to the TargetedImport field.
func (o *ImportInterfaceRooms) SetTargetedImport(v InterfaceRoomType) {
	o.TargetedImport = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ImportInterfaceRooms) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportInterfaceRooms) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ImportInterfaceRooms) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ImportInterfaceRooms) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ImportInterfaceRooms) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportInterfaceRooms) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ImportInterfaceRooms) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ImportInterfaceRooms) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ImportInterfaceRooms) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportInterfaceRooms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.DMLCommand) {
		toSerialize["dMLCommand"] = o.DMLCommand
	}
	if !IsNil(o.TargetedImport) {
		toSerialize["targetedImport"] = o.TargetedImport
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableImportInterfaceRooms struct {
	value *ImportInterfaceRooms
	isSet bool
}

func (v NullableImportInterfaceRooms) Get() *ImportInterfaceRooms {
	return v.value
}

func (v *NullableImportInterfaceRooms) Set(val *ImportInterfaceRooms) {
	v.value = val
	v.isSet = true
}

func (v NullableImportInterfaceRooms) IsSet() bool {
	return v.isSet
}

func (v *NullableImportInterfaceRooms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportInterfaceRooms(val *ImportInterfaceRooms) *NullableImportInterfaceRooms {
	return &NullableImportInterfaceRooms{value: val, isSet: true}
}

func (v NullableImportInterfaceRooms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportInterfaceRooms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


