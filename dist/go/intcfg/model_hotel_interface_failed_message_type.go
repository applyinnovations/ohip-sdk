/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the HotelInterfaceFailedMessageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelInterfaceFailedMessageType{}

// HotelInterfaceFailedMessageType struct for HotelInterfaceFailedMessageType
type HotelInterfaceFailedMessageType struct {
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
	// Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
	Logo *string `json:"logo,omitempty"`
	// Action Name
	ActionName *string `json:"actionName,omitempty"`
	// Message
	Message *string `json:"message,omitempty"`
	// Date time stamp of a Hotel Interface Schema.
	InsertDate *string `json:"insertDate,omitempty"`
	// ifcType
	IfcType *string `json:"ifcType,omitempty"`
}

// NewHotelInterfaceFailedMessageType instantiates a new HotelInterfaceFailedMessageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelInterfaceFailedMessageType() *HotelInterfaceFailedMessageType {
	this := HotelInterfaceFailedMessageType{}
	return &this
}

// NewHotelInterfaceFailedMessageTypeWithDefaults instantiates a new HotelInterfaceFailedMessageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelInterfaceFailedMessageTypeWithDefaults() *HotelInterfaceFailedMessageType {
	this := HotelInterfaceFailedMessageType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *HotelInterfaceFailedMessageType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInterfaceFailedMessageType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *HotelInterfaceFailedMessageType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *HotelInterfaceFailedMessageType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *HotelInterfaceFailedMessageType) GetLogo() string {
	if o == nil || IsNil(o.Logo) {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInterfaceFailedMessageType) GetLogoOk() (*string, bool) {
	if o == nil || IsNil(o.Logo) {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *HotelInterfaceFailedMessageType) HasLogo() bool {
	if o != nil && !IsNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *HotelInterfaceFailedMessageType) SetLogo(v string) {
	o.Logo = &v
}

// GetActionName returns the ActionName field value if set, zero value otherwise.
func (o *HotelInterfaceFailedMessageType) GetActionName() string {
	if o == nil || IsNil(o.ActionName) {
		var ret string
		return ret
	}
	return *o.ActionName
}

// GetActionNameOk returns a tuple with the ActionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInterfaceFailedMessageType) GetActionNameOk() (*string, bool) {
	if o == nil || IsNil(o.ActionName) {
		return nil, false
	}
	return o.ActionName, true
}

// HasActionName returns a boolean if a field has been set.
func (o *HotelInterfaceFailedMessageType) HasActionName() bool {
	if o != nil && !IsNil(o.ActionName) {
		return true
	}

	return false
}

// SetActionName gets a reference to the given string and assigns it to the ActionName field.
func (o *HotelInterfaceFailedMessageType) SetActionName(v string) {
	o.ActionName = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *HotelInterfaceFailedMessageType) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInterfaceFailedMessageType) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *HotelInterfaceFailedMessageType) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *HotelInterfaceFailedMessageType) SetMessage(v string) {
	o.Message = &v
}

// GetInsertDate returns the InsertDate field value if set, zero value otherwise.
func (o *HotelInterfaceFailedMessageType) GetInsertDate() string {
	if o == nil || IsNil(o.InsertDate) {
		var ret string
		return ret
	}
	return *o.InsertDate
}

// GetInsertDateOk returns a tuple with the InsertDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInterfaceFailedMessageType) GetInsertDateOk() (*string, bool) {
	if o == nil || IsNil(o.InsertDate) {
		return nil, false
	}
	return o.InsertDate, true
}

// HasInsertDate returns a boolean if a field has been set.
func (o *HotelInterfaceFailedMessageType) HasInsertDate() bool {
	if o != nil && !IsNil(o.InsertDate) {
		return true
	}

	return false
}

// SetInsertDate gets a reference to the given string and assigns it to the InsertDate field.
func (o *HotelInterfaceFailedMessageType) SetInsertDate(v string) {
	o.InsertDate = &v
}

// GetIfcType returns the IfcType field value if set, zero value otherwise.
func (o *HotelInterfaceFailedMessageType) GetIfcType() string {
	if o == nil || IsNil(o.IfcType) {
		var ret string
		return ret
	}
	return *o.IfcType
}

// GetIfcTypeOk returns a tuple with the IfcType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelInterfaceFailedMessageType) GetIfcTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IfcType) {
		return nil, false
	}
	return o.IfcType, true
}

// HasIfcType returns a boolean if a field has been set.
func (o *HotelInterfaceFailedMessageType) HasIfcType() bool {
	if o != nil && !IsNil(o.IfcType) {
		return true
	}

	return false
}

// SetIfcType gets a reference to the given string and assigns it to the IfcType field.
func (o *HotelInterfaceFailedMessageType) SetIfcType(v string) {
	o.IfcType = &v
}

func (o HotelInterfaceFailedMessageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelInterfaceFailedMessageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	if !IsNil(o.ActionName) {
		toSerialize["actionName"] = o.ActionName
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.InsertDate) {
		toSerialize["insertDate"] = o.InsertDate
	}
	if !IsNil(o.IfcType) {
		toSerialize["ifcType"] = o.IfcType
	}
	return toSerialize, nil
}

type NullableHotelInterfaceFailedMessageType struct {
	value *HotelInterfaceFailedMessageType
	isSet bool
}

func (v NullableHotelInterfaceFailedMessageType) Get() *HotelInterfaceFailedMessageType {
	return v.value
}

func (v *NullableHotelInterfaceFailedMessageType) Set(val *HotelInterfaceFailedMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelInterfaceFailedMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelInterfaceFailedMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelInterfaceFailedMessageType(val *HotelInterfaceFailedMessageType) *NullableHotelInterfaceFailedMessageType {
	return &NullableHotelInterfaceFailedMessageType{value: val, isSet: true}
}

func (v NullableHotelInterfaceFailedMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelInterfaceFailedMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


