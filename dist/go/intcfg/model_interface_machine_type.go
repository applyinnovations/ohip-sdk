/*
OPERA Cloud Integration Configuration API

APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.4
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package intcfg

import (
	"encoding/json"
)

// checks if the InterfaceMachineType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceMachineType{}

// InterfaceMachineType struct for InterfaceMachineType
type InterfaceMachineType struct {
	Id *UniqueIDType `json:"id,omitempty"`
	// Unique Machine name of the running Interface.
	Machine *string `json:"machine,omitempty"`
	// Path and name of the Interface program running on every Machine.
	Program *string `json:"program,omitempty"`
	// Opera Interface controller (server) port for the connecting clients.
	ControllerPort *int32 `json:"controllerPort,omitempty"`
	// VNC server port for connecting to the VNC server.
	VncPort *int32 `json:"vncPort,omitempty"`
}

// NewInterfaceMachineType instantiates a new InterfaceMachineType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceMachineType() *InterfaceMachineType {
	this := InterfaceMachineType{}
	return &this
}

// NewInterfaceMachineTypeWithDefaults instantiates a new InterfaceMachineType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceMachineTypeWithDefaults() *InterfaceMachineType {
	this := InterfaceMachineType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InterfaceMachineType) GetId() UniqueIDType {
	if o == nil || IsNil(o.Id) {
		var ret UniqueIDType
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceMachineType) GetIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InterfaceMachineType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given UniqueIDType and assigns it to the Id field.
func (o *InterfaceMachineType) SetId(v UniqueIDType) {
	o.Id = &v
}

// GetMachine returns the Machine field value if set, zero value otherwise.
func (o *InterfaceMachineType) GetMachine() string {
	if o == nil || IsNil(o.Machine) {
		var ret string
		return ret
	}
	return *o.Machine
}

// GetMachineOk returns a tuple with the Machine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceMachineType) GetMachineOk() (*string, bool) {
	if o == nil || IsNil(o.Machine) {
		return nil, false
	}
	return o.Machine, true
}

// HasMachine returns a boolean if a field has been set.
func (o *InterfaceMachineType) HasMachine() bool {
	if o != nil && !IsNil(o.Machine) {
		return true
	}

	return false
}

// SetMachine gets a reference to the given string and assigns it to the Machine field.
func (o *InterfaceMachineType) SetMachine(v string) {
	o.Machine = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *InterfaceMachineType) GetProgram() string {
	if o == nil || IsNil(o.Program) {
		var ret string
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceMachineType) GetProgramOk() (*string, bool) {
	if o == nil || IsNil(o.Program) {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *InterfaceMachineType) HasProgram() bool {
	if o != nil && !IsNil(o.Program) {
		return true
	}

	return false
}

// SetProgram gets a reference to the given string and assigns it to the Program field.
func (o *InterfaceMachineType) SetProgram(v string) {
	o.Program = &v
}

// GetControllerPort returns the ControllerPort field value if set, zero value otherwise.
func (o *InterfaceMachineType) GetControllerPort() int32 {
	if o == nil || IsNil(o.ControllerPort) {
		var ret int32
		return ret
	}
	return *o.ControllerPort
}

// GetControllerPortOk returns a tuple with the ControllerPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceMachineType) GetControllerPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ControllerPort) {
		return nil, false
	}
	return o.ControllerPort, true
}

// HasControllerPort returns a boolean if a field has been set.
func (o *InterfaceMachineType) HasControllerPort() bool {
	if o != nil && !IsNil(o.ControllerPort) {
		return true
	}

	return false
}

// SetControllerPort gets a reference to the given int32 and assigns it to the ControllerPort field.
func (o *InterfaceMachineType) SetControllerPort(v int32) {
	o.ControllerPort = &v
}

// GetVncPort returns the VncPort field value if set, zero value otherwise.
func (o *InterfaceMachineType) GetVncPort() int32 {
	if o == nil || IsNil(o.VncPort) {
		var ret int32
		return ret
	}
	return *o.VncPort
}

// GetVncPortOk returns a tuple with the VncPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceMachineType) GetVncPortOk() (*int32, bool) {
	if o == nil || IsNil(o.VncPort) {
		return nil, false
	}
	return o.VncPort, true
}

// HasVncPort returns a boolean if a field has been set.
func (o *InterfaceMachineType) HasVncPort() bool {
	if o != nil && !IsNil(o.VncPort) {
		return true
	}

	return false
}

// SetVncPort gets a reference to the given int32 and assigns it to the VncPort field.
func (o *InterfaceMachineType) SetVncPort(v int32) {
	o.VncPort = &v
}

func (o InterfaceMachineType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceMachineType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Machine) {
		toSerialize["machine"] = o.Machine
	}
	if !IsNil(o.Program) {
		toSerialize["program"] = o.Program
	}
	if !IsNil(o.ControllerPort) {
		toSerialize["controllerPort"] = o.ControllerPort
	}
	if !IsNil(o.VncPort) {
		toSerialize["vncPort"] = o.VncPort
	}
	return toSerialize, nil
}

type NullableInterfaceMachineType struct {
	value *InterfaceMachineType
	isSet bool
}

func (v NullableInterfaceMachineType) Get() *InterfaceMachineType {
	return v.value
}

func (v *NullableInterfaceMachineType) Set(val *InterfaceMachineType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceMachineType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceMachineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceMachineType(val *InterfaceMachineType) *NullableInterfaceMachineType {
	return &NullableInterfaceMachineType{value: val, isSet: true}
}

func (v NullableInterfaceMachineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceMachineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


