/*
OPERA Cloud Activity Management API

APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actcfg

import (
	"encoding/json"
	"fmt"
)

// AutoTraceBlockCategoryType Additional Block information used to trigger activities.
type AutoTraceBlockCategoryType string

// List of autoTraceBlockCategoryType
const (
	AUTOTRACEBLOCKCATEGORYTYPE_DEPOSITS AutoTraceBlockCategoryType = "Deposits"
	AUTOTRACEBLOCKCATEGORYTYPE_DETAILS AutoTraceBlockCategoryType = "Details"
)

// All allowed values of AutoTraceBlockCategoryType enum
var AllowedAutoTraceBlockCategoryTypeEnumValues = []AutoTraceBlockCategoryType{
	"Deposits",
	"Details",
}

func (v *AutoTraceBlockCategoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutoTraceBlockCategoryType(value)
	for _, existing := range AllowedAutoTraceBlockCategoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutoTraceBlockCategoryType", value)
}

// NewAutoTraceBlockCategoryTypeFromValue returns a pointer to a valid AutoTraceBlockCategoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutoTraceBlockCategoryTypeFromValue(v string) (*AutoTraceBlockCategoryType, error) {
	ev := AutoTraceBlockCategoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutoTraceBlockCategoryType: valid values are %v", v, AllowedAutoTraceBlockCategoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutoTraceBlockCategoryType) IsValid() bool {
	for _, existing := range AllowedAutoTraceBlockCategoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to autoTraceBlockCategoryType value
func (v AutoTraceBlockCategoryType) Ptr() *AutoTraceBlockCategoryType {
	return &v
}

type NullableAutoTraceBlockCategoryType struct {
	value *AutoTraceBlockCategoryType
	isSet bool
}

func (v NullableAutoTraceBlockCategoryType) Get() *AutoTraceBlockCategoryType {
	return v.value
}

func (v *NullableAutoTraceBlockCategoryType) Set(val *AutoTraceBlockCategoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoTraceBlockCategoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoTraceBlockCategoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoTraceBlockCategoryType(val *AutoTraceBlockCategoryType) *NullableAutoTraceBlockCategoryType {
	return &NullableAutoTraceBlockCategoryType{value: val, isSet: true}
}

func (v NullableAutoTraceBlockCategoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoTraceBlockCategoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

