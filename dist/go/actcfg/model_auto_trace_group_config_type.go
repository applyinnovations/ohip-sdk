/*
OPERA Cloud Activity Management API

APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actcfg

import (
	"encoding/json"
	"fmt"
)

// AutoTraceGroupConfigType A collection of supported list of Auto Trace Groups.
type AutoTraceGroupConfigType string

// List of autoTraceGroupConfigType
const (
	AUTOTRACEGROUPCONFIGTYPE_ACCOUNTS AutoTraceGroupConfigType = "Accounts"
	AUTOTRACEGROUPCONFIGTYPE_CONTACTS AutoTraceGroupConfigType = "Contacts"
	AUTOTRACEGROUPCONFIGTYPE_BLOCKS AutoTraceGroupConfigType = "Blocks"
	AUTOTRACEGROUPCONFIGTYPE_ACTIVITIES AutoTraceGroupConfigType = "Activities"
)

// All allowed values of AutoTraceGroupConfigType enum
var AllowedAutoTraceGroupConfigTypeEnumValues = []AutoTraceGroupConfigType{
	"Accounts",
	"Contacts",
	"Blocks",
	"Activities",
}

func (v *AutoTraceGroupConfigType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutoTraceGroupConfigType(value)
	for _, existing := range AllowedAutoTraceGroupConfigTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutoTraceGroupConfigType", value)
}

// NewAutoTraceGroupConfigTypeFromValue returns a pointer to a valid AutoTraceGroupConfigType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutoTraceGroupConfigTypeFromValue(v string) (*AutoTraceGroupConfigType, error) {
	ev := AutoTraceGroupConfigType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutoTraceGroupConfigType: valid values are %v", v, AllowedAutoTraceGroupConfigTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutoTraceGroupConfigType) IsValid() bool {
	for _, existing := range AllowedAutoTraceGroupConfigTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to autoTraceGroupConfigType value
func (v AutoTraceGroupConfigType) Ptr() *AutoTraceGroupConfigType {
	return &v
}

type NullableAutoTraceGroupConfigType struct {
	value *AutoTraceGroupConfigType
	isSet bool
}

func (v NullableAutoTraceGroupConfigType) Get() *AutoTraceGroupConfigType {
	return v.value
}

func (v *NullableAutoTraceGroupConfigType) Set(val *AutoTraceGroupConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoTraceGroupConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoTraceGroupConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoTraceGroupConfigType(val *AutoTraceGroupConfigType) *NullableAutoTraceGroupConfigType {
	return &NullableAutoTraceGroupConfigType{value: val, isSet: true}
}

func (v NullableAutoTraceGroupConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoTraceGroupConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

