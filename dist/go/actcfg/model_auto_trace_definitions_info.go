/*
OPERA Cloud Activity Management API

APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actcfg

import (
	"encoding/json"
)

// checks if the AutoTraceDefinitionsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoTraceDefinitionsInfo{}

// AutoTraceDefinitionsInfo Request object for creating/changing Auto Trace Definitions.
type AutoTraceDefinitionsInfo struct {
	// Auto Trace Definition.
	AutoTraceDefinitions []AutoTraceDefinitionType `json:"autoTraceDefinitions,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewAutoTraceDefinitionsInfo instantiates a new AutoTraceDefinitionsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoTraceDefinitionsInfo() *AutoTraceDefinitionsInfo {
	this := AutoTraceDefinitionsInfo{}
	return &this
}

// NewAutoTraceDefinitionsInfoWithDefaults instantiates a new AutoTraceDefinitionsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoTraceDefinitionsInfoWithDefaults() *AutoTraceDefinitionsInfo {
	this := AutoTraceDefinitionsInfo{}
	return &this
}

// GetAutoTraceDefinitions returns the AutoTraceDefinitions field value if set, zero value otherwise.
func (o *AutoTraceDefinitionsInfo) GetAutoTraceDefinitions() []AutoTraceDefinitionType {
	if o == nil || IsNil(o.AutoTraceDefinitions) {
		var ret []AutoTraceDefinitionType
		return ret
	}
	return o.AutoTraceDefinitions
}

// GetAutoTraceDefinitionsOk returns a tuple with the AutoTraceDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoTraceDefinitionsInfo) GetAutoTraceDefinitionsOk() ([]AutoTraceDefinitionType, bool) {
	if o == nil || IsNil(o.AutoTraceDefinitions) {
		return nil, false
	}
	return o.AutoTraceDefinitions, true
}

// HasAutoTraceDefinitions returns a boolean if a field has been set.
func (o *AutoTraceDefinitionsInfo) HasAutoTraceDefinitions() bool {
	if o != nil && !IsNil(o.AutoTraceDefinitions) {
		return true
	}

	return false
}

// SetAutoTraceDefinitions gets a reference to the given []AutoTraceDefinitionType and assigns it to the AutoTraceDefinitions field.
func (o *AutoTraceDefinitionsInfo) SetAutoTraceDefinitions(v []AutoTraceDefinitionType) {
	o.AutoTraceDefinitions = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *AutoTraceDefinitionsInfo) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoTraceDefinitionsInfo) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AutoTraceDefinitionsInfo) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *AutoTraceDefinitionsInfo) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o AutoTraceDefinitionsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutoTraceDefinitionsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutoTraceDefinitions) {
		toSerialize["autoTraceDefinitions"] = o.AutoTraceDefinitions
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableAutoTraceDefinitionsInfo struct {
	value *AutoTraceDefinitionsInfo
	isSet bool
}

func (v NullableAutoTraceDefinitionsInfo) Get() *AutoTraceDefinitionsInfo {
	return v.value
}

func (v *NullableAutoTraceDefinitionsInfo) Set(val *AutoTraceDefinitionsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoTraceDefinitionsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoTraceDefinitionsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoTraceDefinitionsInfo(val *AutoTraceDefinitionsInfo) *NullableAutoTraceDefinitionsInfo {
	return &NullableAutoTraceDefinitionsInfo{value: val, isSet: true}
}

func (v NullableAutoTraceDefinitionsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoTraceDefinitionsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


