/*
OPERA Cloud Activity Management API

APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package actcfg

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ActivityManagementAPIService ActivityManagementAPI service
type ActivityManagementAPIService service

type ActivityManagementAPICopyActivityTypesConfigRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	activityTypesConfigCopy *ActivityTypesConfigCopy
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPICopyActivityTypesConfigRequest) Authorization(authorization string) ActivityManagementAPICopyActivityTypesConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPICopyActivityTypesConfigRequest) XAppKey(xAppKey string) ActivityManagementAPICopyActivityTypesConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPICopyActivityTypesConfigRequest) XHotelid(xHotelid string) ActivityManagementAPICopyActivityTypesConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r ActivityManagementAPICopyActivityTypesConfigRequest) ActivityTypesConfigCopy(activityTypesConfigCopy ActivityTypesConfigCopy) ActivityManagementAPICopyActivityTypesConfigRequest {
	r.activityTypesConfigCopy = &activityTypesConfigCopy
	return r
}

// External system code.
func (r ActivityManagementAPICopyActivityTypesConfigRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPICopyActivityTypesConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPICopyActivityTypesConfigRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPICopyActivityTypesConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPICopyActivityTypesConfigRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.CopyActivityTypesConfigExecute(r)
}

/*
CopyActivityTypesConfig Copy Activity Types configuration codes

With this API you can select  existing Activity Type Codes from the source property and copy them to another (target) property. <p><strong>OperationId:</strong>copyActivityTypesConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of the source hotel.
 @return ActivityManagementAPICopyActivityTypesConfigRequest
*/
func (a *ActivityManagementAPIService) CopyActivityTypesConfig(ctx context.Context, hotelId string) ActivityManagementAPICopyActivityTypesConfigRequest {
	return ActivityManagementAPICopyActivityTypesConfigRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) CopyActivityTypesConfigExecute(r ActivityManagementAPICopyActivityTypesConfigRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.CopyActivityTypesConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/copyActivityTypes/sourceHotel/{hotelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.activityTypesConfigCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPICopyAutoTraceDefinitionsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	autoTraceDefinitionCopy *AutoTraceDefinitionCopy
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPICopyAutoTraceDefinitionsRequest) Authorization(authorization string) ActivityManagementAPICopyAutoTraceDefinitionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPICopyAutoTraceDefinitionsRequest) XAppKey(xAppKey string) ActivityManagementAPICopyAutoTraceDefinitionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPICopyAutoTraceDefinitionsRequest) XHotelid(xHotelid string) ActivityManagementAPICopyAutoTraceDefinitionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for copying trace definition.
func (r ActivityManagementAPICopyAutoTraceDefinitionsRequest) AutoTraceDefinitionCopy(autoTraceDefinitionCopy AutoTraceDefinitionCopy) ActivityManagementAPICopyAutoTraceDefinitionsRequest {
	r.autoTraceDefinitionCopy = &autoTraceDefinitionCopy
	return r
}

// External system code.
func (r ActivityManagementAPICopyAutoTraceDefinitionsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPICopyAutoTraceDefinitionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPICopyAutoTraceDefinitionsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPICopyAutoTraceDefinitionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPICopyAutoTraceDefinitionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.CopyAutoTraceDefinitionsExecute(r)
}

/*
CopyAutoTraceDefinitions Copy an Auto Trace definition Code

Copy an existing auto trace definition code to another property. <p><strong>OperationId:</strong>copyAutoTraceDefinitions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPICopyAutoTraceDefinitionsRequest
*/
func (a *ActivityManagementAPIService) CopyAutoTraceDefinitions(ctx context.Context, hotelId string) ActivityManagementAPICopyAutoTraceDefinitionsRequest {
	return ActivityManagementAPICopyAutoTraceDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) CopyAutoTraceDefinitionsExecute(r ActivityManagementAPICopyAutoTraceDefinitionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.CopyAutoTraceDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/copyAutoTraceDefinitions/sourceHotel/{hotelId}"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.autoTraceDefinitionCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIDeleteActivityResultsConfigRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	activityResultCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIDeleteActivityResultsConfigRequest) Authorization(authorization string) ActivityManagementAPIDeleteActivityResultsConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIDeleteActivityResultsConfigRequest) XAppKey(xAppKey string) ActivityManagementAPIDeleteActivityResultsConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIDeleteActivityResultsConfigRequest) XHotelid(xHotelid string) ActivityManagementAPIDeleteActivityResultsConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ActivityManagementAPIDeleteActivityResultsConfigRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIDeleteActivityResultsConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIDeleteActivityResultsConfigRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIDeleteActivityResultsConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIDeleteActivityResultsConfigRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteActivityResultsConfigExecute(r)
}

/*
DeleteActivityResultsConfig Delete an Activity results code

Delete an Activity Result Code from OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityResultsConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityResultCode Activity Result Code.
 @return ActivityManagementAPIDeleteActivityResultsConfigRequest
*/
func (a *ActivityManagementAPIService) DeleteActivityResultsConfig(ctx context.Context, activityResultCode string) ActivityManagementAPIDeleteActivityResultsConfigRequest {
	return ActivityManagementAPIDeleteActivityResultsConfigRequest{
		ApiService: a,
		ctx: ctx,
		activityResultCode: activityResultCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) DeleteActivityResultsConfigExecute(r ActivityManagementAPIDeleteActivityResultsConfigRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.DeleteActivityResultsConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activityResults/{activityResultCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"activityResultCode"+"}", url.PathEscape(parameterValueToString(r.activityResultCode, "activityResultCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.activityResultCode) < 1 {
		return localVarReturnValue, nil, reportError("activityResultCode must have at least 1 elements")
	}
	if strlen(r.activityResultCode) > 2000 {
		return localVarReturnValue, nil, reportError("activityResultCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIDeleteActivityTypesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	activityTypeCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIDeleteActivityTypesRequest) Authorization(authorization string) ActivityManagementAPIDeleteActivityTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIDeleteActivityTypesRequest) XAppKey(xAppKey string) ActivityManagementAPIDeleteActivityTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIDeleteActivityTypesRequest) XHotelid(xHotelid string) ActivityManagementAPIDeleteActivityTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ActivityManagementAPIDeleteActivityTypesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIDeleteActivityTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIDeleteActivityTypesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIDeleteActivityTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIDeleteActivityTypesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteActivityTypesExecute(r)
}

/*
DeleteActivityTypes Delete an Activity Type Code

This will delete an Activity Type Code from the properties configuration. <p><strong>OperationId:</strong>deleteActivityTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityTypeCode Activity Type Code.
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIDeleteActivityTypesRequest
*/
func (a *ActivityManagementAPIService) DeleteActivityTypes(ctx context.Context, activityTypeCode string, hotelId string) ActivityManagementAPIDeleteActivityTypesRequest {
	return ActivityManagementAPIDeleteActivityTypesRequest{
		ApiService: a,
		ctx: ctx,
		activityTypeCode: activityTypeCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) DeleteActivityTypesExecute(r ActivityManagementAPIDeleteActivityTypesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.DeleteActivityTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/activityTypes/{activityTypeCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"activityTypeCode"+"}", url.PathEscape(parameterValueToString(r.activityTypeCode, "activityTypeCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.activityTypeCode) < 1 {
		return localVarReturnValue, nil, reportError("activityTypeCode must have at least 1 elements")
	}
	if strlen(r.activityTypeCode) > 2000 {
		return localVarReturnValue, nil, reportError("activityTypeCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIDeleteAutoTraceCodesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	autoTraceCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIDeleteAutoTraceCodesRequest) Authorization(authorization string) ActivityManagementAPIDeleteAutoTraceCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIDeleteAutoTraceCodesRequest) XAppKey(xAppKey string) ActivityManagementAPIDeleteAutoTraceCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIDeleteAutoTraceCodesRequest) XHotelid(xHotelid string) ActivityManagementAPIDeleteAutoTraceCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ActivityManagementAPIDeleteAutoTraceCodesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIDeleteAutoTraceCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIDeleteAutoTraceCodesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIDeleteAutoTraceCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIDeleteAutoTraceCodesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteAutoTraceCodesExecute(r)
}

/*
DeleteAutoTraceCodes Delete an Auto Trace code

Delete an Auto trace code. <p><strong>OperationId:</strong>deleteAutoTraceCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param autoTraceCode Unique code of trace.
 @return ActivityManagementAPIDeleteAutoTraceCodesRequest
*/
func (a *ActivityManagementAPIService) DeleteAutoTraceCodes(ctx context.Context, autoTraceCode string) ActivityManagementAPIDeleteAutoTraceCodesRequest {
	return ActivityManagementAPIDeleteAutoTraceCodesRequest{
		ApiService: a,
		ctx: ctx,
		autoTraceCode: autoTraceCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) DeleteAutoTraceCodesExecute(r ActivityManagementAPIDeleteAutoTraceCodesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.DeleteAutoTraceCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/autoTraceCodes/{autoTraceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"autoTraceCode"+"}", url.PathEscape(parameterValueToString(r.autoTraceCode, "autoTraceCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.autoTraceCode) < 1 {
		return localVarReturnValue, nil, reportError("autoTraceCode must have at least 1 elements")
	}
	if strlen(r.autoTraceCode) > 2000 {
		return localVarReturnValue, nil, reportError("autoTraceCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIDeleteAutoTraceDefinitionsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	autoTraceDefinitionId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIDeleteAutoTraceDefinitionsRequest) Authorization(authorization string) ActivityManagementAPIDeleteAutoTraceDefinitionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIDeleteAutoTraceDefinitionsRequest) XAppKey(xAppKey string) ActivityManagementAPIDeleteAutoTraceDefinitionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIDeleteAutoTraceDefinitionsRequest) XHotelid(xHotelid string) ActivityManagementAPIDeleteAutoTraceDefinitionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ActivityManagementAPIDeleteAutoTraceDefinitionsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIDeleteAutoTraceDefinitionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIDeleteAutoTraceDefinitionsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIDeleteAutoTraceDefinitionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIDeleteAutoTraceDefinitionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteAutoTraceDefinitionsExecute(r)
}

/*
DeleteAutoTraceDefinitions Delete an Auto Trace definitions Code

Delete an Auto trace definition code. <p><strong>OperationId:</strong>deleteAutoTraceDefinitions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param autoTraceDefinitionId Unique ID of trace.
 @return ActivityManagementAPIDeleteAutoTraceDefinitionsRequest
*/
func (a *ActivityManagementAPIService) DeleteAutoTraceDefinitions(ctx context.Context, autoTraceDefinitionId string) ActivityManagementAPIDeleteAutoTraceDefinitionsRequest {
	return ActivityManagementAPIDeleteAutoTraceDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		autoTraceDefinitionId: autoTraceDefinitionId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) DeleteAutoTraceDefinitionsExecute(r ActivityManagementAPIDeleteAutoTraceDefinitionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.DeleteAutoTraceDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/autoTraceDefinitions/{autoTraceDefinitionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"autoTraceDefinitionId"+"}", url.PathEscape(parameterValueToString(r.autoTraceDefinitionId, "autoTraceDefinitionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.autoTraceDefinitionId) < 1 {
		return localVarReturnValue, nil, reportError("autoTraceDefinitionId must have at least 1 elements")
	}
	if strlen(r.autoTraceDefinitionId) > 2000 {
		return localVarReturnValue, nil, reportError("autoTraceDefinitionId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	autoTraceOwnerAssignmentID string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest) Authorization(authorization string) ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest) XAppKey(xAppKey string) ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest) XHotelid(xHotelid string) ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteAutoTraceOwnerAssignmentsExecute(r)
}

/*
DeleteAutoTraceOwnerAssignments Delete an Auto Trace owner assignment 

Delete a Trace owner assignment configured for a property. <p><strong>OperationId:</strong>deleteAutoTraceOwnerAssignments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param autoTraceOwnerAssignmentID Unique ID of trace owner.
 @return ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest
*/
func (a *ActivityManagementAPIService) DeleteAutoTraceOwnerAssignments(ctx context.Context, autoTraceOwnerAssignmentID string) ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest {
	return ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		autoTraceOwnerAssignmentID: autoTraceOwnerAssignmentID,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) DeleteAutoTraceOwnerAssignmentsExecute(r ActivityManagementAPIDeleteAutoTraceOwnerAssignmentsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.DeleteAutoTraceOwnerAssignments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/autoTraceOwnerAssignments/{autoTraceOwnerAssignmentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"autoTraceOwnerAssignmentID"+"}", url.PathEscape(parameterValueToString(r.autoTraceOwnerAssignmentID, "autoTraceOwnerAssignmentID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.autoTraceOwnerAssignmentID) < 1 {
		return localVarReturnValue, nil, reportError("autoTraceOwnerAssignmentID must have at least 1 elements")
	}
	if strlen(r.autoTraceOwnerAssignmentID) > 2000 {
		return localVarReturnValue, nil, reportError("autoTraceOwnerAssignmentID must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIGetActivityResultsConfigRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	fetchInactive *bool
	codes *[]string
	wildCard *string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIGetActivityResultsConfigRequest) Authorization(authorization string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIGetActivityResultsConfigRequest) XAppKey(xAppKey string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIGetActivityResultsConfigRequest) XHotelid(xHotelid string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ActivityManagementAPIGetActivityResultsConfigRequest) Limit(limit int32) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ActivityManagementAPIGetActivityResultsConfigRequest) Offset(offset int32) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.offset = &offset
	return r
}

// Determines wether to fetch inactive records or not.
func (r ActivityManagementAPIGetActivityResultsConfigRequest) FetchInactive(fetchInactive bool) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.fetchInactive = &fetchInactive
	return r
}

// Codes to be searched.
func (r ActivityManagementAPIGetActivityResultsConfigRequest) Codes(codes []string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.codes = &codes
	return r
}

// Wildcard search on the code.
func (r ActivityManagementAPIGetActivityResultsConfigRequest) WildCard(wildCard string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.wildCard = &wildCard
	return r
}

// Description of the code.
func (r ActivityManagementAPIGetActivityResultsConfigRequest) Description(description string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.description = &description
	return r
}

// External system code.
func (r ActivityManagementAPIGetActivityResultsConfigRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIGetActivityResultsConfigRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIGetActivityResultsConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIGetActivityResultsConfigRequest) Execute() (*ActivityResultsConfigDetails, *http.Response, error) {
	return r.ApiService.GetActivityResultsConfigExecute(r)
}

/*
GetActivityResultsConfig Get all Configured Activity Result Codes 

Retrieve a list of all configured Activity Result codes and descriptions.  Activity Results appear on the Activities screen in the Results field after the Activity is completed.  And example could be Call Again - an activity is Completed but the result code as part of the completion is to Call Again. <p><strong>OperationId:</strong>getActivityResultsConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ActivityManagementAPIGetActivityResultsConfigRequest
*/
func (a *ActivityManagementAPIService) GetActivityResultsConfig(ctx context.Context) ActivityManagementAPIGetActivityResultsConfigRequest {
	return ActivityManagementAPIGetActivityResultsConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ActivityResultsConfigDetails
func (a *ActivityManagementAPIService) GetActivityResultsConfigExecute(r ActivityManagementAPIGetActivityResultsConfigRequest) (*ActivityResultsConfigDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityResultsConfigDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.GetActivityResultsConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activityResults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.fetchInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInactive", r.fetchInactive, "")
  }
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
  }
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIGetActivityTypesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	activityType *[]string
	description *string
	inactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIGetActivityTypesRequest) Authorization(authorization string) ActivityManagementAPIGetActivityTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIGetActivityTypesRequest) XAppKey(xAppKey string) ActivityManagementAPIGetActivityTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIGetActivityTypesRequest) XHotelid(xHotelid string) ActivityManagementAPIGetActivityTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ActivityManagementAPIGetActivityTypesRequest) Limit(limit int32) ActivityManagementAPIGetActivityTypesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ActivityManagementAPIGetActivityTypesRequest) Offset(offset int32) ActivityManagementAPIGetActivityTypesRequest {
	r.offset = &offset
	return r
}

func (r ActivityManagementAPIGetActivityTypesRequest) ActivityType(activityType []string) ActivityManagementAPIGetActivityTypesRequest {
	r.activityType = &activityType
	return r
}

// Description for the activity type is to be searched for.
func (r ActivityManagementAPIGetActivityTypesRequest) Description(description string) ActivityManagementAPIGetActivityTypesRequest {
	r.description = &description
	return r
}

// Determines whether to fetch inactive records or not.
func (r ActivityManagementAPIGetActivityTypesRequest) Inactive(inactive bool) ActivityManagementAPIGetActivityTypesRequest {
	r.inactive = &inactive
	return r
}

// External system code.
func (r ActivityManagementAPIGetActivityTypesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIGetActivityTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIGetActivityTypesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIGetActivityTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIGetActivityTypesRequest) Execute() (*ActivityTypesConfigDetails, *http.Response, error) {
	return r.ApiService.GetActivityTypesExecute(r)
}

/*
GetActivityTypes Get all Activity Type Codes

Retrieve all configured Activity types for a specified hotel. <p><strong>OperationId:</strong>getActivityTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIGetActivityTypesRequest
*/
func (a *ActivityManagementAPIService) GetActivityTypes(ctx context.Context, hotelId string) ActivityManagementAPIGetActivityTypesRequest {
	return ActivityManagementAPIGetActivityTypesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return ActivityTypesConfigDetails
func (a *ActivityManagementAPIService) GetActivityTypesExecute(r ActivityManagementAPIGetActivityTypesRequest) (*ActivityTypesConfigDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityTypesConfigDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.GetActivityTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/activityTypes"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.activityType != nil {
		t := *r.activityType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "activityType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "activityType", t, "multi")
		}
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	if r.inactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inactive", r.inactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIGetAutoTraceCodesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	codes *[]string
	autoTraceGroups *[]string
	description *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIGetAutoTraceCodesRequest) Authorization(authorization string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIGetAutoTraceCodesRequest) XAppKey(xAppKey string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIGetAutoTraceCodesRequest) XHotelid(xHotelid string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ActivityManagementAPIGetAutoTraceCodesRequest) Limit(limit int32) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ActivityManagementAPIGetAutoTraceCodesRequest) Offset(offset int32) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.offset = &offset
	return r
}

func (r ActivityManagementAPIGetAutoTraceCodesRequest) Codes(codes []string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.codes = &codes
	return r
}

// A collection of supported list of Auto Trace Groups.
func (r ActivityManagementAPIGetAutoTraceCodesRequest) AutoTraceGroups(autoTraceGroups []string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.autoTraceGroups = &autoTraceGroups
	return r
}

// Description for the Trace Code to be searched for.
func (r ActivityManagementAPIGetAutoTraceCodesRequest) Description(description string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.description = &description
	return r
}

// External system code.
func (r ActivityManagementAPIGetAutoTraceCodesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIGetAutoTraceCodesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIGetAutoTraceCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIGetAutoTraceCodesRequest) Execute() (*AutoTraceCodesDetails, *http.Response, error) {
	return r.ApiService.GetAutoTraceCodesExecute(r)
}

/*
GetAutoTraceCodes Get Auto Trace codes

Retrieve a list of all configured Auto Trace Codes for a property. <p><strong>OperationId:</strong>getAutoTraceCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ActivityManagementAPIGetAutoTraceCodesRequest
*/
func (a *ActivityManagementAPIService) GetAutoTraceCodes(ctx context.Context) ActivityManagementAPIGetAutoTraceCodesRequest {
	return ActivityManagementAPIGetAutoTraceCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AutoTraceCodesDetails
func (a *ActivityManagementAPIService) GetAutoTraceCodesExecute(r ActivityManagementAPIGetAutoTraceCodesRequest) (*AutoTraceCodesDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoTraceCodesDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.GetAutoTraceCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/autoTraceCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
  }
	if r.autoTraceGroups != nil {
		t := *r.autoTraceGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "autoTraceGroups", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "autoTraceGroups", t, "multi")
		}
  }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIGetAutoTraceDefinitionsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	codes *[]string
	autoTraceGroups *[]string
	inactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) Authorization(authorization string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) XAppKey(xAppKey string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) XHotelid(xHotelid string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) Limit(limit int32) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) Offset(offset int32) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.offset = &offset
	return r
}

func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) Codes(codes []string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.codes = &codes
	return r
}

// A collection of supported list of Auto Trace Groups.
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) AutoTraceGroups(autoTraceGroups []string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.autoTraceGroups = &autoTraceGroups
	return r
}

// Determines whether to fetch inactive records or not.
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) Inactive(inactive bool) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.inactive = &inactive
	return r
}

// External system code.
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIGetAutoTraceDefinitionsRequest) Execute() (*AutoTraceDefinitionsDetails, *http.Response, error) {
	return r.ApiService.GetAutoTraceDefinitionsExecute(r)
}

/*
GetAutoTraceDefinitions Get a list of Auto Trace definition Codes

Get a list of all Auto trace definitions for a property. <p><strong>OperationId:</strong>getAutoTraceDefinitions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIGetAutoTraceDefinitionsRequest
*/
func (a *ActivityManagementAPIService) GetAutoTraceDefinitions(ctx context.Context, hotelId string) ActivityManagementAPIGetAutoTraceDefinitionsRequest {
	return ActivityManagementAPIGetAutoTraceDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return AutoTraceDefinitionsDetails
func (a *ActivityManagementAPIService) GetAutoTraceDefinitionsExecute(r ActivityManagementAPIGetAutoTraceDefinitionsRequest) (*AutoTraceDefinitionsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoTraceDefinitionsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.GetAutoTraceDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/autoTraceDefinitions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
  }
	if r.autoTraceGroups != nil {
		t := *r.autoTraceGroups
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "autoTraceGroups", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "autoTraceGroups", t, "multi")
		}
  }
	if r.inactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "inactive", r.inactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	codes *[]string
	traceOwnerCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) Authorization(authorization string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) XAppKey(xAppKey string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) XHotelid(xHotelid string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) Limit(limit int32) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) Offset(offset int32) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.offset = &offset
	return r
}

func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) Codes(codes []string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.codes = &codes
	return r
}

func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) TraceOwnerCodes(traceOwnerCodes []string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.traceOwnerCodes = &traceOwnerCodes
	return r
}

// External system code.
func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) Execute() (*AutoTraceOwnerAssignmentsDetails, *http.Response, error) {
	return r.ApiService.GetAutoTraceOwnerAssignmentsExecute(r)
}

/*
GetAutoTraceOwnerAssignments Get an Auto Trace owner mappings

This API will provide a list of all configured Auto Trace Owner Mappings.   <p><strong>OperationId:</strong>getAutoTraceOwnerAssignments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest
*/
func (a *ActivityManagementAPIService) GetAutoTraceOwnerAssignments(ctx context.Context, hotelId string) ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest {
	return ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return AutoTraceOwnerAssignmentsDetails
func (a *ActivityManagementAPIService) GetAutoTraceOwnerAssignmentsExecute(r ActivityManagementAPIGetAutoTraceOwnerAssignmentsRequest) (*AutoTraceOwnerAssignmentsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoTraceOwnerAssignmentsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.GetAutoTraceOwnerAssignments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/autoTraceOwnerAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.codes != nil {
		t := *r.codes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "codes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "codes", t, "multi")
		}
  }
	if r.traceOwnerCodes != nil {
		t := *r.traceOwnerCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "traceOwnerCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "traceOwnerCodes", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPostActivityResultsConfigRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	activityResultsConfigInfo *ActivityResultsConfigInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPostActivityResultsConfigRequest) Authorization(authorization string) ActivityManagementAPIPostActivityResultsConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPostActivityResultsConfigRequest) XAppKey(xAppKey string) ActivityManagementAPIPostActivityResultsConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPostActivityResultsConfigRequest) XHotelid(xHotelid string) ActivityManagementAPIPostActivityResultsConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating Activity Results Configuration.
func (r ActivityManagementAPIPostActivityResultsConfigRequest) ActivityResultsConfigInfo(activityResultsConfigInfo ActivityResultsConfigInfo) ActivityManagementAPIPostActivityResultsConfigRequest {
	r.activityResultsConfigInfo = &activityResultsConfigInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPostActivityResultsConfigRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPostActivityResultsConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPostActivityResultsConfigRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPostActivityResultsConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPostActivityResultsConfigRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostActivityResultsConfigExecute(r)
}

/*
PostActivityResultsConfig Create an Activity results code

Create a new Activity Results Code, for example SUCCESS, END, CALLAGAIN.  These codes are used when you complete an activity.  You need to specify an Activity Result Code as part of that completion process. <p><strong>OperationId:</strong>postActivityResultsConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ActivityManagementAPIPostActivityResultsConfigRequest
*/
func (a *ActivityManagementAPIService) PostActivityResultsConfig(ctx context.Context) ActivityManagementAPIPostActivityResultsConfigRequest {
	return ActivityManagementAPIPostActivityResultsConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PostActivityResultsConfigExecute(r ActivityManagementAPIPostActivityResultsConfigRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PostActivityResultsConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activityResults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.activityResultsConfigInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPostActivityTypesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	activityTypesConfigInfo *ActivityTypesConfigInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPostActivityTypesRequest) Authorization(authorization string) ActivityManagementAPIPostActivityTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPostActivityTypesRequest) XAppKey(xAppKey string) ActivityManagementAPIPostActivityTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPostActivityTypesRequest) XHotelid(xHotelid string) ActivityManagementAPIPostActivityTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating activity types.
func (r ActivityManagementAPIPostActivityTypesRequest) ActivityTypesConfigInfo(activityTypesConfigInfo ActivityTypesConfigInfo) ActivityManagementAPIPostActivityTypesRequest {
	r.activityTypesConfigInfo = &activityTypesConfigInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPostActivityTypesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPostActivityTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPostActivityTypesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPostActivityTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPostActivityTypesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostActivityTypesExecute(r)
}

/*
PostActivityTypes Create a new Activity type in configuration

Create a new Activity Type for a specified hotel. Examples could be  MEETING, LUNCH, EXTMEETING. <p><strong>OperationId:</strong>postActivityTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIPostActivityTypesRequest
*/
func (a *ActivityManagementAPIService) PostActivityTypes(ctx context.Context, hotelId string) ActivityManagementAPIPostActivityTypesRequest {
	return ActivityManagementAPIPostActivityTypesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PostActivityTypesExecute(r ActivityManagementAPIPostActivityTypesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PostActivityTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/activityTypes"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.activityTypesConfigInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPostAutoTraceCodesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	autoTraceCodesInfo *AutoTraceCodesInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPostAutoTraceCodesRequest) Authorization(authorization string) ActivityManagementAPIPostAutoTraceCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPostAutoTraceCodesRequest) XAppKey(xAppKey string) ActivityManagementAPIPostAutoTraceCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPostAutoTraceCodesRequest) XHotelid(xHotelid string) ActivityManagementAPIPostAutoTraceCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating Auto Trace Codes.
func (r ActivityManagementAPIPostAutoTraceCodesRequest) AutoTraceCodesInfo(autoTraceCodesInfo AutoTraceCodesInfo) ActivityManagementAPIPostAutoTraceCodesRequest {
	r.autoTraceCodesInfo = &autoTraceCodesInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPostAutoTraceCodesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPostAutoTraceCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPostAutoTraceCodesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPostAutoTraceCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPostAutoTraceCodesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostAutoTraceCodesExecute(r)
}

/*
PostAutoTraceCodes Create an Auto Trace code

Create an Auto trace code. <p><strong>OperationId:</strong>postAutoTraceCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ActivityManagementAPIPostAutoTraceCodesRequest
*/
func (a *ActivityManagementAPIService) PostAutoTraceCodes(ctx context.Context) ActivityManagementAPIPostAutoTraceCodesRequest {
	return ActivityManagementAPIPostAutoTraceCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PostAutoTraceCodesExecute(r ActivityManagementAPIPostAutoTraceCodesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PostAutoTraceCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/autoTraceCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.autoTraceCodesInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPostAutoTraceDefinitionsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	autoTraceDefinitionsInfo *AutoTraceDefinitionsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPostAutoTraceDefinitionsRequest) Authorization(authorization string) ActivityManagementAPIPostAutoTraceDefinitionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPostAutoTraceDefinitionsRequest) XAppKey(xAppKey string) ActivityManagementAPIPostAutoTraceDefinitionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPostAutoTraceDefinitionsRequest) XHotelid(xHotelid string) ActivityManagementAPIPostAutoTraceDefinitionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating Auto Trace Definitions.
func (r ActivityManagementAPIPostAutoTraceDefinitionsRequest) AutoTraceDefinitionsInfo(autoTraceDefinitionsInfo AutoTraceDefinitionsInfo) ActivityManagementAPIPostAutoTraceDefinitionsRequest {
	r.autoTraceDefinitionsInfo = &autoTraceDefinitionsInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPostAutoTraceDefinitionsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPostAutoTraceDefinitionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPostAutoTraceDefinitionsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPostAutoTraceDefinitionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPostAutoTraceDefinitionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostAutoTraceDefinitionsExecute(r)
}

/*
PostAutoTraceDefinitions Create an Auto Trace Definition Code

Create a new Auto Trace Definition code for a specified property. <p><strong>OperationId:</strong>postAutoTraceDefinitions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIPostAutoTraceDefinitionsRequest
*/
func (a *ActivityManagementAPIService) PostAutoTraceDefinitions(ctx context.Context, hotelId string) ActivityManagementAPIPostAutoTraceDefinitionsRequest {
	return ActivityManagementAPIPostAutoTraceDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PostAutoTraceDefinitionsExecute(r ActivityManagementAPIPostAutoTraceDefinitionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PostAutoTraceDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/autoTraceDefinitions"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.autoTraceDefinitionsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	autoTraceOwnerAssignmentsInfo *AutoTraceOwnerAssignmentsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) Authorization(authorization string) ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) XAppKey(xAppKey string) ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) XHotelid(xHotelid string) ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating trace owner assignments.
func (r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) AutoTraceOwnerAssignmentsInfo(autoTraceOwnerAssignmentsInfo AutoTraceOwnerAssignmentsInfo) ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest {
	r.autoTraceOwnerAssignmentsInfo = &autoTraceOwnerAssignmentsInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostAutoTraceOwnerAssignmentsExecute(r)
}

/*
PostAutoTraceOwnerAssignments Create an Auto Trace owner assignment

You can create Auto traces so that activities are created automatically under certain configured conditions. You first need a Trace code configured, and then using this API you can link the Owner code and Trace Code to a Trace Group (account, contact, activity, or block). <p><strong>OperationId:</strong>postAutoTraceOwnerAssignments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest
*/
func (a *ActivityManagementAPIService) PostAutoTraceOwnerAssignments(ctx context.Context, hotelId string) ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest {
	return ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PostAutoTraceOwnerAssignmentsExecute(r ActivityManagementAPIPostAutoTraceOwnerAssignmentsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PostAutoTraceOwnerAssignments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/autoTraceOwnerAssignments"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.autoTraceOwnerAssignmentsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPutActivityResultsConfigRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	activityResultCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	activityResultsConfigInfo *ActivityResultsConfigInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPutActivityResultsConfigRequest) Authorization(authorization string) ActivityManagementAPIPutActivityResultsConfigRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPutActivityResultsConfigRequest) XAppKey(xAppKey string) ActivityManagementAPIPutActivityResultsConfigRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPutActivityResultsConfigRequest) XHotelid(xHotelid string) ActivityManagementAPIPutActivityResultsConfigRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing Activity Results Configuration.
func (r ActivityManagementAPIPutActivityResultsConfigRequest) ActivityResultsConfigInfo(activityResultsConfigInfo ActivityResultsConfigInfo) ActivityManagementAPIPutActivityResultsConfigRequest {
	r.activityResultsConfigInfo = &activityResultsConfigInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPutActivityResultsConfigRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPutActivityResultsConfigRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPutActivityResultsConfigRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPutActivityResultsConfigRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPutActivityResultsConfigRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutActivityResultsConfigExecute(r)
}

/*
PutActivityResultsConfig Change an Activity Result Code

Change or update details of an existing Activity Results Code. <p><strong>OperationId:</strong>putActivityResultsConfig</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityResultCode Activity Result Code.
 @return ActivityManagementAPIPutActivityResultsConfigRequest
*/
func (a *ActivityManagementAPIService) PutActivityResultsConfig(ctx context.Context, activityResultCode string) ActivityManagementAPIPutActivityResultsConfigRequest {
	return ActivityManagementAPIPutActivityResultsConfigRequest{
		ApiService: a,
		ctx: ctx,
		activityResultCode: activityResultCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PutActivityResultsConfigExecute(r ActivityManagementAPIPutActivityResultsConfigRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PutActivityResultsConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activityResults/{activityResultCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"activityResultCode"+"}", url.PathEscape(parameterValueToString(r.activityResultCode, "activityResultCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.activityResultCode) < 1 {
		return localVarReturnValue, nil, reportError("activityResultCode must have at least 1 elements")
	}
	if strlen(r.activityResultCode) > 2000 {
		return localVarReturnValue, nil, reportError("activityResultCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.activityResultsConfigInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPutActivityTypesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	activityTypeCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	activityTypesConfigInfo *ActivityTypesConfigInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPutActivityTypesRequest) Authorization(authorization string) ActivityManagementAPIPutActivityTypesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPutActivityTypesRequest) XAppKey(xAppKey string) ActivityManagementAPIPutActivityTypesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPutActivityTypesRequest) XHotelid(xHotelid string) ActivityManagementAPIPutActivityTypesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing activity types.
func (r ActivityManagementAPIPutActivityTypesRequest) ActivityTypesConfigInfo(activityTypesConfigInfo ActivityTypesConfigInfo) ActivityManagementAPIPutActivityTypesRequest {
	r.activityTypesConfigInfo = &activityTypesConfigInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPutActivityTypesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPutActivityTypesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPutActivityTypesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPutActivityTypesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPutActivityTypesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutActivityTypesExecute(r)
}

/*
PutActivityTypes Update Activity Types

Change or update details of an existing Activity Type for a property. <p><strong>OperationId:</strong>putActivityTypes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param activityTypeCode Activity Type Code.
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIPutActivityTypesRequest
*/
func (a *ActivityManagementAPIService) PutActivityTypes(ctx context.Context, activityTypeCode string, hotelId string) ActivityManagementAPIPutActivityTypesRequest {
	return ActivityManagementAPIPutActivityTypesRequest{
		ApiService: a,
		ctx: ctx,
		activityTypeCode: activityTypeCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PutActivityTypesExecute(r ActivityManagementAPIPutActivityTypesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PutActivityTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/activityTypes/{activityTypeCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"activityTypeCode"+"}", url.PathEscape(parameterValueToString(r.activityTypeCode, "activityTypeCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.activityTypeCode) < 1 {
		return localVarReturnValue, nil, reportError("activityTypeCode must have at least 1 elements")
	}
	if strlen(r.activityTypeCode) > 2000 {
		return localVarReturnValue, nil, reportError("activityTypeCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.activityTypesConfigInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPutAutoTraceCodesRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	autoTraceCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	autoTraceCodesInfo *AutoTraceCodesInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPutAutoTraceCodesRequest) Authorization(authorization string) ActivityManagementAPIPutAutoTraceCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPutAutoTraceCodesRequest) XAppKey(xAppKey string) ActivityManagementAPIPutAutoTraceCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPutAutoTraceCodesRequest) XHotelid(xHotelid string) ActivityManagementAPIPutAutoTraceCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing Auto Trace Codes.
func (r ActivityManagementAPIPutAutoTraceCodesRequest) AutoTraceCodesInfo(autoTraceCodesInfo AutoTraceCodesInfo) ActivityManagementAPIPutAutoTraceCodesRequest {
	r.autoTraceCodesInfo = &autoTraceCodesInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPutAutoTraceCodesRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPutAutoTraceCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPutAutoTraceCodesRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPutAutoTraceCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPutAutoTraceCodesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutAutoTraceCodesExecute(r)
}

/*
PutAutoTraceCodes Change an Auto Trace code

Update an Auto Trace Code. <p><strong>OperationId:</strong>putAutoTraceCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param autoTraceCode Unique code of trace.
 @return ActivityManagementAPIPutAutoTraceCodesRequest
*/
func (a *ActivityManagementAPIService) PutAutoTraceCodes(ctx context.Context, autoTraceCode string) ActivityManagementAPIPutAutoTraceCodesRequest {
	return ActivityManagementAPIPutAutoTraceCodesRequest{
		ApiService: a,
		ctx: ctx,
		autoTraceCode: autoTraceCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ActivityManagementAPIService) PutAutoTraceCodesExecute(r ActivityManagementAPIPutAutoTraceCodesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PutAutoTraceCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/autoTraceCodes/{autoTraceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"autoTraceCode"+"}", url.PathEscape(parameterValueToString(r.autoTraceCode, "autoTraceCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.autoTraceCode) < 1 {
		return localVarReturnValue, nil, reportError("autoTraceCode must have at least 1 elements")
	}
	if strlen(r.autoTraceCode) > 2000 {
		return localVarReturnValue, nil, reportError("autoTraceCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.autoTraceCodesInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPutAutoTraceDefinitionsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	autoTraceDefinitionId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	autoTraceDefinitionsInfo *AutoTraceDefinitionsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPutAutoTraceDefinitionsRequest) Authorization(authorization string) ActivityManagementAPIPutAutoTraceDefinitionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPutAutoTraceDefinitionsRequest) XAppKey(xAppKey string) ActivityManagementAPIPutAutoTraceDefinitionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPutAutoTraceDefinitionsRequest) XHotelid(xHotelid string) ActivityManagementAPIPutAutoTraceDefinitionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing Auto Trace Definitions.
func (r ActivityManagementAPIPutAutoTraceDefinitionsRequest) AutoTraceDefinitionsInfo(autoTraceDefinitionsInfo AutoTraceDefinitionsInfo) ActivityManagementAPIPutAutoTraceDefinitionsRequest {
	r.autoTraceDefinitionsInfo = &autoTraceDefinitionsInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPutAutoTraceDefinitionsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPutAutoTraceDefinitionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPutAutoTraceDefinitionsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPutAutoTraceDefinitionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPutAutoTraceDefinitionsRequest) Execute() (*AutoTraceDefinitionsStatus, *http.Response, error) {
	return r.ApiService.PutAutoTraceDefinitionsExecute(r)
}

/*
PutAutoTraceDefinitions Change an Auto Trace definition Code

Change an Auto Trace Definition code for a specified property. <p><strong>OperationId:</strong>putAutoTraceDefinitions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param autoTraceDefinitionId Unique ID of trace.
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIPutAutoTraceDefinitionsRequest
*/
func (a *ActivityManagementAPIService) PutAutoTraceDefinitions(ctx context.Context, autoTraceDefinitionId string, hotelId string) ActivityManagementAPIPutAutoTraceDefinitionsRequest {
	return ActivityManagementAPIPutAutoTraceDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
		autoTraceDefinitionId: autoTraceDefinitionId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return AutoTraceDefinitionsStatus
func (a *ActivityManagementAPIService) PutAutoTraceDefinitionsExecute(r ActivityManagementAPIPutAutoTraceDefinitionsRequest) (*AutoTraceDefinitionsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoTraceDefinitionsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PutAutoTraceDefinitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/autoTraceDefinitions/{autoTraceDefinitionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"autoTraceDefinitionId"+"}", url.PathEscape(parameterValueToString(r.autoTraceDefinitionId, "autoTraceDefinitionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.autoTraceDefinitionId) < 1 {
		return localVarReturnValue, nil, reportError("autoTraceDefinitionId must have at least 1 elements")
	}
	if strlen(r.autoTraceDefinitionId) > 2000 {
		return localVarReturnValue, nil, reportError("autoTraceDefinitionId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.autoTraceDefinitionsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest struct {
	ctx context.Context
	ApiService *ActivityManagementAPIService
	autoTraceOwnerAssignmentID string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	autoTraceOwnerAssignmentsInfo *AutoTraceOwnerAssignmentsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) Authorization(authorization string) ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) XAppKey(xAppKey string) ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) XHotelid(xHotelid string) ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing trace owner assignments.
func (r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) AutoTraceOwnerAssignmentsInfo(autoTraceOwnerAssignmentsInfo AutoTraceOwnerAssignmentsInfo) ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest {
	r.autoTraceOwnerAssignmentsInfo = &autoTraceOwnerAssignmentsInfo
	return r
}

// External system code.
func (r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) XExternalsystem(xExternalsystem string) ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) AcceptLanguage(acceptLanguage string) ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) Execute() (*AutoTraceOwnerAssignmentsStatus, *http.Response, error) {
	return r.ApiService.PutAutoTraceOwnerAssignmentsExecute(r)
}

/*
PutAutoTraceOwnerAssignments Change Trace owner assignments

Change a Trace owner assignment configured for a property. <p><strong>OperationId:</strong>putAutoTraceOwnerAssignments</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param autoTraceOwnerAssignmentID Unique ID of trace owner.
 @param hotelId Unique ID of hotel.
 @return ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest
*/
func (a *ActivityManagementAPIService) PutAutoTraceOwnerAssignments(ctx context.Context, autoTraceOwnerAssignmentID string, hotelId string) ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest {
	return ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		autoTraceOwnerAssignmentID: autoTraceOwnerAssignmentID,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return AutoTraceOwnerAssignmentsStatus
func (a *ActivityManagementAPIService) PutAutoTraceOwnerAssignmentsExecute(r ActivityManagementAPIPutAutoTraceOwnerAssignmentsRequest) (*AutoTraceOwnerAssignmentsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoTraceOwnerAssignmentsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityManagementAPIService.PutAutoTraceOwnerAssignments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/autoTraceOwnerAssignments/{autoTraceOwnerAssignmentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"autoTraceOwnerAssignmentID"+"}", url.PathEscape(parameterValueToString(r.autoTraceOwnerAssignmentID, "autoTraceOwnerAssignmentID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.autoTraceOwnerAssignmentID) < 1 {
		return localVarReturnValue, nil, reportError("autoTraceOwnerAssignmentID must have at least 1 elements")
	}
	if strlen(r.autoTraceOwnerAssignmentID) > 2000 {
		return localVarReturnValue, nil, reportError("autoTraceOwnerAssignmentID must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.autoTraceOwnerAssignmentsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
