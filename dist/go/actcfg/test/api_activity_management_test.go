/*
OPERA Cloud Activity Management API

Testing ActivityManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package actcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/actcfg"
)

func Test_actcfg_ActivityManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ActivityManagementAPIService CopyActivityTypesConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.CopyActivityTypesConfig(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService CopyAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.CopyAutoTraceDefinitions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService DeleteActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityResultCode string

		resp, httpRes, err := apiClient.ActivityManagementAPI.DeleteActivityResultsConfig(context.Background(), activityResultCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService DeleteActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.DeleteActivityTypes(context.Background(), activityTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService DeleteAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceCode string

		resp, httpRes, err := apiClient.ActivityManagementAPI.DeleteAutoTraceCodes(context.Background(), autoTraceCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService DeleteAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceDefinitionId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.DeleteAutoTraceDefinitions(context.Background(), autoTraceDefinitionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService DeleteAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceOwnerAssignmentID string

		resp, httpRes, err := apiClient.ActivityManagementAPI.DeleteAutoTraceOwnerAssignments(context.Background(), autoTraceOwnerAssignmentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService GetActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementAPI.GetActivityResultsConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService GetActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.GetActivityTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService GetAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementAPI.GetAutoTraceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService GetAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.GetAutoTraceDefinitions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService GetAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.GetAutoTraceOwnerAssignments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PostActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementAPI.PostActivityResultsConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PostActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PostActivityTypes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PostAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ActivityManagementAPI.PostAutoTraceCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PostAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PostAutoTraceDefinitions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PostAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PostAutoTraceOwnerAssignments(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PutActivityResultsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityResultCode string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PutActivityResultsConfig(context.Background(), activityResultCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PutActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityTypeCode string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PutActivityTypes(context.Background(), activityTypeCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PutAutoTraceCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceCode string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PutAutoTraceCodes(context.Background(), autoTraceCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PutAutoTraceDefinitions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceDefinitionId string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PutAutoTraceDefinitions(context.Background(), autoTraceDefinitionId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ActivityManagementAPIService PutAutoTraceOwnerAssignments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var autoTraceOwnerAssignmentID string
		var hotelId string

		resp, httpRes, err := apiClient.ActivityManagementAPI.PutAutoTraceOwnerAssignments(context.Background(), autoTraceOwnerAssignmentID, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
