/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// CopyInstructionType Copy Instruction for a profile
type CopyInstructionType string

// List of copyInstructionType
const (
	COPYINSTRUCTIONTYPE_KEYWORD CopyInstructionType = "Keyword"
)

// All allowed values of CopyInstructionType enum
var AllowedCopyInstructionTypeEnumValues = []CopyInstructionType{
	"Keyword",
}

func (v *CopyInstructionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CopyInstructionType(value)
	for _, existing := range AllowedCopyInstructionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CopyInstructionType", value)
}

// NewCopyInstructionTypeFromValue returns a pointer to a valid CopyInstructionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCopyInstructionTypeFromValue(v string) (*CopyInstructionType, error) {
	ev := CopyInstructionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CopyInstructionType: valid values are %v", v, AllowedCopyInstructionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CopyInstructionType) IsValid() bool {
	for _, existing := range AllowedCopyInstructionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to copyInstructionType value
func (v CopyInstructionType) Ptr() *CopyInstructionType {
	return &v
}

type NullableCopyInstructionType struct {
	value *CopyInstructionType
	isSet bool
}

func (v NullableCopyInstructionType) Get() *CopyInstructionType {
	return v.value
}

func (v *NullableCopyInstructionType) Set(val *CopyInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyInstructionType(val *CopyInstructionType) *NullableCopyInstructionType {
	return &NullableCopyInstructionType{value: val, isSet: true}
}

func (v NullableCopyInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

