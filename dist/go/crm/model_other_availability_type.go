/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the OtherAvailabilityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OtherAvailabilityType{}

// OtherAvailabilityType Information related to Other Award.
type OtherAvailabilityType struct {
	// Unique code that identifies this award.
	AwardType *string `json:"awardType,omitempty"`
	// Beginning date of the award.
	SellBeginDate *string `json:"sellBeginDate,omitempty"`
	// End date that the award will be available.
	SellEndDate *string `json:"sellEndDate,omitempty"`
	// Descriptive name of the award.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// The actual value of the award, in the amount of currency.
	AwardValue *float32 `json:"awardValue,omitempty"`
	// Total award points available for redemption.
	TotalAvailablePoints *float32 `json:"totalAvailablePoints,omitempty"`
	// The number of points that must be redeemed for this award.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// Detail description of the award.
	LongDescription *string `json:"longDescription,omitempty"`
	// An identifying number of the award, assigned by the system when the award was issued.
	AwardNumber *float32 `json:"awardNumber,omitempty"`
}

// NewOtherAvailabilityType instantiates a new OtherAvailabilityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtherAvailabilityType() *OtherAvailabilityType {
	this := OtherAvailabilityType{}
	return &this
}

// NewOtherAvailabilityTypeWithDefaults instantiates a new OtherAvailabilityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtherAvailabilityTypeWithDefaults() *OtherAvailabilityType {
	this := OtherAvailabilityType{}
	return &this
}

// GetAwardType returns the AwardType field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetAwardType() string {
	if o == nil || IsNil(o.AwardType) {
		var ret string
		return ret
	}
	return *o.AwardType
}

// GetAwardTypeOk returns a tuple with the AwardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetAwardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardType) {
		return nil, false
	}
	return o.AwardType, true
}

// HasAwardType returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasAwardType() bool {
	if o != nil && !IsNil(o.AwardType) {
		return true
	}

	return false
}

// SetAwardType gets a reference to the given string and assigns it to the AwardType field.
func (o *OtherAvailabilityType) SetAwardType(v string) {
	o.AwardType = &v
}

// GetSellBeginDate returns the SellBeginDate field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetSellBeginDate() string {
	if o == nil || IsNil(o.SellBeginDate) {
		var ret string
		return ret
	}
	return *o.SellBeginDate
}

// GetSellBeginDateOk returns a tuple with the SellBeginDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetSellBeginDateOk() (*string, bool) {
	if o == nil || IsNil(o.SellBeginDate) {
		return nil, false
	}
	return o.SellBeginDate, true
}

// HasSellBeginDate returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasSellBeginDate() bool {
	if o != nil && !IsNil(o.SellBeginDate) {
		return true
	}

	return false
}

// SetSellBeginDate gets a reference to the given string and assigns it to the SellBeginDate field.
func (o *OtherAvailabilityType) SetSellBeginDate(v string) {
	o.SellBeginDate = &v
}

// GetSellEndDate returns the SellEndDate field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetSellEndDate() string {
	if o == nil || IsNil(o.SellEndDate) {
		var ret string
		return ret
	}
	return *o.SellEndDate
}

// GetSellEndDateOk returns a tuple with the SellEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetSellEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.SellEndDate) {
		return nil, false
	}
	return o.SellEndDate, true
}

// HasSellEndDate returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasSellEndDate() bool {
	if o != nil && !IsNil(o.SellEndDate) {
		return true
	}

	return false
}

// SetSellEndDate gets a reference to the given string and assigns it to the SellEndDate field.
func (o *OtherAvailabilityType) SetSellEndDate(v string) {
	o.SellEndDate = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *OtherAvailabilityType) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetAwardValue returns the AwardValue field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetAwardValue() float32 {
	if o == nil || IsNil(o.AwardValue) {
		var ret float32
		return ret
	}
	return *o.AwardValue
}

// GetAwardValueOk returns a tuple with the AwardValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetAwardValueOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardValue) {
		return nil, false
	}
	return o.AwardValue, true
}

// HasAwardValue returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasAwardValue() bool {
	if o != nil && !IsNil(o.AwardValue) {
		return true
	}

	return false
}

// SetAwardValue gets a reference to the given float32 and assigns it to the AwardValue field.
func (o *OtherAvailabilityType) SetAwardValue(v float32) {
	o.AwardValue = &v
}

// GetTotalAvailablePoints returns the TotalAvailablePoints field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetTotalAvailablePoints() float32 {
	if o == nil || IsNil(o.TotalAvailablePoints) {
		var ret float32
		return ret
	}
	return *o.TotalAvailablePoints
}

// GetTotalAvailablePointsOk returns a tuple with the TotalAvailablePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetTotalAvailablePointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAvailablePoints) {
		return nil, false
	}
	return o.TotalAvailablePoints, true
}

// HasTotalAvailablePoints returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasTotalAvailablePoints() bool {
	if o != nil && !IsNil(o.TotalAvailablePoints) {
		return true
	}

	return false
}

// SetTotalAvailablePoints gets a reference to the given float32 and assigns it to the TotalAvailablePoints field.
func (o *OtherAvailabilityType) SetTotalAvailablePoints(v float32) {
	o.TotalAvailablePoints = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *OtherAvailabilityType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetLongDescription returns the LongDescription field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetLongDescription() string {
	if o == nil || IsNil(o.LongDescription) {
		var ret string
		return ret
	}
	return *o.LongDescription
}

// GetLongDescriptionOk returns a tuple with the LongDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetLongDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.LongDescription) {
		return nil, false
	}
	return o.LongDescription, true
}

// HasLongDescription returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasLongDescription() bool {
	if o != nil && !IsNil(o.LongDescription) {
		return true
	}

	return false
}

// SetLongDescription gets a reference to the given string and assigns it to the LongDescription field.
func (o *OtherAvailabilityType) SetLongDescription(v string) {
	o.LongDescription = &v
}

// GetAwardNumber returns the AwardNumber field value if set, zero value otherwise.
func (o *OtherAvailabilityType) GetAwardNumber() float32 {
	if o == nil || IsNil(o.AwardNumber) {
		var ret float32
		return ret
	}
	return *o.AwardNumber
}

// GetAwardNumberOk returns a tuple with the AwardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAvailabilityType) GetAwardNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardNumber) {
		return nil, false
	}
	return o.AwardNumber, true
}

// HasAwardNumber returns a boolean if a field has been set.
func (o *OtherAvailabilityType) HasAwardNumber() bool {
	if o != nil && !IsNil(o.AwardNumber) {
		return true
	}

	return false
}

// SetAwardNumber gets a reference to the given float32 and assigns it to the AwardNumber field.
func (o *OtherAvailabilityType) SetAwardNumber(v float32) {
	o.AwardNumber = &v
}

func (o OtherAvailabilityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtherAvailabilityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardType) {
		toSerialize["awardType"] = o.AwardType
	}
	if !IsNil(o.SellBeginDate) {
		toSerialize["sellBeginDate"] = o.SellBeginDate
	}
	if !IsNil(o.SellEndDate) {
		toSerialize["sellEndDate"] = o.SellEndDate
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.AwardValue) {
		toSerialize["awardValue"] = o.AwardValue
	}
	if !IsNil(o.TotalAvailablePoints) {
		toSerialize["totalAvailablePoints"] = o.TotalAvailablePoints
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.LongDescription) {
		toSerialize["longDescription"] = o.LongDescription
	}
	if !IsNil(o.AwardNumber) {
		toSerialize["awardNumber"] = o.AwardNumber
	}
	return toSerialize, nil
}

type NullableOtherAvailabilityType struct {
	value *OtherAvailabilityType
	isSet bool
}

func (v NullableOtherAvailabilityType) Get() *OtherAvailabilityType {
	return v.value
}

func (v *NullableOtherAvailabilityType) Set(val *OtherAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableOtherAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableOtherAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtherAvailabilityType(val *OtherAvailabilityType) *NullableOtherAvailabilityType {
	return &NullableOtherAvailabilityType{value: val, isSet: true}
}

func (v NullableOtherAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtherAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


