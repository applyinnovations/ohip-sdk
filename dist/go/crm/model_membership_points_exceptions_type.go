/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MembershipPointsExceptionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipPointsExceptionsType{}

// MembershipPointsExceptionsType Contains Membership points exception information.
type MembershipPointsExceptionsType struct {
	// Unique identifier associated with the membership transaction.
	MembershipTransactionIds []MembershipTransactionId `json:"membershipTransactionIds,omitempty"`
	// Indicates if the membership points exception are to be accepted or rejected.
	AcceptPoints *bool `json:"acceptPoints,omitempty"`
	// Notes regarding the resolution of the membership transaction exception or for any other reason.
	UserNotes *string `json:"userNotes,omitempty"`
}

// NewMembershipPointsExceptionsType instantiates a new MembershipPointsExceptionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipPointsExceptionsType() *MembershipPointsExceptionsType {
	this := MembershipPointsExceptionsType{}
	return &this
}

// NewMembershipPointsExceptionsTypeWithDefaults instantiates a new MembershipPointsExceptionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipPointsExceptionsTypeWithDefaults() *MembershipPointsExceptionsType {
	this := MembershipPointsExceptionsType{}
	return &this
}

// GetMembershipTransactionIds returns the MembershipTransactionIds field value if set, zero value otherwise.
func (o *MembershipPointsExceptionsType) GetMembershipTransactionIds() []MembershipTransactionId {
	if o == nil || IsNil(o.MembershipTransactionIds) {
		var ret []MembershipTransactionId
		return ret
	}
	return o.MembershipTransactionIds
}

// GetMembershipTransactionIdsOk returns a tuple with the MembershipTransactionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPointsExceptionsType) GetMembershipTransactionIdsOk() ([]MembershipTransactionId, bool) {
	if o == nil || IsNil(o.MembershipTransactionIds) {
		return nil, false
	}
	return o.MembershipTransactionIds, true
}

// HasMembershipTransactionIds returns a boolean if a field has been set.
func (o *MembershipPointsExceptionsType) HasMembershipTransactionIds() bool {
	if o != nil && !IsNil(o.MembershipTransactionIds) {
		return true
	}

	return false
}

// SetMembershipTransactionIds gets a reference to the given []MembershipTransactionId and assigns it to the MembershipTransactionIds field.
func (o *MembershipPointsExceptionsType) SetMembershipTransactionIds(v []MembershipTransactionId) {
	o.MembershipTransactionIds = v
}

// GetAcceptPoints returns the AcceptPoints field value if set, zero value otherwise.
func (o *MembershipPointsExceptionsType) GetAcceptPoints() bool {
	if o == nil || IsNil(o.AcceptPoints) {
		var ret bool
		return ret
	}
	return *o.AcceptPoints
}

// GetAcceptPointsOk returns a tuple with the AcceptPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPointsExceptionsType) GetAcceptPointsOk() (*bool, bool) {
	if o == nil || IsNil(o.AcceptPoints) {
		return nil, false
	}
	return o.AcceptPoints, true
}

// HasAcceptPoints returns a boolean if a field has been set.
func (o *MembershipPointsExceptionsType) HasAcceptPoints() bool {
	if o != nil && !IsNil(o.AcceptPoints) {
		return true
	}

	return false
}

// SetAcceptPoints gets a reference to the given bool and assigns it to the AcceptPoints field.
func (o *MembershipPointsExceptionsType) SetAcceptPoints(v bool) {
	o.AcceptPoints = &v
}

// GetUserNotes returns the UserNotes field value if set, zero value otherwise.
func (o *MembershipPointsExceptionsType) GetUserNotes() string {
	if o == nil || IsNil(o.UserNotes) {
		var ret string
		return ret
	}
	return *o.UserNotes
}

// GetUserNotesOk returns a tuple with the UserNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPointsExceptionsType) GetUserNotesOk() (*string, bool) {
	if o == nil || IsNil(o.UserNotes) {
		return nil, false
	}
	return o.UserNotes, true
}

// HasUserNotes returns a boolean if a field has been set.
func (o *MembershipPointsExceptionsType) HasUserNotes() bool {
	if o != nil && !IsNil(o.UserNotes) {
		return true
	}

	return false
}

// SetUserNotes gets a reference to the given string and assigns it to the UserNotes field.
func (o *MembershipPointsExceptionsType) SetUserNotes(v string) {
	o.UserNotes = &v
}

func (o MembershipPointsExceptionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipPointsExceptionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipTransactionIds) {
		toSerialize["membershipTransactionIds"] = o.MembershipTransactionIds
	}
	if !IsNil(o.AcceptPoints) {
		toSerialize["acceptPoints"] = o.AcceptPoints
	}
	if !IsNil(o.UserNotes) {
		toSerialize["userNotes"] = o.UserNotes
	}
	return toSerialize, nil
}

type NullableMembershipPointsExceptionsType struct {
	value *MembershipPointsExceptionsType
	isSet bool
}

func (v NullableMembershipPointsExceptionsType) Get() *MembershipPointsExceptionsType {
	return v.value
}

func (v *NullableMembershipPointsExceptionsType) Set(val *MembershipPointsExceptionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipPointsExceptionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipPointsExceptionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipPointsExceptionsType(val *MembershipPointsExceptionsType) *NullableMembershipPointsExceptionsType {
	return &NullableMembershipPointsExceptionsType{value: val, isSet: true}
}

func (v NullableMembershipPointsExceptionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipPointsExceptionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


