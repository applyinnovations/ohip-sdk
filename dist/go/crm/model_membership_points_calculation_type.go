/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MembershipPointsCalculationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipPointsCalculationType{}

// MembershipPointsCalculationType Details needed for calculating membership points.
type MembershipPointsCalculationType struct {
	// Award Code to be used to generate awards for the membership type. Available for Automatic Generation of Awards (Issue Awards) only.
	AwardCode *string `json:"awardCode,omitempty"`
	// The last date for which calculate or expire points. Available for Calculate Points and Expire Award Points only.
	CalculateUntilDate *string `json:"calculateUntilDate,omitempty"`
	// Membership type for which point calculation process is to be run.
	MembershipType *string `json:"membershipType,omitempty"`
	ProcessType *MembershipPointsCalculationProcessType `json:"processType,omitempty"`
}

// NewMembershipPointsCalculationType instantiates a new MembershipPointsCalculationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipPointsCalculationType() *MembershipPointsCalculationType {
	this := MembershipPointsCalculationType{}
	return &this
}

// NewMembershipPointsCalculationTypeWithDefaults instantiates a new MembershipPointsCalculationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipPointsCalculationTypeWithDefaults() *MembershipPointsCalculationType {
	this := MembershipPointsCalculationType{}
	return &this
}

// GetAwardCode returns the AwardCode field value if set, zero value otherwise.
func (o *MembershipPointsCalculationType) GetAwardCode() string {
	if o == nil || IsNil(o.AwardCode) {
		var ret string
		return ret
	}
	return *o.AwardCode
}

// GetAwardCodeOk returns a tuple with the AwardCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPointsCalculationType) GetAwardCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardCode) {
		return nil, false
	}
	return o.AwardCode, true
}

// HasAwardCode returns a boolean if a field has been set.
func (o *MembershipPointsCalculationType) HasAwardCode() bool {
	if o != nil && !IsNil(o.AwardCode) {
		return true
	}

	return false
}

// SetAwardCode gets a reference to the given string and assigns it to the AwardCode field.
func (o *MembershipPointsCalculationType) SetAwardCode(v string) {
	o.AwardCode = &v
}

// GetCalculateUntilDate returns the CalculateUntilDate field value if set, zero value otherwise.
func (o *MembershipPointsCalculationType) GetCalculateUntilDate() string {
	if o == nil || IsNil(o.CalculateUntilDate) {
		var ret string
		return ret
	}
	return *o.CalculateUntilDate
}

// GetCalculateUntilDateOk returns a tuple with the CalculateUntilDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPointsCalculationType) GetCalculateUntilDateOk() (*string, bool) {
	if o == nil || IsNil(o.CalculateUntilDate) {
		return nil, false
	}
	return o.CalculateUntilDate, true
}

// HasCalculateUntilDate returns a boolean if a field has been set.
func (o *MembershipPointsCalculationType) HasCalculateUntilDate() bool {
	if o != nil && !IsNil(o.CalculateUntilDate) {
		return true
	}

	return false
}

// SetCalculateUntilDate gets a reference to the given string and assigns it to the CalculateUntilDate field.
func (o *MembershipPointsCalculationType) SetCalculateUntilDate(v string) {
	o.CalculateUntilDate = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipPointsCalculationType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPointsCalculationType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipPointsCalculationType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipPointsCalculationType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetProcessType returns the ProcessType field value if set, zero value otherwise.
func (o *MembershipPointsCalculationType) GetProcessType() MembershipPointsCalculationProcessType {
	if o == nil || IsNil(o.ProcessType) {
		var ret MembershipPointsCalculationProcessType
		return ret
	}
	return *o.ProcessType
}

// GetProcessTypeOk returns a tuple with the ProcessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipPointsCalculationType) GetProcessTypeOk() (*MembershipPointsCalculationProcessType, bool) {
	if o == nil || IsNil(o.ProcessType) {
		return nil, false
	}
	return o.ProcessType, true
}

// HasProcessType returns a boolean if a field has been set.
func (o *MembershipPointsCalculationType) HasProcessType() bool {
	if o != nil && !IsNil(o.ProcessType) {
		return true
	}

	return false
}

// SetProcessType gets a reference to the given MembershipPointsCalculationProcessType and assigns it to the ProcessType field.
func (o *MembershipPointsCalculationType) SetProcessType(v MembershipPointsCalculationProcessType) {
	o.ProcessType = &v
}

func (o MembershipPointsCalculationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipPointsCalculationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardCode) {
		toSerialize["awardCode"] = o.AwardCode
	}
	if !IsNil(o.CalculateUntilDate) {
		toSerialize["calculateUntilDate"] = o.CalculateUntilDate
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.ProcessType) {
		toSerialize["processType"] = o.ProcessType
	}
	return toSerialize, nil
}

type NullableMembershipPointsCalculationType struct {
	value *MembershipPointsCalculationType
	isSet bool
}

func (v NullableMembershipPointsCalculationType) Get() *MembershipPointsCalculationType {
	return v.value
}

func (v *NullableMembershipPointsCalculationType) Set(val *MembershipPointsCalculationType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipPointsCalculationType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipPointsCalculationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipPointsCalculationType(val *MembershipPointsCalculationType) *NullableMembershipPointsCalculationType {
	return &NullableMembershipPointsCalculationType{value: val, isSet: true}
}

func (v NullableMembershipPointsCalculationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipPointsCalculationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


