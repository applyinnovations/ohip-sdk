/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the FlexFieldValueType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlexFieldValueType{}

// FlexFieldValueType Provides the details of a flex field values
type FlexFieldValueType struct {
	// Flex field code
	Code *string `json:"code,omitempty"`
	// value of the Dynamic Field 
	FlexFieldValue *string `json:"flexFieldValue,omitempty"`
	// Hotel Code
	HotelId *string `json:"hotelId,omitempty"`
}

// NewFlexFieldValueType instantiates a new FlexFieldValueType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlexFieldValueType() *FlexFieldValueType {
	this := FlexFieldValueType{}
	return &this
}

// NewFlexFieldValueTypeWithDefaults instantiates a new FlexFieldValueType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlexFieldValueTypeWithDefaults() *FlexFieldValueType {
	this := FlexFieldValueType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FlexFieldValueType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldValueType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *FlexFieldValueType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FlexFieldValueType) SetCode(v string) {
	o.Code = &v
}

// GetFlexFieldValue returns the FlexFieldValue field value if set, zero value otherwise.
func (o *FlexFieldValueType) GetFlexFieldValue() string {
	if o == nil || IsNil(o.FlexFieldValue) {
		var ret string
		return ret
	}
	return *o.FlexFieldValue
}

// GetFlexFieldValueOk returns a tuple with the FlexFieldValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldValueType) GetFlexFieldValueOk() (*string, bool) {
	if o == nil || IsNil(o.FlexFieldValue) {
		return nil, false
	}
	return o.FlexFieldValue, true
}

// HasFlexFieldValue returns a boolean if a field has been set.
func (o *FlexFieldValueType) HasFlexFieldValue() bool {
	if o != nil && !IsNil(o.FlexFieldValue) {
		return true
	}

	return false
}

// SetFlexFieldValue gets a reference to the given string and assigns it to the FlexFieldValue field.
func (o *FlexFieldValueType) SetFlexFieldValue(v string) {
	o.FlexFieldValue = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FlexFieldValueType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlexFieldValueType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FlexFieldValueType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FlexFieldValueType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o FlexFieldValueType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlexFieldValueType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.FlexFieldValue) {
		toSerialize["flexFieldValue"] = o.FlexFieldValue
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableFlexFieldValueType struct {
	value *FlexFieldValueType
	isSet bool
}

func (v NullableFlexFieldValueType) Get() *FlexFieldValueType {
	return v.value
}

func (v *NullableFlexFieldValueType) Set(val *FlexFieldValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableFlexFieldValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableFlexFieldValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlexFieldValueType(val *FlexFieldValueType) *NullableFlexFieldValueType {
	return &NullableFlexFieldValueType{value: val, isSet: true}
}

func (v NullableFlexFieldValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlexFieldValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


