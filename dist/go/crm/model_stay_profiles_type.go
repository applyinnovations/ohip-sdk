/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// checks if the StayProfilesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StayProfilesType{}

// StayProfilesType struct for StayProfilesType
type StayProfilesType struct {
	// Checks if the profile is primary.
	Primary *bool `json:"primary,omitempty"`
	// Specifies the unique id that is assigned to a profile.
	NameId *float32 `json:"nameId,omitempty"`
	// Specifies the pms id that is assigned to a profile.
	PmsNameId *string `json:"pmsNameId,omitempty"`
	// Describes the role associated with the profile.
	ProfileRole string `json:"profileRole"`
}

type _StayProfilesType StayProfilesType

// NewStayProfilesType instantiates a new StayProfilesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStayProfilesType(profileRole string) *StayProfilesType {
	this := StayProfilesType{}
	this.ProfileRole = profileRole
	return &this
}

// NewStayProfilesTypeWithDefaults instantiates a new StayProfilesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStayProfilesTypeWithDefaults() *StayProfilesType {
	this := StayProfilesType{}
	return &this
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *StayProfilesType) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayProfilesType) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *StayProfilesType) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *StayProfilesType) SetPrimary(v bool) {
	o.Primary = &v
}

// GetNameId returns the NameId field value if set, zero value otherwise.
func (o *StayProfilesType) GetNameId() float32 {
	if o == nil || IsNil(o.NameId) {
		var ret float32
		return ret
	}
	return *o.NameId
}

// GetNameIdOk returns a tuple with the NameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayProfilesType) GetNameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.NameId) {
		return nil, false
	}
	return o.NameId, true
}

// HasNameId returns a boolean if a field has been set.
func (o *StayProfilesType) HasNameId() bool {
	if o != nil && !IsNil(o.NameId) {
		return true
	}

	return false
}

// SetNameId gets a reference to the given float32 and assigns it to the NameId field.
func (o *StayProfilesType) SetNameId(v float32) {
	o.NameId = &v
}

// GetPmsNameId returns the PmsNameId field value if set, zero value otherwise.
func (o *StayProfilesType) GetPmsNameId() string {
	if o == nil || IsNil(o.PmsNameId) {
		var ret string
		return ret
	}
	return *o.PmsNameId
}

// GetPmsNameIdOk returns a tuple with the PmsNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayProfilesType) GetPmsNameIdOk() (*string, bool) {
	if o == nil || IsNil(o.PmsNameId) {
		return nil, false
	}
	return o.PmsNameId, true
}

// HasPmsNameId returns a boolean if a field has been set.
func (o *StayProfilesType) HasPmsNameId() bool {
	if o != nil && !IsNil(o.PmsNameId) {
		return true
	}

	return false
}

// SetPmsNameId gets a reference to the given string and assigns it to the PmsNameId field.
func (o *StayProfilesType) SetPmsNameId(v string) {
	o.PmsNameId = &v
}

// GetProfileRole returns the ProfileRole field value
func (o *StayProfilesType) GetProfileRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileRole
}

// GetProfileRoleOk returns a tuple with the ProfileRole field value
// and a boolean to check if the value has been set.
func (o *StayProfilesType) GetProfileRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileRole, true
}

// SetProfileRole sets field value
func (o *StayProfilesType) SetProfileRole(v string) {
	o.ProfileRole = v
}

func (o StayProfilesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StayProfilesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.NameId) {
		toSerialize["nameId"] = o.NameId
	}
	if !IsNil(o.PmsNameId) {
		toSerialize["pmsNameId"] = o.PmsNameId
	}
	toSerialize["profileRole"] = o.ProfileRole
	return toSerialize, nil
}

func (o *StayProfilesType) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"profileRole",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStayProfilesType := _StayProfilesType{}

	err = json.Unmarshal(bytes, &varStayProfilesType)

	if err != nil {
		return err
	}

	*o = StayProfilesType(varStayProfilesType)

	return err
}

type NullableStayProfilesType struct {
	value *StayProfilesType
	isSet bool
}

func (v NullableStayProfilesType) Get() *StayProfilesType {
	return v.value
}

func (v *NullableStayProfilesType) Set(val *StayProfilesType) {
	v.value = val
	v.isSet = true
}

func (v NullableStayProfilesType) IsSet() bool {
	return v.isSet
}

func (v *NullableStayProfilesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStayProfilesType(val *StayProfilesType) *NullableStayProfilesType {
	return &NullableStayProfilesType{value: val, isSet: true}
}

func (v NullableStayProfilesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStayProfilesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


