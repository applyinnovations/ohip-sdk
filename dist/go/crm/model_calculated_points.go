/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the CalculatedPoints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculatedPoints{}

// CalculatedPoints Response object for fetching membership transaction points information.
type CalculatedPoints struct {
	CalculatedPoint *CalculatedPointsType `json:"calculatedPoint,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCalculatedPoints instantiates a new CalculatedPoints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatedPoints() *CalculatedPoints {
	this := CalculatedPoints{}
	return &this
}

// NewCalculatedPointsWithDefaults instantiates a new CalculatedPoints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatedPointsWithDefaults() *CalculatedPoints {
	this := CalculatedPoints{}
	return &this
}

// GetCalculatedPoint returns the CalculatedPoint field value if set, zero value otherwise.
func (o *CalculatedPoints) GetCalculatedPoint() CalculatedPointsType {
	if o == nil || IsNil(o.CalculatedPoint) {
		var ret CalculatedPointsType
		return ret
	}
	return *o.CalculatedPoint
}

// GetCalculatedPointOk returns a tuple with the CalculatedPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPoints) GetCalculatedPointOk() (*CalculatedPointsType, bool) {
	if o == nil || IsNil(o.CalculatedPoint) {
		return nil, false
	}
	return o.CalculatedPoint, true
}

// HasCalculatedPoint returns a boolean if a field has been set.
func (o *CalculatedPoints) HasCalculatedPoint() bool {
	if o != nil && !IsNil(o.CalculatedPoint) {
		return true
	}

	return false
}

// SetCalculatedPoint gets a reference to the given CalculatedPointsType and assigns it to the CalculatedPoint field.
func (o *CalculatedPoints) SetCalculatedPoint(v CalculatedPointsType) {
	o.CalculatedPoint = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CalculatedPoints) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPoints) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CalculatedPoints) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CalculatedPoints) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CalculatedPoints) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPoints) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CalculatedPoints) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CalculatedPoints) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CalculatedPoints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculatedPoints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalculatedPoint) {
		toSerialize["calculatedPoint"] = o.CalculatedPoint
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCalculatedPoints struct {
	value *CalculatedPoints
	isSet bool
}

func (v NullableCalculatedPoints) Get() *CalculatedPoints {
	return v.value
}

func (v *NullableCalculatedPoints) Set(val *CalculatedPoints) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedPoints) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedPoints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedPoints(val *CalculatedPoints) *NullableCalculatedPoints {
	return &NullableCalculatedPoints{value: val, isSet: true}
}

func (v NullableCalculatedPoints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedPoints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


