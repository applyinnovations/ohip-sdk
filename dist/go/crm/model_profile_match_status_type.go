/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// ProfileMatchStatusType Status of the match. It can be one of these 3 options: Match Points Computed, Do Not Merge, Can Not Merge.
type ProfileMatchStatusType string

// List of profileMatchStatusType
const (
	PROFILEMATCHSTATUSTYPE_MPC ProfileMatchStatusType = "MPC"
	PROFILEMATCHSTATUSTYPE_DNM ProfileMatchStatusType = "DNM"
	PROFILEMATCHSTATUSTYPE_CNM ProfileMatchStatusType = "CNM"
)

// All allowed values of ProfileMatchStatusType enum
var AllowedProfileMatchStatusTypeEnumValues = []ProfileMatchStatusType{
	"MPC",
	"DNM",
	"CNM",
}

func (v *ProfileMatchStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileMatchStatusType(value)
	for _, existing := range AllowedProfileMatchStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileMatchStatusType", value)
}

// NewProfileMatchStatusTypeFromValue returns a pointer to a valid ProfileMatchStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileMatchStatusTypeFromValue(v string) (*ProfileMatchStatusType, error) {
	ev := ProfileMatchStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileMatchStatusType: valid values are %v", v, AllowedProfileMatchStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileMatchStatusType) IsValid() bool {
	for _, existing := range AllowedProfileMatchStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to profileMatchStatusType value
func (v ProfileMatchStatusType) Ptr() *ProfileMatchStatusType {
	return &v
}

type NullableProfileMatchStatusType struct {
	value *ProfileMatchStatusType
	isSet bool
}

func (v NullableProfileMatchStatusType) Get() *ProfileMatchStatusType {
	return v.value
}

func (v *NullableProfileMatchStatusType) Set(val *ProfileMatchStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileMatchStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileMatchStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileMatchStatusType(val *ProfileMatchStatusType) *NullableProfileMatchStatusType {
	return &NullableProfileMatchStatusType{value: val, isSet: true}
}

func (v NullableProfileMatchStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileMatchStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

