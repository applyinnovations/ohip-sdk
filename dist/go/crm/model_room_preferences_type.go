/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the RoomPreferencesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomPreferencesType{}

// RoomPreferencesType Indicates the guest's room preferences.
type RoomPreferencesType struct {
	// Indicates if the member requires accessible rooms.
	Accessible *bool `json:"accessible,omitempty"`
	// Indicates the bed type preference.
	BedType *string `json:"bedType,omitempty"`
	// Indicates the beverage preference.
	Beverage *string `json:"beverage,omitempty"`
	// Indicates the floor type preference.
	Floor *string `json:"floor,omitempty"`
	// Indicates guest preferred interests.
	Interests *string `json:"interests,omitempty"`
	// Indicates the newspaper preference.
	Newspapers *string `json:"newspapers,omitempty"`
	// Indicates the pillow type preference.
	Pillow *string `json:"pillow,omitempty"`
	// Indicates which room preference takes priority, bed type or smoking type.
	Precedence *string `json:"precedence,omitempty"`
	// Indicates the room amenities requested.
	RoomAmenities *string `json:"roomAmenities,omitempty"`
	// Indicates the smoking preference.
	Smoking *string `json:"smoking,omitempty"`
	// Indicates the snack preference.
	Snack *string `json:"snack,omitempty"`
}

// NewRoomPreferencesType instantiates a new RoomPreferencesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomPreferencesType() *RoomPreferencesType {
	this := RoomPreferencesType{}
	return &this
}

// NewRoomPreferencesTypeWithDefaults instantiates a new RoomPreferencesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomPreferencesTypeWithDefaults() *RoomPreferencesType {
	this := RoomPreferencesType{}
	return &this
}

// GetAccessible returns the Accessible field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetAccessible() bool {
	if o == nil || IsNil(o.Accessible) {
		var ret bool
		return ret
	}
	return *o.Accessible
}

// GetAccessibleOk returns a tuple with the Accessible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetAccessibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Accessible) {
		return nil, false
	}
	return o.Accessible, true
}

// HasAccessible returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasAccessible() bool {
	if o != nil && !IsNil(o.Accessible) {
		return true
	}

	return false
}

// SetAccessible gets a reference to the given bool and assigns it to the Accessible field.
func (o *RoomPreferencesType) SetAccessible(v bool) {
	o.Accessible = &v
}

// GetBedType returns the BedType field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetBedType() string {
	if o == nil || IsNil(o.BedType) {
		var ret string
		return ret
	}
	return *o.BedType
}

// GetBedTypeOk returns a tuple with the BedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetBedTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BedType) {
		return nil, false
	}
	return o.BedType, true
}

// HasBedType returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasBedType() bool {
	if o != nil && !IsNil(o.BedType) {
		return true
	}

	return false
}

// SetBedType gets a reference to the given string and assigns it to the BedType field.
func (o *RoomPreferencesType) SetBedType(v string) {
	o.BedType = &v
}

// GetBeverage returns the Beverage field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetBeverage() string {
	if o == nil || IsNil(o.Beverage) {
		var ret string
		return ret
	}
	return *o.Beverage
}

// GetBeverageOk returns a tuple with the Beverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetBeverageOk() (*string, bool) {
	if o == nil || IsNil(o.Beverage) {
		return nil, false
	}
	return o.Beverage, true
}

// HasBeverage returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasBeverage() bool {
	if o != nil && !IsNil(o.Beverage) {
		return true
	}

	return false
}

// SetBeverage gets a reference to the given string and assigns it to the Beverage field.
func (o *RoomPreferencesType) SetBeverage(v string) {
	o.Beverage = &v
}

// GetFloor returns the Floor field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetFloor() string {
	if o == nil || IsNil(o.Floor) {
		var ret string
		return ret
	}
	return *o.Floor
}

// GetFloorOk returns a tuple with the Floor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetFloorOk() (*string, bool) {
	if o == nil || IsNil(o.Floor) {
		return nil, false
	}
	return o.Floor, true
}

// HasFloor returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasFloor() bool {
	if o != nil && !IsNil(o.Floor) {
		return true
	}

	return false
}

// SetFloor gets a reference to the given string and assigns it to the Floor field.
func (o *RoomPreferencesType) SetFloor(v string) {
	o.Floor = &v
}

// GetInterests returns the Interests field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetInterests() string {
	if o == nil || IsNil(o.Interests) {
		var ret string
		return ret
	}
	return *o.Interests
}

// GetInterestsOk returns a tuple with the Interests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetInterestsOk() (*string, bool) {
	if o == nil || IsNil(o.Interests) {
		return nil, false
	}
	return o.Interests, true
}

// HasInterests returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasInterests() bool {
	if o != nil && !IsNil(o.Interests) {
		return true
	}

	return false
}

// SetInterests gets a reference to the given string and assigns it to the Interests field.
func (o *RoomPreferencesType) SetInterests(v string) {
	o.Interests = &v
}

// GetNewspapers returns the Newspapers field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetNewspapers() string {
	if o == nil || IsNil(o.Newspapers) {
		var ret string
		return ret
	}
	return *o.Newspapers
}

// GetNewspapersOk returns a tuple with the Newspapers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetNewspapersOk() (*string, bool) {
	if o == nil || IsNil(o.Newspapers) {
		return nil, false
	}
	return o.Newspapers, true
}

// HasNewspapers returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasNewspapers() bool {
	if o != nil && !IsNil(o.Newspapers) {
		return true
	}

	return false
}

// SetNewspapers gets a reference to the given string and assigns it to the Newspapers field.
func (o *RoomPreferencesType) SetNewspapers(v string) {
	o.Newspapers = &v
}

// GetPillow returns the Pillow field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetPillow() string {
	if o == nil || IsNil(o.Pillow) {
		var ret string
		return ret
	}
	return *o.Pillow
}

// GetPillowOk returns a tuple with the Pillow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetPillowOk() (*string, bool) {
	if o == nil || IsNil(o.Pillow) {
		return nil, false
	}
	return o.Pillow, true
}

// HasPillow returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasPillow() bool {
	if o != nil && !IsNil(o.Pillow) {
		return true
	}

	return false
}

// SetPillow gets a reference to the given string and assigns it to the Pillow field.
func (o *RoomPreferencesType) SetPillow(v string) {
	o.Pillow = &v
}

// GetPrecedence returns the Precedence field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetPrecedence() string {
	if o == nil || IsNil(o.Precedence) {
		var ret string
		return ret
	}
	return *o.Precedence
}

// GetPrecedenceOk returns a tuple with the Precedence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetPrecedenceOk() (*string, bool) {
	if o == nil || IsNil(o.Precedence) {
		return nil, false
	}
	return o.Precedence, true
}

// HasPrecedence returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasPrecedence() bool {
	if o != nil && !IsNil(o.Precedence) {
		return true
	}

	return false
}

// SetPrecedence gets a reference to the given string and assigns it to the Precedence field.
func (o *RoomPreferencesType) SetPrecedence(v string) {
	o.Precedence = &v
}

// GetRoomAmenities returns the RoomAmenities field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetRoomAmenities() string {
	if o == nil || IsNil(o.RoomAmenities) {
		var ret string
		return ret
	}
	return *o.RoomAmenities
}

// GetRoomAmenitiesOk returns a tuple with the RoomAmenities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetRoomAmenitiesOk() (*string, bool) {
	if o == nil || IsNil(o.RoomAmenities) {
		return nil, false
	}
	return o.RoomAmenities, true
}

// HasRoomAmenities returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasRoomAmenities() bool {
	if o != nil && !IsNil(o.RoomAmenities) {
		return true
	}

	return false
}

// SetRoomAmenities gets a reference to the given string and assigns it to the RoomAmenities field.
func (o *RoomPreferencesType) SetRoomAmenities(v string) {
	o.RoomAmenities = &v
}

// GetSmoking returns the Smoking field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetSmoking() string {
	if o == nil || IsNil(o.Smoking) {
		var ret string
		return ret
	}
	return *o.Smoking
}

// GetSmokingOk returns a tuple with the Smoking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetSmokingOk() (*string, bool) {
	if o == nil || IsNil(o.Smoking) {
		return nil, false
	}
	return o.Smoking, true
}

// HasSmoking returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasSmoking() bool {
	if o != nil && !IsNil(o.Smoking) {
		return true
	}

	return false
}

// SetSmoking gets a reference to the given string and assigns it to the Smoking field.
func (o *RoomPreferencesType) SetSmoking(v string) {
	o.Smoking = &v
}

// GetSnack returns the Snack field value if set, zero value otherwise.
func (o *RoomPreferencesType) GetSnack() string {
	if o == nil || IsNil(o.Snack) {
		var ret string
		return ret
	}
	return *o.Snack
}

// GetSnackOk returns a tuple with the Snack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPreferencesType) GetSnackOk() (*string, bool) {
	if o == nil || IsNil(o.Snack) {
		return nil, false
	}
	return o.Snack, true
}

// HasSnack returns a boolean if a field has been set.
func (o *RoomPreferencesType) HasSnack() bool {
	if o != nil && !IsNil(o.Snack) {
		return true
	}

	return false
}

// SetSnack gets a reference to the given string and assigns it to the Snack field.
func (o *RoomPreferencesType) SetSnack(v string) {
	o.Snack = &v
}

func (o RoomPreferencesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomPreferencesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accessible) {
		toSerialize["accessible"] = o.Accessible
	}
	if !IsNil(o.BedType) {
		toSerialize["bedType"] = o.BedType
	}
	if !IsNil(o.Beverage) {
		toSerialize["beverage"] = o.Beverage
	}
	if !IsNil(o.Floor) {
		toSerialize["floor"] = o.Floor
	}
	if !IsNil(o.Interests) {
		toSerialize["interests"] = o.Interests
	}
	if !IsNil(o.Newspapers) {
		toSerialize["newspapers"] = o.Newspapers
	}
	if !IsNil(o.Pillow) {
		toSerialize["pillow"] = o.Pillow
	}
	if !IsNil(o.Precedence) {
		toSerialize["precedence"] = o.Precedence
	}
	if !IsNil(o.RoomAmenities) {
		toSerialize["roomAmenities"] = o.RoomAmenities
	}
	if !IsNil(o.Smoking) {
		toSerialize["smoking"] = o.Smoking
	}
	if !IsNil(o.Snack) {
		toSerialize["snack"] = o.Snack
	}
	return toSerialize, nil
}

type NullableRoomPreferencesType struct {
	value *RoomPreferencesType
	isSet bool
}

func (v NullableRoomPreferencesType) Get() *RoomPreferencesType {
	return v.value
}

func (v *NullableRoomPreferencesType) Set(val *RoomPreferencesType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomPreferencesType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomPreferencesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomPreferencesType(val *RoomPreferencesType) *NullableRoomPreferencesType {
	return &NullableRoomPreferencesType{value: val, isSet: true}
}

func (v NullableRoomPreferencesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomPreferencesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


