/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// ECertificateIssueSourceType Indicates that OPERA E-Certificate is issued by external system.
type ECertificateIssueSourceType string

// List of eCertificateIssueSourceType
const (
	ECERTIFICATEISSUESOURCETYPE_OPERA ECertificateIssueSourceType = "Opera"
	ECERTIFICATEISSUESOURCETYPE_WEB ECertificateIssueSourceType = "Web"
	ECERTIFICATEISSUESOURCETYPE_INTERFACE ECertificateIssueSourceType = "Interface"
)

// All allowed values of ECertificateIssueSourceType enum
var AllowedECertificateIssueSourceTypeEnumValues = []ECertificateIssueSourceType{
	"Opera",
	"Web",
	"Interface",
}

func (v *ECertificateIssueSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ECertificateIssueSourceType(value)
	for _, existing := range AllowedECertificateIssueSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ECertificateIssueSourceType", value)
}

// NewECertificateIssueSourceTypeFromValue returns a pointer to a valid ECertificateIssueSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewECertificateIssueSourceTypeFromValue(v string) (*ECertificateIssueSourceType, error) {
	ev := ECertificateIssueSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ECertificateIssueSourceType: valid values are %v", v, AllowedECertificateIssueSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ECertificateIssueSourceType) IsValid() bool {
	for _, existing := range AllowedECertificateIssueSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to eCertificateIssueSourceType value
func (v ECertificateIssueSourceType) Ptr() *ECertificateIssueSourceType {
	return &v
}

type NullableECertificateIssueSourceType struct {
	value *ECertificateIssueSourceType
	isSet bool
}

func (v NullableECertificateIssueSourceType) Get() *ECertificateIssueSourceType {
	return v.value
}

func (v *NullableECertificateIssueSourceType) Set(val *ECertificateIssueSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableECertificateIssueSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableECertificateIssueSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECertificateIssueSourceType(val *ECertificateIssueSourceType) *NullableECertificateIssueSourceType {
	return &NullableECertificateIssueSourceType{value: val, isSet: true}
}

func (v NullableECertificateIssueSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECertificateIssueSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

