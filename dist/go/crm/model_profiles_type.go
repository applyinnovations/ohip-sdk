/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProfilesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfilesType{}

// ProfilesType A collection of Profile objects or Unique IDs of Profiles.
type ProfilesType struct {
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
	// A collection of Profiles or Unique IDs of Profiles.
	ProfileInfo []ProfilesTypeProfileInfoInner `json:"profileInfo,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// NewProfilesType instantiates a new ProfilesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfilesType() *ProfilesType {
	this := ProfilesType{}
	return &this
}

// NewProfilesTypeWithDefaults instantiates a new ProfilesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfilesTypeWithDefaults() *ProfilesType {
	this := ProfilesType{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ProfilesType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ProfilesType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ProfilesType) SetCount(v int32) {
	o.Count = &v
}

// GetProfileInfo returns the ProfileInfo field value if set, zero value otherwise.
func (o *ProfilesType) GetProfileInfo() []ProfilesTypeProfileInfoInner {
	if o == nil || IsNil(o.ProfileInfo) {
		var ret []ProfilesTypeProfileInfoInner
		return ret
	}
	return o.ProfileInfo
}

// GetProfileInfoOk returns a tuple with the ProfileInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesType) GetProfileInfoOk() ([]ProfilesTypeProfileInfoInner, bool) {
	if o == nil || IsNil(o.ProfileInfo) {
		return nil, false
	}
	return o.ProfileInfo, true
}

// HasProfileInfo returns a boolean if a field has been set.
func (o *ProfilesType) HasProfileInfo() bool {
	if o != nil && !IsNil(o.ProfileInfo) {
		return true
	}

	return false
}

// SetProfileInfo gets a reference to the given []ProfilesTypeProfileInfoInner and assigns it to the ProfileInfo field.
func (o *ProfilesType) SetProfileInfo(v []ProfilesTypeProfileInfoInner) {
	o.ProfileInfo = v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *ProfilesType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *ProfilesType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *ProfilesType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

func (o ProfilesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfilesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.ProfileInfo) {
		toSerialize["profileInfo"] = o.ProfileInfo
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableProfilesType struct {
	value *ProfilesType
	isSet bool
}

func (v NullableProfilesType) Get() *ProfilesType {
	return v.value
}

func (v *NullableProfilesType) Set(val *ProfilesType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfilesType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfilesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfilesType(val *ProfilesType) *NullableProfilesType {
	return &NullableProfilesType{value: val, isSet: true}
}

func (v NullableProfilesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfilesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


