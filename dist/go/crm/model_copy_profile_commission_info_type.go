/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the CopyProfileCommissionInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyProfileCommissionInfoType{}

// CopyProfileCommissionInfoType Contains base info to determine profile commission bank account and code.
type CopyProfileCommissionInfoType struct {
	BankAccountId *UniqueIDType `json:"bankAccountId,omitempty"`
	CommissionCode *CodeDescriptionType `json:"commissionCode,omitempty"`
	// Hotel code from which the profile bank account and code belongs to
	HotelId *string `json:"hotelId,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	TargetHotelCodes []string `json:"targetHotelCodes,omitempty"`
	// Used in CRUD operations. When set to true, proceed validating pending commissions
	ValidatePending *bool `json:"validatePending,omitempty"`
}

// NewCopyProfileCommissionInfoType instantiates a new CopyProfileCommissionInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyProfileCommissionInfoType() *CopyProfileCommissionInfoType {
	this := CopyProfileCommissionInfoType{}
	return &this
}

// NewCopyProfileCommissionInfoTypeWithDefaults instantiates a new CopyProfileCommissionInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyProfileCommissionInfoTypeWithDefaults() *CopyProfileCommissionInfoType {
	this := CopyProfileCommissionInfoType{}
	return &this
}

// GetBankAccountId returns the BankAccountId field value if set, zero value otherwise.
func (o *CopyProfileCommissionInfoType) GetBankAccountId() UniqueIDType {
	if o == nil || IsNil(o.BankAccountId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BankAccountId
}

// GetBankAccountIdOk returns a tuple with the BankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyProfileCommissionInfoType) GetBankAccountIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BankAccountId) {
		return nil, false
	}
	return o.BankAccountId, true
}

// HasBankAccountId returns a boolean if a field has been set.
func (o *CopyProfileCommissionInfoType) HasBankAccountId() bool {
	if o != nil && !IsNil(o.BankAccountId) {
		return true
	}

	return false
}

// SetBankAccountId gets a reference to the given UniqueIDType and assigns it to the BankAccountId field.
func (o *CopyProfileCommissionInfoType) SetBankAccountId(v UniqueIDType) {
	o.BankAccountId = &v
}

// GetCommissionCode returns the CommissionCode field value if set, zero value otherwise.
func (o *CopyProfileCommissionInfoType) GetCommissionCode() CodeDescriptionType {
	if o == nil || IsNil(o.CommissionCode) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.CommissionCode
}

// GetCommissionCodeOk returns a tuple with the CommissionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyProfileCommissionInfoType) GetCommissionCodeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.CommissionCode) {
		return nil, false
	}
	return o.CommissionCode, true
}

// HasCommissionCode returns a boolean if a field has been set.
func (o *CopyProfileCommissionInfoType) HasCommissionCode() bool {
	if o != nil && !IsNil(o.CommissionCode) {
		return true
	}

	return false
}

// SetCommissionCode gets a reference to the given CodeDescriptionType and assigns it to the CommissionCode field.
func (o *CopyProfileCommissionInfoType) SetCommissionCode(v CodeDescriptionType) {
	o.CommissionCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyProfileCommissionInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyProfileCommissionInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyProfileCommissionInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyProfileCommissionInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *CopyProfileCommissionInfoType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyProfileCommissionInfoType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *CopyProfileCommissionInfoType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *CopyProfileCommissionInfoType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetTargetHotelCodes returns the TargetHotelCodes field value if set, zero value otherwise.
func (o *CopyProfileCommissionInfoType) GetTargetHotelCodes() []string {
	if o == nil || IsNil(o.TargetHotelCodes) {
		var ret []string
		return ret
	}
	return o.TargetHotelCodes
}

// GetTargetHotelCodesOk returns a tuple with the TargetHotelCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyProfileCommissionInfoType) GetTargetHotelCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.TargetHotelCodes) {
		return nil, false
	}
	return o.TargetHotelCodes, true
}

// HasTargetHotelCodes returns a boolean if a field has been set.
func (o *CopyProfileCommissionInfoType) HasTargetHotelCodes() bool {
	if o != nil && !IsNil(o.TargetHotelCodes) {
		return true
	}

	return false
}

// SetTargetHotelCodes gets a reference to the given []string and assigns it to the TargetHotelCodes field.
func (o *CopyProfileCommissionInfoType) SetTargetHotelCodes(v []string) {
	o.TargetHotelCodes = v
}

// GetValidatePending returns the ValidatePending field value if set, zero value otherwise.
func (o *CopyProfileCommissionInfoType) GetValidatePending() bool {
	if o == nil || IsNil(o.ValidatePending) {
		var ret bool
		return ret
	}
	return *o.ValidatePending
}

// GetValidatePendingOk returns a tuple with the ValidatePending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyProfileCommissionInfoType) GetValidatePendingOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidatePending) {
		return nil, false
	}
	return o.ValidatePending, true
}

// HasValidatePending returns a boolean if a field has been set.
func (o *CopyProfileCommissionInfoType) HasValidatePending() bool {
	if o != nil && !IsNil(o.ValidatePending) {
		return true
	}

	return false
}

// SetValidatePending gets a reference to the given bool and assigns it to the ValidatePending field.
func (o *CopyProfileCommissionInfoType) SetValidatePending(v bool) {
	o.ValidatePending = &v
}

func (o CopyProfileCommissionInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyProfileCommissionInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAccountId) {
		toSerialize["bankAccountId"] = o.BankAccountId
	}
	if !IsNil(o.CommissionCode) {
		toSerialize["commissionCode"] = o.CommissionCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.TargetHotelCodes) {
		toSerialize["targetHotelCodes"] = o.TargetHotelCodes
	}
	if !IsNil(o.ValidatePending) {
		toSerialize["validatePending"] = o.ValidatePending
	}
	return toSerialize, nil
}

type NullableCopyProfileCommissionInfoType struct {
	value *CopyProfileCommissionInfoType
	isSet bool
}

func (v NullableCopyProfileCommissionInfoType) Get() *CopyProfileCommissionInfoType {
	return v.value
}

func (v *NullableCopyProfileCommissionInfoType) Set(val *CopyProfileCommissionInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyProfileCommissionInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyProfileCommissionInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyProfileCommissionInfoType(val *CopyProfileCommissionInfoType) *NullableCopyProfileCommissionInfoType {
	return &NullableCopyProfileCommissionInfoType{value: val, isSet: true}
}

func (v NullableCopyProfileCommissionInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyProfileCommissionInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


