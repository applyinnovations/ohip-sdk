/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the CalculatedPointType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalculatedPointType{}

// CalculatedPointType Information related to a Calculated Points.
type CalculatedPointType struct {
	// Indicates the billing group the points belong to.
	BillingGroup *string `json:"billingGroup,omitempty"`
	CostPerNight *CurrencyAmountType `json:"costPerNight,omitempty"`
	// Indicates the total award/tier points generated.
	Points *float32 `json:"points,omitempty"`
	// Indicates the validated rules to generate points.
	Rule *string `json:"rule,omitempty"`
	// Indicates rule code for the rule.
	RuleCode *string `json:"ruleCode,omitempty"`
	Type *RulePointsTypeType `json:"type,omitempty"`
}

// NewCalculatedPointType instantiates a new CalculatedPointType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatedPointType() *CalculatedPointType {
	this := CalculatedPointType{}
	return &this
}

// NewCalculatedPointTypeWithDefaults instantiates a new CalculatedPointType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatedPointTypeWithDefaults() *CalculatedPointType {
	this := CalculatedPointType{}
	return &this
}

// GetBillingGroup returns the BillingGroup field value if set, zero value otherwise.
func (o *CalculatedPointType) GetBillingGroup() string {
	if o == nil || IsNil(o.BillingGroup) {
		var ret string
		return ret
	}
	return *o.BillingGroup
}

// GetBillingGroupOk returns a tuple with the BillingGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPointType) GetBillingGroupOk() (*string, bool) {
	if o == nil || IsNil(o.BillingGroup) {
		return nil, false
	}
	return o.BillingGroup, true
}

// HasBillingGroup returns a boolean if a field has been set.
func (o *CalculatedPointType) HasBillingGroup() bool {
	if o != nil && !IsNil(o.BillingGroup) {
		return true
	}

	return false
}

// SetBillingGroup gets a reference to the given string and assigns it to the BillingGroup field.
func (o *CalculatedPointType) SetBillingGroup(v string) {
	o.BillingGroup = &v
}

// GetCostPerNight returns the CostPerNight field value if set, zero value otherwise.
func (o *CalculatedPointType) GetCostPerNight() CurrencyAmountType {
	if o == nil || IsNil(o.CostPerNight) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CostPerNight
}

// GetCostPerNightOk returns a tuple with the CostPerNight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPointType) GetCostPerNightOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CostPerNight) {
		return nil, false
	}
	return o.CostPerNight, true
}

// HasCostPerNight returns a boolean if a field has been set.
func (o *CalculatedPointType) HasCostPerNight() bool {
	if o != nil && !IsNil(o.CostPerNight) {
		return true
	}

	return false
}

// SetCostPerNight gets a reference to the given CurrencyAmountType and assigns it to the CostPerNight field.
func (o *CalculatedPointType) SetCostPerNight(v CurrencyAmountType) {
	o.CostPerNight = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *CalculatedPointType) GetPoints() float32 {
	if o == nil || IsNil(o.Points) {
		var ret float32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPointType) GetPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *CalculatedPointType) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float32 and assigns it to the Points field.
func (o *CalculatedPointType) SetPoints(v float32) {
	o.Points = &v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *CalculatedPointType) GetRule() string {
	if o == nil || IsNil(o.Rule) {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPointType) GetRuleOk() (*string, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *CalculatedPointType) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *CalculatedPointType) SetRule(v string) {
	o.Rule = &v
}

// GetRuleCode returns the RuleCode field value if set, zero value otherwise.
func (o *CalculatedPointType) GetRuleCode() string {
	if o == nil || IsNil(o.RuleCode) {
		var ret string
		return ret
	}
	return *o.RuleCode
}

// GetRuleCodeOk returns a tuple with the RuleCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPointType) GetRuleCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RuleCode) {
		return nil, false
	}
	return o.RuleCode, true
}

// HasRuleCode returns a boolean if a field has been set.
func (o *CalculatedPointType) HasRuleCode() bool {
	if o != nil && !IsNil(o.RuleCode) {
		return true
	}

	return false
}

// SetRuleCode gets a reference to the given string and assigns it to the RuleCode field.
func (o *CalculatedPointType) SetRuleCode(v string) {
	o.RuleCode = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CalculatedPointType) GetType() RulePointsTypeType {
	if o == nil || IsNil(o.Type) {
		var ret RulePointsTypeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedPointType) GetTypeOk() (*RulePointsTypeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CalculatedPointType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RulePointsTypeType and assigns it to the Type field.
func (o *CalculatedPointType) SetType(v RulePointsTypeType) {
	o.Type = &v
}

func (o CalculatedPointType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalculatedPointType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BillingGroup) {
		toSerialize["billingGroup"] = o.BillingGroup
	}
	if !IsNil(o.CostPerNight) {
		toSerialize["costPerNight"] = o.CostPerNight
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.RuleCode) {
		toSerialize["ruleCode"] = o.RuleCode
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCalculatedPointType struct {
	value *CalculatedPointType
	isSet bool
}

func (v NullableCalculatedPointType) Get() *CalculatedPointType {
	return v.value
}

func (v *NullableCalculatedPointType) Set(val *CalculatedPointType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedPointType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedPointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedPointType(val *CalculatedPointType) *NullableCalculatedPointType {
	return &NullableCalculatedPointType{value: val, isSet: true}
}

func (v NullableCalculatedPointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedPointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


