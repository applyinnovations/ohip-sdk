/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MembershipOtherAwardInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipOtherAwardInfoType{}

// MembershipOtherAwardInfoType Information about the OTHER type Award and profile membership. OTHER type awards can be redeemed based on the points available with a particular member.
type MembershipOtherAwardInfoType struct {
	OtherInfo *OtherAwardAvailabilityType `json:"otherInfo,omitempty"`
	// Unique Membership ID.
	MembershipId *float32 `json:"membershipId,omitempty"`
	// The card number associated with the membership.
	MembershipNumber *string `json:"membershipNumber,omitempty"`
	// The type of the membership.
	MembershipType *string `json:"membershipType,omitempty"`
}

// NewMembershipOtherAwardInfoType instantiates a new MembershipOtherAwardInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipOtherAwardInfoType() *MembershipOtherAwardInfoType {
	this := MembershipOtherAwardInfoType{}
	return &this
}

// NewMembershipOtherAwardInfoTypeWithDefaults instantiates a new MembershipOtherAwardInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipOtherAwardInfoTypeWithDefaults() *MembershipOtherAwardInfoType {
	this := MembershipOtherAwardInfoType{}
	return &this
}

// GetOtherInfo returns the OtherInfo field value if set, zero value otherwise.
func (o *MembershipOtherAwardInfoType) GetOtherInfo() OtherAwardAvailabilityType {
	if o == nil || IsNil(o.OtherInfo) {
		var ret OtherAwardAvailabilityType
		return ret
	}
	return *o.OtherInfo
}

// GetOtherInfoOk returns a tuple with the OtherInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipOtherAwardInfoType) GetOtherInfoOk() (*OtherAwardAvailabilityType, bool) {
	if o == nil || IsNil(o.OtherInfo) {
		return nil, false
	}
	return o.OtherInfo, true
}

// HasOtherInfo returns a boolean if a field has been set.
func (o *MembershipOtherAwardInfoType) HasOtherInfo() bool {
	if o != nil && !IsNil(o.OtherInfo) {
		return true
	}

	return false
}

// SetOtherInfo gets a reference to the given OtherAwardAvailabilityType and assigns it to the OtherInfo field.
func (o *MembershipOtherAwardInfoType) SetOtherInfo(v OtherAwardAvailabilityType) {
	o.OtherInfo = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *MembershipOtherAwardInfoType) GetMembershipId() float32 {
	if o == nil || IsNil(o.MembershipId) {
		var ret float32
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipOtherAwardInfoType) GetMembershipIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *MembershipOtherAwardInfoType) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given float32 and assigns it to the MembershipId field.
func (o *MembershipOtherAwardInfoType) SetMembershipId(v float32) {
	o.MembershipId = &v
}

// GetMembershipNumber returns the MembershipNumber field value if set, zero value otherwise.
func (o *MembershipOtherAwardInfoType) GetMembershipNumber() string {
	if o == nil || IsNil(o.MembershipNumber) {
		var ret string
		return ret
	}
	return *o.MembershipNumber
}

// GetMembershipNumberOk returns a tuple with the MembershipNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipOtherAwardInfoType) GetMembershipNumberOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipNumber) {
		return nil, false
	}
	return o.MembershipNumber, true
}

// HasMembershipNumber returns a boolean if a field has been set.
func (o *MembershipOtherAwardInfoType) HasMembershipNumber() bool {
	if o != nil && !IsNil(o.MembershipNumber) {
		return true
	}

	return false
}

// SetMembershipNumber gets a reference to the given string and assigns it to the MembershipNumber field.
func (o *MembershipOtherAwardInfoType) SetMembershipNumber(v string) {
	o.MembershipNumber = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipOtherAwardInfoType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipOtherAwardInfoType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipOtherAwardInfoType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipOtherAwardInfoType) SetMembershipType(v string) {
	o.MembershipType = &v
}

func (o MembershipOtherAwardInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipOtherAwardInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OtherInfo) {
		toSerialize["otherInfo"] = o.OtherInfo
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.MembershipNumber) {
		toSerialize["membershipNumber"] = o.MembershipNumber
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	return toSerialize, nil
}

type NullableMembershipOtherAwardInfoType struct {
	value *MembershipOtherAwardInfoType
	isSet bool
}

func (v NullableMembershipOtherAwardInfoType) Get() *MembershipOtherAwardInfoType {
	return v.value
}

func (v *NullableMembershipOtherAwardInfoType) Set(val *MembershipOtherAwardInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipOtherAwardInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipOtherAwardInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipOtherAwardInfoType(val *MembershipOtherAwardInfoType) *NullableMembershipOtherAwardInfoType {
	return &NullableMembershipOtherAwardInfoType{value: val, isSet: true}
}

func (v NullableMembershipOtherAwardInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipOtherAwardInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


