/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the DuplicateExternalSubscriptionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DuplicateExternalSubscriptionsType{}

// DuplicateExternalSubscriptionsType Contains subscription details about an OPERA Profile that is linked to multiple external profiles within the same external system.
type DuplicateExternalSubscriptionsType struct {
	ProfileId *ProfileId `json:"profileId,omitempty"`
	// Code identifying the external database record which is linked to external systems.
	DatabaseId *string `json:"databaseId,omitempty"`
	// Details of the OPERA Profile subscription to external system
	ProfileSubscriptions []ProfileSubscriptionType `json:"profileSubscriptions,omitempty"`
}

// NewDuplicateExternalSubscriptionsType instantiates a new DuplicateExternalSubscriptionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDuplicateExternalSubscriptionsType() *DuplicateExternalSubscriptionsType {
	this := DuplicateExternalSubscriptionsType{}
	return &this
}

// NewDuplicateExternalSubscriptionsTypeWithDefaults instantiates a new DuplicateExternalSubscriptionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDuplicateExternalSubscriptionsTypeWithDefaults() *DuplicateExternalSubscriptionsType {
	this := DuplicateExternalSubscriptionsType{}
	return &this
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *DuplicateExternalSubscriptionsType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateExternalSubscriptionsType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *DuplicateExternalSubscriptionsType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *DuplicateExternalSubscriptionsType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetDatabaseId returns the DatabaseId field value if set, zero value otherwise.
func (o *DuplicateExternalSubscriptionsType) GetDatabaseId() string {
	if o == nil || IsNil(o.DatabaseId) {
		var ret string
		return ret
	}
	return *o.DatabaseId
}

// GetDatabaseIdOk returns a tuple with the DatabaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateExternalSubscriptionsType) GetDatabaseIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatabaseId) {
		return nil, false
	}
	return o.DatabaseId, true
}

// HasDatabaseId returns a boolean if a field has been set.
func (o *DuplicateExternalSubscriptionsType) HasDatabaseId() bool {
	if o != nil && !IsNil(o.DatabaseId) {
		return true
	}

	return false
}

// SetDatabaseId gets a reference to the given string and assigns it to the DatabaseId field.
func (o *DuplicateExternalSubscriptionsType) SetDatabaseId(v string) {
	o.DatabaseId = &v
}

// GetProfileSubscriptions returns the ProfileSubscriptions field value if set, zero value otherwise.
func (o *DuplicateExternalSubscriptionsType) GetProfileSubscriptions() []ProfileSubscriptionType {
	if o == nil || IsNil(o.ProfileSubscriptions) {
		var ret []ProfileSubscriptionType
		return ret
	}
	return o.ProfileSubscriptions
}

// GetProfileSubscriptionsOk returns a tuple with the ProfileSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DuplicateExternalSubscriptionsType) GetProfileSubscriptionsOk() ([]ProfileSubscriptionType, bool) {
	if o == nil || IsNil(o.ProfileSubscriptions) {
		return nil, false
	}
	return o.ProfileSubscriptions, true
}

// HasProfileSubscriptions returns a boolean if a field has been set.
func (o *DuplicateExternalSubscriptionsType) HasProfileSubscriptions() bool {
	if o != nil && !IsNil(o.ProfileSubscriptions) {
		return true
	}

	return false
}

// SetProfileSubscriptions gets a reference to the given []ProfileSubscriptionType and assigns it to the ProfileSubscriptions field.
func (o *DuplicateExternalSubscriptionsType) SetProfileSubscriptions(v []ProfileSubscriptionType) {
	o.ProfileSubscriptions = v
}

func (o DuplicateExternalSubscriptionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DuplicateExternalSubscriptionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.DatabaseId) {
		toSerialize["databaseId"] = o.DatabaseId
	}
	if !IsNil(o.ProfileSubscriptions) {
		toSerialize["profileSubscriptions"] = o.ProfileSubscriptions
	}
	return toSerialize, nil
}

type NullableDuplicateExternalSubscriptionsType struct {
	value *DuplicateExternalSubscriptionsType
	isSet bool
}

func (v NullableDuplicateExternalSubscriptionsType) Get() *DuplicateExternalSubscriptionsType {
	return v.value
}

func (v *NullableDuplicateExternalSubscriptionsType) Set(val *DuplicateExternalSubscriptionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableDuplicateExternalSubscriptionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableDuplicateExternalSubscriptionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDuplicateExternalSubscriptionsType(val *DuplicateExternalSubscriptionsType) *NullableDuplicateExternalSubscriptionsType {
	return &NullableDuplicateExternalSubscriptionsType{value: val, isSet: true}
}

func (v NullableDuplicateExternalSubscriptionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDuplicateExternalSubscriptionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


