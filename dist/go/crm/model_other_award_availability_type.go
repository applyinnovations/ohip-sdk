/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the OtherAwardAvailabilityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OtherAwardAvailabilityType{}

// OtherAwardAvailabilityType Information related to the Other type Award.
type OtherAwardAvailabilityType struct {
	// Unique code that identifies this award.
	AwardType *string `json:"awardType,omitempty"`
	// Descriptive name of the award.
	ShortDescription *string `json:"shortDescription,omitempty"`
	// The actual currency value of the award.
	AwardValue *float32 `json:"awardValue,omitempty"`
	// The number of points requried to redeem this award.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
}

// NewOtherAwardAvailabilityType instantiates a new OtherAwardAvailabilityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtherAwardAvailabilityType() *OtherAwardAvailabilityType {
	this := OtherAwardAvailabilityType{}
	return &this
}

// NewOtherAwardAvailabilityTypeWithDefaults instantiates a new OtherAwardAvailabilityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtherAwardAvailabilityTypeWithDefaults() *OtherAwardAvailabilityType {
	this := OtherAwardAvailabilityType{}
	return &this
}

// GetAwardType returns the AwardType field value if set, zero value otherwise.
func (o *OtherAwardAvailabilityType) GetAwardType() string {
	if o == nil || IsNil(o.AwardType) {
		var ret string
		return ret
	}
	return *o.AwardType
}

// GetAwardTypeOk returns a tuple with the AwardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAwardAvailabilityType) GetAwardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardType) {
		return nil, false
	}
	return o.AwardType, true
}

// HasAwardType returns a boolean if a field has been set.
func (o *OtherAwardAvailabilityType) HasAwardType() bool {
	if o != nil && !IsNil(o.AwardType) {
		return true
	}

	return false
}

// SetAwardType gets a reference to the given string and assigns it to the AwardType field.
func (o *OtherAwardAvailabilityType) SetAwardType(v string) {
	o.AwardType = &v
}

// GetShortDescription returns the ShortDescription field value if set, zero value otherwise.
func (o *OtherAwardAvailabilityType) GetShortDescription() string {
	if o == nil || IsNil(o.ShortDescription) {
		var ret string
		return ret
	}
	return *o.ShortDescription
}

// GetShortDescriptionOk returns a tuple with the ShortDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAwardAvailabilityType) GetShortDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ShortDescription) {
		return nil, false
	}
	return o.ShortDescription, true
}

// HasShortDescription returns a boolean if a field has been set.
func (o *OtherAwardAvailabilityType) HasShortDescription() bool {
	if o != nil && !IsNil(o.ShortDescription) {
		return true
	}

	return false
}

// SetShortDescription gets a reference to the given string and assigns it to the ShortDescription field.
func (o *OtherAwardAvailabilityType) SetShortDescription(v string) {
	o.ShortDescription = &v
}

// GetAwardValue returns the AwardValue field value if set, zero value otherwise.
func (o *OtherAwardAvailabilityType) GetAwardValue() float32 {
	if o == nil || IsNil(o.AwardValue) {
		var ret float32
		return ret
	}
	return *o.AwardValue
}

// GetAwardValueOk returns a tuple with the AwardValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAwardAvailabilityType) GetAwardValueOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardValue) {
		return nil, false
	}
	return o.AwardValue, true
}

// HasAwardValue returns a boolean if a field has been set.
func (o *OtherAwardAvailabilityType) HasAwardValue() bool {
	if o != nil && !IsNil(o.AwardValue) {
		return true
	}

	return false
}

// SetAwardValue gets a reference to the given float32 and assigns it to the AwardValue field.
func (o *OtherAwardAvailabilityType) SetAwardValue(v float32) {
	o.AwardValue = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *OtherAwardAvailabilityType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtherAwardAvailabilityType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *OtherAwardAvailabilityType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *OtherAwardAvailabilityType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

func (o OtherAwardAvailabilityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtherAwardAvailabilityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardType) {
		toSerialize["awardType"] = o.AwardType
	}
	if !IsNil(o.ShortDescription) {
		toSerialize["shortDescription"] = o.ShortDescription
	}
	if !IsNil(o.AwardValue) {
		toSerialize["awardValue"] = o.AwardValue
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	return toSerialize, nil
}

type NullableOtherAwardAvailabilityType struct {
	value *OtherAwardAvailabilityType
	isSet bool
}

func (v NullableOtherAwardAvailabilityType) Get() *OtherAwardAvailabilityType {
	return v.value
}

func (v *NullableOtherAwardAvailabilityType) Set(val *OtherAwardAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableOtherAwardAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableOtherAwardAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtherAwardAvailabilityType(val *OtherAwardAvailabilityType) *NullableOtherAwardAvailabilityType {
	return &NullableOtherAwardAvailabilityType{value: val, isSet: true}
}

func (v NullableOtherAwardAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtherAwardAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


