/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the AirlineTransactionImportInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AirlineTransactionImportInfoType{}

// AirlineTransactionImportInfoType Contains details of the membership transaction processing status, provided by the airline.
type AirlineTransactionImportInfoType struct {
	// Description of the error that caused the import to fail
	Description *string `json:"description,omitempty"`
	// The date when this batch was imported into OPERA
	ImportDate *string `json:"importDate,omitempty"`
	Status *AirlineImportStatusType `json:"status,omitempty"`
}

// NewAirlineTransactionImportInfoType instantiates a new AirlineTransactionImportInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirlineTransactionImportInfoType() *AirlineTransactionImportInfoType {
	this := AirlineTransactionImportInfoType{}
	return &this
}

// NewAirlineTransactionImportInfoTypeWithDefaults instantiates a new AirlineTransactionImportInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirlineTransactionImportInfoTypeWithDefaults() *AirlineTransactionImportInfoType {
	this := AirlineTransactionImportInfoType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AirlineTransactionImportInfoType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirlineTransactionImportInfoType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AirlineTransactionImportInfoType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AirlineTransactionImportInfoType) SetDescription(v string) {
	o.Description = &v
}

// GetImportDate returns the ImportDate field value if set, zero value otherwise.
func (o *AirlineTransactionImportInfoType) GetImportDate() string {
	if o == nil || IsNil(o.ImportDate) {
		var ret string
		return ret
	}
	return *o.ImportDate
}

// GetImportDateOk returns a tuple with the ImportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirlineTransactionImportInfoType) GetImportDateOk() (*string, bool) {
	if o == nil || IsNil(o.ImportDate) {
		return nil, false
	}
	return o.ImportDate, true
}

// HasImportDate returns a boolean if a field has been set.
func (o *AirlineTransactionImportInfoType) HasImportDate() bool {
	if o != nil && !IsNil(o.ImportDate) {
		return true
	}

	return false
}

// SetImportDate gets a reference to the given string and assigns it to the ImportDate field.
func (o *AirlineTransactionImportInfoType) SetImportDate(v string) {
	o.ImportDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AirlineTransactionImportInfoType) GetStatus() AirlineImportStatusType {
	if o == nil || IsNil(o.Status) {
		var ret AirlineImportStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirlineTransactionImportInfoType) GetStatusOk() (*AirlineImportStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AirlineTransactionImportInfoType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AirlineImportStatusType and assigns it to the Status field.
func (o *AirlineTransactionImportInfoType) SetStatus(v AirlineImportStatusType) {
	o.Status = &v
}

func (o AirlineTransactionImportInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AirlineTransactionImportInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ImportDate) {
		toSerialize["importDate"] = o.ImportDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableAirlineTransactionImportInfoType struct {
	value *AirlineTransactionImportInfoType
	isSet bool
}

func (v NullableAirlineTransactionImportInfoType) Get() *AirlineTransactionImportInfoType {
	return v.value
}

func (v *NullableAirlineTransactionImportInfoType) Set(val *AirlineTransactionImportInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableAirlineTransactionImportInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableAirlineTransactionImportInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirlineTransactionImportInfoType(val *AirlineTransactionImportInfoType) *NullableAirlineTransactionImportInfoType {
	return &NullableAirlineTransactionImportInfoType{value: val, isSet: true}
}

func (v NullableAirlineTransactionImportInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirlineTransactionImportInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


