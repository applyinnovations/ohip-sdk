/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// StagedReasonType Reasons why the profile got staged. InvalidExpirationDate indicates the membership expiration date is not matching with OPERA system. InvalidEnrollmentCode indicates the membership enrollment code is not matching with opera. NameChange indicates last name or first name is not matching with OPERA
type StagedReasonType string

// List of stagedReasonType
const (
	STAGEDREASONTYPE_INVALID_ENROLLMENT_CODE StagedReasonType = "InvalidEnrollmentCode"
	STAGEDREASONTYPE_EMPTY_ENROLLMENT_CODE StagedReasonType = "EmptyEnrollmentCode"
	STAGEDREASONTYPE_NAME_CHANGE StagedReasonType = "NameChange"
	STAGEDREASONTYPE_INVALID_EXPIRATION_DATE StagedReasonType = "InvalidExpirationDate"
	STAGEDREASONTYPE_EMPTY_EXPIRATION_DATE StagedReasonType = "EmptyExpirationDate"
	STAGEDREASONTYPE_EMPTY_MEMBERSHIP_LEVEL StagedReasonType = "EmptyMembershipLevel"
	STAGEDREASONTYPE_INVALID_MEMBERSHIP_LEVEL StagedReasonType = "InvalidMembershipLevel"
	STAGEDREASONTYPE_DUPLICATE_MEMBERSHIP StagedReasonType = "DuplicateMembership"
)

// All allowed values of StagedReasonType enum
var AllowedStagedReasonTypeEnumValues = []StagedReasonType{
	"InvalidEnrollmentCode",
	"EmptyEnrollmentCode",
	"NameChange",
	"InvalidExpirationDate",
	"EmptyExpirationDate",
	"EmptyMembershipLevel",
	"InvalidMembershipLevel",
	"DuplicateMembership",
}

func (v *StagedReasonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StagedReasonType(value)
	for _, existing := range AllowedStagedReasonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StagedReasonType", value)
}

// NewStagedReasonTypeFromValue returns a pointer to a valid StagedReasonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStagedReasonTypeFromValue(v string) (*StagedReasonType, error) {
	ev := StagedReasonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StagedReasonType: valid values are %v", v, AllowedStagedReasonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StagedReasonType) IsValid() bool {
	for _, existing := range AllowedStagedReasonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to stagedReasonType value
func (v StagedReasonType) Ptr() *StagedReasonType {
	return &v
}

type NullableStagedReasonType struct {
	value *StagedReasonType
	isSet bool
}

func (v NullableStagedReasonType) Get() *StagedReasonType {
	return v.value
}

func (v *NullableStagedReasonType) Set(val *StagedReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableStagedReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableStagedReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStagedReasonType(val *StagedReasonType) *NullableStagedReasonType {
	return &NullableStagedReasonType{value: val, isSet: true}
}

func (v NullableStagedReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStagedReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

