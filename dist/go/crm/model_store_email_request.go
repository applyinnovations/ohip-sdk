/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the StoreEmailRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreEmailRequest{}

// StoreEmailRequest struct for StoreEmailRequest
type StoreEmailRequest struct {
	// Used for Character Strings, length 0 to 80.
	BlockId *string `json:"blockId,omitempty"`
	// Email address
	FromAddress *string `json:"fromAddress,omitempty"`
	ToAddress []string `json:"toAddress,omitempty"`
	// Used for Character Strings, length 0 to 200.
	Subject *string `json:"subject,omitempty"`
	// Email in base64 binary format.
	EmailBody *string `json:"emailBody,omitempty"`
	// Used for Character Strings, length 0 to 100.
	MessageId *string `json:"messageId,omitempty"`
	// The date the email was received.
	EmailReceiveDate *string `json:"emailReceiveDate,omitempty"`
	// Indicates whether the email was sent with an attachment (true) or not (false).
	HasAttachment *bool `json:"hasAttachment,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewStoreEmailRequest instantiates a new StoreEmailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreEmailRequest() *StoreEmailRequest {
	this := StoreEmailRequest{}
	return &this
}

// NewStoreEmailRequestWithDefaults instantiates a new StoreEmailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreEmailRequestWithDefaults() *StoreEmailRequest {
	this := StoreEmailRequest{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetBlockId() string {
	if o == nil || IsNil(o.BlockId) {
		var ret string
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetBlockIdOk() (*string, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given string and assigns it to the BlockId field.
func (o *StoreEmailRequest) SetBlockId(v string) {
	o.BlockId = &v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetFromAddress() string {
	if o == nil || IsNil(o.FromAddress) {
		var ret string
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetFromAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FromAddress) {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasFromAddress() bool {
	if o != nil && !IsNil(o.FromAddress) {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given string and assigns it to the FromAddress field.
func (o *StoreEmailRequest) SetFromAddress(v string) {
	o.FromAddress = &v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetToAddress() []string {
	if o == nil || IsNil(o.ToAddress) {
		var ret []string
		return ret
	}
	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetToAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.ToAddress) {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasToAddress() bool {
	if o != nil && !IsNil(o.ToAddress) {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given []string and assigns it to the ToAddress field.
func (o *StoreEmailRequest) SetToAddress(v []string) {
	o.ToAddress = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *StoreEmailRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetEmailBody returns the EmailBody field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetEmailBody() string {
	if o == nil || IsNil(o.EmailBody) {
		var ret string
		return ret
	}
	return *o.EmailBody
}

// GetEmailBodyOk returns a tuple with the EmailBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetEmailBodyOk() (*string, bool) {
	if o == nil || IsNil(o.EmailBody) {
		return nil, false
	}
	return o.EmailBody, true
}

// HasEmailBody returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasEmailBody() bool {
	if o != nil && !IsNil(o.EmailBody) {
		return true
	}

	return false
}

// SetEmailBody gets a reference to the given string and assigns it to the EmailBody field.
func (o *StoreEmailRequest) SetEmailBody(v string) {
	o.EmailBody = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetMessageId() string {
	if o == nil || IsNil(o.MessageId) {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetMessageIdOk() (*string, bool) {
	if o == nil || IsNil(o.MessageId) {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasMessageId() bool {
	if o != nil && !IsNil(o.MessageId) {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *StoreEmailRequest) SetMessageId(v string) {
	o.MessageId = &v
}

// GetEmailReceiveDate returns the EmailReceiveDate field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetEmailReceiveDate() string {
	if o == nil || IsNil(o.EmailReceiveDate) {
		var ret string
		return ret
	}
	return *o.EmailReceiveDate
}

// GetEmailReceiveDateOk returns a tuple with the EmailReceiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetEmailReceiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.EmailReceiveDate) {
		return nil, false
	}
	return o.EmailReceiveDate, true
}

// HasEmailReceiveDate returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasEmailReceiveDate() bool {
	if o != nil && !IsNil(o.EmailReceiveDate) {
		return true
	}

	return false
}

// SetEmailReceiveDate gets a reference to the given string and assigns it to the EmailReceiveDate field.
func (o *StoreEmailRequest) SetEmailReceiveDate(v string) {
	o.EmailReceiveDate = &v
}

// GetHasAttachment returns the HasAttachment field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetHasAttachment() bool {
	if o == nil || IsNil(o.HasAttachment) {
		var ret bool
		return ret
	}
	return *o.HasAttachment
}

// GetHasAttachmentOk returns a tuple with the HasAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetHasAttachmentOk() (*bool, bool) {
	if o == nil || IsNil(o.HasAttachment) {
		return nil, false
	}
	return o.HasAttachment, true
}

// HasHasAttachment returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasHasAttachment() bool {
	if o != nil && !IsNil(o.HasAttachment) {
		return true
	}

	return false
}

// SetHasAttachment gets a reference to the given bool and assigns it to the HasAttachment field.
func (o *StoreEmailRequest) SetHasAttachment(v bool) {
	o.HasAttachment = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *StoreEmailRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoreEmailRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *StoreEmailRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *StoreEmailRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o StoreEmailRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreEmailRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.FromAddress) {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if !IsNil(o.ToAddress) {
		toSerialize["toAddress"] = o.ToAddress
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.EmailBody) {
		toSerialize["emailBody"] = o.EmailBody
	}
	if !IsNil(o.MessageId) {
		toSerialize["messageId"] = o.MessageId
	}
	if !IsNil(o.EmailReceiveDate) {
		toSerialize["emailReceiveDate"] = o.EmailReceiveDate
	}
	if !IsNil(o.HasAttachment) {
		toSerialize["hasAttachment"] = o.HasAttachment
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableStoreEmailRequest struct {
	value *StoreEmailRequest
	isSet bool
}

func (v NullableStoreEmailRequest) Get() *StoreEmailRequest {
	return v.value
}

func (v *NullableStoreEmailRequest) Set(val *StoreEmailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreEmailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreEmailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreEmailRequest(val *StoreEmailRequest) *NullableStoreEmailRequest {
	return &NullableStoreEmailRequest{value: val, isSet: true}
}

func (v NullableStoreEmailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreEmailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


