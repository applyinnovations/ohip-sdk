/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProfileDistributionConditionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDistributionConditionType{}

// ProfileDistributionConditionType struct for ProfileDistributionConditionType
type ProfileDistributionConditionType struct {
	LeftExpression *ProfileDistributionExpressionFieldType `json:"leftExpression,omitempty"`
	Operator *ProfileDistributionExpressionOperatorType `json:"operator,omitempty"`
	RightExpression *ProfileDistributionExpressionParameterType `json:"rightExpression,omitempty"`
	LogicalOperator *LogicalOperatorType `json:"logicalOperator,omitempty"`
}

// NewProfileDistributionConditionType instantiates a new ProfileDistributionConditionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDistributionConditionType() *ProfileDistributionConditionType {
	this := ProfileDistributionConditionType{}
	return &this
}

// NewProfileDistributionConditionTypeWithDefaults instantiates a new ProfileDistributionConditionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDistributionConditionTypeWithDefaults() *ProfileDistributionConditionType {
	this := ProfileDistributionConditionType{}
	return &this
}

// GetLeftExpression returns the LeftExpression field value if set, zero value otherwise.
func (o *ProfileDistributionConditionType) GetLeftExpression() ProfileDistributionExpressionFieldType {
	if o == nil || IsNil(o.LeftExpression) {
		var ret ProfileDistributionExpressionFieldType
		return ret
	}
	return *o.LeftExpression
}

// GetLeftExpressionOk returns a tuple with the LeftExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDistributionConditionType) GetLeftExpressionOk() (*ProfileDistributionExpressionFieldType, bool) {
	if o == nil || IsNil(o.LeftExpression) {
		return nil, false
	}
	return o.LeftExpression, true
}

// HasLeftExpression returns a boolean if a field has been set.
func (o *ProfileDistributionConditionType) HasLeftExpression() bool {
	if o != nil && !IsNil(o.LeftExpression) {
		return true
	}

	return false
}

// SetLeftExpression gets a reference to the given ProfileDistributionExpressionFieldType and assigns it to the LeftExpression field.
func (o *ProfileDistributionConditionType) SetLeftExpression(v ProfileDistributionExpressionFieldType) {
	o.LeftExpression = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *ProfileDistributionConditionType) GetOperator() ProfileDistributionExpressionOperatorType {
	if o == nil || IsNil(o.Operator) {
		var ret ProfileDistributionExpressionOperatorType
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDistributionConditionType) GetOperatorOk() (*ProfileDistributionExpressionOperatorType, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *ProfileDistributionConditionType) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given ProfileDistributionExpressionOperatorType and assigns it to the Operator field.
func (o *ProfileDistributionConditionType) SetOperator(v ProfileDistributionExpressionOperatorType) {
	o.Operator = &v
}

// GetRightExpression returns the RightExpression field value if set, zero value otherwise.
func (o *ProfileDistributionConditionType) GetRightExpression() ProfileDistributionExpressionParameterType {
	if o == nil || IsNil(o.RightExpression) {
		var ret ProfileDistributionExpressionParameterType
		return ret
	}
	return *o.RightExpression
}

// GetRightExpressionOk returns a tuple with the RightExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDistributionConditionType) GetRightExpressionOk() (*ProfileDistributionExpressionParameterType, bool) {
	if o == nil || IsNil(o.RightExpression) {
		return nil, false
	}
	return o.RightExpression, true
}

// HasRightExpression returns a boolean if a field has been set.
func (o *ProfileDistributionConditionType) HasRightExpression() bool {
	if o != nil && !IsNil(o.RightExpression) {
		return true
	}

	return false
}

// SetRightExpression gets a reference to the given ProfileDistributionExpressionParameterType and assigns it to the RightExpression field.
func (o *ProfileDistributionConditionType) SetRightExpression(v ProfileDistributionExpressionParameterType) {
	o.RightExpression = &v
}

// GetLogicalOperator returns the LogicalOperator field value if set, zero value otherwise.
func (o *ProfileDistributionConditionType) GetLogicalOperator() LogicalOperatorType {
	if o == nil || IsNil(o.LogicalOperator) {
		var ret LogicalOperatorType
		return ret
	}
	return *o.LogicalOperator
}

// GetLogicalOperatorOk returns a tuple with the LogicalOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDistributionConditionType) GetLogicalOperatorOk() (*LogicalOperatorType, bool) {
	if o == nil || IsNil(o.LogicalOperator) {
		return nil, false
	}
	return o.LogicalOperator, true
}

// HasLogicalOperator returns a boolean if a field has been set.
func (o *ProfileDistributionConditionType) HasLogicalOperator() bool {
	if o != nil && !IsNil(o.LogicalOperator) {
		return true
	}

	return false
}

// SetLogicalOperator gets a reference to the given LogicalOperatorType and assigns it to the LogicalOperator field.
func (o *ProfileDistributionConditionType) SetLogicalOperator(v LogicalOperatorType) {
	o.LogicalOperator = &v
}

func (o ProfileDistributionConditionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDistributionConditionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LeftExpression) {
		toSerialize["leftExpression"] = o.LeftExpression
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.RightExpression) {
		toSerialize["rightExpression"] = o.RightExpression
	}
	if !IsNil(o.LogicalOperator) {
		toSerialize["logicalOperator"] = o.LogicalOperator
	}
	return toSerialize, nil
}

type NullableProfileDistributionConditionType struct {
	value *ProfileDistributionConditionType
	isSet bool
}

func (v NullableProfileDistributionConditionType) Get() *ProfileDistributionConditionType {
	return v.value
}

func (v *NullableProfileDistributionConditionType) Set(val *ProfileDistributionConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDistributionConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDistributionConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDistributionConditionType(val *ProfileDistributionConditionType) *NullableProfileDistributionConditionType {
	return &NullableProfileDistributionConditionType{value: val, isSet: true}
}

func (v NullableProfileDistributionConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDistributionConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


