/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProfileAdditionalInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileAdditionalInfoType{}

// ProfileAdditionalInfoType struct for ProfileAdditionalInfoType
type ProfileAdditionalInfoType struct {
	// Business Title or Position of the profile.
	BusinessPosition *string `json:"businessPosition,omitempty"`
	// Indicates if the profile is a Master Account for one or more Subsidiary Accounts.
	MasterAccount *bool `json:"masterAccount,omitempty"`
	// Primary Owner of the profile
	PrimaryOwnerCode *string `json:"primaryOwnerCode,omitempty"`
	// Indicates if the profile is a Subsidiary Account of a Master/Parent Account.
	SubsidiaryAccount *bool `json:"subsidiaryAccount,omitempty"`
	// Territory associated to the profile.
	Territory *string `json:"territory,omitempty"`
}

// NewProfileAdditionalInfoType instantiates a new ProfileAdditionalInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileAdditionalInfoType() *ProfileAdditionalInfoType {
	this := ProfileAdditionalInfoType{}
	return &this
}

// NewProfileAdditionalInfoTypeWithDefaults instantiates a new ProfileAdditionalInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileAdditionalInfoTypeWithDefaults() *ProfileAdditionalInfoType {
	this := ProfileAdditionalInfoType{}
	return &this
}

// GetBusinessPosition returns the BusinessPosition field value if set, zero value otherwise.
func (o *ProfileAdditionalInfoType) GetBusinessPosition() string {
	if o == nil || IsNil(o.BusinessPosition) {
		var ret string
		return ret
	}
	return *o.BusinessPosition
}

// GetBusinessPositionOk returns a tuple with the BusinessPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAdditionalInfoType) GetBusinessPositionOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessPosition) {
		return nil, false
	}
	return o.BusinessPosition, true
}

// HasBusinessPosition returns a boolean if a field has been set.
func (o *ProfileAdditionalInfoType) HasBusinessPosition() bool {
	if o != nil && !IsNil(o.BusinessPosition) {
		return true
	}

	return false
}

// SetBusinessPosition gets a reference to the given string and assigns it to the BusinessPosition field.
func (o *ProfileAdditionalInfoType) SetBusinessPosition(v string) {
	o.BusinessPosition = &v
}

// GetMasterAccount returns the MasterAccount field value if set, zero value otherwise.
func (o *ProfileAdditionalInfoType) GetMasterAccount() bool {
	if o == nil || IsNil(o.MasterAccount) {
		var ret bool
		return ret
	}
	return *o.MasterAccount
}

// GetMasterAccountOk returns a tuple with the MasterAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAdditionalInfoType) GetMasterAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.MasterAccount) {
		return nil, false
	}
	return o.MasterAccount, true
}

// HasMasterAccount returns a boolean if a field has been set.
func (o *ProfileAdditionalInfoType) HasMasterAccount() bool {
	if o != nil && !IsNil(o.MasterAccount) {
		return true
	}

	return false
}

// SetMasterAccount gets a reference to the given bool and assigns it to the MasterAccount field.
func (o *ProfileAdditionalInfoType) SetMasterAccount(v bool) {
	o.MasterAccount = &v
}

// GetPrimaryOwnerCode returns the PrimaryOwnerCode field value if set, zero value otherwise.
func (o *ProfileAdditionalInfoType) GetPrimaryOwnerCode() string {
	if o == nil || IsNil(o.PrimaryOwnerCode) {
		var ret string
		return ret
	}
	return *o.PrimaryOwnerCode
}

// GetPrimaryOwnerCodeOk returns a tuple with the PrimaryOwnerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAdditionalInfoType) GetPrimaryOwnerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryOwnerCode) {
		return nil, false
	}
	return o.PrimaryOwnerCode, true
}

// HasPrimaryOwnerCode returns a boolean if a field has been set.
func (o *ProfileAdditionalInfoType) HasPrimaryOwnerCode() bool {
	if o != nil && !IsNil(o.PrimaryOwnerCode) {
		return true
	}

	return false
}

// SetPrimaryOwnerCode gets a reference to the given string and assigns it to the PrimaryOwnerCode field.
func (o *ProfileAdditionalInfoType) SetPrimaryOwnerCode(v string) {
	o.PrimaryOwnerCode = &v
}

// GetSubsidiaryAccount returns the SubsidiaryAccount field value if set, zero value otherwise.
func (o *ProfileAdditionalInfoType) GetSubsidiaryAccount() bool {
	if o == nil || IsNil(o.SubsidiaryAccount) {
		var ret bool
		return ret
	}
	return *o.SubsidiaryAccount
}

// GetSubsidiaryAccountOk returns a tuple with the SubsidiaryAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAdditionalInfoType) GetSubsidiaryAccountOk() (*bool, bool) {
	if o == nil || IsNil(o.SubsidiaryAccount) {
		return nil, false
	}
	return o.SubsidiaryAccount, true
}

// HasSubsidiaryAccount returns a boolean if a field has been set.
func (o *ProfileAdditionalInfoType) HasSubsidiaryAccount() bool {
	if o != nil && !IsNil(o.SubsidiaryAccount) {
		return true
	}

	return false
}

// SetSubsidiaryAccount gets a reference to the given bool and assigns it to the SubsidiaryAccount field.
func (o *ProfileAdditionalInfoType) SetSubsidiaryAccount(v bool) {
	o.SubsidiaryAccount = &v
}

// GetTerritory returns the Territory field value if set, zero value otherwise.
func (o *ProfileAdditionalInfoType) GetTerritory() string {
	if o == nil || IsNil(o.Territory) {
		var ret string
		return ret
	}
	return *o.Territory
}

// GetTerritoryOk returns a tuple with the Territory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAdditionalInfoType) GetTerritoryOk() (*string, bool) {
	if o == nil || IsNil(o.Territory) {
		return nil, false
	}
	return o.Territory, true
}

// HasTerritory returns a boolean if a field has been set.
func (o *ProfileAdditionalInfoType) HasTerritory() bool {
	if o != nil && !IsNil(o.Territory) {
		return true
	}

	return false
}

// SetTerritory gets a reference to the given string and assigns it to the Territory field.
func (o *ProfileAdditionalInfoType) SetTerritory(v string) {
	o.Territory = &v
}

func (o ProfileAdditionalInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileAdditionalInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BusinessPosition) {
		toSerialize["businessPosition"] = o.BusinessPosition
	}
	if !IsNil(o.MasterAccount) {
		toSerialize["masterAccount"] = o.MasterAccount
	}
	if !IsNil(o.PrimaryOwnerCode) {
		toSerialize["primaryOwnerCode"] = o.PrimaryOwnerCode
	}
	if !IsNil(o.SubsidiaryAccount) {
		toSerialize["subsidiaryAccount"] = o.SubsidiaryAccount
	}
	if !IsNil(o.Territory) {
		toSerialize["territory"] = o.Territory
	}
	return toSerialize, nil
}

type NullableProfileAdditionalInfoType struct {
	value *ProfileAdditionalInfoType
	isSet bool
}

func (v NullableProfileAdditionalInfoType) Get() *ProfileAdditionalInfoType {
	return v.value
}

func (v *NullableProfileAdditionalInfoType) Set(val *ProfileAdditionalInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileAdditionalInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileAdditionalInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileAdditionalInfoType(val *ProfileAdditionalInfoType) *NullableProfileAdditionalInfoType {
	return &NullableProfileAdditionalInfoType{value: val, isSet: true}
}

func (v NullableProfileAdditionalInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileAdditionalInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


