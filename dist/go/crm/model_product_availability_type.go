/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProductAvailabilityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductAvailabilityType{}

// ProductAvailabilityType Member Award availability details based on chosen award types as Product,Rate,Upgrade,FT Payment and Other.
type ProductAvailabilityType struct {
	// Unique code that identifies this award.
	AwardType *string `json:"awardType,omitempty"`
	// HotelCode where the award will be consumed.
	HotelId *string `json:"hotelId,omitempty"`
	// Total award points available for redemption.
	TotalAvailablePoints *float32 `json:"totalAvailablePoints,omitempty"`
	// The number of points that must be redeemed for this award.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// The award points that will be forfeited if the cancel penalty charge is applied.
	CancelPenaltyPoints *float32 `json:"cancelPenaltyPoints,omitempty"`
	// Number of days before arrival when a reservation may be cancelled without an award points penalty.
	CancelPenaltyDays *float32 `json:"cancelPenaltyDays,omitempty"`
	// The cancel penalty charge.
	CancelPenaltyCharge *float32 `json:"cancelPenaltyCharge,omitempty"`
	// The penalty charge is either a percentage or a flat number of points.
	CancelPenaltyType *string `json:"cancelPenaltyType,omitempty"`
	// Issue key in format of Raw data.
	RawIssueKey *string `json:"rawIssueKey,omitempty"`
	// An identifying number of the award, assigned by the system when the award was issued.
	AwardNumber *float32 `json:"awardNumber,omitempty"`
	// Package/Product code for the award .
	PackageCode *string `json:"packageCode,omitempty"`
	// Description of the product.
	PackageDescription *string `json:"packageDescription,omitempty"`
	// The valid time period from when the award can be issued.
	AwardValidFrom *string `json:"awardValidFrom,omitempty"`
	// The valid time to an issued award.
	AwardValidTo *string `json:"awardValidTo,omitempty"`
}

// NewProductAvailabilityType instantiates a new ProductAvailabilityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductAvailabilityType() *ProductAvailabilityType {
	this := ProductAvailabilityType{}
	return &this
}

// NewProductAvailabilityTypeWithDefaults instantiates a new ProductAvailabilityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductAvailabilityTypeWithDefaults() *ProductAvailabilityType {
	this := ProductAvailabilityType{}
	return &this
}

// GetAwardType returns the AwardType field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetAwardType() string {
	if o == nil || IsNil(o.AwardType) {
		var ret string
		return ret
	}
	return *o.AwardType
}

// GetAwardTypeOk returns a tuple with the AwardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetAwardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardType) {
		return nil, false
	}
	return o.AwardType, true
}

// HasAwardType returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasAwardType() bool {
	if o != nil && !IsNil(o.AwardType) {
		return true
	}

	return false
}

// SetAwardType gets a reference to the given string and assigns it to the AwardType field.
func (o *ProductAvailabilityType) SetAwardType(v string) {
	o.AwardType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ProductAvailabilityType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetTotalAvailablePoints returns the TotalAvailablePoints field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetTotalAvailablePoints() float32 {
	if o == nil || IsNil(o.TotalAvailablePoints) {
		var ret float32
		return ret
	}
	return *o.TotalAvailablePoints
}

// GetTotalAvailablePointsOk returns a tuple with the TotalAvailablePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetTotalAvailablePointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAvailablePoints) {
		return nil, false
	}
	return o.TotalAvailablePoints, true
}

// HasTotalAvailablePoints returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasTotalAvailablePoints() bool {
	if o != nil && !IsNil(o.TotalAvailablePoints) {
		return true
	}

	return false
}

// SetTotalAvailablePoints gets a reference to the given float32 and assigns it to the TotalAvailablePoints field.
func (o *ProductAvailabilityType) SetTotalAvailablePoints(v float32) {
	o.TotalAvailablePoints = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *ProductAvailabilityType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetCancelPenaltyPoints returns the CancelPenaltyPoints field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetCancelPenaltyPoints() float32 {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyPoints
}

// GetCancelPenaltyPointsOk returns a tuple with the CancelPenaltyPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetCancelPenaltyPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		return nil, false
	}
	return o.CancelPenaltyPoints, true
}

// HasCancelPenaltyPoints returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasCancelPenaltyPoints() bool {
	if o != nil && !IsNil(o.CancelPenaltyPoints) {
		return true
	}

	return false
}

// SetCancelPenaltyPoints gets a reference to the given float32 and assigns it to the CancelPenaltyPoints field.
func (o *ProductAvailabilityType) SetCancelPenaltyPoints(v float32) {
	o.CancelPenaltyPoints = &v
}

// GetCancelPenaltyDays returns the CancelPenaltyDays field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetCancelPenaltyDays() float32 {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyDays
}

// GetCancelPenaltyDaysOk returns a tuple with the CancelPenaltyDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetCancelPenaltyDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		return nil, false
	}
	return o.CancelPenaltyDays, true
}

// HasCancelPenaltyDays returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasCancelPenaltyDays() bool {
	if o != nil && !IsNil(o.CancelPenaltyDays) {
		return true
	}

	return false
}

// SetCancelPenaltyDays gets a reference to the given float32 and assigns it to the CancelPenaltyDays field.
func (o *ProductAvailabilityType) SetCancelPenaltyDays(v float32) {
	o.CancelPenaltyDays = &v
}

// GetCancelPenaltyCharge returns the CancelPenaltyCharge field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetCancelPenaltyCharge() float32 {
	if o == nil || IsNil(o.CancelPenaltyCharge) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyCharge
}

// GetCancelPenaltyChargeOk returns a tuple with the CancelPenaltyCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetCancelPenaltyChargeOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyCharge) {
		return nil, false
	}
	return o.CancelPenaltyCharge, true
}

// HasCancelPenaltyCharge returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasCancelPenaltyCharge() bool {
	if o != nil && !IsNil(o.CancelPenaltyCharge) {
		return true
	}

	return false
}

// SetCancelPenaltyCharge gets a reference to the given float32 and assigns it to the CancelPenaltyCharge field.
func (o *ProductAvailabilityType) SetCancelPenaltyCharge(v float32) {
	o.CancelPenaltyCharge = &v
}

// GetCancelPenaltyType returns the CancelPenaltyType field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetCancelPenaltyType() string {
	if o == nil || IsNil(o.CancelPenaltyType) {
		var ret string
		return ret
	}
	return *o.CancelPenaltyType
}

// GetCancelPenaltyTypeOk returns a tuple with the CancelPenaltyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetCancelPenaltyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CancelPenaltyType) {
		return nil, false
	}
	return o.CancelPenaltyType, true
}

// HasCancelPenaltyType returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasCancelPenaltyType() bool {
	if o != nil && !IsNil(o.CancelPenaltyType) {
		return true
	}

	return false
}

// SetCancelPenaltyType gets a reference to the given string and assigns it to the CancelPenaltyType field.
func (o *ProductAvailabilityType) SetCancelPenaltyType(v string) {
	o.CancelPenaltyType = &v
}

// GetRawIssueKey returns the RawIssueKey field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetRawIssueKey() string {
	if o == nil || IsNil(o.RawIssueKey) {
		var ret string
		return ret
	}
	return *o.RawIssueKey
}

// GetRawIssueKeyOk returns a tuple with the RawIssueKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetRawIssueKeyOk() (*string, bool) {
	if o == nil || IsNil(o.RawIssueKey) {
		return nil, false
	}
	return o.RawIssueKey, true
}

// HasRawIssueKey returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasRawIssueKey() bool {
	if o != nil && !IsNil(o.RawIssueKey) {
		return true
	}

	return false
}

// SetRawIssueKey gets a reference to the given string and assigns it to the RawIssueKey field.
func (o *ProductAvailabilityType) SetRawIssueKey(v string) {
	o.RawIssueKey = &v
}

// GetAwardNumber returns the AwardNumber field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetAwardNumber() float32 {
	if o == nil || IsNil(o.AwardNumber) {
		var ret float32
		return ret
	}
	return *o.AwardNumber
}

// GetAwardNumberOk returns a tuple with the AwardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetAwardNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardNumber) {
		return nil, false
	}
	return o.AwardNumber, true
}

// HasAwardNumber returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasAwardNumber() bool {
	if o != nil && !IsNil(o.AwardNumber) {
		return true
	}

	return false
}

// SetAwardNumber gets a reference to the given float32 and assigns it to the AwardNumber field.
func (o *ProductAvailabilityType) SetAwardNumber(v float32) {
	o.AwardNumber = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *ProductAvailabilityType) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetPackageDescription returns the PackageDescription field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetPackageDescription() string {
	if o == nil || IsNil(o.PackageDescription) {
		var ret string
		return ret
	}
	return *o.PackageDescription
}

// GetPackageDescriptionOk returns a tuple with the PackageDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetPackageDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.PackageDescription) {
		return nil, false
	}
	return o.PackageDescription, true
}

// HasPackageDescription returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasPackageDescription() bool {
	if o != nil && !IsNil(o.PackageDescription) {
		return true
	}

	return false
}

// SetPackageDescription gets a reference to the given string and assigns it to the PackageDescription field.
func (o *ProductAvailabilityType) SetPackageDescription(v string) {
	o.PackageDescription = &v
}

// GetAwardValidFrom returns the AwardValidFrom field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetAwardValidFrom() string {
	if o == nil || IsNil(o.AwardValidFrom) {
		var ret string
		return ret
	}
	return *o.AwardValidFrom
}

// GetAwardValidFromOk returns a tuple with the AwardValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetAwardValidFromOk() (*string, bool) {
	if o == nil || IsNil(o.AwardValidFrom) {
		return nil, false
	}
	return o.AwardValidFrom, true
}

// HasAwardValidFrom returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasAwardValidFrom() bool {
	if o != nil && !IsNil(o.AwardValidFrom) {
		return true
	}

	return false
}

// SetAwardValidFrom gets a reference to the given string and assigns it to the AwardValidFrom field.
func (o *ProductAvailabilityType) SetAwardValidFrom(v string) {
	o.AwardValidFrom = &v
}

// GetAwardValidTo returns the AwardValidTo field value if set, zero value otherwise.
func (o *ProductAvailabilityType) GetAwardValidTo() string {
	if o == nil || IsNil(o.AwardValidTo) {
		var ret string
		return ret
	}
	return *o.AwardValidTo
}

// GetAwardValidToOk returns a tuple with the AwardValidTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductAvailabilityType) GetAwardValidToOk() (*string, bool) {
	if o == nil || IsNil(o.AwardValidTo) {
		return nil, false
	}
	return o.AwardValidTo, true
}

// HasAwardValidTo returns a boolean if a field has been set.
func (o *ProductAvailabilityType) HasAwardValidTo() bool {
	if o != nil && !IsNil(o.AwardValidTo) {
		return true
	}

	return false
}

// SetAwardValidTo gets a reference to the given string and assigns it to the AwardValidTo field.
func (o *ProductAvailabilityType) SetAwardValidTo(v string) {
	o.AwardValidTo = &v
}

func (o ProductAvailabilityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductAvailabilityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardType) {
		toSerialize["awardType"] = o.AwardType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.TotalAvailablePoints) {
		toSerialize["totalAvailablePoints"] = o.TotalAvailablePoints
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.CancelPenaltyPoints) {
		toSerialize["cancelPenaltyPoints"] = o.CancelPenaltyPoints
	}
	if !IsNil(o.CancelPenaltyDays) {
		toSerialize["cancelPenaltyDays"] = o.CancelPenaltyDays
	}
	if !IsNil(o.CancelPenaltyCharge) {
		toSerialize["cancelPenaltyCharge"] = o.CancelPenaltyCharge
	}
	if !IsNil(o.CancelPenaltyType) {
		toSerialize["cancelPenaltyType"] = o.CancelPenaltyType
	}
	if !IsNil(o.RawIssueKey) {
		toSerialize["rawIssueKey"] = o.RawIssueKey
	}
	if !IsNil(o.AwardNumber) {
		toSerialize["awardNumber"] = o.AwardNumber
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.PackageDescription) {
		toSerialize["packageDescription"] = o.PackageDescription
	}
	if !IsNil(o.AwardValidFrom) {
		toSerialize["awardValidFrom"] = o.AwardValidFrom
	}
	if !IsNil(o.AwardValidTo) {
		toSerialize["awardValidTo"] = o.AwardValidTo
	}
	return toSerialize, nil
}

type NullableProductAvailabilityType struct {
	value *ProductAvailabilityType
	isSet bool
}

func (v NullableProductAvailabilityType) Get() *ProductAvailabilityType {
	return v.value
}

func (v *NullableProductAvailabilityType) Set(val *ProductAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductAvailabilityType(val *ProductAvailabilityType) *NullableProductAvailabilityType {
	return &NullableProductAvailabilityType{value: val, isSet: true}
}

func (v NullableProductAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


