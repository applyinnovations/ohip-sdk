/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProfilesTypeProfileInfoInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfilesTypeProfileInfoInner{}

// ProfilesTypeProfileInfoInner struct for ProfilesTypeProfileInfoInner
type ProfilesTypeProfileInfoInner struct {
	// Unique Id that references an object uniquely in the system.
	ProfileIdList []UniqueIDType `json:"profileIdList,omitempty"`
	Profile *ProfileType `json:"profile,omitempty"`
	// Chain code associated with the profile.
	ChainCode *string `json:"chainCode,omitempty"`
	// Allowed actions for profile operations.
	AllowedActions []ProfileAllowedActionType `json:"allowedActions,omitempty"`
}

// NewProfilesTypeProfileInfoInner instantiates a new ProfilesTypeProfileInfoInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfilesTypeProfileInfoInner() *ProfilesTypeProfileInfoInner {
	this := ProfilesTypeProfileInfoInner{}
	return &this
}

// NewProfilesTypeProfileInfoInnerWithDefaults instantiates a new ProfilesTypeProfileInfoInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfilesTypeProfileInfoInnerWithDefaults() *ProfilesTypeProfileInfoInner {
	this := ProfilesTypeProfileInfoInner{}
	return &this
}

// GetProfileIdList returns the ProfileIdList field value if set, zero value otherwise.
func (o *ProfilesTypeProfileInfoInner) GetProfileIdList() []UniqueIDType {
	if o == nil || IsNil(o.ProfileIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ProfileIdList
}

// GetProfileIdListOk returns a tuple with the ProfileIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesTypeProfileInfoInner) GetProfileIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ProfileIdList) {
		return nil, false
	}
	return o.ProfileIdList, true
}

// HasProfileIdList returns a boolean if a field has been set.
func (o *ProfilesTypeProfileInfoInner) HasProfileIdList() bool {
	if o != nil && !IsNil(o.ProfileIdList) {
		return true
	}

	return false
}

// SetProfileIdList gets a reference to the given []UniqueIDType and assigns it to the ProfileIdList field.
func (o *ProfilesTypeProfileInfoInner) SetProfileIdList(v []UniqueIDType) {
	o.ProfileIdList = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ProfilesTypeProfileInfoInner) GetProfile() ProfileType {
	if o == nil || IsNil(o.Profile) {
		var ret ProfileType
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesTypeProfileInfoInner) GetProfileOk() (*ProfileType, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ProfilesTypeProfileInfoInner) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given ProfileType and assigns it to the Profile field.
func (o *ProfilesTypeProfileInfoInner) SetProfile(v ProfileType) {
	o.Profile = &v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *ProfilesTypeProfileInfoInner) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesTypeProfileInfoInner) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *ProfilesTypeProfileInfoInner) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *ProfilesTypeProfileInfoInner) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetAllowedActions returns the AllowedActions field value if set, zero value otherwise.
func (o *ProfilesTypeProfileInfoInner) GetAllowedActions() []ProfileAllowedActionType {
	if o == nil || IsNil(o.AllowedActions) {
		var ret []ProfileAllowedActionType
		return ret
	}
	return o.AllowedActions
}

// GetAllowedActionsOk returns a tuple with the AllowedActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesTypeProfileInfoInner) GetAllowedActionsOk() ([]ProfileAllowedActionType, bool) {
	if o == nil || IsNil(o.AllowedActions) {
		return nil, false
	}
	return o.AllowedActions, true
}

// HasAllowedActions returns a boolean if a field has been set.
func (o *ProfilesTypeProfileInfoInner) HasAllowedActions() bool {
	if o != nil && !IsNil(o.AllowedActions) {
		return true
	}

	return false
}

// SetAllowedActions gets a reference to the given []ProfileAllowedActionType and assigns it to the AllowedActions field.
func (o *ProfilesTypeProfileInfoInner) SetAllowedActions(v []ProfileAllowedActionType) {
	o.AllowedActions = v
}

func (o ProfilesTypeProfileInfoInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfilesTypeProfileInfoInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileIdList) {
		toSerialize["profileIdList"] = o.ProfileIdList
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.AllowedActions) {
		toSerialize["allowedActions"] = o.AllowedActions
	}
	return toSerialize, nil
}

type NullableProfilesTypeProfileInfoInner struct {
	value *ProfilesTypeProfileInfoInner
	isSet bool
}

func (v NullableProfilesTypeProfileInfoInner) Get() *ProfilesTypeProfileInfoInner {
	return v.value
}

func (v *NullableProfilesTypeProfileInfoInner) Set(val *ProfilesTypeProfileInfoInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProfilesTypeProfileInfoInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProfilesTypeProfileInfoInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfilesTypeProfileInfoInner(val *ProfilesTypeProfileInfoInner) *NullableProfilesTypeProfileInfoInner {
	return &NullableProfilesTypeProfileInfoInner{value: val, isSet: true}
}

func (v NullableProfilesTypeProfileInfoInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfilesTypeProfileInfoInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


