/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProfilesMatchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfilesMatchType{}

// ProfilesMatchType Type that contains the information of a profile match such as main profile, profile to merge, match id, status of the match, date when the points where computed for last time, etc.
type ProfilesMatchType struct {
	// Unique identifier for this particular profile match record.
	MatchId *string `json:"matchId,omitempty"`
	MainProfile *ShortInfoProfileType `json:"mainProfile,omitempty"`
	ProfileToMerge *ShortInfoProfileType `json:"profileToMerge,omitempty"`
	// Match criteria rule code that was used to create that match.
	Rule *string `json:"rule,omitempty"`
	// Description of the match point for the profile merge.
	MatchCriteria *string `json:"matchCriteria,omitempty"`
	// Total number of weighing match points that was found between main profile and profile to merge.
	Points *float32 `json:"points,omitempty"`
	Status *ProfileMatchStatusType `json:"status,omitempty"`
	// Date when the weighing points were computed for the profiles
	ComputedOn *string `json:"computedOn,omitempty"`
	// If this value is true, then this record is set as do not merge, if false, it is set as merge.
	DoNotMerge *bool `json:"doNotMerge,omitempty"`
}

// NewProfilesMatchType instantiates a new ProfilesMatchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfilesMatchType() *ProfilesMatchType {
	this := ProfilesMatchType{}
	return &this
}

// NewProfilesMatchTypeWithDefaults instantiates a new ProfilesMatchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfilesMatchTypeWithDefaults() *ProfilesMatchType {
	this := ProfilesMatchType{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetMatchId() string {
	if o == nil || IsNil(o.MatchId) {
		var ret string
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetMatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given string and assigns it to the MatchId field.
func (o *ProfilesMatchType) SetMatchId(v string) {
	o.MatchId = &v
}

// GetMainProfile returns the MainProfile field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetMainProfile() ShortInfoProfileType {
	if o == nil || IsNil(o.MainProfile) {
		var ret ShortInfoProfileType
		return ret
	}
	return *o.MainProfile
}

// GetMainProfileOk returns a tuple with the MainProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetMainProfileOk() (*ShortInfoProfileType, bool) {
	if o == nil || IsNil(o.MainProfile) {
		return nil, false
	}
	return o.MainProfile, true
}

// HasMainProfile returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasMainProfile() bool {
	if o != nil && !IsNil(o.MainProfile) {
		return true
	}

	return false
}

// SetMainProfile gets a reference to the given ShortInfoProfileType and assigns it to the MainProfile field.
func (o *ProfilesMatchType) SetMainProfile(v ShortInfoProfileType) {
	o.MainProfile = &v
}

// GetProfileToMerge returns the ProfileToMerge field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetProfileToMerge() ShortInfoProfileType {
	if o == nil || IsNil(o.ProfileToMerge) {
		var ret ShortInfoProfileType
		return ret
	}
	return *o.ProfileToMerge
}

// GetProfileToMergeOk returns a tuple with the ProfileToMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetProfileToMergeOk() (*ShortInfoProfileType, bool) {
	if o == nil || IsNil(o.ProfileToMerge) {
		return nil, false
	}
	return o.ProfileToMerge, true
}

// HasProfileToMerge returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasProfileToMerge() bool {
	if o != nil && !IsNil(o.ProfileToMerge) {
		return true
	}

	return false
}

// SetProfileToMerge gets a reference to the given ShortInfoProfileType and assigns it to the ProfileToMerge field.
func (o *ProfilesMatchType) SetProfileToMerge(v ShortInfoProfileType) {
	o.ProfileToMerge = &v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetRule() string {
	if o == nil || IsNil(o.Rule) {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetRuleOk() (*string, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *ProfilesMatchType) SetRule(v string) {
	o.Rule = &v
}

// GetMatchCriteria returns the MatchCriteria field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetMatchCriteria() string {
	if o == nil || IsNil(o.MatchCriteria) {
		var ret string
		return ret
	}
	return *o.MatchCriteria
}

// GetMatchCriteriaOk returns a tuple with the MatchCriteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetMatchCriteriaOk() (*string, bool) {
	if o == nil || IsNil(o.MatchCriteria) {
		return nil, false
	}
	return o.MatchCriteria, true
}

// HasMatchCriteria returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasMatchCriteria() bool {
	if o != nil && !IsNil(o.MatchCriteria) {
		return true
	}

	return false
}

// SetMatchCriteria gets a reference to the given string and assigns it to the MatchCriteria field.
func (o *ProfilesMatchType) SetMatchCriteria(v string) {
	o.MatchCriteria = &v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetPoints() float32 {
	if o == nil || IsNil(o.Points) {
		var ret float32
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.Points) {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasPoints() bool {
	if o != nil && !IsNil(o.Points) {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float32 and assigns it to the Points field.
func (o *ProfilesMatchType) SetPoints(v float32) {
	o.Points = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetStatus() ProfileMatchStatusType {
	if o == nil || IsNil(o.Status) {
		var ret ProfileMatchStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetStatusOk() (*ProfileMatchStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProfileMatchStatusType and assigns it to the Status field.
func (o *ProfilesMatchType) SetStatus(v ProfileMatchStatusType) {
	o.Status = &v
}

// GetComputedOn returns the ComputedOn field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetComputedOn() string {
	if o == nil || IsNil(o.ComputedOn) {
		var ret string
		return ret
	}
	return *o.ComputedOn
}

// GetComputedOnOk returns a tuple with the ComputedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetComputedOnOk() (*string, bool) {
	if o == nil || IsNil(o.ComputedOn) {
		return nil, false
	}
	return o.ComputedOn, true
}

// HasComputedOn returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasComputedOn() bool {
	if o != nil && !IsNil(o.ComputedOn) {
		return true
	}

	return false
}

// SetComputedOn gets a reference to the given string and assigns it to the ComputedOn field.
func (o *ProfilesMatchType) SetComputedOn(v string) {
	o.ComputedOn = &v
}

// GetDoNotMerge returns the DoNotMerge field value if set, zero value otherwise.
func (o *ProfilesMatchType) GetDoNotMerge() bool {
	if o == nil || IsNil(o.DoNotMerge) {
		var ret bool
		return ret
	}
	return *o.DoNotMerge
}

// GetDoNotMergeOk returns a tuple with the DoNotMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatchType) GetDoNotMergeOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotMerge) {
		return nil, false
	}
	return o.DoNotMerge, true
}

// HasDoNotMerge returns a boolean if a field has been set.
func (o *ProfilesMatchType) HasDoNotMerge() bool {
	if o != nil && !IsNil(o.DoNotMerge) {
		return true
	}

	return false
}

// SetDoNotMerge gets a reference to the given bool and assigns it to the DoNotMerge field.
func (o *ProfilesMatchType) SetDoNotMerge(v bool) {
	o.DoNotMerge = &v
}

func (o ProfilesMatchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfilesMatchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchId) {
		toSerialize["matchId"] = o.MatchId
	}
	if !IsNil(o.MainProfile) {
		toSerialize["mainProfile"] = o.MainProfile
	}
	if !IsNil(o.ProfileToMerge) {
		toSerialize["profileToMerge"] = o.ProfileToMerge
	}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.MatchCriteria) {
		toSerialize["matchCriteria"] = o.MatchCriteria
	}
	if !IsNil(o.Points) {
		toSerialize["points"] = o.Points
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ComputedOn) {
		toSerialize["computedOn"] = o.ComputedOn
	}
	if !IsNil(o.DoNotMerge) {
		toSerialize["doNotMerge"] = o.DoNotMerge
	}
	return toSerialize, nil
}

type NullableProfilesMatchType struct {
	value *ProfilesMatchType
	isSet bool
}

func (v NullableProfilesMatchType) Get() *ProfilesMatchType {
	return v.value
}

func (v *NullableProfilesMatchType) Set(val *ProfilesMatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfilesMatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfilesMatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfilesMatchType(val *ProfilesMatchType) *NullableProfilesMatchType {
	return &NullableProfilesMatchType{value: val, isSet: true}
}

func (v NullableProfilesMatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfilesMatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


