/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MemberPointsExceptionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberPointsExceptionType{}

// MemberPointsExceptionType Details about a membership like ProfileID, Card Number, Type, Level, etc.
type MemberPointsExceptionType struct {
	// Hotel code of the membership transaction exceptions.
	HotelId *string `json:"hotelId,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	// The profile name associated with this membership.
	Name *string `json:"name,omitempty"`
	FromToRangeDate *DateRangeType `json:"fromToRangeDate,omitempty"`
	// Unique identifier of this membership.
	MembershipIdNo *float32 `json:"membershipIdNo,omitempty"`
	MembershipType *CodeDescriptionType `json:"membershipType,omitempty"`
	// The card number associated with this membership.
	MembershipCardNo *string `json:"membershipCardNo,omitempty"`
	// The current level of the membership.
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	MembershipTransactionId *MembershipTransactionId `json:"membershipTransactionId,omitempty"`
	// The number of rooms booked.(MR)
	RoomsBooked *int32 `json:"roomsBooked,omitempty"`
	// Indicates if back to back membership transaction exceptions have occurred or not.
	BackToBack *bool `json:"backToBack,omitempty"`
	// The average rate of the stay.
	AverageRate *float32 `json:"averageRate,omitempty"`
	// Award points associated with this membership points transaction.
	AwardPoints *float32 `json:"awardPoints,omitempty"`
	// Tier night points associated with this membership points transaction.
	TierNightPoints *float32 `json:"tierNightPoints,omitempty"`
	// Tier stay points associated with this membership points transaction.
	TierStayPoints *float32 `json:"tierStayPoints,omitempty"`
	// Tier revenue points associated with this membership points transaction.
	TierRevenuePoints *float32 `json:"tierRevenuePoints,omitempty"`
	// Points Calculated value(Y/N) for the selected transaction.
	PointsCalculate *bool `json:"pointsCalculate,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
	// The systems records and notes identifying the exception criteria.
	ProcessingMessages *string `json:"processingMessages,omitempty"`
	ExceptionStatus *MembershipExceptionStatusType `json:"exceptionStatus,omitempty"`
}

// NewMemberPointsExceptionType instantiates a new MemberPointsExceptionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberPointsExceptionType() *MemberPointsExceptionType {
	this := MemberPointsExceptionType{}
	return &this
}

// NewMemberPointsExceptionTypeWithDefaults instantiates a new MemberPointsExceptionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberPointsExceptionTypeWithDefaults() *MemberPointsExceptionType {
	this := MemberPointsExceptionType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MemberPointsExceptionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *MemberPointsExceptionType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MemberPointsExceptionType) SetName(v string) {
	o.Name = &v
}

// GetFromToRangeDate returns the FromToRangeDate field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetFromToRangeDate() DateRangeType {
	if o == nil || IsNil(o.FromToRangeDate) {
		var ret DateRangeType
		return ret
	}
	return *o.FromToRangeDate
}

// GetFromToRangeDateOk returns a tuple with the FromToRangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetFromToRangeDateOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.FromToRangeDate) {
		return nil, false
	}
	return o.FromToRangeDate, true
}

// HasFromToRangeDate returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasFromToRangeDate() bool {
	if o != nil && !IsNil(o.FromToRangeDate) {
		return true
	}

	return false
}

// SetFromToRangeDate gets a reference to the given DateRangeType and assigns it to the FromToRangeDate field.
func (o *MemberPointsExceptionType) SetFromToRangeDate(v DateRangeType) {
	o.FromToRangeDate = &v
}

// GetMembershipIdNo returns the MembershipIdNo field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetMembershipIdNo() float32 {
	if o == nil || IsNil(o.MembershipIdNo) {
		var ret float32
		return ret
	}
	return *o.MembershipIdNo
}

// GetMembershipIdNoOk returns a tuple with the MembershipIdNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetMembershipIdNoOk() (*float32, bool) {
	if o == nil || IsNil(o.MembershipIdNo) {
		return nil, false
	}
	return o.MembershipIdNo, true
}

// HasMembershipIdNo returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasMembershipIdNo() bool {
	if o != nil && !IsNil(o.MembershipIdNo) {
		return true
	}

	return false
}

// SetMembershipIdNo gets a reference to the given float32 and assigns it to the MembershipIdNo field.
func (o *MemberPointsExceptionType) SetMembershipIdNo(v float32) {
	o.MembershipIdNo = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetMembershipType() CodeDescriptionType {
	if o == nil || IsNil(o.MembershipType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetMembershipTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given CodeDescriptionType and assigns it to the MembershipType field.
func (o *MemberPointsExceptionType) SetMembershipType(v CodeDescriptionType) {
	o.MembershipType = &v
}

// GetMembershipCardNo returns the MembershipCardNo field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetMembershipCardNo() string {
	if o == nil || IsNil(o.MembershipCardNo) {
		var ret string
		return ret
	}
	return *o.MembershipCardNo
}

// GetMembershipCardNoOk returns a tuple with the MembershipCardNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetMembershipCardNoOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipCardNo) {
		return nil, false
	}
	return o.MembershipCardNo, true
}

// HasMembershipCardNo returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasMembershipCardNo() bool {
	if o != nil && !IsNil(o.MembershipCardNo) {
		return true
	}

	return false
}

// SetMembershipCardNo gets a reference to the given string and assigns it to the MembershipCardNo field.
func (o *MemberPointsExceptionType) SetMembershipCardNo(v string) {
	o.MembershipCardNo = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *MemberPointsExceptionType) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetMembershipTransactionId returns the MembershipTransactionId field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetMembershipTransactionId() MembershipTransactionId {
	if o == nil || IsNil(o.MembershipTransactionId) {
		var ret MembershipTransactionId
		return ret
	}
	return *o.MembershipTransactionId
}

// GetMembershipTransactionIdOk returns a tuple with the MembershipTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetMembershipTransactionIdOk() (*MembershipTransactionId, bool) {
	if o == nil || IsNil(o.MembershipTransactionId) {
		return nil, false
	}
	return o.MembershipTransactionId, true
}

// HasMembershipTransactionId returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasMembershipTransactionId() bool {
	if o != nil && !IsNil(o.MembershipTransactionId) {
		return true
	}

	return false
}

// SetMembershipTransactionId gets a reference to the given MembershipTransactionId and assigns it to the MembershipTransactionId field.
func (o *MemberPointsExceptionType) SetMembershipTransactionId(v MembershipTransactionId) {
	o.MembershipTransactionId = &v
}

// GetRoomsBooked returns the RoomsBooked field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetRoomsBooked() int32 {
	if o == nil || IsNil(o.RoomsBooked) {
		var ret int32
		return ret
	}
	return *o.RoomsBooked
}

// GetRoomsBookedOk returns a tuple with the RoomsBooked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetRoomsBookedOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomsBooked) {
		return nil, false
	}
	return o.RoomsBooked, true
}

// HasRoomsBooked returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasRoomsBooked() bool {
	if o != nil && !IsNil(o.RoomsBooked) {
		return true
	}

	return false
}

// SetRoomsBooked gets a reference to the given int32 and assigns it to the RoomsBooked field.
func (o *MemberPointsExceptionType) SetRoomsBooked(v int32) {
	o.RoomsBooked = &v
}

// GetBackToBack returns the BackToBack field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetBackToBack() bool {
	if o == nil || IsNil(o.BackToBack) {
		var ret bool
		return ret
	}
	return *o.BackToBack
}

// GetBackToBackOk returns a tuple with the BackToBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetBackToBackOk() (*bool, bool) {
	if o == nil || IsNil(o.BackToBack) {
		return nil, false
	}
	return o.BackToBack, true
}

// HasBackToBack returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasBackToBack() bool {
	if o != nil && !IsNil(o.BackToBack) {
		return true
	}

	return false
}

// SetBackToBack gets a reference to the given bool and assigns it to the BackToBack field.
func (o *MemberPointsExceptionType) SetBackToBack(v bool) {
	o.BackToBack = &v
}

// GetAverageRate returns the AverageRate field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetAverageRate() float32 {
	if o == nil || IsNil(o.AverageRate) {
		var ret float32
		return ret
	}
	return *o.AverageRate
}

// GetAverageRateOk returns a tuple with the AverageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetAverageRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageRate) {
		return nil, false
	}
	return o.AverageRate, true
}

// HasAverageRate returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasAverageRate() bool {
	if o != nil && !IsNil(o.AverageRate) {
		return true
	}

	return false
}

// SetAverageRate gets a reference to the given float32 and assigns it to the AverageRate field.
func (o *MemberPointsExceptionType) SetAverageRate(v float32) {
	o.AverageRate = &v
}

// GetAwardPoints returns the AwardPoints field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetAwardPoints() float32 {
	if o == nil || IsNil(o.AwardPoints) {
		var ret float32
		return ret
	}
	return *o.AwardPoints
}

// GetAwardPointsOk returns a tuple with the AwardPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetAwardPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardPoints) {
		return nil, false
	}
	return o.AwardPoints, true
}

// HasAwardPoints returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasAwardPoints() bool {
	if o != nil && !IsNil(o.AwardPoints) {
		return true
	}

	return false
}

// SetAwardPoints gets a reference to the given float32 and assigns it to the AwardPoints field.
func (o *MemberPointsExceptionType) SetAwardPoints(v float32) {
	o.AwardPoints = &v
}

// GetTierNightPoints returns the TierNightPoints field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetTierNightPoints() float32 {
	if o == nil || IsNil(o.TierNightPoints) {
		var ret float32
		return ret
	}
	return *o.TierNightPoints
}

// GetTierNightPointsOk returns a tuple with the TierNightPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetTierNightPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TierNightPoints) {
		return nil, false
	}
	return o.TierNightPoints, true
}

// HasTierNightPoints returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasTierNightPoints() bool {
	if o != nil && !IsNil(o.TierNightPoints) {
		return true
	}

	return false
}

// SetTierNightPoints gets a reference to the given float32 and assigns it to the TierNightPoints field.
func (o *MemberPointsExceptionType) SetTierNightPoints(v float32) {
	o.TierNightPoints = &v
}

// GetTierStayPoints returns the TierStayPoints field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetTierStayPoints() float32 {
	if o == nil || IsNil(o.TierStayPoints) {
		var ret float32
		return ret
	}
	return *o.TierStayPoints
}

// GetTierStayPointsOk returns a tuple with the TierStayPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetTierStayPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TierStayPoints) {
		return nil, false
	}
	return o.TierStayPoints, true
}

// HasTierStayPoints returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasTierStayPoints() bool {
	if o != nil && !IsNil(o.TierStayPoints) {
		return true
	}

	return false
}

// SetTierStayPoints gets a reference to the given float32 and assigns it to the TierStayPoints field.
func (o *MemberPointsExceptionType) SetTierStayPoints(v float32) {
	o.TierStayPoints = &v
}

// GetTierRevenuePoints returns the TierRevenuePoints field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetTierRevenuePoints() float32 {
	if o == nil || IsNil(o.TierRevenuePoints) {
		var ret float32
		return ret
	}
	return *o.TierRevenuePoints
}

// GetTierRevenuePointsOk returns a tuple with the TierRevenuePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetTierRevenuePointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TierRevenuePoints) {
		return nil, false
	}
	return o.TierRevenuePoints, true
}

// HasTierRevenuePoints returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasTierRevenuePoints() bool {
	if o != nil && !IsNil(o.TierRevenuePoints) {
		return true
	}

	return false
}

// SetTierRevenuePoints gets a reference to the given float32 and assigns it to the TierRevenuePoints field.
func (o *MemberPointsExceptionType) SetTierRevenuePoints(v float32) {
	o.TierRevenuePoints = &v
}

// GetPointsCalculate returns the PointsCalculate field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetPointsCalculate() bool {
	if o == nil || IsNil(o.PointsCalculate) {
		var ret bool
		return ret
	}
	return *o.PointsCalculate
}

// GetPointsCalculateOk returns a tuple with the PointsCalculate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetPointsCalculateOk() (*bool, bool) {
	if o == nil || IsNil(o.PointsCalculate) {
		return nil, false
	}
	return o.PointsCalculate, true
}

// HasPointsCalculate returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasPointsCalculate() bool {
	if o != nil && !IsNil(o.PointsCalculate) {
		return true
	}

	return false
}

// SetPointsCalculate gets a reference to the given bool and assigns it to the PointsCalculate field.
func (o *MemberPointsExceptionType) SetPointsCalculate(v bool) {
	o.PointsCalculate = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *MemberPointsExceptionType) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

// GetProcessingMessages returns the ProcessingMessages field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetProcessingMessages() string {
	if o == nil || IsNil(o.ProcessingMessages) {
		var ret string
		return ret
	}
	return *o.ProcessingMessages
}

// GetProcessingMessagesOk returns a tuple with the ProcessingMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetProcessingMessagesOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingMessages) {
		return nil, false
	}
	return o.ProcessingMessages, true
}

// HasProcessingMessages returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasProcessingMessages() bool {
	if o != nil && !IsNil(o.ProcessingMessages) {
		return true
	}

	return false
}

// SetProcessingMessages gets a reference to the given string and assigns it to the ProcessingMessages field.
func (o *MemberPointsExceptionType) SetProcessingMessages(v string) {
	o.ProcessingMessages = &v
}

// GetExceptionStatus returns the ExceptionStatus field value if set, zero value otherwise.
func (o *MemberPointsExceptionType) GetExceptionStatus() MembershipExceptionStatusType {
	if o == nil || IsNil(o.ExceptionStatus) {
		var ret MembershipExceptionStatusType
		return ret
	}
	return *o.ExceptionStatus
}

// GetExceptionStatusOk returns a tuple with the ExceptionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberPointsExceptionType) GetExceptionStatusOk() (*MembershipExceptionStatusType, bool) {
	if o == nil || IsNil(o.ExceptionStatus) {
		return nil, false
	}
	return o.ExceptionStatus, true
}

// HasExceptionStatus returns a boolean if a field has been set.
func (o *MemberPointsExceptionType) HasExceptionStatus() bool {
	if o != nil && !IsNil(o.ExceptionStatus) {
		return true
	}

	return false
}

// SetExceptionStatus gets a reference to the given MembershipExceptionStatusType and assigns it to the ExceptionStatus field.
func (o *MemberPointsExceptionType) SetExceptionStatus(v MembershipExceptionStatusType) {
	o.ExceptionStatus = &v
}

func (o MemberPointsExceptionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberPointsExceptionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.FromToRangeDate) {
		toSerialize["fromToRangeDate"] = o.FromToRangeDate
	}
	if !IsNil(o.MembershipIdNo) {
		toSerialize["membershipIdNo"] = o.MembershipIdNo
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.MembershipCardNo) {
		toSerialize["membershipCardNo"] = o.MembershipCardNo
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.MembershipTransactionId) {
		toSerialize["membershipTransactionId"] = o.MembershipTransactionId
	}
	if !IsNil(o.RoomsBooked) {
		toSerialize["roomsBooked"] = o.RoomsBooked
	}
	if !IsNil(o.BackToBack) {
		toSerialize["backToBack"] = o.BackToBack
	}
	if !IsNil(o.AverageRate) {
		toSerialize["averageRate"] = o.AverageRate
	}
	if !IsNil(o.AwardPoints) {
		toSerialize["awardPoints"] = o.AwardPoints
	}
	if !IsNil(o.TierNightPoints) {
		toSerialize["tierNightPoints"] = o.TierNightPoints
	}
	if !IsNil(o.TierStayPoints) {
		toSerialize["tierStayPoints"] = o.TierStayPoints
	}
	if !IsNil(o.TierRevenuePoints) {
		toSerialize["tierRevenuePoints"] = o.TierRevenuePoints
	}
	if !IsNil(o.PointsCalculate) {
		toSerialize["pointsCalculate"] = o.PointsCalculate
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	if !IsNil(o.ProcessingMessages) {
		toSerialize["processingMessages"] = o.ProcessingMessages
	}
	if !IsNil(o.ExceptionStatus) {
		toSerialize["exceptionStatus"] = o.ExceptionStatus
	}
	return toSerialize, nil
}

type NullableMemberPointsExceptionType struct {
	value *MemberPointsExceptionType
	isSet bool
}

func (v NullableMemberPointsExceptionType) Get() *MemberPointsExceptionType {
	return v.value
}

func (v *NullableMemberPointsExceptionType) Set(val *MemberPointsExceptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberPointsExceptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberPointsExceptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberPointsExceptionType(val *MemberPointsExceptionType) *NullableMemberPointsExceptionType {
	return &NullableMemberPointsExceptionType{value: val, isSet: true}
}

func (v NullableMemberPointsExceptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberPointsExceptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


