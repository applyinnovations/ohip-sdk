/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the IssueAwardInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueAwardInfoType{}

// IssueAwardInfoType Information about issue award.
type IssueAwardInfoType struct {
	// The number of points that must be redeemed for this award.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// The award points that will be forfeited if the cancel penalty charge is applied.
	CancelPenaltyPoints *float32 `json:"cancelPenaltyPoints,omitempty"`
	// Number of days before arrival when a reservation may be cancelled without an award points penalty.
	CancelPenaltyDays *float32 `json:"cancelPenaltyDays,omitempty"`
	// An identifying number of the award, assigned by the system when the award was issued.
	AwardNumber *float32 `json:"awardNumber,omitempty"`
	// Package/Product code for the award.
	PackageCode *string `json:"packageCode,omitempty"`
	// The date of the reservation associated with the award. There may be more than one date (multiple nights) associated with award.
	StayDate *string `json:"stayDate,omitempty"`
}

// NewIssueAwardInfoType instantiates a new IssueAwardInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueAwardInfoType() *IssueAwardInfoType {
	this := IssueAwardInfoType{}
	return &this
}

// NewIssueAwardInfoTypeWithDefaults instantiates a new IssueAwardInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueAwardInfoTypeWithDefaults() *IssueAwardInfoType {
	this := IssueAwardInfoType{}
	return &this
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *IssueAwardInfoType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueAwardInfoType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *IssueAwardInfoType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *IssueAwardInfoType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetCancelPenaltyPoints returns the CancelPenaltyPoints field value if set, zero value otherwise.
func (o *IssueAwardInfoType) GetCancelPenaltyPoints() float32 {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyPoints
}

// GetCancelPenaltyPointsOk returns a tuple with the CancelPenaltyPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueAwardInfoType) GetCancelPenaltyPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		return nil, false
	}
	return o.CancelPenaltyPoints, true
}

// HasCancelPenaltyPoints returns a boolean if a field has been set.
func (o *IssueAwardInfoType) HasCancelPenaltyPoints() bool {
	if o != nil && !IsNil(o.CancelPenaltyPoints) {
		return true
	}

	return false
}

// SetCancelPenaltyPoints gets a reference to the given float32 and assigns it to the CancelPenaltyPoints field.
func (o *IssueAwardInfoType) SetCancelPenaltyPoints(v float32) {
	o.CancelPenaltyPoints = &v
}

// GetCancelPenaltyDays returns the CancelPenaltyDays field value if set, zero value otherwise.
func (o *IssueAwardInfoType) GetCancelPenaltyDays() float32 {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyDays
}

// GetCancelPenaltyDaysOk returns a tuple with the CancelPenaltyDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueAwardInfoType) GetCancelPenaltyDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		return nil, false
	}
	return o.CancelPenaltyDays, true
}

// HasCancelPenaltyDays returns a boolean if a field has been set.
func (o *IssueAwardInfoType) HasCancelPenaltyDays() bool {
	if o != nil && !IsNil(o.CancelPenaltyDays) {
		return true
	}

	return false
}

// SetCancelPenaltyDays gets a reference to the given float32 and assigns it to the CancelPenaltyDays field.
func (o *IssueAwardInfoType) SetCancelPenaltyDays(v float32) {
	o.CancelPenaltyDays = &v
}

// GetAwardNumber returns the AwardNumber field value if set, zero value otherwise.
func (o *IssueAwardInfoType) GetAwardNumber() float32 {
	if o == nil || IsNil(o.AwardNumber) {
		var ret float32
		return ret
	}
	return *o.AwardNumber
}

// GetAwardNumberOk returns a tuple with the AwardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueAwardInfoType) GetAwardNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardNumber) {
		return nil, false
	}
	return o.AwardNumber, true
}

// HasAwardNumber returns a boolean if a field has been set.
func (o *IssueAwardInfoType) HasAwardNumber() bool {
	if o != nil && !IsNil(o.AwardNumber) {
		return true
	}

	return false
}

// SetAwardNumber gets a reference to the given float32 and assigns it to the AwardNumber field.
func (o *IssueAwardInfoType) SetAwardNumber(v float32) {
	o.AwardNumber = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *IssueAwardInfoType) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueAwardInfoType) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *IssueAwardInfoType) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *IssueAwardInfoType) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetStayDate returns the StayDate field value if set, zero value otherwise.
func (o *IssueAwardInfoType) GetStayDate() string {
	if o == nil || IsNil(o.StayDate) {
		var ret string
		return ret
	}
	return *o.StayDate
}

// GetStayDateOk returns a tuple with the StayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueAwardInfoType) GetStayDateOk() (*string, bool) {
	if o == nil || IsNil(o.StayDate) {
		return nil, false
	}
	return o.StayDate, true
}

// HasStayDate returns a boolean if a field has been set.
func (o *IssueAwardInfoType) HasStayDate() bool {
	if o != nil && !IsNil(o.StayDate) {
		return true
	}

	return false
}

// SetStayDate gets a reference to the given string and assigns it to the StayDate field.
func (o *IssueAwardInfoType) SetStayDate(v string) {
	o.StayDate = &v
}

func (o IssueAwardInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueAwardInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.CancelPenaltyPoints) {
		toSerialize["cancelPenaltyPoints"] = o.CancelPenaltyPoints
	}
	if !IsNil(o.CancelPenaltyDays) {
		toSerialize["cancelPenaltyDays"] = o.CancelPenaltyDays
	}
	if !IsNil(o.AwardNumber) {
		toSerialize["awardNumber"] = o.AwardNumber
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.StayDate) {
		toSerialize["stayDate"] = o.StayDate
	}
	return toSerialize, nil
}

type NullableIssueAwardInfoType struct {
	value *IssueAwardInfoType
	isSet bool
}

func (v NullableIssueAwardInfoType) Get() *IssueAwardInfoType {
	return v.value
}

func (v *NullableIssueAwardInfoType) Set(val *IssueAwardInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueAwardInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueAwardInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueAwardInfoType(val *IssueAwardInfoType) *NullableIssueAwardInfoType {
	return &NullableIssueAwardInfoType{value: val, isSet: true}
}

func (v NullableIssueAwardInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueAwardInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


