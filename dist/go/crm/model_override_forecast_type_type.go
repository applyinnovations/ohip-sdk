/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// OverrideForecastTypeType Defines values for OverrideForecastType.
type OverrideForecastTypeType string

// List of overrideForecastTypeType
const (
	OVERRIDEFORECASTTYPETYPE_DEFAULT OverrideForecastTypeType = "Default"
	OVERRIDEFORECASTTYPETYPE_OVERRIDE OverrideForecastTypeType = "Override"
	OVERRIDEFORECASTTYPETYPE_DO_NOT_OVERRIDE OverrideForecastTypeType = "DoNotOverride"
)

// All allowed values of OverrideForecastTypeType enum
var AllowedOverrideForecastTypeTypeEnumValues = []OverrideForecastTypeType{
	"Default",
	"Override",
	"DoNotOverride",
}

func (v *OverrideForecastTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OverrideForecastTypeType(value)
	for _, existing := range AllowedOverrideForecastTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OverrideForecastTypeType", value)
}

// NewOverrideForecastTypeTypeFromValue returns a pointer to a valid OverrideForecastTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOverrideForecastTypeTypeFromValue(v string) (*OverrideForecastTypeType, error) {
	ev := OverrideForecastTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OverrideForecastTypeType: valid values are %v", v, AllowedOverrideForecastTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OverrideForecastTypeType) IsValid() bool {
	for _, existing := range AllowedOverrideForecastTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to overrideForecastTypeType value
func (v OverrideForecastTypeType) Ptr() *OverrideForecastTypeType {
	return &v
}

type NullableOverrideForecastTypeType struct {
	value *OverrideForecastTypeType
	isSet bool
}

func (v NullableOverrideForecastTypeType) Get() *OverrideForecastTypeType {
	return v.value
}

func (v *NullableOverrideForecastTypeType) Set(val *OverrideForecastTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableOverrideForecastTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableOverrideForecastTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverrideForecastTypeType(val *OverrideForecastTypeType) *NullableOverrideForecastTypeType {
	return &NullableOverrideForecastTypeType{value: val, isSet: true}
}

func (v NullableOverrideForecastTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverrideForecastTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

