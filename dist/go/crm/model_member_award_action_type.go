/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// MemberAwardActionType Specify whether award is to issue, cancel or update.
type MemberAwardActionType string

// List of memberAwardActionType
const (
	MEMBERAWARDACTIONTYPE_ISSUE MemberAwardActionType = "Issue"
	MEMBERAWARDACTIONTYPE_CANCEL MemberAwardActionType = "Cancel"
	MEMBERAWARDACTIONTYPE_INFO_UPDATE MemberAwardActionType = "InfoUpdate"
)

// All allowed values of MemberAwardActionType enum
var AllowedMemberAwardActionTypeEnumValues = []MemberAwardActionType{
	"Issue",
	"Cancel",
	"InfoUpdate",
}

func (v *MemberAwardActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberAwardActionType(value)
	for _, existing := range AllowedMemberAwardActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberAwardActionType", value)
}

// NewMemberAwardActionTypeFromValue returns a pointer to a valid MemberAwardActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberAwardActionTypeFromValue(v string) (*MemberAwardActionType, error) {
	ev := MemberAwardActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberAwardActionType: valid values are %v", v, AllowedMemberAwardActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberAwardActionType) IsValid() bool {
	for _, existing := range AllowedMemberAwardActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to memberAwardActionType value
func (v MemberAwardActionType) Ptr() *MemberAwardActionType {
	return &v
}

type NullableMemberAwardActionType struct {
	value *MemberAwardActionType
	isSet bool
}

func (v NullableMemberAwardActionType) Get() *MemberAwardActionType {
	return v.value
}

func (v *NullableMemberAwardActionType) Set(val *MemberAwardActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberAwardActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberAwardActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberAwardActionType(val *MemberAwardActionType) *NullableMemberAwardActionType {
	return &NullableMemberAwardActionType{value: val, isSet: true}
}

func (v NullableMemberAwardActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberAwardActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

