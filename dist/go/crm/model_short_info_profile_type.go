/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ShortInfoProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShortInfoProfileType{}

// ShortInfoProfileType This type contains short information of a profile.
type ShortInfoProfileType struct {
	// Unique id for the profile.
	NameId *string `json:"nameId,omitempty"`
	// Name that will be displayed for the profile, it is the combination of last name and first name of a profile.
	DisplayName *string `json:"displayName,omitempty"`
	// Corporate id of the profile.
	ClientId *string `json:"clientId,omitempty"`
}

// NewShortInfoProfileType instantiates a new ShortInfoProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortInfoProfileType() *ShortInfoProfileType {
	this := ShortInfoProfileType{}
	return &this
}

// NewShortInfoProfileTypeWithDefaults instantiates a new ShortInfoProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortInfoProfileTypeWithDefaults() *ShortInfoProfileType {
	this := ShortInfoProfileType{}
	return &this
}

// GetNameId returns the NameId field value if set, zero value otherwise.
func (o *ShortInfoProfileType) GetNameId() string {
	if o == nil || IsNil(o.NameId) {
		var ret string
		return ret
	}
	return *o.NameId
}

// GetNameIdOk returns a tuple with the NameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortInfoProfileType) GetNameIdOk() (*string, bool) {
	if o == nil || IsNil(o.NameId) {
		return nil, false
	}
	return o.NameId, true
}

// HasNameId returns a boolean if a field has been set.
func (o *ShortInfoProfileType) HasNameId() bool {
	if o != nil && !IsNil(o.NameId) {
		return true
	}

	return false
}

// SetNameId gets a reference to the given string and assigns it to the NameId field.
func (o *ShortInfoProfileType) SetNameId(v string) {
	o.NameId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ShortInfoProfileType) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortInfoProfileType) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ShortInfoProfileType) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ShortInfoProfileType) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *ShortInfoProfileType) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortInfoProfileType) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *ShortInfoProfileType) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *ShortInfoProfileType) SetClientId(v string) {
	o.ClientId = &v
}

func (o ShortInfoProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShortInfoProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NameId) {
		toSerialize["nameId"] = o.NameId
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	return toSerialize, nil
}

type NullableShortInfoProfileType struct {
	value *ShortInfoProfileType
	isSet bool
}

func (v NullableShortInfoProfileType) Get() *ShortInfoProfileType {
	return v.value
}

func (v *NullableShortInfoProfileType) Set(val *ShortInfoProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableShortInfoProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableShortInfoProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortInfoProfileType(val *ShortInfoProfileType) *NullableShortInfoProfileType {
	return &NullableShortInfoProfileType{value: val, isSet: true}
}

func (v NullableShortInfoProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortInfoProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


