/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// StagedProfileProcessType the model 'StagedProfileProcessType'
type StagedProfileProcessType string

// List of stagedProfileProcessType
const (
	STAGEDPROFILEPROCESSTYPE_NEW StagedProfileProcessType = "New"
	STAGEDPROFILEPROCESSTYPE_MATCH StagedProfileProcessType = "Match"
	STAGEDPROFILEPROCESSTYPE_REPROCESS StagedProfileProcessType = "Reprocess"
	STAGEDPROFILEPROCESSTYPE_FORCE_MERGE StagedProfileProcessType = "ForceMerge"
)

// All allowed values of StagedProfileProcessType enum
var AllowedStagedProfileProcessTypeEnumValues = []StagedProfileProcessType{
	"New",
	"Match",
	"Reprocess",
	"ForceMerge",
}

func (v *StagedProfileProcessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StagedProfileProcessType(value)
	for _, existing := range AllowedStagedProfileProcessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StagedProfileProcessType", value)
}

// NewStagedProfileProcessTypeFromValue returns a pointer to a valid StagedProfileProcessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStagedProfileProcessTypeFromValue(v string) (*StagedProfileProcessType, error) {
	ev := StagedProfileProcessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StagedProfileProcessType: valid values are %v", v, AllowedStagedProfileProcessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StagedProfileProcessType) IsValid() bool {
	for _, existing := range AllowedStagedProfileProcessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to stagedProfileProcessType value
func (v StagedProfileProcessType) Ptr() *StagedProfileProcessType {
	return &v
}

type NullableStagedProfileProcessType struct {
	value *StagedProfileProcessType
	isSet bool
}

func (v NullableStagedProfileProcessType) Get() *StagedProfileProcessType {
	return v.value
}

func (v *NullableStagedProfileProcessType) Set(val *StagedProfileProcessType) {
	v.value = val
	v.isSet = true
}

func (v NullableStagedProfileProcessType) IsSet() bool {
	return v.isSet
}

func (v *NullableStagedProfileProcessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStagedProfileProcessType(val *StagedProfileProcessType) *NullableStagedProfileProcessType {
	return &NullableStagedProfileProcessType{value: val, isSet: true}
}

func (v NullableStagedProfileProcessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStagedProfileProcessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

