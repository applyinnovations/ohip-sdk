/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// MembershipPointsCalculationProcessType Issuing awards for guests belonging to a membership type, with a specific award code that is of Other type.
type MembershipPointsCalculationProcessType string

// List of membershipPointsCalculationProcessType
const (
	MEMBERSHIPPOINTSCALCULATIONPROCESSTYPE_CALCULATE_POINTS MembershipPointsCalculationProcessType = "CalculatePoints"
	MEMBERSHIPPOINTSCALCULATIONPROCESSTYPE_EXPIRE_POINTS MembershipPointsCalculationProcessType = "ExpirePoints"
	MEMBERSHIPPOINTSCALCULATIONPROCESSTYPE_ISSUE_AWARDS MembershipPointsCalculationProcessType = "IssueAwards"
)

// All allowed values of MembershipPointsCalculationProcessType enum
var AllowedMembershipPointsCalculationProcessTypeEnumValues = []MembershipPointsCalculationProcessType{
	"CalculatePoints",
	"ExpirePoints",
	"IssueAwards",
}

func (v *MembershipPointsCalculationProcessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MembershipPointsCalculationProcessType(value)
	for _, existing := range AllowedMembershipPointsCalculationProcessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MembershipPointsCalculationProcessType", value)
}

// NewMembershipPointsCalculationProcessTypeFromValue returns a pointer to a valid MembershipPointsCalculationProcessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMembershipPointsCalculationProcessTypeFromValue(v string) (*MembershipPointsCalculationProcessType, error) {
	ev := MembershipPointsCalculationProcessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MembershipPointsCalculationProcessType: valid values are %v", v, AllowedMembershipPointsCalculationProcessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MembershipPointsCalculationProcessType) IsValid() bool {
	for _, existing := range AllowedMembershipPointsCalculationProcessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to membershipPointsCalculationProcessType value
func (v MembershipPointsCalculationProcessType) Ptr() *MembershipPointsCalculationProcessType {
	return &v
}

type NullableMembershipPointsCalculationProcessType struct {
	value *MembershipPointsCalculationProcessType
	isSet bool
}

func (v NullableMembershipPointsCalculationProcessType) Get() *MembershipPointsCalculationProcessType {
	return v.value
}

func (v *NullableMembershipPointsCalculationProcessType) Set(val *MembershipPointsCalculationProcessType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipPointsCalculationProcessType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipPointsCalculationProcessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipPointsCalculationProcessType(val *MembershipPointsCalculationProcessType) *NullableMembershipPointsCalculationProcessType {
	return &NullableMembershipPointsCalculationProcessType{value: val, isSet: true}
}

func (v NullableMembershipPointsCalculationProcessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipPointsCalculationProcessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

