/*
OPERA Cloud Customer Relationship Management API

Testing ProfileApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package crm

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/crm"
)

func Test_crm_ProfileApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProfileApiService DeleteProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.DeleteProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetCompanyProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var corporateID string

		resp, httpRes, err := apiClient.ProfileApi.GetCompanyProfile(context.Background(), corporateID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetGuestProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestId string

		resp, httpRes, err := apiClient.ProfileApi.GetGuestProfile(context.Background(), guestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileExternalId string
		var extSystemCode string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileByExtId(context.Background(), profileExternalId, extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfileRelationships", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetProfileRelationships(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.GetProfiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService GetStayHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.GetStayHistory(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService MergeProfiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var survivorProfileId string

		resp, httpRes, err := apiClient.ProfileApi.MergeProfiles(context.Background(), survivorProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostCompanyProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.PostCompanyProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostGuestProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.PostGuestProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfileApi.PostProfile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PostProfileRelationship", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetProfileId string
		var sourceProfileId string

		resp, httpRes, err := apiClient.ProfileApi.PostProfileRelationship(context.Background(), targetProfileId, sourceProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PutProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.PutProfile(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService PutProfileRelationship", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetProfileId string
		var sourceProfileId string

		resp, httpRes, err := apiClient.ProfileApi.PutProfileRelationship(context.Background(), targetProfileId, sourceProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService RemoveProfileRelationship", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var targetProfileId string
		var sourceProfileId string

		resp, httpRes, err := apiClient.ProfileApi.RemoveProfileRelationship(context.Background(), targetProfileId, sourceProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileApiService StoreEmail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ProfileApi.StoreEmail(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
