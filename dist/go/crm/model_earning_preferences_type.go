/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the EarningPreferencesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EarningPreferencesType{}

// EarningPreferencesType Indicates guest's rewards earning preferences.
type EarningPreferencesType struct {
	// Indicates the earning preference, Points or Miles.
	EarningPreference *string `json:"earningPreference,omitempty"`
	// Indicates preferred airline code and name.
	Airline *string `json:"airline,omitempty"`
	// Indicates frequent flyer's number of the guest.
	FrequentFlyerNumber *string `json:"frequentFlyerNumber,omitempty"`
}

// NewEarningPreferencesType instantiates a new EarningPreferencesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEarningPreferencesType() *EarningPreferencesType {
	this := EarningPreferencesType{}
	return &this
}

// NewEarningPreferencesTypeWithDefaults instantiates a new EarningPreferencesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEarningPreferencesTypeWithDefaults() *EarningPreferencesType {
	this := EarningPreferencesType{}
	return &this
}

// GetEarningPreference returns the EarningPreference field value if set, zero value otherwise.
func (o *EarningPreferencesType) GetEarningPreference() string {
	if o == nil || IsNil(o.EarningPreference) {
		var ret string
		return ret
	}
	return *o.EarningPreference
}

// GetEarningPreferenceOk returns a tuple with the EarningPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningPreferencesType) GetEarningPreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.EarningPreference) {
		return nil, false
	}
	return o.EarningPreference, true
}

// HasEarningPreference returns a boolean if a field has been set.
func (o *EarningPreferencesType) HasEarningPreference() bool {
	if o != nil && !IsNil(o.EarningPreference) {
		return true
	}

	return false
}

// SetEarningPreference gets a reference to the given string and assigns it to the EarningPreference field.
func (o *EarningPreferencesType) SetEarningPreference(v string) {
	o.EarningPreference = &v
}

// GetAirline returns the Airline field value if set, zero value otherwise.
func (o *EarningPreferencesType) GetAirline() string {
	if o == nil || IsNil(o.Airline) {
		var ret string
		return ret
	}
	return *o.Airline
}

// GetAirlineOk returns a tuple with the Airline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningPreferencesType) GetAirlineOk() (*string, bool) {
	if o == nil || IsNil(o.Airline) {
		return nil, false
	}
	return o.Airline, true
}

// HasAirline returns a boolean if a field has been set.
func (o *EarningPreferencesType) HasAirline() bool {
	if o != nil && !IsNil(o.Airline) {
		return true
	}

	return false
}

// SetAirline gets a reference to the given string and assigns it to the Airline field.
func (o *EarningPreferencesType) SetAirline(v string) {
	o.Airline = &v
}

// GetFrequentFlyerNumber returns the FrequentFlyerNumber field value if set, zero value otherwise.
func (o *EarningPreferencesType) GetFrequentFlyerNumber() string {
	if o == nil || IsNil(o.FrequentFlyerNumber) {
		var ret string
		return ret
	}
	return *o.FrequentFlyerNumber
}

// GetFrequentFlyerNumberOk returns a tuple with the FrequentFlyerNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningPreferencesType) GetFrequentFlyerNumberOk() (*string, bool) {
	if o == nil || IsNil(o.FrequentFlyerNumber) {
		return nil, false
	}
	return o.FrequentFlyerNumber, true
}

// HasFrequentFlyerNumber returns a boolean if a field has been set.
func (o *EarningPreferencesType) HasFrequentFlyerNumber() bool {
	if o != nil && !IsNil(o.FrequentFlyerNumber) {
		return true
	}

	return false
}

// SetFrequentFlyerNumber gets a reference to the given string and assigns it to the FrequentFlyerNumber field.
func (o *EarningPreferencesType) SetFrequentFlyerNumber(v string) {
	o.FrequentFlyerNumber = &v
}

func (o EarningPreferencesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EarningPreferencesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EarningPreference) {
		toSerialize["earningPreference"] = o.EarningPreference
	}
	if !IsNil(o.Airline) {
		toSerialize["airline"] = o.Airline
	}
	if !IsNil(o.FrequentFlyerNumber) {
		toSerialize["frequentFlyerNumber"] = o.FrequentFlyerNumber
	}
	return toSerialize, nil
}

type NullableEarningPreferencesType struct {
	value *EarningPreferencesType
	isSet bool
}

func (v NullableEarningPreferencesType) Get() *EarningPreferencesType {
	return v.value
}

func (v *NullableEarningPreferencesType) Set(val *EarningPreferencesType) {
	v.value = val
	v.isSet = true
}

func (v NullableEarningPreferencesType) IsSet() bool {
	return v.isSet
}

func (v *NullableEarningPreferencesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarningPreferencesType(val *EarningPreferencesType) *NullableEarningPreferencesType {
	return &NullableEarningPreferencesType{value: val, isSet: true}
}

func (v NullableEarningPreferencesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarningPreferencesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


