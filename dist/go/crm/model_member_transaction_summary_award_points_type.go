/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MemberTransactionSummaryAwardPointsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberTransactionSummaryAwardPointsType{}

// MemberTransactionSummaryAwardPointsType Items summary associated with award points.
type MemberTransactionSummaryAwardPointsType struct {
	BasePoints *TransactionSummaryAttributeType `json:"basePoints,omitempty"`
	BonusPoints *TransactionSummaryAttributeType `json:"bonusPoints,omitempty"`
	MiscPoints *TransactionSummaryAttributeType `json:"miscPoints,omitempty"`
	TotalPoints *TransactionSummaryAttributeType `json:"totalPoints,omitempty"`
}

// NewMemberTransactionSummaryAwardPointsType instantiates a new MemberTransactionSummaryAwardPointsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberTransactionSummaryAwardPointsType() *MemberTransactionSummaryAwardPointsType {
	this := MemberTransactionSummaryAwardPointsType{}
	return &this
}

// NewMemberTransactionSummaryAwardPointsTypeWithDefaults instantiates a new MemberTransactionSummaryAwardPointsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberTransactionSummaryAwardPointsTypeWithDefaults() *MemberTransactionSummaryAwardPointsType {
	this := MemberTransactionSummaryAwardPointsType{}
	return &this
}

// GetBasePoints returns the BasePoints field value if set, zero value otherwise.
func (o *MemberTransactionSummaryAwardPointsType) GetBasePoints() TransactionSummaryAttributeType {
	if o == nil || IsNil(o.BasePoints) {
		var ret TransactionSummaryAttributeType
		return ret
	}
	return *o.BasePoints
}

// GetBasePointsOk returns a tuple with the BasePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionSummaryAwardPointsType) GetBasePointsOk() (*TransactionSummaryAttributeType, bool) {
	if o == nil || IsNil(o.BasePoints) {
		return nil, false
	}
	return o.BasePoints, true
}

// HasBasePoints returns a boolean if a field has been set.
func (o *MemberTransactionSummaryAwardPointsType) HasBasePoints() bool {
	if o != nil && !IsNil(o.BasePoints) {
		return true
	}

	return false
}

// SetBasePoints gets a reference to the given TransactionSummaryAttributeType and assigns it to the BasePoints field.
func (o *MemberTransactionSummaryAwardPointsType) SetBasePoints(v TransactionSummaryAttributeType) {
	o.BasePoints = &v
}

// GetBonusPoints returns the BonusPoints field value if set, zero value otherwise.
func (o *MemberTransactionSummaryAwardPointsType) GetBonusPoints() TransactionSummaryAttributeType {
	if o == nil || IsNil(o.BonusPoints) {
		var ret TransactionSummaryAttributeType
		return ret
	}
	return *o.BonusPoints
}

// GetBonusPointsOk returns a tuple with the BonusPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionSummaryAwardPointsType) GetBonusPointsOk() (*TransactionSummaryAttributeType, bool) {
	if o == nil || IsNil(o.BonusPoints) {
		return nil, false
	}
	return o.BonusPoints, true
}

// HasBonusPoints returns a boolean if a field has been set.
func (o *MemberTransactionSummaryAwardPointsType) HasBonusPoints() bool {
	if o != nil && !IsNil(o.BonusPoints) {
		return true
	}

	return false
}

// SetBonusPoints gets a reference to the given TransactionSummaryAttributeType and assigns it to the BonusPoints field.
func (o *MemberTransactionSummaryAwardPointsType) SetBonusPoints(v TransactionSummaryAttributeType) {
	o.BonusPoints = &v
}

// GetMiscPoints returns the MiscPoints field value if set, zero value otherwise.
func (o *MemberTransactionSummaryAwardPointsType) GetMiscPoints() TransactionSummaryAttributeType {
	if o == nil || IsNil(o.MiscPoints) {
		var ret TransactionSummaryAttributeType
		return ret
	}
	return *o.MiscPoints
}

// GetMiscPointsOk returns a tuple with the MiscPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionSummaryAwardPointsType) GetMiscPointsOk() (*TransactionSummaryAttributeType, bool) {
	if o == nil || IsNil(o.MiscPoints) {
		return nil, false
	}
	return o.MiscPoints, true
}

// HasMiscPoints returns a boolean if a field has been set.
func (o *MemberTransactionSummaryAwardPointsType) HasMiscPoints() bool {
	if o != nil && !IsNil(o.MiscPoints) {
		return true
	}

	return false
}

// SetMiscPoints gets a reference to the given TransactionSummaryAttributeType and assigns it to the MiscPoints field.
func (o *MemberTransactionSummaryAwardPointsType) SetMiscPoints(v TransactionSummaryAttributeType) {
	o.MiscPoints = &v
}

// GetTotalPoints returns the TotalPoints field value if set, zero value otherwise.
func (o *MemberTransactionSummaryAwardPointsType) GetTotalPoints() TransactionSummaryAttributeType {
	if o == nil || IsNil(o.TotalPoints) {
		var ret TransactionSummaryAttributeType
		return ret
	}
	return *o.TotalPoints
}

// GetTotalPointsOk returns a tuple with the TotalPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionSummaryAwardPointsType) GetTotalPointsOk() (*TransactionSummaryAttributeType, bool) {
	if o == nil || IsNil(o.TotalPoints) {
		return nil, false
	}
	return o.TotalPoints, true
}

// HasTotalPoints returns a boolean if a field has been set.
func (o *MemberTransactionSummaryAwardPointsType) HasTotalPoints() bool {
	if o != nil && !IsNil(o.TotalPoints) {
		return true
	}

	return false
}

// SetTotalPoints gets a reference to the given TransactionSummaryAttributeType and assigns it to the TotalPoints field.
func (o *MemberTransactionSummaryAwardPointsType) SetTotalPoints(v TransactionSummaryAttributeType) {
	o.TotalPoints = &v
}

func (o MemberTransactionSummaryAwardPointsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberTransactionSummaryAwardPointsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BasePoints) {
		toSerialize["basePoints"] = o.BasePoints
	}
	if !IsNil(o.BonusPoints) {
		toSerialize["bonusPoints"] = o.BonusPoints
	}
	if !IsNil(o.MiscPoints) {
		toSerialize["miscPoints"] = o.MiscPoints
	}
	if !IsNil(o.TotalPoints) {
		toSerialize["totalPoints"] = o.TotalPoints
	}
	return toSerialize, nil
}

type NullableMemberTransactionSummaryAwardPointsType struct {
	value *MemberTransactionSummaryAwardPointsType
	isSet bool
}

func (v NullableMemberTransactionSummaryAwardPointsType) Get() *MemberTransactionSummaryAwardPointsType {
	return v.value
}

func (v *NullableMemberTransactionSummaryAwardPointsType) Set(val *MemberTransactionSummaryAwardPointsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberTransactionSummaryAwardPointsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberTransactionSummaryAwardPointsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberTransactionSummaryAwardPointsType(val *MemberTransactionSummaryAwardPointsType) *NullableMemberTransactionSummaryAwardPointsType {
	return &NullableMemberTransactionSummaryAwardPointsType{value: val, isSet: true}
}

func (v NullableMemberTransactionSummaryAwardPointsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberTransactionSummaryAwardPointsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


