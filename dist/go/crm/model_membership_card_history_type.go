/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MembershipCardHistoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipCardHistoryType{}

// MembershipCardHistoryType Contains details of the card history of a member.
type MembershipCardHistoryType struct {
	// Membership Card Number
	MembershipCardNo *string `json:"membershipCardNo,omitempty"`
	// Membership Program Code or Membership Type
	MembershipType *string `json:"membershipType,omitempty"`
}

// NewMembershipCardHistoryType instantiates a new MembershipCardHistoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipCardHistoryType() *MembershipCardHistoryType {
	this := MembershipCardHistoryType{}
	return &this
}

// NewMembershipCardHistoryTypeWithDefaults instantiates a new MembershipCardHistoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipCardHistoryTypeWithDefaults() *MembershipCardHistoryType {
	this := MembershipCardHistoryType{}
	return &this
}

// GetMembershipCardNo returns the MembershipCardNo field value if set, zero value otherwise.
func (o *MembershipCardHistoryType) GetMembershipCardNo() string {
	if o == nil || IsNil(o.MembershipCardNo) {
		var ret string
		return ret
	}
	return *o.MembershipCardNo
}

// GetMembershipCardNoOk returns a tuple with the MembershipCardNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipCardHistoryType) GetMembershipCardNoOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipCardNo) {
		return nil, false
	}
	return o.MembershipCardNo, true
}

// HasMembershipCardNo returns a boolean if a field has been set.
func (o *MembershipCardHistoryType) HasMembershipCardNo() bool {
	if o != nil && !IsNil(o.MembershipCardNo) {
		return true
	}

	return false
}

// SetMembershipCardNo gets a reference to the given string and assigns it to the MembershipCardNo field.
func (o *MembershipCardHistoryType) SetMembershipCardNo(v string) {
	o.MembershipCardNo = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *MembershipCardHistoryType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipCardHistoryType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *MembershipCardHistoryType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *MembershipCardHistoryType) SetMembershipType(v string) {
	o.MembershipType = &v
}

func (o MembershipCardHistoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipCardHistoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipCardNo) {
		toSerialize["membershipCardNo"] = o.MembershipCardNo
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	return toSerialize, nil
}

type NullableMembershipCardHistoryType struct {
	value *MembershipCardHistoryType
	isSet bool
}

func (v NullableMembershipCardHistoryType) Get() *MembershipCardHistoryType {
	return v.value
}

func (v *NullableMembershipCardHistoryType) Set(val *MembershipCardHistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipCardHistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipCardHistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipCardHistoryType(val *MembershipCardHistoryType) *NullableMembershipCardHistoryType {
	return &NullableMembershipCardHistoryType{value: val, isSet: true}
}

func (v NullableMembershipCardHistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipCardHistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


