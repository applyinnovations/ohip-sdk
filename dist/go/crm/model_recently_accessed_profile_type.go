/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the RecentlyAccessedProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecentlyAccessedProfileType{}

// RecentlyAccessedProfileType A recently used profile details.
type RecentlyAccessedProfileType struct {
	// The date the record was accessed.
	AccessDate *string `json:"accessDate,omitempty"`
	// Given name, first name or names
	GuestFirstName *string `json:"guestFirstName,omitempty"`
	// Family name, last name.
	GuestLastName *string `json:"guestLastName,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ProfileIdList []UniqueIDType `json:"profileIdList,omitempty"`
	ProfileType *ProfileTypeType `json:"profileType,omitempty"`
}

// NewRecentlyAccessedProfileType instantiates a new RecentlyAccessedProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecentlyAccessedProfileType() *RecentlyAccessedProfileType {
	this := RecentlyAccessedProfileType{}
	return &this
}

// NewRecentlyAccessedProfileTypeWithDefaults instantiates a new RecentlyAccessedProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecentlyAccessedProfileTypeWithDefaults() *RecentlyAccessedProfileType {
	this := RecentlyAccessedProfileType{}
	return &this
}

// GetAccessDate returns the AccessDate field value if set, zero value otherwise.
func (o *RecentlyAccessedProfileType) GetAccessDate() string {
	if o == nil || IsNil(o.AccessDate) {
		var ret string
		return ret
	}
	return *o.AccessDate
}

// GetAccessDateOk returns a tuple with the AccessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedProfileType) GetAccessDateOk() (*string, bool) {
	if o == nil || IsNil(o.AccessDate) {
		return nil, false
	}
	return o.AccessDate, true
}

// HasAccessDate returns a boolean if a field has been set.
func (o *RecentlyAccessedProfileType) HasAccessDate() bool {
	if o != nil && !IsNil(o.AccessDate) {
		return true
	}

	return false
}

// SetAccessDate gets a reference to the given string and assigns it to the AccessDate field.
func (o *RecentlyAccessedProfileType) SetAccessDate(v string) {
	o.AccessDate = &v
}

// GetGuestFirstName returns the GuestFirstName field value if set, zero value otherwise.
func (o *RecentlyAccessedProfileType) GetGuestFirstName() string {
	if o == nil || IsNil(o.GuestFirstName) {
		var ret string
		return ret
	}
	return *o.GuestFirstName
}

// GetGuestFirstNameOk returns a tuple with the GuestFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedProfileType) GetGuestFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestFirstName) {
		return nil, false
	}
	return o.GuestFirstName, true
}

// HasGuestFirstName returns a boolean if a field has been set.
func (o *RecentlyAccessedProfileType) HasGuestFirstName() bool {
	if o != nil && !IsNil(o.GuestFirstName) {
		return true
	}

	return false
}

// SetGuestFirstName gets a reference to the given string and assigns it to the GuestFirstName field.
func (o *RecentlyAccessedProfileType) SetGuestFirstName(v string) {
	o.GuestFirstName = &v
}

// GetGuestLastName returns the GuestLastName field value if set, zero value otherwise.
func (o *RecentlyAccessedProfileType) GetGuestLastName() string {
	if o == nil || IsNil(o.GuestLastName) {
		var ret string
		return ret
	}
	return *o.GuestLastName
}

// GetGuestLastNameOk returns a tuple with the GuestLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedProfileType) GetGuestLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestLastName) {
		return nil, false
	}
	return o.GuestLastName, true
}

// HasGuestLastName returns a boolean if a field has been set.
func (o *RecentlyAccessedProfileType) HasGuestLastName() bool {
	if o != nil && !IsNil(o.GuestLastName) {
		return true
	}

	return false
}

// SetGuestLastName gets a reference to the given string and assigns it to the GuestLastName field.
func (o *RecentlyAccessedProfileType) SetGuestLastName(v string) {
	o.GuestLastName = &v
}

// GetProfileIdList returns the ProfileIdList field value if set, zero value otherwise.
func (o *RecentlyAccessedProfileType) GetProfileIdList() []UniqueIDType {
	if o == nil || IsNil(o.ProfileIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ProfileIdList
}

// GetProfileIdListOk returns a tuple with the ProfileIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedProfileType) GetProfileIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ProfileIdList) {
		return nil, false
	}
	return o.ProfileIdList, true
}

// HasProfileIdList returns a boolean if a field has been set.
func (o *RecentlyAccessedProfileType) HasProfileIdList() bool {
	if o != nil && !IsNil(o.ProfileIdList) {
		return true
	}

	return false
}

// SetProfileIdList gets a reference to the given []UniqueIDType and assigns it to the ProfileIdList field.
func (o *RecentlyAccessedProfileType) SetProfileIdList(v []UniqueIDType) {
	o.ProfileIdList = v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *RecentlyAccessedProfileType) GetProfileType() ProfileTypeType {
	if o == nil || IsNil(o.ProfileType) {
		var ret ProfileTypeType
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedProfileType) GetProfileTypeOk() (*ProfileTypeType, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *RecentlyAccessedProfileType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given ProfileTypeType and assigns it to the ProfileType field.
func (o *RecentlyAccessedProfileType) SetProfileType(v ProfileTypeType) {
	o.ProfileType = &v
}

func (o RecentlyAccessedProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecentlyAccessedProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessDate) {
		toSerialize["accessDate"] = o.AccessDate
	}
	if !IsNil(o.GuestFirstName) {
		toSerialize["guestFirstName"] = o.GuestFirstName
	}
	if !IsNil(o.GuestLastName) {
		toSerialize["guestLastName"] = o.GuestLastName
	}
	if !IsNil(o.ProfileIdList) {
		toSerialize["profileIdList"] = o.ProfileIdList
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	return toSerialize, nil
}

type NullableRecentlyAccessedProfileType struct {
	value *RecentlyAccessedProfileType
	isSet bool
}

func (v NullableRecentlyAccessedProfileType) Get() *RecentlyAccessedProfileType {
	return v.value
}

func (v *NullableRecentlyAccessedProfileType) Set(val *RecentlyAccessedProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecentlyAccessedProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecentlyAccessedProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecentlyAccessedProfileType(val *RecentlyAccessedProfileType) *NullableRecentlyAccessedProfileType {
	return &NullableRecentlyAccessedProfileType{value: val, isSet: true}
}

func (v NullableRecentlyAccessedProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecentlyAccessedProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


