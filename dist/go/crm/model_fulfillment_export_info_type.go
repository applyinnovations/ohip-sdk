/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the FulfillmentExportInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FulfillmentExportInfoType{}

// FulfillmentExportInfoType This type holds the export log information for the membership fulfillment record.
type FulfillmentExportInfoType struct {
	ExtractLogId *UniqueIDType `json:"extractLogId,omitempty"`
	MembershipId *UniqueIDType `json:"membershipId,omitempty"`
	// The card number for the guest membership.
	MembershipCard *string `json:"membershipCard,omitempty"`
	// ExtractCode of the membership fulfillment export logs.
	ExtractCode *string `json:"extractCode,omitempty"`
	// ExtractDate of the membership fulfillment export logs.
	ExtractDate *string `json:"extractDate,omitempty"`
	DeliveryStatus *ExportLogsDeliveryStatusType `json:"deliveryStatus,omitempty"`
	ExtractId *UniqueIDType `json:"extractId,omitempty"`
	ExtractBatchId *UniqueIDType `json:"extractBatchId,omitempty"`
	// To exclude the extract record from membership exports. Once the membership export has run, this check box will be grayed out and the extract batch Id will be populated in the Extract Batch Id read-only field.
	ExcludeExtract *bool `json:"excludeExtract,omitempty"`
}

// NewFulfillmentExportInfoType instantiates a new FulfillmentExportInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFulfillmentExportInfoType() *FulfillmentExportInfoType {
	this := FulfillmentExportInfoType{}
	return &this
}

// NewFulfillmentExportInfoTypeWithDefaults instantiates a new FulfillmentExportInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFulfillmentExportInfoTypeWithDefaults() *FulfillmentExportInfoType {
	this := FulfillmentExportInfoType{}
	return &this
}

// GetExtractLogId returns the ExtractLogId field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetExtractLogId() UniqueIDType {
	if o == nil || IsNil(o.ExtractLogId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExtractLogId
}

// GetExtractLogIdOk returns a tuple with the ExtractLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetExtractLogIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExtractLogId) {
		return nil, false
	}
	return o.ExtractLogId, true
}

// HasExtractLogId returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasExtractLogId() bool {
	if o != nil && !IsNil(o.ExtractLogId) {
		return true
	}

	return false
}

// SetExtractLogId gets a reference to the given UniqueIDType and assigns it to the ExtractLogId field.
func (o *FulfillmentExportInfoType) SetExtractLogId(v UniqueIDType) {
	o.ExtractLogId = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetMembershipId() UniqueIDType {
	if o == nil || IsNil(o.MembershipId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetMembershipIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given UniqueIDType and assigns it to the MembershipId field.
func (o *FulfillmentExportInfoType) SetMembershipId(v UniqueIDType) {
	o.MembershipId = &v
}

// GetMembershipCard returns the MembershipCard field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetMembershipCard() string {
	if o == nil || IsNil(o.MembershipCard) {
		var ret string
		return ret
	}
	return *o.MembershipCard
}

// GetMembershipCardOk returns a tuple with the MembershipCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetMembershipCardOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipCard) {
		return nil, false
	}
	return o.MembershipCard, true
}

// HasMembershipCard returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasMembershipCard() bool {
	if o != nil && !IsNil(o.MembershipCard) {
		return true
	}

	return false
}

// SetMembershipCard gets a reference to the given string and assigns it to the MembershipCard field.
func (o *FulfillmentExportInfoType) SetMembershipCard(v string) {
	o.MembershipCard = &v
}

// GetExtractCode returns the ExtractCode field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetExtractCode() string {
	if o == nil || IsNil(o.ExtractCode) {
		var ret string
		return ret
	}
	return *o.ExtractCode
}

// GetExtractCodeOk returns a tuple with the ExtractCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetExtractCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ExtractCode) {
		return nil, false
	}
	return o.ExtractCode, true
}

// HasExtractCode returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasExtractCode() bool {
	if o != nil && !IsNil(o.ExtractCode) {
		return true
	}

	return false
}

// SetExtractCode gets a reference to the given string and assigns it to the ExtractCode field.
func (o *FulfillmentExportInfoType) SetExtractCode(v string) {
	o.ExtractCode = &v
}

// GetExtractDate returns the ExtractDate field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetExtractDate() string {
	if o == nil || IsNil(o.ExtractDate) {
		var ret string
		return ret
	}
	return *o.ExtractDate
}

// GetExtractDateOk returns a tuple with the ExtractDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetExtractDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExtractDate) {
		return nil, false
	}
	return o.ExtractDate, true
}

// HasExtractDate returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasExtractDate() bool {
	if o != nil && !IsNil(o.ExtractDate) {
		return true
	}

	return false
}

// SetExtractDate gets a reference to the given string and assigns it to the ExtractDate field.
func (o *FulfillmentExportInfoType) SetExtractDate(v string) {
	o.ExtractDate = &v
}

// GetDeliveryStatus returns the DeliveryStatus field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetDeliveryStatus() ExportLogsDeliveryStatusType {
	if o == nil || IsNil(o.DeliveryStatus) {
		var ret ExportLogsDeliveryStatusType
		return ret
	}
	return *o.DeliveryStatus
}

// GetDeliveryStatusOk returns a tuple with the DeliveryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetDeliveryStatusOk() (*ExportLogsDeliveryStatusType, bool) {
	if o == nil || IsNil(o.DeliveryStatus) {
		return nil, false
	}
	return o.DeliveryStatus, true
}

// HasDeliveryStatus returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasDeliveryStatus() bool {
	if o != nil && !IsNil(o.DeliveryStatus) {
		return true
	}

	return false
}

// SetDeliveryStatus gets a reference to the given ExportLogsDeliveryStatusType and assigns it to the DeliveryStatus field.
func (o *FulfillmentExportInfoType) SetDeliveryStatus(v ExportLogsDeliveryStatusType) {
	o.DeliveryStatus = &v
}

// GetExtractId returns the ExtractId field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetExtractId() UniqueIDType {
	if o == nil || IsNil(o.ExtractId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExtractId
}

// GetExtractIdOk returns a tuple with the ExtractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetExtractIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExtractId) {
		return nil, false
	}
	return o.ExtractId, true
}

// HasExtractId returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasExtractId() bool {
	if o != nil && !IsNil(o.ExtractId) {
		return true
	}

	return false
}

// SetExtractId gets a reference to the given UniqueIDType and assigns it to the ExtractId field.
func (o *FulfillmentExportInfoType) SetExtractId(v UniqueIDType) {
	o.ExtractId = &v
}

// GetExtractBatchId returns the ExtractBatchId field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetExtractBatchId() UniqueIDType {
	if o == nil || IsNil(o.ExtractBatchId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExtractBatchId
}

// GetExtractBatchIdOk returns a tuple with the ExtractBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetExtractBatchIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExtractBatchId) {
		return nil, false
	}
	return o.ExtractBatchId, true
}

// HasExtractBatchId returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasExtractBatchId() bool {
	if o != nil && !IsNil(o.ExtractBatchId) {
		return true
	}

	return false
}

// SetExtractBatchId gets a reference to the given UniqueIDType and assigns it to the ExtractBatchId field.
func (o *FulfillmentExportInfoType) SetExtractBatchId(v UniqueIDType) {
	o.ExtractBatchId = &v
}

// GetExcludeExtract returns the ExcludeExtract field value if set, zero value otherwise.
func (o *FulfillmentExportInfoType) GetExcludeExtract() bool {
	if o == nil || IsNil(o.ExcludeExtract) {
		var ret bool
		return ret
	}
	return *o.ExcludeExtract
}

// GetExcludeExtractOk returns a tuple with the ExcludeExtract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FulfillmentExportInfoType) GetExcludeExtractOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeExtract) {
		return nil, false
	}
	return o.ExcludeExtract, true
}

// HasExcludeExtract returns a boolean if a field has been set.
func (o *FulfillmentExportInfoType) HasExcludeExtract() bool {
	if o != nil && !IsNil(o.ExcludeExtract) {
		return true
	}

	return false
}

// SetExcludeExtract gets a reference to the given bool and assigns it to the ExcludeExtract field.
func (o *FulfillmentExportInfoType) SetExcludeExtract(v bool) {
	o.ExcludeExtract = &v
}

func (o FulfillmentExportInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FulfillmentExportInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExtractLogId) {
		toSerialize["extractLogId"] = o.ExtractLogId
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.MembershipCard) {
		toSerialize["membershipCard"] = o.MembershipCard
	}
	if !IsNil(o.ExtractCode) {
		toSerialize["extractCode"] = o.ExtractCode
	}
	if !IsNil(o.ExtractDate) {
		toSerialize["extractDate"] = o.ExtractDate
	}
	if !IsNil(o.DeliveryStatus) {
		toSerialize["deliveryStatus"] = o.DeliveryStatus
	}
	if !IsNil(o.ExtractId) {
		toSerialize["extractId"] = o.ExtractId
	}
	if !IsNil(o.ExtractBatchId) {
		toSerialize["extractBatchId"] = o.ExtractBatchId
	}
	if !IsNil(o.ExcludeExtract) {
		toSerialize["excludeExtract"] = o.ExcludeExtract
	}
	return toSerialize, nil
}

type NullableFulfillmentExportInfoType struct {
	value *FulfillmentExportInfoType
	isSet bool
}

func (v NullableFulfillmentExportInfoType) Get() *FulfillmentExportInfoType {
	return v.value
}

func (v *NullableFulfillmentExportInfoType) Set(val *FulfillmentExportInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableFulfillmentExportInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableFulfillmentExportInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFulfillmentExportInfoType(val *FulfillmentExportInfoType) *NullableFulfillmentExportInfoType {
	return &NullableFulfillmentExportInfoType{value: val, isSet: true}
}

func (v NullableFulfillmentExportInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFulfillmentExportInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


