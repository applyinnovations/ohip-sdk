/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the SynchronizeProfileSubscriptionsCriteriaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SynchronizeProfileSubscriptionsCriteriaType{}

// SynchronizeProfileSubscriptionsCriteriaType Criteria for searching profile subscriptions.
type SynchronizeProfileSubscriptionsCriteriaType struct {
	// Code identifying the external database record which is linked to external systems.
	DatabaseIds []string `json:"databaseIds,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
}

// NewSynchronizeProfileSubscriptionsCriteriaType instantiates a new SynchronizeProfileSubscriptionsCriteriaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSynchronizeProfileSubscriptionsCriteriaType() *SynchronizeProfileSubscriptionsCriteriaType {
	this := SynchronizeProfileSubscriptionsCriteriaType{}
	return &this
}

// NewSynchronizeProfileSubscriptionsCriteriaTypeWithDefaults instantiates a new SynchronizeProfileSubscriptionsCriteriaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSynchronizeProfileSubscriptionsCriteriaTypeWithDefaults() *SynchronizeProfileSubscriptionsCriteriaType {
	this := SynchronizeProfileSubscriptionsCriteriaType{}
	return &this
}

// GetDatabaseIds returns the DatabaseIds field value if set, zero value otherwise.
func (o *SynchronizeProfileSubscriptionsCriteriaType) GetDatabaseIds() []string {
	if o == nil || IsNil(o.DatabaseIds) {
		var ret []string
		return ret
	}
	return o.DatabaseIds
}

// GetDatabaseIdsOk returns a tuple with the DatabaseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SynchronizeProfileSubscriptionsCriteriaType) GetDatabaseIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DatabaseIds) {
		return nil, false
	}
	return o.DatabaseIds, true
}

// HasDatabaseIds returns a boolean if a field has been set.
func (o *SynchronizeProfileSubscriptionsCriteriaType) HasDatabaseIds() bool {
	if o != nil && !IsNil(o.DatabaseIds) {
		return true
	}

	return false
}

// SetDatabaseIds gets a reference to the given []string and assigns it to the DatabaseIds field.
func (o *SynchronizeProfileSubscriptionsCriteriaType) SetDatabaseIds(v []string) {
	o.DatabaseIds = v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *SynchronizeProfileSubscriptionsCriteriaType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SynchronizeProfileSubscriptionsCriteriaType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *SynchronizeProfileSubscriptionsCriteriaType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *SynchronizeProfileSubscriptionsCriteriaType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

func (o SynchronizeProfileSubscriptionsCriteriaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SynchronizeProfileSubscriptionsCriteriaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatabaseIds) {
		toSerialize["databaseIds"] = o.DatabaseIds
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	return toSerialize, nil
}

type NullableSynchronizeProfileSubscriptionsCriteriaType struct {
	value *SynchronizeProfileSubscriptionsCriteriaType
	isSet bool
}

func (v NullableSynchronizeProfileSubscriptionsCriteriaType) Get() *SynchronizeProfileSubscriptionsCriteriaType {
	return v.value
}

func (v *NullableSynchronizeProfileSubscriptionsCriteriaType) Set(val *SynchronizeProfileSubscriptionsCriteriaType) {
	v.value = val
	v.isSet = true
}

func (v NullableSynchronizeProfileSubscriptionsCriteriaType) IsSet() bool {
	return v.isSet
}

func (v *NullableSynchronizeProfileSubscriptionsCriteriaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSynchronizeProfileSubscriptionsCriteriaType(val *SynchronizeProfileSubscriptionsCriteriaType) *NullableSynchronizeProfileSubscriptionsCriteriaType {
	return &NullableSynchronizeProfileSubscriptionsCriteriaType{value: val, isSet: true}
}

func (v NullableSynchronizeProfileSubscriptionsCriteriaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSynchronizeProfileSubscriptionsCriteriaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


