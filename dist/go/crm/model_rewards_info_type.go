/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the RewardsInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RewardsInfoType{}

// RewardsInfoType Indicates membership base information like CurrentBalance,association and Owned card.
type RewardsInfoType struct {
	// Indicates if the member is an MVCI owner.
	MVCIOwner *string `json:"mVCIOwner,omitempty"`
	// Indicates if guest owns a visa card.
	OwnsVisaCard *bool `json:"ownsVisaCard,omitempty"`
	// Indicates if meeting planner is requested.
	MeetingPlanner *bool `json:"meetingPlanner,omitempty"`
	// Indicates guest association.
	Association *string `json:"association,omitempty"`
	// Current membership points.
	CurrentBalance *float32 `json:"currentBalance,omitempty"`
	// Indicates membership id of the guest.
	MembershipId *float32 `json:"membershipId,omitempty"`
	// Indicates membership number of the guest
	MembershipNo *string `json:"membershipNo,omitempty"`
	// Indicates membership level of the guest
	MembershipLevel *string `json:"membershipLevel,omitempty"`
	// Indicates membership date of the guest
	MembershipDate *string `json:"membershipDate,omitempty"`
}

// NewRewardsInfoType instantiates a new RewardsInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRewardsInfoType() *RewardsInfoType {
	this := RewardsInfoType{}
	return &this
}

// NewRewardsInfoTypeWithDefaults instantiates a new RewardsInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewardsInfoTypeWithDefaults() *RewardsInfoType {
	this := RewardsInfoType{}
	return &this
}

// GetMVCIOwner returns the MVCIOwner field value if set, zero value otherwise.
func (o *RewardsInfoType) GetMVCIOwner() string {
	if o == nil || IsNil(o.MVCIOwner) {
		var ret string
		return ret
	}
	return *o.MVCIOwner
}

// GetMVCIOwnerOk returns a tuple with the MVCIOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetMVCIOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.MVCIOwner) {
		return nil, false
	}
	return o.MVCIOwner, true
}

// HasMVCIOwner returns a boolean if a field has been set.
func (o *RewardsInfoType) HasMVCIOwner() bool {
	if o != nil && !IsNil(o.MVCIOwner) {
		return true
	}

	return false
}

// SetMVCIOwner gets a reference to the given string and assigns it to the MVCIOwner field.
func (o *RewardsInfoType) SetMVCIOwner(v string) {
	o.MVCIOwner = &v
}

// GetOwnsVisaCard returns the OwnsVisaCard field value if set, zero value otherwise.
func (o *RewardsInfoType) GetOwnsVisaCard() bool {
	if o == nil || IsNil(o.OwnsVisaCard) {
		var ret bool
		return ret
	}
	return *o.OwnsVisaCard
}

// GetOwnsVisaCardOk returns a tuple with the OwnsVisaCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetOwnsVisaCardOk() (*bool, bool) {
	if o == nil || IsNil(o.OwnsVisaCard) {
		return nil, false
	}
	return o.OwnsVisaCard, true
}

// HasOwnsVisaCard returns a boolean if a field has been set.
func (o *RewardsInfoType) HasOwnsVisaCard() bool {
	if o != nil && !IsNil(o.OwnsVisaCard) {
		return true
	}

	return false
}

// SetOwnsVisaCard gets a reference to the given bool and assigns it to the OwnsVisaCard field.
func (o *RewardsInfoType) SetOwnsVisaCard(v bool) {
	o.OwnsVisaCard = &v
}

// GetMeetingPlanner returns the MeetingPlanner field value if set, zero value otherwise.
func (o *RewardsInfoType) GetMeetingPlanner() bool {
	if o == nil || IsNil(o.MeetingPlanner) {
		var ret bool
		return ret
	}
	return *o.MeetingPlanner
}

// GetMeetingPlannerOk returns a tuple with the MeetingPlanner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetMeetingPlannerOk() (*bool, bool) {
	if o == nil || IsNil(o.MeetingPlanner) {
		return nil, false
	}
	return o.MeetingPlanner, true
}

// HasMeetingPlanner returns a boolean if a field has been set.
func (o *RewardsInfoType) HasMeetingPlanner() bool {
	if o != nil && !IsNil(o.MeetingPlanner) {
		return true
	}

	return false
}

// SetMeetingPlanner gets a reference to the given bool and assigns it to the MeetingPlanner field.
func (o *RewardsInfoType) SetMeetingPlanner(v bool) {
	o.MeetingPlanner = &v
}

// GetAssociation returns the Association field value if set, zero value otherwise.
func (o *RewardsInfoType) GetAssociation() string {
	if o == nil || IsNil(o.Association) {
		var ret string
		return ret
	}
	return *o.Association
}

// GetAssociationOk returns a tuple with the Association field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetAssociationOk() (*string, bool) {
	if o == nil || IsNil(o.Association) {
		return nil, false
	}
	return o.Association, true
}

// HasAssociation returns a boolean if a field has been set.
func (o *RewardsInfoType) HasAssociation() bool {
	if o != nil && !IsNil(o.Association) {
		return true
	}

	return false
}

// SetAssociation gets a reference to the given string and assigns it to the Association field.
func (o *RewardsInfoType) SetAssociation(v string) {
	o.Association = &v
}

// GetCurrentBalance returns the CurrentBalance field value if set, zero value otherwise.
func (o *RewardsInfoType) GetCurrentBalance() float32 {
	if o == nil || IsNil(o.CurrentBalance) {
		var ret float32
		return ret
	}
	return *o.CurrentBalance
}

// GetCurrentBalanceOk returns a tuple with the CurrentBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetCurrentBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentBalance) {
		return nil, false
	}
	return o.CurrentBalance, true
}

// HasCurrentBalance returns a boolean if a field has been set.
func (o *RewardsInfoType) HasCurrentBalance() bool {
	if o != nil && !IsNil(o.CurrentBalance) {
		return true
	}

	return false
}

// SetCurrentBalance gets a reference to the given float32 and assigns it to the CurrentBalance field.
func (o *RewardsInfoType) SetCurrentBalance(v float32) {
	o.CurrentBalance = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *RewardsInfoType) GetMembershipId() float32 {
	if o == nil || IsNil(o.MembershipId) {
		var ret float32
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetMembershipIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *RewardsInfoType) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given float32 and assigns it to the MembershipId field.
func (o *RewardsInfoType) SetMembershipId(v float32) {
	o.MembershipId = &v
}

// GetMembershipNo returns the MembershipNo field value if set, zero value otherwise.
func (o *RewardsInfoType) GetMembershipNo() string {
	if o == nil || IsNil(o.MembershipNo) {
		var ret string
		return ret
	}
	return *o.MembershipNo
}

// GetMembershipNoOk returns a tuple with the MembershipNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetMembershipNoOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipNo) {
		return nil, false
	}
	return o.MembershipNo, true
}

// HasMembershipNo returns a boolean if a field has been set.
func (o *RewardsInfoType) HasMembershipNo() bool {
	if o != nil && !IsNil(o.MembershipNo) {
		return true
	}

	return false
}

// SetMembershipNo gets a reference to the given string and assigns it to the MembershipNo field.
func (o *RewardsInfoType) SetMembershipNo(v string) {
	o.MembershipNo = &v
}

// GetMembershipLevel returns the MembershipLevel field value if set, zero value otherwise.
func (o *RewardsInfoType) GetMembershipLevel() string {
	if o == nil || IsNil(o.MembershipLevel) {
		var ret string
		return ret
	}
	return *o.MembershipLevel
}

// GetMembershipLevelOk returns a tuple with the MembershipLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetMembershipLevelOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipLevel) {
		return nil, false
	}
	return o.MembershipLevel, true
}

// HasMembershipLevel returns a boolean if a field has been set.
func (o *RewardsInfoType) HasMembershipLevel() bool {
	if o != nil && !IsNil(o.MembershipLevel) {
		return true
	}

	return false
}

// SetMembershipLevel gets a reference to the given string and assigns it to the MembershipLevel field.
func (o *RewardsInfoType) SetMembershipLevel(v string) {
	o.MembershipLevel = &v
}

// GetMembershipDate returns the MembershipDate field value if set, zero value otherwise.
func (o *RewardsInfoType) GetMembershipDate() string {
	if o == nil || IsNil(o.MembershipDate) {
		var ret string
		return ret
	}
	return *o.MembershipDate
}

// GetMembershipDateOk returns a tuple with the MembershipDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RewardsInfoType) GetMembershipDateOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipDate) {
		return nil, false
	}
	return o.MembershipDate, true
}

// HasMembershipDate returns a boolean if a field has been set.
func (o *RewardsInfoType) HasMembershipDate() bool {
	if o != nil && !IsNil(o.MembershipDate) {
		return true
	}

	return false
}

// SetMembershipDate gets a reference to the given string and assigns it to the MembershipDate field.
func (o *RewardsInfoType) SetMembershipDate(v string) {
	o.MembershipDate = &v
}

func (o RewardsInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RewardsInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MVCIOwner) {
		toSerialize["mVCIOwner"] = o.MVCIOwner
	}
	if !IsNil(o.OwnsVisaCard) {
		toSerialize["ownsVisaCard"] = o.OwnsVisaCard
	}
	if !IsNil(o.MeetingPlanner) {
		toSerialize["meetingPlanner"] = o.MeetingPlanner
	}
	if !IsNil(o.Association) {
		toSerialize["association"] = o.Association
	}
	if !IsNil(o.CurrentBalance) {
		toSerialize["currentBalance"] = o.CurrentBalance
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.MembershipNo) {
		toSerialize["membershipNo"] = o.MembershipNo
	}
	if !IsNil(o.MembershipLevel) {
		toSerialize["membershipLevel"] = o.MembershipLevel
	}
	if !IsNil(o.MembershipDate) {
		toSerialize["membershipDate"] = o.MembershipDate
	}
	return toSerialize, nil
}

type NullableRewardsInfoType struct {
	value *RewardsInfoType
	isSet bool
}

func (v NullableRewardsInfoType) Get() *RewardsInfoType {
	return v.value
}

func (v *NullableRewardsInfoType) Set(val *RewardsInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRewardsInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRewardsInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRewardsInfoType(val *RewardsInfoType) *NullableRewardsInfoType {
	return &NullableRewardsInfoType{value: val, isSet: true}
}

func (v NullableRewardsInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRewardsInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


