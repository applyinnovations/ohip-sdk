/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// ProfileMembershipAPIService ProfileMembershipAPI service
type ProfileMembershipAPIService service

type ProfileMembershipAPICalculateMembershipPointsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipPointsToCalculate *MembershipPointsToCalculate
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPICalculateMembershipPointsRequest) Authorization(authorization string) ProfileMembershipAPICalculateMembershipPointsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPICalculateMembershipPointsRequest) XAppKey(xAppKey string) ProfileMembershipAPICalculateMembershipPointsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPICalculateMembershipPointsRequest) XHotelid(xHotelid string) ProfileMembershipAPICalculateMembershipPointsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request to run membership points calculation job.
func (r ProfileMembershipAPICalculateMembershipPointsRequest) MembershipPointsToCalculate(membershipPointsToCalculate MembershipPointsToCalculate) ProfileMembershipAPICalculateMembershipPointsRequest {
	r.membershipPointsToCalculate = &membershipPointsToCalculate
	return r
}

// External system code.
func (r ProfileMembershipAPICalculateMembershipPointsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPICalculateMembershipPointsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPICalculateMembershipPointsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPICalculateMembershipPointsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPICalculateMembershipPointsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.CalculateMembershipPointsExecute(r)
}

/*
CalculateMembershipPoints Calculate Membership Points

Start Membership Points Calculation process <p><strong>OperationId:</strong>calculateMembershipPoints</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPICalculateMembershipPointsRequest
*/
func (a *ProfileMembershipAPIService) CalculateMembershipPoints(ctx context.Context) ProfileMembershipAPICalculateMembershipPointsRequest {
	return ProfileMembershipAPICalculateMembershipPointsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) CalculateMembershipPointsExecute(r ProfileMembershipAPICalculateMembershipPointsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.CalculateMembershipPoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipPoints/calculations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipPointsToCalculate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIChangeMembershipClaimRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	claimId string
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipClaim *MembershipClaim
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIChangeMembershipClaimRequest) Authorization(authorization string) ProfileMembershipAPIChangeMembershipClaimRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIChangeMembershipClaimRequest) XAppKey(xAppKey string) ProfileMembershipAPIChangeMembershipClaimRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIChangeMembershipClaimRequest) XHotelid(xHotelid string) ProfileMembershipAPIChangeMembershipClaimRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for changing membership claim information.
func (r ProfileMembershipAPIChangeMembershipClaimRequest) MembershipClaim(membershipClaim MembershipClaim) ProfileMembershipAPIChangeMembershipClaimRequest {
	r.membershipClaim = &membershipClaim
	return r
}

// External system code.
func (r ProfileMembershipAPIChangeMembershipClaimRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIChangeMembershipClaimRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIChangeMembershipClaimRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIChangeMembershipClaimRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIChangeMembershipClaimRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ChangeMembershipClaimExecute(r)
}

/*
ChangeMembershipClaim Change membership Claim

Change membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>changeMembershipClaim</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param claimId
 @return ProfileMembershipAPIChangeMembershipClaimRequest
*/
func (a *ProfileMembershipAPIService) ChangeMembershipClaim(ctx context.Context, claimId string) ProfileMembershipAPIChangeMembershipClaimRequest {
	return ProfileMembershipAPIChangeMembershipClaimRequest{
		ApiService: a,
		ctx: ctx,
		claimId: claimId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) ChangeMembershipClaimExecute(r ProfileMembershipAPIChangeMembershipClaimRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.ChangeMembershipClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipClaims/{claimId}"
	localVarPath = strings.Replace(localVarPath, "{"+"claimId"+"}", url.PathEscape(parameterValueToString(r.claimId, "claimId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.claimId) < 1 {
		return localVarReturnValue, nil, reportError("claimId must have at least 1 elements")
	}
	if strlen(r.claimId) > 2000 {
		return localVarReturnValue, nil, reportError("claimId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipClaim
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIDeleteAwardsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	awardNumber *float32
	authorization *string
	xAppKey *string
	xHotelid *string
	reservationCancellationNumber *string
	actualCancelPoints *float32
	xExternalsystem *string
	acceptLanguage *string
}

// An identifying number of the award, assigned by the system when the award was issued.
func (r ProfileMembershipAPIDeleteAwardsRequest) AwardNumber(awardNumber float32) ProfileMembershipAPIDeleteAwardsRequest {
	r.awardNumber = &awardNumber
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIDeleteAwardsRequest) Authorization(authorization string) ProfileMembershipAPIDeleteAwardsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIDeleteAwardsRequest) XAppKey(xAppKey string) ProfileMembershipAPIDeleteAwardsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIDeleteAwardsRequest) XHotelid(xHotelid string) ProfileMembershipAPIDeleteAwardsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Identifies reservation cancellation number.
func (r ProfileMembershipAPIDeleteAwardsRequest) ReservationCancellationNumber(reservationCancellationNumber string) ProfileMembershipAPIDeleteAwardsRequest {
	r.reservationCancellationNumber = &reservationCancellationNumber
	return r
}

// The amount of points that will be deducted for cancelling the award, from the total guest award points.
func (r ProfileMembershipAPIDeleteAwardsRequest) ActualCancelPoints(actualCancelPoints float32) ProfileMembershipAPIDeleteAwardsRequest {
	r.actualCancelPoints = &actualCancelPoints
	return r
}

// External system code.
func (r ProfileMembershipAPIDeleteAwardsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIDeleteAwardsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIDeleteAwardsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIDeleteAwardsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIDeleteAwardsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteAwardsExecute(r)
}

/*
DeleteAwards Delete Awards

Operation to cancel an award already been granted to a member. <p><strong>OperationId:</strong>deleteAwards</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIDeleteAwardsRequest
*/
func (a *ProfileMembershipAPIService) DeleteAwards(ctx context.Context) ProfileMembershipAPIDeleteAwardsRequest {
	return ProfileMembershipAPIDeleteAwardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) DeleteAwardsExecute(r ProfileMembershipAPIDeleteAwardsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.DeleteAwards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/awards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "awardNumber", r.awardNumber, "")
	if r.reservationCancellationNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationCancellationNumber", r.reservationCancellationNumber, "")
  }
	if r.actualCancelPoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "actualCancelPoints", r.actualCancelPoints, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIDeleteMembershipPromotionRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	promotionCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipPromotionId *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIDeleteMembershipPromotionRequest) Authorization(authorization string) ProfileMembershipAPIDeleteMembershipPromotionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIDeleteMembershipPromotionRequest) XAppKey(xAppKey string) ProfileMembershipAPIDeleteMembershipPromotionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIDeleteMembershipPromotionRequest) XHotelid(xHotelid string) ProfileMembershipAPIDeleteMembershipPromotionRequest {
	r.xHotelid = &xHotelid
	return r
}

// The ID of a promotion owned by a membership.
func (r ProfileMembershipAPIDeleteMembershipPromotionRequest) MembershipPromotionId(membershipPromotionId string) ProfileMembershipAPIDeleteMembershipPromotionRequest {
	r.membershipPromotionId = &membershipPromotionId
	return r
}

// External system code.
func (r ProfileMembershipAPIDeleteMembershipPromotionRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIDeleteMembershipPromotionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIDeleteMembershipPromotionRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIDeleteMembershipPromotionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIDeleteMembershipPromotionRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteMembershipPromotionExecute(r)
}

/*
DeleteMembershipPromotion Delete membership promotion of a guest

Delete a Membership promotion for a guest. This will inactivate the membership promotion.<p><strong>OperationId:</strong>deleteMembershipPromotion</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @param promotionCode An alphanumeric code for the promotion.
 @return ProfileMembershipAPIDeleteMembershipPromotionRequest
*/
func (a *ProfileMembershipAPIService) DeleteMembershipPromotion(ctx context.Context, membershipId string, promotionCode string) ProfileMembershipAPIDeleteMembershipPromotionRequest {
	return ProfileMembershipAPIDeleteMembershipPromotionRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
		promotionCode: promotionCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) DeleteMembershipPromotionExecute(r ProfileMembershipAPIDeleteMembershipPromotionRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.DeleteMembershipPromotion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/promotions/{promotionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"promotionCode"+"}", url.PathEscape(parameterValueToString(r.promotionCode, "promotionCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}
	if strlen(r.promotionCode) < 0 {
		return localVarReturnValue, nil, reportError("promotionCode must have at least 0 elements")
	}
	if strlen(r.promotionCode) > 20 {
		return localVarReturnValue, nil, reportError("promotionCode must have less than 20 elements")
	}

	if r.membershipPromotionId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipPromotionId", r.membershipPromotionId, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIExportMembershipAwardRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	rateInfoHotelId *string
	totalAvailablePoints *float32
	pointsRequired *float32
	cancelPenaltyPoints *float32
	cancelPenaltyDays *float32
	cancelPenaltyCharge *float32
	cancelPenaltyType *string
	rawIssueKey *string
	awardNumber *float32
	rateCode *string
	rateDescription *string
	roomLabel *string
	roomDescription *string
	roomCategory *string
	stayDate *string
	awardType *string
	productInfoHotelId *string
	productInfoTotalAvailablePoints *float32
	productInfoPointsRequired *float32
	productInfoCancelPenaltyPoints *float32
	productInfoCancelPenaltyDays *float32
	productInfoCancelPenaltyCharge *float32
	productInfoCancelPenaltyType *string
	productInfoRawIssueKey *string
	productInfoAwardNumber *float32
	packageCode *string
	packageDescription *string
	awardValidFrom *string
	awardValidTo *string
	upgradeInfoAwardType *string
	upgradeInfoHotelId *string
	upgradeInfoTotalAvailablePoints *float32
	upgradeInfoPointsRequired *float32
	upgradeInfoCancelPenaltyPoints *float32
	upgradeInfoCancelPenaltyDays *float32
	upgradeInfoCancelPenaltyCharge *float32
	upgradeInfoCancelPenaltyType *string
	upgradeInfoRawIssueKey *string
	upgradeInfoAwardNumber *float32
	fromRoomCategory *string
	toRoomCategory *string
	fromRoomDescription *string
	toRoomDescription *string
	fromRoom *string
	toRoom *string
	upgradeInfoStayDate *string
	otherInfoAwardType *string
	sellBeginDate *string
	sellEndDate *string
	shortDescription *string
	awardValue *float32
	otherInfoTotalAvailablePoints *float32
	otherInfoPointsRequired *float32
	longDescription *string
	otherInfoAwardNumber *float32
	issueAwardsHotelId *string
	externalReservationNumber *string
	confirmationBookingNumber *string
	awardSource *string
	arrivalDate *string
	departureDate *string
	exportInfoAwardNumber *float32
	nameType *string
	name *string
	fullName *string
	namePrefix *string
	givenName *string
	middleName *string
	nameSuffix *string
	nameTitle *string
	phoneNumber *string
	companyName *string
	id *string
	idContext *string
	idType *string
	barCode *string
	createDateTime *string
	creatorId *string
	lastModifierId *string
	lastModifyDateTime *string
	primaryInd *bool
	purgeDate *string
	type_ *string
	typeDescription *string
	updateReservations *bool
	addressLine *[]string
	cityName *string
	postalCode *string
	cityExtension *string
	county *string
	state *string
	code *string
	language *string
	characterUDFsAltName *[]string
	characterUDFsName *[]string
	characterUDFsValue *[]string
	numericUDFsAltName *[]string
	numericUDFsName *[]string
	numericUDFsValue *[]float32
	dateUDFsAltname *[]string
	dateUDFsName *[]string
	dateUDFsValue *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIExportMembershipAwardRequest) Authorization(authorization string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIExportMembershipAwardRequest) XAppKey(xAppKey string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIExportMembershipAwardRequest) XHotelid(xHotelid string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.xHotelid = &xHotelid
	return r
}

// HotelCode where the award will be consumed.
func (r ProfileMembershipAPIExportMembershipAwardRequest) RateInfoHotelId(rateInfoHotelId string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.rateInfoHotelId = &rateInfoHotelId
	return r
}

// Total award points available for redemption.
func (r ProfileMembershipAPIExportMembershipAwardRequest) TotalAvailablePoints(totalAvailablePoints float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.totalAvailablePoints = &totalAvailablePoints
	return r
}

// The number of points that must be redeemed for this award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) PointsRequired(pointsRequired float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.pointsRequired = &pointsRequired
	return r
}

// The award points that will be forfeited if the cancel penalty charge is applied.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CancelPenaltyPoints(cancelPenaltyPoints float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.cancelPenaltyPoints = &cancelPenaltyPoints
	return r
}

// Number of days before arrival when a reservation may be cancelled without an award points penalty.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CancelPenaltyDays(cancelPenaltyDays float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.cancelPenaltyDays = &cancelPenaltyDays
	return r
}

// The cancel penalty charge.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CancelPenaltyCharge(cancelPenaltyCharge float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.cancelPenaltyCharge = &cancelPenaltyCharge
	return r
}

// The penalty charge is either a percentage or a flat number of points.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CancelPenaltyType(cancelPenaltyType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.cancelPenaltyType = &cancelPenaltyType
	return r
}

// Issue key in format of Raw data.
func (r ProfileMembershipAPIExportMembershipAwardRequest) RawIssueKey(rawIssueKey string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.rawIssueKey = &rawIssueKey
	return r
}

// An identifying number of the award, assigned by the system when the award was issued.
func (r ProfileMembershipAPIExportMembershipAwardRequest) AwardNumber(awardNumber float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.awardNumber = &awardNumber
	return r
}

// Rate code associated with the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) RateCode(rateCode string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.rateCode = &rateCode
	return r
}

// Rate code description associated with the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) RateDescription(rateDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.rateDescription = &rateDescription
	return r
}

// Code for the room type in which the award was issued.
func (r ProfileMembershipAPIExportMembershipAwardRequest) RoomLabel(roomLabel string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.roomLabel = &roomLabel
	return r
}

// Description of the Room.
func (r ProfileMembershipAPIExportMembershipAwardRequest) RoomDescription(roomDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.roomDescription = &roomDescription
	return r
}

// Indicates which room category it belongs.
func (r ProfileMembershipAPIExportMembershipAwardRequest) RoomCategory(roomCategory string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.roomCategory = &roomCategory
	return r
}

// The date of the reservation associated with the award. There may be more than one date (multiple nights) associated with award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) StayDate(stayDate string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.stayDate = &stayDate
	return r
}

// Unique code that identifies this award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) AwardType(awardType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.awardType = &awardType
	return r
}

// HotelCode where the award will be consumed.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoHotelId(productInfoHotelId string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoHotelId = &productInfoHotelId
	return r
}

// Total award points available for redemption.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoTotalAvailablePoints(productInfoTotalAvailablePoints float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoTotalAvailablePoints = &productInfoTotalAvailablePoints
	return r
}

// The number of points that must be redeemed for this award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoPointsRequired(productInfoPointsRequired float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoPointsRequired = &productInfoPointsRequired
	return r
}

// The award points that will be forfeited if the cancel penalty charge is applied.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoCancelPenaltyPoints(productInfoCancelPenaltyPoints float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoCancelPenaltyPoints = &productInfoCancelPenaltyPoints
	return r
}

// Number of days before arrival when a reservation may be cancelled without an award points penalty.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoCancelPenaltyDays(productInfoCancelPenaltyDays float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoCancelPenaltyDays = &productInfoCancelPenaltyDays
	return r
}

// The cancel penalty charge.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoCancelPenaltyCharge(productInfoCancelPenaltyCharge float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoCancelPenaltyCharge = &productInfoCancelPenaltyCharge
	return r
}

// The penalty charge is either a percentage or a flat number of points.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoCancelPenaltyType(productInfoCancelPenaltyType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoCancelPenaltyType = &productInfoCancelPenaltyType
	return r
}

// Issue key in format of Raw data.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoRawIssueKey(productInfoRawIssueKey string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoRawIssueKey = &productInfoRawIssueKey
	return r
}

// An identifying number of the award, assigned by the system when the award was issued.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ProductInfoAwardNumber(productInfoAwardNumber float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.productInfoAwardNumber = &productInfoAwardNumber
	return r
}

// Package/Product code for the award .
func (r ProfileMembershipAPIExportMembershipAwardRequest) PackageCode(packageCode string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.packageCode = &packageCode
	return r
}

// Description of the product.
func (r ProfileMembershipAPIExportMembershipAwardRequest) PackageDescription(packageDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.packageDescription = &packageDescription
	return r
}

// The valid time period from when the award can be issued.
func (r ProfileMembershipAPIExportMembershipAwardRequest) AwardValidFrom(awardValidFrom string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.awardValidFrom = &awardValidFrom
	return r
}

// The valid time to an issued award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) AwardValidTo(awardValidTo string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.awardValidTo = &awardValidTo
	return r
}

// Unique code that identifies this award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoAwardType(upgradeInfoAwardType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoAwardType = &upgradeInfoAwardType
	return r
}

// HotelCode where the award will be consumed.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoHotelId(upgradeInfoHotelId string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoHotelId = &upgradeInfoHotelId
	return r
}

// Total award points available for redemption.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoTotalAvailablePoints(upgradeInfoTotalAvailablePoints float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoTotalAvailablePoints = &upgradeInfoTotalAvailablePoints
	return r
}

// The number of points that must be redeemed for this award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoPointsRequired(upgradeInfoPointsRequired float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoPointsRequired = &upgradeInfoPointsRequired
	return r
}

// The award points that will be forfeited if the cancel penalty charge is applied.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoCancelPenaltyPoints(upgradeInfoCancelPenaltyPoints float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoCancelPenaltyPoints = &upgradeInfoCancelPenaltyPoints
	return r
}

// Number of days before arrival when a reservation may be cancelled without an award points penalty.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoCancelPenaltyDays(upgradeInfoCancelPenaltyDays float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoCancelPenaltyDays = &upgradeInfoCancelPenaltyDays
	return r
}

// The cancel penalty charge.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoCancelPenaltyCharge(upgradeInfoCancelPenaltyCharge float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoCancelPenaltyCharge = &upgradeInfoCancelPenaltyCharge
	return r
}

// The penalty charge is either a percentage or a flat number of points.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoCancelPenaltyType(upgradeInfoCancelPenaltyType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoCancelPenaltyType = &upgradeInfoCancelPenaltyType
	return r
}

// Issue key in format of Raw data.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoRawIssueKey(upgradeInfoRawIssueKey string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoRawIssueKey = &upgradeInfoRawIssueKey
	return r
}

// An identifying number of the award, assigned by the system when the award was issued.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoAwardNumber(upgradeInfoAwardNumber float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoAwardNumber = &upgradeInfoAwardNumber
	return r
}

// Indicates room type code for the room prior to the upgrade.
func (r ProfileMembershipAPIExportMembershipAwardRequest) FromRoomCategory(fromRoomCategory string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.fromRoomCategory = &fromRoomCategory
	return r
}

// Indicates room type code of the upgrade room.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ToRoomCategory(toRoomCategory string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.toRoomCategory = &toRoomCategory
	return r
}

// Indicates room type Description for the room prior to the upgrade.
func (r ProfileMembershipAPIExportMembershipAwardRequest) FromRoomDescription(fromRoomDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.fromRoomDescription = &fromRoomDescription
	return r
}

// Indicates room type Description of the upgrade room.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ToRoomDescription(toRoomDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.toRoomDescription = &toRoomDescription
	return r
}

// Indicates room type code for the room prior to the upgrade.
func (r ProfileMembershipAPIExportMembershipAwardRequest) FromRoom(fromRoom string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.fromRoom = &fromRoom
	return r
}

// Indicates room type code of the upgrade room.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ToRoom(toRoom string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.toRoom = &toRoom
	return r
}

// The date of the reservation associated with the award. There may be more than one date (multiple nights) associated with award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpgradeInfoStayDate(upgradeInfoStayDate string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.upgradeInfoStayDate = &upgradeInfoStayDate
	return r
}

// Unique code that identifies this award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) OtherInfoAwardType(otherInfoAwardType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.otherInfoAwardType = &otherInfoAwardType
	return r
}

// Beginning date of the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) SellBeginDate(sellBeginDate string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.sellBeginDate = &sellBeginDate
	return r
}

// End date that the award will be available.
func (r ProfileMembershipAPIExportMembershipAwardRequest) SellEndDate(sellEndDate string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.sellEndDate = &sellEndDate
	return r
}

// Descriptive name of the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ShortDescription(shortDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.shortDescription = &shortDescription
	return r
}

// The actual value of the award, in the amount of currency.
func (r ProfileMembershipAPIExportMembershipAwardRequest) AwardValue(awardValue float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.awardValue = &awardValue
	return r
}

// Total award points available for redemption.
func (r ProfileMembershipAPIExportMembershipAwardRequest) OtherInfoTotalAvailablePoints(otherInfoTotalAvailablePoints float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.otherInfoTotalAvailablePoints = &otherInfoTotalAvailablePoints
	return r
}

// The number of points that must be redeemed for this award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) OtherInfoPointsRequired(otherInfoPointsRequired float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.otherInfoPointsRequired = &otherInfoPointsRequired
	return r
}

// Detail description of the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) LongDescription(longDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.longDescription = &longDescription
	return r
}

// An identifying number of the award, assigned by the system when the award was issued.
func (r ProfileMembershipAPIExportMembershipAwardRequest) OtherInfoAwardNumber(otherInfoAwardNumber float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.otherInfoAwardNumber = &otherInfoAwardNumber
	return r
}

// HotelCode where the award will be consumed.
func (r ProfileMembershipAPIExportMembershipAwardRequest) IssueAwardsHotelId(issueAwardsHotelId string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.issueAwardsHotelId = &issueAwardsHotelId
	return r
}

// PMS Reservation number.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ExternalReservationNumber(externalReservationNumber string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.externalReservationNumber = &externalReservationNumber
	return r
}

// ORS Booking number.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ConfirmationBookingNumber(confirmationBookingNumber string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.confirmationBookingNumber = &confirmationBookingNumber
	return r
}

// The source for the reservation associated with the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) AwardSource(awardSource string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.awardSource = &awardSource
	return r
}

// Arrival date of the reservation associated with the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ArrivalDate(arrivalDate string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.arrivalDate = &arrivalDate
	return r
}

// Departure date of the reservation associated with the award.
func (r ProfileMembershipAPIExportMembershipAwardRequest) DepartureDate(departureDate string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.departureDate = &departureDate
	return r
}

// Award Number to identify member&#39;s information.
func (r ProfileMembershipAPIExportMembershipAwardRequest) ExportInfoAwardNumber(exportInfoAwardNumber float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.exportInfoAwardNumber = &exportInfoAwardNumber
	return r
}

// Person&#39;s name in an external system.
func (r ProfileMembershipAPIExportMembershipAwardRequest) NameType(nameType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.nameType = &nameType
	return r
}

// Family name, last name or Company Name.
func (r ProfileMembershipAPIExportMembershipAwardRequest) Name(name string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.name = &name
	return r
}

// Full display Name.
func (r ProfileMembershipAPIExportMembershipAwardRequest) FullName(fullName string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.fullName = &fullName
	return r
}

// Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
func (r ProfileMembershipAPIExportMembershipAwardRequest) NamePrefix(namePrefix string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.namePrefix = &namePrefix
	return r
}

// Given name, first name or names.
func (r ProfileMembershipAPIExportMembershipAwardRequest) GivenName(givenName string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.givenName = &givenName
	return r
}

// The middle name of the person name.
func (r ProfileMembershipAPIExportMembershipAwardRequest) MiddleName(middleName string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.middleName = &middleName
	return r
}

// Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
func (r ProfileMembershipAPIExportMembershipAwardRequest) NameSuffix(nameSuffix string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.nameSuffix = &nameSuffix
	return r
}

// Degree or honors (e.g., Ph.D., M.D.)
func (r ProfileMembershipAPIExportMembershipAwardRequest) NameTitle(nameTitle string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.nameTitle = &nameTitle
	return r
}

// Phone number
func (r ProfileMembershipAPIExportMembershipAwardRequest) PhoneNumber(phoneNumber string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.phoneNumber = &phoneNumber
	return r
}

// It returns a Company Name,If the member is associated with a company.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CompanyName(companyName string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.companyName = &companyName
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIExportMembershipAwardRequest) Id(id string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIExportMembershipAwardRequest) IdContext(idContext string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIExportMembershipAwardRequest) IdType(idType string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.idType = &idType
	return r
}

// The postal barcode for the address.
func (r ProfileMembershipAPIExportMembershipAwardRequest) BarCode(barCode string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.barCode = &barCode
	return r
}

// Time stamp of the creation.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CreateDateTime(createDateTime string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.createDateTime = &createDateTime
	return r
}

// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CreatorId(creatorId string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.creatorId = &creatorId
	return r
}

// Identifies the last software system or person to modify a record.
func (r ProfileMembershipAPIExportMembershipAwardRequest) LastModifierId(lastModifierId string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.lastModifierId = &lastModifierId
	return r
}

// Time stamp of last modification.
func (r ProfileMembershipAPIExportMembershipAwardRequest) LastModifyDateTime(lastModifyDateTime string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.lastModifyDateTime = &lastModifyDateTime
	return r
}

// When true, indicates a primary information.
func (r ProfileMembershipAPIExportMembershipAwardRequest) PrimaryInd(primaryInd bool) ProfileMembershipAPIExportMembershipAwardRequest {
	r.primaryInd = &primaryInd
	return r
}

// Date an item will be purged from a database (e.g., from a live database to an archive).
func (r ProfileMembershipAPIExportMembershipAwardRequest) PurgeDate(purgeDate string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.purgeDate = &purgeDate
	return r
}

// Defines the type of address (e.g. home, business, other).
func (r ProfileMembershipAPIExportMembershipAwardRequest) Type_(type_ string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.type_ = &type_
	return r
}

// Describes the type code
func (r ProfileMembershipAPIExportMembershipAwardRequest) TypeDescription(typeDescription string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.typeDescription = &typeDescription
	return r
}

// Indicates whether to update the reservations or not. If true and the address is primary, then all associated active reservations will be updated with the new primary address.
func (r ProfileMembershipAPIExportMembershipAwardRequest) UpdateReservations(updateReservations bool) ProfileMembershipAPIExportMembershipAwardRequest {
	r.updateReservations = &updateReservations
	return r
}

// When the address is unformatted (FormattedInd&#x3D;\&quot;false\&quot;) these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
func (r ProfileMembershipAPIExportMembershipAwardRequest) AddressLine(addressLine []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.addressLine = &addressLine
	return r
}

// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
func (r ProfileMembershipAPIExportMembershipAwardRequest) CityName(cityName string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.cityName = &cityName
	return r
}

// Post Office Code number.
func (r ProfileMembershipAPIExportMembershipAwardRequest) PostalCode(postalCode string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.postalCode = &postalCode
	return r
}

// Post Office City Extension Code number. City Extension mainly used for UK addresses.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CityExtension(cityExtension string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.cityExtension = &cityExtension
	return r
}

// County or District Name (e.g., Fairfax). Currently this attribute is not used.
func (r ProfileMembershipAPIExportMembershipAwardRequest) County(county string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.county = &county
	return r
}

// State or Province name (e.g., Texas).
func (r ProfileMembershipAPIExportMembershipAwardRequest) State(state string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.state = &state
	return r
}

// Code for a country or a nationality.
func (r ProfileMembershipAPIExportMembershipAwardRequest) Code(code string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.code = &code
	return r
}

// Language code associated with the address
func (r ProfileMembershipAPIExportMembershipAwardRequest) Language(language string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.language = &language
	return r
}

// Label of user defined field used by vendors or customers.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CharacterUDFsAltName(characterUDFsAltName []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.characterUDFsAltName = &characterUDFsAltName
	return r
}

// Used to hold user defined field of Character Type. It is highly recommended to use UDFC01, UDFC02,...UDFC40 (Total 40) as Character/String UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CharacterUDFsName(characterUDFsName []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.characterUDFsName = &characterUDFsName
	return r
}

// Value of user defined field.
func (r ProfileMembershipAPIExportMembershipAwardRequest) CharacterUDFsValue(characterUDFsValue []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.characterUDFsValue = &characterUDFsValue
	return r
}

// Label of user defined field used by vendors or customers.
func (r ProfileMembershipAPIExportMembershipAwardRequest) NumericUDFsAltName(numericUDFsAltName []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.numericUDFsAltName = &numericUDFsAltName
	return r
}

// Name of user defined field.
func (r ProfileMembershipAPIExportMembershipAwardRequest) NumericUDFsName(numericUDFsName []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.numericUDFsName = &numericUDFsName
	return r
}

// Value of user defined field.
func (r ProfileMembershipAPIExportMembershipAwardRequest) NumericUDFsValue(numericUDFsValue []float32) ProfileMembershipAPIExportMembershipAwardRequest {
	r.numericUDFsValue = &numericUDFsValue
	return r
}

// Label of user defined field used by vendors or customers.
func (r ProfileMembershipAPIExportMembershipAwardRequest) DateUDFsAltname(dateUDFsAltname []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.dateUDFsAltname = &dateUDFsAltname
	return r
}

// Used to hold user defined field of Date Type. It is highly recommended to use UDFD01, UDFD02,...UDFN20 (Total 20) as Date UDF names(commonly used on Reservation, Profile etc.). Name is not restricted using enumeration, to provide flexibility of different name usage if required.
func (r ProfileMembershipAPIExportMembershipAwardRequest) DateUDFsName(dateUDFsName []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.dateUDFsName = &dateUDFsName
	return r
}

// Value of user defined field.
func (r ProfileMembershipAPIExportMembershipAwardRequest) DateUDFsValue(dateUDFsValue []string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.dateUDFsValue = &dateUDFsValue
	return r
}

// External system code.
func (r ProfileMembershipAPIExportMembershipAwardRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIExportMembershipAwardRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIExportMembershipAwardRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIExportMembershipAwardRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExportMembershipAwardExecute(r)
}

/*
ExportMembershipAward Export Membership Award

Export members information for Fulfillment house processing <p><strong>OperationId:</strong>exportMembershipAward</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIExportMembershipAwardRequest
*/
func (a *ProfileMembershipAPIService) ExportMembershipAward(ctx context.Context, membershipId string) ProfileMembershipAPIExportMembershipAwardRequest {
	return ProfileMembershipAPIExportMembershipAwardRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) ExportMembershipAwardExecute(r ProfileMembershipAPIExportMembershipAwardRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.ExportMembershipAward")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/award"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	if r.rateInfoHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateInfoHotelId", r.rateInfoHotelId, "")
  }
	if r.totalAvailablePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalAvailablePoints", r.totalAvailablePoints, "")
  }
	if r.pointsRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pointsRequired", r.pointsRequired, "")
  }
	if r.cancelPenaltyPoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelPenaltyPoints", r.cancelPenaltyPoints, "")
  }
	if r.cancelPenaltyDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelPenaltyDays", r.cancelPenaltyDays, "")
  }
	if r.cancelPenaltyCharge != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelPenaltyCharge", r.cancelPenaltyCharge, "")
  }
	if r.cancelPenaltyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cancelPenaltyType", r.cancelPenaltyType, "")
  }
	if r.rawIssueKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rawIssueKey", r.rawIssueKey, "")
  }
	if r.awardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardNumber", r.awardNumber, "")
  }
	if r.rateCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", r.rateCode, "")
  }
	if r.rateDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateDescription", r.rateDescription, "")
  }
	if r.roomLabel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomLabel", r.roomLabel, "")
  }
	if r.roomDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomDescription", r.roomDescription, "")
  }
	if r.roomCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomCategory", r.roomCategory, "")
  }
	if r.stayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayDate", r.stayDate, "")
  }
	if r.awardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardType", r.awardType, "")
  }
	if r.productInfoHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoHotelId", r.productInfoHotelId, "")
  }
	if r.productInfoTotalAvailablePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoTotalAvailablePoints", r.productInfoTotalAvailablePoints, "")
  }
	if r.productInfoPointsRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoPointsRequired", r.productInfoPointsRequired, "")
  }
	if r.productInfoCancelPenaltyPoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoCancelPenaltyPoints", r.productInfoCancelPenaltyPoints, "")
  }
	if r.productInfoCancelPenaltyDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoCancelPenaltyDays", r.productInfoCancelPenaltyDays, "")
  }
	if r.productInfoCancelPenaltyCharge != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoCancelPenaltyCharge", r.productInfoCancelPenaltyCharge, "")
  }
	if r.productInfoCancelPenaltyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoCancelPenaltyType", r.productInfoCancelPenaltyType, "")
  }
	if r.productInfoRawIssueKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoRawIssueKey", r.productInfoRawIssueKey, "")
  }
	if r.productInfoAwardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productInfoAwardNumber", r.productInfoAwardNumber, "")
  }
	if r.packageCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", r.packageCode, "")
  }
	if r.packageDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageDescription", r.packageDescription, "")
  }
	if r.awardValidFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardValidFrom", r.awardValidFrom, "")
  }
	if r.awardValidTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardValidTo", r.awardValidTo, "")
  }
	if r.upgradeInfoAwardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoAwardType", r.upgradeInfoAwardType, "")
  }
	if r.upgradeInfoHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoHotelId", r.upgradeInfoHotelId, "")
  }
	if r.upgradeInfoTotalAvailablePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoTotalAvailablePoints", r.upgradeInfoTotalAvailablePoints, "")
  }
	if r.upgradeInfoPointsRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoPointsRequired", r.upgradeInfoPointsRequired, "")
  }
	if r.upgradeInfoCancelPenaltyPoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoCancelPenaltyPoints", r.upgradeInfoCancelPenaltyPoints, "")
  }
	if r.upgradeInfoCancelPenaltyDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoCancelPenaltyDays", r.upgradeInfoCancelPenaltyDays, "")
  }
	if r.upgradeInfoCancelPenaltyCharge != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoCancelPenaltyCharge", r.upgradeInfoCancelPenaltyCharge, "")
  }
	if r.upgradeInfoCancelPenaltyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoCancelPenaltyType", r.upgradeInfoCancelPenaltyType, "")
  }
	if r.upgradeInfoRawIssueKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoRawIssueKey", r.upgradeInfoRawIssueKey, "")
  }
	if r.upgradeInfoAwardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoAwardNumber", r.upgradeInfoAwardNumber, "")
  }
	if r.fromRoomCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoomCategory", r.fromRoomCategory, "")
  }
	if r.toRoomCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoomCategory", r.toRoomCategory, "")
  }
	if r.fromRoomDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoomDescription", r.fromRoomDescription, "")
  }
	if r.toRoomDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoomDescription", r.toRoomDescription, "")
  }
	if r.fromRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoom", r.fromRoom, "")
  }
	if r.toRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoom", r.toRoom, "")
  }
	if r.upgradeInfoStayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeInfoStayDate", r.upgradeInfoStayDate, "")
  }
	if r.otherInfoAwardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherInfoAwardType", r.otherInfoAwardType, "")
  }
	if r.sellBeginDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellBeginDate", r.sellBeginDate, "")
  }
	if r.sellEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellEndDate", r.sellEndDate, "")
  }
	if r.shortDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shortDescription", r.shortDescription, "")
  }
	if r.awardValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardValue", r.awardValue, "")
  }
	if r.otherInfoTotalAvailablePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherInfoTotalAvailablePoints", r.otherInfoTotalAvailablePoints, "")
  }
	if r.otherInfoPointsRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherInfoPointsRequired", r.otherInfoPointsRequired, "")
  }
	if r.longDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "longDescription", r.longDescription, "")
  }
	if r.otherInfoAwardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherInfoAwardNumber", r.otherInfoAwardNumber, "")
  }
	if r.issueAwardsHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "issueAwardsHotelId", r.issueAwardsHotelId, "")
  }
	if r.externalReservationNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalReservationNumber", r.externalReservationNumber, "")
  }
	if r.confirmationBookingNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationBookingNumber", r.confirmationBookingNumber, "")
  }
	if r.awardSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardSource", r.awardSource, "")
  }
	if r.arrivalDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalDate", r.arrivalDate, "")
  }
	if r.departureDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureDate", r.departureDate, "")
  }
	if r.exportInfoAwardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exportInfoAwardNumber", r.exportInfoAwardNumber, "")
  }
	if r.nameType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameType", r.nameType, "")
  }
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
  }
	if r.fullName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fullName", r.fullName, "")
  }
	if r.namePrefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "namePrefix", r.namePrefix, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.middleName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "middleName", r.middleName, "")
  }
	if r.nameSuffix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameSuffix", r.nameSuffix, "")
  }
	if r.nameTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameTitle", r.nameTitle, "")
  }
	if r.phoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phoneNumber", r.phoneNumber, "")
  }
	if r.companyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyName", r.companyName, "")
  }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.idType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idType", r.idType, "")
  }
	if r.barCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "barCode", r.barCode, "")
  }
	if r.createDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createDateTime", r.createDateTime, "")
  }
	if r.creatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorId", r.creatorId, "")
  }
	if r.lastModifierId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastModifierId", r.lastModifierId, "")
  }
	if r.lastModifyDateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastModifyDateTime", r.lastModifyDateTime, "")
  }
	if r.primaryInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "primaryInd", r.primaryInd, "")
  }
	if r.purgeDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purgeDate", r.purgeDate, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.typeDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "typeDescription", r.typeDescription, "")
  }
	if r.updateReservations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updateReservations", r.updateReservations, "")
  }
	if r.addressLine != nil {
		t := *r.addressLine
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "addressLine", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "addressLine", t, "multi")
		}
  }
	if r.cityName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cityName", r.cityName, "")
  }
	if r.postalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postalCode", r.postalCode, "")
  }
	if r.cityExtension != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cityExtension", r.cityExtension, "")
  }
	if r.county != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "county", r.county, "")
  }
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
  }
	if r.code != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "code", r.code, "")
  }
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
  }
	if r.characterUDFsAltName != nil {
		t := *r.characterUDFsAltName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "characterUDFsAltName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "characterUDFsAltName", t, "multi")
		}
  }
	if r.characterUDFsName != nil {
		t := *r.characterUDFsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "characterUDFsName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "characterUDFsName", t, "multi")
		}
  }
	if r.characterUDFsValue != nil {
		t := *r.characterUDFsValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "characterUDFsValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "characterUDFsValue", t, "multi")
		}
  }
	if r.numericUDFsAltName != nil {
		t := *r.numericUDFsAltName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "NumericUDFsAltName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "NumericUDFsAltName", t, "multi")
		}
  }
	if r.numericUDFsName != nil {
		t := *r.numericUDFsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "NumericUDFsName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "NumericUDFsName", t, "multi")
		}
  }
	if r.numericUDFsValue != nil {
		t := *r.numericUDFsValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "NumericUDFsValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "NumericUDFsValue", t, "multi")
		}
  }
	if r.dateUDFsAltname != nil {
		t := *r.dateUDFsAltname
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "DateUDFsAltname", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "DateUDFsAltname", t, "multi")
		}
  }
	if r.dateUDFsName != nil {
		t := *r.dateUDFsName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "DateUDFsName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "DateUDFsName", t, "multi")
		}
  }
	if r.dateUDFsValue != nil {
		t := *r.dateUDFsValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "DateUDFsValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "DateUDFsValue", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIExtendMemberPointsToExpireRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	extendMemberPointsToExpire *ExtendMemberPointsToExpire
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIExtendMemberPointsToExpireRequest) Authorization(authorization string) ProfileMembershipAPIExtendMemberPointsToExpireRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIExtendMemberPointsToExpireRequest) XAppKey(xAppKey string) ProfileMembershipAPIExtendMemberPointsToExpireRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIExtendMemberPointsToExpireRequest) XHotelid(xHotelid string) ProfileMembershipAPIExtendMemberPointsToExpireRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to extend a member points to expire.
func (r ProfileMembershipAPIExtendMemberPointsToExpireRequest) ExtendMemberPointsToExpire(extendMemberPointsToExpire ExtendMemberPointsToExpire) ProfileMembershipAPIExtendMemberPointsToExpireRequest {
	r.extendMemberPointsToExpire = &extendMemberPointsToExpire
	return r
}

// External system code.
func (r ProfileMembershipAPIExtendMemberPointsToExpireRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIExtendMemberPointsToExpireRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIExtendMemberPointsToExpireRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIExtendMemberPointsToExpireRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIExtendMemberPointsToExpireRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtendMemberPointsToExpireExecute(r)
}

/*
ExtendMemberPointsToExpire Extend Member Points set to Expire

This will allow you to extend the expiration date based on the rule defined in the Grace Period in months. <p><strong>OperationId:</strong>extendMemberPointsToExpire</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIExtendMemberPointsToExpireRequest
*/
func (a *ProfileMembershipAPIService) ExtendMemberPointsToExpire(ctx context.Context, membershipId string) ProfileMembershipAPIExtendMemberPointsToExpireRequest {
	return ProfileMembershipAPIExtendMemberPointsToExpireRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) ExtendMemberPointsToExpireExecute(r ProfileMembershipAPIExtendMemberPointsToExpireRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.ExtendMemberPointsToExpire")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/pointsToExpire"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.extendMemberPointsToExpire
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetAirlineTransactionsStatusRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	batchId *string
	batchIdType *string
	importDate *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) Authorization(authorization string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) Limit(limit int32) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) Offset(offset int32) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.offset = &offset
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) BatchId(batchId string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.batchId = &batchId
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) BatchIdType(batchIdType string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.batchIdType = &batchIdType
	return r
}

// The date when this batch was imported into OPERA
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) ImportDate(importDate string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.importDate = &importDate
	return r
}

// External system code.
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) Execute() (*AirlineTransactionsStatus, *http.Response, error) {
	return r.ApiService.GetAirlineTransactionsStatusExecute(r)
}

/*
GetAirlineTransactionsStatus Get airline transactions status

Request for fetching membership transactions processed by the airline. <p><strong>OperationId:</strong>getAirlineTransactionsStatus</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIGetAirlineTransactionsStatusRequest

Deprecated
*/
func (a *ProfileMembershipAPIService) GetAirlineTransactionsStatus(ctx context.Context) ProfileMembershipAPIGetAirlineTransactionsStatusRequest {
	return ProfileMembershipAPIGetAirlineTransactionsStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AirlineTransactionsStatus
// Deprecated
func (a *ProfileMembershipAPIService) GetAirlineTransactionsStatusExecute(r ProfileMembershipAPIGetAirlineTransactionsStatusRequest) (*AirlineTransactionsStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AirlineTransactionsStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetAirlineTransactionsStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/airline/transactions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.batchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchId", r.batchId, "")
  }
	if r.batchIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "batchIdType", r.batchIdType, "")
  }
	if r.importDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importDate", r.importDate, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetAllMembershipClaimsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipId *string
	profileId *string
	profileIdContext *string
	profileIdType *string
	name *string
	givenName *string
	membershipType *string
	claimType *string
	source *string
	owner *string
	claimNumber *string
	claimNoContext *string
	claimNoType *string
	hotelId *string
	confirmationNo *string
	submitter *string
	claimStatus *string
	closeDateEnd *string
	closeDateStart *string
	claimDateEnd *string
	claimDateStart *string
	replyByEnd *string
	replyByStart *string
	arrivalEnd *string
	arrivalStart *string
	departureEnd *string
	departureStart *string
	approvalStatus *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Authorization(authorization string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Id to get the claims.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) MembershipId(membershipId string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.membershipId = &membershipId
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ProfileId(profileId string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.profileId = &profileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ProfileIdContext(profileIdContext string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.profileIdContext = &profileIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ProfileIdType(profileIdType string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.profileIdType = &profileIdType
	return r
}

// Family name, last name or Company Name.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Name(name string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.name = &name
	return r
}

// Given name, first name or names.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) GivenName(givenName string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.givenName = &givenName
	return r
}

// Membership Type code.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) MembershipType(membershipType string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.membershipType = &membershipType
	return r
}

// Type of user-definable claim to be searched.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ClaimType(claimType string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.claimType = &claimType
	return r
}

// Source of the membership claim.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Source(source string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.source = &source
	return r
}

// Unique application user ID of the person responsible for handling the claim.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Owner(owner string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.owner = &owner
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ClaimNumber(claimNumber string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.claimNumber = &claimNumber
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ClaimNoContext(claimNoContext string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.claimNoContext = &claimNoContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ClaimNoType(claimNoType string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.claimNoType = &claimNoType
	return r
}

// Property where the stay took place.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) HotelId(hotelId string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.hotelId = &hotelId
	return r
}

// Reservation confirmation or booking reference number.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ConfirmationNo(confirmationNo string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.confirmationNo = &confirmationNo
	return r
}

// Application user ID of the user who entered the claim.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Submitter(submitter string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.submitter = &submitter
	return r
}

// Status of the claim.(Open, Waiting for Manager, etc.)
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ClaimStatus(claimStatus string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.claimStatus = &claimStatus
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) CloseDateEnd(closeDateEnd string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.closeDateEnd = &closeDateEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) CloseDateStart(closeDateStart string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.closeDateStart = &closeDateStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ClaimDateEnd(claimDateEnd string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.claimDateEnd = &claimDateEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ClaimDateStart(claimDateStart string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.claimDateStart = &claimDateStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ReplyByEnd(replyByEnd string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.replyByEnd = &replyByEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ReplyByStart(replyByStart string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.replyByStart = &replyByStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ArrivalEnd(arrivalEnd string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.arrivalEnd = &arrivalEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ArrivalStart(arrivalStart string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.arrivalStart = &arrivalStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) DepartureEnd(departureEnd string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.departureEnd = &departureEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) DepartureStart(departureStart string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.departureStart = &departureStart
	return r
}

// Claim approve or reject status.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) ApprovalStatus(approvalStatus string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.approvalStatus = &approvalStatus
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Limit(limit int32) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Offset(offset int32) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetAllMembershipClaimsRequest) Execute() (*MembershipClaims, *http.Response, error) {
	return r.ApiService.GetAllMembershipClaimsExecute(r)
}

/*
GetAllMembershipClaims Get membership claims

Retrieve available membership claims without specifying the membership ID. <p><strong>OperationId:</strong>getAllMembershipClaims</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIGetAllMembershipClaimsRequest
*/
func (a *ProfileMembershipAPIService) GetAllMembershipClaims(ctx context.Context) ProfileMembershipAPIGetAllMembershipClaimsRequest {
	return ProfileMembershipAPIGetAllMembershipClaimsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MembershipClaims
func (a *ProfileMembershipAPIService) GetAllMembershipClaimsExecute(r ProfileMembershipAPIGetAllMembershipClaimsRequest) (*MembershipClaims, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipClaims
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetAllMembershipClaims")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipClaims"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
  }
	if r.profileIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdContext", r.profileIdContext, "")
  }
	if r.profileIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdType", r.profileIdType, "")
  }
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.claimType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimType", r.claimType, "")
  }
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source", r.source, "")
  }
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
  }
	if r.claimNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimNumber", r.claimNumber, "")
  }
	if r.claimNoContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimNoContext", r.claimNoContext, "")
  }
	if r.claimNoType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimNoType", r.claimNoType, "")
  }
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.confirmationNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNo", r.confirmationNo, "")
  }
	if r.submitter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "submitter", r.submitter, "")
  }
	if r.claimStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimStatus", r.claimStatus, "")
  }
	if r.closeDateEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "closeDateEnd", r.closeDateEnd, "")
  }
	if r.closeDateStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "closeDateStart", r.closeDateStart, "")
  }
	if r.claimDateEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimDateEnd", r.claimDateEnd, "")
  }
	if r.claimDateStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimDateStart", r.claimDateStart, "")
  }
	if r.replyByEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replyByEnd", r.replyByEnd, "")
  }
	if r.replyByStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replyByStart", r.replyByStart, "")
  }
	if r.arrivalEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalEnd", r.arrivalEnd, "")
  }
	if r.arrivalStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStart", r.arrivalStart, "")
  }
	if r.departureEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureEnd", r.departureEnd, "")
  }
	if r.departureStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureStart", r.departureStart, "")
  }
	if r.approvalStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalStatus", r.approvalStatus, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	awardBasedOn *string
	membershipType *string
	rateCriteriaHotelId *string
	arrivalDate *string
	departureDate *string
	bookingDate *string
	pointsBelow *int32
	pointsAbove *int32
	rateCode *string
	roomCategory *string
	rooms *string
	awardType *string
	productCriteriaMembershipType *string
	productCriteriaHotelId *string
	productCriteriaArrivalDate *string
	productCriteriaDepartureDate *string
	productCriteriaBookingDate *string
	productCriteriaPointsBelow *int32
	productCriteriaPointsAbove *int32
	packageCode *string
	upgradeCriteriaMembershipType *string
	upgradeCriteriaHotelId *string
	upgradeCriteriaArrivalDate *string
	upgradeCriteriaDepartureDate *string
	upgradeCriteriaBookingDate *string
	upgradeCriteriaPointsBelow *int32
	upgradeCriteriaPointsAbove *int32
	fromRoomCategory *string
	toRoomCategory *string
	upgradeCriteriaRooms *string
	upgradeCriteriaAwardType *string
	awardCode *string
	totalBillingAmount *float32
	currencyCode *string
	fTPaymentCriteriaPointsBelow *int32
	fTPaymentCriteriaPointsAbove *int32
	otherCriteriaAwardCode *string
	otherCriteriaMembershipType *string
	membershipLevel *string
	shortDescription *string
	valueBelow *float32
	valueAbove *float32
	otherCriteriaPointsBelow *int32
	otherCriteriaPointsAbove *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) Authorization(authorization string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.xHotelid = &xHotelid
	return r
}

// This award allows a guest to apply available membership points towards the balance of his or her bill.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) AwardBasedOn(awardBasedOn string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.awardBasedOn = &awardBasedOn
	return r
}

// Membership type for which awards are defined.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) MembershipType(membershipType string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.membershipType = &membershipType
	return r
}

// Hotel name where the award will be consumed.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) RateCriteriaHotelId(rateCriteriaHotelId string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.rateCriteriaHotelId = &rateCriteriaHotelId
	return r
}

// Arrival date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ArrivalDate(arrivalDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.arrivalDate = &arrivalDate
	return r
}

// Departure date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) DepartureDate(departureDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.departureDate = &departureDate
	return r
}

// Booking date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) BookingDate(bookingDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.bookingDate = &bookingDate
	return r
}

// Minimum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) PointsBelow(pointsBelow int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.pointsBelow = &pointsBelow
	return r
}

// Maximum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) PointsAbove(pointsAbove int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.pointsAbove = &pointsAbove
	return r
}

// Indicates rate code for the room type.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) RateCode(rateCode string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.rateCode = &rateCode
	return r
}

// Indicates which room category it belongs.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) RoomCategory(roomCategory string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.roomCategory = &roomCategory
	return r
}

// Number of rooms that the member will be using.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) Rooms(rooms string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.rooms = &rooms
	return r
}

// Indicates the award type or code.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) AwardType(awardType string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.awardType = &awardType
	return r
}

// Membership type for which awards are defined.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ProductCriteriaMembershipType(productCriteriaMembershipType string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.productCriteriaMembershipType = &productCriteriaMembershipType
	return r
}

// Hotel name where the award will be consumed.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ProductCriteriaHotelId(productCriteriaHotelId string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.productCriteriaHotelId = &productCriteriaHotelId
	return r
}

// Arrival date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ProductCriteriaArrivalDate(productCriteriaArrivalDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.productCriteriaArrivalDate = &productCriteriaArrivalDate
	return r
}

// Departure date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ProductCriteriaDepartureDate(productCriteriaDepartureDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.productCriteriaDepartureDate = &productCriteriaDepartureDate
	return r
}

// Booking date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ProductCriteriaBookingDate(productCriteriaBookingDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.productCriteriaBookingDate = &productCriteriaBookingDate
	return r
}

// Minimum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ProductCriteriaPointsBelow(productCriteriaPointsBelow int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.productCriteriaPointsBelow = &productCriteriaPointsBelow
	return r
}

// Maximum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ProductCriteriaPointsAbove(productCriteriaPointsAbove int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.productCriteriaPointsAbove = &productCriteriaPointsAbove
	return r
}

// Package/Product code for the award to check availability.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) PackageCode(packageCode string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.packageCode = &packageCode
	return r
}

// Membership type for which awards are defined.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaMembershipType(upgradeCriteriaMembershipType string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaMembershipType = &upgradeCriteriaMembershipType
	return r
}

// Hotel name where the award will be consumed.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaHotelId(upgradeCriteriaHotelId string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaHotelId = &upgradeCriteriaHotelId
	return r
}

// Arrival date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaArrivalDate(upgradeCriteriaArrivalDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaArrivalDate = &upgradeCriteriaArrivalDate
	return r
}

// Departure date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaDepartureDate(upgradeCriteriaDepartureDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaDepartureDate = &upgradeCriteriaDepartureDate
	return r
}

// Booking date of the reservation associated with the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaBookingDate(upgradeCriteriaBookingDate string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaBookingDate = &upgradeCriteriaBookingDate
	return r
}

// Minimum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaPointsBelow(upgradeCriteriaPointsBelow int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaPointsBelow = &upgradeCriteriaPointsBelow
	return r
}

// Maximum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaPointsAbove(upgradeCriteriaPointsAbove int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaPointsAbove = &upgradeCriteriaPointsAbove
	return r
}

// Indicates availability of upgrade awards based on the room type(range of room types )
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) FromRoomCategory(fromRoomCategory string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.fromRoomCategory = &fromRoomCategory
	return r
}

// Indicates availability of upgrade awards based on the room type(range of room types )
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ToRoomCategory(toRoomCategory string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.toRoomCategory = &toRoomCategory
	return r
}

// Number of rooms that the member will be using.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaRooms(upgradeCriteriaRooms string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaRooms = &upgradeCriteriaRooms
	return r
}

// Indicates the award type or code.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) UpgradeCriteriaAwardType(upgradeCriteriaAwardType string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.upgradeCriteriaAwardType = &upgradeCriteriaAwardType
	return r
}

// Unique code identifying the Award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) AwardCode(awardCode string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.awardCode = &awardCode
	return r
}

// Total amount for the bill.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) TotalBillingAmount(totalBillingAmount float32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.totalBillingAmount = &totalBillingAmount
	return r
}

// The currency code for the member.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) CurrencyCode(currencyCode string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.currencyCode = &currencyCode
	return r
}

// Minimum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) FTPaymentCriteriaPointsBelow(fTPaymentCriteriaPointsBelow int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.fTPaymentCriteriaPointsBelow = &fTPaymentCriteriaPointsBelow
	return r
}

// Maximum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) FTPaymentCriteriaPointsAbove(fTPaymentCriteriaPointsAbove int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.fTPaymentCriteriaPointsAbove = &fTPaymentCriteriaPointsAbove
	return r
}

// Unique code identifying the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) OtherCriteriaAwardCode(otherCriteriaAwardCode string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.otherCriteriaAwardCode = &otherCriteriaAwardCode
	return r
}

// Membership type for which awards are defined.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) OtherCriteriaMembershipType(otherCriteriaMembershipType string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.otherCriteriaMembershipType = &otherCriteriaMembershipType
	return r
}

// Level of this Membership Type.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) MembershipLevel(membershipLevel string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.membershipLevel = &membershipLevel
	return r
}

// Name or code identifying the award.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ShortDescription(shortDescription string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.shortDescription = &shortDescription
	return r
}

// Amount of currency of the worth of the other award,below or actual value.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ValueBelow(valueBelow float32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.valueBelow = &valueBelow
	return r
}

// Amount of currency of the worth of the other award,above or actual value.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) ValueAbove(valueAbove float32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.valueAbove = &valueAbove
	return r
}

// Minimum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) OtherCriteriaPointsBelow(otherCriteriaPointsBelow int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.otherCriteriaPointsBelow = &otherCriteriaPointsBelow
	return r
}

// Maximum number of points the member is willing to redeem.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) OtherCriteriaPointsAbove(otherCriteriaPointsAbove int32) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.otherCriteriaPointsAbove = &otherCriteriaPointsAbove
	return r
}

// External system code.
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) Execute() (*AvailableAwardsBasedOnType, *http.Response, error) {
	return r.ApiService.GetAvailableAwardsBasedOnTypeExecute(r)
}

/*
GetAvailableAwardsBasedOnType Get Available Awards

Get available awards based on type of award selected like Rates, products or services, room type upgrades, and other gifts. <p><strong>OperationId:</strong>getAvailableAwardsBasedOnType</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest
*/
func (a *ProfileMembershipAPIService) GetAvailableAwardsBasedOnType(ctx context.Context) ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest {
	return ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AvailableAwardsBasedOnType
func (a *ProfileMembershipAPIService) GetAvailableAwardsBasedOnTypeExecute(r ProfileMembershipAPIGetAvailableAwardsBasedOnTypeRequest) (*AvailableAwardsBasedOnType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AvailableAwardsBasedOnType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetAvailableAwardsBasedOnType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/availableAwardsBasedOnType"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.awardBasedOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardBasedOn", r.awardBasedOn, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.rateCriteriaHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCriteriaHotelId", r.rateCriteriaHotelId, "")
  }
	if r.arrivalDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalDate", r.arrivalDate, "")
  }
	if r.departureDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureDate", r.departureDate, "")
  }
	if r.bookingDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bookingDate", r.bookingDate, "")
  }
	if r.pointsBelow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pointsBelow", r.pointsBelow, "")
  }
	if r.pointsAbove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pointsAbove", r.pointsAbove, "")
  }
	if r.rateCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", r.rateCode, "")
  }
	if r.roomCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomCategory", r.roomCategory, "")
  }
	if r.rooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rooms", r.rooms, "")
  }
	if r.awardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardType", r.awardType, "")
  }
	if r.productCriteriaMembershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCriteriaMembershipType", r.productCriteriaMembershipType, "")
  }
	if r.productCriteriaHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCriteriaHotelId", r.productCriteriaHotelId, "")
  }
	if r.productCriteriaArrivalDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCriteriaArrivalDate", r.productCriteriaArrivalDate, "")
  }
	if r.productCriteriaDepartureDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCriteriaDepartureDate", r.productCriteriaDepartureDate, "")
  }
	if r.productCriteriaBookingDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCriteriaBookingDate", r.productCriteriaBookingDate, "")
  }
	if r.productCriteriaPointsBelow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCriteriaPointsBelow", r.productCriteriaPointsBelow, "")
  }
	if r.productCriteriaPointsAbove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCriteriaPointsAbove", r.productCriteriaPointsAbove, "")
  }
	if r.packageCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "packageCode", r.packageCode, "")
  }
	if r.upgradeCriteriaMembershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaMembershipType", r.upgradeCriteriaMembershipType, "")
  }
	if r.upgradeCriteriaHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaHotelId", r.upgradeCriteriaHotelId, "")
  }
	if r.upgradeCriteriaArrivalDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaArrivalDate", r.upgradeCriteriaArrivalDate, "")
  }
	if r.upgradeCriteriaDepartureDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaDepartureDate", r.upgradeCriteriaDepartureDate, "")
  }
	if r.upgradeCriteriaBookingDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaBookingDate", r.upgradeCriteriaBookingDate, "")
  }
	if r.upgradeCriteriaPointsBelow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaPointsBelow", r.upgradeCriteriaPointsBelow, "")
  }
	if r.upgradeCriteriaPointsAbove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaPointsAbove", r.upgradeCriteriaPointsAbove, "")
  }
	if r.fromRoomCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoomCategory", r.fromRoomCategory, "")
  }
	if r.toRoomCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoomCategory", r.toRoomCategory, "")
  }
	if r.upgradeCriteriaRooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaRooms", r.upgradeCriteriaRooms, "")
  }
	if r.upgradeCriteriaAwardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "upgradeCriteriaAwardType", r.upgradeCriteriaAwardType, "")
  }
	if r.awardCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardCode", r.awardCode, "")
  }
	if r.totalBillingAmount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalBillingAmount", r.totalBillingAmount, "")
  }
	if r.currencyCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currencyCode", r.currencyCode, "")
  }
	if r.fTPaymentCriteriaPointsBelow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fTPaymentCriteriaPointsBelow", r.fTPaymentCriteriaPointsBelow, "")
  }
	if r.fTPaymentCriteriaPointsAbove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fTPaymentCriteriaPointsAbove", r.fTPaymentCriteriaPointsAbove, "")
  }
	if r.otherCriteriaAwardCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherCriteriaAwardCode", r.otherCriteriaAwardCode, "")
  }
	if r.otherCriteriaMembershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherCriteriaMembershipType", r.otherCriteriaMembershipType, "")
  }
	if r.membershipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", r.membershipLevel, "")
  }
	if r.shortDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "shortDescription", r.shortDescription, "")
  }
	if r.valueBelow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "valueBelow", r.valueBelow, "")
  }
	if r.valueAbove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "valueAbove", r.valueAbove, "")
  }
	if r.otherCriteriaPointsBelow != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherCriteriaPointsBelow", r.otherCriteriaPointsBelow, "")
  }
	if r.otherCriteriaPointsAbove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "otherCriteriaPointsAbove", r.otherCriteriaPointsAbove, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetAwardsToGrantRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	awardBasedOn *string
	totalPointsRequired *float32
	rooms *string
	membershipId *float32
	membershipType *string
	awardType *string
	grantAwardInfoHotelId *string
	rateCode *string
	roomCategory *string
	fromRoom *string
	toRoom *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetAwardsToGrantRequest) Authorization(authorization string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetAwardsToGrantRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetAwardsToGrantRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.xHotelid = &xHotelid
	return r
}

// This award allows a guest to apply available membership points towards the balance of his or her bill.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) AwardBasedOn(awardBasedOn string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.awardBasedOn = &awardBasedOn
	return r
}

// The number of points that must be redeemed for this award.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) TotalPointsRequired(totalPointsRequired float32) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.totalPointsRequired = &totalPointsRequired
	return r
}

// Number of rooms that the member will be using.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) Rooms(rooms string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.rooms = &rooms
	return r
}

// Unique Membership ID to get award info.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) MembershipId(membershipId float32) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.membershipId = &membershipId
	return r
}

// Membership type for which awards are defined.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) MembershipType(membershipType string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.membershipType = &membershipType
	return r
}

// Indicates the award type or code.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) AwardType(awardType string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.awardType = &awardType
	return r
}

// HotelCode where the award will be consumed.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) GrantAwardInfoHotelId(grantAwardInfoHotelId string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.grantAwardInfoHotelId = &grantAwardInfoHotelId
	return r
}

// Rate code associated with the award.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) RateCode(rateCode string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.rateCode = &rateCode
	return r
}

// Indicates which room category it belongs.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) RoomCategory(roomCategory string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.roomCategory = &roomCategory
	return r
}

// Indicates room type code for the room prior to the upgrade.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) FromRoom(fromRoom string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.fromRoom = &fromRoom
	return r
}

// Indicates room type code of the upgrade room.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) ToRoom(toRoom string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.toRoom = &toRoom
	return r
}

// External system code.
func (r ProfileMembershipAPIGetAwardsToGrantRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetAwardsToGrantRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetAwardsToGrantRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetAwardsToGrantRequest) Execute() (*AwardsToGrant, *http.Response, error) {
	return r.ApiService.GetAwardsToGrantExecute(r)
}

/*
GetAwardsToGrant Get Awards to Grant

Fetch awards list to be able to grant the award to a member <p><strong>OperationId:</strong>getAwardsToGrant</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIGetAwardsToGrantRequest
*/
func (a *ProfileMembershipAPIService) GetAwardsToGrant(ctx context.Context) ProfileMembershipAPIGetAwardsToGrantRequest {
	return ProfileMembershipAPIGetAwardsToGrantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AwardsToGrant
func (a *ProfileMembershipAPIService) GetAwardsToGrantExecute(r ProfileMembershipAPIGetAwardsToGrantRequest) (*AwardsToGrant, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AwardsToGrant
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetAwardsToGrant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/awardsToGrant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.awardBasedOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardBasedOn", r.awardBasedOn, "")
  }
	if r.totalPointsRequired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalPointsRequired", r.totalPointsRequired, "")
  }
	if r.rooms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rooms", r.rooms, "")
  }
	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.awardType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardType", r.awardType, "")
  }
	if r.grantAwardInfoHotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "grantAwardInfoHotelId", r.grantAwardInfoHotelId, "")
  }
	if r.rateCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rateCode", r.rateCode, "")
  }
	if r.roomCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roomCategory", r.roomCategory, "")
  }
	if r.fromRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromRoom", r.fromRoom, "")
  }
	if r.toRoom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toRoom", r.toRoom, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetEnrollmentMatchProfilesRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	externalDatabaseID *string
	matchedProfileType *string
	language *string
	givenName *string
	surname *string
	nameTitle *string
	addressId *string
	addressIdContext *string
	addressIdType *string
	primaryInd *bool
	type_ *string
	addressLine *[]string
	cityName *string
	postalCode *string
	county *string
	state *string
	countryCode *string
	languageCode *string
	businessSegment *[]string
	territory *string
	traceCode *string
	ownerCode *string
	influenceCode *string
	hasMore *bool
	totalResults *int32
	telephoneId *string
	telephoneIdContext *string
	telephoneIdType *string
	phoneNumber *string
	phoneTechType *string
	phoneUseType *string
	phoneUseTypeDescription *string
	telephonePrimaryInd *bool
	emailInfoId *string
	emailInfoIdContext *string
	emailInfoIdType *string
	emailAddress *string
	emailPrimaryInd *bool
	emailType *string
	urlId *string
	urlIdContext *string
	urlIdType *string
	urlPrimaryInd *bool
	urlType *string
	membershipId *string
	nameOnCard *string
	membershipLevel *string
	profileId *string
	profileContext *string
	profileType *string
	paymentMethodCode *string
	amount *float32
	amountCode *string
	comments *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Authorization(authorization string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Enrollment details will be fetched from this External database.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) ExternalDatabaseID(externalDatabaseID string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.externalDatabaseID = &externalDatabaseID
	return r
}

// The types of Profile handled by the web service.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) MatchedProfileType(matchedProfileType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.matchedProfileType = &matchedProfileType
	return r
}

// Language code associated with an alternate name.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Language(language string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.language = &language
	return r
}

// Given name, first name or names.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) GivenName(givenName string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.givenName = &givenName
	return r
}

// Family name, last name. May also be used for full name if the sending system does not have the ability to separate a full name into its parts, e.g. the surname element may be used to pass the full name.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Surname(surname string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.surname = &surname
	return r
}

// Degree or honors (e.g., Ph.D., M.D.)
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) NameTitle(nameTitle string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.nameTitle = &nameTitle
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) AddressId(addressId string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.addressId = &addressId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) AddressIdContext(addressIdContext string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.addressIdContext = &addressIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) AddressIdType(addressIdType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.addressIdType = &addressIdType
	return r
}

// When true, indicates a primary information.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) PrimaryInd(primaryInd bool) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.primaryInd = &primaryInd
	return r
}

// Defines the type of address (e.g. home, business, other).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Type_(type_ string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.type_ = &type_
	return r
}

// When the address is unformatted (FormattedInd&#x3D;\&quot;false\&quot;) these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) AddressLine(addressLine []string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.addressLine = &addressLine
	return r
}

// City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) CityName(cityName string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.cityName = &cityName
	return r
}

// Post Office Code number.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) PostalCode(postalCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.postalCode = &postalCode
	return r
}

// County or District Name (e.g., Fairfax). Currently this attribute is not used.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) County(county string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.county = &county
	return r
}

// State or Province name (e.g., Texas).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) State(state string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.state = &state
	return r
}

// Code for a country or a nationality.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) CountryCode(countryCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.countryCode = &countryCode
	return r
}

// Language code associated with the address
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) LanguageCode(languageCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.languageCode = &languageCode
	return r
}

// Business/Market Segment associated to the profile.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) BusinessSegment(businessSegment []string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.businessSegment = &businessSegment
	return r
}

// Territory associated to the profile.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Territory(territory string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.territory = &territory
	return r
}

// Trace Code associated to the profile.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) TraceCode(traceCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.traceCode = &traceCode
	return r
}

// Owner Code associated to the profile.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) OwnerCode(ownerCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.ownerCode = &ownerCode
	return r
}

// Influence Code associated to the profile.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) InfluenceCode(influenceCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.influenceCode = &influenceCode
	return r
}

// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) HasMore(hasMore bool) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.hasMore = &hasMore
	return r
}

// Total number of rows queried
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) TotalResults(totalResults int32) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.totalResults = &totalResults
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) TelephoneId(telephoneId string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.telephoneId = &telephoneId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) TelephoneIdContext(telephoneIdContext string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.telephoneIdContext = &telephoneIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) TelephoneIdType(telephoneIdType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.telephoneIdType = &telephoneIdType
	return r
}

// Telephone number assigned to a single location.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) PhoneNumber(phoneNumber string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.phoneNumber = &phoneNumber
	return r
}

// Indicates type of technology associated with this telephone number, such as Voice, Data, Fax, Pager, Mobile, TTY, etc.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) PhoneTechType(phoneTechType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.phoneTechType = &phoneTechType
	return r
}

// Describes the type of telephone number, in the context of its general use (e.g. Home, Business, Emergency Contact, Travel Arranger, Day, Evening).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) PhoneUseType(phoneUseType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.phoneUseType = &phoneUseType
	return r
}

// Description of the PhoneUseType code
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) PhoneUseTypeDescription(phoneUseTypeDescription string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.phoneUseTypeDescription = &phoneUseTypeDescription
	return r
}

// When true, indicates a primary information.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) TelephonePrimaryInd(telephonePrimaryInd bool) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.telephonePrimaryInd = &telephonePrimaryInd
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) EmailInfoId(emailInfoId string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.emailInfoId = &emailInfoId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) EmailInfoIdContext(emailInfoIdContext string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.emailInfoIdContext = &emailInfoIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) EmailInfoIdType(emailInfoIdType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.emailInfoIdType = &emailInfoIdType
	return r
}

// Defines the e-mail address.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) EmailAddress(emailAddress string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.emailAddress = &emailAddress
	return r
}

// When true, indicates a primary information.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) EmailPrimaryInd(emailPrimaryInd bool) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.emailPrimaryInd = &emailPrimaryInd
	return r
}

// Defines the purpose of the e-mail address (e.g. personal, business, listserve).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) EmailType(emailType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.emailType = &emailType
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) UrlId(urlId string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.urlId = &urlId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) UrlIdContext(urlIdContext string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.urlIdContext = &urlIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) UrlIdType(urlIdType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.urlIdType = &urlIdType
	return r
}

// When true, indicates a primary information.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) UrlPrimaryInd(urlPrimaryInd bool) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.urlPrimaryInd = &urlPrimaryInd
	return r
}

// Defines the purpose of the URL address, such as personal, business, public, etc.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) UrlType(urlType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.urlType = &urlType
	return r
}

// Card Number of the membership.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) MembershipId(membershipId string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.membershipId = &membershipId
	return r
}

// Name to be displayed on the membership card.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) NameOnCard(nameOnCard string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.nameOnCard = &nameOnCard
	return r
}

// Indicates the membership level.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) MembershipLevel(membershipLevel string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.membershipLevel = &membershipLevel
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) ProfileId(profileId string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.profileId = &profileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) ProfileContext(profileContext string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.profileContext = &profileContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) ProfileType(profileType string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.profileType = &profileType
	return r
}

// Code.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) PaymentMethodCode(paymentMethodCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.paymentMethodCode = &paymentMethodCode
	return r
}

// Amount/Fee to enroll to membership Program.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Amount(amount float32) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.amount = &amount
	return r
}

// Code.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) AmountCode(amountCode string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.amountCode = &amountCode
	return r
}

// Payment Comments.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Comments(comments string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.comments = &comments
	return r
}

// External system code.
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) Execute() (*EnrollmentMatchProfiles, *http.Response, error) {
	return r.ApiService.GetEnrollmentMatchProfilesExecute(r)
}

/*
GetEnrollmentMatchProfiles Get Profiles for Enrollment

Get detailed information regarding match profiles <p><strong>OperationId:</strong>getEnrollmentMatchProfiles</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIGetEnrollmentMatchProfilesRequest
*/
func (a *ProfileMembershipAPIService) GetEnrollmentMatchProfiles(ctx context.Context) ProfileMembershipAPIGetEnrollmentMatchProfilesRequest {
	return ProfileMembershipAPIGetEnrollmentMatchProfilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnrollmentMatchProfiles
func (a *ProfileMembershipAPIService) GetEnrollmentMatchProfilesExecute(r ProfileMembershipAPIGetEnrollmentMatchProfilesRequest) (*EnrollmentMatchProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnrollmentMatchProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetEnrollmentMatchProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profileForEnrollment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.externalDatabaseID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "externalDatabaseID", r.externalDatabaseID, "")
  }
	if r.matchedProfileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchedProfileType", r.matchedProfileType, "")
  }
	if r.language != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "language", r.language, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.surname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "surname", r.surname, "")
  }
	if r.nameTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameTitle", r.nameTitle, "")
  }
	if r.addressId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addressId", r.addressId, "")
  }
	if r.addressIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addressIdContext", r.addressIdContext, "")
  }
	if r.addressIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "addressIdType", r.addressIdType, "")
  }
	if r.primaryInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "primaryInd", r.primaryInd, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.addressLine != nil {
		t := *r.addressLine
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "addressLine", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "addressLine", t, "multi")
		}
  }
	if r.cityName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cityName", r.cityName, "")
  }
	if r.postalCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "postalCode", r.postalCode, "")
  }
	if r.county != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "county", r.county, "")
  }
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "")
  }
	if r.countryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "countryCode", r.countryCode, "")
  }
	if r.languageCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "languageCode", r.languageCode, "")
  }
	if r.businessSegment != nil {
		t := *r.businessSegment
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "businessSegment", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "businessSegment", t, "multi")
		}
  }
	if r.territory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "territory", r.territory, "")
  }
	if r.traceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "traceCode", r.traceCode, "")
  }
	if r.ownerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCode", r.ownerCode, "")
  }
	if r.influenceCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "influenceCode", r.influenceCode, "")
  }
	if r.hasMore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hasMore", r.hasMore, "")
  }
	if r.totalResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "totalResults", r.totalResults, "")
  }
	if r.telephoneId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "telephoneId", r.telephoneId, "")
  }
	if r.telephoneIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "telephoneIdContext", r.telephoneIdContext, "")
  }
	if r.telephoneIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "telephoneIdType", r.telephoneIdType, "")
  }
	if r.phoneNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phoneNumber", r.phoneNumber, "")
  }
	if r.phoneTechType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phoneTechType", r.phoneTechType, "")
  }
	if r.phoneUseType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phoneUseType", r.phoneUseType, "")
  }
	if r.phoneUseTypeDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phoneUseTypeDescription", r.phoneUseTypeDescription, "")
  }
	if r.telephonePrimaryInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "telephonePrimaryInd", r.telephonePrimaryInd, "")
  }
	if r.emailInfoId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailInfoId", r.emailInfoId, "")
  }
	if r.emailInfoIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailInfoIdContext", r.emailInfoIdContext, "")
  }
	if r.emailInfoIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailInfoIdType", r.emailInfoIdType, "")
  }
	if r.emailAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailAddress", r.emailAddress, "")
  }
	if r.emailPrimaryInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailPrimaryInd", r.emailPrimaryInd, "")
  }
	if r.emailType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emailType", r.emailType, "")
  }
	if r.urlId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "urlId", r.urlId, "")
  }
	if r.urlIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "urlIdContext", r.urlIdContext, "")
  }
	if r.urlIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "urlIdType", r.urlIdType, "")
  }
	if r.urlPrimaryInd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "urlPrimaryInd", r.urlPrimaryInd, "")
  }
	if r.urlType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "urlType", r.urlType, "")
  }
	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.nameOnCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nameOnCard", r.nameOnCard, "")
  }
	if r.membershipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", r.membershipLevel, "")
  }
	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
  }
	if r.profileContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileContext", r.profileContext, "")
  }
	if r.profileType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileType", r.profileType, "")
  }
	if r.paymentMethodCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "paymentMethodCode", r.paymentMethodCode, "")
  }
	if r.amount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amount", r.amount, "")
  }
	if r.amountCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "amountCode", r.amountCode, "")
  }
	if r.comments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "comments", r.comments, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMemberPointsToExpireRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMemberPointsToExpireRequest) Authorization(authorization string) ProfileMembershipAPIGetMemberPointsToExpireRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMemberPointsToExpireRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMemberPointsToExpireRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMemberPointsToExpireRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMemberPointsToExpireRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMemberPointsToExpireRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMemberPointsToExpireRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMemberPointsToExpireRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMemberPointsToExpireRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMemberPointsToExpireRequest) Execute() (*MemberPointsToExpire, *http.Response, error) {
	return r.ApiService.GetMemberPointsToExpireExecute(r)
}

/*
GetMemberPointsToExpire Get  membership points to expire 

Use this API to retrieve your Points To Expire by membershipId. <p><strong>OperationId:</strong>getMemberPointsToExpire</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIGetMemberPointsToExpireRequest
*/
func (a *ProfileMembershipAPIService) GetMemberPointsToExpire(ctx context.Context, membershipId string) ProfileMembershipAPIGetMemberPointsToExpireRequest {
	return ProfileMembershipAPIGetMemberPointsToExpireRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MemberPointsToExpire
func (a *ProfileMembershipAPIService) GetMemberPointsToExpireExecute(r ProfileMembershipAPIGetMemberPointsToExpireRequest) (*MemberPointsToExpire, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberPointsToExpire
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMemberPointsToExpire")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/pointsToExpire"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipCardNo string
	membershipCardType string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest) Authorization(authorization string) ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest) Execute() (*MemberPointsToExpireCollection, *http.Response, error) {
	return r.ApiService.GetMemberPointsToExpireByCardNoExecute(r)
}

/*
GetMemberPointsToExpireByCardNo Get  membership points to expire 

Use this API to retrieve your Points To Expire by by specifying membership card number and membership card type. This operation can return more than one membership points to expire if duplicate card numbers are allowed in the configuration. <p><strong>OperationId:</strong>getMemberPointsToExpireByCardNo</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipCardNo The card number associated to the membership
 @param membershipCardType The type of card the membership belongs to
 @return ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest
*/
func (a *ProfileMembershipAPIService) GetMemberPointsToExpireByCardNo(ctx context.Context, membershipCardNo string, membershipCardType string) ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest {
	return ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest{
		ApiService: a,
		ctx: ctx,
		membershipCardNo: membershipCardNo,
		membershipCardType: membershipCardType,
	}
}

// Execute executes the request
//  @return MemberPointsToExpireCollection
func (a *ProfileMembershipAPIService) GetMemberPointsToExpireByCardNoExecute(r ProfileMembershipAPIGetMemberPointsToExpireByCardNoRequest) (*MemberPointsToExpireCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberPointsToExpireCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMemberPointsToExpireByCardNo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipsCard/{membershipCardNo}/membershipType/{membershipCardType}/pointsToExpire"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipCardNo"+"}", url.PathEscape(parameterValueToString(r.membershipCardNo, "membershipCardNo")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"membershipCardType"+"}", url.PathEscape(parameterValueToString(r.membershipCardType, "membershipCardType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipCardNo) < 1 {
		return localVarReturnValue, nil, reportError("membershipCardNo must have at least 1 elements")
	}
	if strlen(r.membershipCardNo) > 50 {
		return localVarReturnValue, nil, reportError("membershipCardNo must have less than 50 elements")
	}
	if strlen(r.membershipCardType) < 1 {
		return localVarReturnValue, nil, reportError("membershipCardType must have at least 1 elements")
	}
	if strlen(r.membershipCardType) > 20 {
		return localVarReturnValue, nil, reportError("membershipCardType must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipAwardExportInfoRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	awardNumber *float32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipAwardExportInfoRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipAwardExportInfoRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipAwardExportInfoRequest {
	r.xHotelid = &xHotelid
	return r
}

// Award Number to identify member&#39;s information.
func (r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) AwardNumber(awardNumber float32) ProfileMembershipAPIGetMembershipAwardExportInfoRequest {
	r.awardNumber = &awardNumber
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipAwardExportInfoRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipAwardExportInfoRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) Execute() (*MembershipAwardExportInfo, *http.Response, error) {
	return r.ApiService.GetMembershipAwardExportInfoExecute(r)
}

/*
GetMembershipAwardExportInfo Get Membership Award Export Information

Get members information for Fulfillment house processing <p><strong>OperationId:</strong>getMembershipAwardExportInfo</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIGetMembershipAwardExportInfoRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipAwardExportInfo(ctx context.Context, membershipId string) ProfileMembershipAPIGetMembershipAwardExportInfoRequest {
	return ProfileMembershipAPIGetMembershipAwardExportInfoRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MembershipAwardExportInfo
func (a *ProfileMembershipAPIService) GetMembershipAwardExportInfoExecute(r ProfileMembershipAPIGetMembershipAwardExportInfoRequest) (*MembershipAwardExportInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipAwardExportInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipAwardExportInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/awardExports"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	if r.awardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardNumber", r.awardNumber, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest) Execute() (*MembershipAwardPointsByHotel, *http.Response, error) {
	return r.ApiService.GetMembershipAwardPointsByHotelExecute(r)
}

/*
GetMembershipAwardPointsByHotel Get Membership Issued awards points 

Get a memberships issued awards points per property. <p><strong>OperationId:</strong>getMembershipAwardPointsByHotel</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @param hotelId
 @return ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipAwardPointsByHotel(ctx context.Context, membershipId string, hotelId string) ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest {
	return ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return MembershipAwardPointsByHotel
func (a *ProfileMembershipAPIService) GetMembershipAwardPointsByHotelExecute(r ProfileMembershipAPIGetMembershipAwardPointsByHotelRequest) (*MembershipAwardPointsByHotel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipAwardPointsByHotel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipAwardPointsByHotel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/memberships/{membershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipCardHistoryRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipCardHistoryRequest) Execute() (*MemberCardHistoryList, *http.Response, error) {
	return r.ApiService.GetMembershipCardHistoryExecute(r)
}

/*
GetMembershipCardHistory Get membership card history information on a profile

Use this API to retrieve membership card history on a profile. <p><strong>OperationId:</strong>getMembershipCardHistory</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId Profile Id of the guest.
 @return ProfileMembershipAPIGetMembershipCardHistoryRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipCardHistory(ctx context.Context, profileId string) ProfileMembershipAPIGetMembershipCardHistoryRequest {
	return ProfileMembershipAPIGetMembershipCardHistoryRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return MemberCardHistoryList
func (a *ProfileMembershipAPIService) GetMembershipCardHistoryExecute(r ProfileMembershipAPIGetMembershipCardHistoryRequest) (*MemberCardHistoryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberCardHistoryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipCardHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/memberships/history"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipClaimRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	claimId string
	authorization *string
	xAppKey *string
	xHotelid *string
	id *string
	idContext *string
	type_ *string
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipClaimRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipClaimRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipClaimRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetMembershipClaimRequest) Id(id string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetMembershipClaimRequest) IdContext(idContext string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetMembershipClaimRequest) Type_(type_ string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.type_ = &type_
	return r
}

// Simple type for membership claim instructions that can be used in requests for partial operations.
func (r ProfileMembershipAPIGetMembershipClaimRequest) FetchInstructions(fetchInstructions []string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipClaimRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipClaimRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipClaimRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipClaimRequest) Execute() (*MembershipClaim, *http.Response, error) {
	return r.ApiService.GetMembershipClaimExecute(r)
}

/*
GetMembershipClaim Get membership claim 

Get membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>getMembershipClaim</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param claimId
 @return ProfileMembershipAPIGetMembershipClaimRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipClaim(ctx context.Context, claimId string) ProfileMembershipAPIGetMembershipClaimRequest {
	return ProfileMembershipAPIGetMembershipClaimRequest{
		ApiService: a,
		ctx: ctx,
		claimId: claimId,
	}
}

// Execute executes the request
//  @return MembershipClaim
func (a *ProfileMembershipAPIService) GetMembershipClaimExecute(r ProfileMembershipAPIGetMembershipClaimRequest) (*MembershipClaim, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipClaim
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipClaims/{claimId}"
	localVarPath = strings.Replace(localVarPath, "{"+"claimId"+"}", url.PathEscape(parameterValueToString(r.claimId, "claimId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.claimId) < 1 {
		return localVarReturnValue, nil, reportError("claimId must have at least 1 elements")
	}
	if strlen(r.claimId) > 2000 {
		return localVarReturnValue, nil, reportError("claimId must have less than 2000 elements")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipClaimsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	profileId *string
	profileIdContext *string
	profileIdType *string
	name *string
	givenName *string
	membershipType *string
	claimType *string
	source *string
	owner *string
	claimNumber *string
	claimNoContext *string
	claimNoType *string
	hotelId *string
	confirmationNo *string
	submitter *string
	claimStatus *string
	closeDateEnd *string
	closeDateStart *string
	claimDateEnd *string
	claimDateStart *string
	replyByEnd *string
	replyByStart *string
	arrivalEnd *string
	arrivalStart *string
	departureEnd *string
	departureStart *string
	approvalStatus *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipClaimsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipClaimsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipClaimsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ProfileId(profileId string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.profileId = &profileId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ProfileIdContext(profileIdContext string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.profileIdContext = &profileIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ProfileIdType(profileIdType string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.profileIdType = &profileIdType
	return r
}

// Family name, last name or Company Name.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) Name(name string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.name = &name
	return r
}

// Given name, first name or names.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) GivenName(givenName string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.givenName = &givenName
	return r
}

// Membership Type code.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) MembershipType(membershipType string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.membershipType = &membershipType
	return r
}

// Type of user-definable claim to be searched.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ClaimType(claimType string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.claimType = &claimType
	return r
}

// Source of the membership claim.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) Source(source string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.source = &source
	return r
}

// Unique application user ID of the person responsible for handling the claim.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) Owner(owner string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.owner = &owner
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ClaimNumber(claimNumber string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.claimNumber = &claimNumber
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ClaimNoContext(claimNoContext string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.claimNoContext = &claimNoContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ClaimNoType(claimNoType string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.claimNoType = &claimNoType
	return r
}

// Property where the stay took place.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) HotelId(hotelId string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.hotelId = &hotelId
	return r
}

// Reservation confirmation or booking reference number.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ConfirmationNo(confirmationNo string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.confirmationNo = &confirmationNo
	return r
}

// Application user ID of the user who entered the claim.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) Submitter(submitter string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.submitter = &submitter
	return r
}

// Status of the claim.(Open, Waiting for Manager, etc.)
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ClaimStatus(claimStatus string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.claimStatus = &claimStatus
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) CloseDateEnd(closeDateEnd string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.closeDateEnd = &closeDateEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) CloseDateStart(closeDateStart string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.closeDateStart = &closeDateStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ClaimDateEnd(claimDateEnd string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.claimDateEnd = &claimDateEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ClaimDateStart(claimDateStart string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.claimDateStart = &claimDateStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ReplyByEnd(replyByEnd string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.replyByEnd = &replyByEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ReplyByStart(replyByStart string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.replyByStart = &replyByStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ArrivalEnd(arrivalEnd string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.arrivalEnd = &arrivalEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ArrivalStart(arrivalStart string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.arrivalStart = &arrivalStart
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) DepartureEnd(departureEnd string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.departureEnd = &departureEnd
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) DepartureStart(departureStart string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.departureStart = &departureStart
	return r
}

// Claim approve or reject status.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) ApprovalStatus(approvalStatus string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.approvalStatus = &approvalStatus
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipClaimsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipClaimsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipClaimsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipClaimsRequest) Execute() (*MembershipClaims, *http.Response, error) {
	return r.ApiService.GetMembershipClaimsExecute(r)
}

/*
GetMembershipClaims Get membership claims

Retrieve available membership claims by specifying the membership ID. <p><strong>OperationId:</strong>getMembershipClaims</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId Id to get the claims.
 @return ProfileMembershipAPIGetMembershipClaimsRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipClaims(ctx context.Context, membershipId string) ProfileMembershipAPIGetMembershipClaimsRequest {
	return ProfileMembershipAPIGetMembershipClaimsRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MembershipClaims
func (a *ProfileMembershipAPIService) GetMembershipClaimsExecute(r ProfileMembershipAPIGetMembershipClaimsRequest) (*MembershipClaims, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipClaims
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipClaims")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/claims"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
  }
	if r.profileIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdContext", r.profileIdContext, "")
  }
	if r.profileIdType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileIdType", r.profileIdType, "")
  }
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
  }
	if r.givenName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "givenName", r.givenName, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.claimType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimType", r.claimType, "")
  }
	if r.source != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source", r.source, "")
  }
	if r.owner != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "owner", r.owner, "")
  }
	if r.claimNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimNumber", r.claimNumber, "")
  }
	if r.claimNoContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimNoContext", r.claimNoContext, "")
  }
	if r.claimNoType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimNoType", r.claimNoType, "")
  }
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.confirmationNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "confirmationNo", r.confirmationNo, "")
  }
	if r.submitter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "submitter", r.submitter, "")
  }
	if r.claimStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimStatus", r.claimStatus, "")
  }
	if r.closeDateEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "closeDateEnd", r.closeDateEnd, "")
  }
	if r.closeDateStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "closeDateStart", r.closeDateStart, "")
  }
	if r.claimDateEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimDateEnd", r.claimDateEnd, "")
  }
	if r.claimDateStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "claimDateStart", r.claimDateStart, "")
  }
	if r.replyByEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replyByEnd", r.replyByEnd, "")
  }
	if r.replyByStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "replyByStart", r.replyByStart, "")
  }
	if r.arrivalEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalEnd", r.arrivalEnd, "")
  }
	if r.arrivalStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalStart", r.arrivalStart, "")
  }
	if r.departureEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureEnd", r.departureEnd, "")
  }
	if r.departureStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureStart", r.departureStart, "")
  }
	if r.approvalStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approvalStatus", r.approvalStatus, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipDetailsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	id *[]string
	idContext *[]string
	idType *[]string
	membershipType *string
	membershipId *string
	hotelId *string
	startDate *string
	endDate *string
	duration *string
	mode *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipDetailsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipDetailsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipDetailsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetMembershipDetailsRequest) Id(id []string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetMembershipDetailsRequest) IdContext(idContext []string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetMembershipDetailsRequest) IdType(idType []string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.idType = &idType
	return r
}

// The type of the membership.
func (r ProfileMembershipAPIGetMembershipDetailsRequest) MembershipType(membershipType string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.membershipType = &membershipType
	return r
}

// The card number associated with this membership.
func (r ProfileMembershipAPIGetMembershipDetailsRequest) MembershipId(membershipId string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.membershipId = &membershipId
	return r
}

// Property from which the membership stay information was received.
func (r ProfileMembershipAPIGetMembershipDetailsRequest) HotelId(hotelId string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.hotelId = &hotelId
	return r
}

func (r ProfileMembershipAPIGetMembershipDetailsRequest) StartDate(startDate string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.startDate = &startDate
	return r
}

func (r ProfileMembershipAPIGetMembershipDetailsRequest) EndDate(endDate string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.endDate = &endDate
	return r
}

func (r ProfileMembershipAPIGetMembershipDetailsRequest) Duration(duration string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.duration = &duration
	return r
}

// Whether member info search will pertain to transaction dates/ stay dates/ points credit dates.
func (r ProfileMembershipAPIGetMembershipDetailsRequest) Mode(mode string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.mode = &mode
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipDetailsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipDetailsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipDetailsRequest) Execute() (*MemberInformation, *http.Response, error) {
	return r.ApiService.GetMembershipDetailsExecute(r)
}

/*
GetMembershipDetails Get membership information on a profile

Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileMembershipAPIGetMembershipDetailsRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipDetails(ctx context.Context, profileId string) ProfileMembershipAPIGetMembershipDetailsRequest {
	return ProfileMembershipAPIGetMembershipDetailsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return MemberInformation
func (a *ProfileMembershipAPIService) GetMembershipDetailsExecute(r ProfileMembershipAPIGetMembershipDetailsRequest) (*MemberInformation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberInformation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/memberships/info"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
  }
	if r.idContext != nil {
		t := *r.idContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", t, "multi")
		}
  }
	if r.idType != nil {
		t := *r.idType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "idType", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "idType", t, "multi")
		}
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.membershipId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipId", r.membershipId, "")
  }
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
  }
	if r.mode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mode", r.mode, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipIssueAwardsListRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipType *string
	hotelBookingNumber *string
	hotelId *string
	awardCode *[]string
	awardNumber *float32
	awardBasedOn *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.xHotelid = &xHotelid
	return r
}

// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) MembershipType(membershipType string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.membershipType = &membershipType
	return r
}

// Confirmation Number attached 
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) HotelBookingNumber(hotelBookingNumber string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.hotelBookingNumber = &hotelBookingNumber
	return r
}

// Award Code belongs to which Hotel.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) HotelId(hotelId string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.hotelId = &hotelId
	return r
}

// Unique code identifying the award.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) AwardCode(awardCode []string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.awardCode = &awardCode
	return r
}

// Award Id for identifying the award.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) AwardNumber(awardNumber float32) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.awardNumber = &awardNumber
	return r
}

// Award Type for identifying the award.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) AwardBasedOn(awardBasedOn string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.awardBasedOn = &awardBasedOn
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) Execute() (*MembershipIssueAwards, *http.Response, error) {
	return r.ApiService.GetMembershipIssueAwardsListExecute(r)
}

/*
GetMembershipIssueAwardsList Get Membership Award list

Retrieve a list of member issued awards. <p><strong>OperationId:</strong>getMembershipIssueAwardsList</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIGetMembershipIssueAwardsListRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipIssueAwardsList(ctx context.Context, membershipId string) ProfileMembershipAPIGetMembershipIssueAwardsListRequest {
	return ProfileMembershipAPIGetMembershipIssueAwardsListRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MembershipIssueAwards
func (a *ProfileMembershipAPIService) GetMembershipIssueAwardsListExecute(r ProfileMembershipAPIGetMembershipIssueAwardsListRequest) (*MembershipIssueAwards, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipIssueAwards
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipIssueAwardsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/awards"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.hotelBookingNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelBookingNumber", r.hotelBookingNumber, "")
  }
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.awardCode != nil {
		t := *r.awardCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "awardCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "awardCode", t, "multi")
		}
  }
	if r.awardNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardNumber", r.awardNumber, "")
  }
	if r.awardBasedOn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "awardBasedOn", r.awardBasedOn, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipPointsExceptionsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	exceptionStatus *string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	profileId *float32
	arrivalFrom *string
	departureTo *string
	membershipType *string
	membershipLevel *string
	membershipCardNo *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Indicates the type of Exception like Exception not resolved,Points Rejected on Exception etc.,
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) ExceptionStatus(exceptionStatus string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.exceptionStatus = &exceptionStatus
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Membership transaction belongs to which Hotel.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) HotelId(hotelId string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.hotelId = &hotelId
	return r
}

// Profile Id of the guest.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) ProfileId(profileId float32) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.profileId = &profileId
	return r
}

// Arrival From Date to fetch the reservations flagged for Membership Points Exception
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) ArrivalFrom(arrivalFrom string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.arrivalFrom = &arrivalFrom
	return r
}

// Departure To Date to fetch the reservation flagged for Membership Points Exception
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) DepartureTo(departureTo string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.departureTo = &departureTo
	return r
}

// The type of the membership.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) MembershipType(membershipType string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.membershipType = &membershipType
	return r
}

// The current level of the membership.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) MembershipLevel(membershipLevel string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.membershipLevel = &membershipLevel
	return r
}

// The card number associated with this membership.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) MembershipCardNo(membershipCardNo string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.membershipCardNo = &membershipCardNo
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) Execute() (*MemberPointsExceptions, *http.Response, error) {
	return r.ApiService.GetMembershipPointsExceptionsExecute(r)
}

/*
GetMembershipPointsExceptions Get membership points exception details

Use this API to get membership points exceptions.<p><strong>OperationId:</strong>getMembershipPointsExceptions</p><br>The maximum date Range supported between arrival and departure date is 90 days.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIGetMembershipPointsExceptionsRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipPointsExceptions(ctx context.Context) ProfileMembershipAPIGetMembershipPointsExceptionsRequest {
	return ProfileMembershipAPIGetMembershipPointsExceptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MemberPointsExceptions
func (a *ProfileMembershipAPIService) GetMembershipPointsExceptionsExecute(r ProfileMembershipAPIGetMembershipPointsExceptionsRequest) (*MemberPointsExceptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberPointsExceptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipPointsExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipPointsExceptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.profileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
  }
	if r.arrivalFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "arrivalFrom", r.arrivalFrom, "")
  }
	if r.departureTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "departureTo", r.departureTo, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.membershipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", r.membershipLevel, "")
  }
	if r.membershipCardNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCardNo", r.membershipCardNo, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	parameterAddToHeaderOrQuery(localVarQueryParams, "exceptionStatus", r.exceptionStatus, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipPromotionsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	includeInactive *bool
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipPromotionsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipPromotionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipPromotionsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipPromotionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipPromotionsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipPromotionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Search criteria for fetching inactive membership promotions. When set to true, inactive records will be included.
func (r ProfileMembershipAPIGetMembershipPromotionsRequest) IncludeInactive(includeInactive bool) ProfileMembershipAPIGetMembershipPromotionsRequest {
	r.includeInactive = &includeInactive
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipPromotionsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipPromotionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipPromotionsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipPromotionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipPromotionsRequest) Execute() (*MembershipPromotionsDetails, *http.Response, error) {
	return r.ApiService.GetMembershipPromotionsExecute(r)
}

/*
GetMembershipPromotions Fetch membership promotions of a guest

Use this API to retrieve your available promotions by membershipId. <p><strong>OperationId:</strong>getMembershipPromotions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIGetMembershipPromotionsRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipPromotions(ctx context.Context, membershipId string) ProfileMembershipAPIGetMembershipPromotionsRequest {
	return ProfileMembershipAPIGetMembershipPromotionsRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MembershipPromotionsDetails
func (a *ProfileMembershipAPIService) GetMembershipPromotionsExecute(r ProfileMembershipAPIGetMembershipPromotionsRequest) (*MembershipPromotionsDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipPromotionsDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipPromotions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/promotions"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	if r.includeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeInactive", r.includeInactive, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipReservationActivityRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	hotelIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	propertyDate *string
	roomClasses *[]string
	membershipType *string
	xExternalsystem *string
	acceptLanguage *string
}

// Unique ID of the hotels to fetch the membership reservation activity.
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) HotelIds(hotelIds []string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.hotelIds = &hotelIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.xHotelid = &xHotelid
	return r
}

// Business Date of the property selected.
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) PropertyDate(propertyDate string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.propertyDate = &propertyDate
	return r
}

// Room Classes required to fetch the membership reservation activity.
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) RoomClasses(roomClasses []string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.roomClasses = &roomClasses
	return r
}

// Membership Type required to fetch the membership reservation activity.
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) MembershipType(membershipType string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.membershipType = &membershipType
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipReservationActivityRequest) Execute() (*MembershipReservationDetails, *http.Response, error) {
	return r.ApiService.GetMembershipReservationActivityExecute(r)
}

/*
GetMembershipReservationActivity Get Membership Reservation Activity

This API is useful to retrieve membership reservation activity for the day(ExpectedArrival, ExpectedDepartures, InHouse, Projected Room Revenue) <p><strong>OperationId:</strong>getMembershipReservationActivity</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIGetMembershipReservationActivityRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipReservationActivity(ctx context.Context) ProfileMembershipAPIGetMembershipReservationActivityRequest {
	return ProfileMembershipAPIGetMembershipReservationActivityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MembershipReservationDetails
func (a *ProfileMembershipAPIService) GetMembershipReservationActivityExecute(r ProfileMembershipAPIGetMembershipReservationActivityRequest) (*MembershipReservationDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipReservationDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipReservationActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipReservationActivity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.propertyDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propertyDate", r.propertyDate, "")
  }
	if r.roomClasses != nil {
		t := *r.roomClasses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomClasses", t, "multi")
		}
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipTransactionId string
	authorization *string
	xAppKey *string
	xHotelid *string
	id *string
	idContext *string
	type_ *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetMembershipTransactionRequest) Id(id string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetMembershipTransactionRequest) IdContext(idContext string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetMembershipTransactionRequest) Type_(type_ string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.type_ = &type_
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionRequest) Execute() (*MembershipTransaction, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionExecute(r)
}

/*
GetMembershipTransaction Get a membership transaction

Retrieve membership transactions. <p><strong>OperationId:</strong>getMembershipTransaction</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipTransactionId
 @return ProfileMembershipAPIGetMembershipTransactionRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransaction(ctx context.Context, membershipTransactionId string) ProfileMembershipAPIGetMembershipTransactionRequest {
	return ProfileMembershipAPIGetMembershipTransactionRequest{
		ApiService: a,
		ctx: ctx,
		membershipTransactionId: membershipTransactionId,
	}
}

// Execute executes the request
//  @return MembershipTransaction
func (a *ProfileMembershipAPIService) GetMembershipTransactionExecute(r ProfileMembershipAPIGetMembershipTransactionRequest) (*MembershipTransaction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipTransaction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipTransactions/{membershipTransactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipTransactionId"+"}", url.PathEscape(parameterValueToString(r.membershipTransactionId, "membershipTransactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipTransactionId) < 1 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have at least 1 elements")
	}
	if strlen(r.membershipTransactionId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have less than 2000 elements")
	}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipTransactionId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) Execute() (*CalculatedPoints, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionAwardPointsExecute(r)
}

/*
GetMembershipTransactionAwardPoints Fetch the Award Points Accrued for the current points transaction.

Retrieves the validated rule used to generate award points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionAwardPoints</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipTransactionId
 @return ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionAwardPoints(ctx context.Context, membershipTransactionId string) ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest {
	return ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest{
		ApiService: a,
		ctx: ctx,
		membershipTransactionId: membershipTransactionId,
	}
}

// Execute executes the request
//  @return CalculatedPoints
func (a *ProfileMembershipAPIService) GetMembershipTransactionAwardPointsExecute(r ProfileMembershipAPIGetMembershipTransactionAwardPointsRequest) (*CalculatedPoints, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CalculatedPoints
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionAwardPoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipTransactions/{membershipTransactionId}/awardPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipTransactionId"+"}", url.PathEscape(parameterValueToString(r.membershipTransactionId, "membershipTransactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipTransactionId) < 1 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have at least 1 elements")
	}
	if strlen(r.membershipTransactionId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionExceptionsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	end *string
	start *string
	id *string
	idContext *string
	type_ *string
	membershipType *string
	membershipLevel *string
	membershipCardNo *string
	includeEPE *bool
	exceptionType *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Membership belongs to which Hotel.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) HotelId(hotelId string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.hotelId = &hotelId
	return r
}

// The ending value of the date range.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) End(end string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.end = &end
	return r
}

// The starting value of the date range.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) Start(start string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.start = &start
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) Id(id string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.id = &id
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) IdContext(idContext string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.idContext = &idContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) Type_(type_ string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.type_ = &type_
	return r
}

// The type of the membership.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) MembershipType(membershipType string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.membershipType = &membershipType
	return r
}

// The current level of the membership.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) MembershipLevel(membershipLevel string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.membershipLevel = &membershipLevel
	return r
}

// The card number associated with this membership.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) MembershipCardNo(membershipCardNo string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.membershipCardNo = &membershipCardNo
	return r
}

// Indicates to Include External Processing Exception
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) IncludeEPE(includeEPE bool) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.includeEPE = &includeEPE
	return r
}

// Indicates the type of Exception like Exception not resolved,Points Rejected on Exception etc.,
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) ExceptionType(exceptionType int32) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.exceptionType = &exceptionType
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) Execute() (*MembershipTransactionExceptions, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionExceptionsExecute(r)
}

/*
GetMembershipTransactionExceptions Get membership transaction exception details

Use this API to get membership transaction exceptions on a profile. <p><strong>OperationId:</strong>getMembershipTransactionExceptions</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileMembershipAPIGetMembershipTransactionExceptionsRequest

Deprecated
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionExceptions(ctx context.Context, profileId string) ProfileMembershipAPIGetMembershipTransactionExceptionsRequest {
	return ProfileMembershipAPIGetMembershipTransactionExceptionsRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return MembershipTransactionExceptions
// Deprecated
func (a *ProfileMembershipAPIService) GetMembershipTransactionExceptionsExecute(r ProfileMembershipAPIGetMembershipTransactionExceptionsRequest) (*MembershipTransactionExceptions, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipTransactionExceptions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/membershipTransactionExceptions"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
  }
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
  }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
  }
	if r.idContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "idContext", r.idContext, "")
  }
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
  }
	if r.membershipType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipType", r.membershipType, "")
  }
	if r.membershipLevel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipLevel", r.membershipLevel, "")
  }
	if r.membershipCardNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "membershipCardNo", r.membershipCardNo, "")
  }
	if r.includeEPE != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeEPE", r.includeEPE, "")
  }
	if r.exceptionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exceptionType", r.exceptionType, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipTransactionId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) Execute() (*PointsRejectionReasons, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionPointsRejectionReasonsExecute(r)
}

/*
GetMembershipTransactionPointsRejectionReasons Fetch the reason points were not awarded for a given points transaction.

Retrieves the rule used to generate points and the reason the points were not awarded (validation failure, for e.g.'Membership level requirements not met'). <p><strong>OperationId:</strong>getMembershipTransactionPointsRejectionReasons</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipTransactionId
 @return ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionPointsRejectionReasons(ctx context.Context, membershipTransactionId string) ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest {
	return ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest{
		ApiService: a,
		ctx: ctx,
		membershipTransactionId: membershipTransactionId,
	}
}

// Execute executes the request
//  @return PointsRejectionReasons
func (a *ProfileMembershipAPIService) GetMembershipTransactionPointsRejectionReasonsExecute(r ProfileMembershipAPIGetMembershipTransactionPointsRejectionReasonsRequest) (*PointsRejectionReasons, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PointsRejectionReasons
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionPointsRejectionReasons")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipTransactions/{membershipTransactionId}/pointRejectionReasons"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipTransactionId"+"}", url.PathEscape(parameterValueToString(r.membershipTransactionId, "membershipTransactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipTransactionId) < 1 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have at least 1 elements")
	}
	if strlen(r.membershipTransactionId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionRatesRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipTransactionId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionRatesRequest) Execute() (*Rates, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionRatesExecute(r)
}

/*
GetMembershipTransactionRates Fetch the rate details associated to current points transaction.

Retrieves the dates of the stay, the rate code, the PMS rate amount, the central rate amount, the central currency and the market code associated with the stay. <p><strong>OperationId:</strong>getMembershipTransactionRates</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipTransactionId
 @return ProfileMembershipAPIGetMembershipTransactionRatesRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionRates(ctx context.Context, membershipTransactionId string) ProfileMembershipAPIGetMembershipTransactionRatesRequest {
	return ProfileMembershipAPIGetMembershipTransactionRatesRequest{
		ApiService: a,
		ctx: ctx,
		membershipTransactionId: membershipTransactionId,
	}
}

// Execute executes the request
//  @return Rates
func (a *ProfileMembershipAPIService) GetMembershipTransactionRatesExecute(r ProfileMembershipAPIGetMembershipTransactionRatesRequest) (*Rates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipTransactions/{membershipTransactionId}/rates"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipTransactionId"+"}", url.PathEscape(parameterValueToString(r.membershipTransactionId, "membershipTransactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipTransactionId) < 1 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have at least 1 elements")
	}
	if strlen(r.membershipTransactionId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionRevenueRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipTransactionId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) Execute() (*Revenues, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionRevenueExecute(r)
}

/*
GetMembershipTransactionRevenue Fetch the revenue details for the stay associated with current point transaction.

Retrieves the date the revenue was recognized, the revenue type (PMS revenue buckets are seen as revenue types in ORS), PMS revenue and central <p><strong>OperationId:</strong>getMembershipTransactionRevenue</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipTransactionId
 @return ProfileMembershipAPIGetMembershipTransactionRevenueRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionRevenue(ctx context.Context, membershipTransactionId string) ProfileMembershipAPIGetMembershipTransactionRevenueRequest {
	return ProfileMembershipAPIGetMembershipTransactionRevenueRequest{
		ApiService: a,
		ctx: ctx,
		membershipTransactionId: membershipTransactionId,
	}
}

// Execute executes the request
//  @return Revenues
func (a *ProfileMembershipAPIService) GetMembershipTransactionRevenueExecute(r ProfileMembershipAPIGetMembershipTransactionRevenueRequest) (*Revenues, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Revenues
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionRevenue")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipTransactions/{membershipTransactionId}/revenue"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipTransactionId"+"}", url.PathEscape(parameterValueToString(r.membershipTransactionId, "membershipTransactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipTransactionId) < 1 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have at least 1 elements")
	}
	if strlen(r.membershipTransactionId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionTierPointsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipTransactionId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) Limit(limit int32) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) Offset(offset int32) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) Execute() (*CalculatedPoints, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionTierPointsExecute(r)
}

/*
GetMembershipTransactionTierPoints Fetch the Tier Points Accrued for the current points transaction

Retrieves the validated rule used to generate tier points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionTierPoints</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipTransactionId
 @return ProfileMembershipAPIGetMembershipTransactionTierPointsRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionTierPoints(ctx context.Context, membershipTransactionId string) ProfileMembershipAPIGetMembershipTransactionTierPointsRequest {
	return ProfileMembershipAPIGetMembershipTransactionTierPointsRequest{
		ApiService: a,
		ctx: ctx,
		membershipTransactionId: membershipTransactionId,
	}
}

// Execute executes the request
//  @return CalculatedPoints
func (a *ProfileMembershipAPIService) GetMembershipTransactionTierPointsExecute(r ProfileMembershipAPIGetMembershipTransactionTierPointsRequest) (*CalculatedPoints, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CalculatedPoints
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionTierPoints")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipTransactions/{membershipTransactionId}/tierPoints"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipTransactionId"+"}", url.PathEscape(parameterValueToString(r.membershipTransactionId, "membershipTransactionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipTransactionId) < 1 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have at least 1 elements")
	}
	if strlen(r.membershipTransactionId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipTransactionId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionsSummaryRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionsSummaryRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionsSummaryRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionsSummaryRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionsSummaryRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionsSummaryRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionsSummaryRequest) Execute() (*MembershipTransactionsSummary, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionsSummaryExecute(r)
}

/*
GetMembershipTransactionsSummary Get membership transactions 

Get membership transactions summary information by specifying membership ID <p><strong>OperationId:</strong>getMembershipTransactionsSummary</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIGetMembershipTransactionsSummaryRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionsSummary(ctx context.Context, membershipId string) ProfileMembershipAPIGetMembershipTransactionsSummaryRequest {
	return ProfileMembershipAPIGetMembershipTransactionsSummaryRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MembershipTransactionsSummary
func (a *ProfileMembershipAPIService) GetMembershipTransactionsSummaryExecute(r ProfileMembershipAPIGetMembershipTransactionsSummaryRequest) (*MembershipTransactionsSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipTransactionsSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionsSummary")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipCardNo string
	membershipCardType string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest) Authorization(authorization string) ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest) XAppKey(xAppKey string) ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest) XHotelid(xHotelid string) ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest) Execute() (*MembershipTransactionsSummaryCollection, *http.Response, error) {
	return r.ApiService.GetMembershipTransactionsSummaryByCardNoExecute(r)
}

/*
GetMembershipTransactionsSummaryByCardNo Get membership transactions 

Get membership transactions summary information by specifying membership card number and membership card type, this operation can return more than one membership transactions if duplicate card numbers allowed in the configuration. <p><strong>OperationId:</strong>getMembershipTransactionsSummaryByCardNo</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipCardNo
 @param membershipCardType
 @return ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest
*/
func (a *ProfileMembershipAPIService) GetMembershipTransactionsSummaryByCardNo(ctx context.Context, membershipCardNo string, membershipCardType string) ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest {
	return ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest{
		ApiService: a,
		ctx: ctx,
		membershipCardNo: membershipCardNo,
		membershipCardType: membershipCardType,
	}
}

// Execute executes the request
//  @return MembershipTransactionsSummaryCollection
func (a *ProfileMembershipAPIService) GetMembershipTransactionsSummaryByCardNoExecute(r ProfileMembershipAPIGetMembershipTransactionsSummaryByCardNoRequest) (*MembershipTransactionsSummaryCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembershipTransactionsSummaryCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.GetMembershipTransactionsSummaryByCardNo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipsCard/{membershipCardNo}/membershipType/{membershipCardType}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipCardNo"+"}", url.PathEscape(parameterValueToString(r.membershipCardNo, "membershipCardNo")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"membershipCardType"+"}", url.PathEscape(parameterValueToString(r.membershipCardType, "membershipCardType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipCardNo) < 1 {
		return localVarReturnValue, nil, reportError("membershipCardNo must have at least 1 elements")
	}
	if strlen(r.membershipCardNo) > 50 {
		return localVarReturnValue, nil, reportError("membershipCardNo must have less than 50 elements")
	}
	if strlen(r.membershipCardType) < 1 {
		return localVarReturnValue, nil, reportError("membershipCardType must have at least 1 elements")
	}
	if strlen(r.membershipCardType) > 20 {
		return localVarReturnValue, nil, reportError("membershipCardType must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIIssueOtherAwardsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	otherAwardsIssueCriteria *OtherAwardsIssueCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIIssueOtherAwardsRequest) Authorization(authorization string) ProfileMembershipAPIIssueOtherAwardsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIIssueOtherAwardsRequest) XAppKey(xAppKey string) ProfileMembershipAPIIssueOtherAwardsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIIssueOtherAwardsRequest) XHotelid(xHotelid string) ProfileMembershipAPIIssueOtherAwardsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to issue an OTHER type award to a member&#39;s profile.
func (r ProfileMembershipAPIIssueOtherAwardsRequest) OtherAwardsIssueCriteria(otherAwardsIssueCriteria OtherAwardsIssueCriteria) ProfileMembershipAPIIssueOtherAwardsRequest {
	r.otherAwardsIssueCriteria = &otherAwardsIssueCriteria
	return r
}

// External system code.
func (r ProfileMembershipAPIIssueOtherAwardsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIIssueOtherAwardsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIIssueOtherAwardsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIIssueOtherAwardsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIIssueOtherAwardsRequest) Execute() (*IssuedAward, *http.Response, error) {
	return r.ApiService.IssueOtherAwardsExecute(r)
}

/*
IssueOtherAwards Issue an OTHER type award 

This API will allow you to issue OTHER type award based on membership id or membership type and membership card number <p><strong>OperationId:</strong>issueOtherAwards</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIIssueOtherAwardsRequest
*/
func (a *ProfileMembershipAPIService) IssueOtherAwards(ctx context.Context) ProfileMembershipAPIIssueOtherAwardsRequest {
	return ProfileMembershipAPIIssueOtherAwardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IssuedAward
func (a *ProfileMembershipAPIService) IssueOtherAwardsExecute(r ProfileMembershipAPIIssueOtherAwardsRequest) (*IssuedAward, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IssuedAward
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.IssueOtherAwards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/issueOtherAwards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.otherAwardsIssueCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIPingMembershipServiceRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIPingMembershipServiceRequest) Authorization(authorization string) ProfileMembershipAPIPingMembershipServiceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIPingMembershipServiceRequest) XAppKey(xAppKey string) ProfileMembershipAPIPingMembershipServiceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIPingMembershipServiceRequest) XHotelid(xHotelid string) ProfileMembershipAPIPingMembershipServiceRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r ProfileMembershipAPIPingMembershipServiceRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIPingMembershipServiceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIPingMembershipServiceRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIPingMembershipServiceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIPingMembershipServiceRequest) Execute() (*OperaVersion, *http.Response, error) {
	return r.ApiService.PingMembershipServiceExecute(r)
}

/*
PingMembershipService Operation to check status of ProfileMembership service

 <p><strong>OperationId:</strong>pingMembershipService</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIPingMembershipServiceRequest
*/
func (a *ProfileMembershipAPIService) PingMembershipService(ctx context.Context) ProfileMembershipAPIPingMembershipServiceRequest {
	return ProfileMembershipAPIPingMembershipServiceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OperaVersion
func (a *ProfileMembershipAPIService) PingMembershipServiceExecute(r ProfileMembershipAPIPingMembershipServiceRequest) (*OperaVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OperaVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.PingMembershipService")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/services/profileMembership/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIPostEnrollmentRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	enrollment *Enrollment
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIPostEnrollmentRequest) Authorization(authorization string) ProfileMembershipAPIPostEnrollmentRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIPostEnrollmentRequest) XAppKey(xAppKey string) ProfileMembershipAPIPostEnrollmentRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIPostEnrollmentRequest) XHotelid(xHotelid string) ProfileMembershipAPIPostEnrollmentRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to create profile enrollment.
func (r ProfileMembershipAPIPostEnrollmentRequest) Enrollment(enrollment Enrollment) ProfileMembershipAPIPostEnrollmentRequest {
	r.enrollment = &enrollment
	return r
}

// External system code.
func (r ProfileMembershipAPIPostEnrollmentRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIPostEnrollmentRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIPostEnrollmentRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIPostEnrollmentRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIPostEnrollmentRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostEnrollmentExecute(r)
}

/*
PostEnrollment Create an Enrollment

Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIPostEnrollmentRequest
*/
func (a *ProfileMembershipAPIService) PostEnrollment(ctx context.Context) ProfileMembershipAPIPostEnrollmentRequest {
	return ProfileMembershipAPIPostEnrollmentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) PostEnrollmentExecute(r ProfileMembershipAPIPostEnrollmentRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.PostEnrollment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/enrollments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.enrollment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIPostMembershipClaimRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipClaim *MembershipClaim
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIPostMembershipClaimRequest) Authorization(authorization string) ProfileMembershipAPIPostMembershipClaimRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIPostMembershipClaimRequest) XAppKey(xAppKey string) ProfileMembershipAPIPostMembershipClaimRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIPostMembershipClaimRequest) XHotelid(xHotelid string) ProfileMembershipAPIPostMembershipClaimRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating membership claim.
func (r ProfileMembershipAPIPostMembershipClaimRequest) MembershipClaim(membershipClaim MembershipClaim) ProfileMembershipAPIPostMembershipClaimRequest {
	r.membershipClaim = &membershipClaim
	return r
}

// External system code.
func (r ProfileMembershipAPIPostMembershipClaimRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIPostMembershipClaimRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIPostMembershipClaimRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIPostMembershipClaimRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIPostMembershipClaimRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostMembershipClaimExecute(r)
}

/*
PostMembershipClaim Create membership Claim

This will create membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>postMembershipClaim</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIPostMembershipClaimRequest
*/
func (a *ProfileMembershipAPIService) PostMembershipClaim(ctx context.Context) ProfileMembershipAPIPostMembershipClaimRequest {
	return ProfileMembershipAPIPostMembershipClaimRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) PostMembershipClaimExecute(r ProfileMembershipAPIPostMembershipClaimRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.PostMembershipClaim")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipClaims"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipClaim
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIPostMembershipPromotionRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipPromotion *MembershipPromotionDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIPostMembershipPromotionRequest) Authorization(authorization string) ProfileMembershipAPIPostMembershipPromotionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIPostMembershipPromotionRequest) XAppKey(xAppKey string) ProfileMembershipAPIPostMembershipPromotionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIPostMembershipPromotionRequest) XHotelid(xHotelid string) ProfileMembershipAPIPostMembershipPromotionRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a membership promotion.
func (r ProfileMembershipAPIPostMembershipPromotionRequest) MembershipPromotion(membershipPromotion MembershipPromotionDetails) ProfileMembershipAPIPostMembershipPromotionRequest {
	r.membershipPromotion = &membershipPromotion
	return r
}

// External system code.
func (r ProfileMembershipAPIPostMembershipPromotionRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIPostMembershipPromotionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIPostMembershipPromotionRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIPostMembershipPromotionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIPostMembershipPromotionRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostMembershipPromotionExecute(r)
}

/*
PostMembershipPromotion Create membership promotion of a guest

Create a new membership promotion . <p><strong>OperationId:</strong>postMembershipPromotion</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIPostMembershipPromotionRequest
*/
func (a *ProfileMembershipAPIService) PostMembershipPromotion(ctx context.Context, membershipId string) ProfileMembershipAPIPostMembershipPromotionRequest {
	return ProfileMembershipAPIPostMembershipPromotionRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) PostMembershipPromotionExecute(r ProfileMembershipAPIPostMembershipPromotionRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.PostMembershipPromotion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/promotions"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipPromotion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIPostMembershipTransactionRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipTransaction *MembershipTransaction
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIPostMembershipTransactionRequest) Authorization(authorization string) ProfileMembershipAPIPostMembershipTransactionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIPostMembershipTransactionRequest) XAppKey(xAppKey string) ProfileMembershipAPIPostMembershipTransactionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIPostMembershipTransactionRequest) XHotelid(xHotelid string) ProfileMembershipAPIPostMembershipTransactionRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a membership transaction.
func (r ProfileMembershipAPIPostMembershipTransactionRequest) MembershipTransaction(membershipTransaction MembershipTransaction) ProfileMembershipAPIPostMembershipTransactionRequest {
	r.membershipTransaction = &membershipTransaction
	return r
}

// External system code.
func (r ProfileMembershipAPIPostMembershipTransactionRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIPostMembershipTransactionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIPostMembershipTransactionRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIPostMembershipTransactionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIPostMembershipTransactionRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostMembershipTransactionExecute(r)
}

/*
PostMembershipTransaction Post a membership transaction

Create a new membership transaction . <p><strong>OperationId:</strong>postMembershipTransaction</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @return ProfileMembershipAPIPostMembershipTransactionRequest
*/
func (a *ProfileMembershipAPIService) PostMembershipTransaction(ctx context.Context, membershipId string) ProfileMembershipAPIPostMembershipTransactionRequest {
	return ProfileMembershipAPIPostMembershipTransactionRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) PostMembershipTransactionExecute(r ProfileMembershipAPIPostMembershipTransactionRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.PostMembershipTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipTransaction
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIPutMembershipPointsExceptionsRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipPointsExceptions *MembershipPointsExceptions
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) Authorization(authorization string) ProfileMembershipAPIPutMembershipPointsExceptionsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) XAppKey(xAppKey string) ProfileMembershipAPIPutMembershipPointsExceptionsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) XHotelid(xHotelid string) ProfileMembershipAPIPutMembershipPointsExceptionsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating membership points exceptions.
func (r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) MembershipPointsExceptions(membershipPointsExceptions MembershipPointsExceptions) ProfileMembershipAPIPutMembershipPointsExceptionsRequest {
	r.membershipPointsExceptions = &membershipPointsExceptions
	return r
}

// External system code.
func (r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIPutMembershipPointsExceptionsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIPutMembershipPointsExceptionsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutMembershipPointsExceptionsExecute(r)
}

/*
PutMembershipPointsExceptions Update membership points exceptions

Use this API to update membership points exceptions.<p><strong>OperationId:</strong>putMembershipPointsExceptions</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileMembershipAPIPutMembershipPointsExceptionsRequest
*/
func (a *ProfileMembershipAPIService) PutMembershipPointsExceptions(ctx context.Context) ProfileMembershipAPIPutMembershipPointsExceptionsRequest {
	return ProfileMembershipAPIPutMembershipPointsExceptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) PutMembershipPointsExceptionsExecute(r ProfileMembershipAPIPutMembershipPointsExceptionsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.PutMembershipPointsExceptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/membershipPointsExceptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipPointsExceptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIPutMembershipPromotionRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	membershipId string
	promotionCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	membershipPromotion *MembershipPromotionDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIPutMembershipPromotionRequest) Authorization(authorization string) ProfileMembershipAPIPutMembershipPromotionRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIPutMembershipPromotionRequest) XAppKey(xAppKey string) ProfileMembershipAPIPutMembershipPromotionRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIPutMembershipPromotionRequest) XHotelid(xHotelid string) ProfileMembershipAPIPutMembershipPromotionRequest {
	r.xHotelid = &xHotelid
	return r
}

// The request element used to update an existing membership promotion in the database.
func (r ProfileMembershipAPIPutMembershipPromotionRequest) MembershipPromotion(membershipPromotion MembershipPromotionDetails) ProfileMembershipAPIPutMembershipPromotionRequest {
	r.membershipPromotion = &membershipPromotion
	return r
}

// External system code.
func (r ProfileMembershipAPIPutMembershipPromotionRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIPutMembershipPromotionRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIPutMembershipPromotionRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIPutMembershipPromotionRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIPutMembershipPromotionRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutMembershipPromotionExecute(r)
}

/*
PutMembershipPromotion Change membership promotion of a guest

Update an existing membership promotion code in the database. <p><strong>OperationId:</strong>putMembershipPromotion</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId
 @param promotionCode An alphanumeric code for the promotion.
 @return ProfileMembershipAPIPutMembershipPromotionRequest
*/
func (a *ProfileMembershipAPIService) PutMembershipPromotion(ctx context.Context, membershipId string, promotionCode string) ProfileMembershipAPIPutMembershipPromotionRequest {
	return ProfileMembershipAPIPutMembershipPromotionRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
		promotionCode: promotionCode,
	}
}

// Execute executes the request
//  @return Status
func (a *ProfileMembershipAPIService) PutMembershipPromotionExecute(r ProfileMembershipAPIPutMembershipPromotionRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.PutMembershipPromotion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/memberships/{membershipId}/promotions/{promotionCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"promotionCode"+"}", url.PathEscape(parameterValueToString(r.promotionCode, "promotionCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.membershipId) < 1 {
		return localVarReturnValue, nil, reportError("membershipId must have at least 1 elements")
	}
	if strlen(r.membershipId) > 2000 {
		return localVarReturnValue, nil, reportError("membershipId must have less than 2000 elements")
	}
	if strlen(r.promotionCode) < 0 {
		return localVarReturnValue, nil, reportError("promotionCode must have at least 0 elements")
	}
	if strlen(r.promotionCode) > 20 {
		return localVarReturnValue, nil, reportError("promotionCode must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.membershipPromotion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileMembershipAPIRedeemAwardRequest struct {
	ctx context.Context
	ApiService *ProfileMembershipAPIService
	profileId string
	authorization *string
	xAppKey *string
	xHotelid *string
	award *Award
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileMembershipAPIRedeemAwardRequest) Authorization(authorization string) ProfileMembershipAPIRedeemAwardRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileMembershipAPIRedeemAwardRequest) XAppKey(xAppKey string) ProfileMembershipAPIRedeemAwardRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileMembershipAPIRedeemAwardRequest) XHotelid(xHotelid string) ProfileMembershipAPIRedeemAwardRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to redeem award.
func (r ProfileMembershipAPIRedeemAwardRequest) Award(award Award) ProfileMembershipAPIRedeemAwardRequest {
	r.award = &award
	return r
}

// External system code.
func (r ProfileMembershipAPIRedeemAwardRequest) XExternalsystem(xExternalsystem string) ProfileMembershipAPIRedeemAwardRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileMembershipAPIRedeemAwardRequest) AcceptLanguage(acceptLanguage string) ProfileMembershipAPIRedeemAwardRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileMembershipAPIRedeemAwardRequest) Execute() (*Award, *http.Response, error) {
	return r.ApiService.RedeemAwardExecute(r)
}

/*
RedeemAward Redeem an award

Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param profileId
 @return ProfileMembershipAPIRedeemAwardRequest
*/
func (a *ProfileMembershipAPIService) RedeemAward(ctx context.Context, profileId string) ProfileMembershipAPIRedeemAwardRequest {
	return ProfileMembershipAPIRedeemAwardRequest{
		ApiService: a,
		ctx: ctx,
		profileId: profileId,
	}
}

// Execute executes the request
//  @return Award
func (a *ProfileMembershipAPIService) RedeemAwardExecute(r ProfileMembershipAPIRedeemAwardRequest) (*Award, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Award
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileMembershipAPIService.RedeemAward")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profiles/{profileId}/awards/redeem"
	localVarPath = strings.Replace(localVarPath, "{"+"profileId"+"}", url.PathEscape(parameterValueToString(r.profileId, "profileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.profileId) < 1 {
		return localVarReturnValue, nil, reportError("profileId must have at least 1 elements")
	}
	if strlen(r.profileId) > 2000 {
		return localVarReturnValue, nil, reportError("profileId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.award
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
