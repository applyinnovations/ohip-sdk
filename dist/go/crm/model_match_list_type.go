/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MatchListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchListType{}

// MatchListType Type that contains the list of theh matchIds that will be updated to skip or don't skip profile match.
type MatchListType struct {
	// List of matchIds that will be updated to skip or don't skip profile match.
	MatchList []MatchType `json:"matchList,omitempty"`
}

// NewMatchListType instantiates a new MatchListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchListType() *MatchListType {
	this := MatchListType{}
	return &this
}

// NewMatchListTypeWithDefaults instantiates a new MatchListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchListTypeWithDefaults() *MatchListType {
	this := MatchListType{}
	return &this
}

// GetMatchList returns the MatchList field value if set, zero value otherwise.
func (o *MatchListType) GetMatchList() []MatchType {
	if o == nil || IsNil(o.MatchList) {
		var ret []MatchType
		return ret
	}
	return o.MatchList
}

// GetMatchListOk returns a tuple with the MatchList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchListType) GetMatchListOk() ([]MatchType, bool) {
	if o == nil || IsNil(o.MatchList) {
		return nil, false
	}
	return o.MatchList, true
}

// HasMatchList returns a boolean if a field has been set.
func (o *MatchListType) HasMatchList() bool {
	if o != nil && !IsNil(o.MatchList) {
		return true
	}

	return false
}

// SetMatchList gets a reference to the given []MatchType and assigns it to the MatchList field.
func (o *MatchListType) SetMatchList(v []MatchType) {
	o.MatchList = v
}

func (o MatchListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchListType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchList) {
		toSerialize["matchList"] = o.MatchList
	}
	return toSerialize, nil
}

type NullableMatchListType struct {
	value *MatchListType
	isSet bool
}

func (v NullableMatchListType) Get() *MatchListType {
	return v.value
}

func (v *NullableMatchListType) Set(val *MatchListType) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchListType) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchListType(val *MatchListType) *NullableMatchListType {
	return &NullableMatchListType{value: val, isSet: true}
}

func (v NullableMatchListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


