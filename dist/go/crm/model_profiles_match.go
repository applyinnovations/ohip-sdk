/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProfilesMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfilesMatch{}

// ProfilesMatch Response object for fetching the profiles match.
type ProfilesMatch struct {
	// List of profiles matches. The values are ordered by default using main profile first name.
	ProfilesMatchList []ProfilesMatchType `json:"profilesMatchList,omitempty"`
	// Indicates the index of the next applicable set(page).
	Offset *int32 `json:"offset,omitempty"`
	// Indicates number of records the API can return as per the API request limit sent. A maximum of 200 records can be only returned at a time.
	Limit *int32 `json:"limit,omitempty"`
	// Indicates number of records the API has returned actually as per the API request criteria.
	Count *int32 `json:"count,omitempty"`
	// Indicates whether there are more records available to be returned as per the API request criteria or not.
	HasMore *bool `json:"hasMore,omitempty"`
	// Indicates total number of records available that can be returned as per the API request criteria.
	TotalResults *int32 `json:"totalResults,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewProfilesMatch instantiates a new ProfilesMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfilesMatch() *ProfilesMatch {
	this := ProfilesMatch{}
	return &this
}

// NewProfilesMatchWithDefaults instantiates a new ProfilesMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfilesMatchWithDefaults() *ProfilesMatch {
	this := ProfilesMatch{}
	return &this
}

// GetProfilesMatchList returns the ProfilesMatchList field value if set, zero value otherwise.
func (o *ProfilesMatch) GetProfilesMatchList() []ProfilesMatchType {
	if o == nil || IsNil(o.ProfilesMatchList) {
		var ret []ProfilesMatchType
		return ret
	}
	return o.ProfilesMatchList
}

// GetProfilesMatchListOk returns a tuple with the ProfilesMatchList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetProfilesMatchListOk() ([]ProfilesMatchType, bool) {
	if o == nil || IsNil(o.ProfilesMatchList) {
		return nil, false
	}
	return o.ProfilesMatchList, true
}

// HasProfilesMatchList returns a boolean if a field has been set.
func (o *ProfilesMatch) HasProfilesMatchList() bool {
	if o != nil && !IsNil(o.ProfilesMatchList) {
		return true
	}

	return false
}

// SetProfilesMatchList gets a reference to the given []ProfilesMatchType and assigns it to the ProfilesMatchList field.
func (o *ProfilesMatch) SetProfilesMatchList(v []ProfilesMatchType) {
	o.ProfilesMatchList = v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ProfilesMatch) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ProfilesMatch) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *ProfilesMatch) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ProfilesMatch) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ProfilesMatch) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ProfilesMatch) SetLimit(v int32) {
	o.Limit = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ProfilesMatch) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ProfilesMatch) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ProfilesMatch) SetCount(v int32) {
	o.Count = &v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *ProfilesMatch) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *ProfilesMatch) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *ProfilesMatch) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *ProfilesMatch) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *ProfilesMatch) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *ProfilesMatch) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ProfilesMatch) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ProfilesMatch) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ProfilesMatch) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ProfilesMatch) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfilesMatch) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ProfilesMatch) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ProfilesMatch) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ProfilesMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfilesMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfilesMatchList) {
		toSerialize["profilesMatchList"] = o.ProfilesMatchList
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableProfilesMatch struct {
	value *ProfilesMatch
	isSet bool
}

func (v NullableProfilesMatch) Get() *ProfilesMatch {
	return v.value
}

func (v *NullableProfilesMatch) Set(val *ProfilesMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableProfilesMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableProfilesMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfilesMatch(val *ProfilesMatch) *NullableProfilesMatch {
	return &NullableProfilesMatch{value: val, isSet: true}
}

func (v NullableProfilesMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfilesMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


