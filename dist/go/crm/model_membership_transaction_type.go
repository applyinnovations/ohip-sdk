/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MembershipTransactionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MembershipTransactionType{}

// MembershipTransactionType Detailed transaction information related to a membership.
type MembershipTransactionType struct {
	MembershipDetails *MembershipDetailsType `json:"membershipDetails,omitempty"`
	MembershipTransactionDetails *MembershipTransactionDetailsType `json:"membershipTransactionDetails,omitempty"`
}

// NewMembershipTransactionType instantiates a new MembershipTransactionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMembershipTransactionType() *MembershipTransactionType {
	this := MembershipTransactionType{}
	return &this
}

// NewMembershipTransactionTypeWithDefaults instantiates a new MembershipTransactionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMembershipTransactionTypeWithDefaults() *MembershipTransactionType {
	this := MembershipTransactionType{}
	return &this
}

// GetMembershipDetails returns the MembershipDetails field value if set, zero value otherwise.
func (o *MembershipTransactionType) GetMembershipDetails() MembershipDetailsType {
	if o == nil || IsNil(o.MembershipDetails) {
		var ret MembershipDetailsType
		return ret
	}
	return *o.MembershipDetails
}

// GetMembershipDetailsOk returns a tuple with the MembershipDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionType) GetMembershipDetailsOk() (*MembershipDetailsType, bool) {
	if o == nil || IsNil(o.MembershipDetails) {
		return nil, false
	}
	return o.MembershipDetails, true
}

// HasMembershipDetails returns a boolean if a field has been set.
func (o *MembershipTransactionType) HasMembershipDetails() bool {
	if o != nil && !IsNil(o.MembershipDetails) {
		return true
	}

	return false
}

// SetMembershipDetails gets a reference to the given MembershipDetailsType and assigns it to the MembershipDetails field.
func (o *MembershipTransactionType) SetMembershipDetails(v MembershipDetailsType) {
	o.MembershipDetails = &v
}

// GetMembershipTransactionDetails returns the MembershipTransactionDetails field value if set, zero value otherwise.
func (o *MembershipTransactionType) GetMembershipTransactionDetails() MembershipTransactionDetailsType {
	if o == nil || IsNil(o.MembershipTransactionDetails) {
		var ret MembershipTransactionDetailsType
		return ret
	}
	return *o.MembershipTransactionDetails
}

// GetMembershipTransactionDetailsOk returns a tuple with the MembershipTransactionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MembershipTransactionType) GetMembershipTransactionDetailsOk() (*MembershipTransactionDetailsType, bool) {
	if o == nil || IsNil(o.MembershipTransactionDetails) {
		return nil, false
	}
	return o.MembershipTransactionDetails, true
}

// HasMembershipTransactionDetails returns a boolean if a field has been set.
func (o *MembershipTransactionType) HasMembershipTransactionDetails() bool {
	if o != nil && !IsNil(o.MembershipTransactionDetails) {
		return true
	}

	return false
}

// SetMembershipTransactionDetails gets a reference to the given MembershipTransactionDetailsType and assigns it to the MembershipTransactionDetails field.
func (o *MembershipTransactionType) SetMembershipTransactionDetails(v MembershipTransactionDetailsType) {
	o.MembershipTransactionDetails = &v
}

func (o MembershipTransactionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MembershipTransactionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MembershipDetails) {
		toSerialize["membershipDetails"] = o.MembershipDetails
	}
	if !IsNil(o.MembershipTransactionDetails) {
		toSerialize["membershipTransactionDetails"] = o.MembershipTransactionDetails
	}
	return toSerialize, nil
}

type NullableMembershipTransactionType struct {
	value *MembershipTransactionType
	isSet bool
}

func (v NullableMembershipTransactionType) Get() *MembershipTransactionType {
	return v.value
}

func (v *NullableMembershipTransactionType) Set(val *MembershipTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipTransactionType(val *MembershipTransactionType) *NullableMembershipTransactionType {
	return &NullableMembershipTransactionType{value: val, isSet: true}
}

func (v NullableMembershipTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


