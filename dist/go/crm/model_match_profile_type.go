/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MatchProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchProfileType{}

// MatchProfileType Provides information for match profile.
type MatchProfileType struct {
	// Hotel Code for the profile.
	HotelId *string `json:"hotelId,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ProfileIdList []UniqueIDType `json:"profileIdList,omitempty"`
	StatusCode *MatchStatusType `json:"statusCode,omitempty"`
}

// NewMatchProfileType instantiates a new MatchProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchProfileType() *MatchProfileType {
	this := MatchProfileType{}
	return &this
}

// NewMatchProfileTypeWithDefaults instantiates a new MatchProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchProfileTypeWithDefaults() *MatchProfileType {
	this := MatchProfileType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *MatchProfileType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchProfileType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *MatchProfileType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *MatchProfileType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetProfileIdList returns the ProfileIdList field value if set, zero value otherwise.
func (o *MatchProfileType) GetProfileIdList() []UniqueIDType {
	if o == nil || IsNil(o.ProfileIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ProfileIdList
}

// GetProfileIdListOk returns a tuple with the ProfileIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchProfileType) GetProfileIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ProfileIdList) {
		return nil, false
	}
	return o.ProfileIdList, true
}

// HasProfileIdList returns a boolean if a field has been set.
func (o *MatchProfileType) HasProfileIdList() bool {
	if o != nil && !IsNil(o.ProfileIdList) {
		return true
	}

	return false
}

// SetProfileIdList gets a reference to the given []UniqueIDType and assigns it to the ProfileIdList field.
func (o *MatchProfileType) SetProfileIdList(v []UniqueIDType) {
	o.ProfileIdList = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *MatchProfileType) GetStatusCode() MatchStatusType {
	if o == nil || IsNil(o.StatusCode) {
		var ret MatchStatusType
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchProfileType) GetStatusCodeOk() (*MatchStatusType, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *MatchProfileType) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given MatchStatusType and assigns it to the StatusCode field.
func (o *MatchProfileType) SetStatusCode(v MatchStatusType) {
	o.StatusCode = &v
}

func (o MatchProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ProfileIdList) {
		toSerialize["profileIdList"] = o.ProfileIdList
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return toSerialize, nil
}

type NullableMatchProfileType struct {
	value *MatchProfileType
	isSet bool
}

func (v NullableMatchProfileType) Get() *MatchProfileType {
	return v.value
}

func (v *NullableMatchProfileType) Set(val *MatchProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchProfileType(val *MatchProfileType) *NullableMatchProfileType {
	return &NullableMatchProfileType{value: val, isSet: true}
}

func (v NullableMatchProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


