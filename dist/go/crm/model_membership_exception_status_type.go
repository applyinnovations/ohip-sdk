/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// MembershipExceptionStatusType List of possible membership exception type.
type MembershipExceptionStatusType string

// List of membershipExceptionStatusType
const (
	MEMBERSHIPEXCEPTIONSTATUSTYPE_ALL_EXCEPTIONS MembershipExceptionStatusType = "AllExceptions"
	MEMBERSHIPEXCEPTIONSTATUSTYPE_POINTS_AWARDED_ON_EXCEPTION MembershipExceptionStatusType = "PointsAwardedOnException"
	MEMBERSHIPEXCEPTIONSTATUSTYPE_POINTS_REJECTED_ON_EXCEPTION MembershipExceptionStatusType = "PointsRejectedOnException"
	MEMBERSHIPEXCEPTIONSTATUSTYPE_EXCEPTION_NOT_RESOLVED MembershipExceptionStatusType = "ExceptionNotResolved"
)

// All allowed values of MembershipExceptionStatusType enum
var AllowedMembershipExceptionStatusTypeEnumValues = []MembershipExceptionStatusType{
	"AllExceptions",
	"PointsAwardedOnException",
	"PointsRejectedOnException",
	"ExceptionNotResolved",
}

func (v *MembershipExceptionStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MembershipExceptionStatusType(value)
	for _, existing := range AllowedMembershipExceptionStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MembershipExceptionStatusType", value)
}

// NewMembershipExceptionStatusTypeFromValue returns a pointer to a valid MembershipExceptionStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMembershipExceptionStatusTypeFromValue(v string) (*MembershipExceptionStatusType, error) {
	ev := MembershipExceptionStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MembershipExceptionStatusType: valid values are %v", v, AllowedMembershipExceptionStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MembershipExceptionStatusType) IsValid() bool {
	for _, existing := range AllowedMembershipExceptionStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to membershipExceptionStatusType value
func (v MembershipExceptionStatusType) Ptr() *MembershipExceptionStatusType {
	return &v
}

type NullableMembershipExceptionStatusType struct {
	value *MembershipExceptionStatusType
	isSet bool
}

func (v NullableMembershipExceptionStatusType) Get() *MembershipExceptionStatusType {
	return v.value
}

func (v *NullableMembershipExceptionStatusType) Set(val *MembershipExceptionStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipExceptionStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipExceptionStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipExceptionStatusType(val *MembershipExceptionStatusType) *NullableMembershipExceptionStatusType {
	return &NullableMembershipExceptionStatusType{value: val, isSet: true}
}

func (v NullableMembershipExceptionStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipExceptionStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

