/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SuspendedStayAPIService SuspendedStayAPI service
type SuspendedStayAPIService service

type SuspendedStayAPIDeleteSuspendedStayRequest struct {
	ctx context.Context
	ApiService *SuspendedStayAPIService
	suspendedStayRecordId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r SuspendedStayAPIDeleteSuspendedStayRequest) Authorization(authorization string) SuspendedStayAPIDeleteSuspendedStayRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r SuspendedStayAPIDeleteSuspendedStayRequest) XAppKey(xAppKey string) SuspendedStayAPIDeleteSuspendedStayRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r SuspendedStayAPIDeleteSuspendedStayRequest) XHotelid(xHotelid string) SuspendedStayAPIDeleteSuspendedStayRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r SuspendedStayAPIDeleteSuspendedStayRequest) XExternalsystem(xExternalsystem string) SuspendedStayAPIDeleteSuspendedStayRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r SuspendedStayAPIDeleteSuspendedStayRequest) AcceptLanguage(acceptLanguage string) SuspendedStayAPIDeleteSuspendedStayRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r SuspendedStayAPIDeleteSuspendedStayRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteSuspendedStayExecute(r)
}

/*
DeleteSuspendedStay Delete a suspended stay by the Suspended Stay Record ID.

Use this to remove a Suspended Stay from OPERA including all its details like Revenue, Rate, Membership, Errors. <p><strong>OperationId:</strong>deleteSuspendedStay</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param suspendedStayRecordId Suspended Stay Record ID.
 @return SuspendedStayAPIDeleteSuspendedStayRequest
*/
func (a *SuspendedStayAPIService) DeleteSuspendedStay(ctx context.Context, suspendedStayRecordId string) SuspendedStayAPIDeleteSuspendedStayRequest {
	return SuspendedStayAPIDeleteSuspendedStayRequest{
		ApiService: a,
		ctx: ctx,
		suspendedStayRecordId: suspendedStayRecordId,
	}
}

// Execute executes the request
//  @return Status
func (a *SuspendedStayAPIService) DeleteSuspendedStayExecute(r SuspendedStayAPIDeleteSuspendedStayRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuspendedStayAPIService.DeleteSuspendedStay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/suspendedStayRecordId/{suspendedStayRecordId}"
	localVarPath = strings.Replace(localVarPath, "{"+"suspendedStayRecordId"+"}", url.PathEscape(parameterValueToString(r.suspendedStayRecordId, "suspendedStayRecordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.suspendedStayRecordId) < 1 {
		return localVarReturnValue, nil, reportError("suspendedStayRecordId must have at least 1 elements")
	}
	if strlen(r.suspendedStayRecordId) > 2000 {
		return localVarReturnValue, nil, reportError("suspendedStayRecordId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SuspendedStayAPIGetSuspendedStayRequest struct {
	ctx context.Context
	ApiService *SuspendedStayAPIService
	suspendedStayRecordId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r SuspendedStayAPIGetSuspendedStayRequest) Authorization(authorization string) SuspendedStayAPIGetSuspendedStayRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r SuspendedStayAPIGetSuspendedStayRequest) XAppKey(xAppKey string) SuspendedStayAPIGetSuspendedStayRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r SuspendedStayAPIGetSuspendedStayRequest) XHotelid(xHotelid string) SuspendedStayAPIGetSuspendedStayRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r SuspendedStayAPIGetSuspendedStayRequest) XExternalsystem(xExternalsystem string) SuspendedStayAPIGetSuspendedStayRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r SuspendedStayAPIGetSuspendedStayRequest) AcceptLanguage(acceptLanguage string) SuspendedStayAPIGetSuspendedStayRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r SuspendedStayAPIGetSuspendedStayRequest) Execute() (*SuspendedStayType, *http.Response, error) {
	return r.ApiService.GetSuspendedStayExecute(r)
}

/*
GetSuspendedStay Get a Suspended Stay by the Suspended Stay Record ID.

This API provides Suspended Stay information including Revenue, Rate, Membership and Error details. <p><strong>OperationId:</strong>getSuspendedStay</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param suspendedStayRecordId Suspended Stay Record ID.
 @return SuspendedStayAPIGetSuspendedStayRequest
*/
func (a *SuspendedStayAPIService) GetSuspendedStay(ctx context.Context, suspendedStayRecordId string) SuspendedStayAPIGetSuspendedStayRequest {
	return SuspendedStayAPIGetSuspendedStayRequest{
		ApiService: a,
		ctx: ctx,
		suspendedStayRecordId: suspendedStayRecordId,
	}
}

// Execute executes the request
//  @return SuspendedStayType
func (a *SuspendedStayAPIService) GetSuspendedStayExecute(r SuspendedStayAPIGetSuspendedStayRequest) (*SuspendedStayType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuspendedStayType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuspendedStayAPIService.GetSuspendedStay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/suspendedStayRecordId/{suspendedStayRecordId}"
	localVarPath = strings.Replace(localVarPath, "{"+"suspendedStayRecordId"+"}", url.PathEscape(parameterValueToString(r.suspendedStayRecordId, "suspendedStayRecordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.suspendedStayRecordId) < 1 {
		return localVarReturnValue, nil, reportError("suspendedStayRecordId must have at least 1 elements")
	}
	if strlen(r.suspendedStayRecordId) > 2000 {
		return localVarReturnValue, nil, reportError("suspendedStayRecordId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SuspendedStayAPIGetSuspendedStaysRequest struct {
	ctx context.Context
	ApiService *SuspendedStayAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	reservationStatus *string
	importDate *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r SuspendedStayAPIGetSuspendedStaysRequest) Authorization(authorization string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r SuspendedStayAPIGetSuspendedStaysRequest) XAppKey(xAppKey string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r SuspendedStayAPIGetSuspendedStaysRequest) XHotelid(xHotelid string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel code.
func (r SuspendedStayAPIGetSuspendedStaysRequest) HotelId(hotelId string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.hotelId = &hotelId
	return r
}

// Status of reservation.
func (r SuspendedStayAPIGetSuspendedStaysRequest) ReservationStatus(reservationStatus string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.reservationStatus = &reservationStatus
	return r
}

// Date of creation or import of stay.
func (r SuspendedStayAPIGetSuspendedStaysRequest) ImportDate(importDate string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.importDate = &importDate
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r SuspendedStayAPIGetSuspendedStaysRequest) Limit(limit int32) SuspendedStayAPIGetSuspendedStaysRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r SuspendedStayAPIGetSuspendedStaysRequest) Offset(offset int32) SuspendedStayAPIGetSuspendedStaysRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r SuspendedStayAPIGetSuspendedStaysRequest) XExternalsystem(xExternalsystem string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r SuspendedStayAPIGetSuspendedStaysRequest) AcceptLanguage(acceptLanguage string) SuspendedStayAPIGetSuspendedStaysRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r SuspendedStayAPIGetSuspendedStaysRequest) Execute() (*SuspendedStaySummariesType, *http.Response, error) {
	return r.ApiService.GetSuspendedStaysExecute(r)
}

/*
GetSuspendedStays Get Suspended Stays

This API provides Suspended Stay information. Suspended stays are records that need to be manually processed, as they have been suspended during an upload to OPERA Cloud. <p><strong>OperationId:</strong>getSuspendedStays</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SuspendedStayAPIGetSuspendedStaysRequest
*/
func (a *SuspendedStayAPIService) GetSuspendedStays(ctx context.Context) SuspendedStayAPIGetSuspendedStaysRequest {
	return SuspendedStayAPIGetSuspendedStaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SuspendedStaySummariesType
func (a *SuspendedStayAPIService) GetSuspendedStaysExecute(r SuspendedStayAPIGetSuspendedStaysRequest) (*SuspendedStaySummariesType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuspendedStaySummariesType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuspendedStayAPIService.GetSuspendedStays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/suspendedStays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.reservationStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reservationStatus", r.reservationStatus, "")
  }
	if r.importDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "importDate", r.importDate, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SuspendedStayAPIPutProcessSuspendedStaysRequest struct {
	ctx context.Context
	ApiService *SuspendedStayAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	suspendedStayRecordId *SuspendedStayDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r SuspendedStayAPIPutProcessSuspendedStaysRequest) Authorization(authorization string) SuspendedStayAPIPutProcessSuspendedStaysRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r SuspendedStayAPIPutProcessSuspendedStaysRequest) XAppKey(xAppKey string) SuspendedStayAPIPutProcessSuspendedStaysRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r SuspendedStayAPIPutProcessSuspendedStaysRequest) XHotelid(xHotelid string) SuspendedStayAPIPutProcessSuspendedStaysRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for change/modification of Suspended Stay, including Revenue, Rate and Membership details. If no Suspended Stay Record IDs are sent in the body all suspended stays will be processed.
func (r SuspendedStayAPIPutProcessSuspendedStaysRequest) SuspendedStayRecordId(suspendedStayRecordId SuspendedStayDetails) SuspendedStayAPIPutProcessSuspendedStaysRequest {
	r.suspendedStayRecordId = &suspendedStayRecordId
	return r
}

// External system code.
func (r SuspendedStayAPIPutProcessSuspendedStaysRequest) XExternalsystem(xExternalsystem string) SuspendedStayAPIPutProcessSuspendedStaysRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r SuspendedStayAPIPutProcessSuspendedStaysRequest) AcceptLanguage(acceptLanguage string) SuspendedStayAPIPutProcessSuspendedStaysRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r SuspendedStayAPIPutProcessSuspendedStaysRequest) Execute() (*SuspendedStayErrorsType, *http.Response, error) {
	return r.ApiService.PutProcessSuspendedStaysExecute(r)
}

/*
PutProcessSuspendedStays Process Suspended Stays

This API processes Suspended Stay. If no Suspended Stay Record IDs are sent in the body all suspended stays will be processed. <p><strong>OperationId:</strong>putProcessSuspendedStays</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SuspendedStayAPIPutProcessSuspendedStaysRequest
*/
func (a *SuspendedStayAPIService) PutProcessSuspendedStays(ctx context.Context) SuspendedStayAPIPutProcessSuspendedStaysRequest {
	return SuspendedStayAPIPutProcessSuspendedStaysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SuspendedStayErrorsType
func (a *SuspendedStayAPIService) PutProcessSuspendedStaysExecute(r SuspendedStayAPIPutProcessSuspendedStaysRequest) (*SuspendedStayErrorsType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuspendedStayErrorsType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuspendedStayAPIService.PutProcessSuspendedStays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/processSuspendedStays"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.suspendedStayRecordId
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SuspendedStayAPIPutSuspendedStayRequest struct {
	ctx context.Context
	ApiService *SuspendedStayAPIService
	suspendedStayRecordId string
	authorization *string
	xAppKey *string
	xHotelid *string
	suspendedStay *SuspendedStayType
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r SuspendedStayAPIPutSuspendedStayRequest) Authorization(authorization string) SuspendedStayAPIPutSuspendedStayRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r SuspendedStayAPIPutSuspendedStayRequest) XAppKey(xAppKey string) SuspendedStayAPIPutSuspendedStayRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r SuspendedStayAPIPutSuspendedStayRequest) XHotelid(xHotelid string) SuspendedStayAPIPutSuspendedStayRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for change/modification of Suspended Stay, including Revenue, Rate and Membership details.
func (r SuspendedStayAPIPutSuspendedStayRequest) SuspendedStay(suspendedStay SuspendedStayType) SuspendedStayAPIPutSuspendedStayRequest {
	r.suspendedStay = &suspendedStay
	return r
}

// External system code.
func (r SuspendedStayAPIPutSuspendedStayRequest) XExternalsystem(xExternalsystem string) SuspendedStayAPIPutSuspendedStayRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r SuspendedStayAPIPutSuspendedStayRequest) AcceptLanguage(acceptLanguage string) SuspendedStayAPIPutSuspendedStayRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r SuspendedStayAPIPutSuspendedStayRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutSuspendedStayExecute(r)
}

/*
PutSuspendedStay Update a Suspended Stay by the Suspended Stay Record ID.

Use this to update a Suspended Stay information including Revenue, Rate and Membership details.  <p><strong>OperationId:</strong>putSuspendedStay</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param suspendedStayRecordId Suspended Stay Record ID.
 @return SuspendedStayAPIPutSuspendedStayRequest
*/
func (a *SuspendedStayAPIService) PutSuspendedStay(ctx context.Context, suspendedStayRecordId string) SuspendedStayAPIPutSuspendedStayRequest {
	return SuspendedStayAPIPutSuspendedStayRequest{
		ApiService: a,
		ctx: ctx,
		suspendedStayRecordId: suspendedStayRecordId,
	}
}

// Execute executes the request
//  @return Status
func (a *SuspendedStayAPIService) PutSuspendedStayExecute(r SuspendedStayAPIPutSuspendedStayRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuspendedStayAPIService.PutSuspendedStay")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/suspendedStayRecordId/{suspendedStayRecordId}"
	localVarPath = strings.Replace(localVarPath, "{"+"suspendedStayRecordId"+"}", url.PathEscape(parameterValueToString(r.suspendedStayRecordId, "suspendedStayRecordId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.suspendedStayRecordId) < 1 {
		return localVarReturnValue, nil, reportError("suspendedStayRecordId must have at least 1 elements")
	}
	if strlen(r.suspendedStayRecordId) > 2000 {
		return localVarReturnValue, nil, reportError("suspendedStayRecordId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.suspendedStay
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
