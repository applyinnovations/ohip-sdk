/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MemberTransactionRecentSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberTransactionRecentSummaryType{}

// MemberTransactionRecentSummaryType Itemized information related to a membership transactions summary.
type MemberTransactionRecentSummaryType struct {
	AwardPoints *MemberTransactionSummaryAwardPointsType `json:"awardPoints,omitempty"`
	GuestStays *MemberTransactionSummaryGuestStaysType `json:"guestStays,omitempty"`
	TierPoints *MemberTransactionSummaryTierPointsType `json:"tierPoints,omitempty"`
	// Range in Years.
	Years *int32 `json:"years,omitempty"`
}

// NewMemberTransactionRecentSummaryType instantiates a new MemberTransactionRecentSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberTransactionRecentSummaryType() *MemberTransactionRecentSummaryType {
	this := MemberTransactionRecentSummaryType{}
	return &this
}

// NewMemberTransactionRecentSummaryTypeWithDefaults instantiates a new MemberTransactionRecentSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberTransactionRecentSummaryTypeWithDefaults() *MemberTransactionRecentSummaryType {
	this := MemberTransactionRecentSummaryType{}
	return &this
}

// GetAwardPoints returns the AwardPoints field value if set, zero value otherwise.
func (o *MemberTransactionRecentSummaryType) GetAwardPoints() MemberTransactionSummaryAwardPointsType {
	if o == nil || IsNil(o.AwardPoints) {
		var ret MemberTransactionSummaryAwardPointsType
		return ret
	}
	return *o.AwardPoints
}

// GetAwardPointsOk returns a tuple with the AwardPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionRecentSummaryType) GetAwardPointsOk() (*MemberTransactionSummaryAwardPointsType, bool) {
	if o == nil || IsNil(o.AwardPoints) {
		return nil, false
	}
	return o.AwardPoints, true
}

// HasAwardPoints returns a boolean if a field has been set.
func (o *MemberTransactionRecentSummaryType) HasAwardPoints() bool {
	if o != nil && !IsNil(o.AwardPoints) {
		return true
	}

	return false
}

// SetAwardPoints gets a reference to the given MemberTransactionSummaryAwardPointsType and assigns it to the AwardPoints field.
func (o *MemberTransactionRecentSummaryType) SetAwardPoints(v MemberTransactionSummaryAwardPointsType) {
	o.AwardPoints = &v
}

// GetGuestStays returns the GuestStays field value if set, zero value otherwise.
func (o *MemberTransactionRecentSummaryType) GetGuestStays() MemberTransactionSummaryGuestStaysType {
	if o == nil || IsNil(o.GuestStays) {
		var ret MemberTransactionSummaryGuestStaysType
		return ret
	}
	return *o.GuestStays
}

// GetGuestStaysOk returns a tuple with the GuestStays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionRecentSummaryType) GetGuestStaysOk() (*MemberTransactionSummaryGuestStaysType, bool) {
	if o == nil || IsNil(o.GuestStays) {
		return nil, false
	}
	return o.GuestStays, true
}

// HasGuestStays returns a boolean if a field has been set.
func (o *MemberTransactionRecentSummaryType) HasGuestStays() bool {
	if o != nil && !IsNil(o.GuestStays) {
		return true
	}

	return false
}

// SetGuestStays gets a reference to the given MemberTransactionSummaryGuestStaysType and assigns it to the GuestStays field.
func (o *MemberTransactionRecentSummaryType) SetGuestStays(v MemberTransactionSummaryGuestStaysType) {
	o.GuestStays = &v
}

// GetTierPoints returns the TierPoints field value if set, zero value otherwise.
func (o *MemberTransactionRecentSummaryType) GetTierPoints() MemberTransactionSummaryTierPointsType {
	if o == nil || IsNil(o.TierPoints) {
		var ret MemberTransactionSummaryTierPointsType
		return ret
	}
	return *o.TierPoints
}

// GetTierPointsOk returns a tuple with the TierPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionRecentSummaryType) GetTierPointsOk() (*MemberTransactionSummaryTierPointsType, bool) {
	if o == nil || IsNil(o.TierPoints) {
		return nil, false
	}
	return o.TierPoints, true
}

// HasTierPoints returns a boolean if a field has been set.
func (o *MemberTransactionRecentSummaryType) HasTierPoints() bool {
	if o != nil && !IsNil(o.TierPoints) {
		return true
	}

	return false
}

// SetTierPoints gets a reference to the given MemberTransactionSummaryTierPointsType and assigns it to the TierPoints field.
func (o *MemberTransactionRecentSummaryType) SetTierPoints(v MemberTransactionSummaryTierPointsType) {
	o.TierPoints = &v
}

// GetYears returns the Years field value if set, zero value otherwise.
func (o *MemberTransactionRecentSummaryType) GetYears() int32 {
	if o == nil || IsNil(o.Years) {
		var ret int32
		return ret
	}
	return *o.Years
}

// GetYearsOk returns a tuple with the Years field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTransactionRecentSummaryType) GetYearsOk() (*int32, bool) {
	if o == nil || IsNil(o.Years) {
		return nil, false
	}
	return o.Years, true
}

// HasYears returns a boolean if a field has been set.
func (o *MemberTransactionRecentSummaryType) HasYears() bool {
	if o != nil && !IsNil(o.Years) {
		return true
	}

	return false
}

// SetYears gets a reference to the given int32 and assigns it to the Years field.
func (o *MemberTransactionRecentSummaryType) SetYears(v int32) {
	o.Years = &v
}

func (o MemberTransactionRecentSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberTransactionRecentSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardPoints) {
		toSerialize["awardPoints"] = o.AwardPoints
	}
	if !IsNil(o.GuestStays) {
		toSerialize["guestStays"] = o.GuestStays
	}
	if !IsNil(o.TierPoints) {
		toSerialize["tierPoints"] = o.TierPoints
	}
	if !IsNil(o.Years) {
		toSerialize["years"] = o.Years
	}
	return toSerialize, nil
}

type NullableMemberTransactionRecentSummaryType struct {
	value *MemberTransactionRecentSummaryType
	isSet bool
}

func (v NullableMemberTransactionRecentSummaryType) Get() *MemberTransactionRecentSummaryType {
	return v.value
}

func (v *NullableMemberTransactionRecentSummaryType) Set(val *MemberTransactionRecentSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberTransactionRecentSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberTransactionRecentSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberTransactionRecentSummaryType(val *MemberTransactionRecentSummaryType) *NullableMemberTransactionRecentSummaryType {
	return &NullableMemberTransactionRecentSummaryType{value: val, isSet: true}
}

func (v NullableMemberTransactionRecentSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberTransactionRecentSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


