/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// EnrollmentTypeType The type of external system that the guest is enrolling in, such as Loyalty, Gaming or Activities.
type EnrollmentTypeType string

// List of enrollmentTypeType
const (
	ENROLLMENTTYPETYPE_GAMING EnrollmentTypeType = "Gaming"
	ENROLLMENTTYPETYPE_LOYALTY EnrollmentTypeType = "Loyalty"
	ENROLLMENTTYPETYPE_ACTIVITIES EnrollmentTypeType = "Activities"
)

// All allowed values of EnrollmentTypeType enum
var AllowedEnrollmentTypeTypeEnumValues = []EnrollmentTypeType{
	"Gaming",
	"Loyalty",
	"Activities",
}

func (v *EnrollmentTypeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnrollmentTypeType(value)
	for _, existing := range AllowedEnrollmentTypeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnrollmentTypeType", value)
}

// NewEnrollmentTypeTypeFromValue returns a pointer to a valid EnrollmentTypeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnrollmentTypeTypeFromValue(v string) (*EnrollmentTypeType, error) {
	ev := EnrollmentTypeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnrollmentTypeType: valid values are %v", v, AllowedEnrollmentTypeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnrollmentTypeType) IsValid() bool {
	for _, existing := range AllowedEnrollmentTypeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to enrollmentTypeType value
func (v EnrollmentTypeType) Ptr() *EnrollmentTypeType {
	return &v
}

type NullableEnrollmentTypeType struct {
	value *EnrollmentTypeType
	isSet bool
}

func (v NullableEnrollmentTypeType) Get() *EnrollmentTypeType {
	return v.value
}

func (v *NullableEnrollmentTypeType) Set(val *EnrollmentTypeType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrollmentTypeType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrollmentTypeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrollmentTypeType(val *EnrollmentTypeType) *NullableEnrollmentTypeType {
	return &NullableEnrollmentTypeType{value: val, isSet: true}
}

func (v NullableEnrollmentTypeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrollmentTypeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

