/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MatchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchType{}

// MatchType Type that contains matchId and if this particular matchId is set to skip profile match or not.
type MatchType struct {
	// Identifier of the match record.
	MatchId *string `json:"matchId,omitempty"`
	// If true, it sets the record to skip profile match for this particular matchId. if false, it sets the record to not skip profile match.
	SkipProfileMatch *bool `json:"skipProfileMatch,omitempty"`
}

// NewMatchType instantiates a new MatchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchType() *MatchType {
	this := MatchType{}
	return &this
}

// NewMatchTypeWithDefaults instantiates a new MatchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchTypeWithDefaults() *MatchType {
	this := MatchType{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *MatchType) GetMatchId() string {
	if o == nil || IsNil(o.MatchId) {
		var ret string
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchType) GetMatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *MatchType) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given string and assigns it to the MatchId field.
func (o *MatchType) SetMatchId(v string) {
	o.MatchId = &v
}

// GetSkipProfileMatch returns the SkipProfileMatch field value if set, zero value otherwise.
func (o *MatchType) GetSkipProfileMatch() bool {
	if o == nil || IsNil(o.SkipProfileMatch) {
		var ret bool
		return ret
	}
	return *o.SkipProfileMatch
}

// GetSkipProfileMatchOk returns a tuple with the SkipProfileMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchType) GetSkipProfileMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipProfileMatch) {
		return nil, false
	}
	return o.SkipProfileMatch, true
}

// HasSkipProfileMatch returns a boolean if a field has been set.
func (o *MatchType) HasSkipProfileMatch() bool {
	if o != nil && !IsNil(o.SkipProfileMatch) {
		return true
	}

	return false
}

// SetSkipProfileMatch gets a reference to the given bool and assigns it to the SkipProfileMatch field.
func (o *MatchType) SetSkipProfileMatch(v bool) {
	o.SkipProfileMatch = &v
}

func (o MatchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchId) {
		toSerialize["matchId"] = o.MatchId
	}
	if !IsNil(o.SkipProfileMatch) {
		toSerialize["skipProfileMatch"] = o.SkipProfileMatch
	}
	return toSerialize, nil
}

type NullableMatchType struct {
	value *MatchType
	isSet bool
}

func (v NullableMatchType) Get() *MatchType {
	return v.value
}

func (v *NullableMatchType) Set(val *MatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchType(val *MatchType) *NullableMatchType {
	return &NullableMatchType{value: val, isSet: true}
}

func (v NullableMatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


