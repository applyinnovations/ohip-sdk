/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ProfileLOVApiService ProfileLOVApi service
type ProfileLOVApiService service

type ProfileLOVApiGetAvailableARAddressesRequest struct {
	ctx context.Context
	ApiService *ProfileLOVApiService
	profileId *string
	hotelId *string
	authorization *string
	xAppKey *string
	xHotelid *string
	accountId *string
	accountIdContext *string
	accountType *string
	accountNo *string
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileLOVApiGetAvailableARAddressesRequest) ProfileId(profileId string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.profileId = &profileId
	return r
}

// The property where the AR Account exists or is being created.
func (r ProfileLOVApiGetAvailableARAddressesRequest) HotelId(hotelId string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.hotelId = &hotelId
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileLOVApiGetAvailableARAddressesRequest) Authorization(authorization string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileLOVApiGetAvailableARAddressesRequest) XAppKey(xAppKey string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileLOVApiGetAvailableARAddressesRequest) XHotelid(xHotelid string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileLOVApiGetAvailableARAddressesRequest) AccountId(accountId string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.accountId = &accountId
	return r
}

// Used to identify the source of the identifier (e.g., IATA, ABTA).
func (r ProfileLOVApiGetAvailableARAddressesRequest) AccountIdContext(accountIdContext string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.accountIdContext = &accountIdContext
	return r
}

// A reference to the type of object defined by the UniqueID element.
func (r ProfileLOVApiGetAvailableARAddressesRequest) AccountType(accountType string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.accountType = &accountType
	return r
}

// The Account Number of the AR Account of the Profile.
func (r ProfileLOVApiGetAvailableARAddressesRequest) AccountNo(accountNo string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.accountNo = &accountNo
	return r
}

// External system code.
func (r ProfileLOVApiGetAvailableARAddressesRequest) XExternalsystem(xExternalsystem string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileLOVApiGetAvailableARAddressesRequest) AcceptLanguage(acceptLanguage string) ProfileLOVApiGetAvailableARAddressesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileLOVApiGetAvailableARAddressesRequest) Execute() (*AvailableARAddresses, *http.Response, error) {
	return r.ApiService.GetAvailableARAddressesExecute(r)
}

/*
GetAvailableARAddresses Get available AR Addresses 

Use this API to fetch the available AR Addresses List Of Values for profiles <p><strong>OperationId:</strong>getAvailableARAddresses</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileLOVApiGetAvailableARAddressesRequest
*/
func (a *ProfileLOVApiService) GetAvailableARAddresses(ctx context.Context) ProfileLOVApiGetAvailableARAddressesRequest {
	return ProfileLOVApiGetAvailableARAddressesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AvailableARAddresses
func (a *ProfileLOVApiService) GetAvailableARAddressesExecute(r ProfileLOVApiGetAvailableARAddressesRequest) (*AvailableARAddresses, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AvailableARAddresses
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileLOVApiService.GetAvailableARAddresses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profileListOfValues/availableARAddresses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "profileId", r.profileId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	if r.accountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountId", r.accountId, "")
	}
	if r.accountIdContext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountIdContext", r.accountIdContext, "")
	}
	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountType", r.accountType, "")
	}
	if r.accountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountNo", r.accountNo, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProfileLOVApiGetAvailablePreferencesRequest struct {
	ctx context.Context
	ApiService *ProfileLOVApiService
	id *string
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	maxFetchSize *int32
	xExternalsystem *string
	acceptLanguage *string
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r ProfileLOVApiGetAvailablePreferencesRequest) Id(id string) ProfileLOVApiGetAvailablePreferencesRequest {
	r.id = &id
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r ProfileLOVApiGetAvailablePreferencesRequest) Authorization(authorization string) ProfileLOVApiGetAvailablePreferencesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r ProfileLOVApiGetAvailablePreferencesRequest) XAppKey(xAppKey string) ProfileLOVApiGetAvailablePreferencesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r ProfileLOVApiGetAvailablePreferencesRequest) XHotelid(xHotelid string) ProfileLOVApiGetAvailablePreferencesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Property for which preferences are to be fetched.
func (r ProfileLOVApiGetAvailablePreferencesRequest) HotelId(hotelId string) ProfileLOVApiGetAvailablePreferencesRequest {
	r.hotelId = &hotelId
	return r
}

// Maximum records to be fetched.
func (r ProfileLOVApiGetAvailablePreferencesRequest) MaxFetchSize(maxFetchSize int32) ProfileLOVApiGetAvailablePreferencesRequest {
	r.maxFetchSize = &maxFetchSize
	return r
}

// External system code.
func (r ProfileLOVApiGetAvailablePreferencesRequest) XExternalsystem(xExternalsystem string) ProfileLOVApiGetAvailablePreferencesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r ProfileLOVApiGetAvailablePreferencesRequest) AcceptLanguage(acceptLanguage string) ProfileLOVApiGetAvailablePreferencesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ProfileLOVApiGetAvailablePreferencesRequest) Execute() (*AvailablePreferences, *http.Response, error) {
	return r.ApiService.GetAvailablePreferencesExecute(r)
}

/*
GetAvailablePreferences Get available preferences

Use this API to fetch the available preferences List Of Values for profiles <p><strong>OperationId:</strong>getAvailablePreferences</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProfileLOVApiGetAvailablePreferencesRequest
*/
func (a *ProfileLOVApiService) GetAvailablePreferences(ctx context.Context) ProfileLOVApiGetAvailablePreferencesRequest {
	return ProfileLOVApiGetAvailablePreferencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AvailablePreferences
func (a *ProfileLOVApiService) GetAvailablePreferencesExecute(r ProfileLOVApiGetAvailablePreferencesRequest) (*AvailablePreferences, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AvailablePreferences
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProfileLOVApiService.GetAvailablePreferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/profileListOfValues/availablePreferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
	}
	if r.maxFetchSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxFetchSize", r.maxFetchSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
