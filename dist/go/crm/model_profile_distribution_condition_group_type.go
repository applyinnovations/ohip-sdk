/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProfileDistributionConditionGroupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileDistributionConditionGroupType{}

// ProfileDistributionConditionGroupType struct for ProfileDistributionConditionGroupType
type ProfileDistributionConditionGroupType struct {
	Condition []ProfileDistributionConditionType `json:"condition,omitempty"`
	ConditionGroup []ProfileDistributionConditionGroupType `json:"conditionGroup,omitempty"`
	LogicalOperator *LogicalOperatorType `json:"logicalOperator,omitempty"`
}

// NewProfileDistributionConditionGroupType instantiates a new ProfileDistributionConditionGroupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileDistributionConditionGroupType() *ProfileDistributionConditionGroupType {
	this := ProfileDistributionConditionGroupType{}
	return &this
}

// NewProfileDistributionConditionGroupTypeWithDefaults instantiates a new ProfileDistributionConditionGroupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDistributionConditionGroupTypeWithDefaults() *ProfileDistributionConditionGroupType {
	this := ProfileDistributionConditionGroupType{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ProfileDistributionConditionGroupType) GetCondition() []ProfileDistributionConditionType {
	if o == nil || IsNil(o.Condition) {
		var ret []ProfileDistributionConditionType
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDistributionConditionGroupType) GetConditionOk() ([]ProfileDistributionConditionType, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ProfileDistributionConditionGroupType) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given []ProfileDistributionConditionType and assigns it to the Condition field.
func (o *ProfileDistributionConditionGroupType) SetCondition(v []ProfileDistributionConditionType) {
	o.Condition = v
}

// GetConditionGroup returns the ConditionGroup field value if set, zero value otherwise.
func (o *ProfileDistributionConditionGroupType) GetConditionGroup() []ProfileDistributionConditionGroupType {
	if o == nil || IsNil(o.ConditionGroup) {
		var ret []ProfileDistributionConditionGroupType
		return ret
	}
	return o.ConditionGroup
}

// GetConditionGroupOk returns a tuple with the ConditionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDistributionConditionGroupType) GetConditionGroupOk() ([]ProfileDistributionConditionGroupType, bool) {
	if o == nil || IsNil(o.ConditionGroup) {
		return nil, false
	}
	return o.ConditionGroup, true
}

// HasConditionGroup returns a boolean if a field has been set.
func (o *ProfileDistributionConditionGroupType) HasConditionGroup() bool {
	if o != nil && !IsNil(o.ConditionGroup) {
		return true
	}

	return false
}

// SetConditionGroup gets a reference to the given []ProfileDistributionConditionGroupType and assigns it to the ConditionGroup field.
func (o *ProfileDistributionConditionGroupType) SetConditionGroup(v []ProfileDistributionConditionGroupType) {
	o.ConditionGroup = v
}

// GetLogicalOperator returns the LogicalOperator field value if set, zero value otherwise.
func (o *ProfileDistributionConditionGroupType) GetLogicalOperator() LogicalOperatorType {
	if o == nil || IsNil(o.LogicalOperator) {
		var ret LogicalOperatorType
		return ret
	}
	return *o.LogicalOperator
}

// GetLogicalOperatorOk returns a tuple with the LogicalOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileDistributionConditionGroupType) GetLogicalOperatorOk() (*LogicalOperatorType, bool) {
	if o == nil || IsNil(o.LogicalOperator) {
		return nil, false
	}
	return o.LogicalOperator, true
}

// HasLogicalOperator returns a boolean if a field has been set.
func (o *ProfileDistributionConditionGroupType) HasLogicalOperator() bool {
	if o != nil && !IsNil(o.LogicalOperator) {
		return true
	}

	return false
}

// SetLogicalOperator gets a reference to the given LogicalOperatorType and assigns it to the LogicalOperator field.
func (o *ProfileDistributionConditionGroupType) SetLogicalOperator(v LogicalOperatorType) {
	o.LogicalOperator = &v
}

func (o ProfileDistributionConditionGroupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileDistributionConditionGroupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.ConditionGroup) {
		toSerialize["conditionGroup"] = o.ConditionGroup
	}
	if !IsNil(o.LogicalOperator) {
		toSerialize["logicalOperator"] = o.LogicalOperator
	}
	return toSerialize, nil
}

type NullableProfileDistributionConditionGroupType struct {
	value *ProfileDistributionConditionGroupType
	isSet bool
}

func (v NullableProfileDistributionConditionGroupType) Get() *ProfileDistributionConditionGroupType {
	return v.value
}

func (v *NullableProfileDistributionConditionGroupType) Set(val *ProfileDistributionConditionGroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileDistributionConditionGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileDistributionConditionGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileDistributionConditionGroupType(val *ProfileDistributionConditionGroupType) *NullableProfileDistributionConditionGroupType {
	return &NullableProfileDistributionConditionGroupType{value: val, isSet: true}
}

func (v NullableProfileDistributionConditionGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileDistributionConditionGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


