/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ForgetProfileResultType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForgetProfileResultType{}

// ForgetProfileResultType Results of Anonymization processing/validation.
type ForgetProfileResultType struct {
	// Indicates if the profile is eligible to be anonymized.
	CanBeForgotten *bool `json:"canBeForgotten,omitempty"`
	// Reason describing why the profile is not eligible to be forgotten.
	FailureReasons []ForgetProfileFailureReasonType `json:"failureReasons,omitempty"`
	ProfileId *ProfileId `json:"profileId,omitempty"`
	Status *AnonymizationStatusType `json:"status,omitempty"`
}

// NewForgetProfileResultType instantiates a new ForgetProfileResultType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForgetProfileResultType() *ForgetProfileResultType {
	this := ForgetProfileResultType{}
	return &this
}

// NewForgetProfileResultTypeWithDefaults instantiates a new ForgetProfileResultType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForgetProfileResultTypeWithDefaults() *ForgetProfileResultType {
	this := ForgetProfileResultType{}
	return &this
}

// GetCanBeForgotten returns the CanBeForgotten field value if set, zero value otherwise.
func (o *ForgetProfileResultType) GetCanBeForgotten() bool {
	if o == nil || IsNil(o.CanBeForgotten) {
		var ret bool
		return ret
	}
	return *o.CanBeForgotten
}

// GetCanBeForgottenOk returns a tuple with the CanBeForgotten field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForgetProfileResultType) GetCanBeForgottenOk() (*bool, bool) {
	if o == nil || IsNil(o.CanBeForgotten) {
		return nil, false
	}
	return o.CanBeForgotten, true
}

// HasCanBeForgotten returns a boolean if a field has been set.
func (o *ForgetProfileResultType) HasCanBeForgotten() bool {
	if o != nil && !IsNil(o.CanBeForgotten) {
		return true
	}

	return false
}

// SetCanBeForgotten gets a reference to the given bool and assigns it to the CanBeForgotten field.
func (o *ForgetProfileResultType) SetCanBeForgotten(v bool) {
	o.CanBeForgotten = &v
}

// GetFailureReasons returns the FailureReasons field value if set, zero value otherwise.
func (o *ForgetProfileResultType) GetFailureReasons() []ForgetProfileFailureReasonType {
	if o == nil || IsNil(o.FailureReasons) {
		var ret []ForgetProfileFailureReasonType
		return ret
	}
	return o.FailureReasons
}

// GetFailureReasonsOk returns a tuple with the FailureReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForgetProfileResultType) GetFailureReasonsOk() ([]ForgetProfileFailureReasonType, bool) {
	if o == nil || IsNil(o.FailureReasons) {
		return nil, false
	}
	return o.FailureReasons, true
}

// HasFailureReasons returns a boolean if a field has been set.
func (o *ForgetProfileResultType) HasFailureReasons() bool {
	if o != nil && !IsNil(o.FailureReasons) {
		return true
	}

	return false
}

// SetFailureReasons gets a reference to the given []ForgetProfileFailureReasonType and assigns it to the FailureReasons field.
func (o *ForgetProfileResultType) SetFailureReasons(v []ForgetProfileFailureReasonType) {
	o.FailureReasons = v
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ForgetProfileResultType) GetProfileId() ProfileId {
	if o == nil || IsNil(o.ProfileId) {
		var ret ProfileId
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForgetProfileResultType) GetProfileIdOk() (*ProfileId, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ForgetProfileResultType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given ProfileId and assigns it to the ProfileId field.
func (o *ForgetProfileResultType) SetProfileId(v ProfileId) {
	o.ProfileId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ForgetProfileResultType) GetStatus() AnonymizationStatusType {
	if o == nil || IsNil(o.Status) {
		var ret AnonymizationStatusType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForgetProfileResultType) GetStatusOk() (*AnonymizationStatusType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ForgetProfileResultType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnonymizationStatusType and assigns it to the Status field.
func (o *ForgetProfileResultType) SetStatus(v AnonymizationStatusType) {
	o.Status = &v
}

func (o ForgetProfileResultType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForgetProfileResultType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanBeForgotten) {
		toSerialize["canBeForgotten"] = o.CanBeForgotten
	}
	if !IsNil(o.FailureReasons) {
		toSerialize["failureReasons"] = o.FailureReasons
	}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableForgetProfileResultType struct {
	value *ForgetProfileResultType
	isSet bool
}

func (v NullableForgetProfileResultType) Get() *ForgetProfileResultType {
	return v.value
}

func (v *NullableForgetProfileResultType) Set(val *ForgetProfileResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableForgetProfileResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableForgetProfileResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForgetProfileResultType(val *ForgetProfileResultType) *NullableForgetProfileResultType {
	return &NullableForgetProfileResultType{value: val, isSet: true}
}

func (v NullableForgetProfileResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForgetProfileResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


