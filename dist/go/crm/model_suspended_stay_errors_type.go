/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the SuspendedStayErrorsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuspendedStayErrorsType{}

// SuspendedStayErrorsType Collection of Suspended Stay Error information.
type SuspendedStayErrorsType struct {
	// Suspended Stay Error information.
	SuspendedStays []SuspendedStayErrorType `json:"suspendedStays,omitempty"`
}

// NewSuspendedStayErrorsType instantiates a new SuspendedStayErrorsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuspendedStayErrorsType() *SuspendedStayErrorsType {
	this := SuspendedStayErrorsType{}
	return &this
}

// NewSuspendedStayErrorsTypeWithDefaults instantiates a new SuspendedStayErrorsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuspendedStayErrorsTypeWithDefaults() *SuspendedStayErrorsType {
	this := SuspendedStayErrorsType{}
	return &this
}

// GetSuspendedStays returns the SuspendedStays field value if set, zero value otherwise.
func (o *SuspendedStayErrorsType) GetSuspendedStays() []SuspendedStayErrorType {
	if o == nil || IsNil(o.SuspendedStays) {
		var ret []SuspendedStayErrorType
		return ret
	}
	return o.SuspendedStays
}

// GetSuspendedStaysOk returns a tuple with the SuspendedStays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuspendedStayErrorsType) GetSuspendedStaysOk() ([]SuspendedStayErrorType, bool) {
	if o == nil || IsNil(o.SuspendedStays) {
		return nil, false
	}
	return o.SuspendedStays, true
}

// HasSuspendedStays returns a boolean if a field has been set.
func (o *SuspendedStayErrorsType) HasSuspendedStays() bool {
	if o != nil && !IsNil(o.SuspendedStays) {
		return true
	}

	return false
}

// SetSuspendedStays gets a reference to the given []SuspendedStayErrorType and assigns it to the SuspendedStays field.
func (o *SuspendedStayErrorsType) SetSuspendedStays(v []SuspendedStayErrorType) {
	o.SuspendedStays = v
}

func (o SuspendedStayErrorsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuspendedStayErrorsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SuspendedStays) {
		toSerialize["suspendedStays"] = o.SuspendedStays
	}
	return toSerialize, nil
}

type NullableSuspendedStayErrorsType struct {
	value *SuspendedStayErrorsType
	isSet bool
}

func (v NullableSuspendedStayErrorsType) Get() *SuspendedStayErrorsType {
	return v.value
}

func (v *NullableSuspendedStayErrorsType) Set(val *SuspendedStayErrorsType) {
	v.value = val
	v.isSet = true
}

func (v NullableSuspendedStayErrorsType) IsSet() bool {
	return v.isSet
}

func (v *NullableSuspendedStayErrorsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuspendedStayErrorsType(val *SuspendedStayErrorsType) *NullableSuspendedStayErrorsType {
	return &NullableSuspendedStayErrorsType{value: val, isSet: true}
}

func (v NullableSuspendedStayErrorsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuspendedStayErrorsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


