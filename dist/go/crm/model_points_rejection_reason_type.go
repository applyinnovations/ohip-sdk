/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the PointsRejectionReasonType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PointsRejectionReasonType{}

// PointsRejectionReasonType Information related to a Points Rejection Reason summary.
type PointsRejectionReasonType struct {
	// Indicates rule description for membership rule.
	Rule *string `json:"rule,omitempty"`
	// Indicates rule code for membership rule.
	Code *string `json:"code,omitempty"`
	// Indicates the reason the points were not awarded (e.g. Membership level requirements not met).
	RejectionReason *string `json:"rejectionReason,omitempty"`
}

// NewPointsRejectionReasonType instantiates a new PointsRejectionReasonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointsRejectionReasonType() *PointsRejectionReasonType {
	this := PointsRejectionReasonType{}
	return &this
}

// NewPointsRejectionReasonTypeWithDefaults instantiates a new PointsRejectionReasonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointsRejectionReasonTypeWithDefaults() *PointsRejectionReasonType {
	this := PointsRejectionReasonType{}
	return &this
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *PointsRejectionReasonType) GetRule() string {
	if o == nil || IsNil(o.Rule) {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointsRejectionReasonType) GetRuleOk() (*string, bool) {
	if o == nil || IsNil(o.Rule) {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *PointsRejectionReasonType) HasRule() bool {
	if o != nil && !IsNil(o.Rule) {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *PointsRejectionReasonType) SetRule(v string) {
	o.Rule = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PointsRejectionReasonType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointsRejectionReasonType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PointsRejectionReasonType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PointsRejectionReasonType) SetCode(v string) {
	o.Code = &v
}

// GetRejectionReason returns the RejectionReason field value if set, zero value otherwise.
func (o *PointsRejectionReasonType) GetRejectionReason() string {
	if o == nil || IsNil(o.RejectionReason) {
		var ret string
		return ret
	}
	return *o.RejectionReason
}

// GetRejectionReasonOk returns a tuple with the RejectionReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointsRejectionReasonType) GetRejectionReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RejectionReason) {
		return nil, false
	}
	return o.RejectionReason, true
}

// HasRejectionReason returns a boolean if a field has been set.
func (o *PointsRejectionReasonType) HasRejectionReason() bool {
	if o != nil && !IsNil(o.RejectionReason) {
		return true
	}

	return false
}

// SetRejectionReason gets a reference to the given string and assigns it to the RejectionReason field.
func (o *PointsRejectionReasonType) SetRejectionReason(v string) {
	o.RejectionReason = &v
}

func (o PointsRejectionReasonType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PointsRejectionReasonType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rule) {
		toSerialize["rule"] = o.Rule
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.RejectionReason) {
		toSerialize["rejectionReason"] = o.RejectionReason
	}
	return toSerialize, nil
}

type NullablePointsRejectionReasonType struct {
	value *PointsRejectionReasonType
	isSet bool
}

func (v NullablePointsRejectionReasonType) Get() *PointsRejectionReasonType {
	return v.value
}

func (v *NullablePointsRejectionReasonType) Set(val *PointsRejectionReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullablePointsRejectionReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullablePointsRejectionReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointsRejectionReasonType(val *PointsRejectionReasonType) *NullablePointsRejectionReasonType {
	return &NullablePointsRejectionReasonType{value: val, isSet: true}
}

func (v NullablePointsRejectionReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointsRejectionReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


