/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the HotelStayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelStayType{}

// HotelStayType Type provides the hotel stay information.
type HotelStayType struct {
	// Hotel Name.
	HotelName *string `json:"hotelName,omitempty"`
	// Points or Miles.
	PointsMiles *string `json:"pointsMiles,omitempty"`
	// Guest stay points or miles earned
	PointsMilesEarned *string `json:"pointsMilesEarned,omitempty"`
	// Guest arrival date.
	ArrivalDate *string `json:"arrivalDate,omitempty"`
}

// NewHotelStayType instantiates a new HotelStayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelStayType() *HotelStayType {
	this := HotelStayType{}
	return &this
}

// NewHotelStayTypeWithDefaults instantiates a new HotelStayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelStayTypeWithDefaults() *HotelStayType {
	this := HotelStayType{}
	return &this
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *HotelStayType) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelStayType) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *HotelStayType) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *HotelStayType) SetHotelName(v string) {
	o.HotelName = &v
}

// GetPointsMiles returns the PointsMiles field value if set, zero value otherwise.
func (o *HotelStayType) GetPointsMiles() string {
	if o == nil || IsNil(o.PointsMiles) {
		var ret string
		return ret
	}
	return *o.PointsMiles
}

// GetPointsMilesOk returns a tuple with the PointsMiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelStayType) GetPointsMilesOk() (*string, bool) {
	if o == nil || IsNil(o.PointsMiles) {
		return nil, false
	}
	return o.PointsMiles, true
}

// HasPointsMiles returns a boolean if a field has been set.
func (o *HotelStayType) HasPointsMiles() bool {
	if o != nil && !IsNil(o.PointsMiles) {
		return true
	}

	return false
}

// SetPointsMiles gets a reference to the given string and assigns it to the PointsMiles field.
func (o *HotelStayType) SetPointsMiles(v string) {
	o.PointsMiles = &v
}

// GetPointsMilesEarned returns the PointsMilesEarned field value if set, zero value otherwise.
func (o *HotelStayType) GetPointsMilesEarned() string {
	if o == nil || IsNil(o.PointsMilesEarned) {
		var ret string
		return ret
	}
	return *o.PointsMilesEarned
}

// GetPointsMilesEarnedOk returns a tuple with the PointsMilesEarned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelStayType) GetPointsMilesEarnedOk() (*string, bool) {
	if o == nil || IsNil(o.PointsMilesEarned) {
		return nil, false
	}
	return o.PointsMilesEarned, true
}

// HasPointsMilesEarned returns a boolean if a field has been set.
func (o *HotelStayType) HasPointsMilesEarned() bool {
	if o != nil && !IsNil(o.PointsMilesEarned) {
		return true
	}

	return false
}

// SetPointsMilesEarned gets a reference to the given string and assigns it to the PointsMilesEarned field.
func (o *HotelStayType) SetPointsMilesEarned(v string) {
	o.PointsMilesEarned = &v
}

// GetArrivalDate returns the ArrivalDate field value if set, zero value otherwise.
func (o *HotelStayType) GetArrivalDate() string {
	if o == nil || IsNil(o.ArrivalDate) {
		var ret string
		return ret
	}
	return *o.ArrivalDate
}

// GetArrivalDateOk returns a tuple with the ArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelStayType) GetArrivalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalDate) {
		return nil, false
	}
	return o.ArrivalDate, true
}

// HasArrivalDate returns a boolean if a field has been set.
func (o *HotelStayType) HasArrivalDate() bool {
	if o != nil && !IsNil(o.ArrivalDate) {
		return true
	}

	return false
}

// SetArrivalDate gets a reference to the given string and assigns it to the ArrivalDate field.
func (o *HotelStayType) SetArrivalDate(v string) {
	o.ArrivalDate = &v
}

func (o HotelStayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelStayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.PointsMiles) {
		toSerialize["pointsMiles"] = o.PointsMiles
	}
	if !IsNil(o.PointsMilesEarned) {
		toSerialize["pointsMilesEarned"] = o.PointsMilesEarned
	}
	if !IsNil(o.ArrivalDate) {
		toSerialize["arrivalDate"] = o.ArrivalDate
	}
	return toSerialize, nil
}

type NullableHotelStayType struct {
	value *HotelStayType
	isSet bool
}

func (v NullableHotelStayType) Get() *HotelStayType {
	return v.value
}

func (v *NullableHotelStayType) Set(val *HotelStayType) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelStayType) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelStayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelStayType(val *HotelStayType) *NullableHotelStayType {
	return &NullableHotelStayType{value: val, isSet: true}
}

func (v NullableHotelStayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelStayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


