/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the MailingActionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MailingActionsType{}

// MailingActionsType Defines mailing action list for the profile.
type MailingActionsType struct {
	// Defines mailing action code and description.
	MailingAction []CodeDescriptionType `json:"mailingAction,omitempty"`
	// When true indicates that profile has subscribed to the mailing list.
	Active *bool `json:"active,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
}

// NewMailingActionsType instantiates a new MailingActionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMailingActionsType() *MailingActionsType {
	this := MailingActionsType{}
	return &this
}

// NewMailingActionsTypeWithDefaults instantiates a new MailingActionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMailingActionsTypeWithDefaults() *MailingActionsType {
	this := MailingActionsType{}
	return &this
}

// GetMailingAction returns the MailingAction field value if set, zero value otherwise.
func (o *MailingActionsType) GetMailingAction() []CodeDescriptionType {
	if o == nil || IsNil(o.MailingAction) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.MailingAction
}

// GetMailingActionOk returns a tuple with the MailingAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailingActionsType) GetMailingActionOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.MailingAction) {
		return nil, false
	}
	return o.MailingAction, true
}

// HasMailingAction returns a boolean if a field has been set.
func (o *MailingActionsType) HasMailingAction() bool {
	if o != nil && !IsNil(o.MailingAction) {
		return true
	}

	return false
}

// SetMailingAction gets a reference to the given []CodeDescriptionType and assigns it to the MailingAction field.
func (o *MailingActionsType) SetMailingAction(v []CodeDescriptionType) {
	o.MailingAction = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *MailingActionsType) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailingActionsType) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *MailingActionsType) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *MailingActionsType) SetActive(v bool) {
	o.Active = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *MailingActionsType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailingActionsType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *MailingActionsType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *MailingActionsType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *MailingActionsType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MailingActionsType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *MailingActionsType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *MailingActionsType) SetCount(v int32) {
	o.Count = &v
}

func (o MailingActionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MailingActionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MailingAction) {
		toSerialize["mailingAction"] = o.MailingAction
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

type NullableMailingActionsType struct {
	value *MailingActionsType
	isSet bool
}

func (v NullableMailingActionsType) Get() *MailingActionsType {
	return v.value
}

func (v *NullableMailingActionsType) Set(val *MailingActionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableMailingActionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableMailingActionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMailingActionsType(val *MailingActionsType) *NullableMailingActionsType {
	return &NullableMailingActionsType{value: val, isSet: true}
}

func (v NullableMailingActionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMailingActionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


