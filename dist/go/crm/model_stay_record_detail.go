/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the StayRecordDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StayRecordDetail{}

// StayRecordDetail Stay Record details for a single stay record including Revenues, Daily Rates and UDFs.
type StayRecordDetail struct {
	StayDetail *StayDetailType `json:"stayDetail,omitempty"`
	// Revenue Details for the stay record.
	Revenue []MembershipTransactionRevenueType `json:"revenue,omitempty"`
	// Rate Details for the stay record.
	Rate []MembershipTransactionRateType `json:"rate,omitempty"`
	UserDefinedFields *UserDefinedFieldsType `json:"userDefinedFields,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewStayRecordDetail instantiates a new StayRecordDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStayRecordDetail() *StayRecordDetail {
	this := StayRecordDetail{}
	return &this
}

// NewStayRecordDetailWithDefaults instantiates a new StayRecordDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStayRecordDetailWithDefaults() *StayRecordDetail {
	this := StayRecordDetail{}
	return &this
}

// GetStayDetail returns the StayDetail field value if set, zero value otherwise.
func (o *StayRecordDetail) GetStayDetail() StayDetailType {
	if o == nil || IsNil(o.StayDetail) {
		var ret StayDetailType
		return ret
	}
	return *o.StayDetail
}

// GetStayDetailOk returns a tuple with the StayDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayRecordDetail) GetStayDetailOk() (*StayDetailType, bool) {
	if o == nil || IsNil(o.StayDetail) {
		return nil, false
	}
	return o.StayDetail, true
}

// HasStayDetail returns a boolean if a field has been set.
func (o *StayRecordDetail) HasStayDetail() bool {
	if o != nil && !IsNil(o.StayDetail) {
		return true
	}

	return false
}

// SetStayDetail gets a reference to the given StayDetailType and assigns it to the StayDetail field.
func (o *StayRecordDetail) SetStayDetail(v StayDetailType) {
	o.StayDetail = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *StayRecordDetail) GetRevenue() []MembershipTransactionRevenueType {
	if o == nil || IsNil(o.Revenue) {
		var ret []MembershipTransactionRevenueType
		return ret
	}
	return o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayRecordDetail) GetRevenueOk() ([]MembershipTransactionRevenueType, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *StayRecordDetail) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given []MembershipTransactionRevenueType and assigns it to the Revenue field.
func (o *StayRecordDetail) SetRevenue(v []MembershipTransactionRevenueType) {
	o.Revenue = v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *StayRecordDetail) GetRate() []MembershipTransactionRateType {
	if o == nil || IsNil(o.Rate) {
		var ret []MembershipTransactionRateType
		return ret
	}
	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayRecordDetail) GetRateOk() ([]MembershipTransactionRateType, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *StayRecordDetail) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given []MembershipTransactionRateType and assigns it to the Rate field.
func (o *StayRecordDetail) SetRate(v []MembershipTransactionRateType) {
	o.Rate = v
}

// GetUserDefinedFields returns the UserDefinedFields field value if set, zero value otherwise.
func (o *StayRecordDetail) GetUserDefinedFields() UserDefinedFieldsType {
	if o == nil || IsNil(o.UserDefinedFields) {
		var ret UserDefinedFieldsType
		return ret
	}
	return *o.UserDefinedFields
}

// GetUserDefinedFieldsOk returns a tuple with the UserDefinedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayRecordDetail) GetUserDefinedFieldsOk() (*UserDefinedFieldsType, bool) {
	if o == nil || IsNil(o.UserDefinedFields) {
		return nil, false
	}
	return o.UserDefinedFields, true
}

// HasUserDefinedFields returns a boolean if a field has been set.
func (o *StayRecordDetail) HasUserDefinedFields() bool {
	if o != nil && !IsNil(o.UserDefinedFields) {
		return true
	}

	return false
}

// SetUserDefinedFields gets a reference to the given UserDefinedFieldsType and assigns it to the UserDefinedFields field.
func (o *StayRecordDetail) SetUserDefinedFields(v UserDefinedFieldsType) {
	o.UserDefinedFields = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *StayRecordDetail) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StayRecordDetail) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *StayRecordDetail) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *StayRecordDetail) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o StayRecordDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StayRecordDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StayDetail) {
		toSerialize["stayDetail"] = o.StayDetail
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.UserDefinedFields) {
		toSerialize["userDefinedFields"] = o.UserDefinedFields
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableStayRecordDetail struct {
	value *StayRecordDetail
	isSet bool
}

func (v NullableStayRecordDetail) Get() *StayRecordDetail {
	return v.value
}

func (v *NullableStayRecordDetail) Set(val *StayRecordDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableStayRecordDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableStayRecordDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStayRecordDetail(val *StayRecordDetail) *NullableStayRecordDetail {
	return &NullableStayRecordDetail{value: val, isSet: true}
}

func (v NullableStayRecordDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStayRecordDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


