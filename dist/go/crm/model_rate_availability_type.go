/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the RateAvailabilityType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RateAvailabilityType{}

// RateAvailabilityType Member Award availability details based on chosen award types as Product,Rate,Upgrade,FT Payment and Other.
type RateAvailabilityType struct {
	// An identifying number of the award, assigned by the system when the award was issued.
	AwardNumber *float32 `json:"awardNumber,omitempty"`
	// Unique code that identifies this award.
	AwardType *string `json:"awardType,omitempty"`
	// The cancel penalty charge.
	CancelPenaltyCharge *float32 `json:"cancelPenaltyCharge,omitempty"`
	// Number of days before arrival when a reservation may be cancelled without an award points penalty.
	CancelPenaltyDays *float32 `json:"cancelPenaltyDays,omitempty"`
	// The award points that will be forfeited if the cancel penalty charge is applied.
	CancelPenaltyPoints *float32 `json:"cancelPenaltyPoints,omitempty"`
	// The penalty charge is either a percentage or a flat number of points.
	CancelPenaltyType *string `json:"cancelPenaltyType,omitempty"`
	// HotelCode where the award will be consumed.
	HotelId *string `json:"hotelId,omitempty"`
	// The number of points that must be redeemed for this award.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// Rate code associated with the award.
	RateCode *string `json:"rateCode,omitempty"`
	// Rate code description associated with the award.
	RateDescription *string `json:"rateDescription,omitempty"`
	// Issue key in format of Raw data.
	RawIssueKey *string `json:"rawIssueKey,omitempty"`
	// Indicates which room category it belongs.
	RoomCategory *string `json:"roomCategory,omitempty"`
	// Description of the Room.
	RoomDescription *string `json:"roomDescription,omitempty"`
	// Code for the room type in which the award was issued.
	RoomLabel *string `json:"roomLabel,omitempty"`
	// The date of the reservation associated with the award. There may be more than one date (multiple nights) associated with award.
	StayDate *string `json:"stayDate,omitempty"`
	// Total award points available for redemption.
	TotalAvailablePoints *float32 `json:"totalAvailablePoints,omitempty"`
}

// NewRateAvailabilityType instantiates a new RateAvailabilityType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRateAvailabilityType() *RateAvailabilityType {
	this := RateAvailabilityType{}
	return &this
}

// NewRateAvailabilityTypeWithDefaults instantiates a new RateAvailabilityType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRateAvailabilityTypeWithDefaults() *RateAvailabilityType {
	this := RateAvailabilityType{}
	return &this
}

// GetAwardNumber returns the AwardNumber field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetAwardNumber() float32 {
	if o == nil || IsNil(o.AwardNumber) {
		var ret float32
		return ret
	}
	return *o.AwardNumber
}

// GetAwardNumberOk returns a tuple with the AwardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetAwardNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardNumber) {
		return nil, false
	}
	return o.AwardNumber, true
}

// HasAwardNumber returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasAwardNumber() bool {
	if o != nil && !IsNil(o.AwardNumber) {
		return true
	}

	return false
}

// SetAwardNumber gets a reference to the given float32 and assigns it to the AwardNumber field.
func (o *RateAvailabilityType) SetAwardNumber(v float32) {
	o.AwardNumber = &v
}

// GetAwardType returns the AwardType field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetAwardType() string {
	if o == nil || IsNil(o.AwardType) {
		var ret string
		return ret
	}
	return *o.AwardType
}

// GetAwardTypeOk returns a tuple with the AwardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetAwardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardType) {
		return nil, false
	}
	return o.AwardType, true
}

// HasAwardType returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasAwardType() bool {
	if o != nil && !IsNil(o.AwardType) {
		return true
	}

	return false
}

// SetAwardType gets a reference to the given string and assigns it to the AwardType field.
func (o *RateAvailabilityType) SetAwardType(v string) {
	o.AwardType = &v
}

// GetCancelPenaltyCharge returns the CancelPenaltyCharge field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetCancelPenaltyCharge() float32 {
	if o == nil || IsNil(o.CancelPenaltyCharge) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyCharge
}

// GetCancelPenaltyChargeOk returns a tuple with the CancelPenaltyCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetCancelPenaltyChargeOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyCharge) {
		return nil, false
	}
	return o.CancelPenaltyCharge, true
}

// HasCancelPenaltyCharge returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasCancelPenaltyCharge() bool {
	if o != nil && !IsNil(o.CancelPenaltyCharge) {
		return true
	}

	return false
}

// SetCancelPenaltyCharge gets a reference to the given float32 and assigns it to the CancelPenaltyCharge field.
func (o *RateAvailabilityType) SetCancelPenaltyCharge(v float32) {
	o.CancelPenaltyCharge = &v
}

// GetCancelPenaltyDays returns the CancelPenaltyDays field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetCancelPenaltyDays() float32 {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyDays
}

// GetCancelPenaltyDaysOk returns a tuple with the CancelPenaltyDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetCancelPenaltyDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		return nil, false
	}
	return o.CancelPenaltyDays, true
}

// HasCancelPenaltyDays returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasCancelPenaltyDays() bool {
	if o != nil && !IsNil(o.CancelPenaltyDays) {
		return true
	}

	return false
}

// SetCancelPenaltyDays gets a reference to the given float32 and assigns it to the CancelPenaltyDays field.
func (o *RateAvailabilityType) SetCancelPenaltyDays(v float32) {
	o.CancelPenaltyDays = &v
}

// GetCancelPenaltyPoints returns the CancelPenaltyPoints field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetCancelPenaltyPoints() float32 {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyPoints
}

// GetCancelPenaltyPointsOk returns a tuple with the CancelPenaltyPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetCancelPenaltyPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		return nil, false
	}
	return o.CancelPenaltyPoints, true
}

// HasCancelPenaltyPoints returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasCancelPenaltyPoints() bool {
	if o != nil && !IsNil(o.CancelPenaltyPoints) {
		return true
	}

	return false
}

// SetCancelPenaltyPoints gets a reference to the given float32 and assigns it to the CancelPenaltyPoints field.
func (o *RateAvailabilityType) SetCancelPenaltyPoints(v float32) {
	o.CancelPenaltyPoints = &v
}

// GetCancelPenaltyType returns the CancelPenaltyType field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetCancelPenaltyType() string {
	if o == nil || IsNil(o.CancelPenaltyType) {
		var ret string
		return ret
	}
	return *o.CancelPenaltyType
}

// GetCancelPenaltyTypeOk returns a tuple with the CancelPenaltyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetCancelPenaltyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CancelPenaltyType) {
		return nil, false
	}
	return o.CancelPenaltyType, true
}

// HasCancelPenaltyType returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasCancelPenaltyType() bool {
	if o != nil && !IsNil(o.CancelPenaltyType) {
		return true
	}

	return false
}

// SetCancelPenaltyType gets a reference to the given string and assigns it to the CancelPenaltyType field.
func (o *RateAvailabilityType) SetCancelPenaltyType(v string) {
	o.CancelPenaltyType = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RateAvailabilityType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *RateAvailabilityType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetRateCode returns the RateCode field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetRateCode() string {
	if o == nil || IsNil(o.RateCode) {
		var ret string
		return ret
	}
	return *o.RateCode
}

// GetRateCodeOk returns a tuple with the RateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetRateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RateCode) {
		return nil, false
	}
	return o.RateCode, true
}

// HasRateCode returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasRateCode() bool {
	if o != nil && !IsNil(o.RateCode) {
		return true
	}

	return false
}

// SetRateCode gets a reference to the given string and assigns it to the RateCode field.
func (o *RateAvailabilityType) SetRateCode(v string) {
	o.RateCode = &v
}

// GetRateDescription returns the RateDescription field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetRateDescription() string {
	if o == nil || IsNil(o.RateDescription) {
		var ret string
		return ret
	}
	return *o.RateDescription
}

// GetRateDescriptionOk returns a tuple with the RateDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetRateDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RateDescription) {
		return nil, false
	}
	return o.RateDescription, true
}

// HasRateDescription returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasRateDescription() bool {
	if o != nil && !IsNil(o.RateDescription) {
		return true
	}

	return false
}

// SetRateDescription gets a reference to the given string and assigns it to the RateDescription field.
func (o *RateAvailabilityType) SetRateDescription(v string) {
	o.RateDescription = &v
}

// GetRawIssueKey returns the RawIssueKey field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetRawIssueKey() string {
	if o == nil || IsNil(o.RawIssueKey) {
		var ret string
		return ret
	}
	return *o.RawIssueKey
}

// GetRawIssueKeyOk returns a tuple with the RawIssueKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetRawIssueKeyOk() (*string, bool) {
	if o == nil || IsNil(o.RawIssueKey) {
		return nil, false
	}
	return o.RawIssueKey, true
}

// HasRawIssueKey returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasRawIssueKey() bool {
	if o != nil && !IsNil(o.RawIssueKey) {
		return true
	}

	return false
}

// SetRawIssueKey gets a reference to the given string and assigns it to the RawIssueKey field.
func (o *RateAvailabilityType) SetRawIssueKey(v string) {
	o.RawIssueKey = &v
}

// GetRoomCategory returns the RoomCategory field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetRoomCategory() string {
	if o == nil || IsNil(o.RoomCategory) {
		var ret string
		return ret
	}
	return *o.RoomCategory
}

// GetRoomCategoryOk returns a tuple with the RoomCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetRoomCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.RoomCategory) {
		return nil, false
	}
	return o.RoomCategory, true
}

// HasRoomCategory returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasRoomCategory() bool {
	if o != nil && !IsNil(o.RoomCategory) {
		return true
	}

	return false
}

// SetRoomCategory gets a reference to the given string and assigns it to the RoomCategory field.
func (o *RateAvailabilityType) SetRoomCategory(v string) {
	o.RoomCategory = &v
}

// GetRoomDescription returns the RoomDescription field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetRoomDescription() string {
	if o == nil || IsNil(o.RoomDescription) {
		var ret string
		return ret
	}
	return *o.RoomDescription
}

// GetRoomDescriptionOk returns a tuple with the RoomDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetRoomDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RoomDescription) {
		return nil, false
	}
	return o.RoomDescription, true
}

// HasRoomDescription returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasRoomDescription() bool {
	if o != nil && !IsNil(o.RoomDescription) {
		return true
	}

	return false
}

// SetRoomDescription gets a reference to the given string and assigns it to the RoomDescription field.
func (o *RateAvailabilityType) SetRoomDescription(v string) {
	o.RoomDescription = &v
}

// GetRoomLabel returns the RoomLabel field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetRoomLabel() string {
	if o == nil || IsNil(o.RoomLabel) {
		var ret string
		return ret
	}
	return *o.RoomLabel
}

// GetRoomLabelOk returns a tuple with the RoomLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetRoomLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RoomLabel) {
		return nil, false
	}
	return o.RoomLabel, true
}

// HasRoomLabel returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasRoomLabel() bool {
	if o != nil && !IsNil(o.RoomLabel) {
		return true
	}

	return false
}

// SetRoomLabel gets a reference to the given string and assigns it to the RoomLabel field.
func (o *RateAvailabilityType) SetRoomLabel(v string) {
	o.RoomLabel = &v
}

// GetStayDate returns the StayDate field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetStayDate() string {
	if o == nil || IsNil(o.StayDate) {
		var ret string
		return ret
	}
	return *o.StayDate
}

// GetStayDateOk returns a tuple with the StayDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetStayDateOk() (*string, bool) {
	if o == nil || IsNil(o.StayDate) {
		return nil, false
	}
	return o.StayDate, true
}

// HasStayDate returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasStayDate() bool {
	if o != nil && !IsNil(o.StayDate) {
		return true
	}

	return false
}

// SetStayDate gets a reference to the given string and assigns it to the StayDate field.
func (o *RateAvailabilityType) SetStayDate(v string) {
	o.StayDate = &v
}

// GetTotalAvailablePoints returns the TotalAvailablePoints field value if set, zero value otherwise.
func (o *RateAvailabilityType) GetTotalAvailablePoints() float32 {
	if o == nil || IsNil(o.TotalAvailablePoints) {
		var ret float32
		return ret
	}
	return *o.TotalAvailablePoints
}

// GetTotalAvailablePointsOk returns a tuple with the TotalAvailablePoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RateAvailabilityType) GetTotalAvailablePointsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalAvailablePoints) {
		return nil, false
	}
	return o.TotalAvailablePoints, true
}

// HasTotalAvailablePoints returns a boolean if a field has been set.
func (o *RateAvailabilityType) HasTotalAvailablePoints() bool {
	if o != nil && !IsNil(o.TotalAvailablePoints) {
		return true
	}

	return false
}

// SetTotalAvailablePoints gets a reference to the given float32 and assigns it to the TotalAvailablePoints field.
func (o *RateAvailabilityType) SetTotalAvailablePoints(v float32) {
	o.TotalAvailablePoints = &v
}

func (o RateAvailabilityType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RateAvailabilityType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwardNumber) {
		toSerialize["awardNumber"] = o.AwardNumber
	}
	if !IsNil(o.AwardType) {
		toSerialize["awardType"] = o.AwardType
	}
	if !IsNil(o.CancelPenaltyCharge) {
		toSerialize["cancelPenaltyCharge"] = o.CancelPenaltyCharge
	}
	if !IsNil(o.CancelPenaltyDays) {
		toSerialize["cancelPenaltyDays"] = o.CancelPenaltyDays
	}
	if !IsNil(o.CancelPenaltyPoints) {
		toSerialize["cancelPenaltyPoints"] = o.CancelPenaltyPoints
	}
	if !IsNil(o.CancelPenaltyType) {
		toSerialize["cancelPenaltyType"] = o.CancelPenaltyType
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.RateCode) {
		toSerialize["rateCode"] = o.RateCode
	}
	if !IsNil(o.RateDescription) {
		toSerialize["rateDescription"] = o.RateDescription
	}
	if !IsNil(o.RawIssueKey) {
		toSerialize["rawIssueKey"] = o.RawIssueKey
	}
	if !IsNil(o.RoomCategory) {
		toSerialize["roomCategory"] = o.RoomCategory
	}
	if !IsNil(o.RoomDescription) {
		toSerialize["roomDescription"] = o.RoomDescription
	}
	if !IsNil(o.RoomLabel) {
		toSerialize["roomLabel"] = o.RoomLabel
	}
	if !IsNil(o.StayDate) {
		toSerialize["stayDate"] = o.StayDate
	}
	if !IsNil(o.TotalAvailablePoints) {
		toSerialize["totalAvailablePoints"] = o.TotalAvailablePoints
	}
	return toSerialize, nil
}

type NullableRateAvailabilityType struct {
	value *RateAvailabilityType
	isSet bool
}

func (v NullableRateAvailabilityType) Get() *RateAvailabilityType {
	return v.value
}

func (v *NullableRateAvailabilityType) Set(val *RateAvailabilityType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateAvailabilityType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateAvailabilityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateAvailabilityType(val *RateAvailabilityType) *NullableRateAvailabilityType {
	return &NullableRateAvailabilityType{value: val, isSet: true}
}

func (v NullableRateAvailabilityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateAvailabilityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


