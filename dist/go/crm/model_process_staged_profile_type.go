/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the ProcessStagedProfileType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessStagedProfileType{}

// ProcessStagedProfileType Information required to process a atged profile.
type ProcessStagedProfileType struct {
	StagedProfileId *StagedProfileId `json:"stagedProfileId,omitempty"`
	ProcessType *StagedProfileProcessType `json:"processType,omitempty"`
	SourceType *StagedProfileSourceType `json:"sourceType,omitempty"`
}

// NewProcessStagedProfileType instantiates a new ProcessStagedProfileType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessStagedProfileType() *ProcessStagedProfileType {
	this := ProcessStagedProfileType{}
	return &this
}

// NewProcessStagedProfileTypeWithDefaults instantiates a new ProcessStagedProfileType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessStagedProfileTypeWithDefaults() *ProcessStagedProfileType {
	this := ProcessStagedProfileType{}
	return &this
}

// GetStagedProfileId returns the StagedProfileId field value if set, zero value otherwise.
func (o *ProcessStagedProfileType) GetStagedProfileId() StagedProfileId {
	if o == nil || IsNil(o.StagedProfileId) {
		var ret StagedProfileId
		return ret
	}
	return *o.StagedProfileId
}

// GetStagedProfileIdOk returns a tuple with the StagedProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStagedProfileType) GetStagedProfileIdOk() (*StagedProfileId, bool) {
	if o == nil || IsNil(o.StagedProfileId) {
		return nil, false
	}
	return o.StagedProfileId, true
}

// HasStagedProfileId returns a boolean if a field has been set.
func (o *ProcessStagedProfileType) HasStagedProfileId() bool {
	if o != nil && !IsNil(o.StagedProfileId) {
		return true
	}

	return false
}

// SetStagedProfileId gets a reference to the given StagedProfileId and assigns it to the StagedProfileId field.
func (o *ProcessStagedProfileType) SetStagedProfileId(v StagedProfileId) {
	o.StagedProfileId = &v
}

// GetProcessType returns the ProcessType field value if set, zero value otherwise.
func (o *ProcessStagedProfileType) GetProcessType() StagedProfileProcessType {
	if o == nil || IsNil(o.ProcessType) {
		var ret StagedProfileProcessType
		return ret
	}
	return *o.ProcessType
}

// GetProcessTypeOk returns a tuple with the ProcessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStagedProfileType) GetProcessTypeOk() (*StagedProfileProcessType, bool) {
	if o == nil || IsNil(o.ProcessType) {
		return nil, false
	}
	return o.ProcessType, true
}

// HasProcessType returns a boolean if a field has been set.
func (o *ProcessStagedProfileType) HasProcessType() bool {
	if o != nil && !IsNil(o.ProcessType) {
		return true
	}

	return false
}

// SetProcessType gets a reference to the given StagedProfileProcessType and assigns it to the ProcessType field.
func (o *ProcessStagedProfileType) SetProcessType(v StagedProfileProcessType) {
	o.ProcessType = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *ProcessStagedProfileType) GetSourceType() StagedProfileSourceType {
	if o == nil || IsNil(o.SourceType) {
		var ret StagedProfileSourceType
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStagedProfileType) GetSourceTypeOk() (*StagedProfileSourceType, bool) {
	if o == nil || IsNil(o.SourceType) {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *ProcessStagedProfileType) HasSourceType() bool {
	if o != nil && !IsNil(o.SourceType) {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given StagedProfileSourceType and assigns it to the SourceType field.
func (o *ProcessStagedProfileType) SetSourceType(v StagedProfileSourceType) {
	o.SourceType = &v
}

func (o ProcessStagedProfileType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessStagedProfileType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StagedProfileId) {
		toSerialize["stagedProfileId"] = o.StagedProfileId
	}
	if !IsNil(o.ProcessType) {
		toSerialize["processType"] = o.ProcessType
	}
	if !IsNil(o.SourceType) {
		toSerialize["sourceType"] = o.SourceType
	}
	return toSerialize, nil
}

type NullableProcessStagedProfileType struct {
	value *ProcessStagedProfileType
	isSet bool
}

func (v NullableProcessStagedProfileType) Get() *ProcessStagedProfileType {
	return v.value
}

func (v *NullableProcessStagedProfileType) Set(val *ProcessStagedProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessStagedProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessStagedProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessStagedProfileType(val *ProcessStagedProfileType) *NullableProcessStagedProfileType {
	return &NullableProcessStagedProfileType{value: val, isSet: true}
}

func (v NullableProcessStagedProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessStagedProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


