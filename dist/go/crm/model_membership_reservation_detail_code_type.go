/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
	"fmt"
)

// MembershipReservationDetailCodeType Supported memebership reservation detail code type.
type MembershipReservationDetailCodeType string

// List of membershipReservationDetailCodeType
const (
	MEMBERSHIPRESERVATIONDETAILCODETYPE_ARRIVALS_TOTAL MembershipReservationDetailCodeType = "ArrivalsTotal"
	MEMBERSHIPRESERVATIONDETAILCODETYPE_DEPARTURES_TOTAL MembershipReservationDetailCodeType = "DeparturesTotal"
	MEMBERSHIPRESERVATIONDETAILCODETYPE_IN_HOUSE_TOTAL MembershipReservationDetailCodeType = "InHouseTotal"
	MEMBERSHIPRESERVATIONDETAILCODETYPE_ROOM_REVENUE MembershipReservationDetailCodeType = "RoomRevenue"
)

// All allowed values of MembershipReservationDetailCodeType enum
var AllowedMembershipReservationDetailCodeTypeEnumValues = []MembershipReservationDetailCodeType{
	"ArrivalsTotal",
	"DeparturesTotal",
	"InHouseTotal",
	"RoomRevenue",
}

func (v *MembershipReservationDetailCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MembershipReservationDetailCodeType(value)
	for _, existing := range AllowedMembershipReservationDetailCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MembershipReservationDetailCodeType", value)
}

// NewMembershipReservationDetailCodeTypeFromValue returns a pointer to a valid MembershipReservationDetailCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMembershipReservationDetailCodeTypeFromValue(v string) (*MembershipReservationDetailCodeType, error) {
	ev := MembershipReservationDetailCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MembershipReservationDetailCodeType: valid values are %v", v, AllowedMembershipReservationDetailCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MembershipReservationDetailCodeType) IsValid() bool {
	for _, existing := range AllowedMembershipReservationDetailCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to membershipReservationDetailCodeType value
func (v MembershipReservationDetailCodeType) Ptr() *MembershipReservationDetailCodeType {
	return &v
}

type NullableMembershipReservationDetailCodeType struct {
	value *MembershipReservationDetailCodeType
	isSet bool
}

func (v NullableMembershipReservationDetailCodeType) Get() *MembershipReservationDetailCodeType {
	return v.value
}

func (v *NullableMembershipReservationDetailCodeType) Set(val *MembershipReservationDetailCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableMembershipReservationDetailCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableMembershipReservationDetailCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMembershipReservationDetailCodeType(val *MembershipReservationDetailCodeType) *NullableMembershipReservationDetailCodeType {
	return &NullableMembershipReservationDetailCodeType{value: val, isSet: true}
}

func (v NullableMembershipReservationDetailCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMembershipReservationDetailCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

