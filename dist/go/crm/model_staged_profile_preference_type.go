/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the StagedProfilePreferenceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StagedProfilePreferenceType{}

// StagedProfilePreferenceType Guest Preference details for the profile.
type StagedProfilePreferenceType struct {
	// Specifies whether to copy the reservation preference to the profile or not.
	CopyToProfile *bool `json:"copyToProfile,omitempty"`
	// Preference Description for display purposes.
	Description *string `json:"description,omitempty"`
	// The error in Preference information in a staged profile with an invalid status
	ErrorDescription *string `json:"errorDescription,omitempty"`
	// Specifies the count of preferences excluded for the attached reservation preference.
	ExcludedPreferencesCount *int32 `json:"excludedPreferencesCount,omitempty"`
	// Whether this preference is property specific or not.
	Global *bool `json:"global,omitempty"`
	// If specified preference belongs to the Hotels listed, otherwise it is a global preference.
	Hotels []string `json:"hotels,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Inactivation date of the record.
	InactiveDate *string `json:"inactiveDate,omitempty"`
	PreferenceCode *string `json:"preferenceCode,omitempty"`
	// Preference value for display purposes.
	PreferenceValue *string `json:"preferenceValue,omitempty"`
	// Prefernce resort.
	ResortPrefernce *string `json:"resortPrefernce,omitempty"`
	// Source of the preference.
	Source *string `json:"source,omitempty"`
	// A reference to the type of object defined by the UniqueID element.
	Type *string `json:"type,omitempty"`
	// Indicated whether the preference information is valid.
	Valid *bool `json:"valid,omitempty"`
}

// NewStagedProfilePreferenceType instantiates a new StagedProfilePreferenceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStagedProfilePreferenceType() *StagedProfilePreferenceType {
	this := StagedProfilePreferenceType{}
	return &this
}

// NewStagedProfilePreferenceTypeWithDefaults instantiates a new StagedProfilePreferenceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStagedProfilePreferenceTypeWithDefaults() *StagedProfilePreferenceType {
	this := StagedProfilePreferenceType{}
	return &this
}

// GetCopyToProfile returns the CopyToProfile field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetCopyToProfile() bool {
	if o == nil || IsNil(o.CopyToProfile) {
		var ret bool
		return ret
	}
	return *o.CopyToProfile
}

// GetCopyToProfileOk returns a tuple with the CopyToProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetCopyToProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyToProfile) {
		return nil, false
	}
	return o.CopyToProfile, true
}

// HasCopyToProfile returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasCopyToProfile() bool {
	if o != nil && !IsNil(o.CopyToProfile) {
		return true
	}

	return false
}

// SetCopyToProfile gets a reference to the given bool and assigns it to the CopyToProfile field.
func (o *StagedProfilePreferenceType) SetCopyToProfile(v bool) {
	o.CopyToProfile = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StagedProfilePreferenceType) SetDescription(v string) {
	o.Description = &v
}

// GetErrorDescription returns the ErrorDescription field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetErrorDescription() string {
	if o == nil || IsNil(o.ErrorDescription) {
		var ret string
		return ret
	}
	return *o.ErrorDescription
}

// GetErrorDescriptionOk returns a tuple with the ErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetErrorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorDescription) {
		return nil, false
	}
	return o.ErrorDescription, true
}

// HasErrorDescription returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasErrorDescription() bool {
	if o != nil && !IsNil(o.ErrorDescription) {
		return true
	}

	return false
}

// SetErrorDescription gets a reference to the given string and assigns it to the ErrorDescription field.
func (o *StagedProfilePreferenceType) SetErrorDescription(v string) {
	o.ErrorDescription = &v
}

// GetExcludedPreferencesCount returns the ExcludedPreferencesCount field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetExcludedPreferencesCount() int32 {
	if o == nil || IsNil(o.ExcludedPreferencesCount) {
		var ret int32
		return ret
	}
	return *o.ExcludedPreferencesCount
}

// GetExcludedPreferencesCountOk returns a tuple with the ExcludedPreferencesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetExcludedPreferencesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ExcludedPreferencesCount) {
		return nil, false
	}
	return o.ExcludedPreferencesCount, true
}

// HasExcludedPreferencesCount returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasExcludedPreferencesCount() bool {
	if o != nil && !IsNil(o.ExcludedPreferencesCount) {
		return true
	}

	return false
}

// SetExcludedPreferencesCount gets a reference to the given int32 and assigns it to the ExcludedPreferencesCount field.
func (o *StagedProfilePreferenceType) SetExcludedPreferencesCount(v int32) {
	o.ExcludedPreferencesCount = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *StagedProfilePreferenceType) SetGlobal(v bool) {
	o.Global = &v
}

// GetHotels returns the Hotels field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetHotels() []string {
	if o == nil || IsNil(o.Hotels) {
		var ret []string
		return ret
	}
	return o.Hotels
}

// GetHotelsOk returns a tuple with the Hotels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetHotelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hotels) {
		return nil, false
	}
	return o.Hotels, true
}

// HasHotels returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasHotels() bool {
	if o != nil && !IsNil(o.Hotels) {
		return true
	}

	return false
}

// SetHotels gets a reference to the given []string and assigns it to the Hotels field.
func (o *StagedProfilePreferenceType) SetHotels(v []string) {
	o.Hotels = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StagedProfilePreferenceType) SetId(v string) {
	o.Id = &v
}

// GetInactiveDate returns the InactiveDate field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetInactiveDate() string {
	if o == nil || IsNil(o.InactiveDate) {
		var ret string
		return ret
	}
	return *o.InactiveDate
}

// GetInactiveDateOk returns a tuple with the InactiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetInactiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.InactiveDate) {
		return nil, false
	}
	return o.InactiveDate, true
}

// HasInactiveDate returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasInactiveDate() bool {
	if o != nil && !IsNil(o.InactiveDate) {
		return true
	}

	return false
}

// SetInactiveDate gets a reference to the given string and assigns it to the InactiveDate field.
func (o *StagedProfilePreferenceType) SetInactiveDate(v string) {
	o.InactiveDate = &v
}

// GetPreferenceCode returns the PreferenceCode field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetPreferenceCode() string {
	if o == nil || IsNil(o.PreferenceCode) {
		var ret string
		return ret
	}
	return *o.PreferenceCode
}

// GetPreferenceCodeOk returns a tuple with the PreferenceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetPreferenceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PreferenceCode) {
		return nil, false
	}
	return o.PreferenceCode, true
}

// HasPreferenceCode returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasPreferenceCode() bool {
	if o != nil && !IsNil(o.PreferenceCode) {
		return true
	}

	return false
}

// SetPreferenceCode gets a reference to the given string and assigns it to the PreferenceCode field.
func (o *StagedProfilePreferenceType) SetPreferenceCode(v string) {
	o.PreferenceCode = &v
}

// GetPreferenceValue returns the PreferenceValue field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetPreferenceValue() string {
	if o == nil || IsNil(o.PreferenceValue) {
		var ret string
		return ret
	}
	return *o.PreferenceValue
}

// GetPreferenceValueOk returns a tuple with the PreferenceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetPreferenceValueOk() (*string, bool) {
	if o == nil || IsNil(o.PreferenceValue) {
		return nil, false
	}
	return o.PreferenceValue, true
}

// HasPreferenceValue returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasPreferenceValue() bool {
	if o != nil && !IsNil(o.PreferenceValue) {
		return true
	}

	return false
}

// SetPreferenceValue gets a reference to the given string and assigns it to the PreferenceValue field.
func (o *StagedProfilePreferenceType) SetPreferenceValue(v string) {
	o.PreferenceValue = &v
}

// GetResortPrefernce returns the ResortPrefernce field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetResortPrefernce() string {
	if o == nil || IsNil(o.ResortPrefernce) {
		var ret string
		return ret
	}
	return *o.ResortPrefernce
}

// GetResortPrefernceOk returns a tuple with the ResortPrefernce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetResortPrefernceOk() (*string, bool) {
	if o == nil || IsNil(o.ResortPrefernce) {
		return nil, false
	}
	return o.ResortPrefernce, true
}

// HasResortPrefernce returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasResortPrefernce() bool {
	if o != nil && !IsNil(o.ResortPrefernce) {
		return true
	}

	return false
}

// SetResortPrefernce gets a reference to the given string and assigns it to the ResortPrefernce field.
func (o *StagedProfilePreferenceType) SetResortPrefernce(v string) {
	o.ResortPrefernce = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *StagedProfilePreferenceType) SetSource(v string) {
	o.Source = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StagedProfilePreferenceType) SetType(v string) {
	o.Type = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *StagedProfilePreferenceType) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StagedProfilePreferenceType) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *StagedProfilePreferenceType) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *StagedProfilePreferenceType) SetValid(v bool) {
	o.Valid = &v
}

func (o StagedProfilePreferenceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StagedProfilePreferenceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CopyToProfile) {
		toSerialize["copyToProfile"] = o.CopyToProfile
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ErrorDescription) {
		toSerialize["errorDescription"] = o.ErrorDescription
	}
	if !IsNil(o.ExcludedPreferencesCount) {
		toSerialize["excludedPreferencesCount"] = o.ExcludedPreferencesCount
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.Hotels) {
		toSerialize["hotels"] = o.Hotels
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InactiveDate) {
		toSerialize["inactiveDate"] = o.InactiveDate
	}
	if !IsNil(o.PreferenceCode) {
		toSerialize["preferenceCode"] = o.PreferenceCode
	}
	if !IsNil(o.PreferenceValue) {
		toSerialize["preferenceValue"] = o.PreferenceValue
	}
	if !IsNil(o.ResortPrefernce) {
		toSerialize["resortPrefernce"] = o.ResortPrefernce
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return toSerialize, nil
}

type NullableStagedProfilePreferenceType struct {
	value *StagedProfilePreferenceType
	isSet bool
}

func (v NullableStagedProfilePreferenceType) Get() *StagedProfilePreferenceType {
	return v.value
}

func (v *NullableStagedProfilePreferenceType) Set(val *StagedProfilePreferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableStagedProfilePreferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableStagedProfilePreferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStagedProfilePreferenceType(val *StagedProfilePreferenceType) *NullableStagedProfilePreferenceType {
	return &NullableStagedProfilePreferenceType{value: val, isSet: true}
}

func (v NullableStagedProfilePreferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStagedProfilePreferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


