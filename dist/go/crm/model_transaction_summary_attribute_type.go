/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the TransactionSummaryAttributeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionSummaryAttributeType{}

// TransactionSummaryAttributeType Attributes of Summary transactions.
type TransactionSummaryAttributeType struct {
	// Attribute Label
	CustomLabel *string `json:"customLabel,omitempty"`
	// Attribute Value
	Value *string `json:"value,omitempty"`
}

// NewTransactionSummaryAttributeType instantiates a new TransactionSummaryAttributeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSummaryAttributeType() *TransactionSummaryAttributeType {
	this := TransactionSummaryAttributeType{}
	return &this
}

// NewTransactionSummaryAttributeTypeWithDefaults instantiates a new TransactionSummaryAttributeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSummaryAttributeTypeWithDefaults() *TransactionSummaryAttributeType {
	this := TransactionSummaryAttributeType{}
	return &this
}

// GetCustomLabel returns the CustomLabel field value if set, zero value otherwise.
func (o *TransactionSummaryAttributeType) GetCustomLabel() string {
	if o == nil || IsNil(o.CustomLabel) {
		var ret string
		return ret
	}
	return *o.CustomLabel
}

// GetCustomLabelOk returns a tuple with the CustomLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSummaryAttributeType) GetCustomLabelOk() (*string, bool) {
	if o == nil || IsNil(o.CustomLabel) {
		return nil, false
	}
	return o.CustomLabel, true
}

// HasCustomLabel returns a boolean if a field has been set.
func (o *TransactionSummaryAttributeType) HasCustomLabel() bool {
	if o != nil && !IsNil(o.CustomLabel) {
		return true
	}

	return false
}

// SetCustomLabel gets a reference to the given string and assigns it to the CustomLabel field.
func (o *TransactionSummaryAttributeType) SetCustomLabel(v string) {
	o.CustomLabel = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TransactionSummaryAttributeType) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSummaryAttributeType) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TransactionSummaryAttributeType) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TransactionSummaryAttributeType) SetValue(v string) {
	o.Value = &v
}

func (o TransactionSummaryAttributeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionSummaryAttributeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomLabel) {
		toSerialize["customLabel"] = o.CustomLabel
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableTransactionSummaryAttributeType struct {
	value *TransactionSummaryAttributeType
	isSet bool
}

func (v NullableTransactionSummaryAttributeType) Get() *TransactionSummaryAttributeType {
	return v.value
}

func (v *NullableTransactionSummaryAttributeType) Set(val *TransactionSummaryAttributeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSummaryAttributeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSummaryAttributeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSummaryAttributeType(val *TransactionSummaryAttributeType) *NullableTransactionSummaryAttributeType {
	return &NullableTransactionSummaryAttributeType{value: val, isSet: true}
}

func (v NullableTransactionSummaryAttributeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSummaryAttributeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


