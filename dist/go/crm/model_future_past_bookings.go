/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the FuturePastBookings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FuturePastBookings{}

// FuturePastBookings This is the Response Message to information regarding existence of profile in future and/or past business blocks and/or reservations.
type FuturePastBookings struct {
	// response - whether there are future and/or past business blocks or reservations for the profile.
	Response *bool `json:"response,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewFuturePastBookings instantiates a new FuturePastBookings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFuturePastBookings() *FuturePastBookings {
	this := FuturePastBookings{}
	return &this
}

// NewFuturePastBookingsWithDefaults instantiates a new FuturePastBookings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFuturePastBookingsWithDefaults() *FuturePastBookings {
	this := FuturePastBookings{}
	return &this
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *FuturePastBookings) GetResponse() bool {
	if o == nil || IsNil(o.Response) {
		var ret bool
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturePastBookings) GetResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *FuturePastBookings) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given bool and assigns it to the Response field.
func (o *FuturePastBookings) SetResponse(v bool) {
	o.Response = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FuturePastBookings) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturePastBookings) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FuturePastBookings) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *FuturePastBookings) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *FuturePastBookings) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuturePastBookings) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *FuturePastBookings) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *FuturePastBookings) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o FuturePastBookings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FuturePastBookings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableFuturePastBookings struct {
	value *FuturePastBookings
	isSet bool
}

func (v NullableFuturePastBookings) Get() *FuturePastBookings {
	return v.value
}

func (v *NullableFuturePastBookings) Set(val *FuturePastBookings) {
	v.value = val
	v.isSet = true
}

func (v NullableFuturePastBookings) IsSet() bool {
	return v.isSet
}

func (v *NullableFuturePastBookings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuturePastBookings(val *FuturePastBookings) *NullableFuturePastBookings {
	return &NullableFuturePastBookings{value: val, isSet: true}
}

func (v NullableFuturePastBookings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuturePastBookings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


