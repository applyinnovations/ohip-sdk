/*
OPERA Cloud Customer Relationship Management API

APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package crm

import (
	"encoding/json"
)

// checks if the CopyInstructionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyInstructionsType{}

// CopyInstructionsType Copy Instructions for a profile
type CopyInstructionsType struct {
	// List of the profile details to be copied
	Instructions []CopyInstructionType `json:"instructions,omitempty"`
}

// NewCopyInstructionsType instantiates a new CopyInstructionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyInstructionsType() *CopyInstructionsType {
	this := CopyInstructionsType{}
	return &this
}

// NewCopyInstructionsTypeWithDefaults instantiates a new CopyInstructionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyInstructionsTypeWithDefaults() *CopyInstructionsType {
	this := CopyInstructionsType{}
	return &this
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *CopyInstructionsType) GetInstructions() []CopyInstructionType {
	if o == nil || IsNil(o.Instructions) {
		var ret []CopyInstructionType
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyInstructionsType) GetInstructionsOk() ([]CopyInstructionType, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *CopyInstructionsType) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []CopyInstructionType and assigns it to the Instructions field.
func (o *CopyInstructionsType) SetInstructions(v []CopyInstructionType) {
	o.Instructions = v
}

func (o CopyInstructionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyInstructionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	return toSerialize, nil
}

type NullableCopyInstructionsType struct {
	value *CopyInstructionsType
	isSet bool
}

func (v NullableCopyInstructionsType) Get() *CopyInstructionsType {
	return v.value
}

func (v *NullableCopyInstructionsType) Set(val *CopyInstructionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyInstructionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyInstructionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyInstructionsType(val *CopyInstructionsType) *NullableCopyInstructionsType {
	return &NullableCopyInstructionsType{value: val, isSet: true}
}

func (v NullableCopyInstructionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyInstructionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


