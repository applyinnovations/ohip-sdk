/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventProcessInstructionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventProcessInstructionsType{}

// EventProcessInstructionsType Instructions to control how the event is created.
type EventProcessInstructionsType struct {
	// Flag to indicate that the Event is being converted from Sub Event as a Regular Event.
	ConvertToRegularEvent *bool `json:"convertToRegularEvent,omitempty"`
	// Flag to indicate that the Event is being converted from Regular Event as a Sub Event linking to a Master Event.
	ConvertToSubEvent *bool `json:"convertToSubEvent,omitempty"`
	// Flag to indicate if the function space can be booked when it is occupied by another event.
	Overbook *bool `json:"overbook,omitempty"`
	// Flag to indicate if configured function space capacity can be overriden.
	OverrideCapacity *bool `json:"overrideCapacity,omitempty"`
	// Flag to indicate if maximum group configured in function space can be overriden.
	OverrideMaxgroups *bool `json:"overrideMaxgroups,omitempty"`
	// Flag to indicate that both Block and Event would be created as part of the Quick Event process.
	QuickEvent *bool `json:"quickEvent,omitempty"`
	// Flag to indicate if the function space can be booked as shareable with another event.
	Shareable *bool `json:"shareable,omitempty"`
	// Flag to indicate if the event can be waitlisted when function space is not available.
	WaitList *bool `json:"waitList,omitempty"`
	// Flag to return a warning when the functionspace is being used by other catering event.
	WarnFunctionSpace *bool `json:"warnFunctionSpace,omitempty"`
}

// NewEventProcessInstructionsType instantiates a new EventProcessInstructionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventProcessInstructionsType() *EventProcessInstructionsType {
	this := EventProcessInstructionsType{}
	return &this
}

// NewEventProcessInstructionsTypeWithDefaults instantiates a new EventProcessInstructionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventProcessInstructionsTypeWithDefaults() *EventProcessInstructionsType {
	this := EventProcessInstructionsType{}
	return &this
}

// GetConvertToRegularEvent returns the ConvertToRegularEvent field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetConvertToRegularEvent() bool {
	if o == nil || IsNil(o.ConvertToRegularEvent) {
		var ret bool
		return ret
	}
	return *o.ConvertToRegularEvent
}

// GetConvertToRegularEventOk returns a tuple with the ConvertToRegularEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetConvertToRegularEventOk() (*bool, bool) {
	if o == nil || IsNil(o.ConvertToRegularEvent) {
		return nil, false
	}
	return o.ConvertToRegularEvent, true
}

// HasConvertToRegularEvent returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasConvertToRegularEvent() bool {
	if o != nil && !IsNil(o.ConvertToRegularEvent) {
		return true
	}

	return false
}

// SetConvertToRegularEvent gets a reference to the given bool and assigns it to the ConvertToRegularEvent field.
func (o *EventProcessInstructionsType) SetConvertToRegularEvent(v bool) {
	o.ConvertToRegularEvent = &v
}

// GetConvertToSubEvent returns the ConvertToSubEvent field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetConvertToSubEvent() bool {
	if o == nil || IsNil(o.ConvertToSubEvent) {
		var ret bool
		return ret
	}
	return *o.ConvertToSubEvent
}

// GetConvertToSubEventOk returns a tuple with the ConvertToSubEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetConvertToSubEventOk() (*bool, bool) {
	if o == nil || IsNil(o.ConvertToSubEvent) {
		return nil, false
	}
	return o.ConvertToSubEvent, true
}

// HasConvertToSubEvent returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasConvertToSubEvent() bool {
	if o != nil && !IsNil(o.ConvertToSubEvent) {
		return true
	}

	return false
}

// SetConvertToSubEvent gets a reference to the given bool and assigns it to the ConvertToSubEvent field.
func (o *EventProcessInstructionsType) SetConvertToSubEvent(v bool) {
	o.ConvertToSubEvent = &v
}

// GetOverbook returns the Overbook field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetOverbook() bool {
	if o == nil || IsNil(o.Overbook) {
		var ret bool
		return ret
	}
	return *o.Overbook
}

// GetOverbookOk returns a tuple with the Overbook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetOverbookOk() (*bool, bool) {
	if o == nil || IsNil(o.Overbook) {
		return nil, false
	}
	return o.Overbook, true
}

// HasOverbook returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasOverbook() bool {
	if o != nil && !IsNil(o.Overbook) {
		return true
	}

	return false
}

// SetOverbook gets a reference to the given bool and assigns it to the Overbook field.
func (o *EventProcessInstructionsType) SetOverbook(v bool) {
	o.Overbook = &v
}

// GetOverrideCapacity returns the OverrideCapacity field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetOverrideCapacity() bool {
	if o == nil || IsNil(o.OverrideCapacity) {
		var ret bool
		return ret
	}
	return *o.OverrideCapacity
}

// GetOverrideCapacityOk returns a tuple with the OverrideCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetOverrideCapacityOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideCapacity) {
		return nil, false
	}
	return o.OverrideCapacity, true
}

// HasOverrideCapacity returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasOverrideCapacity() bool {
	if o != nil && !IsNil(o.OverrideCapacity) {
		return true
	}

	return false
}

// SetOverrideCapacity gets a reference to the given bool and assigns it to the OverrideCapacity field.
func (o *EventProcessInstructionsType) SetOverrideCapacity(v bool) {
	o.OverrideCapacity = &v
}

// GetOverrideMaxgroups returns the OverrideMaxgroups field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetOverrideMaxgroups() bool {
	if o == nil || IsNil(o.OverrideMaxgroups) {
		var ret bool
		return ret
	}
	return *o.OverrideMaxgroups
}

// GetOverrideMaxgroupsOk returns a tuple with the OverrideMaxgroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetOverrideMaxgroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideMaxgroups) {
		return nil, false
	}
	return o.OverrideMaxgroups, true
}

// HasOverrideMaxgroups returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasOverrideMaxgroups() bool {
	if o != nil && !IsNil(o.OverrideMaxgroups) {
		return true
	}

	return false
}

// SetOverrideMaxgroups gets a reference to the given bool and assigns it to the OverrideMaxgroups field.
func (o *EventProcessInstructionsType) SetOverrideMaxgroups(v bool) {
	o.OverrideMaxgroups = &v
}

// GetQuickEvent returns the QuickEvent field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetQuickEvent() bool {
	if o == nil || IsNil(o.QuickEvent) {
		var ret bool
		return ret
	}
	return *o.QuickEvent
}

// GetQuickEventOk returns a tuple with the QuickEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetQuickEventOk() (*bool, bool) {
	if o == nil || IsNil(o.QuickEvent) {
		return nil, false
	}
	return o.QuickEvent, true
}

// HasQuickEvent returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasQuickEvent() bool {
	if o != nil && !IsNil(o.QuickEvent) {
		return true
	}

	return false
}

// SetQuickEvent gets a reference to the given bool and assigns it to the QuickEvent field.
func (o *EventProcessInstructionsType) SetQuickEvent(v bool) {
	o.QuickEvent = &v
}

// GetShareable returns the Shareable field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetShareable() bool {
	if o == nil || IsNil(o.Shareable) {
		var ret bool
		return ret
	}
	return *o.Shareable
}

// GetShareableOk returns a tuple with the Shareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.Shareable) {
		return nil, false
	}
	return o.Shareable, true
}

// HasShareable returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasShareable() bool {
	if o != nil && !IsNil(o.Shareable) {
		return true
	}

	return false
}

// SetShareable gets a reference to the given bool and assigns it to the Shareable field.
func (o *EventProcessInstructionsType) SetShareable(v bool) {
	o.Shareable = &v
}

// GetWaitList returns the WaitList field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetWaitList() bool {
	if o == nil || IsNil(o.WaitList) {
		var ret bool
		return ret
	}
	return *o.WaitList
}

// GetWaitListOk returns a tuple with the WaitList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetWaitListOk() (*bool, bool) {
	if o == nil || IsNil(o.WaitList) {
		return nil, false
	}
	return o.WaitList, true
}

// HasWaitList returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasWaitList() bool {
	if o != nil && !IsNil(o.WaitList) {
		return true
	}

	return false
}

// SetWaitList gets a reference to the given bool and assigns it to the WaitList field.
func (o *EventProcessInstructionsType) SetWaitList(v bool) {
	o.WaitList = &v
}

// GetWarnFunctionSpace returns the WarnFunctionSpace field value if set, zero value otherwise.
func (o *EventProcessInstructionsType) GetWarnFunctionSpace() bool {
	if o == nil || IsNil(o.WarnFunctionSpace) {
		var ret bool
		return ret
	}
	return *o.WarnFunctionSpace
}

// GetWarnFunctionSpaceOk returns a tuple with the WarnFunctionSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventProcessInstructionsType) GetWarnFunctionSpaceOk() (*bool, bool) {
	if o == nil || IsNil(o.WarnFunctionSpace) {
		return nil, false
	}
	return o.WarnFunctionSpace, true
}

// HasWarnFunctionSpace returns a boolean if a field has been set.
func (o *EventProcessInstructionsType) HasWarnFunctionSpace() bool {
	if o != nil && !IsNil(o.WarnFunctionSpace) {
		return true
	}

	return false
}

// SetWarnFunctionSpace gets a reference to the given bool and assigns it to the WarnFunctionSpace field.
func (o *EventProcessInstructionsType) SetWarnFunctionSpace(v bool) {
	o.WarnFunctionSpace = &v
}

func (o EventProcessInstructionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventProcessInstructionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConvertToRegularEvent) {
		toSerialize["convertToRegularEvent"] = o.ConvertToRegularEvent
	}
	if !IsNil(o.ConvertToSubEvent) {
		toSerialize["convertToSubEvent"] = o.ConvertToSubEvent
	}
	if !IsNil(o.Overbook) {
		toSerialize["overbook"] = o.Overbook
	}
	if !IsNil(o.OverrideCapacity) {
		toSerialize["overrideCapacity"] = o.OverrideCapacity
	}
	if !IsNil(o.OverrideMaxgroups) {
		toSerialize["overrideMaxgroups"] = o.OverrideMaxgroups
	}
	if !IsNil(o.QuickEvent) {
		toSerialize["quickEvent"] = o.QuickEvent
	}
	if !IsNil(o.Shareable) {
		toSerialize["shareable"] = o.Shareable
	}
	if !IsNil(o.WaitList) {
		toSerialize["waitList"] = o.WaitList
	}
	if !IsNil(o.WarnFunctionSpace) {
		toSerialize["warnFunctionSpace"] = o.WarnFunctionSpace
	}
	return toSerialize, nil
}

type NullableEventProcessInstructionsType struct {
	value *EventProcessInstructionsType
	isSet bool
}

func (v NullableEventProcessInstructionsType) Get() *EventProcessInstructionsType {
	return v.value
}

func (v *NullableEventProcessInstructionsType) Set(val *EventProcessInstructionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventProcessInstructionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventProcessInstructionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventProcessInstructionsType(val *EventProcessInstructionsType) *NullableEventProcessInstructionsType {
	return &NullableEventProcessInstructionsType{value: val, isSet: true}
}

func (v NullableEventProcessInstructionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventProcessInstructionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


