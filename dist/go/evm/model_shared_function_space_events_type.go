/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the SharedFunctionSpaceEventsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedFunctionSpaceEventsType{}

// SharedFunctionSpaceEventsType Collection of events shared by function space.
type SharedFunctionSpaceEventsType struct {
	// Maximum capcity of the shared function space.
	MaxCapacity *int32 `json:"maxCapacity,omitempty"`
	// Maximum number of events for the shared function space.
	MaxEvents *int32 `json:"maxEvents,omitempty"`
	// Pertain shared event Information.
	SharedFunctionSpaceEvent []SharedFunctionSpaceEventType `json:"sharedFunctionSpaceEvent,omitempty"`
}

// NewSharedFunctionSpaceEventsType instantiates a new SharedFunctionSpaceEventsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedFunctionSpaceEventsType() *SharedFunctionSpaceEventsType {
	this := SharedFunctionSpaceEventsType{}
	return &this
}

// NewSharedFunctionSpaceEventsTypeWithDefaults instantiates a new SharedFunctionSpaceEventsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedFunctionSpaceEventsTypeWithDefaults() *SharedFunctionSpaceEventsType {
	this := SharedFunctionSpaceEventsType{}
	return &this
}

// GetMaxCapacity returns the MaxCapacity field value if set, zero value otherwise.
func (o *SharedFunctionSpaceEventsType) GetMaxCapacity() int32 {
	if o == nil || IsNil(o.MaxCapacity) {
		var ret int32
		return ret
	}
	return *o.MaxCapacity
}

// GetMaxCapacityOk returns a tuple with the MaxCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedFunctionSpaceEventsType) GetMaxCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCapacity) {
		return nil, false
	}
	return o.MaxCapacity, true
}

// HasMaxCapacity returns a boolean if a field has been set.
func (o *SharedFunctionSpaceEventsType) HasMaxCapacity() bool {
	if o != nil && !IsNil(o.MaxCapacity) {
		return true
	}

	return false
}

// SetMaxCapacity gets a reference to the given int32 and assigns it to the MaxCapacity field.
func (o *SharedFunctionSpaceEventsType) SetMaxCapacity(v int32) {
	o.MaxCapacity = &v
}

// GetMaxEvents returns the MaxEvents field value if set, zero value otherwise.
func (o *SharedFunctionSpaceEventsType) GetMaxEvents() int32 {
	if o == nil || IsNil(o.MaxEvents) {
		var ret int32
		return ret
	}
	return *o.MaxEvents
}

// GetMaxEventsOk returns a tuple with the MaxEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedFunctionSpaceEventsType) GetMaxEventsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxEvents) {
		return nil, false
	}
	return o.MaxEvents, true
}

// HasMaxEvents returns a boolean if a field has been set.
func (o *SharedFunctionSpaceEventsType) HasMaxEvents() bool {
	if o != nil && !IsNil(o.MaxEvents) {
		return true
	}

	return false
}

// SetMaxEvents gets a reference to the given int32 and assigns it to the MaxEvents field.
func (o *SharedFunctionSpaceEventsType) SetMaxEvents(v int32) {
	o.MaxEvents = &v
}

// GetSharedFunctionSpaceEvent returns the SharedFunctionSpaceEvent field value if set, zero value otherwise.
func (o *SharedFunctionSpaceEventsType) GetSharedFunctionSpaceEvent() []SharedFunctionSpaceEventType {
	if o == nil || IsNil(o.SharedFunctionSpaceEvent) {
		var ret []SharedFunctionSpaceEventType
		return ret
	}
	return o.SharedFunctionSpaceEvent
}

// GetSharedFunctionSpaceEventOk returns a tuple with the SharedFunctionSpaceEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedFunctionSpaceEventsType) GetSharedFunctionSpaceEventOk() ([]SharedFunctionSpaceEventType, bool) {
	if o == nil || IsNil(o.SharedFunctionSpaceEvent) {
		return nil, false
	}
	return o.SharedFunctionSpaceEvent, true
}

// HasSharedFunctionSpaceEvent returns a boolean if a field has been set.
func (o *SharedFunctionSpaceEventsType) HasSharedFunctionSpaceEvent() bool {
	if o != nil && !IsNil(o.SharedFunctionSpaceEvent) {
		return true
	}

	return false
}

// SetSharedFunctionSpaceEvent gets a reference to the given []SharedFunctionSpaceEventType and assigns it to the SharedFunctionSpaceEvent field.
func (o *SharedFunctionSpaceEventsType) SetSharedFunctionSpaceEvent(v []SharedFunctionSpaceEventType) {
	o.SharedFunctionSpaceEvent = v
}

func (o SharedFunctionSpaceEventsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedFunctionSpaceEventsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxCapacity) {
		toSerialize["maxCapacity"] = o.MaxCapacity
	}
	if !IsNil(o.MaxEvents) {
		toSerialize["maxEvents"] = o.MaxEvents
	}
	if !IsNil(o.SharedFunctionSpaceEvent) {
		toSerialize["sharedFunctionSpaceEvent"] = o.SharedFunctionSpaceEvent
	}
	return toSerialize, nil
}

type NullableSharedFunctionSpaceEventsType struct {
	value *SharedFunctionSpaceEventsType
	isSet bool
}

func (v NullableSharedFunctionSpaceEventsType) Get() *SharedFunctionSpaceEventsType {
	return v.value
}

func (v *NullableSharedFunctionSpaceEventsType) Set(val *SharedFunctionSpaceEventsType) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedFunctionSpaceEventsType) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedFunctionSpaceEventsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedFunctionSpaceEventsType(val *SharedFunctionSpaceEventsType) *NullableSharedFunctionSpaceEventsType {
	return &NullableSharedFunctionSpaceEventsType{value: val, isSet: true}
}

func (v NullableSharedFunctionSpaceEventsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedFunctionSpaceEventsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


