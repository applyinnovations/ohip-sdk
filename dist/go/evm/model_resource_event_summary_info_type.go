/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ResourceEventSummaryInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceEventSummaryInfoType{}

// ResourceEventSummaryInfoType Contains information about an event.
type ResourceEventSummaryInfoType struct {
	EventId *EventId `json:"eventId,omitempty"`
	EventName *TranslationTextType60 `json:"eventName,omitempty"`
	// Type of event.
	EventType *string `json:"eventType,omitempty"`
	EventTimeSpan *DateTimeSpanType `json:"eventTimeSpan,omitempty"`
	EventStatus *BookingStatusType `json:"eventStatus,omitempty"`
	// Package Id of the Event.
	PackageId *float32 `json:"packageId,omitempty"`
	// Indicates whether event is master event.
	MasterEvent *bool `json:"masterEvent,omitempty"`
	// Flag to indicate if the event is a sub event.
	SubEvent *bool `json:"subEvent,omitempty"`
	// Flag to indicate if the event is an alternate event.
	AlternateEvent *bool `json:"alternateEvent,omitempty"`
	// Room code of the function space.
	Room *string `json:"room,omitempty"`
}

// NewResourceEventSummaryInfoType instantiates a new ResourceEventSummaryInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceEventSummaryInfoType() *ResourceEventSummaryInfoType {
	this := ResourceEventSummaryInfoType{}
	return &this
}

// NewResourceEventSummaryInfoTypeWithDefaults instantiates a new ResourceEventSummaryInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceEventSummaryInfoTypeWithDefaults() *ResourceEventSummaryInfoType {
	this := ResourceEventSummaryInfoType{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetEventId() EventId {
	if o == nil || IsNil(o.EventId) {
		var ret EventId
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetEventIdOk() (*EventId, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given EventId and assigns it to the EventId field.
func (o *ResourceEventSummaryInfoType) SetEventId(v EventId) {
	o.EventId = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetEventName() TranslationTextType60 {
	if o == nil || IsNil(o.EventName) {
		var ret TranslationTextType60
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetEventNameOk() (*TranslationTextType60, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given TranslationTextType60 and assigns it to the EventName field.
func (o *ResourceEventSummaryInfoType) SetEventName(v TranslationTextType60) {
	o.EventName = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *ResourceEventSummaryInfoType) SetEventType(v string) {
	o.EventType = &v
}

// GetEventTimeSpan returns the EventTimeSpan field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetEventTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.EventTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.EventTimeSpan
}

// GetEventTimeSpanOk returns a tuple with the EventTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetEventTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.EventTimeSpan) {
		return nil, false
	}
	return o.EventTimeSpan, true
}

// HasEventTimeSpan returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasEventTimeSpan() bool {
	if o != nil && !IsNil(o.EventTimeSpan) {
		return true
	}

	return false
}

// SetEventTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the EventTimeSpan field.
func (o *ResourceEventSummaryInfoType) SetEventTimeSpan(v DateTimeSpanType) {
	o.EventTimeSpan = &v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetEventStatus() BookingStatusType {
	if o == nil || IsNil(o.EventStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetEventStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given BookingStatusType and assigns it to the EventStatus field.
func (o *ResourceEventSummaryInfoType) SetEventStatus(v BookingStatusType) {
	o.EventStatus = &v
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetPackageId() float32 {
	if o == nil || IsNil(o.PackageId) {
		var ret float32
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetPackageIdOk() (*float32, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given float32 and assigns it to the PackageId field.
func (o *ResourceEventSummaryInfoType) SetPackageId(v float32) {
	o.PackageId = &v
}

// GetMasterEvent returns the MasterEvent field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetMasterEvent() bool {
	if o == nil || IsNil(o.MasterEvent) {
		var ret bool
		return ret
	}
	return *o.MasterEvent
}

// GetMasterEventOk returns a tuple with the MasterEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetMasterEventOk() (*bool, bool) {
	if o == nil || IsNil(o.MasterEvent) {
		return nil, false
	}
	return o.MasterEvent, true
}

// HasMasterEvent returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasMasterEvent() bool {
	if o != nil && !IsNil(o.MasterEvent) {
		return true
	}

	return false
}

// SetMasterEvent gets a reference to the given bool and assigns it to the MasterEvent field.
func (o *ResourceEventSummaryInfoType) SetMasterEvent(v bool) {
	o.MasterEvent = &v
}

// GetSubEvent returns the SubEvent field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetSubEvent() bool {
	if o == nil || IsNil(o.SubEvent) {
		var ret bool
		return ret
	}
	return *o.SubEvent
}

// GetSubEventOk returns a tuple with the SubEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetSubEventOk() (*bool, bool) {
	if o == nil || IsNil(o.SubEvent) {
		return nil, false
	}
	return o.SubEvent, true
}

// HasSubEvent returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasSubEvent() bool {
	if o != nil && !IsNil(o.SubEvent) {
		return true
	}

	return false
}

// SetSubEvent gets a reference to the given bool and assigns it to the SubEvent field.
func (o *ResourceEventSummaryInfoType) SetSubEvent(v bool) {
	o.SubEvent = &v
}

// GetAlternateEvent returns the AlternateEvent field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetAlternateEvent() bool {
	if o == nil || IsNil(o.AlternateEvent) {
		var ret bool
		return ret
	}
	return *o.AlternateEvent
}

// GetAlternateEventOk returns a tuple with the AlternateEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetAlternateEventOk() (*bool, bool) {
	if o == nil || IsNil(o.AlternateEvent) {
		return nil, false
	}
	return o.AlternateEvent, true
}

// HasAlternateEvent returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasAlternateEvent() bool {
	if o != nil && !IsNil(o.AlternateEvent) {
		return true
	}

	return false
}

// SetAlternateEvent gets a reference to the given bool and assigns it to the AlternateEvent field.
func (o *ResourceEventSummaryInfoType) SetAlternateEvent(v bool) {
	o.AlternateEvent = &v
}

// GetRoom returns the Room field value if set, zero value otherwise.
func (o *ResourceEventSummaryInfoType) GetRoom() string {
	if o == nil || IsNil(o.Room) {
		var ret string
		return ret
	}
	return *o.Room
}

// GetRoomOk returns a tuple with the Room field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventSummaryInfoType) GetRoomOk() (*string, bool) {
	if o == nil || IsNil(o.Room) {
		return nil, false
	}
	return o.Room, true
}

// HasRoom returns a boolean if a field has been set.
func (o *ResourceEventSummaryInfoType) HasRoom() bool {
	if o != nil && !IsNil(o.Room) {
		return true
	}

	return false
}

// SetRoom gets a reference to the given string and assigns it to the Room field.
func (o *ResourceEventSummaryInfoType) SetRoom(v string) {
	o.Room = &v
}

func (o ResourceEventSummaryInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceEventSummaryInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.EventTimeSpan) {
		toSerialize["eventTimeSpan"] = o.EventTimeSpan
	}
	if !IsNil(o.EventStatus) {
		toSerialize["eventStatus"] = o.EventStatus
	}
	if !IsNil(o.PackageId) {
		toSerialize["packageId"] = o.PackageId
	}
	if !IsNil(o.MasterEvent) {
		toSerialize["masterEvent"] = o.MasterEvent
	}
	if !IsNil(o.SubEvent) {
		toSerialize["subEvent"] = o.SubEvent
	}
	if !IsNil(o.AlternateEvent) {
		toSerialize["alternateEvent"] = o.AlternateEvent
	}
	if !IsNil(o.Room) {
		toSerialize["room"] = o.Room
	}
	return toSerialize, nil
}

type NullableResourceEventSummaryInfoType struct {
	value *ResourceEventSummaryInfoType
	isSet bool
}

func (v NullableResourceEventSummaryInfoType) Get() *ResourceEventSummaryInfoType {
	return v.value
}

func (v *NullableResourceEventSummaryInfoType) Set(val *ResourceEventSummaryInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceEventSummaryInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceEventSummaryInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceEventSummaryInfoType(val *ResourceEventSummaryInfoType) *NullableResourceEventSummaryInfoType {
	return &NullableResourceEventSummaryInfoType{value: val, isSet: true}
}

func (v NullableResourceEventSummaryInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceEventSummaryInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


