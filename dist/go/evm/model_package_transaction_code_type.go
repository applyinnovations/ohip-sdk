/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the PackageTransactionCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageTransactionCodeType{}

// PackageTransactionCodeType struct for PackageTransactionCodeType
type PackageTransactionCodeType struct {
	// The description of the code.
	Description *string `json:"description,omitempty"`
	// Posting / transaction code.
	Code *string `json:"code,omitempty"`
	Type *AmountDeterminationType `json:"type,omitempty"`
}

// NewPackageTransactionCodeType instantiates a new PackageTransactionCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageTransactionCodeType() *PackageTransactionCodeType {
	this := PackageTransactionCodeType{}
	return &this
}

// NewPackageTransactionCodeTypeWithDefaults instantiates a new PackageTransactionCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageTransactionCodeTypeWithDefaults() *PackageTransactionCodeType {
	this := PackageTransactionCodeType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PackageTransactionCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTransactionCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PackageTransactionCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PackageTransactionCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PackageTransactionCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTransactionCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PackageTransactionCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PackageTransactionCodeType) SetCode(v string) {
	o.Code = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PackageTransactionCodeType) GetType() AmountDeterminationType {
	if o == nil || IsNil(o.Type) {
		var ret AmountDeterminationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTransactionCodeType) GetTypeOk() (*AmountDeterminationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PackageTransactionCodeType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given AmountDeterminationType and assigns it to the Type field.
func (o *PackageTransactionCodeType) SetType(v AmountDeterminationType) {
	o.Type = &v
}

func (o PackageTransactionCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageTransactionCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePackageTransactionCodeType struct {
	value *PackageTransactionCodeType
	isSet bool
}

func (v NullablePackageTransactionCodeType) Get() *PackageTransactionCodeType {
	return v.value
}

func (v *NullablePackageTransactionCodeType) Set(val *PackageTransactionCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageTransactionCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageTransactionCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageTransactionCodeType(val *PackageTransactionCodeType) *NullablePackageTransactionCodeType {
	return &NullablePackageTransactionCodeType{value: val, isSet: true}
}

func (v NullablePackageTransactionCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageTransactionCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


