/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CustomerType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerType{}

// CustomerType Contains basic data on the customer's identity, location, relationships, finances, memberships, etc.
type CustomerType struct {
	// Identifies the profile gender code based from configured gender list of values.
	GenderCode *string `json:"genderCode,omitempty"`
	// Detailed name information for the customer.
	PersonName []PersonNameType `json:"personName,omitempty"`
	// Description of the VIP status.
	VipDescription *string `json:"vipDescription,omitempty"`
	// VIP status of the customer.
	VipStatus *string `json:"vipStatus,omitempty"`
}

// NewCustomerType instantiates a new CustomerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerType() *CustomerType {
	this := CustomerType{}
	return &this
}

// NewCustomerTypeWithDefaults instantiates a new CustomerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerTypeWithDefaults() *CustomerType {
	this := CustomerType{}
	return &this
}

// GetGenderCode returns the GenderCode field value if set, zero value otherwise.
func (o *CustomerType) GetGenderCode() string {
	if o == nil || IsNil(o.GenderCode) {
		var ret string
		return ret
	}
	return *o.GenderCode
}

// GetGenderCodeOk returns a tuple with the GenderCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerType) GetGenderCodeOk() (*string, bool) {
	if o == nil || IsNil(o.GenderCode) {
		return nil, false
	}
	return o.GenderCode, true
}

// HasGenderCode returns a boolean if a field has been set.
func (o *CustomerType) HasGenderCode() bool {
	if o != nil && !IsNil(o.GenderCode) {
		return true
	}

	return false
}

// SetGenderCode gets a reference to the given string and assigns it to the GenderCode field.
func (o *CustomerType) SetGenderCode(v string) {
	o.GenderCode = &v
}

// GetPersonName returns the PersonName field value if set, zero value otherwise.
func (o *CustomerType) GetPersonName() []PersonNameType {
	if o == nil || IsNil(o.PersonName) {
		var ret []PersonNameType
		return ret
	}
	return o.PersonName
}

// GetPersonNameOk returns a tuple with the PersonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerType) GetPersonNameOk() ([]PersonNameType, bool) {
	if o == nil || IsNil(o.PersonName) {
		return nil, false
	}
	return o.PersonName, true
}

// HasPersonName returns a boolean if a field has been set.
func (o *CustomerType) HasPersonName() bool {
	if o != nil && !IsNil(o.PersonName) {
		return true
	}

	return false
}

// SetPersonName gets a reference to the given []PersonNameType and assigns it to the PersonName field.
func (o *CustomerType) SetPersonName(v []PersonNameType) {
	o.PersonName = v
}

// GetVipDescription returns the VipDescription field value if set, zero value otherwise.
func (o *CustomerType) GetVipDescription() string {
	if o == nil || IsNil(o.VipDescription) {
		var ret string
		return ret
	}
	return *o.VipDescription
}

// GetVipDescriptionOk returns a tuple with the VipDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerType) GetVipDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.VipDescription) {
		return nil, false
	}
	return o.VipDescription, true
}

// HasVipDescription returns a boolean if a field has been set.
func (o *CustomerType) HasVipDescription() bool {
	if o != nil && !IsNil(o.VipDescription) {
		return true
	}

	return false
}

// SetVipDescription gets a reference to the given string and assigns it to the VipDescription field.
func (o *CustomerType) SetVipDescription(v string) {
	o.VipDescription = &v
}

// GetVipStatus returns the VipStatus field value if set, zero value otherwise.
func (o *CustomerType) GetVipStatus() string {
	if o == nil || IsNil(o.VipStatus) {
		var ret string
		return ret
	}
	return *o.VipStatus
}

// GetVipStatusOk returns a tuple with the VipStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerType) GetVipStatusOk() (*string, bool) {
	if o == nil || IsNil(o.VipStatus) {
		return nil, false
	}
	return o.VipStatus, true
}

// HasVipStatus returns a boolean if a field has been set.
func (o *CustomerType) HasVipStatus() bool {
	if o != nil && !IsNil(o.VipStatus) {
		return true
	}

	return false
}

// SetVipStatus gets a reference to the given string and assigns it to the VipStatus field.
func (o *CustomerType) SetVipStatus(v string) {
	o.VipStatus = &v
}

func (o CustomerType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GenderCode) {
		toSerialize["genderCode"] = o.GenderCode
	}
	if !IsNil(o.PersonName) {
		toSerialize["personName"] = o.PersonName
	}
	if !IsNil(o.VipDescription) {
		toSerialize["vipDescription"] = o.VipDescription
	}
	if !IsNil(o.VipStatus) {
		toSerialize["vipStatus"] = o.VipStatus
	}
	return toSerialize, nil
}

type NullableCustomerType struct {
	value *CustomerType
	isSet bool
}

func (v NullableCustomerType) Get() *CustomerType {
	return v.value
}

func (v *NullableCustomerType) Set(val *CustomerType) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerType) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerType(val *CustomerType) *NullableCustomerType {
	return &NullableCustomerType{value: val, isSet: true}
}

func (v NullableCustomerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


