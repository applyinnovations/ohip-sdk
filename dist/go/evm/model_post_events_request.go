/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the PostEventsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostEventsRequest{}

// PostEventsRequest struct for PostEventsRequest
type PostEventsRequest struct {
	// Pertain event information.
	EventDetails []EventInfoType `json:"eventDetails,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success elementSpace to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewPostEventsRequest instantiates a new PostEventsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostEventsRequest() *PostEventsRequest {
	this := PostEventsRequest{}
	return &this
}

// NewPostEventsRequestWithDefaults instantiates a new PostEventsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostEventsRequestWithDefaults() *PostEventsRequest {
	this := PostEventsRequest{}
	return &this
}

// GetEventDetails returns the EventDetails field value if set, zero value otherwise.
func (o *PostEventsRequest) GetEventDetails() []EventInfoType {
	if o == nil || IsNil(o.EventDetails) {
		var ret []EventInfoType
		return ret
	}
	return o.EventDetails
}

// GetEventDetailsOk returns a tuple with the EventDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEventsRequest) GetEventDetailsOk() ([]EventInfoType, bool) {
	if o == nil || IsNil(o.EventDetails) {
		return nil, false
	}
	return o.EventDetails, true
}

// HasEventDetails returns a boolean if a field has been set.
func (o *PostEventsRequest) HasEventDetails() bool {
	if o != nil && !IsNil(o.EventDetails) {
		return true
	}

	return false
}

// SetEventDetails gets a reference to the given []EventInfoType and assigns it to the EventDetails field.
func (o *PostEventsRequest) SetEventDetails(v []EventInfoType) {
	o.EventDetails = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *PostEventsRequest) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEventsRequest) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *PostEventsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *PostEventsRequest) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PostEventsRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEventsRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PostEventsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *PostEventsRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o PostEventsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostEventsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventDetails) {
		toSerialize["eventDetails"] = o.EventDetails
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullablePostEventsRequest struct {
	value *PostEventsRequest
	isSet bool
}

func (v NullablePostEventsRequest) Get() *PostEventsRequest {
	return v.value
}

func (v *NullablePostEventsRequest) Set(val *PostEventsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostEventsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostEventsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostEventsRequest(val *PostEventsRequest) *NullablePostEventsRequest {
	return &NullablePostEventsRequest{value: val, isSet: true}
}

func (v NullablePostEventsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostEventsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


