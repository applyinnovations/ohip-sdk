/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the QuickInsertResources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickInsertResources{}

// QuickInsertResources Request object to add resource on an event in a hotel.
type QuickInsertResources struct {
	QuickInsertResourceListInfo []QuickInsertResourceListType `json:"quickInsertResourceListInfo,omitempty"`
	// Used in conjunction with the Success elementSpace to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewQuickInsertResources instantiates a new QuickInsertResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickInsertResources() *QuickInsertResources {
	this := QuickInsertResources{}
	return &this
}

// NewQuickInsertResourcesWithDefaults instantiates a new QuickInsertResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickInsertResourcesWithDefaults() *QuickInsertResources {
	this := QuickInsertResources{}
	return &this
}

// GetQuickInsertResourceListInfo returns the QuickInsertResourceListInfo field value if set, zero value otherwise.
func (o *QuickInsertResources) GetQuickInsertResourceListInfo() []QuickInsertResourceListType {
	if o == nil || IsNil(o.QuickInsertResourceListInfo) {
		var ret []QuickInsertResourceListType
		return ret
	}
	return o.QuickInsertResourceListInfo
}

// GetQuickInsertResourceListInfoOk returns a tuple with the QuickInsertResourceListInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickInsertResources) GetQuickInsertResourceListInfoOk() ([]QuickInsertResourceListType, bool) {
	if o == nil || IsNil(o.QuickInsertResourceListInfo) {
		return nil, false
	}
	return o.QuickInsertResourceListInfo, true
}

// HasQuickInsertResourceListInfo returns a boolean if a field has been set.
func (o *QuickInsertResources) HasQuickInsertResourceListInfo() bool {
	if o != nil && !IsNil(o.QuickInsertResourceListInfo) {
		return true
	}

	return false
}

// SetQuickInsertResourceListInfo gets a reference to the given []QuickInsertResourceListType and assigns it to the QuickInsertResourceListInfo field.
func (o *QuickInsertResources) SetQuickInsertResourceListInfo(v []QuickInsertResourceListType) {
	o.QuickInsertResourceListInfo = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *QuickInsertResources) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickInsertResources) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *QuickInsertResources) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *QuickInsertResources) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o QuickInsertResources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickInsertResources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuickInsertResourceListInfo) {
		toSerialize["quickInsertResourceListInfo"] = o.QuickInsertResourceListInfo
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableQuickInsertResources struct {
	value *QuickInsertResources
	isSet bool
}

func (v NullableQuickInsertResources) Get() *QuickInsertResources {
	return v.value
}

func (v *NullableQuickInsertResources) Set(val *QuickInsertResources) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickInsertResources) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickInsertResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickInsertResources(val *QuickInsertResources) *NullableQuickInsertResources {
	return &NullableQuickInsertResources{value: val, isSet: true}
}

func (v NullableQuickInsertResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickInsertResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


