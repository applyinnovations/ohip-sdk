/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CopyCateringPkgType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyCateringPkgType{}

// CopyCateringPkgType Criteria to copy catering packages
type CopyCateringPkgType struct {
	// Indicates wether to to continue upon getting error processing screen. If this is true, error processing screen won't be shown.
	Continue *bool `json:"continue,omitempty"`
	// Indicates wether to perform pre-cahnge or post-change snapshot of the copied events. By default, it is always considered as false and will provide post-change snapshot.
	CopyAsSnapshot *bool `json:"copyAsSnapshot,omitempty"`
	// Indicate weather to include Non Package resources, source status etc.
	CopyInstructions []CateringPackageCopyInstructionType `json:"copyInstructions,omitempty"`
	CopyStatusMode *CopyStatusModeType `json:"copyStatusMode,omitempty"`
	// Specifies a single date.
	CopyToDates []string `json:"copyToDates,omitempty"`
	// Hotel code where the package will be copied.
	HotelId *string `json:"hotelId,omitempty"`
	PackageId *UniqueIDType `json:"packageId,omitempty"`
	SourceBlockId *UniqueIDType `json:"sourceBlockId,omitempty"`
	TargetBlockId *UniqueIDType `json:"targetBlockId,omitempty"`
}

// NewCopyCateringPkgType instantiates a new CopyCateringPkgType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyCateringPkgType() *CopyCateringPkgType {
	this := CopyCateringPkgType{}
	return &this
}

// NewCopyCateringPkgTypeWithDefaults instantiates a new CopyCateringPkgType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyCateringPkgTypeWithDefaults() *CopyCateringPkgType {
	this := CopyCateringPkgType{}
	return &this
}

// GetContinue returns the Continue field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetContinue() bool {
	if o == nil || IsNil(o.Continue) {
		var ret bool
		return ret
	}
	return *o.Continue
}

// GetContinueOk returns a tuple with the Continue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetContinueOk() (*bool, bool) {
	if o == nil || IsNil(o.Continue) {
		return nil, false
	}
	return o.Continue, true
}

// HasContinue returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasContinue() bool {
	if o != nil && !IsNil(o.Continue) {
		return true
	}

	return false
}

// SetContinue gets a reference to the given bool and assigns it to the Continue field.
func (o *CopyCateringPkgType) SetContinue(v bool) {
	o.Continue = &v
}

// GetCopyAsSnapshot returns the CopyAsSnapshot field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetCopyAsSnapshot() bool {
	if o == nil || IsNil(o.CopyAsSnapshot) {
		var ret bool
		return ret
	}
	return *o.CopyAsSnapshot
}

// GetCopyAsSnapshotOk returns a tuple with the CopyAsSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetCopyAsSnapshotOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyAsSnapshot) {
		return nil, false
	}
	return o.CopyAsSnapshot, true
}

// HasCopyAsSnapshot returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasCopyAsSnapshot() bool {
	if o != nil && !IsNil(o.CopyAsSnapshot) {
		return true
	}

	return false
}

// SetCopyAsSnapshot gets a reference to the given bool and assigns it to the CopyAsSnapshot field.
func (o *CopyCateringPkgType) SetCopyAsSnapshot(v bool) {
	o.CopyAsSnapshot = &v
}

// GetCopyInstructions returns the CopyInstructions field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetCopyInstructions() []CateringPackageCopyInstructionType {
	if o == nil || IsNil(o.CopyInstructions) {
		var ret []CateringPackageCopyInstructionType
		return ret
	}
	return o.CopyInstructions
}

// GetCopyInstructionsOk returns a tuple with the CopyInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetCopyInstructionsOk() ([]CateringPackageCopyInstructionType, bool) {
	if o == nil || IsNil(o.CopyInstructions) {
		return nil, false
	}
	return o.CopyInstructions, true
}

// HasCopyInstructions returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasCopyInstructions() bool {
	if o != nil && !IsNil(o.CopyInstructions) {
		return true
	}

	return false
}

// SetCopyInstructions gets a reference to the given []CateringPackageCopyInstructionType and assigns it to the CopyInstructions field.
func (o *CopyCateringPkgType) SetCopyInstructions(v []CateringPackageCopyInstructionType) {
	o.CopyInstructions = v
}

// GetCopyStatusMode returns the CopyStatusMode field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetCopyStatusMode() CopyStatusModeType {
	if o == nil || IsNil(o.CopyStatusMode) {
		var ret CopyStatusModeType
		return ret
	}
	return *o.CopyStatusMode
}

// GetCopyStatusModeOk returns a tuple with the CopyStatusMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetCopyStatusModeOk() (*CopyStatusModeType, bool) {
	if o == nil || IsNil(o.CopyStatusMode) {
		return nil, false
	}
	return o.CopyStatusMode, true
}

// HasCopyStatusMode returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasCopyStatusMode() bool {
	if o != nil && !IsNil(o.CopyStatusMode) {
		return true
	}

	return false
}

// SetCopyStatusMode gets a reference to the given CopyStatusModeType and assigns it to the CopyStatusMode field.
func (o *CopyCateringPkgType) SetCopyStatusMode(v CopyStatusModeType) {
	o.CopyStatusMode = &v
}

// GetCopyToDates returns the CopyToDates field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetCopyToDates() []string {
	if o == nil || IsNil(o.CopyToDates) {
		var ret []string
		return ret
	}
	return o.CopyToDates
}

// GetCopyToDatesOk returns a tuple with the CopyToDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetCopyToDatesOk() ([]string, bool) {
	if o == nil || IsNil(o.CopyToDates) {
		return nil, false
	}
	return o.CopyToDates, true
}

// HasCopyToDates returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasCopyToDates() bool {
	if o != nil && !IsNil(o.CopyToDates) {
		return true
	}

	return false
}

// SetCopyToDates gets a reference to the given []string and assigns it to the CopyToDates field.
func (o *CopyCateringPkgType) SetCopyToDates(v []string) {
	o.CopyToDates = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyCateringPkgType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetPackageId() UniqueIDType {
	if o == nil || IsNil(o.PackageId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetPackageIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given UniqueIDType and assigns it to the PackageId field.
func (o *CopyCateringPkgType) SetPackageId(v UniqueIDType) {
	o.PackageId = &v
}

// GetSourceBlockId returns the SourceBlockId field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetSourceBlockId() UniqueIDType {
	if o == nil || IsNil(o.SourceBlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.SourceBlockId
}

// GetSourceBlockIdOk returns a tuple with the SourceBlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetSourceBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.SourceBlockId) {
		return nil, false
	}
	return o.SourceBlockId, true
}

// HasSourceBlockId returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasSourceBlockId() bool {
	if o != nil && !IsNil(o.SourceBlockId) {
		return true
	}

	return false
}

// SetSourceBlockId gets a reference to the given UniqueIDType and assigns it to the SourceBlockId field.
func (o *CopyCateringPkgType) SetSourceBlockId(v UniqueIDType) {
	o.SourceBlockId = &v
}

// GetTargetBlockId returns the TargetBlockId field value if set, zero value otherwise.
func (o *CopyCateringPkgType) GetTargetBlockId() UniqueIDType {
	if o == nil || IsNil(o.TargetBlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.TargetBlockId
}

// GetTargetBlockIdOk returns a tuple with the TargetBlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringPkgType) GetTargetBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.TargetBlockId) {
		return nil, false
	}
	return o.TargetBlockId, true
}

// HasTargetBlockId returns a boolean if a field has been set.
func (o *CopyCateringPkgType) HasTargetBlockId() bool {
	if o != nil && !IsNil(o.TargetBlockId) {
		return true
	}

	return false
}

// SetTargetBlockId gets a reference to the given UniqueIDType and assigns it to the TargetBlockId field.
func (o *CopyCateringPkgType) SetTargetBlockId(v UniqueIDType) {
	o.TargetBlockId = &v
}

func (o CopyCateringPkgType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyCateringPkgType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Continue) {
		toSerialize["continue"] = o.Continue
	}
	if !IsNil(o.CopyAsSnapshot) {
		toSerialize["copyAsSnapshot"] = o.CopyAsSnapshot
	}
	if !IsNil(o.CopyInstructions) {
		toSerialize["copyInstructions"] = o.CopyInstructions
	}
	if !IsNil(o.CopyStatusMode) {
		toSerialize["copyStatusMode"] = o.CopyStatusMode
	}
	if !IsNil(o.CopyToDates) {
		toSerialize["copyToDates"] = o.CopyToDates
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.PackageId) {
		toSerialize["packageId"] = o.PackageId
	}
	if !IsNil(o.SourceBlockId) {
		toSerialize["sourceBlockId"] = o.SourceBlockId
	}
	if !IsNil(o.TargetBlockId) {
		toSerialize["targetBlockId"] = o.TargetBlockId
	}
	return toSerialize, nil
}

type NullableCopyCateringPkgType struct {
	value *CopyCateringPkgType
	isSet bool
}

func (v NullableCopyCateringPkgType) Get() *CopyCateringPkgType {
	return v.value
}

func (v *NullableCopyCateringPkgType) Set(val *CopyCateringPkgType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyCateringPkgType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyCateringPkgType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyCateringPkgType(val *CopyCateringPkgType) *NullableCopyCateringPkgType {
	return &NullableCopyCateringPkgType{value: val, isSet: true}
}

func (v NullableCopyCateringPkgType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyCateringPkgType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


