/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CalendarEventInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarEventInfoType{}

// CalendarEventInfoType Contains Function Diary Events information.
type CalendarEventInfoType struct {
	// Number of event attendees.
	Attendees *int32 `json:"attendees,omitempty"`
	// Date the event was created.
	CreatedOn *string `json:"createdOn,omitempty"`
	EventBookingInfo *EventBookingInfoType `json:"eventBookingInfo,omitempty"`
	EventDisplay *EventDisplayType `json:"eventDisplay,omitempty"`
	// Name of event.
	EventName *string `json:"eventName,omitempty"`
	EventTimeSpan *DateTimeSpanType `json:"eventTimeSpan,omitempty"`
	// Type of event.
	EventType *string `json:"eventType,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Used to identify the source of the identifier (e.g., IATA, ABTA).
	IdContext *string `json:"idContext,omitempty"`
	// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
	Instance *string `json:"instance,omitempty"`
	// Flag which is set to true when this Calendar Event Info is simply a copy of an event occurring in a Combo Element of this Room.
	IsComboRoomEventRef *bool `json:"isComboRoomEventRef,omitempty"`
	MasterEventId *UniqueIDType `json:"masterEventId,omitempty"`
	// Evaluates total overbook events count for this event.
	OverbookEventsCount *int32 `json:"overbookEventsCount,omitempty"`
	// Evaluates total prospective events count for this event.
	ProspectiveEventsCount *int32 `json:"prospectiveEventsCount,omitempty"`
	// Setdown time in minutes.
	SetdownTime *int32 `json:"setdownTime,omitempty"`
	// Setup Code.
	SetupCode *string `json:"setupCode,omitempty"`
	// Setup Description.
	SetupDescription *string `json:"setupDescription,omitempty"`
	// Setup time in minutes.
	SetupTime *int32 `json:"setupTime,omitempty"`
	Space *CodeDescriptionType `json:"space,omitempty"`
	SpaceTimeSpan *TimeSpanType `json:"spaceTimeSpan,omitempty"`
	// A reference to the type of object defined by the UniqueID elementSpace. Refer to OpenTravel Code List Unique ID Type (UIT).
	Type *string `json:"type,omitempty"`
	// URL that identifies the location associated with the record identified by the UniqueID.
	Url *string `json:"url,omitempty"`
	// Evaluates total waitlist events count for this event.
	WaitListEventsCount *int32 `json:"waitListEventsCount,omitempty"`
}

// NewCalendarEventInfoType instantiates a new CalendarEventInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarEventInfoType() *CalendarEventInfoType {
	this := CalendarEventInfoType{}
	return &this
}

// NewCalendarEventInfoTypeWithDefaults instantiates a new CalendarEventInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarEventInfoTypeWithDefaults() *CalendarEventInfoType {
	this := CalendarEventInfoType{}
	return &this
}

// GetAttendees returns the Attendees field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetAttendees() int32 {
	if o == nil || IsNil(o.Attendees) {
		var ret int32
		return ret
	}
	return *o.Attendees
}

// GetAttendeesOk returns a tuple with the Attendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetAttendeesOk() (*int32, bool) {
	if o == nil || IsNil(o.Attendees) {
		return nil, false
	}
	return o.Attendees, true
}

// HasAttendees returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasAttendees() bool {
	if o != nil && !IsNil(o.Attendees) {
		return true
	}

	return false
}

// SetAttendees gets a reference to the given int32 and assigns it to the Attendees field.
func (o *CalendarEventInfoType) SetAttendees(v int32) {
	o.Attendees = &v
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetCreatedOn() string {
	if o == nil || IsNil(o.CreatedOn) {
		var ret string
		return ret
	}
	return *o.CreatedOn
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetCreatedOnOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedOn) {
		return nil, false
	}
	return o.CreatedOn, true
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasCreatedOn() bool {
	if o != nil && !IsNil(o.CreatedOn) {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given string and assigns it to the CreatedOn field.
func (o *CalendarEventInfoType) SetCreatedOn(v string) {
	o.CreatedOn = &v
}

// GetEventBookingInfo returns the EventBookingInfo field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetEventBookingInfo() EventBookingInfoType {
	if o == nil || IsNil(o.EventBookingInfo) {
		var ret EventBookingInfoType
		return ret
	}
	return *o.EventBookingInfo
}

// GetEventBookingInfoOk returns a tuple with the EventBookingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetEventBookingInfoOk() (*EventBookingInfoType, bool) {
	if o == nil || IsNil(o.EventBookingInfo) {
		return nil, false
	}
	return o.EventBookingInfo, true
}

// HasEventBookingInfo returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasEventBookingInfo() bool {
	if o != nil && !IsNil(o.EventBookingInfo) {
		return true
	}

	return false
}

// SetEventBookingInfo gets a reference to the given EventBookingInfoType and assigns it to the EventBookingInfo field.
func (o *CalendarEventInfoType) SetEventBookingInfo(v EventBookingInfoType) {
	o.EventBookingInfo = &v
}

// GetEventDisplay returns the EventDisplay field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetEventDisplay() EventDisplayType {
	if o == nil || IsNil(o.EventDisplay) {
		var ret EventDisplayType
		return ret
	}
	return *o.EventDisplay
}

// GetEventDisplayOk returns a tuple with the EventDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetEventDisplayOk() (*EventDisplayType, bool) {
	if o == nil || IsNil(o.EventDisplay) {
		return nil, false
	}
	return o.EventDisplay, true
}

// HasEventDisplay returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasEventDisplay() bool {
	if o != nil && !IsNil(o.EventDisplay) {
		return true
	}

	return false
}

// SetEventDisplay gets a reference to the given EventDisplayType and assigns it to the EventDisplay field.
func (o *CalendarEventInfoType) SetEventDisplay(v EventDisplayType) {
	o.EventDisplay = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *CalendarEventInfoType) SetEventName(v string) {
	o.EventName = &v
}

// GetEventTimeSpan returns the EventTimeSpan field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetEventTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.EventTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.EventTimeSpan
}

// GetEventTimeSpanOk returns a tuple with the EventTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetEventTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.EventTimeSpan) {
		return nil, false
	}
	return o.EventTimeSpan, true
}

// HasEventTimeSpan returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasEventTimeSpan() bool {
	if o != nil && !IsNil(o.EventTimeSpan) {
		return true
	}

	return false
}

// SetEventTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the EventTimeSpan field.
func (o *CalendarEventInfoType) SetEventTimeSpan(v DateTimeSpanType) {
	o.EventTimeSpan = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *CalendarEventInfoType) SetEventType(v string) {
	o.EventType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CalendarEventInfoType) SetId(v string) {
	o.Id = &v
}

// GetIdContext returns the IdContext field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetIdContext() string {
	if o == nil || IsNil(o.IdContext) {
		var ret string
		return ret
	}
	return *o.IdContext
}

// GetIdContextOk returns a tuple with the IdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetIdContextOk() (*string, bool) {
	if o == nil || IsNil(o.IdContext) {
		return nil, false
	}
	return o.IdContext, true
}

// HasIdContext returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasIdContext() bool {
	if o != nil && !IsNil(o.IdContext) {
		return true
	}

	return false
}

// SetIdContext gets a reference to the given string and assigns it to the IdContext field.
func (o *CalendarEventInfoType) SetIdContext(v string) {
	o.IdContext = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *CalendarEventInfoType) SetInstance(v string) {
	o.Instance = &v
}

// GetIsComboRoomEventRef returns the IsComboRoomEventRef field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetIsComboRoomEventRef() bool {
	if o == nil || IsNil(o.IsComboRoomEventRef) {
		var ret bool
		return ret
	}
	return *o.IsComboRoomEventRef
}

// GetIsComboRoomEventRefOk returns a tuple with the IsComboRoomEventRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetIsComboRoomEventRefOk() (*bool, bool) {
	if o == nil || IsNil(o.IsComboRoomEventRef) {
		return nil, false
	}
	return o.IsComboRoomEventRef, true
}

// HasIsComboRoomEventRef returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasIsComboRoomEventRef() bool {
	if o != nil && !IsNil(o.IsComboRoomEventRef) {
		return true
	}

	return false
}

// SetIsComboRoomEventRef gets a reference to the given bool and assigns it to the IsComboRoomEventRef field.
func (o *CalendarEventInfoType) SetIsComboRoomEventRef(v bool) {
	o.IsComboRoomEventRef = &v
}

// GetMasterEventId returns the MasterEventId field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetMasterEventId() UniqueIDType {
	if o == nil || IsNil(o.MasterEventId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MasterEventId
}

// GetMasterEventIdOk returns a tuple with the MasterEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetMasterEventIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MasterEventId) {
		return nil, false
	}
	return o.MasterEventId, true
}

// HasMasterEventId returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasMasterEventId() bool {
	if o != nil && !IsNil(o.MasterEventId) {
		return true
	}

	return false
}

// SetMasterEventId gets a reference to the given UniqueIDType and assigns it to the MasterEventId field.
func (o *CalendarEventInfoType) SetMasterEventId(v UniqueIDType) {
	o.MasterEventId = &v
}

// GetOverbookEventsCount returns the OverbookEventsCount field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetOverbookEventsCount() int32 {
	if o == nil || IsNil(o.OverbookEventsCount) {
		var ret int32
		return ret
	}
	return *o.OverbookEventsCount
}

// GetOverbookEventsCountOk returns a tuple with the OverbookEventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetOverbookEventsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OverbookEventsCount) {
		return nil, false
	}
	return o.OverbookEventsCount, true
}

// HasOverbookEventsCount returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasOverbookEventsCount() bool {
	if o != nil && !IsNil(o.OverbookEventsCount) {
		return true
	}

	return false
}

// SetOverbookEventsCount gets a reference to the given int32 and assigns it to the OverbookEventsCount field.
func (o *CalendarEventInfoType) SetOverbookEventsCount(v int32) {
	o.OverbookEventsCount = &v
}

// GetProspectiveEventsCount returns the ProspectiveEventsCount field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetProspectiveEventsCount() int32 {
	if o == nil || IsNil(o.ProspectiveEventsCount) {
		var ret int32
		return ret
	}
	return *o.ProspectiveEventsCount
}

// GetProspectiveEventsCountOk returns a tuple with the ProspectiveEventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetProspectiveEventsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ProspectiveEventsCount) {
		return nil, false
	}
	return o.ProspectiveEventsCount, true
}

// HasProspectiveEventsCount returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasProspectiveEventsCount() bool {
	if o != nil && !IsNil(o.ProspectiveEventsCount) {
		return true
	}

	return false
}

// SetProspectiveEventsCount gets a reference to the given int32 and assigns it to the ProspectiveEventsCount field.
func (o *CalendarEventInfoType) SetProspectiveEventsCount(v int32) {
	o.ProspectiveEventsCount = &v
}

// GetSetdownTime returns the SetdownTime field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetSetdownTime() int32 {
	if o == nil || IsNil(o.SetdownTime) {
		var ret int32
		return ret
	}
	return *o.SetdownTime
}

// GetSetdownTimeOk returns a tuple with the SetdownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetSetdownTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.SetdownTime) {
		return nil, false
	}
	return o.SetdownTime, true
}

// HasSetdownTime returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasSetdownTime() bool {
	if o != nil && !IsNil(o.SetdownTime) {
		return true
	}

	return false
}

// SetSetdownTime gets a reference to the given int32 and assigns it to the SetdownTime field.
func (o *CalendarEventInfoType) SetSetdownTime(v int32) {
	o.SetdownTime = &v
}

// GetSetupCode returns the SetupCode field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetSetupCode() string {
	if o == nil || IsNil(o.SetupCode) {
		var ret string
		return ret
	}
	return *o.SetupCode
}

// GetSetupCodeOk returns a tuple with the SetupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetSetupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SetupCode) {
		return nil, false
	}
	return o.SetupCode, true
}

// HasSetupCode returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasSetupCode() bool {
	if o != nil && !IsNil(o.SetupCode) {
		return true
	}

	return false
}

// SetSetupCode gets a reference to the given string and assigns it to the SetupCode field.
func (o *CalendarEventInfoType) SetSetupCode(v string) {
	o.SetupCode = &v
}

// GetSetupDescription returns the SetupDescription field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetSetupDescription() string {
	if o == nil || IsNil(o.SetupDescription) {
		var ret string
		return ret
	}
	return *o.SetupDescription
}

// GetSetupDescriptionOk returns a tuple with the SetupDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetSetupDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SetupDescription) {
		return nil, false
	}
	return o.SetupDescription, true
}

// HasSetupDescription returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasSetupDescription() bool {
	if o != nil && !IsNil(o.SetupDescription) {
		return true
	}

	return false
}

// SetSetupDescription gets a reference to the given string and assigns it to the SetupDescription field.
func (o *CalendarEventInfoType) SetSetupDescription(v string) {
	o.SetupDescription = &v
}

// GetSetupTime returns the SetupTime field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetSetupTime() int32 {
	if o == nil || IsNil(o.SetupTime) {
		var ret int32
		return ret
	}
	return *o.SetupTime
}

// GetSetupTimeOk returns a tuple with the SetupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetSetupTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.SetupTime) {
		return nil, false
	}
	return o.SetupTime, true
}

// HasSetupTime returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasSetupTime() bool {
	if o != nil && !IsNil(o.SetupTime) {
		return true
	}

	return false
}

// SetSetupTime gets a reference to the given int32 and assigns it to the SetupTime field.
func (o *CalendarEventInfoType) SetSetupTime(v int32) {
	o.SetupTime = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetSpace() CodeDescriptionType {
	if o == nil || IsNil(o.Space) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetSpaceOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given CodeDescriptionType and assigns it to the Space field.
func (o *CalendarEventInfoType) SetSpace(v CodeDescriptionType) {
	o.Space = &v
}

// GetSpaceTimeSpan returns the SpaceTimeSpan field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetSpaceTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.SpaceTimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.SpaceTimeSpan
}

// GetSpaceTimeSpanOk returns a tuple with the SpaceTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetSpaceTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.SpaceTimeSpan) {
		return nil, false
	}
	return o.SpaceTimeSpan, true
}

// HasSpaceTimeSpan returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasSpaceTimeSpan() bool {
	if o != nil && !IsNil(o.SpaceTimeSpan) {
		return true
	}

	return false
}

// SetSpaceTimeSpan gets a reference to the given TimeSpanType and assigns it to the SpaceTimeSpan field.
func (o *CalendarEventInfoType) SetSpaceTimeSpan(v TimeSpanType) {
	o.SpaceTimeSpan = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CalendarEventInfoType) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CalendarEventInfoType) SetUrl(v string) {
	o.Url = &v
}

// GetWaitListEventsCount returns the WaitListEventsCount field value if set, zero value otherwise.
func (o *CalendarEventInfoType) GetWaitListEventsCount() int32 {
	if o == nil || IsNil(o.WaitListEventsCount) {
		var ret int32
		return ret
	}
	return *o.WaitListEventsCount
}

// GetWaitListEventsCountOk returns a tuple with the WaitListEventsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarEventInfoType) GetWaitListEventsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WaitListEventsCount) {
		return nil, false
	}
	return o.WaitListEventsCount, true
}

// HasWaitListEventsCount returns a boolean if a field has been set.
func (o *CalendarEventInfoType) HasWaitListEventsCount() bool {
	if o != nil && !IsNil(o.WaitListEventsCount) {
		return true
	}

	return false
}

// SetWaitListEventsCount gets a reference to the given int32 and assigns it to the WaitListEventsCount field.
func (o *CalendarEventInfoType) SetWaitListEventsCount(v int32) {
	o.WaitListEventsCount = &v
}

func (o CalendarEventInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarEventInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attendees) {
		toSerialize["attendees"] = o.Attendees
	}
	if !IsNil(o.CreatedOn) {
		toSerialize["createdOn"] = o.CreatedOn
	}
	if !IsNil(o.EventBookingInfo) {
		toSerialize["eventBookingInfo"] = o.EventBookingInfo
	}
	if !IsNil(o.EventDisplay) {
		toSerialize["eventDisplay"] = o.EventDisplay
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventTimeSpan) {
		toSerialize["eventTimeSpan"] = o.EventTimeSpan
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdContext) {
		toSerialize["idContext"] = o.IdContext
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.IsComboRoomEventRef) {
		toSerialize["isComboRoomEventRef"] = o.IsComboRoomEventRef
	}
	if !IsNil(o.MasterEventId) {
		toSerialize["masterEventId"] = o.MasterEventId
	}
	if !IsNil(o.OverbookEventsCount) {
		toSerialize["overbookEventsCount"] = o.OverbookEventsCount
	}
	if !IsNil(o.ProspectiveEventsCount) {
		toSerialize["prospectiveEventsCount"] = o.ProspectiveEventsCount
	}
	if !IsNil(o.SetdownTime) {
		toSerialize["setdownTime"] = o.SetdownTime
	}
	if !IsNil(o.SetupCode) {
		toSerialize["setupCode"] = o.SetupCode
	}
	if !IsNil(o.SetupDescription) {
		toSerialize["setupDescription"] = o.SetupDescription
	}
	if !IsNil(o.SetupTime) {
		toSerialize["setupTime"] = o.SetupTime
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	if !IsNil(o.SpaceTimeSpan) {
		toSerialize["spaceTimeSpan"] = o.SpaceTimeSpan
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.WaitListEventsCount) {
		toSerialize["waitListEventsCount"] = o.WaitListEventsCount
	}
	return toSerialize, nil
}

type NullableCalendarEventInfoType struct {
	value *CalendarEventInfoType
	isSet bool
}

func (v NullableCalendarEventInfoType) Get() *CalendarEventInfoType {
	return v.value
}

func (v *NullableCalendarEventInfoType) Set(val *CalendarEventInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarEventInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarEventInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarEventInfoType(val *CalendarEventInfoType) *NullableCalendarEventInfoType {
	return &NullableCalendarEventInfoType{value: val, isSet: true}
}

func (v NullableCalendarEventInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarEventInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


