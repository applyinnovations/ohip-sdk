/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the QuickInsertResourceListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuickInsertResourceListType{}

// QuickInsertResourceListType Collection of quick insert resource(s).
type QuickInsertResourceListType struct {
	EventId *EventId `json:"eventId,omitempty"`
	// Hotel code where menu(s) or item(s) or template(s) will be added.
	HotelId *string `json:"hotelId,omitempty"`
	// Quick insert resource type.
	QuickInsertResourceInfo []QuickInsertResourceType `json:"quickInsertResourceInfo,omitempty"`
}

// NewQuickInsertResourceListType instantiates a new QuickInsertResourceListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuickInsertResourceListType() *QuickInsertResourceListType {
	this := QuickInsertResourceListType{}
	return &this
}

// NewQuickInsertResourceListTypeWithDefaults instantiates a new QuickInsertResourceListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuickInsertResourceListTypeWithDefaults() *QuickInsertResourceListType {
	this := QuickInsertResourceListType{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *QuickInsertResourceListType) GetEventId() EventId {
	if o == nil || IsNil(o.EventId) {
		var ret EventId
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickInsertResourceListType) GetEventIdOk() (*EventId, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *QuickInsertResourceListType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given EventId and assigns it to the EventId field.
func (o *QuickInsertResourceListType) SetEventId(v EventId) {
	o.EventId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *QuickInsertResourceListType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickInsertResourceListType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *QuickInsertResourceListType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *QuickInsertResourceListType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetQuickInsertResourceInfo returns the QuickInsertResourceInfo field value if set, zero value otherwise.
func (o *QuickInsertResourceListType) GetQuickInsertResourceInfo() []QuickInsertResourceType {
	if o == nil || IsNil(o.QuickInsertResourceInfo) {
		var ret []QuickInsertResourceType
		return ret
	}
	return o.QuickInsertResourceInfo
}

// GetQuickInsertResourceInfoOk returns a tuple with the QuickInsertResourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuickInsertResourceListType) GetQuickInsertResourceInfoOk() ([]QuickInsertResourceType, bool) {
	if o == nil || IsNil(o.QuickInsertResourceInfo) {
		return nil, false
	}
	return o.QuickInsertResourceInfo, true
}

// HasQuickInsertResourceInfo returns a boolean if a field has been set.
func (o *QuickInsertResourceListType) HasQuickInsertResourceInfo() bool {
	if o != nil && !IsNil(o.QuickInsertResourceInfo) {
		return true
	}

	return false
}

// SetQuickInsertResourceInfo gets a reference to the given []QuickInsertResourceType and assigns it to the QuickInsertResourceInfo field.
func (o *QuickInsertResourceListType) SetQuickInsertResourceInfo(v []QuickInsertResourceType) {
	o.QuickInsertResourceInfo = v
}

func (o QuickInsertResourceListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuickInsertResourceListType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.QuickInsertResourceInfo) {
		toSerialize["quickInsertResourceInfo"] = o.QuickInsertResourceInfo
	}
	return toSerialize, nil
}

type NullableQuickInsertResourceListType struct {
	value *QuickInsertResourceListType
	isSet bool
}

func (v NullableQuickInsertResourceListType) Get() *QuickInsertResourceListType {
	return v.value
}

func (v *NullableQuickInsertResourceListType) Set(val *QuickInsertResourceListType) {
	v.value = val
	v.isSet = true
}

func (v NullableQuickInsertResourceListType) IsSet() bool {
	return v.isSet
}

func (v *NullableQuickInsertResourceListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuickInsertResourceListType(val *QuickInsertResourceListType) *NullableQuickInsertResourceListType {
	return &NullableQuickInsertResourceListType{value: val, isSet: true}
}

func (v NullableQuickInsertResourceListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuickInsertResourceListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


