/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the DateTimeRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateTimeRangeType{}

// DateTimeRangeType Date Range with Start and End dates.
type DateTimeRangeType struct {
	// The ending value of the time span.
	EventEndDate *string `json:"eventEndDate,omitempty"`
	// The starting value of the time span.
	EventStartDate *string `json:"eventStartDate,omitempty"`
}

// NewDateTimeRangeType instantiates a new DateTimeRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeRangeType() *DateTimeRangeType {
	this := DateTimeRangeType{}
	return &this
}

// NewDateTimeRangeTypeWithDefaults instantiates a new DateTimeRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeRangeTypeWithDefaults() *DateTimeRangeType {
	this := DateTimeRangeType{}
	return &this
}

// GetEventEndDate returns the EventEndDate field value if set, zero value otherwise.
func (o *DateTimeRangeType) GetEventEndDate() string {
	if o == nil || IsNil(o.EventEndDate) {
		var ret string
		return ret
	}
	return *o.EventEndDate
}

// GetEventEndDateOk returns a tuple with the EventEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeRangeType) GetEventEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventEndDate) {
		return nil, false
	}
	return o.EventEndDate, true
}

// HasEventEndDate returns a boolean if a field has been set.
func (o *DateTimeRangeType) HasEventEndDate() bool {
	if o != nil && !IsNil(o.EventEndDate) {
		return true
	}

	return false
}

// SetEventEndDate gets a reference to the given string and assigns it to the EventEndDate field.
func (o *DateTimeRangeType) SetEventEndDate(v string) {
	o.EventEndDate = &v
}

// GetEventStartDate returns the EventStartDate field value if set, zero value otherwise.
func (o *DateTimeRangeType) GetEventStartDate() string {
	if o == nil || IsNil(o.EventStartDate) {
		var ret string
		return ret
	}
	return *o.EventStartDate
}

// GetEventStartDateOk returns a tuple with the EventStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeRangeType) GetEventStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventStartDate) {
		return nil, false
	}
	return o.EventStartDate, true
}

// HasEventStartDate returns a boolean if a field has been set.
func (o *DateTimeRangeType) HasEventStartDate() bool {
	if o != nil && !IsNil(o.EventStartDate) {
		return true
	}

	return false
}

// SetEventStartDate gets a reference to the given string and assigns it to the EventStartDate field.
func (o *DateTimeRangeType) SetEventStartDate(v string) {
	o.EventStartDate = &v
}

func (o DateTimeRangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateTimeRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventEndDate) {
		toSerialize["eventEndDate"] = o.EventEndDate
	}
	if !IsNil(o.EventStartDate) {
		toSerialize["eventStartDate"] = o.EventStartDate
	}
	return toSerialize, nil
}

type NullableDateTimeRangeType struct {
	value *DateTimeRangeType
	isSet bool
}

func (v NullableDateTimeRangeType) Get() *DateTimeRangeType {
	return v.value
}

func (v *NullableDateTimeRangeType) Set(val *DateTimeRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeRangeType(val *DateTimeRangeType) *NullableDateTimeRangeType {
	return &NullableDateTimeRangeType{value: val, isSet: true}
}

func (v NullableDateTimeRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


