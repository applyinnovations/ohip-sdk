/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the FixedChargeScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedChargeScheduleType{}

// FixedChargeScheduleType Holds schedule of fixed charge.
type FixedChargeScheduleType struct {
	// The starting value of the date range.
	EventStartDate *string `json:"eventStartDate,omitempty"`
	// The ending value of the date range.
	EventEndDate *string `json:"eventEndDate,omitempty"`
	Frequency *FixedChargeFrequencyType `json:"frequency,omitempty"`
	// Day of when to execute fixed charge. Applicable when frequency is Daily or Weekly.
	DayToExecute *string `json:"dayToExecute,omitempty"`
	// Date of when to execute yearly fixed charge. Applicable when frequency is Yearly.
	DateToExecute *string `json:"dateToExecute,omitempty"`
}

// NewFixedChargeScheduleType instantiates a new FixedChargeScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedChargeScheduleType() *FixedChargeScheduleType {
	this := FixedChargeScheduleType{}
	return &this
}

// NewFixedChargeScheduleTypeWithDefaults instantiates a new FixedChargeScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedChargeScheduleTypeWithDefaults() *FixedChargeScheduleType {
	this := FixedChargeScheduleType{}
	return &this
}

// GetEventStartDate returns the EventStartDate field value if set, zero value otherwise.
func (o *FixedChargeScheduleType) GetEventStartDate() string {
	if o == nil || IsNil(o.EventStartDate) {
		var ret string
		return ret
	}
	return *o.EventStartDate
}

// GetEventStartDateOk returns a tuple with the EventStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedChargeScheduleType) GetEventStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventStartDate) {
		return nil, false
	}
	return o.EventStartDate, true
}

// HasEventStartDate returns a boolean if a field has been set.
func (o *FixedChargeScheduleType) HasEventStartDate() bool {
	if o != nil && !IsNil(o.EventStartDate) {
		return true
	}

	return false
}

// SetEventStartDate gets a reference to the given string and assigns it to the EventStartDate field.
func (o *FixedChargeScheduleType) SetEventStartDate(v string) {
	o.EventStartDate = &v
}

// GetEventEndDate returns the EventEndDate field value if set, zero value otherwise.
func (o *FixedChargeScheduleType) GetEventEndDate() string {
	if o == nil || IsNil(o.EventEndDate) {
		var ret string
		return ret
	}
	return *o.EventEndDate
}

// GetEventEndDateOk returns a tuple with the EventEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedChargeScheduleType) GetEventEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventEndDate) {
		return nil, false
	}
	return o.EventEndDate, true
}

// HasEventEndDate returns a boolean if a field has been set.
func (o *FixedChargeScheduleType) HasEventEndDate() bool {
	if o != nil && !IsNil(o.EventEndDate) {
		return true
	}

	return false
}

// SetEventEndDate gets a reference to the given string and assigns it to the EventEndDate field.
func (o *FixedChargeScheduleType) SetEventEndDate(v string) {
	o.EventEndDate = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *FixedChargeScheduleType) GetFrequency() FixedChargeFrequencyType {
	if o == nil || IsNil(o.Frequency) {
		var ret FixedChargeFrequencyType
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedChargeScheduleType) GetFrequencyOk() (*FixedChargeFrequencyType, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *FixedChargeScheduleType) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given FixedChargeFrequencyType and assigns it to the Frequency field.
func (o *FixedChargeScheduleType) SetFrequency(v FixedChargeFrequencyType) {
	o.Frequency = &v
}

// GetDayToExecute returns the DayToExecute field value if set, zero value otherwise.
func (o *FixedChargeScheduleType) GetDayToExecute() string {
	if o == nil || IsNil(o.DayToExecute) {
		var ret string
		return ret
	}
	return *o.DayToExecute
}

// GetDayToExecuteOk returns a tuple with the DayToExecute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedChargeScheduleType) GetDayToExecuteOk() (*string, bool) {
	if o == nil || IsNil(o.DayToExecute) {
		return nil, false
	}
	return o.DayToExecute, true
}

// HasDayToExecute returns a boolean if a field has been set.
func (o *FixedChargeScheduleType) HasDayToExecute() bool {
	if o != nil && !IsNil(o.DayToExecute) {
		return true
	}

	return false
}

// SetDayToExecute gets a reference to the given string and assigns it to the DayToExecute field.
func (o *FixedChargeScheduleType) SetDayToExecute(v string) {
	o.DayToExecute = &v
}

// GetDateToExecute returns the DateToExecute field value if set, zero value otherwise.
func (o *FixedChargeScheduleType) GetDateToExecute() string {
	if o == nil || IsNil(o.DateToExecute) {
		var ret string
		return ret
	}
	return *o.DateToExecute
}

// GetDateToExecuteOk returns a tuple with the DateToExecute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedChargeScheduleType) GetDateToExecuteOk() (*string, bool) {
	if o == nil || IsNil(o.DateToExecute) {
		return nil, false
	}
	return o.DateToExecute, true
}

// HasDateToExecute returns a boolean if a field has been set.
func (o *FixedChargeScheduleType) HasDateToExecute() bool {
	if o != nil && !IsNil(o.DateToExecute) {
		return true
	}

	return false
}

// SetDateToExecute gets a reference to the given string and assigns it to the DateToExecute field.
func (o *FixedChargeScheduleType) SetDateToExecute(v string) {
	o.DateToExecute = &v
}

func (o FixedChargeScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedChargeScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventStartDate) {
		toSerialize["eventStartDate"] = o.EventStartDate
	}
	if !IsNil(o.EventEndDate) {
		toSerialize["eventEndDate"] = o.EventEndDate
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.DayToExecute) {
		toSerialize["dayToExecute"] = o.DayToExecute
	}
	if !IsNil(o.DateToExecute) {
		toSerialize["dateToExecute"] = o.DateToExecute
	}
	return toSerialize, nil
}

type NullableFixedChargeScheduleType struct {
	value *FixedChargeScheduleType
	isSet bool
}

func (v NullableFixedChargeScheduleType) Get() *FixedChargeScheduleType {
	return v.value
}

func (v *NullableFixedChargeScheduleType) Set(val *FixedChargeScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedChargeScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedChargeScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedChargeScheduleType(val *FixedChargeScheduleType) *NullableFixedChargeScheduleType {
	return &NullableFixedChargeScheduleType{value: val, isSet: true}
}

func (v NullableFixedChargeScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedChargeScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


