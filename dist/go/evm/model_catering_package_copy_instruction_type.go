/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
	"fmt"
)

// CateringPackageCopyInstructionType Include Source status.
type CateringPackageCopyInstructionType string

// List of cateringPackageCopyInstructionType
const (
	CATERINGPACKAGECOPYINSTRUCTIONTYPE_NON_PACKAGE_RESOURCES CateringPackageCopyInstructionType = "NonPackageResources"
	CATERINGPACKAGECOPYINSTRUCTIONTYPE_RESOURCE_NOTES CateringPackageCopyInstructionType = "ResourceNotes"
	CATERINGPACKAGECOPYINSTRUCTIONTYPE_EVENT_NOTES CateringPackageCopyInstructionType = "EventNotes"
	CATERINGPACKAGECOPYINSTRUCTIONTYPE_FORECAST_FIGURES CateringPackageCopyInstructionType = "ForecastFigures"
	CATERINGPACKAGECOPYINSTRUCTIONTYPE_SOURCE_STATUS CateringPackageCopyInstructionType = "SourceStatus"
)

// All allowed values of CateringPackageCopyInstructionType enum
var AllowedCateringPackageCopyInstructionTypeEnumValues = []CateringPackageCopyInstructionType{
	"NonPackageResources",
	"ResourceNotes",
	"EventNotes",
	"ForecastFigures",
	"SourceStatus",
}

func (v *CateringPackageCopyInstructionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CateringPackageCopyInstructionType(value)
	for _, existing := range AllowedCateringPackageCopyInstructionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CateringPackageCopyInstructionType", value)
}

// NewCateringPackageCopyInstructionTypeFromValue returns a pointer to a valid CateringPackageCopyInstructionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCateringPackageCopyInstructionTypeFromValue(v string) (*CateringPackageCopyInstructionType, error) {
	ev := CateringPackageCopyInstructionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CateringPackageCopyInstructionType: valid values are %v", v, AllowedCateringPackageCopyInstructionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CateringPackageCopyInstructionType) IsValid() bool {
	for _, existing := range AllowedCateringPackageCopyInstructionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cateringPackageCopyInstructionType value
func (v CateringPackageCopyInstructionType) Ptr() *CateringPackageCopyInstructionType {
	return &v
}

type NullableCateringPackageCopyInstructionType struct {
	value *CateringPackageCopyInstructionType
	isSet bool
}

func (v NullableCateringPackageCopyInstructionType) Get() *CateringPackageCopyInstructionType {
	return v.value
}

func (v *NullableCateringPackageCopyInstructionType) Set(val *CateringPackageCopyInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringPackageCopyInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringPackageCopyInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringPackageCopyInstructionType(val *CateringPackageCopyInstructionType) *NullableCateringPackageCopyInstructionType {
	return &NullableCateringPackageCopyInstructionType{value: val, isSet: true}
}

func (v NullableCateringPackageCopyInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringPackageCopyInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

