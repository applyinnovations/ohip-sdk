/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the BookingStatusHistoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookingStatusHistoryType{}

// BookingStatusHistoryType struct for BookingStatusHistoryType
type BookingStatusHistoryType struct {
	BookingStatus *CodeDescriptionType `json:"bookingStatus,omitempty"`
	// User who modified the status.
	ModifierId *string `json:"modifierId,omitempty"`
	// Date and time of the status change.
	ModifyDateTime *string `json:"modifyDateTime,omitempty"`
	// Number indicating the sequence of status change.
	Sequence *int32 `json:"sequence,omitempty"`
}

// NewBookingStatusHistoryType instantiates a new BookingStatusHistoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookingStatusHistoryType() *BookingStatusHistoryType {
	this := BookingStatusHistoryType{}
	return &this
}

// NewBookingStatusHistoryTypeWithDefaults instantiates a new BookingStatusHistoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookingStatusHistoryTypeWithDefaults() *BookingStatusHistoryType {
	this := BookingStatusHistoryType{}
	return &this
}

// GetBookingStatus returns the BookingStatus field value if set, zero value otherwise.
func (o *BookingStatusHistoryType) GetBookingStatus() CodeDescriptionType {
	if o == nil || IsNil(o.BookingStatus) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.BookingStatus
}

// GetBookingStatusOk returns a tuple with the BookingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookingStatusHistoryType) GetBookingStatusOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.BookingStatus) {
		return nil, false
	}
	return o.BookingStatus, true
}

// HasBookingStatus returns a boolean if a field has been set.
func (o *BookingStatusHistoryType) HasBookingStatus() bool {
	if o != nil && !IsNil(o.BookingStatus) {
		return true
	}

	return false
}

// SetBookingStatus gets a reference to the given CodeDescriptionType and assigns it to the BookingStatus field.
func (o *BookingStatusHistoryType) SetBookingStatus(v CodeDescriptionType) {
	o.BookingStatus = &v
}

// GetModifierId returns the ModifierId field value if set, zero value otherwise.
func (o *BookingStatusHistoryType) GetModifierId() string {
	if o == nil || IsNil(o.ModifierId) {
		var ret string
		return ret
	}
	return *o.ModifierId
}

// GetModifierIdOk returns a tuple with the ModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookingStatusHistoryType) GetModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.ModifierId) {
		return nil, false
	}
	return o.ModifierId, true
}

// HasModifierId returns a boolean if a field has been set.
func (o *BookingStatusHistoryType) HasModifierId() bool {
	if o != nil && !IsNil(o.ModifierId) {
		return true
	}

	return false
}

// SetModifierId gets a reference to the given string and assigns it to the ModifierId field.
func (o *BookingStatusHistoryType) SetModifierId(v string) {
	o.ModifierId = &v
}

// GetModifyDateTime returns the ModifyDateTime field value if set, zero value otherwise.
func (o *BookingStatusHistoryType) GetModifyDateTime() string {
	if o == nil || IsNil(o.ModifyDateTime) {
		var ret string
		return ret
	}
	return *o.ModifyDateTime
}

// GetModifyDateTimeOk returns a tuple with the ModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookingStatusHistoryType) GetModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ModifyDateTime) {
		return nil, false
	}
	return o.ModifyDateTime, true
}

// HasModifyDateTime returns a boolean if a field has been set.
func (o *BookingStatusHistoryType) HasModifyDateTime() bool {
	if o != nil && !IsNil(o.ModifyDateTime) {
		return true
	}

	return false
}

// SetModifyDateTime gets a reference to the given string and assigns it to the ModifyDateTime field.
func (o *BookingStatusHistoryType) SetModifyDateTime(v string) {
	o.ModifyDateTime = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *BookingStatusHistoryType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookingStatusHistoryType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *BookingStatusHistoryType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *BookingStatusHistoryType) SetSequence(v int32) {
	o.Sequence = &v
}

func (o BookingStatusHistoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookingStatusHistoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BookingStatus) {
		toSerialize["bookingStatus"] = o.BookingStatus
	}
	if !IsNil(o.ModifierId) {
		toSerialize["modifierId"] = o.ModifierId
	}
	if !IsNil(o.ModifyDateTime) {
		toSerialize["modifyDateTime"] = o.ModifyDateTime
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableBookingStatusHistoryType struct {
	value *BookingStatusHistoryType
	isSet bool
}

func (v NullableBookingStatusHistoryType) Get() *BookingStatusHistoryType {
	return v.value
}

func (v *NullableBookingStatusHistoryType) Set(val *BookingStatusHistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableBookingStatusHistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableBookingStatusHistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookingStatusHistoryType(val *BookingStatusHistoryType) *NullableBookingStatusHistoryType {
	return &NullableBookingStatusHistoryType{value: val, isSet: true}
}

func (v NullableBookingStatusHistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookingStatusHistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


