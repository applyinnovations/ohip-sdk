/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CateringEventPostingsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringEventPostingsType{}

// CateringEventPostingsType Collection of catering event postings.
type CateringEventPostingsType struct {
	// Pertain catering event's posting information.
	CateringEventPosting []CateringEventPostingType `json:"cateringEventPosting,omitempty"`
	EventId *UniqueIDType `json:"eventId,omitempty"`
}

// NewCateringEventPostingsType instantiates a new CateringEventPostingsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringEventPostingsType() *CateringEventPostingsType {
	this := CateringEventPostingsType{}
	return &this
}

// NewCateringEventPostingsTypeWithDefaults instantiates a new CateringEventPostingsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringEventPostingsTypeWithDefaults() *CateringEventPostingsType {
	this := CateringEventPostingsType{}
	return &this
}

// GetCateringEventPosting returns the CateringEventPosting field value if set, zero value otherwise.
func (o *CateringEventPostingsType) GetCateringEventPosting() []CateringEventPostingType {
	if o == nil || IsNil(o.CateringEventPosting) {
		var ret []CateringEventPostingType
		return ret
	}
	return o.CateringEventPosting
}

// GetCateringEventPostingOk returns a tuple with the CateringEventPosting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventPostingsType) GetCateringEventPostingOk() ([]CateringEventPostingType, bool) {
	if o == nil || IsNil(o.CateringEventPosting) {
		return nil, false
	}
	return o.CateringEventPosting, true
}

// HasCateringEventPosting returns a boolean if a field has been set.
func (o *CateringEventPostingsType) HasCateringEventPosting() bool {
	if o != nil && !IsNil(o.CateringEventPosting) {
		return true
	}

	return false
}

// SetCateringEventPosting gets a reference to the given []CateringEventPostingType and assigns it to the CateringEventPosting field.
func (o *CateringEventPostingsType) SetCateringEventPosting(v []CateringEventPostingType) {
	o.CateringEventPosting = v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *CateringEventPostingsType) GetEventId() UniqueIDType {
	if o == nil || IsNil(o.EventId) {
		var ret UniqueIDType
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventPostingsType) GetEventIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *CateringEventPostingsType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given UniqueIDType and assigns it to the EventId field.
func (o *CateringEventPostingsType) SetEventId(v UniqueIDType) {
	o.EventId = &v
}

func (o CateringEventPostingsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringEventPostingsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CateringEventPosting) {
		toSerialize["cateringEventPosting"] = o.CateringEventPosting
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	return toSerialize, nil
}

type NullableCateringEventPostingsType struct {
	value *CateringEventPostingsType
	isSet bool
}

func (v NullableCateringEventPostingsType) Get() *CateringEventPostingsType {
	return v.value
}

func (v *NullableCateringEventPostingsType) Set(val *CateringEventPostingsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventPostingsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventPostingsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventPostingsType(val *CateringEventPostingsType) *NullableCateringEventPostingsType {
	return &NullableCateringEventPostingsType{value: val, isSet: true}
}

func (v NullableCateringEventPostingsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventPostingsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


