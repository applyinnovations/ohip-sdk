/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the SpaceAreaType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpaceAreaType{}

// SpaceAreaType Collection of the Events Booked/Scheduled for the function spaces in the Hotel for the particular time period.
type SpaceAreaType struct {
	// Room Area in Square Feet.
	Area *float32 `json:"area,omitempty"`
	Unit *SpaceAreaUnitType `json:"unit,omitempty"`
}

// NewSpaceAreaType instantiates a new SpaceAreaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpaceAreaType() *SpaceAreaType {
	this := SpaceAreaType{}
	return &this
}

// NewSpaceAreaTypeWithDefaults instantiates a new SpaceAreaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpaceAreaTypeWithDefaults() *SpaceAreaType {
	this := SpaceAreaType{}
	return &this
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *SpaceAreaType) GetArea() float32 {
	if o == nil || IsNil(o.Area) {
		var ret float32
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpaceAreaType) GetAreaOk() (*float32, bool) {
	if o == nil || IsNil(o.Area) {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *SpaceAreaType) HasArea() bool {
	if o != nil && !IsNil(o.Area) {
		return true
	}

	return false
}

// SetArea gets a reference to the given float32 and assigns it to the Area field.
func (o *SpaceAreaType) SetArea(v float32) {
	o.Area = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *SpaceAreaType) GetUnit() SpaceAreaUnitType {
	if o == nil || IsNil(o.Unit) {
		var ret SpaceAreaUnitType
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpaceAreaType) GetUnitOk() (*SpaceAreaUnitType, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *SpaceAreaType) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given SpaceAreaUnitType and assigns it to the Unit field.
func (o *SpaceAreaType) SetUnit(v SpaceAreaUnitType) {
	o.Unit = &v
}

func (o SpaceAreaType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpaceAreaType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Area) {
		toSerialize["area"] = o.Area
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableSpaceAreaType struct {
	value *SpaceAreaType
	isSet bool
}

func (v NullableSpaceAreaType) Get() *SpaceAreaType {
	return v.value
}

func (v *NullableSpaceAreaType) Set(val *SpaceAreaType) {
	v.value = val
	v.isSet = true
}

func (v NullableSpaceAreaType) IsSet() bool {
	return v.isSet
}

func (v *NullableSpaceAreaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpaceAreaType(val *SpaceAreaType) *NullableSpaceAreaType {
	return &NullableSpaceAreaType{value: val, isSet: true}
}

func (v NullableSpaceAreaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpaceAreaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


