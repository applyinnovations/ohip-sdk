/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
	"fmt"
)

// RateProtectionType Simple type for specifying the block protection type.
type RateProtectionType string

// List of rateProtectionType
const (
	RATEPROTECTIONTYPE_ALL RateProtectionType = "All"
	RATEPROTECTIONTYPE_SELECTED RateProtectionType = "Selected"
	RATEPROTECTIONTYPE_NONE RateProtectionType = "None"
)

// All allowed values of RateProtectionType enum
var AllowedRateProtectionTypeEnumValues = []RateProtectionType{
	"All",
	"Selected",
	"None",
}

func (v *RateProtectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RateProtectionType(value)
	for _, existing := range AllowedRateProtectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RateProtectionType", value)
}

// NewRateProtectionTypeFromValue returns a pointer to a valid RateProtectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRateProtectionTypeFromValue(v string) (*RateProtectionType, error) {
	ev := RateProtectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RateProtectionType: valid values are %v", v, AllowedRateProtectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RateProtectionType) IsValid() bool {
	for _, existing := range AllowedRateProtectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to rateProtectionType value
func (v RateProtectionType) Ptr() *RateProtectionType {
	return &v
}

type NullableRateProtectionType struct {
	value *RateProtectionType
	isSet bool
}

func (v NullableRateProtectionType) Get() *RateProtectionType {
	return v.value
}

func (v *NullableRateProtectionType) Set(val *RateProtectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableRateProtectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableRateProtectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRateProtectionType(val *RateProtectionType) *NullableRateProtectionType {
	return &NullableRateProtectionType{value: val, isSet: true}
}

func (v NullableRateProtectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRateProtectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

