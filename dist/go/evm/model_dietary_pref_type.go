/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the DietaryPrefType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DietaryPrefType{}

// DietaryPrefType Base type provides information about Catering Revenue Types Configuration.
type DietaryPrefType struct {
	Code *string `json:"code,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewDietaryPrefType instantiates a new DietaryPrefType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDietaryPrefType() *DietaryPrefType {
	this := DietaryPrefType{}
	return &this
}

// NewDietaryPrefTypeWithDefaults instantiates a new DietaryPrefType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDietaryPrefTypeWithDefaults() *DietaryPrefType {
	this := DietaryPrefType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *DietaryPrefType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DietaryPrefType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *DietaryPrefType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *DietaryPrefType) SetCode(v string) {
	o.Code = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DietaryPrefType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DietaryPrefType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DietaryPrefType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DietaryPrefType) SetType(v string) {
	o.Type = &v
}

func (o DietaryPrefType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DietaryPrefType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDietaryPrefType struct {
	value *DietaryPrefType
	isSet bool
}

func (v NullableDietaryPrefType) Get() *DietaryPrefType {
	return v.value
}

func (v *NullableDietaryPrefType) Set(val *DietaryPrefType) {
	v.value = val
	v.isSet = true
}

func (v NullableDietaryPrefType) IsSet() bool {
	return v.isSet
}

func (v *NullableDietaryPrefType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDietaryPrefType(val *DietaryPrefType) *NullableDietaryPrefType {
	return &NullableDietaryPrefType{value: val, isSet: true}
}

func (v NullableDietaryPrefType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDietaryPrefType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


