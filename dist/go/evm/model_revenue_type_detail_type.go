/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the RevenueTypeDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevenueTypeDetailType{}

// RevenueTypeDetailType Details type provides information about Catering Revenue Type Details.
type RevenueTypeDetailType struct {
	// Hotel Code is used to set associated revenue type details.
	HotelId *string `json:"hotelId,omitempty"`
}

// NewRevenueTypeDetailType instantiates a new RevenueTypeDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevenueTypeDetailType() *RevenueTypeDetailType {
	this := RevenueTypeDetailType{}
	return &this
}

// NewRevenueTypeDetailTypeWithDefaults instantiates a new RevenueTypeDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevenueTypeDetailTypeWithDefaults() *RevenueTypeDetailType {
	this := RevenueTypeDetailType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RevenueTypeDetailType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevenueTypeDetailType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RevenueTypeDetailType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RevenueTypeDetailType) SetHotelId(v string) {
	o.HotelId = &v
}

func (o RevenueTypeDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevenueTypeDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	return toSerialize, nil
}

type NullableRevenueTypeDetailType struct {
	value *RevenueTypeDetailType
	isSet bool
}

func (v NullableRevenueTypeDetailType) Get() *RevenueTypeDetailType {
	return v.value
}

func (v *NullableRevenueTypeDetailType) Set(val *RevenueTypeDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableRevenueTypeDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableRevenueTypeDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevenueTypeDetailType(val *RevenueTypeDetailType) *NullableRevenueTypeDetailType {
	return &NullableRevenueTypeDetailType{value: val, isSet: true}
}

func (v NullableRevenueTypeDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevenueTypeDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


