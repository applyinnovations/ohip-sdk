/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventMenuRevenueType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMenuRevenueType{}

// EventMenuRevenueType Pertain Revenue Detail Information of the Menu.
type EventMenuRevenueType struct {
	Cost *CurrencyAmountType `json:"cost,omitempty"`
	// This type holds cost of the Menu.
	CostMargin *float32 `json:"costMargin,omitempty"`
	// Indicates that this resource item is a custom item added for this event.
	Custom *bool `json:"custom,omitempty"`
	InternalQuote *CurrencyAmountType `json:"internalQuote,omitempty"`
	Price *CurrencyAmountType `json:"price,omitempty"`
	// This type holds price margin for the given Menu.
	PriceMargin *float32 `json:"priceMargin,omitempty"`
	ResourceId *UniqueIDType `json:"resourceId,omitempty"`
	// This supports all Revenue Types
	RevenueType *string `json:"revenueType,omitempty"`
	Type *MenuTypeType `json:"type,omitempty"`
}

// NewEventMenuRevenueType instantiates a new EventMenuRevenueType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMenuRevenueType() *EventMenuRevenueType {
	this := EventMenuRevenueType{}
	return &this
}

// NewEventMenuRevenueTypeWithDefaults instantiates a new EventMenuRevenueType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMenuRevenueTypeWithDefaults() *EventMenuRevenueType {
	this := EventMenuRevenueType{}
	return &this
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetCost() CurrencyAmountType {
	if o == nil || IsNil(o.Cost) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetCostOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given CurrencyAmountType and assigns it to the Cost field.
func (o *EventMenuRevenueType) SetCost(v CurrencyAmountType) {
	o.Cost = &v
}

// GetCostMargin returns the CostMargin field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetCostMargin() float32 {
	if o == nil || IsNil(o.CostMargin) {
		var ret float32
		return ret
	}
	return *o.CostMargin
}

// GetCostMarginOk returns a tuple with the CostMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetCostMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.CostMargin) {
		return nil, false
	}
	return o.CostMargin, true
}

// HasCostMargin returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasCostMargin() bool {
	if o != nil && !IsNil(o.CostMargin) {
		return true
	}

	return false
}

// SetCostMargin gets a reference to the given float32 and assigns it to the CostMargin field.
func (o *EventMenuRevenueType) SetCostMargin(v float32) {
	o.CostMargin = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetCustom() bool {
	if o == nil || IsNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *EventMenuRevenueType) SetCustom(v bool) {
	o.Custom = &v
}

// GetInternalQuote returns the InternalQuote field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetInternalQuote() CurrencyAmountType {
	if o == nil || IsNil(o.InternalQuote) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.InternalQuote
}

// GetInternalQuoteOk returns a tuple with the InternalQuote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetInternalQuoteOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.InternalQuote) {
		return nil, false
	}
	return o.InternalQuote, true
}

// HasInternalQuote returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasInternalQuote() bool {
	if o != nil && !IsNil(o.InternalQuote) {
		return true
	}

	return false
}

// SetInternalQuote gets a reference to the given CurrencyAmountType and assigns it to the InternalQuote field.
func (o *EventMenuRevenueType) SetInternalQuote(v CurrencyAmountType) {
	o.InternalQuote = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetPrice() CurrencyAmountType {
	if o == nil || IsNil(o.Price) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given CurrencyAmountType and assigns it to the Price field.
func (o *EventMenuRevenueType) SetPrice(v CurrencyAmountType) {
	o.Price = &v
}

// GetPriceMargin returns the PriceMargin field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetPriceMargin() float32 {
	if o == nil || IsNil(o.PriceMargin) {
		var ret float32
		return ret
	}
	return *o.PriceMargin
}

// GetPriceMarginOk returns a tuple with the PriceMargin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetPriceMarginOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceMargin) {
		return nil, false
	}
	return o.PriceMargin, true
}

// HasPriceMargin returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasPriceMargin() bool {
	if o != nil && !IsNil(o.PriceMargin) {
		return true
	}

	return false
}

// SetPriceMargin gets a reference to the given float32 and assigns it to the PriceMargin field.
func (o *EventMenuRevenueType) SetPriceMargin(v float32) {
	o.PriceMargin = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetResourceId() UniqueIDType {
	if o == nil || IsNil(o.ResourceId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetResourceIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given UniqueIDType and assigns it to the ResourceId field.
func (o *EventMenuRevenueType) SetResourceId(v UniqueIDType) {
	o.ResourceId = &v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetRevenueType() string {
	if o == nil || IsNil(o.RevenueType) {
		var ret string
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetRevenueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given string and assigns it to the RevenueType field.
func (o *EventMenuRevenueType) SetRevenueType(v string) {
	o.RevenueType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventMenuRevenueType) GetType() MenuTypeType {
	if o == nil || IsNil(o.Type) {
		var ret MenuTypeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuRevenueType) GetTypeOk() (*MenuTypeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventMenuRevenueType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given MenuTypeType and assigns it to the Type field.
func (o *EventMenuRevenueType) SetType(v MenuTypeType) {
	o.Type = &v
}

func (o EventMenuRevenueType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMenuRevenueType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.CostMargin) {
		toSerialize["costMargin"] = o.CostMargin
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.InternalQuote) {
		toSerialize["internalQuote"] = o.InternalQuote
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceMargin) {
		toSerialize["priceMargin"] = o.PriceMargin
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableEventMenuRevenueType struct {
	value *EventMenuRevenueType
	isSet bool
}

func (v NullableEventMenuRevenueType) Get() *EventMenuRevenueType {
	return v.value
}

func (v *NullableEventMenuRevenueType) Set(val *EventMenuRevenueType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMenuRevenueType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMenuRevenueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMenuRevenueType(val *EventMenuRevenueType) *NullableEventMenuRevenueType {
	return &NullableEventMenuRevenueType{value: val, isSet: true}
}

func (v NullableEventMenuRevenueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMenuRevenueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


