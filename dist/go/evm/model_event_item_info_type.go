/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventItemInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventItemInfoType{}

// EventItemInfoType Information about event item.
type EventItemInfoType struct {
	EventItem *EventItemType `json:"eventItem,omitempty"`
	EventItemId *UniqueIDType `json:"eventItemId,omitempty"`
}

// NewEventItemInfoType instantiates a new EventItemInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventItemInfoType() *EventItemInfoType {
	this := EventItemInfoType{}
	return &this
}

// NewEventItemInfoTypeWithDefaults instantiates a new EventItemInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventItemInfoTypeWithDefaults() *EventItemInfoType {
	this := EventItemInfoType{}
	return &this
}

// GetEventItem returns the EventItem field value if set, zero value otherwise.
func (o *EventItemInfoType) GetEventItem() EventItemType {
	if o == nil || IsNil(o.EventItem) {
		var ret EventItemType
		return ret
	}
	return *o.EventItem
}

// GetEventItemOk returns a tuple with the EventItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemInfoType) GetEventItemOk() (*EventItemType, bool) {
	if o == nil || IsNil(o.EventItem) {
		return nil, false
	}
	return o.EventItem, true
}

// HasEventItem returns a boolean if a field has been set.
func (o *EventItemInfoType) HasEventItem() bool {
	if o != nil && !IsNil(o.EventItem) {
		return true
	}

	return false
}

// SetEventItem gets a reference to the given EventItemType and assigns it to the EventItem field.
func (o *EventItemInfoType) SetEventItem(v EventItemType) {
	o.EventItem = &v
}

// GetEventItemId returns the EventItemId field value if set, zero value otherwise.
func (o *EventItemInfoType) GetEventItemId() UniqueIDType {
	if o == nil || IsNil(o.EventItemId) {
		var ret UniqueIDType
		return ret
	}
	return *o.EventItemId
}

// GetEventItemIdOk returns a tuple with the EventItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemInfoType) GetEventItemIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EventItemId) {
		return nil, false
	}
	return o.EventItemId, true
}

// HasEventItemId returns a boolean if a field has been set.
func (o *EventItemInfoType) HasEventItemId() bool {
	if o != nil && !IsNil(o.EventItemId) {
		return true
	}

	return false
}

// SetEventItemId gets a reference to the given UniqueIDType and assigns it to the EventItemId field.
func (o *EventItemInfoType) SetEventItemId(v UniqueIDType) {
	o.EventItemId = &v
}

func (o EventItemInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventItemInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventItem) {
		toSerialize["eventItem"] = o.EventItem
	}
	if !IsNil(o.EventItemId) {
		toSerialize["eventItemId"] = o.EventItemId
	}
	return toSerialize, nil
}

type NullableEventItemInfoType struct {
	value *EventItemInfoType
	isSet bool
}

func (v NullableEventItemInfoType) Get() *EventItemInfoType {
	return v.value
}

func (v *NullableEventItemInfoType) Set(val *EventItemInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventItemInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventItemInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventItemInfoType(val *EventItemInfoType) *NullableEventItemInfoType {
	return &NullableEventItemInfoType{value: val, isSet: true}
}

func (v NullableEventItemInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventItemInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


