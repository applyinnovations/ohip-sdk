/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventChangesByDateTimeSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventChangesByDateTimeSummaryType{}

// EventChangesByDateTimeSummaryType Event information for changed events by date time
type EventChangesByDateTimeSummaryType struct {
	// The hotel code for changed event by date time.
	HotelId *string `json:"hotelId,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
	EventId *EventId `json:"eventId,omitempty"`
	// The start date for changed event by date time.
	StartDate *string `json:"startDate,omitempty"`
	// The end date for changed event by date time.
	EndDate *string `json:"endDate,omitempty"`
	// Status of the event.
	EventStatus *string `json:"eventStatus,omitempty"`
	// Last change date and time for this event.
	LastChangeDateTime *string `json:"lastChangeDateTime,omitempty"`
	ActionType *TransactionActionEnumType `json:"actionType,omitempty"`
}

// NewEventChangesByDateTimeSummaryType instantiates a new EventChangesByDateTimeSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventChangesByDateTimeSummaryType() *EventChangesByDateTimeSummaryType {
	this := EventChangesByDateTimeSummaryType{}
	return &this
}

// NewEventChangesByDateTimeSummaryTypeWithDefaults instantiates a new EventChangesByDateTimeSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventChangesByDateTimeSummaryTypeWithDefaults() *EventChangesByDateTimeSummaryType {
	this := EventChangesByDateTimeSummaryType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *EventChangesByDateTimeSummaryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *EventChangesByDateTimeSummaryType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetEventId() EventId {
	if o == nil || IsNil(o.EventId) {
		var ret EventId
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetEventIdOk() (*EventId, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given EventId and assigns it to the EventId field.
func (o *EventChangesByDateTimeSummaryType) SetEventId(v EventId) {
	o.EventId = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *EventChangesByDateTimeSummaryType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *EventChangesByDateTimeSummaryType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetEventStatus() string {
	if o == nil || IsNil(o.EventStatus) {
		var ret string
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetEventStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given string and assigns it to the EventStatus field.
func (o *EventChangesByDateTimeSummaryType) SetEventStatus(v string) {
	o.EventStatus = &v
}

// GetLastChangeDateTime returns the LastChangeDateTime field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetLastChangeDateTime() string {
	if o == nil || IsNil(o.LastChangeDateTime) {
		var ret string
		return ret
	}
	return *o.LastChangeDateTime
}

// GetLastChangeDateTimeOk returns a tuple with the LastChangeDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetLastChangeDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastChangeDateTime) {
		return nil, false
	}
	return o.LastChangeDateTime, true
}

// HasLastChangeDateTime returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasLastChangeDateTime() bool {
	if o != nil && !IsNil(o.LastChangeDateTime) {
		return true
	}

	return false
}

// SetLastChangeDateTime gets a reference to the given string and assigns it to the LastChangeDateTime field.
func (o *EventChangesByDateTimeSummaryType) SetLastChangeDateTime(v string) {
	o.LastChangeDateTime = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *EventChangesByDateTimeSummaryType) GetActionType() TransactionActionEnumType {
	if o == nil || IsNil(o.ActionType) {
		var ret TransactionActionEnumType
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventChangesByDateTimeSummaryType) GetActionTypeOk() (*TransactionActionEnumType, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *EventChangesByDateTimeSummaryType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given TransactionActionEnumType and assigns it to the ActionType field.
func (o *EventChangesByDateTimeSummaryType) SetActionType(v TransactionActionEnumType) {
	o.ActionType = &v
}

func (o EventChangesByDateTimeSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventChangesByDateTimeSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.EventStatus) {
		toSerialize["eventStatus"] = o.EventStatus
	}
	if !IsNil(o.LastChangeDateTime) {
		toSerialize["lastChangeDateTime"] = o.LastChangeDateTime
	}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	return toSerialize, nil
}

type NullableEventChangesByDateTimeSummaryType struct {
	value *EventChangesByDateTimeSummaryType
	isSet bool
}

func (v NullableEventChangesByDateTimeSummaryType) Get() *EventChangesByDateTimeSummaryType {
	return v.value
}

func (v *NullableEventChangesByDateTimeSummaryType) Set(val *EventChangesByDateTimeSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventChangesByDateTimeSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventChangesByDateTimeSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventChangesByDateTimeSummaryType(val *EventChangesByDateTimeSummaryType) *NullableEventChangesByDateTimeSummaryType {
	return &NullableEventChangesByDateTimeSummaryType{value: val, isSet: true}
}

func (v NullableEventChangesByDateTimeSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventChangesByDateTimeSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


