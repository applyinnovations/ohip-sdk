/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ResourceEventsSummariesInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceEventsSummariesInfoType{}

// ResourceEventsSummariesInfoType Collection of events.
type ResourceEventsSummariesInfoType struct {
	// Contains resource events summary information
	ResourceEventSummary []ResourceEventSummaryInfoType `json:"resourceEventSummary,omitempty"`
	BlockId *UniqueIDType `json:"blockId,omitempty"`
}

// NewResourceEventsSummariesInfoType instantiates a new ResourceEventsSummariesInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceEventsSummariesInfoType() *ResourceEventsSummariesInfoType {
	this := ResourceEventsSummariesInfoType{}
	return &this
}

// NewResourceEventsSummariesInfoTypeWithDefaults instantiates a new ResourceEventsSummariesInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceEventsSummariesInfoTypeWithDefaults() *ResourceEventsSummariesInfoType {
	this := ResourceEventsSummariesInfoType{}
	return &this
}

// GetResourceEventSummary returns the ResourceEventSummary field value if set, zero value otherwise.
func (o *ResourceEventsSummariesInfoType) GetResourceEventSummary() []ResourceEventSummaryInfoType {
	if o == nil || IsNil(o.ResourceEventSummary) {
		var ret []ResourceEventSummaryInfoType
		return ret
	}
	return o.ResourceEventSummary
}

// GetResourceEventSummaryOk returns a tuple with the ResourceEventSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventsSummariesInfoType) GetResourceEventSummaryOk() ([]ResourceEventSummaryInfoType, bool) {
	if o == nil || IsNil(o.ResourceEventSummary) {
		return nil, false
	}
	return o.ResourceEventSummary, true
}

// HasResourceEventSummary returns a boolean if a field has been set.
func (o *ResourceEventsSummariesInfoType) HasResourceEventSummary() bool {
	if o != nil && !IsNil(o.ResourceEventSummary) {
		return true
	}

	return false
}

// SetResourceEventSummary gets a reference to the given []ResourceEventSummaryInfoType and assigns it to the ResourceEventSummary field.
func (o *ResourceEventsSummariesInfoType) SetResourceEventSummary(v []ResourceEventSummaryInfoType) {
	o.ResourceEventSummary = v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *ResourceEventsSummariesInfoType) GetBlockId() UniqueIDType {
	if o == nil || IsNil(o.BlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEventsSummariesInfoType) GetBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *ResourceEventsSummariesInfoType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given UniqueIDType and assigns it to the BlockId field.
func (o *ResourceEventsSummariesInfoType) SetBlockId(v UniqueIDType) {
	o.BlockId = &v
}

func (o ResourceEventsSummariesInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceEventsSummariesInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceEventSummary) {
		toSerialize["resourceEventSummary"] = o.ResourceEventSummary
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	return toSerialize, nil
}

type NullableResourceEventsSummariesInfoType struct {
	value *ResourceEventsSummariesInfoType
	isSet bool
}

func (v NullableResourceEventsSummariesInfoType) Get() *ResourceEventsSummariesInfoType {
	return v.value
}

func (v *NullableResourceEventsSummariesInfoType) Set(val *ResourceEventsSummariesInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceEventsSummariesInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceEventsSummariesInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceEventsSummariesInfoType(val *ResourceEventsSummariesInfoType) *NullableResourceEventsSummariesInfoType {
	return &NullableResourceEventsSummariesInfoType{value: val, isSet: true}
}

func (v NullableResourceEventsSummariesInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceEventsSummariesInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


