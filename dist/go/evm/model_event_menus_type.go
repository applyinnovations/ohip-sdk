/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventMenusType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMenusType{}

// EventMenusType List of event menus.
type EventMenusType struct {
	// Flag to indicate all event menus are critical.
	Critical *bool `json:"critical,omitempty"`
	// Collection of Detailed information about event menus.
	EventMenuInfo []EventMenuInfoType `json:"eventMenuInfo,omitempty"`
	// Flag to indicate all event menus are part of a package.
	IncludedInPackage *bool `json:"includedInPackage,omitempty"`
}

// NewEventMenusType instantiates a new EventMenusType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMenusType() *EventMenusType {
	this := EventMenusType{}
	return &this
}

// NewEventMenusTypeWithDefaults instantiates a new EventMenusType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMenusTypeWithDefaults() *EventMenusType {
	this := EventMenusType{}
	return &this
}

// GetCritical returns the Critical field value if set, zero value otherwise.
func (o *EventMenusType) GetCritical() bool {
	if o == nil || IsNil(o.Critical) {
		var ret bool
		return ret
	}
	return *o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenusType) GetCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.Critical) {
		return nil, false
	}
	return o.Critical, true
}

// HasCritical returns a boolean if a field has been set.
func (o *EventMenusType) HasCritical() bool {
	if o != nil && !IsNil(o.Critical) {
		return true
	}

	return false
}

// SetCritical gets a reference to the given bool and assigns it to the Critical field.
func (o *EventMenusType) SetCritical(v bool) {
	o.Critical = &v
}

// GetEventMenuInfo returns the EventMenuInfo field value if set, zero value otherwise.
func (o *EventMenusType) GetEventMenuInfo() []EventMenuInfoType {
	if o == nil || IsNil(o.EventMenuInfo) {
		var ret []EventMenuInfoType
		return ret
	}
	return o.EventMenuInfo
}

// GetEventMenuInfoOk returns a tuple with the EventMenuInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenusType) GetEventMenuInfoOk() ([]EventMenuInfoType, bool) {
	if o == nil || IsNil(o.EventMenuInfo) {
		return nil, false
	}
	return o.EventMenuInfo, true
}

// HasEventMenuInfo returns a boolean if a field has been set.
func (o *EventMenusType) HasEventMenuInfo() bool {
	if o != nil && !IsNil(o.EventMenuInfo) {
		return true
	}

	return false
}

// SetEventMenuInfo gets a reference to the given []EventMenuInfoType and assigns it to the EventMenuInfo field.
func (o *EventMenusType) SetEventMenuInfo(v []EventMenuInfoType) {
	o.EventMenuInfo = v
}

// GetIncludedInPackage returns the IncludedInPackage field value if set, zero value otherwise.
func (o *EventMenusType) GetIncludedInPackage() bool {
	if o == nil || IsNil(o.IncludedInPackage) {
		var ret bool
		return ret
	}
	return *o.IncludedInPackage
}

// GetIncludedInPackageOk returns a tuple with the IncludedInPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenusType) GetIncludedInPackageOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedInPackage) {
		return nil, false
	}
	return o.IncludedInPackage, true
}

// HasIncludedInPackage returns a boolean if a field has been set.
func (o *EventMenusType) HasIncludedInPackage() bool {
	if o != nil && !IsNil(o.IncludedInPackage) {
		return true
	}

	return false
}

// SetIncludedInPackage gets a reference to the given bool and assigns it to the IncludedInPackage field.
func (o *EventMenusType) SetIncludedInPackage(v bool) {
	o.IncludedInPackage = &v
}

func (o EventMenusType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMenusType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Critical) {
		toSerialize["critical"] = o.Critical
	}
	if !IsNil(o.EventMenuInfo) {
		toSerialize["eventMenuInfo"] = o.EventMenuInfo
	}
	if !IsNil(o.IncludedInPackage) {
		toSerialize["includedInPackage"] = o.IncludedInPackage
	}
	return toSerialize, nil
}

type NullableEventMenusType struct {
	value *EventMenusType
	isSet bool
}

func (v NullableEventMenusType) Get() *EventMenusType {
	return v.value
}

func (v *NullableEventMenusType) Set(val *EventMenusType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMenusType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMenusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMenusType(val *EventMenusType) *NullableEventMenusType {
	return &NullableEventMenusType{value: val, isSet: true}
}

func (v NullableEventMenusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMenusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


