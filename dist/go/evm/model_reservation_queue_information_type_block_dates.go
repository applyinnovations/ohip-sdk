/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ReservationQueueInformationTypeBlockDates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationQueueInformationTypeBlockDates{}

// ReservationQueueInformationTypeBlockDates Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield eventEndDate date.
type ReservationQueueInformationTypeBlockDates struct {
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	Duration *string `json:"duration,omitempty"`
	// The total duration, in seconds, the reservation is on Queue.
	DurationInSeconds *int32 `json:"durationInSeconds,omitempty"`
}

// NewReservationQueueInformationTypeBlockDates instantiates a new ReservationQueueInformationTypeBlockDates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationQueueInformationTypeBlockDates() *ReservationQueueInformationTypeBlockDates {
	this := ReservationQueueInformationTypeBlockDates{}
	return &this
}

// NewReservationQueueInformationTypeBlockDatesWithDefaults instantiates a new ReservationQueueInformationTypeBlockDates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationQueueInformationTypeBlockDatesWithDefaults() *ReservationQueueInformationTypeBlockDates {
	this := ReservationQueueInformationTypeBlockDates{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReservationQueueInformationTypeBlockDates) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationQueueInformationTypeBlockDates) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReservationQueueInformationTypeBlockDates) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ReservationQueueInformationTypeBlockDates) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ReservationQueueInformationTypeBlockDates) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationQueueInformationTypeBlockDates) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ReservationQueueInformationTypeBlockDates) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ReservationQueueInformationTypeBlockDates) SetEndDate(v string) {
	o.EndDate = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ReservationQueueInformationTypeBlockDates) GetDuration() string {
	if o == nil || IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationQueueInformationTypeBlockDates) GetDurationOk() (*string, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ReservationQueueInformationTypeBlockDates) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *ReservationQueueInformationTypeBlockDates) SetDuration(v string) {
	o.Duration = &v
}

// GetDurationInSeconds returns the DurationInSeconds field value if set, zero value otherwise.
func (o *ReservationQueueInformationTypeBlockDates) GetDurationInSeconds() int32 {
	if o == nil || IsNil(o.DurationInSeconds) {
		var ret int32
		return ret
	}
	return *o.DurationInSeconds
}

// GetDurationInSecondsOk returns a tuple with the DurationInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationQueueInformationTypeBlockDates) GetDurationInSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.DurationInSeconds) {
		return nil, false
	}
	return o.DurationInSeconds, true
}

// HasDurationInSeconds returns a boolean if a field has been set.
func (o *ReservationQueueInformationTypeBlockDates) HasDurationInSeconds() bool {
	if o != nil && !IsNil(o.DurationInSeconds) {
		return true
	}

	return false
}

// SetDurationInSeconds gets a reference to the given int32 and assigns it to the DurationInSeconds field.
func (o *ReservationQueueInformationTypeBlockDates) SetDurationInSeconds(v int32) {
	o.DurationInSeconds = &v
}

func (o ReservationQueueInformationTypeBlockDates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationQueueInformationTypeBlockDates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.DurationInSeconds) {
		toSerialize["durationInSeconds"] = o.DurationInSeconds
	}
	return toSerialize, nil
}

type NullableReservationQueueInformationTypeBlockDates struct {
	value *ReservationQueueInformationTypeBlockDates
	isSet bool
}

func (v NullableReservationQueueInformationTypeBlockDates) Get() *ReservationQueueInformationTypeBlockDates {
	return v.value
}

func (v *NullableReservationQueueInformationTypeBlockDates) Set(val *ReservationQueueInformationTypeBlockDates) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationQueueInformationTypeBlockDates) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationQueueInformationTypeBlockDates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationQueueInformationTypeBlockDates(val *ReservationQueueInformationTypeBlockDates) *NullableReservationQueueInformationTypeBlockDates {
	return &NullableReservationQueueInformationTypeBlockDates{value: val, isSet: true}
}

func (v NullableReservationQueueInformationTypeBlockDates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationQueueInformationTypeBlockDates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


