/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CateringEventChangeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringEventChangeInfoType{}

// CateringEventChangeInfoType struct for CateringEventChangeInfoType
type CateringEventChangeInfoType struct {
	Action *CateringEventChangeActions `json:"action,omitempty"`
	ChangeId *UniqueIDType `json:"changeId,omitempty"`
	ChangeSource *CateringEventChangeSources `json:"changeSource,omitempty"`
	ChangeUserInfo *LogUserInfoType `json:"changeUserInfo,omitempty"`
	EventChangeDetailList []CateringEventChangeDetailType `json:"eventChangeDetailList,omitempty"`
	EventId *UniqueIDType `json:"eventId,omitempty"`
	// Name of the event
	EventName *string `json:"eventName,omitempty"`
	// HotelCode associated with the event
	HotelId *string `json:"hotelId,omitempty"`
	// Description of the Resource
	ResourceName *string `json:"resourceName,omitempty"`
}

// NewCateringEventChangeInfoType instantiates a new CateringEventChangeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringEventChangeInfoType() *CateringEventChangeInfoType {
	this := CateringEventChangeInfoType{}
	return &this
}

// NewCateringEventChangeInfoTypeWithDefaults instantiates a new CateringEventChangeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringEventChangeInfoTypeWithDefaults() *CateringEventChangeInfoType {
	this := CateringEventChangeInfoType{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetAction() CateringEventChangeActions {
	if o == nil || IsNil(o.Action) {
		var ret CateringEventChangeActions
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetActionOk() (*CateringEventChangeActions, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given CateringEventChangeActions and assigns it to the Action field.
func (o *CateringEventChangeInfoType) SetAction(v CateringEventChangeActions) {
	o.Action = &v
}

// GetChangeId returns the ChangeId field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetChangeId() UniqueIDType {
	if o == nil || IsNil(o.ChangeId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ChangeId
}

// GetChangeIdOk returns a tuple with the ChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetChangeIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ChangeId) {
		return nil, false
	}
	return o.ChangeId, true
}

// HasChangeId returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasChangeId() bool {
	if o != nil && !IsNil(o.ChangeId) {
		return true
	}

	return false
}

// SetChangeId gets a reference to the given UniqueIDType and assigns it to the ChangeId field.
func (o *CateringEventChangeInfoType) SetChangeId(v UniqueIDType) {
	o.ChangeId = &v
}

// GetChangeSource returns the ChangeSource field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetChangeSource() CateringEventChangeSources {
	if o == nil || IsNil(o.ChangeSource) {
		var ret CateringEventChangeSources
		return ret
	}
	return *o.ChangeSource
}

// GetChangeSourceOk returns a tuple with the ChangeSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetChangeSourceOk() (*CateringEventChangeSources, bool) {
	if o == nil || IsNil(o.ChangeSource) {
		return nil, false
	}
	return o.ChangeSource, true
}

// HasChangeSource returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasChangeSource() bool {
	if o != nil && !IsNil(o.ChangeSource) {
		return true
	}

	return false
}

// SetChangeSource gets a reference to the given CateringEventChangeSources and assigns it to the ChangeSource field.
func (o *CateringEventChangeInfoType) SetChangeSource(v CateringEventChangeSources) {
	o.ChangeSource = &v
}

// GetChangeUserInfo returns the ChangeUserInfo field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetChangeUserInfo() LogUserInfoType {
	if o == nil || IsNil(o.ChangeUserInfo) {
		var ret LogUserInfoType
		return ret
	}
	return *o.ChangeUserInfo
}

// GetChangeUserInfoOk returns a tuple with the ChangeUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetChangeUserInfoOk() (*LogUserInfoType, bool) {
	if o == nil || IsNil(o.ChangeUserInfo) {
		return nil, false
	}
	return o.ChangeUserInfo, true
}

// HasChangeUserInfo returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasChangeUserInfo() bool {
	if o != nil && !IsNil(o.ChangeUserInfo) {
		return true
	}

	return false
}

// SetChangeUserInfo gets a reference to the given LogUserInfoType and assigns it to the ChangeUserInfo field.
func (o *CateringEventChangeInfoType) SetChangeUserInfo(v LogUserInfoType) {
	o.ChangeUserInfo = &v
}

// GetEventChangeDetailList returns the EventChangeDetailList field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetEventChangeDetailList() []CateringEventChangeDetailType {
	if o == nil || IsNil(o.EventChangeDetailList) {
		var ret []CateringEventChangeDetailType
		return ret
	}
	return o.EventChangeDetailList
}

// GetEventChangeDetailListOk returns a tuple with the EventChangeDetailList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetEventChangeDetailListOk() ([]CateringEventChangeDetailType, bool) {
	if o == nil || IsNil(o.EventChangeDetailList) {
		return nil, false
	}
	return o.EventChangeDetailList, true
}

// HasEventChangeDetailList returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasEventChangeDetailList() bool {
	if o != nil && !IsNil(o.EventChangeDetailList) {
		return true
	}

	return false
}

// SetEventChangeDetailList gets a reference to the given []CateringEventChangeDetailType and assigns it to the EventChangeDetailList field.
func (o *CateringEventChangeInfoType) SetEventChangeDetailList(v []CateringEventChangeDetailType) {
	o.EventChangeDetailList = v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetEventId() UniqueIDType {
	if o == nil || IsNil(o.EventId) {
		var ret UniqueIDType
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetEventIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given UniqueIDType and assigns it to the EventId field.
func (o *CateringEventChangeInfoType) SetEventId(v UniqueIDType) {
	o.EventId = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *CateringEventChangeInfoType) SetEventName(v string) {
	o.EventName = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CateringEventChangeInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *CateringEventChangeInfoType) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName) {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventChangeInfoType) GetResourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceName) {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *CateringEventChangeInfoType) HasResourceName() bool {
	if o != nil && !IsNil(o.ResourceName) {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *CateringEventChangeInfoType) SetResourceName(v string) {
	o.ResourceName = &v
}

func (o CateringEventChangeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringEventChangeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.ChangeId) {
		toSerialize["changeId"] = o.ChangeId
	}
	if !IsNil(o.ChangeSource) {
		toSerialize["changeSource"] = o.ChangeSource
	}
	if !IsNil(o.ChangeUserInfo) {
		toSerialize["changeUserInfo"] = o.ChangeUserInfo
	}
	if !IsNil(o.EventChangeDetailList) {
		toSerialize["eventChangeDetailList"] = o.EventChangeDetailList
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ResourceName) {
		toSerialize["resourceName"] = o.ResourceName
	}
	return toSerialize, nil
}

type NullableCateringEventChangeInfoType struct {
	value *CateringEventChangeInfoType
	isSet bool
}

func (v NullableCateringEventChangeInfoType) Get() *CateringEventChangeInfoType {
	return v.value
}

func (v *NullableCateringEventChangeInfoType) Set(val *CateringEventChangeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventChangeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventChangeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventChangeInfoType(val *CateringEventChangeInfoType) *NullableCateringEventChangeInfoType {
	return &NullableCateringEventChangeInfoType{value: val, isSet: true}
}

func (v NullableCateringEventChangeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventChangeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


