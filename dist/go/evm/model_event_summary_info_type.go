/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventSummaryInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSummaryInfoType{}

// EventSummaryInfoType Contains information about an event.
type EventSummaryInfoType struct {
	EventId *EventId `json:"eventId,omitempty"`
	EventLink *CateringEventLinkType `json:"eventLink,omitempty"`
	// Unique Id that references an object uniquely in the system.
	BlockIdList []UniqueIDType `json:"blockIdList,omitempty"`
	// Name of the block.
	BlockName *string `json:"blockName,omitempty"`
	// Number of event attendees.
	Attendees *int32 `json:"attendees,omitempty"`
	FunctionSpaceDetails *CodeDescriptionType `json:"functionSpaceDetails,omitempty"`
	// Rental amount for the event function space.
	RentalAmount *float32 `json:"rentalAmount,omitempty"`
	FunctionSpaceSetup *CodeDescriptionType `json:"functionSpaceSetup,omitempty"`
	// Collection of lamp indicators.
	Indicators []IndicatorType `json:"indicators,omitempty"`
	EventStatus *BookingStatusType `json:"eventStatus,omitempty"`
	WaitlistReturnStatus *BookingStatusType `json:"waitlistReturnStatus,omitempty"`
	CateringStatusType *CateringStatusTypeType `json:"cateringStatusType,omitempty"`
	// Flag to indicate if the Catering event deducts resources from inventory.
	CateringStatusDeductInventory *bool `json:"cateringStatusDeductInventory,omitempty"`
	// Flag to indicate if the Catering event returns resources to inventory.
	CateringStatusReturnToInventory *bool `json:"cateringStatusReturnToInventory,omitempty"`
	// Event space setupCode time in minutes.
	SetupTime *int32 `json:"setupTime,omitempty"`
	// Event space tear down time in minutes.
	TearDownTime *int32 `json:"tearDownTime,omitempty"`
	// Flag to indicate if the event is a master event.
	MasterEvent *bool `json:"masterEvent,omitempty"`
	// Flag to indicate if the event is a sub event.
	SubEvent *bool `json:"subEvent,omitempty"`
	// Flag to indicate if the event is part of a package.
	PackageEvent *bool `json:"packageEvent,omitempty"`
	// Flag to indicate if the event is booked as a backup for another event.
	AlternateEvent *bool `json:"alternateEvent,omitempty"`
	// Flag to indicate if the doorcard has been selected to display on reports or external readerboard systems.
	DisplayDoorCard *bool `json:"displayDoorCard,omitempty"`
	// The doorcard to be displayed on reports or external readerboard systems.
	DoorCard *string `json:"doorCard,omitempty"`
	// Flag to indicate if the event revenue should be excluded from the forecast.
	ExcludeFromForecast *bool `json:"excludeFromForecast,omitempty"`
	// Flag to indicate whether to only use the forecasted values when reporting, regardless of whether resources are booked on an event.
	UseForecastRevenue *bool `json:"useForecastRevenue,omitempty"`
	// Setup style code.
	SetupCode *string `json:"setupCode,omitempty"`
	// Minimum Occupancy for the SetupCode of Catring Event.
	MinimumOccupancy *int32 `json:"minimumOccupancy,omitempty"`
	// Maximum Occupancy for the SetupCode of Catring Event.
	MaximumOccupancy *int32 `json:"maximumOccupancy,omitempty"`
	// Discount Percentage applied to Rent Amount.
	DiscountPercentage *float32 `json:"discountPercentage,omitempty"`
	// Indicates whether the event is expected to be noisy and might possibly disturb other events.
	LoudEvent *bool `json:"loudEvent,omitempty"`
	// Rate Code for function space.
	RentalCode *string `json:"rentalCode,omitempty"`
	// Flag to indicate if the event is shareable with other events.
	EventShared *bool `json:"eventShared,omitempty"`
	// Flag to indicate if the event functionSpaceDetails is shareable.
	Shareable *bool `json:"shareable,omitempty"`
	// Inactivation date of the event.
	InactiveDate *string `json:"inactiveDate,omitempty"`
	// Package Code of the Event if it has a Package Enabled in it.
	PackageCode *string `json:"packageCode,omitempty"`
	// Package Name of the Event.
	PackageName *string `json:"packageName,omitempty"`
	// Package Id of the Event.
	PackageId *int32 `json:"packageId,omitempty"`
	// Flag to indicate if the event space is associated from the Package.
	IncludeSpaceInPackage *bool `json:"includeSpaceInPackage,omitempty"`
	// Hotel where the event is booked.
	HotelId *string `json:"hotelId,omitempty"`
	// Hotel where the Block is created for the event.
	BlockHotelCode *string `json:"blockHotelCode,omitempty"`
	// Indicates whether the event has postings.
	HasPostings *bool `json:"hasPostings,omitempty"`
	// Indicates whether any event in the block has postings.
	BlockHasPostings *bool `json:"blockHasPostings,omitempty"`
	// Indicates whether the event has posted some charges, but not all.
	HasPartialPostings *bool `json:"hasPartialPostings,omitempty"`
	// Indicates whether the event has posted all charges.
	AllPosted *bool `json:"allPosted,omitempty"`
	// Indicates that none of the charges on the event have been posted.
	NothingPosted *bool `json:"nothingPosted,omitempty"`
	// The starting value of the time span.
	EventStartDate *string `json:"eventStartDate,omitempty"`
	// The ending value of the time span.
	EventEndDate *string `json:"eventEndDate,omitempty"`
	// Type of event. Examples are LUN, DIN, etc.
	Type *string `json:"type,omitempty"`
	// Name of event. This is used to describe the event.
	EventName *string `json:"eventName,omitempty"`
	// Currency code when base currency of the property is different than the catering currency.
	CateringCurrency *string `json:"cateringCurrency,omitempty"`
	// Currency code which is been quoted for Catering Events
	CateringQuotedCurrency *string `json:"cateringQuotedCurrency,omitempty"`
	// Collection of lamp indicators.
	EventIndicators []IndicatorType `json:"eventIndicators,omitempty"`
}

// NewEventSummaryInfoType instantiates a new EventSummaryInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSummaryInfoType() *EventSummaryInfoType {
	this := EventSummaryInfoType{}
	return &this
}

// NewEventSummaryInfoTypeWithDefaults instantiates a new EventSummaryInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSummaryInfoTypeWithDefaults() *EventSummaryInfoType {
	this := EventSummaryInfoType{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventId() EventId {
	if o == nil || IsNil(o.EventId) {
		var ret EventId
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventIdOk() (*EventId, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given EventId and assigns it to the EventId field.
func (o *EventSummaryInfoType) SetEventId(v EventId) {
	o.EventId = &v
}

// GetEventLink returns the EventLink field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventLink() CateringEventLinkType {
	if o == nil || IsNil(o.EventLink) {
		var ret CateringEventLinkType
		return ret
	}
	return *o.EventLink
}

// GetEventLinkOk returns a tuple with the EventLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventLinkOk() (*CateringEventLinkType, bool) {
	if o == nil || IsNil(o.EventLink) {
		return nil, false
	}
	return o.EventLink, true
}

// HasEventLink returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventLink() bool {
	if o != nil && !IsNil(o.EventLink) {
		return true
	}

	return false
}

// SetEventLink gets a reference to the given CateringEventLinkType and assigns it to the EventLink field.
func (o *EventSummaryInfoType) SetEventLink(v CateringEventLinkType) {
	o.EventLink = &v
}

// GetBlockIdList returns the BlockIdList field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetBlockIdList() []UniqueIDType {
	if o == nil || IsNil(o.BlockIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.BlockIdList
}

// GetBlockIdListOk returns a tuple with the BlockIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetBlockIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.BlockIdList) {
		return nil, false
	}
	return o.BlockIdList, true
}

// HasBlockIdList returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasBlockIdList() bool {
	if o != nil && !IsNil(o.BlockIdList) {
		return true
	}

	return false
}

// SetBlockIdList gets a reference to the given []UniqueIDType and assigns it to the BlockIdList field.
func (o *EventSummaryInfoType) SetBlockIdList(v []UniqueIDType) {
	o.BlockIdList = v
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *EventSummaryInfoType) SetBlockName(v string) {
	o.BlockName = &v
}

// GetAttendees returns the Attendees field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetAttendees() int32 {
	if o == nil || IsNil(o.Attendees) {
		var ret int32
		return ret
	}
	return *o.Attendees
}

// GetAttendeesOk returns a tuple with the Attendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetAttendeesOk() (*int32, bool) {
	if o == nil || IsNil(o.Attendees) {
		return nil, false
	}
	return o.Attendees, true
}

// HasAttendees returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasAttendees() bool {
	if o != nil && !IsNil(o.Attendees) {
		return true
	}

	return false
}

// SetAttendees gets a reference to the given int32 and assigns it to the Attendees field.
func (o *EventSummaryInfoType) SetAttendees(v int32) {
	o.Attendees = &v
}

// GetFunctionSpaceDetails returns the FunctionSpaceDetails field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetFunctionSpaceDetails() CodeDescriptionType {
	if o == nil || IsNil(o.FunctionSpaceDetails) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.FunctionSpaceDetails
}

// GetFunctionSpaceDetailsOk returns a tuple with the FunctionSpaceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetFunctionSpaceDetailsOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.FunctionSpaceDetails) {
		return nil, false
	}
	return o.FunctionSpaceDetails, true
}

// HasFunctionSpaceDetails returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasFunctionSpaceDetails() bool {
	if o != nil && !IsNil(o.FunctionSpaceDetails) {
		return true
	}

	return false
}

// SetFunctionSpaceDetails gets a reference to the given CodeDescriptionType and assigns it to the FunctionSpaceDetails field.
func (o *EventSummaryInfoType) SetFunctionSpaceDetails(v CodeDescriptionType) {
	o.FunctionSpaceDetails = &v
}

// GetRentalAmount returns the RentalAmount field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetRentalAmount() float32 {
	if o == nil || IsNil(o.RentalAmount) {
		var ret float32
		return ret
	}
	return *o.RentalAmount
}

// GetRentalAmountOk returns a tuple with the RentalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetRentalAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.RentalAmount) {
		return nil, false
	}
	return o.RentalAmount, true
}

// HasRentalAmount returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasRentalAmount() bool {
	if o != nil && !IsNil(o.RentalAmount) {
		return true
	}

	return false
}

// SetRentalAmount gets a reference to the given float32 and assigns it to the RentalAmount field.
func (o *EventSummaryInfoType) SetRentalAmount(v float32) {
	o.RentalAmount = &v
}

// GetFunctionSpaceSetup returns the FunctionSpaceSetup field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetFunctionSpaceSetup() CodeDescriptionType {
	if o == nil || IsNil(o.FunctionSpaceSetup) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.FunctionSpaceSetup
}

// GetFunctionSpaceSetupOk returns a tuple with the FunctionSpaceSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetFunctionSpaceSetupOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.FunctionSpaceSetup) {
		return nil, false
	}
	return o.FunctionSpaceSetup, true
}

// HasFunctionSpaceSetup returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasFunctionSpaceSetup() bool {
	if o != nil && !IsNil(o.FunctionSpaceSetup) {
		return true
	}

	return false
}

// SetFunctionSpaceSetup gets a reference to the given CodeDescriptionType and assigns it to the FunctionSpaceSetup field.
func (o *EventSummaryInfoType) SetFunctionSpaceSetup(v CodeDescriptionType) {
	o.FunctionSpaceSetup = &v
}

// GetIndicators returns the Indicators field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetIndicators() []IndicatorType {
	if o == nil || IsNil(o.Indicators) {
		var ret []IndicatorType
		return ret
	}
	return o.Indicators
}

// GetIndicatorsOk returns a tuple with the Indicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetIndicatorsOk() ([]IndicatorType, bool) {
	if o == nil || IsNil(o.Indicators) {
		return nil, false
	}
	return o.Indicators, true
}

// HasIndicators returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasIndicators() bool {
	if o != nil && !IsNil(o.Indicators) {
		return true
	}

	return false
}

// SetIndicators gets a reference to the given []IndicatorType and assigns it to the Indicators field.
func (o *EventSummaryInfoType) SetIndicators(v []IndicatorType) {
	o.Indicators = v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventStatus() BookingStatusType {
	if o == nil || IsNil(o.EventStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given BookingStatusType and assigns it to the EventStatus field.
func (o *EventSummaryInfoType) SetEventStatus(v BookingStatusType) {
	o.EventStatus = &v
}

// GetWaitlistReturnStatus returns the WaitlistReturnStatus field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetWaitlistReturnStatus() BookingStatusType {
	if o == nil || IsNil(o.WaitlistReturnStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.WaitlistReturnStatus
}

// GetWaitlistReturnStatusOk returns a tuple with the WaitlistReturnStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetWaitlistReturnStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.WaitlistReturnStatus) {
		return nil, false
	}
	return o.WaitlistReturnStatus, true
}

// HasWaitlistReturnStatus returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasWaitlistReturnStatus() bool {
	if o != nil && !IsNil(o.WaitlistReturnStatus) {
		return true
	}

	return false
}

// SetWaitlistReturnStatus gets a reference to the given BookingStatusType and assigns it to the WaitlistReturnStatus field.
func (o *EventSummaryInfoType) SetWaitlistReturnStatus(v BookingStatusType) {
	o.WaitlistReturnStatus = &v
}

// GetCateringStatusType returns the CateringStatusType field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetCateringStatusType() CateringStatusTypeType {
	if o == nil || IsNil(o.CateringStatusType) {
		var ret CateringStatusTypeType
		return ret
	}
	return *o.CateringStatusType
}

// GetCateringStatusTypeOk returns a tuple with the CateringStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetCateringStatusTypeOk() (*CateringStatusTypeType, bool) {
	if o == nil || IsNil(o.CateringStatusType) {
		return nil, false
	}
	return o.CateringStatusType, true
}

// HasCateringStatusType returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasCateringStatusType() bool {
	if o != nil && !IsNil(o.CateringStatusType) {
		return true
	}

	return false
}

// SetCateringStatusType gets a reference to the given CateringStatusTypeType and assigns it to the CateringStatusType field.
func (o *EventSummaryInfoType) SetCateringStatusType(v CateringStatusTypeType) {
	o.CateringStatusType = &v
}

// GetCateringStatusDeductInventory returns the CateringStatusDeductInventory field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetCateringStatusDeductInventory() bool {
	if o == nil || IsNil(o.CateringStatusDeductInventory) {
		var ret bool
		return ret
	}
	return *o.CateringStatusDeductInventory
}

// GetCateringStatusDeductInventoryOk returns a tuple with the CateringStatusDeductInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetCateringStatusDeductInventoryOk() (*bool, bool) {
	if o == nil || IsNil(o.CateringStatusDeductInventory) {
		return nil, false
	}
	return o.CateringStatusDeductInventory, true
}

// HasCateringStatusDeductInventory returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasCateringStatusDeductInventory() bool {
	if o != nil && !IsNil(o.CateringStatusDeductInventory) {
		return true
	}

	return false
}

// SetCateringStatusDeductInventory gets a reference to the given bool and assigns it to the CateringStatusDeductInventory field.
func (o *EventSummaryInfoType) SetCateringStatusDeductInventory(v bool) {
	o.CateringStatusDeductInventory = &v
}

// GetCateringStatusReturnToInventory returns the CateringStatusReturnToInventory field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetCateringStatusReturnToInventory() bool {
	if o == nil || IsNil(o.CateringStatusReturnToInventory) {
		var ret bool
		return ret
	}
	return *o.CateringStatusReturnToInventory
}

// GetCateringStatusReturnToInventoryOk returns a tuple with the CateringStatusReturnToInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetCateringStatusReturnToInventoryOk() (*bool, bool) {
	if o == nil || IsNil(o.CateringStatusReturnToInventory) {
		return nil, false
	}
	return o.CateringStatusReturnToInventory, true
}

// HasCateringStatusReturnToInventory returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasCateringStatusReturnToInventory() bool {
	if o != nil && !IsNil(o.CateringStatusReturnToInventory) {
		return true
	}

	return false
}

// SetCateringStatusReturnToInventory gets a reference to the given bool and assigns it to the CateringStatusReturnToInventory field.
func (o *EventSummaryInfoType) SetCateringStatusReturnToInventory(v bool) {
	o.CateringStatusReturnToInventory = &v
}

// GetSetupTime returns the SetupTime field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetSetupTime() int32 {
	if o == nil || IsNil(o.SetupTime) {
		var ret int32
		return ret
	}
	return *o.SetupTime
}

// GetSetupTimeOk returns a tuple with the SetupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetSetupTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.SetupTime) {
		return nil, false
	}
	return o.SetupTime, true
}

// HasSetupTime returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasSetupTime() bool {
	if o != nil && !IsNil(o.SetupTime) {
		return true
	}

	return false
}

// SetSetupTime gets a reference to the given int32 and assigns it to the SetupTime field.
func (o *EventSummaryInfoType) SetSetupTime(v int32) {
	o.SetupTime = &v
}

// GetTearDownTime returns the TearDownTime field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetTearDownTime() int32 {
	if o == nil || IsNil(o.TearDownTime) {
		var ret int32
		return ret
	}
	return *o.TearDownTime
}

// GetTearDownTimeOk returns a tuple with the TearDownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetTearDownTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.TearDownTime) {
		return nil, false
	}
	return o.TearDownTime, true
}

// HasTearDownTime returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasTearDownTime() bool {
	if o != nil && !IsNil(o.TearDownTime) {
		return true
	}

	return false
}

// SetTearDownTime gets a reference to the given int32 and assigns it to the TearDownTime field.
func (o *EventSummaryInfoType) SetTearDownTime(v int32) {
	o.TearDownTime = &v
}

// GetMasterEvent returns the MasterEvent field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetMasterEvent() bool {
	if o == nil || IsNil(o.MasterEvent) {
		var ret bool
		return ret
	}
	return *o.MasterEvent
}

// GetMasterEventOk returns a tuple with the MasterEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetMasterEventOk() (*bool, bool) {
	if o == nil || IsNil(o.MasterEvent) {
		return nil, false
	}
	return o.MasterEvent, true
}

// HasMasterEvent returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasMasterEvent() bool {
	if o != nil && !IsNil(o.MasterEvent) {
		return true
	}

	return false
}

// SetMasterEvent gets a reference to the given bool and assigns it to the MasterEvent field.
func (o *EventSummaryInfoType) SetMasterEvent(v bool) {
	o.MasterEvent = &v
}

// GetSubEvent returns the SubEvent field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetSubEvent() bool {
	if o == nil || IsNil(o.SubEvent) {
		var ret bool
		return ret
	}
	return *o.SubEvent
}

// GetSubEventOk returns a tuple with the SubEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetSubEventOk() (*bool, bool) {
	if o == nil || IsNil(o.SubEvent) {
		return nil, false
	}
	return o.SubEvent, true
}

// HasSubEvent returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasSubEvent() bool {
	if o != nil && !IsNil(o.SubEvent) {
		return true
	}

	return false
}

// SetSubEvent gets a reference to the given bool and assigns it to the SubEvent field.
func (o *EventSummaryInfoType) SetSubEvent(v bool) {
	o.SubEvent = &v
}

// GetPackageEvent returns the PackageEvent field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetPackageEvent() bool {
	if o == nil || IsNil(o.PackageEvent) {
		var ret bool
		return ret
	}
	return *o.PackageEvent
}

// GetPackageEventOk returns a tuple with the PackageEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetPackageEventOk() (*bool, bool) {
	if o == nil || IsNil(o.PackageEvent) {
		return nil, false
	}
	return o.PackageEvent, true
}

// HasPackageEvent returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasPackageEvent() bool {
	if o != nil && !IsNil(o.PackageEvent) {
		return true
	}

	return false
}

// SetPackageEvent gets a reference to the given bool and assigns it to the PackageEvent field.
func (o *EventSummaryInfoType) SetPackageEvent(v bool) {
	o.PackageEvent = &v
}

// GetAlternateEvent returns the AlternateEvent field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetAlternateEvent() bool {
	if o == nil || IsNil(o.AlternateEvent) {
		var ret bool
		return ret
	}
	return *o.AlternateEvent
}

// GetAlternateEventOk returns a tuple with the AlternateEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetAlternateEventOk() (*bool, bool) {
	if o == nil || IsNil(o.AlternateEvent) {
		return nil, false
	}
	return o.AlternateEvent, true
}

// HasAlternateEvent returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasAlternateEvent() bool {
	if o != nil && !IsNil(o.AlternateEvent) {
		return true
	}

	return false
}

// SetAlternateEvent gets a reference to the given bool and assigns it to the AlternateEvent field.
func (o *EventSummaryInfoType) SetAlternateEvent(v bool) {
	o.AlternateEvent = &v
}

// GetDisplayDoorCard returns the DisplayDoorCard field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetDisplayDoorCard() bool {
	if o == nil || IsNil(o.DisplayDoorCard) {
		var ret bool
		return ret
	}
	return *o.DisplayDoorCard
}

// GetDisplayDoorCardOk returns a tuple with the DisplayDoorCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetDisplayDoorCardOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayDoorCard) {
		return nil, false
	}
	return o.DisplayDoorCard, true
}

// HasDisplayDoorCard returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasDisplayDoorCard() bool {
	if o != nil && !IsNil(o.DisplayDoorCard) {
		return true
	}

	return false
}

// SetDisplayDoorCard gets a reference to the given bool and assigns it to the DisplayDoorCard field.
func (o *EventSummaryInfoType) SetDisplayDoorCard(v bool) {
	o.DisplayDoorCard = &v
}

// GetDoorCard returns the DoorCard field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetDoorCard() string {
	if o == nil || IsNil(o.DoorCard) {
		var ret string
		return ret
	}
	return *o.DoorCard
}

// GetDoorCardOk returns a tuple with the DoorCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetDoorCardOk() (*string, bool) {
	if o == nil || IsNil(o.DoorCard) {
		return nil, false
	}
	return o.DoorCard, true
}

// HasDoorCard returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasDoorCard() bool {
	if o != nil && !IsNil(o.DoorCard) {
		return true
	}

	return false
}

// SetDoorCard gets a reference to the given string and assigns it to the DoorCard field.
func (o *EventSummaryInfoType) SetDoorCard(v string) {
	o.DoorCard = &v
}

// GetExcludeFromForecast returns the ExcludeFromForecast field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetExcludeFromForecast() bool {
	if o == nil || IsNil(o.ExcludeFromForecast) {
		var ret bool
		return ret
	}
	return *o.ExcludeFromForecast
}

// GetExcludeFromForecastOk returns a tuple with the ExcludeFromForecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetExcludeFromForecastOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeFromForecast) {
		return nil, false
	}
	return o.ExcludeFromForecast, true
}

// HasExcludeFromForecast returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasExcludeFromForecast() bool {
	if o != nil && !IsNil(o.ExcludeFromForecast) {
		return true
	}

	return false
}

// SetExcludeFromForecast gets a reference to the given bool and assigns it to the ExcludeFromForecast field.
func (o *EventSummaryInfoType) SetExcludeFromForecast(v bool) {
	o.ExcludeFromForecast = &v
}

// GetUseForecastRevenue returns the UseForecastRevenue field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetUseForecastRevenue() bool {
	if o == nil || IsNil(o.UseForecastRevenue) {
		var ret bool
		return ret
	}
	return *o.UseForecastRevenue
}

// GetUseForecastRevenueOk returns a tuple with the UseForecastRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetUseForecastRevenueOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForecastRevenue) {
		return nil, false
	}
	return o.UseForecastRevenue, true
}

// HasUseForecastRevenue returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasUseForecastRevenue() bool {
	if o != nil && !IsNil(o.UseForecastRevenue) {
		return true
	}

	return false
}

// SetUseForecastRevenue gets a reference to the given bool and assigns it to the UseForecastRevenue field.
func (o *EventSummaryInfoType) SetUseForecastRevenue(v bool) {
	o.UseForecastRevenue = &v
}

// GetSetupCode returns the SetupCode field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetSetupCode() string {
	if o == nil || IsNil(o.SetupCode) {
		var ret string
		return ret
	}
	return *o.SetupCode
}

// GetSetupCodeOk returns a tuple with the SetupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetSetupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SetupCode) {
		return nil, false
	}
	return o.SetupCode, true
}

// HasSetupCode returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasSetupCode() bool {
	if o != nil && !IsNil(o.SetupCode) {
		return true
	}

	return false
}

// SetSetupCode gets a reference to the given string and assigns it to the SetupCode field.
func (o *EventSummaryInfoType) SetSetupCode(v string) {
	o.SetupCode = &v
}

// GetMinimumOccupancy returns the MinimumOccupancy field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetMinimumOccupancy() int32 {
	if o == nil || IsNil(o.MinimumOccupancy) {
		var ret int32
		return ret
	}
	return *o.MinimumOccupancy
}

// GetMinimumOccupancyOk returns a tuple with the MinimumOccupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetMinimumOccupancyOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumOccupancy) {
		return nil, false
	}
	return o.MinimumOccupancy, true
}

// HasMinimumOccupancy returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasMinimumOccupancy() bool {
	if o != nil && !IsNil(o.MinimumOccupancy) {
		return true
	}

	return false
}

// SetMinimumOccupancy gets a reference to the given int32 and assigns it to the MinimumOccupancy field.
func (o *EventSummaryInfoType) SetMinimumOccupancy(v int32) {
	o.MinimumOccupancy = &v
}

// GetMaximumOccupancy returns the MaximumOccupancy field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetMaximumOccupancy() int32 {
	if o == nil || IsNil(o.MaximumOccupancy) {
		var ret int32
		return ret
	}
	return *o.MaximumOccupancy
}

// GetMaximumOccupancyOk returns a tuple with the MaximumOccupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetMaximumOccupancyOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumOccupancy) {
		return nil, false
	}
	return o.MaximumOccupancy, true
}

// HasMaximumOccupancy returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasMaximumOccupancy() bool {
	if o != nil && !IsNil(o.MaximumOccupancy) {
		return true
	}

	return false
}

// SetMaximumOccupancy gets a reference to the given int32 and assigns it to the MaximumOccupancy field.
func (o *EventSummaryInfoType) SetMaximumOccupancy(v int32) {
	o.MaximumOccupancy = &v
}

// GetDiscountPercentage returns the DiscountPercentage field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetDiscountPercentage() float32 {
	if o == nil || IsNil(o.DiscountPercentage) {
		var ret float32
		return ret
	}
	return *o.DiscountPercentage
}

// GetDiscountPercentageOk returns a tuple with the DiscountPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetDiscountPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountPercentage) {
		return nil, false
	}
	return o.DiscountPercentage, true
}

// HasDiscountPercentage returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasDiscountPercentage() bool {
	if o != nil && !IsNil(o.DiscountPercentage) {
		return true
	}

	return false
}

// SetDiscountPercentage gets a reference to the given float32 and assigns it to the DiscountPercentage field.
func (o *EventSummaryInfoType) SetDiscountPercentage(v float32) {
	o.DiscountPercentage = &v
}

// GetLoudEvent returns the LoudEvent field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetLoudEvent() bool {
	if o == nil || IsNil(o.LoudEvent) {
		var ret bool
		return ret
	}
	return *o.LoudEvent
}

// GetLoudEventOk returns a tuple with the LoudEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetLoudEventOk() (*bool, bool) {
	if o == nil || IsNil(o.LoudEvent) {
		return nil, false
	}
	return o.LoudEvent, true
}

// HasLoudEvent returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasLoudEvent() bool {
	if o != nil && !IsNil(o.LoudEvent) {
		return true
	}

	return false
}

// SetLoudEvent gets a reference to the given bool and assigns it to the LoudEvent field.
func (o *EventSummaryInfoType) SetLoudEvent(v bool) {
	o.LoudEvent = &v
}

// GetRentalCode returns the RentalCode field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetRentalCode() string {
	if o == nil || IsNil(o.RentalCode) {
		var ret string
		return ret
	}
	return *o.RentalCode
}

// GetRentalCodeOk returns a tuple with the RentalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetRentalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RentalCode) {
		return nil, false
	}
	return o.RentalCode, true
}

// HasRentalCode returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasRentalCode() bool {
	if o != nil && !IsNil(o.RentalCode) {
		return true
	}

	return false
}

// SetRentalCode gets a reference to the given string and assigns it to the RentalCode field.
func (o *EventSummaryInfoType) SetRentalCode(v string) {
	o.RentalCode = &v
}

// GetEventShared returns the EventShared field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventShared() bool {
	if o == nil || IsNil(o.EventShared) {
		var ret bool
		return ret
	}
	return *o.EventShared
}

// GetEventSharedOk returns a tuple with the EventShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.EventShared) {
		return nil, false
	}
	return o.EventShared, true
}

// HasEventShared returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventShared() bool {
	if o != nil && !IsNil(o.EventShared) {
		return true
	}

	return false
}

// SetEventShared gets a reference to the given bool and assigns it to the EventShared field.
func (o *EventSummaryInfoType) SetEventShared(v bool) {
	o.EventShared = &v
}

// GetShareable returns the Shareable field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetShareable() bool {
	if o == nil || IsNil(o.Shareable) {
		var ret bool
		return ret
	}
	return *o.Shareable
}

// GetShareableOk returns a tuple with the Shareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.Shareable) {
		return nil, false
	}
	return o.Shareable, true
}

// HasShareable returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasShareable() bool {
	if o != nil && !IsNil(o.Shareable) {
		return true
	}

	return false
}

// SetShareable gets a reference to the given bool and assigns it to the Shareable field.
func (o *EventSummaryInfoType) SetShareable(v bool) {
	o.Shareable = &v
}

// GetInactiveDate returns the InactiveDate field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetInactiveDate() string {
	if o == nil || IsNil(o.InactiveDate) {
		var ret string
		return ret
	}
	return *o.InactiveDate
}

// GetInactiveDateOk returns a tuple with the InactiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetInactiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.InactiveDate) {
		return nil, false
	}
	return o.InactiveDate, true
}

// HasInactiveDate returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasInactiveDate() bool {
	if o != nil && !IsNil(o.InactiveDate) {
		return true
	}

	return false
}

// SetInactiveDate gets a reference to the given string and assigns it to the InactiveDate field.
func (o *EventSummaryInfoType) SetInactiveDate(v string) {
	o.InactiveDate = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *EventSummaryInfoType) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetPackageName() string {
	if o == nil || IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetPackageNameOk() (*string, bool) {
	if o == nil || IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasPackageName() bool {
	if o != nil && !IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *EventSummaryInfoType) SetPackageName(v string) {
	o.PackageName = &v
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetPackageId() int32 {
	if o == nil || IsNil(o.PackageId) {
		var ret int32
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetPackageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given int32 and assigns it to the PackageId field.
func (o *EventSummaryInfoType) SetPackageId(v int32) {
	o.PackageId = &v
}

// GetIncludeSpaceInPackage returns the IncludeSpaceInPackage field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetIncludeSpaceInPackage() bool {
	if o == nil || IsNil(o.IncludeSpaceInPackage) {
		var ret bool
		return ret
	}
	return *o.IncludeSpaceInPackage
}

// GetIncludeSpaceInPackageOk returns a tuple with the IncludeSpaceInPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetIncludeSpaceInPackageOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeSpaceInPackage) {
		return nil, false
	}
	return o.IncludeSpaceInPackage, true
}

// HasIncludeSpaceInPackage returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasIncludeSpaceInPackage() bool {
	if o != nil && !IsNil(o.IncludeSpaceInPackage) {
		return true
	}

	return false
}

// SetIncludeSpaceInPackage gets a reference to the given bool and assigns it to the IncludeSpaceInPackage field.
func (o *EventSummaryInfoType) SetIncludeSpaceInPackage(v bool) {
	o.IncludeSpaceInPackage = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *EventSummaryInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBlockHotelCode returns the BlockHotelCode field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetBlockHotelCode() string {
	if o == nil || IsNil(o.BlockHotelCode) {
		var ret string
		return ret
	}
	return *o.BlockHotelCode
}

// GetBlockHotelCodeOk returns a tuple with the BlockHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetBlockHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockHotelCode) {
		return nil, false
	}
	return o.BlockHotelCode, true
}

// HasBlockHotelCode returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasBlockHotelCode() bool {
	if o != nil && !IsNil(o.BlockHotelCode) {
		return true
	}

	return false
}

// SetBlockHotelCode gets a reference to the given string and assigns it to the BlockHotelCode field.
func (o *EventSummaryInfoType) SetBlockHotelCode(v string) {
	o.BlockHotelCode = &v
}

// GetHasPostings returns the HasPostings field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetHasPostings() bool {
	if o == nil || IsNil(o.HasPostings) {
		var ret bool
		return ret
	}
	return *o.HasPostings
}

// GetHasPostingsOk returns a tuple with the HasPostings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetHasPostingsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPostings) {
		return nil, false
	}
	return o.HasPostings, true
}

// HasHasPostings returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasHasPostings() bool {
	if o != nil && !IsNil(o.HasPostings) {
		return true
	}

	return false
}

// SetHasPostings gets a reference to the given bool and assigns it to the HasPostings field.
func (o *EventSummaryInfoType) SetHasPostings(v bool) {
	o.HasPostings = &v
}

// GetBlockHasPostings returns the BlockHasPostings field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetBlockHasPostings() bool {
	if o == nil || IsNil(o.BlockHasPostings) {
		var ret bool
		return ret
	}
	return *o.BlockHasPostings
}

// GetBlockHasPostingsOk returns a tuple with the BlockHasPostings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetBlockHasPostingsOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockHasPostings) {
		return nil, false
	}
	return o.BlockHasPostings, true
}

// HasBlockHasPostings returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasBlockHasPostings() bool {
	if o != nil && !IsNil(o.BlockHasPostings) {
		return true
	}

	return false
}

// SetBlockHasPostings gets a reference to the given bool and assigns it to the BlockHasPostings field.
func (o *EventSummaryInfoType) SetBlockHasPostings(v bool) {
	o.BlockHasPostings = &v
}

// GetHasPartialPostings returns the HasPartialPostings field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetHasPartialPostings() bool {
	if o == nil || IsNil(o.HasPartialPostings) {
		var ret bool
		return ret
	}
	return *o.HasPartialPostings
}

// GetHasPartialPostingsOk returns a tuple with the HasPartialPostings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetHasPartialPostingsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPartialPostings) {
		return nil, false
	}
	return o.HasPartialPostings, true
}

// HasHasPartialPostings returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasHasPartialPostings() bool {
	if o != nil && !IsNil(o.HasPartialPostings) {
		return true
	}

	return false
}

// SetHasPartialPostings gets a reference to the given bool and assigns it to the HasPartialPostings field.
func (o *EventSummaryInfoType) SetHasPartialPostings(v bool) {
	o.HasPartialPostings = &v
}

// GetAllPosted returns the AllPosted field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetAllPosted() bool {
	if o == nil || IsNil(o.AllPosted) {
		var ret bool
		return ret
	}
	return *o.AllPosted
}

// GetAllPostedOk returns a tuple with the AllPosted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetAllPostedOk() (*bool, bool) {
	if o == nil || IsNil(o.AllPosted) {
		return nil, false
	}
	return o.AllPosted, true
}

// HasAllPosted returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasAllPosted() bool {
	if o != nil && !IsNil(o.AllPosted) {
		return true
	}

	return false
}

// SetAllPosted gets a reference to the given bool and assigns it to the AllPosted field.
func (o *EventSummaryInfoType) SetAllPosted(v bool) {
	o.AllPosted = &v
}

// GetNothingPosted returns the NothingPosted field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetNothingPosted() bool {
	if o == nil || IsNil(o.NothingPosted) {
		var ret bool
		return ret
	}
	return *o.NothingPosted
}

// GetNothingPostedOk returns a tuple with the NothingPosted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetNothingPostedOk() (*bool, bool) {
	if o == nil || IsNil(o.NothingPosted) {
		return nil, false
	}
	return o.NothingPosted, true
}

// HasNothingPosted returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasNothingPosted() bool {
	if o != nil && !IsNil(o.NothingPosted) {
		return true
	}

	return false
}

// SetNothingPosted gets a reference to the given bool and assigns it to the NothingPosted field.
func (o *EventSummaryInfoType) SetNothingPosted(v bool) {
	o.NothingPosted = &v
}

// GetEventStartDate returns the EventStartDate field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventStartDate() string {
	if o == nil || IsNil(o.EventStartDate) {
		var ret string
		return ret
	}
	return *o.EventStartDate
}

// GetEventStartDateOk returns a tuple with the EventStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventStartDate) {
		return nil, false
	}
	return o.EventStartDate, true
}

// HasEventStartDate returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventStartDate() bool {
	if o != nil && !IsNil(o.EventStartDate) {
		return true
	}

	return false
}

// SetEventStartDate gets a reference to the given string and assigns it to the EventStartDate field.
func (o *EventSummaryInfoType) SetEventStartDate(v string) {
	o.EventStartDate = &v
}

// GetEventEndDate returns the EventEndDate field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventEndDate() string {
	if o == nil || IsNil(o.EventEndDate) {
		var ret string
		return ret
	}
	return *o.EventEndDate
}

// GetEventEndDateOk returns a tuple with the EventEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventEndDate) {
		return nil, false
	}
	return o.EventEndDate, true
}

// HasEventEndDate returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventEndDate() bool {
	if o != nil && !IsNil(o.EventEndDate) {
		return true
	}

	return false
}

// SetEventEndDate gets a reference to the given string and assigns it to the EventEndDate field.
func (o *EventSummaryInfoType) SetEventEndDate(v string) {
	o.EventEndDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventSummaryInfoType) SetType(v string) {
	o.Type = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *EventSummaryInfoType) SetEventName(v string) {
	o.EventName = &v
}

// GetCateringCurrency returns the CateringCurrency field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetCateringCurrency() string {
	if o == nil || IsNil(o.CateringCurrency) {
		var ret string
		return ret
	}
	return *o.CateringCurrency
}

// GetCateringCurrencyOk returns a tuple with the CateringCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetCateringCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.CateringCurrency) {
		return nil, false
	}
	return o.CateringCurrency, true
}

// HasCateringCurrency returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasCateringCurrency() bool {
	if o != nil && !IsNil(o.CateringCurrency) {
		return true
	}

	return false
}

// SetCateringCurrency gets a reference to the given string and assigns it to the CateringCurrency field.
func (o *EventSummaryInfoType) SetCateringCurrency(v string) {
	o.CateringCurrency = &v
}

// GetCateringQuotedCurrency returns the CateringQuotedCurrency field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetCateringQuotedCurrency() string {
	if o == nil || IsNil(o.CateringQuotedCurrency) {
		var ret string
		return ret
	}
	return *o.CateringQuotedCurrency
}

// GetCateringQuotedCurrencyOk returns a tuple with the CateringQuotedCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetCateringQuotedCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.CateringQuotedCurrency) {
		return nil, false
	}
	return o.CateringQuotedCurrency, true
}

// HasCateringQuotedCurrency returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasCateringQuotedCurrency() bool {
	if o != nil && !IsNil(o.CateringQuotedCurrency) {
		return true
	}

	return false
}

// SetCateringQuotedCurrency gets a reference to the given string and assigns it to the CateringQuotedCurrency field.
func (o *EventSummaryInfoType) SetCateringQuotedCurrency(v string) {
	o.CateringQuotedCurrency = &v
}

// GetEventIndicators returns the EventIndicators field value if set, zero value otherwise.
func (o *EventSummaryInfoType) GetEventIndicators() []IndicatorType {
	if o == nil || IsNil(o.EventIndicators) {
		var ret []IndicatorType
		return ret
	}
	return o.EventIndicators
}

// GetEventIndicatorsOk returns a tuple with the EventIndicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSummaryInfoType) GetEventIndicatorsOk() ([]IndicatorType, bool) {
	if o == nil || IsNil(o.EventIndicators) {
		return nil, false
	}
	return o.EventIndicators, true
}

// HasEventIndicators returns a boolean if a field has been set.
func (o *EventSummaryInfoType) HasEventIndicators() bool {
	if o != nil && !IsNil(o.EventIndicators) {
		return true
	}

	return false
}

// SetEventIndicators gets a reference to the given []IndicatorType and assigns it to the EventIndicators field.
func (o *EventSummaryInfoType) SetEventIndicators(v []IndicatorType) {
	o.EventIndicators = v
}

func (o EventSummaryInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSummaryInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.EventLink) {
		toSerialize["eventLink"] = o.EventLink
	}
	if !IsNil(o.BlockIdList) {
		toSerialize["blockIdList"] = o.BlockIdList
	}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.Attendees) {
		toSerialize["attendees"] = o.Attendees
	}
	if !IsNil(o.FunctionSpaceDetails) {
		toSerialize["functionSpaceDetails"] = o.FunctionSpaceDetails
	}
	if !IsNil(o.RentalAmount) {
		toSerialize["rentalAmount"] = o.RentalAmount
	}
	if !IsNil(o.FunctionSpaceSetup) {
		toSerialize["functionSpaceSetup"] = o.FunctionSpaceSetup
	}
	if !IsNil(o.Indicators) {
		toSerialize["indicators"] = o.Indicators
	}
	if !IsNil(o.EventStatus) {
		toSerialize["eventStatus"] = o.EventStatus
	}
	if !IsNil(o.WaitlistReturnStatus) {
		toSerialize["waitlistReturnStatus"] = o.WaitlistReturnStatus
	}
	if !IsNil(o.CateringStatusType) {
		toSerialize["cateringStatusType"] = o.CateringStatusType
	}
	if !IsNil(o.CateringStatusDeductInventory) {
		toSerialize["cateringStatusDeductInventory"] = o.CateringStatusDeductInventory
	}
	if !IsNil(o.CateringStatusReturnToInventory) {
		toSerialize["cateringStatusReturnToInventory"] = o.CateringStatusReturnToInventory
	}
	if !IsNil(o.SetupTime) {
		toSerialize["setupTime"] = o.SetupTime
	}
	if !IsNil(o.TearDownTime) {
		toSerialize["tearDownTime"] = o.TearDownTime
	}
	if !IsNil(o.MasterEvent) {
		toSerialize["masterEvent"] = o.MasterEvent
	}
	if !IsNil(o.SubEvent) {
		toSerialize["subEvent"] = o.SubEvent
	}
	if !IsNil(o.PackageEvent) {
		toSerialize["packageEvent"] = o.PackageEvent
	}
	if !IsNil(o.AlternateEvent) {
		toSerialize["alternateEvent"] = o.AlternateEvent
	}
	if !IsNil(o.DisplayDoorCard) {
		toSerialize["displayDoorCard"] = o.DisplayDoorCard
	}
	if !IsNil(o.DoorCard) {
		toSerialize["doorCard"] = o.DoorCard
	}
	if !IsNil(o.ExcludeFromForecast) {
		toSerialize["excludeFromForecast"] = o.ExcludeFromForecast
	}
	if !IsNil(o.UseForecastRevenue) {
		toSerialize["useForecastRevenue"] = o.UseForecastRevenue
	}
	if !IsNil(o.SetupCode) {
		toSerialize["setupCode"] = o.SetupCode
	}
	if !IsNil(o.MinimumOccupancy) {
		toSerialize["minimumOccupancy"] = o.MinimumOccupancy
	}
	if !IsNil(o.MaximumOccupancy) {
		toSerialize["maximumOccupancy"] = o.MaximumOccupancy
	}
	if !IsNil(o.DiscountPercentage) {
		toSerialize["discountPercentage"] = o.DiscountPercentage
	}
	if !IsNil(o.LoudEvent) {
		toSerialize["loudEvent"] = o.LoudEvent
	}
	if !IsNil(o.RentalCode) {
		toSerialize["rentalCode"] = o.RentalCode
	}
	if !IsNil(o.EventShared) {
		toSerialize["eventShared"] = o.EventShared
	}
	if !IsNil(o.Shareable) {
		toSerialize["shareable"] = o.Shareable
	}
	if !IsNil(o.InactiveDate) {
		toSerialize["inactiveDate"] = o.InactiveDate
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.PackageName) {
		toSerialize["packageName"] = o.PackageName
	}
	if !IsNil(o.PackageId) {
		toSerialize["packageId"] = o.PackageId
	}
	if !IsNil(o.IncludeSpaceInPackage) {
		toSerialize["includeSpaceInPackage"] = o.IncludeSpaceInPackage
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BlockHotelCode) {
		toSerialize["blockHotelCode"] = o.BlockHotelCode
	}
	if !IsNil(o.HasPostings) {
		toSerialize["hasPostings"] = o.HasPostings
	}
	if !IsNil(o.BlockHasPostings) {
		toSerialize["blockHasPostings"] = o.BlockHasPostings
	}
	if !IsNil(o.HasPartialPostings) {
		toSerialize["hasPartialPostings"] = o.HasPartialPostings
	}
	if !IsNil(o.AllPosted) {
		toSerialize["allPosted"] = o.AllPosted
	}
	if !IsNil(o.NothingPosted) {
		toSerialize["nothingPosted"] = o.NothingPosted
	}
	if !IsNil(o.EventStartDate) {
		toSerialize["eventStartDate"] = o.EventStartDate
	}
	if !IsNil(o.EventEndDate) {
		toSerialize["eventEndDate"] = o.EventEndDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.CateringCurrency) {
		toSerialize["cateringCurrency"] = o.CateringCurrency
	}
	if !IsNil(o.CateringQuotedCurrency) {
		toSerialize["cateringQuotedCurrency"] = o.CateringQuotedCurrency
	}
	if !IsNil(o.EventIndicators) {
		toSerialize["eventIndicators"] = o.EventIndicators
	}
	return toSerialize, nil
}

type NullableEventSummaryInfoType struct {
	value *EventSummaryInfoType
	isSet bool
}

func (v NullableEventSummaryInfoType) Get() *EventSummaryInfoType {
	return v.value
}

func (v *NullableEventSummaryInfoType) Set(val *EventSummaryInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSummaryInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSummaryInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSummaryInfoType(val *EventSummaryInfoType) *NullableEventSummaryInfoType {
	return &NullableEventSummaryInfoType{value: val, isSet: true}
}

func (v NullableEventSummaryInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSummaryInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


