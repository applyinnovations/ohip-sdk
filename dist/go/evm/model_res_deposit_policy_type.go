/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ResDepositPolicyType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResDepositPolicyType{}

// ResDepositPolicyType A deposit policy attached with the reservation.
type ResDepositPolicyType struct {
	AmountDue *CurrencyAmountType `json:"amountDue,omitempty"`
	AmountPaid *CurrencyAmountType `json:"amountPaid,omitempty"`
	// Comments attached with a deposit.
	Comments *string `json:"comments,omitempty"`
	Policy *DepositPolicyType `json:"policy,omitempty"`
	PolicyId *UniqueIDType `json:"policyId,omitempty"`
	RevenueType *DepositCancelRevenueType `json:"revenueType,omitempty"`
}

// NewResDepositPolicyType instantiates a new ResDepositPolicyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResDepositPolicyType() *ResDepositPolicyType {
	this := ResDepositPolicyType{}
	return &this
}

// NewResDepositPolicyTypeWithDefaults instantiates a new ResDepositPolicyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResDepositPolicyTypeWithDefaults() *ResDepositPolicyType {
	this := ResDepositPolicyType{}
	return &this
}

// GetAmountDue returns the AmountDue field value if set, zero value otherwise.
func (o *ResDepositPolicyType) GetAmountDue() CurrencyAmountType {
	if o == nil || IsNil(o.AmountDue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AmountDue
}

// GetAmountDueOk returns a tuple with the AmountDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResDepositPolicyType) GetAmountDueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AmountDue) {
		return nil, false
	}
	return o.AmountDue, true
}

// HasAmountDue returns a boolean if a field has been set.
func (o *ResDepositPolicyType) HasAmountDue() bool {
	if o != nil && !IsNil(o.AmountDue) {
		return true
	}

	return false
}

// SetAmountDue gets a reference to the given CurrencyAmountType and assigns it to the AmountDue field.
func (o *ResDepositPolicyType) SetAmountDue(v CurrencyAmountType) {
	o.AmountDue = &v
}

// GetAmountPaid returns the AmountPaid field value if set, zero value otherwise.
func (o *ResDepositPolicyType) GetAmountPaid() CurrencyAmountType {
	if o == nil || IsNil(o.AmountPaid) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AmountPaid
}

// GetAmountPaidOk returns a tuple with the AmountPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResDepositPolicyType) GetAmountPaidOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AmountPaid) {
		return nil, false
	}
	return o.AmountPaid, true
}

// HasAmountPaid returns a boolean if a field has been set.
func (o *ResDepositPolicyType) HasAmountPaid() bool {
	if o != nil && !IsNil(o.AmountPaid) {
		return true
	}

	return false
}

// SetAmountPaid gets a reference to the given CurrencyAmountType and assigns it to the AmountPaid field.
func (o *ResDepositPolicyType) SetAmountPaid(v CurrencyAmountType) {
	o.AmountPaid = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ResDepositPolicyType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResDepositPolicyType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ResDepositPolicyType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *ResDepositPolicyType) SetComments(v string) {
	o.Comments = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *ResDepositPolicyType) GetPolicy() DepositPolicyType {
	if o == nil || IsNil(o.Policy) {
		var ret DepositPolicyType
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResDepositPolicyType) GetPolicyOk() (*DepositPolicyType, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *ResDepositPolicyType) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given DepositPolicyType and assigns it to the Policy field.
func (o *ResDepositPolicyType) SetPolicy(v DepositPolicyType) {
	o.Policy = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *ResDepositPolicyType) GetPolicyId() UniqueIDType {
	if o == nil || IsNil(o.PolicyId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResDepositPolicyType) GetPolicyIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *ResDepositPolicyType) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given UniqueIDType and assigns it to the PolicyId field.
func (o *ResDepositPolicyType) SetPolicyId(v UniqueIDType) {
	o.PolicyId = &v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *ResDepositPolicyType) GetRevenueType() DepositCancelRevenueType {
	if o == nil || IsNil(o.RevenueType) {
		var ret DepositCancelRevenueType
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResDepositPolicyType) GetRevenueTypeOk() (*DepositCancelRevenueType, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *ResDepositPolicyType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given DepositCancelRevenueType and assigns it to the RevenueType field.
func (o *ResDepositPolicyType) SetRevenueType(v DepositCancelRevenueType) {
	o.RevenueType = &v
}

func (o ResDepositPolicyType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResDepositPolicyType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AmountDue) {
		toSerialize["amountDue"] = o.AmountDue
	}
	if !IsNil(o.AmountPaid) {
		toSerialize["amountPaid"] = o.AmountPaid
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.PolicyId) {
		toSerialize["policyId"] = o.PolicyId
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	return toSerialize, nil
}

type NullableResDepositPolicyType struct {
	value *ResDepositPolicyType
	isSet bool
}

func (v NullableResDepositPolicyType) Get() *ResDepositPolicyType {
	return v.value
}

func (v *NullableResDepositPolicyType) Set(val *ResDepositPolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullableResDepositPolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullableResDepositPolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResDepositPolicyType(val *ResDepositPolicyType) *NullableResDepositPolicyType {
	return &NullableResDepositPolicyType{value: val, isSet: true}
}

func (v NullableResDepositPolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResDepositPolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


