/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventAttendeesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventAttendeesType{}

// EventAttendeesType Event attendees information.
type EventAttendeesType struct {
	// This denotes that the number of Attendees are the minimum guaranteed by the customer.
	AttendeesGuaranteed *bool `json:"attendeesGuaranteed,omitempty"`
	// The maximum number of attendees for Catering events associated with the block.
	NoOfAttendees *int32 `json:"noOfAttendees,omitempty"`
}

// NewEventAttendeesType instantiates a new EventAttendeesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventAttendeesType() *EventAttendeesType {
	this := EventAttendeesType{}
	return &this
}

// NewEventAttendeesTypeWithDefaults instantiates a new EventAttendeesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventAttendeesTypeWithDefaults() *EventAttendeesType {
	this := EventAttendeesType{}
	return &this
}

// GetAttendeesGuaranteed returns the AttendeesGuaranteed field value if set, zero value otherwise.
func (o *EventAttendeesType) GetAttendeesGuaranteed() bool {
	if o == nil || IsNil(o.AttendeesGuaranteed) {
		var ret bool
		return ret
	}
	return *o.AttendeesGuaranteed
}

// GetAttendeesGuaranteedOk returns a tuple with the AttendeesGuaranteed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAttendeesType) GetAttendeesGuaranteedOk() (*bool, bool) {
	if o == nil || IsNil(o.AttendeesGuaranteed) {
		return nil, false
	}
	return o.AttendeesGuaranteed, true
}

// HasAttendeesGuaranteed returns a boolean if a field has been set.
func (o *EventAttendeesType) HasAttendeesGuaranteed() bool {
	if o != nil && !IsNil(o.AttendeesGuaranteed) {
		return true
	}

	return false
}

// SetAttendeesGuaranteed gets a reference to the given bool and assigns it to the AttendeesGuaranteed field.
func (o *EventAttendeesType) SetAttendeesGuaranteed(v bool) {
	o.AttendeesGuaranteed = &v
}

// GetNoOfAttendees returns the NoOfAttendees field value if set, zero value otherwise.
func (o *EventAttendeesType) GetNoOfAttendees() int32 {
	if o == nil || IsNil(o.NoOfAttendees) {
		var ret int32
		return ret
	}
	return *o.NoOfAttendees
}

// GetNoOfAttendeesOk returns a tuple with the NoOfAttendees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventAttendeesType) GetNoOfAttendeesOk() (*int32, bool) {
	if o == nil || IsNil(o.NoOfAttendees) {
		return nil, false
	}
	return o.NoOfAttendees, true
}

// HasNoOfAttendees returns a boolean if a field has been set.
func (o *EventAttendeesType) HasNoOfAttendees() bool {
	if o != nil && !IsNil(o.NoOfAttendees) {
		return true
	}

	return false
}

// SetNoOfAttendees gets a reference to the given int32 and assigns it to the NoOfAttendees field.
func (o *EventAttendeesType) SetNoOfAttendees(v int32) {
	o.NoOfAttendees = &v
}

func (o EventAttendeesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventAttendeesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttendeesGuaranteed) {
		toSerialize["attendeesGuaranteed"] = o.AttendeesGuaranteed
	}
	if !IsNil(o.NoOfAttendees) {
		toSerialize["noOfAttendees"] = o.NoOfAttendees
	}
	return toSerialize, nil
}

type NullableEventAttendeesType struct {
	value *EventAttendeesType
	isSet bool
}

func (v NullableEventAttendeesType) Get() *EventAttendeesType {
	return v.value
}

func (v *NullableEventAttendeesType) Set(val *EventAttendeesType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAttendeesType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAttendeesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAttendeesType(val *EventAttendeesType) *NullableEventAttendeesType {
	return &NullableEventAttendeesType{value: val, isSet: true}
}

func (v NullableEventAttendeesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAttendeesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


