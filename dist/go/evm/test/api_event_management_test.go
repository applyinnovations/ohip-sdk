/*
OPERA Cloud Sales Event Management API

Testing EventManagementApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package evm

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/evm"
)

func Test_evm_EventManagementApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EventManagementApiService CateringEventsBulkUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.CateringEventsBulkUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ChangeCateringPackageRevenue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.ChangeCateringPackageRevenue(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ChangeCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.ChangeCateringPackages(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ChangeEventResourceByMenu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.ChangeEventResourceByMenu(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ChangeEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.ChangeEvents(context.Background(), eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ChangeEventsResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.ChangeEventsResources(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ChangeEventsResourcesByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.ChangeEventsResourcesByChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService CopyCateringEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.CopyCateringEvents(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService CopyCateringPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringpackageId string
		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.CopyCateringPackage(context.Background(), cateringpackageId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService CopyEventResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.CopyEventResources(context.Background(), eventId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService DeleteCateringPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringPackageId string
		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.DeleteCateringPackage(context.Background(), cateringPackageId, blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService DeleteCateringPackageRevenue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.DeleteCateringPackageRevenue(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService DeleteCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.DeleteCateringPackages(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService DeleteEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.DeleteEvents(context.Background(), eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetBlockPostingAccountReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetBlockPostingAccountReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetCateringEventChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetCateringEventChanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetCateringEventPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetCateringEventPostings(context.Background(), eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetCateringPackageRevenue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringpackageId string
		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.GetCateringPackageRevenue(context.Background(), cateringpackageId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetCateringPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.GetCateringPackages(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEvent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetEvent(context.Background(), eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEventCalendar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetEventCalendar(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEventCalendarMultipleHotelIds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.GetEventCalendarMultipleHotelIds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEventItemSplitQuantity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string

		resp, httpRes, err := apiClient.EventManagementApi.GetEventItemSplitQuantity(context.Background(), eventId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEventResourceByMenu", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resourceId string
		var eventId string
		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.GetEventResourceByMenu(context.Background(), resourceId, eventId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEventsMultipleHotels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.GetEventsMultipleHotels(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEventsOneHotel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetEventsOneHotel(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetEventsResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetEventsResources(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetFunctionSpaceAvailability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetFunctionSpaceAvailability(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetSharedFunctionSpaceEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetSharedFunctionSpaceEvents(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService GetWaitlistedEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.GetWaitlistedEvents(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ManageAlternateEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.ManageAlternateEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ManageCateringEventPostings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.ManageCateringEventPostings(context.Background(), eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService ManageWaitlistedEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.ManageWaitlistedEvents(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService MoveEventResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventId string
		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.MoveEventResources(context.Background(), eventId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService PostCateringPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.PostCateringPackage(context.Background(), blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService PostCateringPackageRevenue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cateringpackageId string
		var blockId string

		resp, httpRes, err := apiClient.EventManagementApi.PostCateringPackageRevenue(context.Background(), cateringpackageId, blockId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService PostEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.PostEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService PostOpportunityEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventManagementApi.PostOpportunityEvents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventManagementApiService PostQuickInsertResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quickInsertId string
		var eventId string
		var hotelId string

		resp, httpRes, err := apiClient.EventManagementApi.PostQuickInsertResources(context.Background(), quickInsertId, eventId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
