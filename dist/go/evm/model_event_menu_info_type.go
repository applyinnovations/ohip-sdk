/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventMenuInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventMenuInfoType{}

// EventMenuInfoType Information about event menu.
type EventMenuInfoType struct {
	EventMenu *EventMenuType `json:"eventMenu,omitempty"`
	EventMenuId *UniqueIDType `json:"eventMenuId,omitempty"`
}

// NewEventMenuInfoType instantiates a new EventMenuInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventMenuInfoType() *EventMenuInfoType {
	this := EventMenuInfoType{}
	return &this
}

// NewEventMenuInfoTypeWithDefaults instantiates a new EventMenuInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventMenuInfoTypeWithDefaults() *EventMenuInfoType {
	this := EventMenuInfoType{}
	return &this
}

// GetEventMenu returns the EventMenu field value if set, zero value otherwise.
func (o *EventMenuInfoType) GetEventMenu() EventMenuType {
	if o == nil || IsNil(o.EventMenu) {
		var ret EventMenuType
		return ret
	}
	return *o.EventMenu
}

// GetEventMenuOk returns a tuple with the EventMenu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuInfoType) GetEventMenuOk() (*EventMenuType, bool) {
	if o == nil || IsNil(o.EventMenu) {
		return nil, false
	}
	return o.EventMenu, true
}

// HasEventMenu returns a boolean if a field has been set.
func (o *EventMenuInfoType) HasEventMenu() bool {
	if o != nil && !IsNil(o.EventMenu) {
		return true
	}

	return false
}

// SetEventMenu gets a reference to the given EventMenuType and assigns it to the EventMenu field.
func (o *EventMenuInfoType) SetEventMenu(v EventMenuType) {
	o.EventMenu = &v
}

// GetEventMenuId returns the EventMenuId field value if set, zero value otherwise.
func (o *EventMenuInfoType) GetEventMenuId() UniqueIDType {
	if o == nil || IsNil(o.EventMenuId) {
		var ret UniqueIDType
		return ret
	}
	return *o.EventMenuId
}

// GetEventMenuIdOk returns a tuple with the EventMenuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventMenuInfoType) GetEventMenuIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EventMenuId) {
		return nil, false
	}
	return o.EventMenuId, true
}

// HasEventMenuId returns a boolean if a field has been set.
func (o *EventMenuInfoType) HasEventMenuId() bool {
	if o != nil && !IsNil(o.EventMenuId) {
		return true
	}

	return false
}

// SetEventMenuId gets a reference to the given UniqueIDType and assigns it to the EventMenuId field.
func (o *EventMenuInfoType) SetEventMenuId(v UniqueIDType) {
	o.EventMenuId = &v
}

func (o EventMenuInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventMenuInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventMenu) {
		toSerialize["eventMenu"] = o.EventMenu
	}
	if !IsNil(o.EventMenuId) {
		toSerialize["eventMenuId"] = o.EventMenuId
	}
	return toSerialize, nil
}

type NullableEventMenuInfoType struct {
	value *EventMenuInfoType
	isSet bool
}

func (v NullableEventMenuInfoType) Get() *EventMenuInfoType {
	return v.value
}

func (v *NullableEventMenuInfoType) Set(val *EventMenuInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventMenuInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventMenuInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventMenuInfoType(val *EventMenuInfoType) *NullableEventMenuInfoType {
	return &NullableEventMenuInfoType{value: val, isSet: true}
}

func (v NullableEventMenuInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventMenuInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


