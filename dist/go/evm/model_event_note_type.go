/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventNoteType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNoteType{}

// EventNoteType Pertain event's comment information.
type EventNoteType struct {
	// Pertain comment text.
	Comment *string `json:"comment,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Indicates if comment are internal use only.
	Internal *bool `json:"internal,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Note code.
	NoteCode *string `json:"noteCode,omitempty"`
	NoteId *UniqueIDType `json:"noteId,omitempty"`
	// Pertain comment tile.
	NoteTitle *string `json:"noteTitle,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
	// Pertain display sequence.
	Sequence *int32 `json:"sequence,omitempty"`
}

// NewEventNoteType instantiates a new EventNoteType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNoteType() *EventNoteType {
	this := EventNoteType{}
	return &this
}

// NewEventNoteTypeWithDefaults instantiates a new EventNoteType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNoteTypeWithDefaults() *EventNoteType {
	this := EventNoteType{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *EventNoteType) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *EventNoteType) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *EventNoteType) SetComment(v string) {
	o.Comment = &v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *EventNoteType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *EventNoteType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *EventNoteType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *EventNoteType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *EventNoteType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *EventNoteType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *EventNoteType) GetInternal() bool {
	if o == nil || IsNil(o.Internal) {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetInternalOk() (*bool, bool) {
	if o == nil || IsNil(o.Internal) {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *EventNoteType) HasInternal() bool {
	if o != nil && !IsNil(o.Internal) {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *EventNoteType) SetInternal(v bool) {
	o.Internal = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *EventNoteType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *EventNoteType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *EventNoteType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *EventNoteType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *EventNoteType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *EventNoteType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetNoteCode returns the NoteCode field value if set, zero value otherwise.
func (o *EventNoteType) GetNoteCode() string {
	if o == nil || IsNil(o.NoteCode) {
		var ret string
		return ret
	}
	return *o.NoteCode
}

// GetNoteCodeOk returns a tuple with the NoteCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetNoteCodeOk() (*string, bool) {
	if o == nil || IsNil(o.NoteCode) {
		return nil, false
	}
	return o.NoteCode, true
}

// HasNoteCode returns a boolean if a field has been set.
func (o *EventNoteType) HasNoteCode() bool {
	if o != nil && !IsNil(o.NoteCode) {
		return true
	}

	return false
}

// SetNoteCode gets a reference to the given string and assigns it to the NoteCode field.
func (o *EventNoteType) SetNoteCode(v string) {
	o.NoteCode = &v
}

// GetNoteId returns the NoteId field value if set, zero value otherwise.
func (o *EventNoteType) GetNoteId() UniqueIDType {
	if o == nil || IsNil(o.NoteId) {
		var ret UniqueIDType
		return ret
	}
	return *o.NoteId
}

// GetNoteIdOk returns a tuple with the NoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetNoteIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.NoteId) {
		return nil, false
	}
	return o.NoteId, true
}

// HasNoteId returns a boolean if a field has been set.
func (o *EventNoteType) HasNoteId() bool {
	if o != nil && !IsNil(o.NoteId) {
		return true
	}

	return false
}

// SetNoteId gets a reference to the given UniqueIDType and assigns it to the NoteId field.
func (o *EventNoteType) SetNoteId(v UniqueIDType) {
	o.NoteId = &v
}

// GetNoteTitle returns the NoteTitle field value if set, zero value otherwise.
func (o *EventNoteType) GetNoteTitle() string {
	if o == nil || IsNil(o.NoteTitle) {
		var ret string
		return ret
	}
	return *o.NoteTitle
}

// GetNoteTitleOk returns a tuple with the NoteTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetNoteTitleOk() (*string, bool) {
	if o == nil || IsNil(o.NoteTitle) {
		return nil, false
	}
	return o.NoteTitle, true
}

// HasNoteTitle returns a boolean if a field has been set.
func (o *EventNoteType) HasNoteTitle() bool {
	if o != nil && !IsNil(o.NoteTitle) {
		return true
	}

	return false
}

// SetNoteTitle gets a reference to the given string and assigns it to the NoteTitle field.
func (o *EventNoteType) SetNoteTitle(v string) {
	o.NoteTitle = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *EventNoteType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *EventNoteType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *EventNoteType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise.
func (o *EventNoteType) GetSequence() int32 {
	if o == nil || IsNil(o.Sequence) {
		var ret int32
		return ret
	}
	return *o.Sequence
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNoteType) GetSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Sequence) {
		return nil, false
	}
	return o.Sequence, true
}

// HasSequence returns a boolean if a field has been set.
func (o *EventNoteType) HasSequence() bool {
	if o != nil && !IsNil(o.Sequence) {
		return true
	}

	return false
}

// SetSequence gets a reference to the given int32 and assigns it to the Sequence field.
func (o *EventNoteType) SetSequence(v int32) {
	o.Sequence = &v
}

func (o EventNoteType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNoteType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.Internal) {
		toSerialize["internal"] = o.Internal
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.NoteCode) {
		toSerialize["noteCode"] = o.NoteCode
	}
	if !IsNil(o.NoteId) {
		toSerialize["noteId"] = o.NoteId
	}
	if !IsNil(o.NoteTitle) {
		toSerialize["noteTitle"] = o.NoteTitle
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	if !IsNil(o.Sequence) {
		toSerialize["sequence"] = o.Sequence
	}
	return toSerialize, nil
}

type NullableEventNoteType struct {
	value *EventNoteType
	isSet bool
}

func (v NullableEventNoteType) Get() *EventNoteType {
	return v.value
}

func (v *NullableEventNoteType) Set(val *EventNoteType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNoteType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNoteType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNoteType(val *EventNoteType) *NullableEventNoteType {
	return &NullableEventNoteType{value: val, isSet: true}
}

func (v NullableEventNoteType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNoteType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


