/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventInfoType{}

// EventInfoType Catering Event information.
type EventInfoType struct {
	// Pertain event few information about events.
	AltEventsDetail []LightEventDetailType `json:"altEventsDetail,omitempty"`
	EventBlockInfo *BlockType `json:"eventBlockInfo,omitempty"`
	EventDetail *EventDetailType `json:"eventDetail,omitempty"`
	// Collection of lamp indicators.
	EventIndicators []IndicatorType `json:"eventIndicators,omitempty"`
	// Pertain event information.
	EventNotes []EventNoteType `json:"eventNotes,omitempty"`
	EventPrimaryInfo *EventPrimaryInfoType `json:"eventPrimaryInfo,omitempty"`
	// Event resources information.
	EventResources []CateringEventResourceType `json:"eventResources,omitempty"`
	EventRevenues *EventRevenuesInformationType `json:"eventRevenues,omitempty"`
	FunctionSpaceInformation *EventFunctionSpaceType `json:"functionSpaceInformation,omitempty"`
	MasterEventDetail *LightEventDetailType `json:"masterEventDetail,omitempty"`
	OnTheBooksRevenue *CurrencyAmountType `json:"onTheBooksRevenue,omitempty"`
	ProcessInstructions *EventProcessInstructionsType `json:"processInstructions,omitempty"`
	// Pertain event few information about events.
	SubEventsDetail []LightEventDetailType `json:"subEventsDetail,omitempty"`
}

// NewEventInfoType instantiates a new EventInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventInfoType() *EventInfoType {
	this := EventInfoType{}
	return &this
}

// NewEventInfoTypeWithDefaults instantiates a new EventInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventInfoTypeWithDefaults() *EventInfoType {
	this := EventInfoType{}
	return &this
}

// GetAltEventsDetail returns the AltEventsDetail field value if set, zero value otherwise.
func (o *EventInfoType) GetAltEventsDetail() []LightEventDetailType {
	if o == nil || IsNil(o.AltEventsDetail) {
		var ret []LightEventDetailType
		return ret
	}
	return o.AltEventsDetail
}

// GetAltEventsDetailOk returns a tuple with the AltEventsDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetAltEventsDetailOk() ([]LightEventDetailType, bool) {
	if o == nil || IsNil(o.AltEventsDetail) {
		return nil, false
	}
	return o.AltEventsDetail, true
}

// HasAltEventsDetail returns a boolean if a field has been set.
func (o *EventInfoType) HasAltEventsDetail() bool {
	if o != nil && !IsNil(o.AltEventsDetail) {
		return true
	}

	return false
}

// SetAltEventsDetail gets a reference to the given []LightEventDetailType and assigns it to the AltEventsDetail field.
func (o *EventInfoType) SetAltEventsDetail(v []LightEventDetailType) {
	o.AltEventsDetail = v
}

// GetEventBlockInfo returns the EventBlockInfo field value if set, zero value otherwise.
func (o *EventInfoType) GetEventBlockInfo() BlockType {
	if o == nil || IsNil(o.EventBlockInfo) {
		var ret BlockType
		return ret
	}
	return *o.EventBlockInfo
}

// GetEventBlockInfoOk returns a tuple with the EventBlockInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetEventBlockInfoOk() (*BlockType, bool) {
	if o == nil || IsNil(o.EventBlockInfo) {
		return nil, false
	}
	return o.EventBlockInfo, true
}

// HasEventBlockInfo returns a boolean if a field has been set.
func (o *EventInfoType) HasEventBlockInfo() bool {
	if o != nil && !IsNil(o.EventBlockInfo) {
		return true
	}

	return false
}

// SetEventBlockInfo gets a reference to the given BlockType and assigns it to the EventBlockInfo field.
func (o *EventInfoType) SetEventBlockInfo(v BlockType) {
	o.EventBlockInfo = &v
}

// GetEventDetail returns the EventDetail field value if set, zero value otherwise.
func (o *EventInfoType) GetEventDetail() EventDetailType {
	if o == nil || IsNil(o.EventDetail) {
		var ret EventDetailType
		return ret
	}
	return *o.EventDetail
}

// GetEventDetailOk returns a tuple with the EventDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetEventDetailOk() (*EventDetailType, bool) {
	if o == nil || IsNil(o.EventDetail) {
		return nil, false
	}
	return o.EventDetail, true
}

// HasEventDetail returns a boolean if a field has been set.
func (o *EventInfoType) HasEventDetail() bool {
	if o != nil && !IsNil(o.EventDetail) {
		return true
	}

	return false
}

// SetEventDetail gets a reference to the given EventDetailType and assigns it to the EventDetail field.
func (o *EventInfoType) SetEventDetail(v EventDetailType) {
	o.EventDetail = &v
}

// GetEventIndicators returns the EventIndicators field value if set, zero value otherwise.
func (o *EventInfoType) GetEventIndicators() []IndicatorType {
	if o == nil || IsNil(o.EventIndicators) {
		var ret []IndicatorType
		return ret
	}
	return o.EventIndicators
}

// GetEventIndicatorsOk returns a tuple with the EventIndicators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetEventIndicatorsOk() ([]IndicatorType, bool) {
	if o == nil || IsNil(o.EventIndicators) {
		return nil, false
	}
	return o.EventIndicators, true
}

// HasEventIndicators returns a boolean if a field has been set.
func (o *EventInfoType) HasEventIndicators() bool {
	if o != nil && !IsNil(o.EventIndicators) {
		return true
	}

	return false
}

// SetEventIndicators gets a reference to the given []IndicatorType and assigns it to the EventIndicators field.
func (o *EventInfoType) SetEventIndicators(v []IndicatorType) {
	o.EventIndicators = v
}

// GetEventNotes returns the EventNotes field value if set, zero value otherwise.
func (o *EventInfoType) GetEventNotes() []EventNoteType {
	if o == nil || IsNil(o.EventNotes) {
		var ret []EventNoteType
		return ret
	}
	return o.EventNotes
}

// GetEventNotesOk returns a tuple with the EventNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetEventNotesOk() ([]EventNoteType, bool) {
	if o == nil || IsNil(o.EventNotes) {
		return nil, false
	}
	return o.EventNotes, true
}

// HasEventNotes returns a boolean if a field has been set.
func (o *EventInfoType) HasEventNotes() bool {
	if o != nil && !IsNil(o.EventNotes) {
		return true
	}

	return false
}

// SetEventNotes gets a reference to the given []EventNoteType and assigns it to the EventNotes field.
func (o *EventInfoType) SetEventNotes(v []EventNoteType) {
	o.EventNotes = v
}

// GetEventPrimaryInfo returns the EventPrimaryInfo field value if set, zero value otherwise.
func (o *EventInfoType) GetEventPrimaryInfo() EventPrimaryInfoType {
	if o == nil || IsNil(o.EventPrimaryInfo) {
		var ret EventPrimaryInfoType
		return ret
	}
	return *o.EventPrimaryInfo
}

// GetEventPrimaryInfoOk returns a tuple with the EventPrimaryInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetEventPrimaryInfoOk() (*EventPrimaryInfoType, bool) {
	if o == nil || IsNil(o.EventPrimaryInfo) {
		return nil, false
	}
	return o.EventPrimaryInfo, true
}

// HasEventPrimaryInfo returns a boolean if a field has been set.
func (o *EventInfoType) HasEventPrimaryInfo() bool {
	if o != nil && !IsNil(o.EventPrimaryInfo) {
		return true
	}

	return false
}

// SetEventPrimaryInfo gets a reference to the given EventPrimaryInfoType and assigns it to the EventPrimaryInfo field.
func (o *EventInfoType) SetEventPrimaryInfo(v EventPrimaryInfoType) {
	o.EventPrimaryInfo = &v
}

// GetEventResources returns the EventResources field value if set, zero value otherwise.
func (o *EventInfoType) GetEventResources() []CateringEventResourceType {
	if o == nil || IsNil(o.EventResources) {
		var ret []CateringEventResourceType
		return ret
	}
	return o.EventResources
}

// GetEventResourcesOk returns a tuple with the EventResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetEventResourcesOk() ([]CateringEventResourceType, bool) {
	if o == nil || IsNil(o.EventResources) {
		return nil, false
	}
	return o.EventResources, true
}

// HasEventResources returns a boolean if a field has been set.
func (o *EventInfoType) HasEventResources() bool {
	if o != nil && !IsNil(o.EventResources) {
		return true
	}

	return false
}

// SetEventResources gets a reference to the given []CateringEventResourceType and assigns it to the EventResources field.
func (o *EventInfoType) SetEventResources(v []CateringEventResourceType) {
	o.EventResources = v
}

// GetEventRevenues returns the EventRevenues field value if set, zero value otherwise.
func (o *EventInfoType) GetEventRevenues() EventRevenuesInformationType {
	if o == nil || IsNil(o.EventRevenues) {
		var ret EventRevenuesInformationType
		return ret
	}
	return *o.EventRevenues
}

// GetEventRevenuesOk returns a tuple with the EventRevenues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetEventRevenuesOk() (*EventRevenuesInformationType, bool) {
	if o == nil || IsNil(o.EventRevenues) {
		return nil, false
	}
	return o.EventRevenues, true
}

// HasEventRevenues returns a boolean if a field has been set.
func (o *EventInfoType) HasEventRevenues() bool {
	if o != nil && !IsNil(o.EventRevenues) {
		return true
	}

	return false
}

// SetEventRevenues gets a reference to the given EventRevenuesInformationType and assigns it to the EventRevenues field.
func (o *EventInfoType) SetEventRevenues(v EventRevenuesInformationType) {
	o.EventRevenues = &v
}

// GetFunctionSpaceInformation returns the FunctionSpaceInformation field value if set, zero value otherwise.
func (o *EventInfoType) GetFunctionSpaceInformation() EventFunctionSpaceType {
	if o == nil || IsNil(o.FunctionSpaceInformation) {
		var ret EventFunctionSpaceType
		return ret
	}
	return *o.FunctionSpaceInformation
}

// GetFunctionSpaceInformationOk returns a tuple with the FunctionSpaceInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetFunctionSpaceInformationOk() (*EventFunctionSpaceType, bool) {
	if o == nil || IsNil(o.FunctionSpaceInformation) {
		return nil, false
	}
	return o.FunctionSpaceInformation, true
}

// HasFunctionSpaceInformation returns a boolean if a field has been set.
func (o *EventInfoType) HasFunctionSpaceInformation() bool {
	if o != nil && !IsNil(o.FunctionSpaceInformation) {
		return true
	}

	return false
}

// SetFunctionSpaceInformation gets a reference to the given EventFunctionSpaceType and assigns it to the FunctionSpaceInformation field.
func (o *EventInfoType) SetFunctionSpaceInformation(v EventFunctionSpaceType) {
	o.FunctionSpaceInformation = &v
}

// GetMasterEventDetail returns the MasterEventDetail field value if set, zero value otherwise.
func (o *EventInfoType) GetMasterEventDetail() LightEventDetailType {
	if o == nil || IsNil(o.MasterEventDetail) {
		var ret LightEventDetailType
		return ret
	}
	return *o.MasterEventDetail
}

// GetMasterEventDetailOk returns a tuple with the MasterEventDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetMasterEventDetailOk() (*LightEventDetailType, bool) {
	if o == nil || IsNil(o.MasterEventDetail) {
		return nil, false
	}
	return o.MasterEventDetail, true
}

// HasMasterEventDetail returns a boolean if a field has been set.
func (o *EventInfoType) HasMasterEventDetail() bool {
	if o != nil && !IsNil(o.MasterEventDetail) {
		return true
	}

	return false
}

// SetMasterEventDetail gets a reference to the given LightEventDetailType and assigns it to the MasterEventDetail field.
func (o *EventInfoType) SetMasterEventDetail(v LightEventDetailType) {
	o.MasterEventDetail = &v
}

// GetOnTheBooksRevenue returns the OnTheBooksRevenue field value if set, zero value otherwise.
func (o *EventInfoType) GetOnTheBooksRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.OnTheBooksRevenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.OnTheBooksRevenue
}

// GetOnTheBooksRevenueOk returns a tuple with the OnTheBooksRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetOnTheBooksRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.OnTheBooksRevenue) {
		return nil, false
	}
	return o.OnTheBooksRevenue, true
}

// HasOnTheBooksRevenue returns a boolean if a field has been set.
func (o *EventInfoType) HasOnTheBooksRevenue() bool {
	if o != nil && !IsNil(o.OnTheBooksRevenue) {
		return true
	}

	return false
}

// SetOnTheBooksRevenue gets a reference to the given CurrencyAmountType and assigns it to the OnTheBooksRevenue field.
func (o *EventInfoType) SetOnTheBooksRevenue(v CurrencyAmountType) {
	o.OnTheBooksRevenue = &v
}

// GetProcessInstructions returns the ProcessInstructions field value if set, zero value otherwise.
func (o *EventInfoType) GetProcessInstructions() EventProcessInstructionsType {
	if o == nil || IsNil(o.ProcessInstructions) {
		var ret EventProcessInstructionsType
		return ret
	}
	return *o.ProcessInstructions
}

// GetProcessInstructionsOk returns a tuple with the ProcessInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetProcessInstructionsOk() (*EventProcessInstructionsType, bool) {
	if o == nil || IsNil(o.ProcessInstructions) {
		return nil, false
	}
	return o.ProcessInstructions, true
}

// HasProcessInstructions returns a boolean if a field has been set.
func (o *EventInfoType) HasProcessInstructions() bool {
	if o != nil && !IsNil(o.ProcessInstructions) {
		return true
	}

	return false
}

// SetProcessInstructions gets a reference to the given EventProcessInstructionsType and assigns it to the ProcessInstructions field.
func (o *EventInfoType) SetProcessInstructions(v EventProcessInstructionsType) {
	o.ProcessInstructions = &v
}

// GetSubEventsDetail returns the SubEventsDetail field value if set, zero value otherwise.
func (o *EventInfoType) GetSubEventsDetail() []LightEventDetailType {
	if o == nil || IsNil(o.SubEventsDetail) {
		var ret []LightEventDetailType
		return ret
	}
	return o.SubEventsDetail
}

// GetSubEventsDetailOk returns a tuple with the SubEventsDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventInfoType) GetSubEventsDetailOk() ([]LightEventDetailType, bool) {
	if o == nil || IsNil(o.SubEventsDetail) {
		return nil, false
	}
	return o.SubEventsDetail, true
}

// HasSubEventsDetail returns a boolean if a field has been set.
func (o *EventInfoType) HasSubEventsDetail() bool {
	if o != nil && !IsNil(o.SubEventsDetail) {
		return true
	}

	return false
}

// SetSubEventsDetail gets a reference to the given []LightEventDetailType and assigns it to the SubEventsDetail field.
func (o *EventInfoType) SetSubEventsDetail(v []LightEventDetailType) {
	o.SubEventsDetail = v
}

func (o EventInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AltEventsDetail) {
		toSerialize["altEventsDetail"] = o.AltEventsDetail
	}
	if !IsNil(o.EventBlockInfo) {
		toSerialize["eventBlockInfo"] = o.EventBlockInfo
	}
	if !IsNil(o.EventDetail) {
		toSerialize["eventDetail"] = o.EventDetail
	}
	if !IsNil(o.EventIndicators) {
		toSerialize["eventIndicators"] = o.EventIndicators
	}
	if !IsNil(o.EventNotes) {
		toSerialize["eventNotes"] = o.EventNotes
	}
	if !IsNil(o.EventPrimaryInfo) {
		toSerialize["eventPrimaryInfo"] = o.EventPrimaryInfo
	}
	if !IsNil(o.EventResources) {
		toSerialize["eventResources"] = o.EventResources
	}
	if !IsNil(o.EventRevenues) {
		toSerialize["eventRevenues"] = o.EventRevenues
	}
	if !IsNil(o.FunctionSpaceInformation) {
		toSerialize["functionSpaceInformation"] = o.FunctionSpaceInformation
	}
	if !IsNil(o.MasterEventDetail) {
		toSerialize["masterEventDetail"] = o.MasterEventDetail
	}
	if !IsNil(o.OnTheBooksRevenue) {
		toSerialize["onTheBooksRevenue"] = o.OnTheBooksRevenue
	}
	if !IsNil(o.ProcessInstructions) {
		toSerialize["processInstructions"] = o.ProcessInstructions
	}
	if !IsNil(o.SubEventsDetail) {
		toSerialize["subEventsDetail"] = o.SubEventsDetail
	}
	return toSerialize, nil
}

type NullableEventInfoType struct {
	value *EventInfoType
	isSet bool
}

func (v NullableEventInfoType) Get() *EventInfoType {
	return v.value
}

func (v *NullableEventInfoType) Set(val *EventInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInfoType(val *EventInfoType) *NullableEventInfoType {
	return &NullableEventInfoType{value: val, isSet: true}
}

func (v NullableEventInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


