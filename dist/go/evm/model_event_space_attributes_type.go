/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventSpaceAttributesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSpaceAttributesType{}

// EventSpaceAttributesType Collection of the Events Booked/Scheduled for the function spaces in the Hotel for the particular time period.
type EventSpaceAttributesType struct {
	SpaceArea *SpaceAreaType `json:"spaceArea,omitempty"`
	// Flag that tells whether the functionSpaceDetails is Shareable or not.
	Shareable *bool `json:"shareable,omitempty"`
	// Flag that tells whether the functionSpaceDetails is a Combo or not.
	ComboSpace *bool `json:"comboSpace,omitempty"`
	// Flag that tells whether the functionSpaceDetails is an Alternate Room or not.
	Alternate *bool `json:"alternate,omitempty"`
	// Specifies the maximum occupancy this functionSpaceDetails can handle.
	MaximumOccupancy *int32 `json:"maximumOccupancy,omitempty"`
	// Flag that tells whether the functionSpaceDetails is a Combo Element or not.
	ComboElement *bool `json:"comboElement,omitempty"`
	// Combo Room Number if the functionSpaceDetails is a Combo Element.
	ComboRoom *string `json:"comboRoom,omitempty"`
}

// NewEventSpaceAttributesType instantiates a new EventSpaceAttributesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSpaceAttributesType() *EventSpaceAttributesType {
	this := EventSpaceAttributesType{}
	return &this
}

// NewEventSpaceAttributesTypeWithDefaults instantiates a new EventSpaceAttributesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSpaceAttributesTypeWithDefaults() *EventSpaceAttributesType {
	this := EventSpaceAttributesType{}
	return &this
}

// GetSpaceArea returns the SpaceArea field value if set, zero value otherwise.
func (o *EventSpaceAttributesType) GetSpaceArea() SpaceAreaType {
	if o == nil || IsNil(o.SpaceArea) {
		var ret SpaceAreaType
		return ret
	}
	return *o.SpaceArea
}

// GetSpaceAreaOk returns a tuple with the SpaceArea field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceAttributesType) GetSpaceAreaOk() (*SpaceAreaType, bool) {
	if o == nil || IsNil(o.SpaceArea) {
		return nil, false
	}
	return o.SpaceArea, true
}

// HasSpaceArea returns a boolean if a field has been set.
func (o *EventSpaceAttributesType) HasSpaceArea() bool {
	if o != nil && !IsNil(o.SpaceArea) {
		return true
	}

	return false
}

// SetSpaceArea gets a reference to the given SpaceAreaType and assigns it to the SpaceArea field.
func (o *EventSpaceAttributesType) SetSpaceArea(v SpaceAreaType) {
	o.SpaceArea = &v
}

// GetShareable returns the Shareable field value if set, zero value otherwise.
func (o *EventSpaceAttributesType) GetShareable() bool {
	if o == nil || IsNil(o.Shareable) {
		var ret bool
		return ret
	}
	return *o.Shareable
}

// GetShareableOk returns a tuple with the Shareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceAttributesType) GetShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.Shareable) {
		return nil, false
	}
	return o.Shareable, true
}

// HasShareable returns a boolean if a field has been set.
func (o *EventSpaceAttributesType) HasShareable() bool {
	if o != nil && !IsNil(o.Shareable) {
		return true
	}

	return false
}

// SetShareable gets a reference to the given bool and assigns it to the Shareable field.
func (o *EventSpaceAttributesType) SetShareable(v bool) {
	o.Shareable = &v
}

// GetComboSpace returns the ComboSpace field value if set, zero value otherwise.
func (o *EventSpaceAttributesType) GetComboSpace() bool {
	if o == nil || IsNil(o.ComboSpace) {
		var ret bool
		return ret
	}
	return *o.ComboSpace
}

// GetComboSpaceOk returns a tuple with the ComboSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceAttributesType) GetComboSpaceOk() (*bool, bool) {
	if o == nil || IsNil(o.ComboSpace) {
		return nil, false
	}
	return o.ComboSpace, true
}

// HasComboSpace returns a boolean if a field has been set.
func (o *EventSpaceAttributesType) HasComboSpace() bool {
	if o != nil && !IsNil(o.ComboSpace) {
		return true
	}

	return false
}

// SetComboSpace gets a reference to the given bool and assigns it to the ComboSpace field.
func (o *EventSpaceAttributesType) SetComboSpace(v bool) {
	o.ComboSpace = &v
}

// GetAlternate returns the Alternate field value if set, zero value otherwise.
func (o *EventSpaceAttributesType) GetAlternate() bool {
	if o == nil || IsNil(o.Alternate) {
		var ret bool
		return ret
	}
	return *o.Alternate
}

// GetAlternateOk returns a tuple with the Alternate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceAttributesType) GetAlternateOk() (*bool, bool) {
	if o == nil || IsNil(o.Alternate) {
		return nil, false
	}
	return o.Alternate, true
}

// HasAlternate returns a boolean if a field has been set.
func (o *EventSpaceAttributesType) HasAlternate() bool {
	if o != nil && !IsNil(o.Alternate) {
		return true
	}

	return false
}

// SetAlternate gets a reference to the given bool and assigns it to the Alternate field.
func (o *EventSpaceAttributesType) SetAlternate(v bool) {
	o.Alternate = &v
}

// GetMaximumOccupancy returns the MaximumOccupancy field value if set, zero value otherwise.
func (o *EventSpaceAttributesType) GetMaximumOccupancy() int32 {
	if o == nil || IsNil(o.MaximumOccupancy) {
		var ret int32
		return ret
	}
	return *o.MaximumOccupancy
}

// GetMaximumOccupancyOk returns a tuple with the MaximumOccupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceAttributesType) GetMaximumOccupancyOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumOccupancy) {
		return nil, false
	}
	return o.MaximumOccupancy, true
}

// HasMaximumOccupancy returns a boolean if a field has been set.
func (o *EventSpaceAttributesType) HasMaximumOccupancy() bool {
	if o != nil && !IsNil(o.MaximumOccupancy) {
		return true
	}

	return false
}

// SetMaximumOccupancy gets a reference to the given int32 and assigns it to the MaximumOccupancy field.
func (o *EventSpaceAttributesType) SetMaximumOccupancy(v int32) {
	o.MaximumOccupancy = &v
}

// GetComboElement returns the ComboElement field value if set, zero value otherwise.
func (o *EventSpaceAttributesType) GetComboElement() bool {
	if o == nil || IsNil(o.ComboElement) {
		var ret bool
		return ret
	}
	return *o.ComboElement
}

// GetComboElementOk returns a tuple with the ComboElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceAttributesType) GetComboElementOk() (*bool, bool) {
	if o == nil || IsNil(o.ComboElement) {
		return nil, false
	}
	return o.ComboElement, true
}

// HasComboElement returns a boolean if a field has been set.
func (o *EventSpaceAttributesType) HasComboElement() bool {
	if o != nil && !IsNil(o.ComboElement) {
		return true
	}

	return false
}

// SetComboElement gets a reference to the given bool and assigns it to the ComboElement field.
func (o *EventSpaceAttributesType) SetComboElement(v bool) {
	o.ComboElement = &v
}

// GetComboRoom returns the ComboRoom field value if set, zero value otherwise.
func (o *EventSpaceAttributesType) GetComboRoom() string {
	if o == nil || IsNil(o.ComboRoom) {
		var ret string
		return ret
	}
	return *o.ComboRoom
}

// GetComboRoomOk returns a tuple with the ComboRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceAttributesType) GetComboRoomOk() (*string, bool) {
	if o == nil || IsNil(o.ComboRoom) {
		return nil, false
	}
	return o.ComboRoom, true
}

// HasComboRoom returns a boolean if a field has been set.
func (o *EventSpaceAttributesType) HasComboRoom() bool {
	if o != nil && !IsNil(o.ComboRoom) {
		return true
	}

	return false
}

// SetComboRoom gets a reference to the given string and assigns it to the ComboRoom field.
func (o *EventSpaceAttributesType) SetComboRoom(v string) {
	o.ComboRoom = &v
}

func (o EventSpaceAttributesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSpaceAttributesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SpaceArea) {
		toSerialize["spaceArea"] = o.SpaceArea
	}
	if !IsNil(o.Shareable) {
		toSerialize["shareable"] = o.Shareable
	}
	if !IsNil(o.ComboSpace) {
		toSerialize["comboSpace"] = o.ComboSpace
	}
	if !IsNil(o.Alternate) {
		toSerialize["alternate"] = o.Alternate
	}
	if !IsNil(o.MaximumOccupancy) {
		toSerialize["maximumOccupancy"] = o.MaximumOccupancy
	}
	if !IsNil(o.ComboElement) {
		toSerialize["comboElement"] = o.ComboElement
	}
	if !IsNil(o.ComboRoom) {
		toSerialize["comboRoom"] = o.ComboRoom
	}
	return toSerialize, nil
}

type NullableEventSpaceAttributesType struct {
	value *EventSpaceAttributesType
	isSet bool
}

func (v NullableEventSpaceAttributesType) Get() *EventSpaceAttributesType {
	return v.value
}

func (v *NullableEventSpaceAttributesType) Set(val *EventSpaceAttributesType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSpaceAttributesType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSpaceAttributesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSpaceAttributesType(val *EventSpaceAttributesType) *NullableEventSpaceAttributesType {
	return &NullableEventSpaceAttributesType{value: val, isSet: true}
}

func (v NullableEventSpaceAttributesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSpaceAttributesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


