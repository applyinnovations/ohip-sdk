/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventPrimaryInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventPrimaryInfoType{}

// EventPrimaryInfoType Pertain event identifications.
type EventPrimaryInfoType struct {
	EventId *EventId `json:"eventId,omitempty"`
	// Hotel code where event will be organized.
	HotelId *string `json:"hotelId,omitempty"`
	// Indicates whether to delete/inactive the sub event(s) of the master event.
	IncludeSubEvents *bool `json:"includeSubEvents,omitempty"`
}

// NewEventPrimaryInfoType instantiates a new EventPrimaryInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventPrimaryInfoType() *EventPrimaryInfoType {
	this := EventPrimaryInfoType{}
	return &this
}

// NewEventPrimaryInfoTypeWithDefaults instantiates a new EventPrimaryInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventPrimaryInfoTypeWithDefaults() *EventPrimaryInfoType {
	this := EventPrimaryInfoType{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *EventPrimaryInfoType) GetEventId() EventId {
	if o == nil || IsNil(o.EventId) {
		var ret EventId
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPrimaryInfoType) GetEventIdOk() (*EventId, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *EventPrimaryInfoType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given EventId and assigns it to the EventId field.
func (o *EventPrimaryInfoType) SetEventId(v EventId) {
	o.EventId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *EventPrimaryInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPrimaryInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *EventPrimaryInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *EventPrimaryInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetIncludeSubEvents returns the IncludeSubEvents field value if set, zero value otherwise.
func (o *EventPrimaryInfoType) GetIncludeSubEvents() bool {
	if o == nil || IsNil(o.IncludeSubEvents) {
		var ret bool
		return ret
	}
	return *o.IncludeSubEvents
}

// GetIncludeSubEventsOk returns a tuple with the IncludeSubEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPrimaryInfoType) GetIncludeSubEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeSubEvents) {
		return nil, false
	}
	return o.IncludeSubEvents, true
}

// HasIncludeSubEvents returns a boolean if a field has been set.
func (o *EventPrimaryInfoType) HasIncludeSubEvents() bool {
	if o != nil && !IsNil(o.IncludeSubEvents) {
		return true
	}

	return false
}

// SetIncludeSubEvents gets a reference to the given bool and assigns it to the IncludeSubEvents field.
func (o *EventPrimaryInfoType) SetIncludeSubEvents(v bool) {
	o.IncludeSubEvents = &v
}

func (o EventPrimaryInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventPrimaryInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.IncludeSubEvents) {
		toSerialize["includeSubEvents"] = o.IncludeSubEvents
	}
	return toSerialize, nil
}

type NullableEventPrimaryInfoType struct {
	value *EventPrimaryInfoType
	isSet bool
}

func (v NullableEventPrimaryInfoType) Get() *EventPrimaryInfoType {
	return v.value
}

func (v *NullableEventPrimaryInfoType) Set(val *EventPrimaryInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventPrimaryInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventPrimaryInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventPrimaryInfoType(val *EventPrimaryInfoType) *NullableEventPrimaryInfoType {
	return &NullableEventPrimaryInfoType{value: val, isSet: true}
}

func (v NullableEventPrimaryInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventPrimaryInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


