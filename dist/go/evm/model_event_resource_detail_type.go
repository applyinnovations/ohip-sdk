/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventResourceDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventResourceDetailType{}

// EventResourceDetailType Detail information of resource which can be a Menu, Item or Space.
type EventResourceDetailType struct {
	EventDetailInfo *EventInfoType `json:"eventDetailInfo,omitempty"`
	Menu *EventMenuInfoType `json:"menu,omitempty"`
	Item *EventItemInfoType `json:"item,omitempty"`
}

// NewEventResourceDetailType instantiates a new EventResourceDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventResourceDetailType() *EventResourceDetailType {
	this := EventResourceDetailType{}
	return &this
}

// NewEventResourceDetailTypeWithDefaults instantiates a new EventResourceDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventResourceDetailTypeWithDefaults() *EventResourceDetailType {
	this := EventResourceDetailType{}
	return &this
}

// GetEventDetailInfo returns the EventDetailInfo field value if set, zero value otherwise.
func (o *EventResourceDetailType) GetEventDetailInfo() EventInfoType {
	if o == nil || IsNil(o.EventDetailInfo) {
		var ret EventInfoType
		return ret
	}
	return *o.EventDetailInfo
}

// GetEventDetailInfoOk returns a tuple with the EventDetailInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResourceDetailType) GetEventDetailInfoOk() (*EventInfoType, bool) {
	if o == nil || IsNil(o.EventDetailInfo) {
		return nil, false
	}
	return o.EventDetailInfo, true
}

// HasEventDetailInfo returns a boolean if a field has been set.
func (o *EventResourceDetailType) HasEventDetailInfo() bool {
	if o != nil && !IsNil(o.EventDetailInfo) {
		return true
	}

	return false
}

// SetEventDetailInfo gets a reference to the given EventInfoType and assigns it to the EventDetailInfo field.
func (o *EventResourceDetailType) SetEventDetailInfo(v EventInfoType) {
	o.EventDetailInfo = &v
}

// GetMenu returns the Menu field value if set, zero value otherwise.
func (o *EventResourceDetailType) GetMenu() EventMenuInfoType {
	if o == nil || IsNil(o.Menu) {
		var ret EventMenuInfoType
		return ret
	}
	return *o.Menu
}

// GetMenuOk returns a tuple with the Menu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResourceDetailType) GetMenuOk() (*EventMenuInfoType, bool) {
	if o == nil || IsNil(o.Menu) {
		return nil, false
	}
	return o.Menu, true
}

// HasMenu returns a boolean if a field has been set.
func (o *EventResourceDetailType) HasMenu() bool {
	if o != nil && !IsNil(o.Menu) {
		return true
	}

	return false
}

// SetMenu gets a reference to the given EventMenuInfoType and assigns it to the Menu field.
func (o *EventResourceDetailType) SetMenu(v EventMenuInfoType) {
	o.Menu = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *EventResourceDetailType) GetItem() EventItemInfoType {
	if o == nil || IsNil(o.Item) {
		var ret EventItemInfoType
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResourceDetailType) GetItemOk() (*EventItemInfoType, bool) {
	if o == nil || IsNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *EventResourceDetailType) HasItem() bool {
	if o != nil && !IsNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given EventItemInfoType and assigns it to the Item field.
func (o *EventResourceDetailType) SetItem(v EventItemInfoType) {
	o.Item = &v
}

func (o EventResourceDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventResourceDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventDetailInfo) {
		toSerialize["eventDetailInfo"] = o.EventDetailInfo
	}
	if !IsNil(o.Menu) {
		toSerialize["menu"] = o.Menu
	}
	if !IsNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	return toSerialize, nil
}

type NullableEventResourceDetailType struct {
	value *EventResourceDetailType
	isSet bool
}

func (v NullableEventResourceDetailType) Get() *EventResourceDetailType {
	return v.value
}

func (v *NullableEventResourceDetailType) Set(val *EventResourceDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventResourceDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventResourceDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventResourceDetailType(val *EventResourceDetailType) *NullableEventResourceDetailType {
	return &NullableEventResourceDetailType{value: val, isSet: true}
}

func (v NullableEventResourceDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventResourceDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


