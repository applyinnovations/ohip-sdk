/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the AlertType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertType{}

// AlertType struct for AlertType
type AlertType struct {
	Area *AlertAreaType `json:"area,omitempty"`
	// Code identifying the type of alert.
	Code *string `json:"code,omitempty"`
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// The alert message.
	Description *string `json:"description,omitempty"`
	// Indicate whether the alert is a global that is automatically and dynamically attached to all reservations that meet the alert criteria.
	Global *bool `json:"global,omitempty"`
	GuestInfo *AlertGuestInfoType `json:"guestInfo,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Used to identify the source of the identifier (e.g., IATA, ABTA).
	IdContext *string `json:"idContext,omitempty"`
	// Additional identifying value assigned by the creating system.
	IdExtension *int32 `json:"idExtension,omitempty"`
	// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
	Instance *string `json:"instance,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Printer used to print the alert notification.
	PrinterName *string `json:"printerName,omitempty"`
	// Notify by sending the message to the printer.
	PrinterNotification *bool `json:"printerNotification,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
	// Report description. Mainly used for as a parameter for printing the alerts.
	ReportDescription *string `json:"reportDescription,omitempty"`
	ReportId *UniqueIDType `json:"reportId,omitempty"`
	// Report name of the report type.
	ReportName *string `json:"reportName,omitempty"`
	// Notify by showing the alert on the screen
	ScreenNotification *bool `json:"screenNotification,omitempty"`
	// Indicates the Reservation Stop Check In/Check Out Global Alert.
	StopCheckInCheckOut *bool `json:"stopCheckInCheckOut,omitempty"`
	// A reference to the type of object defined by the UniqueID elementSpace. Refer to OpenTravel Code List Unique ID Type (UIT).
	Type *string `json:"type,omitempty"`
	// URL that identifies the location associated with the record identified by the UniqueID.
	Url *string `json:"url,omitempty"`
	UserDefinedFields *UserDefinedFieldsType `json:"userDefinedFields,omitempty"`
	WelcomeOffer *WelcomeOfferType `json:"welcomeOffer,omitempty"`
}

// NewAlertType instantiates a new AlertType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertType() *AlertType {
	this := AlertType{}
	return &this
}

// NewAlertTypeWithDefaults instantiates a new AlertType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertTypeWithDefaults() *AlertType {
	this := AlertType{}
	return &this
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *AlertType) GetArea() AlertAreaType {
	if o == nil || IsNil(o.Area) {
		var ret AlertAreaType
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetAreaOk() (*AlertAreaType, bool) {
	if o == nil || IsNil(o.Area) {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *AlertType) HasArea() bool {
	if o != nil && !IsNil(o.Area) {
		return true
	}

	return false
}

// SetArea gets a reference to the given AlertAreaType and assigns it to the Area field.
func (o *AlertType) SetArea(v AlertAreaType) {
	o.Area = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AlertType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AlertType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AlertType) SetCode(v string) {
	o.Code = &v
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *AlertType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *AlertType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *AlertType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *AlertType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *AlertType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *AlertType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AlertType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AlertType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AlertType) SetDescription(v string) {
	o.Description = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *AlertType) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *AlertType) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *AlertType) SetGlobal(v bool) {
	o.Global = &v
}

// GetGuestInfo returns the GuestInfo field value if set, zero value otherwise.
func (o *AlertType) GetGuestInfo() AlertGuestInfoType {
	if o == nil || IsNil(o.GuestInfo) {
		var ret AlertGuestInfoType
		return ret
	}
	return *o.GuestInfo
}

// GetGuestInfoOk returns a tuple with the GuestInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetGuestInfoOk() (*AlertGuestInfoType, bool) {
	if o == nil || IsNil(o.GuestInfo) {
		return nil, false
	}
	return o.GuestInfo, true
}

// HasGuestInfo returns a boolean if a field has been set.
func (o *AlertType) HasGuestInfo() bool {
	if o != nil && !IsNil(o.GuestInfo) {
		return true
	}

	return false
}

// SetGuestInfo gets a reference to the given AlertGuestInfoType and assigns it to the GuestInfo field.
func (o *AlertType) SetGuestInfo(v AlertGuestInfoType) {
	o.GuestInfo = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertType) SetId(v string) {
	o.Id = &v
}

// GetIdContext returns the IdContext field value if set, zero value otherwise.
func (o *AlertType) GetIdContext() string {
	if o == nil || IsNil(o.IdContext) {
		var ret string
		return ret
	}
	return *o.IdContext
}

// GetIdContextOk returns a tuple with the IdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetIdContextOk() (*string, bool) {
	if o == nil || IsNil(o.IdContext) {
		return nil, false
	}
	return o.IdContext, true
}

// HasIdContext returns a boolean if a field has been set.
func (o *AlertType) HasIdContext() bool {
	if o != nil && !IsNil(o.IdContext) {
		return true
	}

	return false
}

// SetIdContext gets a reference to the given string and assigns it to the IdContext field.
func (o *AlertType) SetIdContext(v string) {
	o.IdContext = &v
}

// GetIdExtension returns the IdExtension field value if set, zero value otherwise.
func (o *AlertType) GetIdExtension() int32 {
	if o == nil || IsNil(o.IdExtension) {
		var ret int32
		return ret
	}
	return *o.IdExtension
}

// GetIdExtensionOk returns a tuple with the IdExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetIdExtensionOk() (*int32, bool) {
	if o == nil || IsNil(o.IdExtension) {
		return nil, false
	}
	return o.IdExtension, true
}

// HasIdExtension returns a boolean if a field has been set.
func (o *AlertType) HasIdExtension() bool {
	if o != nil && !IsNil(o.IdExtension) {
		return true
	}

	return false
}

// SetIdExtension gets a reference to the given int32 and assigns it to the IdExtension field.
func (o *AlertType) SetIdExtension(v int32) {
	o.IdExtension = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *AlertType) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *AlertType) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *AlertType) SetInstance(v string) {
	o.Instance = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *AlertType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *AlertType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *AlertType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *AlertType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *AlertType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *AlertType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetPrinterName returns the PrinterName field value if set, zero value otherwise.
func (o *AlertType) GetPrinterName() string {
	if o == nil || IsNil(o.PrinterName) {
		var ret string
		return ret
	}
	return *o.PrinterName
}

// GetPrinterNameOk returns a tuple with the PrinterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetPrinterNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrinterName) {
		return nil, false
	}
	return o.PrinterName, true
}

// HasPrinterName returns a boolean if a field has been set.
func (o *AlertType) HasPrinterName() bool {
	if o != nil && !IsNil(o.PrinterName) {
		return true
	}

	return false
}

// SetPrinterName gets a reference to the given string and assigns it to the PrinterName field.
func (o *AlertType) SetPrinterName(v string) {
	o.PrinterName = &v
}

// GetPrinterNotification returns the PrinterNotification field value if set, zero value otherwise.
func (o *AlertType) GetPrinterNotification() bool {
	if o == nil || IsNil(o.PrinterNotification) {
		var ret bool
		return ret
	}
	return *o.PrinterNotification
}

// GetPrinterNotificationOk returns a tuple with the PrinterNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetPrinterNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.PrinterNotification) {
		return nil, false
	}
	return o.PrinterNotification, true
}

// HasPrinterNotification returns a boolean if a field has been set.
func (o *AlertType) HasPrinterNotification() bool {
	if o != nil && !IsNil(o.PrinterNotification) {
		return true
	}

	return false
}

// SetPrinterNotification gets a reference to the given bool and assigns it to the PrinterNotification field.
func (o *AlertType) SetPrinterNotification(v bool) {
	o.PrinterNotification = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *AlertType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *AlertType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *AlertType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

// GetReportDescription returns the ReportDescription field value if set, zero value otherwise.
func (o *AlertType) GetReportDescription() string {
	if o == nil || IsNil(o.ReportDescription) {
		var ret string
		return ret
	}
	return *o.ReportDescription
}

// GetReportDescriptionOk returns a tuple with the ReportDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetReportDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ReportDescription) {
		return nil, false
	}
	return o.ReportDescription, true
}

// HasReportDescription returns a boolean if a field has been set.
func (o *AlertType) HasReportDescription() bool {
	if o != nil && !IsNil(o.ReportDescription) {
		return true
	}

	return false
}

// SetReportDescription gets a reference to the given string and assigns it to the ReportDescription field.
func (o *AlertType) SetReportDescription(v string) {
	o.ReportDescription = &v
}

// GetReportId returns the ReportId field value if set, zero value otherwise.
func (o *AlertType) GetReportId() UniqueIDType {
	if o == nil || IsNil(o.ReportId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ReportId
}

// GetReportIdOk returns a tuple with the ReportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetReportIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ReportId) {
		return nil, false
	}
	return o.ReportId, true
}

// HasReportId returns a boolean if a field has been set.
func (o *AlertType) HasReportId() bool {
	if o != nil && !IsNil(o.ReportId) {
		return true
	}

	return false
}

// SetReportId gets a reference to the given UniqueIDType and assigns it to the ReportId field.
func (o *AlertType) SetReportId(v UniqueIDType) {
	o.ReportId = &v
}

// GetReportName returns the ReportName field value if set, zero value otherwise.
func (o *AlertType) GetReportName() string {
	if o == nil || IsNil(o.ReportName) {
		var ret string
		return ret
	}
	return *o.ReportName
}

// GetReportNameOk returns a tuple with the ReportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetReportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReportName) {
		return nil, false
	}
	return o.ReportName, true
}

// HasReportName returns a boolean if a field has been set.
func (o *AlertType) HasReportName() bool {
	if o != nil && !IsNil(o.ReportName) {
		return true
	}

	return false
}

// SetReportName gets a reference to the given string and assigns it to the ReportName field.
func (o *AlertType) SetReportName(v string) {
	o.ReportName = &v
}

// GetScreenNotification returns the ScreenNotification field value if set, zero value otherwise.
func (o *AlertType) GetScreenNotification() bool {
	if o == nil || IsNil(o.ScreenNotification) {
		var ret bool
		return ret
	}
	return *o.ScreenNotification
}

// GetScreenNotificationOk returns a tuple with the ScreenNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetScreenNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.ScreenNotification) {
		return nil, false
	}
	return o.ScreenNotification, true
}

// HasScreenNotification returns a boolean if a field has been set.
func (o *AlertType) HasScreenNotification() bool {
	if o != nil && !IsNil(o.ScreenNotification) {
		return true
	}

	return false
}

// SetScreenNotification gets a reference to the given bool and assigns it to the ScreenNotification field.
func (o *AlertType) SetScreenNotification(v bool) {
	o.ScreenNotification = &v
}

// GetStopCheckInCheckOut returns the StopCheckInCheckOut field value if set, zero value otherwise.
func (o *AlertType) GetStopCheckInCheckOut() bool {
	if o == nil || IsNil(o.StopCheckInCheckOut) {
		var ret bool
		return ret
	}
	return *o.StopCheckInCheckOut
}

// GetStopCheckInCheckOutOk returns a tuple with the StopCheckInCheckOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetStopCheckInCheckOutOk() (*bool, bool) {
	if o == nil || IsNil(o.StopCheckInCheckOut) {
		return nil, false
	}
	return o.StopCheckInCheckOut, true
}

// HasStopCheckInCheckOut returns a boolean if a field has been set.
func (o *AlertType) HasStopCheckInCheckOut() bool {
	if o != nil && !IsNil(o.StopCheckInCheckOut) {
		return true
	}

	return false
}

// SetStopCheckInCheckOut gets a reference to the given bool and assigns it to the StopCheckInCheckOut field.
func (o *AlertType) SetStopCheckInCheckOut(v bool) {
	o.StopCheckInCheckOut = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertType) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AlertType) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AlertType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AlertType) SetUrl(v string) {
	o.Url = &v
}

// GetUserDefinedFields returns the UserDefinedFields field value if set, zero value otherwise.
func (o *AlertType) GetUserDefinedFields() UserDefinedFieldsType {
	if o == nil || IsNil(o.UserDefinedFields) {
		var ret UserDefinedFieldsType
		return ret
	}
	return *o.UserDefinedFields
}

// GetUserDefinedFieldsOk returns a tuple with the UserDefinedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetUserDefinedFieldsOk() (*UserDefinedFieldsType, bool) {
	if o == nil || IsNil(o.UserDefinedFields) {
		return nil, false
	}
	return o.UserDefinedFields, true
}

// HasUserDefinedFields returns a boolean if a field has been set.
func (o *AlertType) HasUserDefinedFields() bool {
	if o != nil && !IsNil(o.UserDefinedFields) {
		return true
	}

	return false
}

// SetUserDefinedFields gets a reference to the given UserDefinedFieldsType and assigns it to the UserDefinedFields field.
func (o *AlertType) SetUserDefinedFields(v UserDefinedFieldsType) {
	o.UserDefinedFields = &v
}

// GetWelcomeOffer returns the WelcomeOffer field value if set, zero value otherwise.
func (o *AlertType) GetWelcomeOffer() WelcomeOfferType {
	if o == nil || IsNil(o.WelcomeOffer) {
		var ret WelcomeOfferType
		return ret
	}
	return *o.WelcomeOffer
}

// GetWelcomeOfferOk returns a tuple with the WelcomeOffer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertType) GetWelcomeOfferOk() (*WelcomeOfferType, bool) {
	if o == nil || IsNil(o.WelcomeOffer) {
		return nil, false
	}
	return o.WelcomeOffer, true
}

// HasWelcomeOffer returns a boolean if a field has been set.
func (o *AlertType) HasWelcomeOffer() bool {
	if o != nil && !IsNil(o.WelcomeOffer) {
		return true
	}

	return false
}

// SetWelcomeOffer gets a reference to the given WelcomeOfferType and assigns it to the WelcomeOffer field.
func (o *AlertType) SetWelcomeOffer(v WelcomeOfferType) {
	o.WelcomeOffer = &v
}

func (o AlertType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Area) {
		toSerialize["area"] = o.Area
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.GuestInfo) {
		toSerialize["guestInfo"] = o.GuestInfo
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdContext) {
		toSerialize["idContext"] = o.IdContext
	}
	if !IsNil(o.IdExtension) {
		toSerialize["idExtension"] = o.IdExtension
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.PrinterName) {
		toSerialize["printerName"] = o.PrinterName
	}
	if !IsNil(o.PrinterNotification) {
		toSerialize["printerNotification"] = o.PrinterNotification
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	if !IsNil(o.ReportDescription) {
		toSerialize["reportDescription"] = o.ReportDescription
	}
	if !IsNil(o.ReportId) {
		toSerialize["reportId"] = o.ReportId
	}
	if !IsNil(o.ReportName) {
		toSerialize["reportName"] = o.ReportName
	}
	if !IsNil(o.ScreenNotification) {
		toSerialize["screenNotification"] = o.ScreenNotification
	}
	if !IsNil(o.StopCheckInCheckOut) {
		toSerialize["stopCheckInCheckOut"] = o.StopCheckInCheckOut
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UserDefinedFields) {
		toSerialize["userDefinedFields"] = o.UserDefinedFields
	}
	if !IsNil(o.WelcomeOffer) {
		toSerialize["welcomeOffer"] = o.WelcomeOffer
	}
	return toSerialize, nil
}

type NullableAlertType struct {
	value *AlertType
	isSet bool
}

func (v NullableAlertType) Get() *AlertType {
	return v.value
}

func (v *NullableAlertType) Set(val *AlertType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertType(val *AlertType) *NullableAlertType {
	return &NullableAlertType{value: val, isSet: true}
}

func (v NullableAlertType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


