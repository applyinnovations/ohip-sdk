/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventStatusChangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventStatusChangeType{}

// EventStatusChangeType struct for EventStatusChangeType
type EventStatusChangeType struct {
	BlockId *UniqueIDType `json:"blockId,omitempty"`
	ChangeUserInfo *LogUserInfoType `json:"changeUserInfo,omitempty"`
	// Current Status of this event
	CurrentStatus *string `json:"currentStatus,omitempty"`
	EventChangeId *UniqueIDType `json:"eventChangeId,omitempty"`
	EventId *UniqueIDType `json:"eventId,omitempty"`
	// Prior Status of this event
	PriorStatus *string `json:"priorStatus,omitempty"`
}

// NewEventStatusChangeType instantiates a new EventStatusChangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventStatusChangeType() *EventStatusChangeType {
	this := EventStatusChangeType{}
	return &this
}

// NewEventStatusChangeTypeWithDefaults instantiates a new EventStatusChangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventStatusChangeTypeWithDefaults() *EventStatusChangeType {
	this := EventStatusChangeType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *EventStatusChangeType) GetBlockId() UniqueIDType {
	if o == nil || IsNil(o.BlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatusChangeType) GetBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *EventStatusChangeType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given UniqueIDType and assigns it to the BlockId field.
func (o *EventStatusChangeType) SetBlockId(v UniqueIDType) {
	o.BlockId = &v
}

// GetChangeUserInfo returns the ChangeUserInfo field value if set, zero value otherwise.
func (o *EventStatusChangeType) GetChangeUserInfo() LogUserInfoType {
	if o == nil || IsNil(o.ChangeUserInfo) {
		var ret LogUserInfoType
		return ret
	}
	return *o.ChangeUserInfo
}

// GetChangeUserInfoOk returns a tuple with the ChangeUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatusChangeType) GetChangeUserInfoOk() (*LogUserInfoType, bool) {
	if o == nil || IsNil(o.ChangeUserInfo) {
		return nil, false
	}
	return o.ChangeUserInfo, true
}

// HasChangeUserInfo returns a boolean if a field has been set.
func (o *EventStatusChangeType) HasChangeUserInfo() bool {
	if o != nil && !IsNil(o.ChangeUserInfo) {
		return true
	}

	return false
}

// SetChangeUserInfo gets a reference to the given LogUserInfoType and assigns it to the ChangeUserInfo field.
func (o *EventStatusChangeType) SetChangeUserInfo(v LogUserInfoType) {
	o.ChangeUserInfo = &v
}

// GetCurrentStatus returns the CurrentStatus field value if set, zero value otherwise.
func (o *EventStatusChangeType) GetCurrentStatus() string {
	if o == nil || IsNil(o.CurrentStatus) {
		var ret string
		return ret
	}
	return *o.CurrentStatus
}

// GetCurrentStatusOk returns a tuple with the CurrentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatusChangeType) GetCurrentStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentStatus) {
		return nil, false
	}
	return o.CurrentStatus, true
}

// HasCurrentStatus returns a boolean if a field has been set.
func (o *EventStatusChangeType) HasCurrentStatus() bool {
	if o != nil && !IsNil(o.CurrentStatus) {
		return true
	}

	return false
}

// SetCurrentStatus gets a reference to the given string and assigns it to the CurrentStatus field.
func (o *EventStatusChangeType) SetCurrentStatus(v string) {
	o.CurrentStatus = &v
}

// GetEventChangeId returns the EventChangeId field value if set, zero value otherwise.
func (o *EventStatusChangeType) GetEventChangeId() UniqueIDType {
	if o == nil || IsNil(o.EventChangeId) {
		var ret UniqueIDType
		return ret
	}
	return *o.EventChangeId
}

// GetEventChangeIdOk returns a tuple with the EventChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatusChangeType) GetEventChangeIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EventChangeId) {
		return nil, false
	}
	return o.EventChangeId, true
}

// HasEventChangeId returns a boolean if a field has been set.
func (o *EventStatusChangeType) HasEventChangeId() bool {
	if o != nil && !IsNil(o.EventChangeId) {
		return true
	}

	return false
}

// SetEventChangeId gets a reference to the given UniqueIDType and assigns it to the EventChangeId field.
func (o *EventStatusChangeType) SetEventChangeId(v UniqueIDType) {
	o.EventChangeId = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *EventStatusChangeType) GetEventId() UniqueIDType {
	if o == nil || IsNil(o.EventId) {
		var ret UniqueIDType
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatusChangeType) GetEventIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *EventStatusChangeType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given UniqueIDType and assigns it to the EventId field.
func (o *EventStatusChangeType) SetEventId(v UniqueIDType) {
	o.EventId = &v
}

// GetPriorStatus returns the PriorStatus field value if set, zero value otherwise.
func (o *EventStatusChangeType) GetPriorStatus() string {
	if o == nil || IsNil(o.PriorStatus) {
		var ret string
		return ret
	}
	return *o.PriorStatus
}

// GetPriorStatusOk returns a tuple with the PriorStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatusChangeType) GetPriorStatusOk() (*string, bool) {
	if o == nil || IsNil(o.PriorStatus) {
		return nil, false
	}
	return o.PriorStatus, true
}

// HasPriorStatus returns a boolean if a field has been set.
func (o *EventStatusChangeType) HasPriorStatus() bool {
	if o != nil && !IsNil(o.PriorStatus) {
		return true
	}

	return false
}

// SetPriorStatus gets a reference to the given string and assigns it to the PriorStatus field.
func (o *EventStatusChangeType) SetPriorStatus(v string) {
	o.PriorStatus = &v
}

func (o EventStatusChangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventStatusChangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.ChangeUserInfo) {
		toSerialize["changeUserInfo"] = o.ChangeUserInfo
	}
	if !IsNil(o.CurrentStatus) {
		toSerialize["currentStatus"] = o.CurrentStatus
	}
	if !IsNil(o.EventChangeId) {
		toSerialize["eventChangeId"] = o.EventChangeId
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.PriorStatus) {
		toSerialize["priorStatus"] = o.PriorStatus
	}
	return toSerialize, nil
}

type NullableEventStatusChangeType struct {
	value *EventStatusChangeType
	isSet bool
}

func (v NullableEventStatusChangeType) Get() *EventStatusChangeType {
	return v.value
}

func (v *NullableEventStatusChangeType) Set(val *EventStatusChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventStatusChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventStatusChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventStatusChangeType(val *EventStatusChangeType) *NullableEventStatusChangeType {
	return &NullableEventStatusChangeType{value: val, isSet: true}
}

func (v NullableEventStatusChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventStatusChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


