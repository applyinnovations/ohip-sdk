/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ManageCateringEventPostingsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManageCateringEventPostingsRequest{}

// ManageCateringEventPostingsRequest struct for ManageCateringEventPostingsRequest
type ManageCateringEventPostingsRequest struct {
	PostingMasterReservations *ReservationSnapshotsType `json:"postingMasterReservations,omitempty"`
	CateringEventPostings *CateringEventPostingsType `json:"cateringEventPostings,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success elementSpace to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewManageCateringEventPostingsRequest instantiates a new ManageCateringEventPostingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageCateringEventPostingsRequest() *ManageCateringEventPostingsRequest {
	this := ManageCateringEventPostingsRequest{}
	return &this
}

// NewManageCateringEventPostingsRequestWithDefaults instantiates a new ManageCateringEventPostingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageCateringEventPostingsRequestWithDefaults() *ManageCateringEventPostingsRequest {
	this := ManageCateringEventPostingsRequest{}
	return &this
}

// GetPostingMasterReservations returns the PostingMasterReservations field value if set, zero value otherwise.
func (o *ManageCateringEventPostingsRequest) GetPostingMasterReservations() ReservationSnapshotsType {
	if o == nil || IsNil(o.PostingMasterReservations) {
		var ret ReservationSnapshotsType
		return ret
	}
	return *o.PostingMasterReservations
}

// GetPostingMasterReservationsOk returns a tuple with the PostingMasterReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageCateringEventPostingsRequest) GetPostingMasterReservationsOk() (*ReservationSnapshotsType, bool) {
	if o == nil || IsNil(o.PostingMasterReservations) {
		return nil, false
	}
	return o.PostingMasterReservations, true
}

// HasPostingMasterReservations returns a boolean if a field has been set.
func (o *ManageCateringEventPostingsRequest) HasPostingMasterReservations() bool {
	if o != nil && !IsNil(o.PostingMasterReservations) {
		return true
	}

	return false
}

// SetPostingMasterReservations gets a reference to the given ReservationSnapshotsType and assigns it to the PostingMasterReservations field.
func (o *ManageCateringEventPostingsRequest) SetPostingMasterReservations(v ReservationSnapshotsType) {
	o.PostingMasterReservations = &v
}

// GetCateringEventPostings returns the CateringEventPostings field value if set, zero value otherwise.
func (o *ManageCateringEventPostingsRequest) GetCateringEventPostings() CateringEventPostingsType {
	if o == nil || IsNil(o.CateringEventPostings) {
		var ret CateringEventPostingsType
		return ret
	}
	return *o.CateringEventPostings
}

// GetCateringEventPostingsOk returns a tuple with the CateringEventPostings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageCateringEventPostingsRequest) GetCateringEventPostingsOk() (*CateringEventPostingsType, bool) {
	if o == nil || IsNil(o.CateringEventPostings) {
		return nil, false
	}
	return o.CateringEventPostings, true
}

// HasCateringEventPostings returns a boolean if a field has been set.
func (o *ManageCateringEventPostingsRequest) HasCateringEventPostings() bool {
	if o != nil && !IsNil(o.CateringEventPostings) {
		return true
	}

	return false
}

// SetCateringEventPostings gets a reference to the given CateringEventPostingsType and assigns it to the CateringEventPostings field.
func (o *ManageCateringEventPostingsRequest) SetCateringEventPostings(v CateringEventPostingsType) {
	o.CateringEventPostings = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ManageCateringEventPostingsRequest) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageCateringEventPostingsRequest) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ManageCateringEventPostingsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ManageCateringEventPostingsRequest) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ManageCateringEventPostingsRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageCateringEventPostingsRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ManageCateringEventPostingsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ManageCateringEventPostingsRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ManageCateringEventPostingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManageCateringEventPostingsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PostingMasterReservations) {
		toSerialize["postingMasterReservations"] = o.PostingMasterReservations
	}
	if !IsNil(o.CateringEventPostings) {
		toSerialize["cateringEventPostings"] = o.CateringEventPostings
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableManageCateringEventPostingsRequest struct {
	value *ManageCateringEventPostingsRequest
	isSet bool
}

func (v NullableManageCateringEventPostingsRequest) Get() *ManageCateringEventPostingsRequest {
	return v.value
}

func (v *NullableManageCateringEventPostingsRequest) Set(val *ManageCateringEventPostingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManageCateringEventPostingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManageCateringEventPostingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageCateringEventPostingsRequest(val *ManageCateringEventPostingsRequest) *NullableManageCateringEventPostingsRequest {
	return &NullableManageCateringEventPostingsRequest{value: val, isSet: true}
}

func (v NullableManageCateringEventPostingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageCateringEventPostingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


