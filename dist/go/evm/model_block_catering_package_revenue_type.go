/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the BlockCateringPackageRevenueType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockCateringPackageRevenueType{}

// BlockCateringPackageRevenueType Type used for managing Revenue Details associated with a particular Catering Package Price Code.
type BlockCateringPackageRevenueType struct {
	PackageEventId *UniqueIDType `json:"packageEventId,omitempty"`
	// Revenue Type associated with the Catering Package Price Code.
	RevType *string `json:"revType,omitempty"`
	// Sorting Order.
	OrderBy *int32 `json:"orderBy,omitempty"`
	RevForecast *CurrencyAmountType `json:"revForecast,omitempty"`
	RevExpected *CurrencyAmountType `json:"revExpected,omitempty"`
	CostExpected *CurrencyAmountType `json:"costExpected,omitempty"`
	// Name of event.
	EventName *string `json:"eventName,omitempty"`
	// Type of event.
	EventType *string `json:"eventType,omitempty"`
	EventTimeSpan *DateTimeSpanType `json:"eventTimeSpan,omitempty"`
}

// NewBlockCateringPackageRevenueType instantiates a new BlockCateringPackageRevenueType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockCateringPackageRevenueType() *BlockCateringPackageRevenueType {
	this := BlockCateringPackageRevenueType{}
	return &this
}

// NewBlockCateringPackageRevenueTypeWithDefaults instantiates a new BlockCateringPackageRevenueType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockCateringPackageRevenueTypeWithDefaults() *BlockCateringPackageRevenueType {
	this := BlockCateringPackageRevenueType{}
	return &this
}

// GetPackageEventId returns the PackageEventId field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetPackageEventId() UniqueIDType {
	if o == nil || IsNil(o.PackageEventId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PackageEventId
}

// GetPackageEventIdOk returns a tuple with the PackageEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetPackageEventIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PackageEventId) {
		return nil, false
	}
	return o.PackageEventId, true
}

// HasPackageEventId returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasPackageEventId() bool {
	if o != nil && !IsNil(o.PackageEventId) {
		return true
	}

	return false
}

// SetPackageEventId gets a reference to the given UniqueIDType and assigns it to the PackageEventId field.
func (o *BlockCateringPackageRevenueType) SetPackageEventId(v UniqueIDType) {
	o.PackageEventId = &v
}

// GetRevType returns the RevType field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetRevType() string {
	if o == nil || IsNil(o.RevType) {
		var ret string
		return ret
	}
	return *o.RevType
}

// GetRevTypeOk returns a tuple with the RevType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetRevTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevType) {
		return nil, false
	}
	return o.RevType, true
}

// HasRevType returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasRevType() bool {
	if o != nil && !IsNil(o.RevType) {
		return true
	}

	return false
}

// SetRevType gets a reference to the given string and assigns it to the RevType field.
func (o *BlockCateringPackageRevenueType) SetRevType(v string) {
	o.RevType = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetOrderBy() int32 {
	if o == nil || IsNil(o.OrderBy) {
		var ret int32
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetOrderByOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given int32 and assigns it to the OrderBy field.
func (o *BlockCateringPackageRevenueType) SetOrderBy(v int32) {
	o.OrderBy = &v
}

// GetRevForecast returns the RevForecast field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetRevForecast() CurrencyAmountType {
	if o == nil || IsNil(o.RevForecast) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RevForecast
}

// GetRevForecastOk returns a tuple with the RevForecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetRevForecastOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RevForecast) {
		return nil, false
	}
	return o.RevForecast, true
}

// HasRevForecast returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasRevForecast() bool {
	if o != nil && !IsNil(o.RevForecast) {
		return true
	}

	return false
}

// SetRevForecast gets a reference to the given CurrencyAmountType and assigns it to the RevForecast field.
func (o *BlockCateringPackageRevenueType) SetRevForecast(v CurrencyAmountType) {
	o.RevForecast = &v
}

// GetRevExpected returns the RevExpected field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetRevExpected() CurrencyAmountType {
	if o == nil || IsNil(o.RevExpected) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.RevExpected
}

// GetRevExpectedOk returns a tuple with the RevExpected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetRevExpectedOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.RevExpected) {
		return nil, false
	}
	return o.RevExpected, true
}

// HasRevExpected returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasRevExpected() bool {
	if o != nil && !IsNil(o.RevExpected) {
		return true
	}

	return false
}

// SetRevExpected gets a reference to the given CurrencyAmountType and assigns it to the RevExpected field.
func (o *BlockCateringPackageRevenueType) SetRevExpected(v CurrencyAmountType) {
	o.RevExpected = &v
}

// GetCostExpected returns the CostExpected field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetCostExpected() CurrencyAmountType {
	if o == nil || IsNil(o.CostExpected) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CostExpected
}

// GetCostExpectedOk returns a tuple with the CostExpected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetCostExpectedOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CostExpected) {
		return nil, false
	}
	return o.CostExpected, true
}

// HasCostExpected returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasCostExpected() bool {
	if o != nil && !IsNil(o.CostExpected) {
		return true
	}

	return false
}

// SetCostExpected gets a reference to the given CurrencyAmountType and assigns it to the CostExpected field.
func (o *BlockCateringPackageRevenueType) SetCostExpected(v CurrencyAmountType) {
	o.CostExpected = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *BlockCateringPackageRevenueType) SetEventName(v string) {
	o.EventName = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *BlockCateringPackageRevenueType) SetEventType(v string) {
	o.EventType = &v
}

// GetEventTimeSpan returns the EventTimeSpan field value if set, zero value otherwise.
func (o *BlockCateringPackageRevenueType) GetEventTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.EventTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.EventTimeSpan
}

// GetEventTimeSpanOk returns a tuple with the EventTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCateringPackageRevenueType) GetEventTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.EventTimeSpan) {
		return nil, false
	}
	return o.EventTimeSpan, true
}

// HasEventTimeSpan returns a boolean if a field has been set.
func (o *BlockCateringPackageRevenueType) HasEventTimeSpan() bool {
	if o != nil && !IsNil(o.EventTimeSpan) {
		return true
	}

	return false
}

// SetEventTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the EventTimeSpan field.
func (o *BlockCateringPackageRevenueType) SetEventTimeSpan(v DateTimeSpanType) {
	o.EventTimeSpan = &v
}

func (o BlockCateringPackageRevenueType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockCateringPackageRevenueType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageEventId) {
		toSerialize["packageEventId"] = o.PackageEventId
	}
	if !IsNil(o.RevType) {
		toSerialize["revType"] = o.RevType
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.RevForecast) {
		toSerialize["revForecast"] = o.RevForecast
	}
	if !IsNil(o.RevExpected) {
		toSerialize["revExpected"] = o.RevExpected
	}
	if !IsNil(o.CostExpected) {
		toSerialize["costExpected"] = o.CostExpected
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !IsNil(o.EventTimeSpan) {
		toSerialize["eventTimeSpan"] = o.EventTimeSpan
	}
	return toSerialize, nil
}

type NullableBlockCateringPackageRevenueType struct {
	value *BlockCateringPackageRevenueType
	isSet bool
}

func (v NullableBlockCateringPackageRevenueType) Get() *BlockCateringPackageRevenueType {
	return v.value
}

func (v *NullableBlockCateringPackageRevenueType) Set(val *BlockCateringPackageRevenueType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockCateringPackageRevenueType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockCateringPackageRevenueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockCateringPackageRevenueType(val *BlockCateringPackageRevenueType) *NullableBlockCateringPackageRevenueType {
	return &NullableBlockCateringPackageRevenueType{value: val, isSet: true}
}

func (v NullableBlockCateringPackageRevenueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockCateringPackageRevenueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


