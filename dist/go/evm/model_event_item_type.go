/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventItemType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventItemType{}

// EventItemType Inventory Items identification details.
type EventItemType struct {
	// Shows the external cost of the item. If a booked external cost has been entered for the item, it will be automatically populated into this field
	ActualExternalCostPerUnit *float32 `json:"actualExternalCostPerUnit,omitempty"`
	// Actual quantity of the item booked through external sources with corresponding cost
	ActualExternalQuantity *float32 `json:"actualExternalQuantity,omitempty"`
	// Shows the internal cost of the item. If a booked internal cost has been entered for the item, it will be automatically populated into this field
	ActualInternalCostPerUnit *float32 `json:"actualInternalCostPerUnit,omitempty"`
	// Actual quantity of the item booked from internal resources
	ActualInternalQuantity *float32 `json:"actualInternalQuantity,omitempty"`
	// The total actual quantity of the item on event actualization.
	ActualQuantity *float32 `json:"actualQuantity,omitempty"`
	AttributeId *UniqueIDType `json:"attributeId,omitempty"`
	// List of Item Attributes.
	Attributes []ItemAttributeType `json:"attributes,omitempty"`
	Departments []string `json:"departments,omitempty"`
	// Discount to be applied to the price.
	Discount *float32 `json:"discount,omitempty"`
	// The display sequence of the Item.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// The ending value of the time span.
	EventEndDate *string `json:"eventEndDate,omitempty"`
	// The starting value of the time span.
	EventStartDate *string `json:"eventStartDate,omitempty"`
	EventTypes []string `json:"eventTypes,omitempty"`
	// Shows the price the external source charges for the item
	ExternalCostPerUnit *float32 `json:"externalCostPerUnit,omitempty"`
	// Flag to define if the inventory item can be ordered externally when the item is marked as critical.
	ExternalOrder *bool `json:"externalOrder,omitempty"`
	// External Quantity can be all or part of the total quantity of this item needs to be booked through external sources, this field shows the number booked
	ExternalQuantity *float32 `json:"externalQuantity,omitempty"`
	// The Hotel code which the item belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Shows the internal cost of the item.If a cost has been configured for the item it will be automatically populated into this field
	InternalCostPerUnit *float32 `json:"internalCostPerUnit,omitempty"`
	// Internal Quantity can be all or part of the total quantity
	InternalQuantity *float32 `json:"internalQuantity,omitempty"`
	// Flag to check if the Event Item is ExcludeNonDeduct
	IsExcludeNonDeduct *bool `json:"isExcludeNonDeduct,omitempty"`
	// Flag to check if the Event Item Name is a Custom Name
	IsNameCustom *bool `json:"isNameCustom,omitempty"`
	// The Item Class Code which the item belongs to.
	ItemClassCode *string `json:"itemClassCode,omitempty"`
	// The Description of the Item Class.
	ItemClassDescription *string `json:"itemClassDescription,omitempty"`
	// Display sequence of Item Class.
	ItemClassDisplaySequence *float32 `json:"itemClassDisplaySequence,omitempty"`
	ItemClassId *UniqueIDType `json:"itemClassId,omitempty"`
	// The Article Number of the Item.
	ItemCode *string `json:"itemCode,omitempty"`
	// The Description of the Item.
	ItemDescription *string `json:"itemDescription,omitempty"`
	// Indicates whether Item is from a Template or not.
	ItemFromTemplate *bool `json:"itemFromTemplate,omitempty"`
	ItemId *UniqueIDType `json:"itemId,omitempty"`
	ItemName *TranslationTextType200 `json:"itemName,omitempty"`
	// The Item Pool description of the Item.
	ItemPool *string `json:"itemPool,omitempty"`
	ItemRateId *UniqueIDType `json:"itemRateId,omitempty"`
	// Order in which the item is displayed and printed within the non-Food and Beverage item group and its Item Class.Defaults to the sequence number in which the item was attached to the Event.
	Order *int32 `json:"order,omitempty"`
	PackageId *UniqueIDType `json:"packageId,omitempty"`
	// For Custom rate codes, this indicates the item price.
	Price *float32 `json:"price,omitempty"`
	// Price Code to be selected from the list of configured codes available for this item
	PriceCode *string `json:"priceCode,omitempty"`
	// The Revenue Type of the Item.
	Print *bool `json:"print,omitempty"`
	// The quantity of this item required by the event.
	Quantity *float32 `json:"quantity,omitempty"`
	// List of Item Rates.
	Rates []ItemRateType `json:"rates,omitempty"`
	// Contains event resource comment information.
	ResourceNotes []EventResourceNoteType `json:"resourceNotes,omitempty"`
	// The Revenue Type of the Item.
	RevenueType *string `json:"revenueType,omitempty"`
	// If true, the revenue could be changed.
	RevenueTypeEditable *bool `json:"revenueTypeEditable,omitempty"`
	SellInfo *EventItemTypeSellInfo `json:"sellInfo,omitempty"`
	// Setdown Time of the Item in minutes.
	SetdownTime *float32 `json:"setdownTime,omitempty"`
	// Setup Time of the Item in minutes.
	SetupTime *float32 `json:"setupTime,omitempty"`
	// The Trace Text of the Item.
	TraceText *string `json:"traceText,omitempty"`
	// If true, the item is used for events.
	UsedForEvents *bool `json:"usedForEvents,omitempty"`
	// If true, the item is used for reservation.
	UsedForReservation *bool `json:"usedForReservation,omitempty"`
	// This indicates the vendor price.
	VendorPrice *float32 `json:"vendorPrice,omitempty"`
	// List of Item Vendors.
	Vendors []ItemVendorType `json:"vendors,omitempty"`
}

// NewEventItemType instantiates a new EventItemType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventItemType() *EventItemType {
	this := EventItemType{}
	return &this
}

// NewEventItemTypeWithDefaults instantiates a new EventItemType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventItemTypeWithDefaults() *EventItemType {
	this := EventItemType{}
	return &this
}

// GetActualExternalCostPerUnit returns the ActualExternalCostPerUnit field value if set, zero value otherwise.
func (o *EventItemType) GetActualExternalCostPerUnit() float32 {
	if o == nil || IsNil(o.ActualExternalCostPerUnit) {
		var ret float32
		return ret
	}
	return *o.ActualExternalCostPerUnit
}

// GetActualExternalCostPerUnitOk returns a tuple with the ActualExternalCostPerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetActualExternalCostPerUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.ActualExternalCostPerUnit) {
		return nil, false
	}
	return o.ActualExternalCostPerUnit, true
}

// HasActualExternalCostPerUnit returns a boolean if a field has been set.
func (o *EventItemType) HasActualExternalCostPerUnit() bool {
	if o != nil && !IsNil(o.ActualExternalCostPerUnit) {
		return true
	}

	return false
}

// SetActualExternalCostPerUnit gets a reference to the given float32 and assigns it to the ActualExternalCostPerUnit field.
func (o *EventItemType) SetActualExternalCostPerUnit(v float32) {
	o.ActualExternalCostPerUnit = &v
}

// GetActualExternalQuantity returns the ActualExternalQuantity field value if set, zero value otherwise.
func (o *EventItemType) GetActualExternalQuantity() float32 {
	if o == nil || IsNil(o.ActualExternalQuantity) {
		var ret float32
		return ret
	}
	return *o.ActualExternalQuantity
}

// GetActualExternalQuantityOk returns a tuple with the ActualExternalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetActualExternalQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.ActualExternalQuantity) {
		return nil, false
	}
	return o.ActualExternalQuantity, true
}

// HasActualExternalQuantity returns a boolean if a field has been set.
func (o *EventItemType) HasActualExternalQuantity() bool {
	if o != nil && !IsNil(o.ActualExternalQuantity) {
		return true
	}

	return false
}

// SetActualExternalQuantity gets a reference to the given float32 and assigns it to the ActualExternalQuantity field.
func (o *EventItemType) SetActualExternalQuantity(v float32) {
	o.ActualExternalQuantity = &v
}

// GetActualInternalCostPerUnit returns the ActualInternalCostPerUnit field value if set, zero value otherwise.
func (o *EventItemType) GetActualInternalCostPerUnit() float32 {
	if o == nil || IsNil(o.ActualInternalCostPerUnit) {
		var ret float32
		return ret
	}
	return *o.ActualInternalCostPerUnit
}

// GetActualInternalCostPerUnitOk returns a tuple with the ActualInternalCostPerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetActualInternalCostPerUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.ActualInternalCostPerUnit) {
		return nil, false
	}
	return o.ActualInternalCostPerUnit, true
}

// HasActualInternalCostPerUnit returns a boolean if a field has been set.
func (o *EventItemType) HasActualInternalCostPerUnit() bool {
	if o != nil && !IsNil(o.ActualInternalCostPerUnit) {
		return true
	}

	return false
}

// SetActualInternalCostPerUnit gets a reference to the given float32 and assigns it to the ActualInternalCostPerUnit field.
func (o *EventItemType) SetActualInternalCostPerUnit(v float32) {
	o.ActualInternalCostPerUnit = &v
}

// GetActualInternalQuantity returns the ActualInternalQuantity field value if set, zero value otherwise.
func (o *EventItemType) GetActualInternalQuantity() float32 {
	if o == nil || IsNil(o.ActualInternalQuantity) {
		var ret float32
		return ret
	}
	return *o.ActualInternalQuantity
}

// GetActualInternalQuantityOk returns a tuple with the ActualInternalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetActualInternalQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.ActualInternalQuantity) {
		return nil, false
	}
	return o.ActualInternalQuantity, true
}

// HasActualInternalQuantity returns a boolean if a field has been set.
func (o *EventItemType) HasActualInternalQuantity() bool {
	if o != nil && !IsNil(o.ActualInternalQuantity) {
		return true
	}

	return false
}

// SetActualInternalQuantity gets a reference to the given float32 and assigns it to the ActualInternalQuantity field.
func (o *EventItemType) SetActualInternalQuantity(v float32) {
	o.ActualInternalQuantity = &v
}

// GetActualQuantity returns the ActualQuantity field value if set, zero value otherwise.
func (o *EventItemType) GetActualQuantity() float32 {
	if o == nil || IsNil(o.ActualQuantity) {
		var ret float32
		return ret
	}
	return *o.ActualQuantity
}

// GetActualQuantityOk returns a tuple with the ActualQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetActualQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.ActualQuantity) {
		return nil, false
	}
	return o.ActualQuantity, true
}

// HasActualQuantity returns a boolean if a field has been set.
func (o *EventItemType) HasActualQuantity() bool {
	if o != nil && !IsNil(o.ActualQuantity) {
		return true
	}

	return false
}

// SetActualQuantity gets a reference to the given float32 and assigns it to the ActualQuantity field.
func (o *EventItemType) SetActualQuantity(v float32) {
	o.ActualQuantity = &v
}

// GetAttributeId returns the AttributeId field value if set, zero value otherwise.
func (o *EventItemType) GetAttributeId() UniqueIDType {
	if o == nil || IsNil(o.AttributeId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AttributeId
}

// GetAttributeIdOk returns a tuple with the AttributeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetAttributeIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AttributeId) {
		return nil, false
	}
	return o.AttributeId, true
}

// HasAttributeId returns a boolean if a field has been set.
func (o *EventItemType) HasAttributeId() bool {
	if o != nil && !IsNil(o.AttributeId) {
		return true
	}

	return false
}

// SetAttributeId gets a reference to the given UniqueIDType and assigns it to the AttributeId field.
func (o *EventItemType) SetAttributeId(v UniqueIDType) {
	o.AttributeId = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *EventItemType) GetAttributes() []ItemAttributeType {
	if o == nil || IsNil(o.Attributes) {
		var ret []ItemAttributeType
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetAttributesOk() ([]ItemAttributeType, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *EventItemType) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ItemAttributeType and assigns it to the Attributes field.
func (o *EventItemType) SetAttributes(v []ItemAttributeType) {
	o.Attributes = v
}

// GetDepartments returns the Departments field value if set, zero value otherwise.
func (o *EventItemType) GetDepartments() []string {
	if o == nil || IsNil(o.Departments) {
		var ret []string
		return ret
	}
	return o.Departments
}

// GetDepartmentsOk returns a tuple with the Departments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetDepartmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.Departments) {
		return nil, false
	}
	return o.Departments, true
}

// HasDepartments returns a boolean if a field has been set.
func (o *EventItemType) HasDepartments() bool {
	if o != nil && !IsNil(o.Departments) {
		return true
	}

	return false
}

// SetDepartments gets a reference to the given []string and assigns it to the Departments field.
func (o *EventItemType) SetDepartments(v []string) {
	o.Departments = v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *EventItemType) GetDiscount() float32 {
	if o == nil || IsNil(o.Discount) {
		var ret float32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *EventItemType) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given float32 and assigns it to the Discount field.
func (o *EventItemType) SetDiscount(v float32) {
	o.Discount = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *EventItemType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *EventItemType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *EventItemType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetEventEndDate returns the EventEndDate field value if set, zero value otherwise.
func (o *EventItemType) GetEventEndDate() string {
	if o == nil || IsNil(o.EventEndDate) {
		var ret string
		return ret
	}
	return *o.EventEndDate
}

// GetEventEndDateOk returns a tuple with the EventEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetEventEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventEndDate) {
		return nil, false
	}
	return o.EventEndDate, true
}

// HasEventEndDate returns a boolean if a field has been set.
func (o *EventItemType) HasEventEndDate() bool {
	if o != nil && !IsNil(o.EventEndDate) {
		return true
	}

	return false
}

// SetEventEndDate gets a reference to the given string and assigns it to the EventEndDate field.
func (o *EventItemType) SetEventEndDate(v string) {
	o.EventEndDate = &v
}

// GetEventStartDate returns the EventStartDate field value if set, zero value otherwise.
func (o *EventItemType) GetEventStartDate() string {
	if o == nil || IsNil(o.EventStartDate) {
		var ret string
		return ret
	}
	return *o.EventStartDate
}

// GetEventStartDateOk returns a tuple with the EventStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetEventStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventStartDate) {
		return nil, false
	}
	return o.EventStartDate, true
}

// HasEventStartDate returns a boolean if a field has been set.
func (o *EventItemType) HasEventStartDate() bool {
	if o != nil && !IsNil(o.EventStartDate) {
		return true
	}

	return false
}

// SetEventStartDate gets a reference to the given string and assigns it to the EventStartDate field.
func (o *EventItemType) SetEventStartDate(v string) {
	o.EventStartDate = &v
}

// GetEventTypes returns the EventTypes field value if set, zero value otherwise.
func (o *EventItemType) GetEventTypes() []string {
	if o == nil || IsNil(o.EventTypes) {
		var ret []string
		return ret
	}
	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetEventTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.EventTypes) {
		return nil, false
	}
	return o.EventTypes, true
}

// HasEventTypes returns a boolean if a field has been set.
func (o *EventItemType) HasEventTypes() bool {
	if o != nil && !IsNil(o.EventTypes) {
		return true
	}

	return false
}

// SetEventTypes gets a reference to the given []string and assigns it to the EventTypes field.
func (o *EventItemType) SetEventTypes(v []string) {
	o.EventTypes = v
}

// GetExternalCostPerUnit returns the ExternalCostPerUnit field value if set, zero value otherwise.
func (o *EventItemType) GetExternalCostPerUnit() float32 {
	if o == nil || IsNil(o.ExternalCostPerUnit) {
		var ret float32
		return ret
	}
	return *o.ExternalCostPerUnit
}

// GetExternalCostPerUnitOk returns a tuple with the ExternalCostPerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetExternalCostPerUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.ExternalCostPerUnit) {
		return nil, false
	}
	return o.ExternalCostPerUnit, true
}

// HasExternalCostPerUnit returns a boolean if a field has been set.
func (o *EventItemType) HasExternalCostPerUnit() bool {
	if o != nil && !IsNil(o.ExternalCostPerUnit) {
		return true
	}

	return false
}

// SetExternalCostPerUnit gets a reference to the given float32 and assigns it to the ExternalCostPerUnit field.
func (o *EventItemType) SetExternalCostPerUnit(v float32) {
	o.ExternalCostPerUnit = &v
}

// GetExternalOrder returns the ExternalOrder field value if set, zero value otherwise.
func (o *EventItemType) GetExternalOrder() bool {
	if o == nil || IsNil(o.ExternalOrder) {
		var ret bool
		return ret
	}
	return *o.ExternalOrder
}

// GetExternalOrderOk returns a tuple with the ExternalOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetExternalOrderOk() (*bool, bool) {
	if o == nil || IsNil(o.ExternalOrder) {
		return nil, false
	}
	return o.ExternalOrder, true
}

// HasExternalOrder returns a boolean if a field has been set.
func (o *EventItemType) HasExternalOrder() bool {
	if o != nil && !IsNil(o.ExternalOrder) {
		return true
	}

	return false
}

// SetExternalOrder gets a reference to the given bool and assigns it to the ExternalOrder field.
func (o *EventItemType) SetExternalOrder(v bool) {
	o.ExternalOrder = &v
}

// GetExternalQuantity returns the ExternalQuantity field value if set, zero value otherwise.
func (o *EventItemType) GetExternalQuantity() float32 {
	if o == nil || IsNil(o.ExternalQuantity) {
		var ret float32
		return ret
	}
	return *o.ExternalQuantity
}

// GetExternalQuantityOk returns a tuple with the ExternalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetExternalQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.ExternalQuantity) {
		return nil, false
	}
	return o.ExternalQuantity, true
}

// HasExternalQuantity returns a boolean if a field has been set.
func (o *EventItemType) HasExternalQuantity() bool {
	if o != nil && !IsNil(o.ExternalQuantity) {
		return true
	}

	return false
}

// SetExternalQuantity gets a reference to the given float32 and assigns it to the ExternalQuantity field.
func (o *EventItemType) SetExternalQuantity(v float32) {
	o.ExternalQuantity = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *EventItemType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *EventItemType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *EventItemType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInternalCostPerUnit returns the InternalCostPerUnit field value if set, zero value otherwise.
func (o *EventItemType) GetInternalCostPerUnit() float32 {
	if o == nil || IsNil(o.InternalCostPerUnit) {
		var ret float32
		return ret
	}
	return *o.InternalCostPerUnit
}

// GetInternalCostPerUnitOk returns a tuple with the InternalCostPerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetInternalCostPerUnitOk() (*float32, bool) {
	if o == nil || IsNil(o.InternalCostPerUnit) {
		return nil, false
	}
	return o.InternalCostPerUnit, true
}

// HasInternalCostPerUnit returns a boolean if a field has been set.
func (o *EventItemType) HasInternalCostPerUnit() bool {
	if o != nil && !IsNil(o.InternalCostPerUnit) {
		return true
	}

	return false
}

// SetInternalCostPerUnit gets a reference to the given float32 and assigns it to the InternalCostPerUnit field.
func (o *EventItemType) SetInternalCostPerUnit(v float32) {
	o.InternalCostPerUnit = &v
}

// GetInternalQuantity returns the InternalQuantity field value if set, zero value otherwise.
func (o *EventItemType) GetInternalQuantity() float32 {
	if o == nil || IsNil(o.InternalQuantity) {
		var ret float32
		return ret
	}
	return *o.InternalQuantity
}

// GetInternalQuantityOk returns a tuple with the InternalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetInternalQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.InternalQuantity) {
		return nil, false
	}
	return o.InternalQuantity, true
}

// HasInternalQuantity returns a boolean if a field has been set.
func (o *EventItemType) HasInternalQuantity() bool {
	if o != nil && !IsNil(o.InternalQuantity) {
		return true
	}

	return false
}

// SetInternalQuantity gets a reference to the given float32 and assigns it to the InternalQuantity field.
func (o *EventItemType) SetInternalQuantity(v float32) {
	o.InternalQuantity = &v
}

// GetIsExcludeNonDeduct returns the IsExcludeNonDeduct field value if set, zero value otherwise.
func (o *EventItemType) GetIsExcludeNonDeduct() bool {
	if o == nil || IsNil(o.IsExcludeNonDeduct) {
		var ret bool
		return ret
	}
	return *o.IsExcludeNonDeduct
}

// GetIsExcludeNonDeductOk returns a tuple with the IsExcludeNonDeduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetIsExcludeNonDeductOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExcludeNonDeduct) {
		return nil, false
	}
	return o.IsExcludeNonDeduct, true
}

// HasIsExcludeNonDeduct returns a boolean if a field has been set.
func (o *EventItemType) HasIsExcludeNonDeduct() bool {
	if o != nil && !IsNil(o.IsExcludeNonDeduct) {
		return true
	}

	return false
}

// SetIsExcludeNonDeduct gets a reference to the given bool and assigns it to the IsExcludeNonDeduct field.
func (o *EventItemType) SetIsExcludeNonDeduct(v bool) {
	o.IsExcludeNonDeduct = &v
}

// GetIsNameCustom returns the IsNameCustom field value if set, zero value otherwise.
func (o *EventItemType) GetIsNameCustom() bool {
	if o == nil || IsNil(o.IsNameCustom) {
		var ret bool
		return ret
	}
	return *o.IsNameCustom
}

// GetIsNameCustomOk returns a tuple with the IsNameCustom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetIsNameCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNameCustom) {
		return nil, false
	}
	return o.IsNameCustom, true
}

// HasIsNameCustom returns a boolean if a field has been set.
func (o *EventItemType) HasIsNameCustom() bool {
	if o != nil && !IsNil(o.IsNameCustom) {
		return true
	}

	return false
}

// SetIsNameCustom gets a reference to the given bool and assigns it to the IsNameCustom field.
func (o *EventItemType) SetIsNameCustom(v bool) {
	o.IsNameCustom = &v
}

// GetItemClassCode returns the ItemClassCode field value if set, zero value otherwise.
func (o *EventItemType) GetItemClassCode() string {
	if o == nil || IsNil(o.ItemClassCode) {
		var ret string
		return ret
	}
	return *o.ItemClassCode
}

// GetItemClassCodeOk returns a tuple with the ItemClassCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemClassCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemClassCode) {
		return nil, false
	}
	return o.ItemClassCode, true
}

// HasItemClassCode returns a boolean if a field has been set.
func (o *EventItemType) HasItemClassCode() bool {
	if o != nil && !IsNil(o.ItemClassCode) {
		return true
	}

	return false
}

// SetItemClassCode gets a reference to the given string and assigns it to the ItemClassCode field.
func (o *EventItemType) SetItemClassCode(v string) {
	o.ItemClassCode = &v
}

// GetItemClassDescription returns the ItemClassDescription field value if set, zero value otherwise.
func (o *EventItemType) GetItemClassDescription() string {
	if o == nil || IsNil(o.ItemClassDescription) {
		var ret string
		return ret
	}
	return *o.ItemClassDescription
}

// GetItemClassDescriptionOk returns a tuple with the ItemClassDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemClassDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemClassDescription) {
		return nil, false
	}
	return o.ItemClassDescription, true
}

// HasItemClassDescription returns a boolean if a field has been set.
func (o *EventItemType) HasItemClassDescription() bool {
	if o != nil && !IsNil(o.ItemClassDescription) {
		return true
	}

	return false
}

// SetItemClassDescription gets a reference to the given string and assigns it to the ItemClassDescription field.
func (o *EventItemType) SetItemClassDescription(v string) {
	o.ItemClassDescription = &v
}

// GetItemClassDisplaySequence returns the ItemClassDisplaySequence field value if set, zero value otherwise.
func (o *EventItemType) GetItemClassDisplaySequence() float32 {
	if o == nil || IsNil(o.ItemClassDisplaySequence) {
		var ret float32
		return ret
	}
	return *o.ItemClassDisplaySequence
}

// GetItemClassDisplaySequenceOk returns a tuple with the ItemClassDisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemClassDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.ItemClassDisplaySequence) {
		return nil, false
	}
	return o.ItemClassDisplaySequence, true
}

// HasItemClassDisplaySequence returns a boolean if a field has been set.
func (o *EventItemType) HasItemClassDisplaySequence() bool {
	if o != nil && !IsNil(o.ItemClassDisplaySequence) {
		return true
	}

	return false
}

// SetItemClassDisplaySequence gets a reference to the given float32 and assigns it to the ItemClassDisplaySequence field.
func (o *EventItemType) SetItemClassDisplaySequence(v float32) {
	o.ItemClassDisplaySequence = &v
}

// GetItemClassId returns the ItemClassId field value if set, zero value otherwise.
func (o *EventItemType) GetItemClassId() UniqueIDType {
	if o == nil || IsNil(o.ItemClassId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemClassId
}

// GetItemClassIdOk returns a tuple with the ItemClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemClassIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemClassId) {
		return nil, false
	}
	return o.ItemClassId, true
}

// HasItemClassId returns a boolean if a field has been set.
func (o *EventItemType) HasItemClassId() bool {
	if o != nil && !IsNil(o.ItemClassId) {
		return true
	}

	return false
}

// SetItemClassId gets a reference to the given UniqueIDType and assigns it to the ItemClassId field.
func (o *EventItemType) SetItemClassId(v UniqueIDType) {
	o.ItemClassId = &v
}

// GetItemCode returns the ItemCode field value if set, zero value otherwise.
func (o *EventItemType) GetItemCode() string {
	if o == nil || IsNil(o.ItemCode) {
		var ret string
		return ret
	}
	return *o.ItemCode
}

// GetItemCodeOk returns a tuple with the ItemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCode) {
		return nil, false
	}
	return o.ItemCode, true
}

// HasItemCode returns a boolean if a field has been set.
func (o *EventItemType) HasItemCode() bool {
	if o != nil && !IsNil(o.ItemCode) {
		return true
	}

	return false
}

// SetItemCode gets a reference to the given string and assigns it to the ItemCode field.
func (o *EventItemType) SetItemCode(v string) {
	o.ItemCode = &v
}

// GetItemDescription returns the ItemDescription field value if set, zero value otherwise.
func (o *EventItemType) GetItemDescription() string {
	if o == nil || IsNil(o.ItemDescription) {
		var ret string
		return ret
	}
	return *o.ItemDescription
}

// GetItemDescriptionOk returns a tuple with the ItemDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ItemDescription) {
		return nil, false
	}
	return o.ItemDescription, true
}

// HasItemDescription returns a boolean if a field has been set.
func (o *EventItemType) HasItemDescription() bool {
	if o != nil && !IsNil(o.ItemDescription) {
		return true
	}

	return false
}

// SetItemDescription gets a reference to the given string and assigns it to the ItemDescription field.
func (o *EventItemType) SetItemDescription(v string) {
	o.ItemDescription = &v
}

// GetItemFromTemplate returns the ItemFromTemplate field value if set, zero value otherwise.
func (o *EventItemType) GetItemFromTemplate() bool {
	if o == nil || IsNil(o.ItemFromTemplate) {
		var ret bool
		return ret
	}
	return *o.ItemFromTemplate
}

// GetItemFromTemplateOk returns a tuple with the ItemFromTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemFromTemplateOk() (*bool, bool) {
	if o == nil || IsNil(o.ItemFromTemplate) {
		return nil, false
	}
	return o.ItemFromTemplate, true
}

// HasItemFromTemplate returns a boolean if a field has been set.
func (o *EventItemType) HasItemFromTemplate() bool {
	if o != nil && !IsNil(o.ItemFromTemplate) {
		return true
	}

	return false
}

// SetItemFromTemplate gets a reference to the given bool and assigns it to the ItemFromTemplate field.
func (o *EventItemType) SetItemFromTemplate(v bool) {
	o.ItemFromTemplate = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *EventItemType) GetItemId() UniqueIDType {
	if o == nil || IsNil(o.ItemId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *EventItemType) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given UniqueIDType and assigns it to the ItemId field.
func (o *EventItemType) SetItemId(v UniqueIDType) {
	o.ItemId = &v
}

// GetItemName returns the ItemName field value if set, zero value otherwise.
func (o *EventItemType) GetItemName() TranslationTextType200 {
	if o == nil || IsNil(o.ItemName) {
		var ret TranslationTextType200
		return ret
	}
	return *o.ItemName
}

// GetItemNameOk returns a tuple with the ItemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemNameOk() (*TranslationTextType200, bool) {
	if o == nil || IsNil(o.ItemName) {
		return nil, false
	}
	return o.ItemName, true
}

// HasItemName returns a boolean if a field has been set.
func (o *EventItemType) HasItemName() bool {
	if o != nil && !IsNil(o.ItemName) {
		return true
	}

	return false
}

// SetItemName gets a reference to the given TranslationTextType200 and assigns it to the ItemName field.
func (o *EventItemType) SetItemName(v TranslationTextType200) {
	o.ItemName = &v
}

// GetItemPool returns the ItemPool field value if set, zero value otherwise.
func (o *EventItemType) GetItemPool() string {
	if o == nil || IsNil(o.ItemPool) {
		var ret string
		return ret
	}
	return *o.ItemPool
}

// GetItemPoolOk returns a tuple with the ItemPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemPoolOk() (*string, bool) {
	if o == nil || IsNil(o.ItemPool) {
		return nil, false
	}
	return o.ItemPool, true
}

// HasItemPool returns a boolean if a field has been set.
func (o *EventItemType) HasItemPool() bool {
	if o != nil && !IsNil(o.ItemPool) {
		return true
	}

	return false
}

// SetItemPool gets a reference to the given string and assigns it to the ItemPool field.
func (o *EventItemType) SetItemPool(v string) {
	o.ItemPool = &v
}

// GetItemRateId returns the ItemRateId field value if set, zero value otherwise.
func (o *EventItemType) GetItemRateId() UniqueIDType {
	if o == nil || IsNil(o.ItemRateId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ItemRateId
}

// GetItemRateIdOk returns a tuple with the ItemRateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetItemRateIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ItemRateId) {
		return nil, false
	}
	return o.ItemRateId, true
}

// HasItemRateId returns a boolean if a field has been set.
func (o *EventItemType) HasItemRateId() bool {
	if o != nil && !IsNil(o.ItemRateId) {
		return true
	}

	return false
}

// SetItemRateId gets a reference to the given UniqueIDType and assigns it to the ItemRateId field.
func (o *EventItemType) SetItemRateId(v UniqueIDType) {
	o.ItemRateId = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *EventItemType) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *EventItemType) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *EventItemType) SetOrder(v int32) {
	o.Order = &v
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *EventItemType) GetPackageId() UniqueIDType {
	if o == nil || IsNil(o.PackageId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetPackageIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *EventItemType) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given UniqueIDType and assigns it to the PackageId field.
func (o *EventItemType) SetPackageId(v UniqueIDType) {
	o.PackageId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *EventItemType) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *EventItemType) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *EventItemType) SetPrice(v float32) {
	o.Price = &v
}

// GetPriceCode returns the PriceCode field value if set, zero value otherwise.
func (o *EventItemType) GetPriceCode() string {
	if o == nil || IsNil(o.PriceCode) {
		var ret string
		return ret
	}
	return *o.PriceCode
}

// GetPriceCodeOk returns a tuple with the PriceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetPriceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PriceCode) {
		return nil, false
	}
	return o.PriceCode, true
}

// HasPriceCode returns a boolean if a field has been set.
func (o *EventItemType) HasPriceCode() bool {
	if o != nil && !IsNil(o.PriceCode) {
		return true
	}

	return false
}

// SetPriceCode gets a reference to the given string and assigns it to the PriceCode field.
func (o *EventItemType) SetPriceCode(v string) {
	o.PriceCode = &v
}

// GetPrint returns the Print field value if set, zero value otherwise.
func (o *EventItemType) GetPrint() bool {
	if o == nil || IsNil(o.Print) {
		var ret bool
		return ret
	}
	return *o.Print
}

// GetPrintOk returns a tuple with the Print field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetPrintOk() (*bool, bool) {
	if o == nil || IsNil(o.Print) {
		return nil, false
	}
	return o.Print, true
}

// HasPrint returns a boolean if a field has been set.
func (o *EventItemType) HasPrint() bool {
	if o != nil && !IsNil(o.Print) {
		return true
	}

	return false
}

// SetPrint gets a reference to the given bool and assigns it to the Print field.
func (o *EventItemType) SetPrint(v bool) {
	o.Print = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *EventItemType) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *EventItemType) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *EventItemType) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetRates returns the Rates field value if set, zero value otherwise.
func (o *EventItemType) GetRates() []ItemRateType {
	if o == nil || IsNil(o.Rates) {
		var ret []ItemRateType
		return ret
	}
	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetRatesOk() ([]ItemRateType, bool) {
	if o == nil || IsNil(o.Rates) {
		return nil, false
	}
	return o.Rates, true
}

// HasRates returns a boolean if a field has been set.
func (o *EventItemType) HasRates() bool {
	if o != nil && !IsNil(o.Rates) {
		return true
	}

	return false
}

// SetRates gets a reference to the given []ItemRateType and assigns it to the Rates field.
func (o *EventItemType) SetRates(v []ItemRateType) {
	o.Rates = v
}

// GetResourceNotes returns the ResourceNotes field value if set, zero value otherwise.
func (o *EventItemType) GetResourceNotes() []EventResourceNoteType {
	if o == nil || IsNil(o.ResourceNotes) {
		var ret []EventResourceNoteType
		return ret
	}
	return o.ResourceNotes
}

// GetResourceNotesOk returns a tuple with the ResourceNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetResourceNotesOk() ([]EventResourceNoteType, bool) {
	if o == nil || IsNil(o.ResourceNotes) {
		return nil, false
	}
	return o.ResourceNotes, true
}

// HasResourceNotes returns a boolean if a field has been set.
func (o *EventItemType) HasResourceNotes() bool {
	if o != nil && !IsNil(o.ResourceNotes) {
		return true
	}

	return false
}

// SetResourceNotes gets a reference to the given []EventResourceNoteType and assigns it to the ResourceNotes field.
func (o *EventItemType) SetResourceNotes(v []EventResourceNoteType) {
	o.ResourceNotes = v
}

// GetRevenueType returns the RevenueType field value if set, zero value otherwise.
func (o *EventItemType) GetRevenueType() string {
	if o == nil || IsNil(o.RevenueType) {
		var ret string
		return ret
	}
	return *o.RevenueType
}

// GetRevenueTypeOk returns a tuple with the RevenueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetRevenueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RevenueType) {
		return nil, false
	}
	return o.RevenueType, true
}

// HasRevenueType returns a boolean if a field has been set.
func (o *EventItemType) HasRevenueType() bool {
	if o != nil && !IsNil(o.RevenueType) {
		return true
	}

	return false
}

// SetRevenueType gets a reference to the given string and assigns it to the RevenueType field.
func (o *EventItemType) SetRevenueType(v string) {
	o.RevenueType = &v
}

// GetRevenueTypeEditable returns the RevenueTypeEditable field value if set, zero value otherwise.
func (o *EventItemType) GetRevenueTypeEditable() bool {
	if o == nil || IsNil(o.RevenueTypeEditable) {
		var ret bool
		return ret
	}
	return *o.RevenueTypeEditable
}

// GetRevenueTypeEditableOk returns a tuple with the RevenueTypeEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetRevenueTypeEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.RevenueTypeEditable) {
		return nil, false
	}
	return o.RevenueTypeEditable, true
}

// HasRevenueTypeEditable returns a boolean if a field has been set.
func (o *EventItemType) HasRevenueTypeEditable() bool {
	if o != nil && !IsNil(o.RevenueTypeEditable) {
		return true
	}

	return false
}

// SetRevenueTypeEditable gets a reference to the given bool and assigns it to the RevenueTypeEditable field.
func (o *EventItemType) SetRevenueTypeEditable(v bool) {
	o.RevenueTypeEditable = &v
}

// GetSellInfo returns the SellInfo field value if set, zero value otherwise.
func (o *EventItemType) GetSellInfo() EventItemTypeSellInfo {
	if o == nil || IsNil(o.SellInfo) {
		var ret EventItemTypeSellInfo
		return ret
	}
	return *o.SellInfo
}

// GetSellInfoOk returns a tuple with the SellInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetSellInfoOk() (*EventItemTypeSellInfo, bool) {
	if o == nil || IsNil(o.SellInfo) {
		return nil, false
	}
	return o.SellInfo, true
}

// HasSellInfo returns a boolean if a field has been set.
func (o *EventItemType) HasSellInfo() bool {
	if o != nil && !IsNil(o.SellInfo) {
		return true
	}

	return false
}

// SetSellInfo gets a reference to the given EventItemTypeSellInfo and assigns it to the SellInfo field.
func (o *EventItemType) SetSellInfo(v EventItemTypeSellInfo) {
	o.SellInfo = &v
}

// GetSetdownTime returns the SetdownTime field value if set, zero value otherwise.
func (o *EventItemType) GetSetdownTime() float32 {
	if o == nil || IsNil(o.SetdownTime) {
		var ret float32
		return ret
	}
	return *o.SetdownTime
}

// GetSetdownTimeOk returns a tuple with the SetdownTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetSetdownTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SetdownTime) {
		return nil, false
	}
	return o.SetdownTime, true
}

// HasSetdownTime returns a boolean if a field has been set.
func (o *EventItemType) HasSetdownTime() bool {
	if o != nil && !IsNil(o.SetdownTime) {
		return true
	}

	return false
}

// SetSetdownTime gets a reference to the given float32 and assigns it to the SetdownTime field.
func (o *EventItemType) SetSetdownTime(v float32) {
	o.SetdownTime = &v
}

// GetSetupTime returns the SetupTime field value if set, zero value otherwise.
func (o *EventItemType) GetSetupTime() float32 {
	if o == nil || IsNil(o.SetupTime) {
		var ret float32
		return ret
	}
	return *o.SetupTime
}

// GetSetupTimeOk returns a tuple with the SetupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetSetupTimeOk() (*float32, bool) {
	if o == nil || IsNil(o.SetupTime) {
		return nil, false
	}
	return o.SetupTime, true
}

// HasSetupTime returns a boolean if a field has been set.
func (o *EventItemType) HasSetupTime() bool {
	if o != nil && !IsNil(o.SetupTime) {
		return true
	}

	return false
}

// SetSetupTime gets a reference to the given float32 and assigns it to the SetupTime field.
func (o *EventItemType) SetSetupTime(v float32) {
	o.SetupTime = &v
}

// GetTraceText returns the TraceText field value if set, zero value otherwise.
func (o *EventItemType) GetTraceText() string {
	if o == nil || IsNil(o.TraceText) {
		var ret string
		return ret
	}
	return *o.TraceText
}

// GetTraceTextOk returns a tuple with the TraceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetTraceTextOk() (*string, bool) {
	if o == nil || IsNil(o.TraceText) {
		return nil, false
	}
	return o.TraceText, true
}

// HasTraceText returns a boolean if a field has been set.
func (o *EventItemType) HasTraceText() bool {
	if o != nil && !IsNil(o.TraceText) {
		return true
	}

	return false
}

// SetTraceText gets a reference to the given string and assigns it to the TraceText field.
func (o *EventItemType) SetTraceText(v string) {
	o.TraceText = &v
}

// GetUsedForEvents returns the UsedForEvents field value if set, zero value otherwise.
func (o *EventItemType) GetUsedForEvents() bool {
	if o == nil || IsNil(o.UsedForEvents) {
		var ret bool
		return ret
	}
	return *o.UsedForEvents
}

// GetUsedForEventsOk returns a tuple with the UsedForEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetUsedForEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedForEvents) {
		return nil, false
	}
	return o.UsedForEvents, true
}

// HasUsedForEvents returns a boolean if a field has been set.
func (o *EventItemType) HasUsedForEvents() bool {
	if o != nil && !IsNil(o.UsedForEvents) {
		return true
	}

	return false
}

// SetUsedForEvents gets a reference to the given bool and assigns it to the UsedForEvents field.
func (o *EventItemType) SetUsedForEvents(v bool) {
	o.UsedForEvents = &v
}

// GetUsedForReservation returns the UsedForReservation field value if set, zero value otherwise.
func (o *EventItemType) GetUsedForReservation() bool {
	if o == nil || IsNil(o.UsedForReservation) {
		var ret bool
		return ret
	}
	return *o.UsedForReservation
}

// GetUsedForReservationOk returns a tuple with the UsedForReservation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetUsedForReservationOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedForReservation) {
		return nil, false
	}
	return o.UsedForReservation, true
}

// HasUsedForReservation returns a boolean if a field has been set.
func (o *EventItemType) HasUsedForReservation() bool {
	if o != nil && !IsNil(o.UsedForReservation) {
		return true
	}

	return false
}

// SetUsedForReservation gets a reference to the given bool and assigns it to the UsedForReservation field.
func (o *EventItemType) SetUsedForReservation(v bool) {
	o.UsedForReservation = &v
}

// GetVendorPrice returns the VendorPrice field value if set, zero value otherwise.
func (o *EventItemType) GetVendorPrice() float32 {
	if o == nil || IsNil(o.VendorPrice) {
		var ret float32
		return ret
	}
	return *o.VendorPrice
}

// GetVendorPriceOk returns a tuple with the VendorPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetVendorPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.VendorPrice) {
		return nil, false
	}
	return o.VendorPrice, true
}

// HasVendorPrice returns a boolean if a field has been set.
func (o *EventItemType) HasVendorPrice() bool {
	if o != nil && !IsNil(o.VendorPrice) {
		return true
	}

	return false
}

// SetVendorPrice gets a reference to the given float32 and assigns it to the VendorPrice field.
func (o *EventItemType) SetVendorPrice(v float32) {
	o.VendorPrice = &v
}

// GetVendors returns the Vendors field value if set, zero value otherwise.
func (o *EventItemType) GetVendors() []ItemVendorType {
	if o == nil || IsNil(o.Vendors) {
		var ret []ItemVendorType
		return ret
	}
	return o.Vendors
}

// GetVendorsOk returns a tuple with the Vendors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemType) GetVendorsOk() ([]ItemVendorType, bool) {
	if o == nil || IsNil(o.Vendors) {
		return nil, false
	}
	return o.Vendors, true
}

// HasVendors returns a boolean if a field has been set.
func (o *EventItemType) HasVendors() bool {
	if o != nil && !IsNil(o.Vendors) {
		return true
	}

	return false
}

// SetVendors gets a reference to the given []ItemVendorType and assigns it to the Vendors field.
func (o *EventItemType) SetVendors(v []ItemVendorType) {
	o.Vendors = v
}

func (o EventItemType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventItemType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActualExternalCostPerUnit) {
		toSerialize["actualExternalCostPerUnit"] = o.ActualExternalCostPerUnit
	}
	if !IsNil(o.ActualExternalQuantity) {
		toSerialize["actualExternalQuantity"] = o.ActualExternalQuantity
	}
	if !IsNil(o.ActualInternalCostPerUnit) {
		toSerialize["actualInternalCostPerUnit"] = o.ActualInternalCostPerUnit
	}
	if !IsNil(o.ActualInternalQuantity) {
		toSerialize["actualInternalQuantity"] = o.ActualInternalQuantity
	}
	if !IsNil(o.ActualQuantity) {
		toSerialize["actualQuantity"] = o.ActualQuantity
	}
	if !IsNil(o.AttributeId) {
		toSerialize["attributeId"] = o.AttributeId
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Departments) {
		toSerialize["departments"] = o.Departments
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.EventEndDate) {
		toSerialize["eventEndDate"] = o.EventEndDate
	}
	if !IsNil(o.EventStartDate) {
		toSerialize["eventStartDate"] = o.EventStartDate
	}
	if !IsNil(o.EventTypes) {
		toSerialize["eventTypes"] = o.EventTypes
	}
	if !IsNil(o.ExternalCostPerUnit) {
		toSerialize["externalCostPerUnit"] = o.ExternalCostPerUnit
	}
	if !IsNil(o.ExternalOrder) {
		toSerialize["externalOrder"] = o.ExternalOrder
	}
	if !IsNil(o.ExternalQuantity) {
		toSerialize["externalQuantity"] = o.ExternalQuantity
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.InternalCostPerUnit) {
		toSerialize["internalCostPerUnit"] = o.InternalCostPerUnit
	}
	if !IsNil(o.InternalQuantity) {
		toSerialize["internalQuantity"] = o.InternalQuantity
	}
	if !IsNil(o.IsExcludeNonDeduct) {
		toSerialize["isExcludeNonDeduct"] = o.IsExcludeNonDeduct
	}
	if !IsNil(o.IsNameCustom) {
		toSerialize["isNameCustom"] = o.IsNameCustom
	}
	if !IsNil(o.ItemClassCode) {
		toSerialize["itemClassCode"] = o.ItemClassCode
	}
	if !IsNil(o.ItemClassDescription) {
		toSerialize["itemClassDescription"] = o.ItemClassDescription
	}
	if !IsNil(o.ItemClassDisplaySequence) {
		toSerialize["itemClassDisplaySequence"] = o.ItemClassDisplaySequence
	}
	if !IsNil(o.ItemClassId) {
		toSerialize["itemClassId"] = o.ItemClassId
	}
	if !IsNil(o.ItemCode) {
		toSerialize["itemCode"] = o.ItemCode
	}
	if !IsNil(o.ItemDescription) {
		toSerialize["itemDescription"] = o.ItemDescription
	}
	if !IsNil(o.ItemFromTemplate) {
		toSerialize["itemFromTemplate"] = o.ItemFromTemplate
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.ItemName) {
		toSerialize["itemName"] = o.ItemName
	}
	if !IsNil(o.ItemPool) {
		toSerialize["itemPool"] = o.ItemPool
	}
	if !IsNil(o.ItemRateId) {
		toSerialize["itemRateId"] = o.ItemRateId
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.PackageId) {
		toSerialize["packageId"] = o.PackageId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceCode) {
		toSerialize["priceCode"] = o.PriceCode
	}
	if !IsNil(o.Print) {
		toSerialize["print"] = o.Print
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Rates) {
		toSerialize["rates"] = o.Rates
	}
	if !IsNil(o.ResourceNotes) {
		toSerialize["resourceNotes"] = o.ResourceNotes
	}
	if !IsNil(o.RevenueType) {
		toSerialize["revenueType"] = o.RevenueType
	}
	if !IsNil(o.RevenueTypeEditable) {
		toSerialize["revenueTypeEditable"] = o.RevenueTypeEditable
	}
	if !IsNil(o.SellInfo) {
		toSerialize["sellInfo"] = o.SellInfo
	}
	if !IsNil(o.SetdownTime) {
		toSerialize["setdownTime"] = o.SetdownTime
	}
	if !IsNil(o.SetupTime) {
		toSerialize["setupTime"] = o.SetupTime
	}
	if !IsNil(o.TraceText) {
		toSerialize["traceText"] = o.TraceText
	}
	if !IsNil(o.UsedForEvents) {
		toSerialize["usedForEvents"] = o.UsedForEvents
	}
	if !IsNil(o.UsedForReservation) {
		toSerialize["usedForReservation"] = o.UsedForReservation
	}
	if !IsNil(o.VendorPrice) {
		toSerialize["vendorPrice"] = o.VendorPrice
	}
	if !IsNil(o.Vendors) {
		toSerialize["vendors"] = o.Vendors
	}
	return toSerialize, nil
}

type NullableEventItemType struct {
	value *EventItemType
	isSet bool
}

func (v NullableEventItemType) Get() *EventItemType {
	return v.value
}

func (v *NullableEventItemType) Set(val *EventItemType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventItemType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventItemType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventItemType(val *EventItemType) *NullableEventItemType {
	return &NullableEventItemType{value: val, isSet: true}
}

func (v NullableEventItemType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventItemType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


