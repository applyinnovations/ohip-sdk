/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ReservationTransactionDiversionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationTransactionDiversionType{}

// ReservationTransactionDiversionType A Transaction Diversion Rule Type
type ReservationTransactionDiversionType struct {
	// Transaction Diversion Code
	Code *string `json:"code,omitempty"`
	// List of daily details for Transaction Diversion rule.
	DailyDetails []TransactionDiversionDailyDetailType `json:"dailyDetails,omitempty"`
	// User defined message for the Transaction Diversion Rule.
	Description *string `json:"description,omitempty"`
	// User configured Sequence number.
	DisplaySequence *float32 `json:"displaySequence,omitempty"`
	// Transaction diversions that are diverted .
	Diverted *int32 `json:"diverted,omitempty"`
	// Hotel code with which Transaction Diversion Rule is associated.
	HotelId *string `json:"hotelId,omitempty"`
	// Indicator that tells whether the transaction diversion rule is active or not.
	Inactive *bool `json:"inactive,omitempty"`
	Level *TransactionDiversionRuleLevelType `json:"level,omitempty"`
	Membership *MembershipTypeLevelType `json:"membership,omitempty"`
	Notes *CommentInfoType `json:"notes,omitempty"`
	// Transaction diversions that are posted.
	Posted *int32 `json:"posted,omitempty"`
	// Room number to receive all the diverted transactions configured for this instruction.
	TargetRoom *string `json:"targetRoom,omitempty"`
	Thresholds *ThresholdDetailsType `json:"thresholds,omitempty"`
	// Collection of Transaction Code List
	TransactionCodes []CodeDescriptionType `json:"transactionCodes,omitempty"`
	Type *TransactionDiversionRuleTypeType `json:"type,omitempty"`
	// VIP code to consider while applying Diversion Instruction.
	VipCode *string `json:"vipCode,omitempty"`
}

// NewReservationTransactionDiversionType instantiates a new ReservationTransactionDiversionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationTransactionDiversionType() *ReservationTransactionDiversionType {
	this := ReservationTransactionDiversionType{}
	return &this
}

// NewReservationTransactionDiversionTypeWithDefaults instantiates a new ReservationTransactionDiversionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationTransactionDiversionTypeWithDefaults() *ReservationTransactionDiversionType {
	this := ReservationTransactionDiversionType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ReservationTransactionDiversionType) SetCode(v string) {
	o.Code = &v
}

// GetDailyDetails returns the DailyDetails field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetDailyDetails() []TransactionDiversionDailyDetailType {
	if o == nil || IsNil(o.DailyDetails) {
		var ret []TransactionDiversionDailyDetailType
		return ret
	}
	return o.DailyDetails
}

// GetDailyDetailsOk returns a tuple with the DailyDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetDailyDetailsOk() ([]TransactionDiversionDailyDetailType, bool) {
	if o == nil || IsNil(o.DailyDetails) {
		return nil, false
	}
	return o.DailyDetails, true
}

// HasDailyDetails returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasDailyDetails() bool {
	if o != nil && !IsNil(o.DailyDetails) {
		return true
	}

	return false
}

// SetDailyDetails gets a reference to the given []TransactionDiversionDailyDetailType and assigns it to the DailyDetails field.
func (o *ReservationTransactionDiversionType) SetDailyDetails(v []TransactionDiversionDailyDetailType) {
	o.DailyDetails = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReservationTransactionDiversionType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplaySequence returns the DisplaySequence field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetDisplaySequence() float32 {
	if o == nil || IsNil(o.DisplaySequence) {
		var ret float32
		return ret
	}
	return *o.DisplaySequence
}

// GetDisplaySequenceOk returns a tuple with the DisplaySequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetDisplaySequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplaySequence) {
		return nil, false
	}
	return o.DisplaySequence, true
}

// HasDisplaySequence returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasDisplaySequence() bool {
	if o != nil && !IsNil(o.DisplaySequence) {
		return true
	}

	return false
}

// SetDisplaySequence gets a reference to the given float32 and assigns it to the DisplaySequence field.
func (o *ReservationTransactionDiversionType) SetDisplaySequence(v float32) {
	o.DisplaySequence = &v
}

// GetDiverted returns the Diverted field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetDiverted() int32 {
	if o == nil || IsNil(o.Diverted) {
		var ret int32
		return ret
	}
	return *o.Diverted
}

// GetDivertedOk returns a tuple with the Diverted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetDivertedOk() (*int32, bool) {
	if o == nil || IsNil(o.Diverted) {
		return nil, false
	}
	return o.Diverted, true
}

// HasDiverted returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasDiverted() bool {
	if o != nil && !IsNil(o.Diverted) {
		return true
	}

	return false
}

// SetDiverted gets a reference to the given int32 and assigns it to the Diverted field.
func (o *ReservationTransactionDiversionType) SetDiverted(v int32) {
	o.Diverted = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ReservationTransactionDiversionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ReservationTransactionDiversionType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetLevel() TransactionDiversionRuleLevelType {
	if o == nil || IsNil(o.Level) {
		var ret TransactionDiversionRuleLevelType
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetLevelOk() (*TransactionDiversionRuleLevelType, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given TransactionDiversionRuleLevelType and assigns it to the Level field.
func (o *ReservationTransactionDiversionType) SetLevel(v TransactionDiversionRuleLevelType) {
	o.Level = &v
}

// GetMembership returns the Membership field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetMembership() MembershipTypeLevelType {
	if o == nil || IsNil(o.Membership) {
		var ret MembershipTypeLevelType
		return ret
	}
	return *o.Membership
}

// GetMembershipOk returns a tuple with the Membership field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetMembershipOk() (*MembershipTypeLevelType, bool) {
	if o == nil || IsNil(o.Membership) {
		return nil, false
	}
	return o.Membership, true
}

// HasMembership returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasMembership() bool {
	if o != nil && !IsNil(o.Membership) {
		return true
	}

	return false
}

// SetMembership gets a reference to the given MembershipTypeLevelType and assigns it to the Membership field.
func (o *ReservationTransactionDiversionType) SetMembership(v MembershipTypeLevelType) {
	o.Membership = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetNotes() CommentInfoType {
	if o == nil || IsNil(o.Notes) {
		var ret CommentInfoType
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetNotesOk() (*CommentInfoType, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given CommentInfoType and assigns it to the Notes field.
func (o *ReservationTransactionDiversionType) SetNotes(v CommentInfoType) {
	o.Notes = &v
}

// GetPosted returns the Posted field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetPosted() int32 {
	if o == nil || IsNil(o.Posted) {
		var ret int32
		return ret
	}
	return *o.Posted
}

// GetPostedOk returns a tuple with the Posted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetPostedOk() (*int32, bool) {
	if o == nil || IsNil(o.Posted) {
		return nil, false
	}
	return o.Posted, true
}

// HasPosted returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasPosted() bool {
	if o != nil && !IsNil(o.Posted) {
		return true
	}

	return false
}

// SetPosted gets a reference to the given int32 and assigns it to the Posted field.
func (o *ReservationTransactionDiversionType) SetPosted(v int32) {
	o.Posted = &v
}

// GetTargetRoom returns the TargetRoom field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetTargetRoom() string {
	if o == nil || IsNil(o.TargetRoom) {
		var ret string
		return ret
	}
	return *o.TargetRoom
}

// GetTargetRoomOk returns a tuple with the TargetRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetTargetRoomOk() (*string, bool) {
	if o == nil || IsNil(o.TargetRoom) {
		return nil, false
	}
	return o.TargetRoom, true
}

// HasTargetRoom returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasTargetRoom() bool {
	if o != nil && !IsNil(o.TargetRoom) {
		return true
	}

	return false
}

// SetTargetRoom gets a reference to the given string and assigns it to the TargetRoom field.
func (o *ReservationTransactionDiversionType) SetTargetRoom(v string) {
	o.TargetRoom = &v
}

// GetThresholds returns the Thresholds field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetThresholds() ThresholdDetailsType {
	if o == nil || IsNil(o.Thresholds) {
		var ret ThresholdDetailsType
		return ret
	}
	return *o.Thresholds
}

// GetThresholdsOk returns a tuple with the Thresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetThresholdsOk() (*ThresholdDetailsType, bool) {
	if o == nil || IsNil(o.Thresholds) {
		return nil, false
	}
	return o.Thresholds, true
}

// HasThresholds returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasThresholds() bool {
	if o != nil && !IsNil(o.Thresholds) {
		return true
	}

	return false
}

// SetThresholds gets a reference to the given ThresholdDetailsType and assigns it to the Thresholds field.
func (o *ReservationTransactionDiversionType) SetThresholds(v ThresholdDetailsType) {
	o.Thresholds = &v
}

// GetTransactionCodes returns the TransactionCodes field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetTransactionCodes() []CodeDescriptionType {
	if o == nil || IsNil(o.TransactionCodes) {
		var ret []CodeDescriptionType
		return ret
	}
	return o.TransactionCodes
}

// GetTransactionCodesOk returns a tuple with the TransactionCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetTransactionCodesOk() ([]CodeDescriptionType, bool) {
	if o == nil || IsNil(o.TransactionCodes) {
		return nil, false
	}
	return o.TransactionCodes, true
}

// HasTransactionCodes returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasTransactionCodes() bool {
	if o != nil && !IsNil(o.TransactionCodes) {
		return true
	}

	return false
}

// SetTransactionCodes gets a reference to the given []CodeDescriptionType and assigns it to the TransactionCodes field.
func (o *ReservationTransactionDiversionType) SetTransactionCodes(v []CodeDescriptionType) {
	o.TransactionCodes = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetType() TransactionDiversionRuleTypeType {
	if o == nil || IsNil(o.Type) {
		var ret TransactionDiversionRuleTypeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetTypeOk() (*TransactionDiversionRuleTypeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TransactionDiversionRuleTypeType and assigns it to the Type field.
func (o *ReservationTransactionDiversionType) SetType(v TransactionDiversionRuleTypeType) {
	o.Type = &v
}

// GetVipCode returns the VipCode field value if set, zero value otherwise.
func (o *ReservationTransactionDiversionType) GetVipCode() string {
	if o == nil || IsNil(o.VipCode) {
		var ret string
		return ret
	}
	return *o.VipCode
}

// GetVipCodeOk returns a tuple with the VipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationTransactionDiversionType) GetVipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VipCode) {
		return nil, false
	}
	return o.VipCode, true
}

// HasVipCode returns a boolean if a field has been set.
func (o *ReservationTransactionDiversionType) HasVipCode() bool {
	if o != nil && !IsNil(o.VipCode) {
		return true
	}

	return false
}

// SetVipCode gets a reference to the given string and assigns it to the VipCode field.
func (o *ReservationTransactionDiversionType) SetVipCode(v string) {
	o.VipCode = &v
}

func (o ReservationTransactionDiversionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationTransactionDiversionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.DailyDetails) {
		toSerialize["dailyDetails"] = o.DailyDetails
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplaySequence) {
		toSerialize["displaySequence"] = o.DisplaySequence
	}
	if !IsNil(o.Diverted) {
		toSerialize["diverted"] = o.Diverted
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Membership) {
		toSerialize["membership"] = o.Membership
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Posted) {
		toSerialize["posted"] = o.Posted
	}
	if !IsNil(o.TargetRoom) {
		toSerialize["targetRoom"] = o.TargetRoom
	}
	if !IsNil(o.Thresholds) {
		toSerialize["thresholds"] = o.Thresholds
	}
	if !IsNil(o.TransactionCodes) {
		toSerialize["transactionCodes"] = o.TransactionCodes
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VipCode) {
		toSerialize["vipCode"] = o.VipCode
	}
	return toSerialize, nil
}

type NullableReservationTransactionDiversionType struct {
	value *ReservationTransactionDiversionType
	isSet bool
}

func (v NullableReservationTransactionDiversionType) Get() *ReservationTransactionDiversionType {
	return v.value
}

func (v *NullableReservationTransactionDiversionType) Set(val *ReservationTransactionDiversionType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationTransactionDiversionType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationTransactionDiversionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationTransactionDiversionType(val *ReservationTransactionDiversionType) *NullableReservationTransactionDiversionType {
	return &NullableReservationTransactionDiversionType{value: val, isSet: true}
}

func (v NullableReservationTransactionDiversionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationTransactionDiversionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


