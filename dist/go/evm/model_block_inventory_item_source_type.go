/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the BlockInventoryItemSourceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockInventoryItemSourceType{}

// BlockInventoryItemSourceType Defines whether the item is setupCode due to a Rate Plan, Package or a Block.
type BlockInventoryItemSourceType struct {
	// Rate Plan Code, If populated specifies that the item is setupCode due to a Rate Plan.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// Package Code, If populated specifies that the item is setupCode due to a Package.
	PackageCode *string `json:"packageCode,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
}

// NewBlockInventoryItemSourceType instantiates a new BlockInventoryItemSourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockInventoryItemSourceType() *BlockInventoryItemSourceType {
	this := BlockInventoryItemSourceType{}
	return &this
}

// NewBlockInventoryItemSourceTypeWithDefaults instantiates a new BlockInventoryItemSourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockInventoryItemSourceTypeWithDefaults() *BlockInventoryItemSourceType {
	this := BlockInventoryItemSourceType{}
	return &this
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *BlockInventoryItemSourceType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInventoryItemSourceType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *BlockInventoryItemSourceType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *BlockInventoryItemSourceType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetPackageCode returns the PackageCode field value if set, zero value otherwise.
func (o *BlockInventoryItemSourceType) GetPackageCode() string {
	if o == nil || IsNil(o.PackageCode) {
		var ret string
		return ret
	}
	return *o.PackageCode
}

// GetPackageCodeOk returns a tuple with the PackageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInventoryItemSourceType) GetPackageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageCode) {
		return nil, false
	}
	return o.PackageCode, true
}

// HasPackageCode returns a boolean if a field has been set.
func (o *BlockInventoryItemSourceType) HasPackageCode() bool {
	if o != nil && !IsNil(o.PackageCode) {
		return true
	}

	return false
}

// SetPackageCode gets a reference to the given string and assigns it to the PackageCode field.
func (o *BlockInventoryItemSourceType) SetPackageCode(v string) {
	o.PackageCode = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *BlockInventoryItemSourceType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockInventoryItemSourceType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *BlockInventoryItemSourceType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *BlockInventoryItemSourceType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

func (o BlockInventoryItemSourceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockInventoryItemSourceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.PackageCode) {
		toSerialize["packageCode"] = o.PackageCode
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	return toSerialize, nil
}

type NullableBlockInventoryItemSourceType struct {
	value *BlockInventoryItemSourceType
	isSet bool
}

func (v NullableBlockInventoryItemSourceType) Get() *BlockInventoryItemSourceType {
	return v.value
}

func (v *NullableBlockInventoryItemSourceType) Set(val *BlockInventoryItemSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockInventoryItemSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockInventoryItemSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockInventoryItemSourceType(val *BlockInventoryItemSourceType) *NullableBlockInventoryItemSourceType {
	return &NullableBlockInventoryItemSourceType{value: val, isSet: true}
}

func (v NullableBlockInventoryItemSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockInventoryItemSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


