/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the WaitlistedEventsSearchType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WaitlistedEventsSearchType{}

// WaitlistedEventsSearchType Request object for retrieving waitlisted and current events holding the function space.
type WaitlistedEventsSearchType struct {
	// Search a specific account's waitlisted events.
	AccountName *string `json:"accountName,omitempty"`
	BlockId *UniqueIDType `json:"blockId,omitempty"`
	// Search a specific block's waitlisted events.
	BlockName *string `json:"blockName,omitempty"`
	FunctionSpaceCode []string `json:"functionSpaceCode,omitempty"`
	// Hotel code of Function Space.
	HotelId *string `json:"hotelId,omitempty"`
	WaitlistedTimeSpan *DateTimeSpanType `json:"waitlistedTimeSpan,omitempty"`
}

// NewWaitlistedEventsSearchType instantiates a new WaitlistedEventsSearchType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaitlistedEventsSearchType() *WaitlistedEventsSearchType {
	this := WaitlistedEventsSearchType{}
	return &this
}

// NewWaitlistedEventsSearchTypeWithDefaults instantiates a new WaitlistedEventsSearchType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaitlistedEventsSearchTypeWithDefaults() *WaitlistedEventsSearchType {
	this := WaitlistedEventsSearchType{}
	return &this
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *WaitlistedEventsSearchType) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistedEventsSearchType) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *WaitlistedEventsSearchType) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *WaitlistedEventsSearchType) SetAccountName(v string) {
	o.AccountName = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *WaitlistedEventsSearchType) GetBlockId() UniqueIDType {
	if o == nil || IsNil(o.BlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistedEventsSearchType) GetBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *WaitlistedEventsSearchType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given UniqueIDType and assigns it to the BlockId field.
func (o *WaitlistedEventsSearchType) SetBlockId(v UniqueIDType) {
	o.BlockId = &v
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *WaitlistedEventsSearchType) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistedEventsSearchType) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *WaitlistedEventsSearchType) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *WaitlistedEventsSearchType) SetBlockName(v string) {
	o.BlockName = &v
}

// GetFunctionSpaceCode returns the FunctionSpaceCode field value if set, zero value otherwise.
func (o *WaitlistedEventsSearchType) GetFunctionSpaceCode() []string {
	if o == nil || IsNil(o.FunctionSpaceCode) {
		var ret []string
		return ret
	}
	return o.FunctionSpaceCode
}

// GetFunctionSpaceCodeOk returns a tuple with the FunctionSpaceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistedEventsSearchType) GetFunctionSpaceCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.FunctionSpaceCode) {
		return nil, false
	}
	return o.FunctionSpaceCode, true
}

// HasFunctionSpaceCode returns a boolean if a field has been set.
func (o *WaitlistedEventsSearchType) HasFunctionSpaceCode() bool {
	if o != nil && !IsNil(o.FunctionSpaceCode) {
		return true
	}

	return false
}

// SetFunctionSpaceCode gets a reference to the given []string and assigns it to the FunctionSpaceCode field.
func (o *WaitlistedEventsSearchType) SetFunctionSpaceCode(v []string) {
	o.FunctionSpaceCode = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *WaitlistedEventsSearchType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistedEventsSearchType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *WaitlistedEventsSearchType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *WaitlistedEventsSearchType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetWaitlistedTimeSpan returns the WaitlistedTimeSpan field value if set, zero value otherwise.
func (o *WaitlistedEventsSearchType) GetWaitlistedTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.WaitlistedTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.WaitlistedTimeSpan
}

// GetWaitlistedTimeSpanOk returns a tuple with the WaitlistedTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitlistedEventsSearchType) GetWaitlistedTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.WaitlistedTimeSpan) {
		return nil, false
	}
	return o.WaitlistedTimeSpan, true
}

// HasWaitlistedTimeSpan returns a boolean if a field has been set.
func (o *WaitlistedEventsSearchType) HasWaitlistedTimeSpan() bool {
	if o != nil && !IsNil(o.WaitlistedTimeSpan) {
		return true
	}

	return false
}

// SetWaitlistedTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the WaitlistedTimeSpan field.
func (o *WaitlistedEventsSearchType) SetWaitlistedTimeSpan(v DateTimeSpanType) {
	o.WaitlistedTimeSpan = &v
}

func (o WaitlistedEventsSearchType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WaitlistedEventsSearchType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.FunctionSpaceCode) {
		toSerialize["functionSpaceCode"] = o.FunctionSpaceCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.WaitlistedTimeSpan) {
		toSerialize["waitlistedTimeSpan"] = o.WaitlistedTimeSpan
	}
	return toSerialize, nil
}

type NullableWaitlistedEventsSearchType struct {
	value *WaitlistedEventsSearchType
	isSet bool
}

func (v NullableWaitlistedEventsSearchType) Get() *WaitlistedEventsSearchType {
	return v.value
}

func (v *NullableWaitlistedEventsSearchType) Set(val *WaitlistedEventsSearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitlistedEventsSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitlistedEventsSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitlistedEventsSearchType(val *WaitlistedEventsSearchType) *NullableWaitlistedEventsSearchType {
	return &NullableWaitlistedEventsSearchType{value: val, isSet: true}
}

func (v NullableWaitlistedEventsSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitlistedEventsSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


