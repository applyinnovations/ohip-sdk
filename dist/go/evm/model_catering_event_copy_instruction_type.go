/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
	"fmt"
)

// CateringEventCopyInstructionType Include Event Forecast Figures.
type CateringEventCopyInstructionType string

// List of cateringEventCopyInstructionType
const (
	CATERINGEVENTCOPYINSTRUCTIONTYPE_SUB_EVENTS CateringEventCopyInstructionType = "SubEvents"
	CATERINGEVENTCOPYINSTRUCTIONTYPE_EVENT_NOTES CateringEventCopyInstructionType = "EventNotes"
	CATERINGEVENTCOPYINSTRUCTIONTYPE_EVENT_RESOURCES CateringEventCopyInstructionType = "EventResources"
	CATERINGEVENTCOPYINSTRUCTIONTYPE_EVENT_RESOURCE_NOTES CateringEventCopyInstructionType = "EventResourceNotes"
	CATERINGEVENTCOPYINSTRUCTIONTYPE_EVENT_RESOURCE_PRICES CateringEventCopyInstructionType = "EventResourcePrices"
	CATERINGEVENTCOPYINSTRUCTIONTYPE_EVENT_CHANGE_NOTES CateringEventCopyInstructionType = "EventChangeNotes"
	CATERINGEVENTCOPYINSTRUCTIONTYPE_EVENT_FORECAST_FIGURES CateringEventCopyInstructionType = "EventForecastFigures"
)

// All allowed values of CateringEventCopyInstructionType enum
var AllowedCateringEventCopyInstructionTypeEnumValues = []CateringEventCopyInstructionType{
	"SubEvents",
	"EventNotes",
	"EventResources",
	"EventResourceNotes",
	"EventResourcePrices",
	"EventChangeNotes",
	"EventForecastFigures",
}

func (v *CateringEventCopyInstructionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CateringEventCopyInstructionType(value)
	for _, existing := range AllowedCateringEventCopyInstructionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CateringEventCopyInstructionType", value)
}

// NewCateringEventCopyInstructionTypeFromValue returns a pointer to a valid CateringEventCopyInstructionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCateringEventCopyInstructionTypeFromValue(v string) (*CateringEventCopyInstructionType, error) {
	ev := CateringEventCopyInstructionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CateringEventCopyInstructionType: valid values are %v", v, AllowedCateringEventCopyInstructionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CateringEventCopyInstructionType) IsValid() bool {
	for _, existing := range AllowedCateringEventCopyInstructionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cateringEventCopyInstructionType value
func (v CateringEventCopyInstructionType) Ptr() *CateringEventCopyInstructionType {
	return &v
}

type NullableCateringEventCopyInstructionType struct {
	value *CateringEventCopyInstructionType
	isSet bool
}

func (v NullableCateringEventCopyInstructionType) Get() *CateringEventCopyInstructionType {
	return v.value
}

func (v *NullableCateringEventCopyInstructionType) Set(val *CateringEventCopyInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventCopyInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventCopyInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventCopyInstructionType(val *CateringEventCopyInstructionType) *NullableCateringEventCopyInstructionType {
	return &NullableCateringEventCopyInstructionType{value: val, isSet: true}
}

func (v NullableCateringEventCopyInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventCopyInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

