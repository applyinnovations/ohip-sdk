/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the RoutingInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingInfoType{}

// RoutingInfoType A routing info object can either be of type Folio OR of type Room with its corresponding object.
type RoutingInfoType struct {
	Folio *RoutingInfoTypeFolio `json:"folio,omitempty"`
	FunctionSpaceDetails *RoutingInfoTypeFunctionSpaceDetails `json:"functionSpaceDetails,omitempty"`
	Request *RoutingInfoTypeRequest `json:"request,omitempty"`
	// On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions.
	RefreshFolio *bool `json:"refreshFolio,omitempty"`
}

// NewRoutingInfoType instantiates a new RoutingInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingInfoType() *RoutingInfoType {
	this := RoutingInfoType{}
	return &this
}

// NewRoutingInfoTypeWithDefaults instantiates a new RoutingInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingInfoTypeWithDefaults() *RoutingInfoType {
	this := RoutingInfoType{}
	return &this
}

// GetFolio returns the Folio field value if set, zero value otherwise.
func (o *RoutingInfoType) GetFolio() RoutingInfoTypeFolio {
	if o == nil || IsNil(o.Folio) {
		var ret RoutingInfoTypeFolio
		return ret
	}
	return *o.Folio
}

// GetFolioOk returns a tuple with the Folio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoType) GetFolioOk() (*RoutingInfoTypeFolio, bool) {
	if o == nil || IsNil(o.Folio) {
		return nil, false
	}
	return o.Folio, true
}

// HasFolio returns a boolean if a field has been set.
func (o *RoutingInfoType) HasFolio() bool {
	if o != nil && !IsNil(o.Folio) {
		return true
	}

	return false
}

// SetFolio gets a reference to the given RoutingInfoTypeFolio and assigns it to the Folio field.
func (o *RoutingInfoType) SetFolio(v RoutingInfoTypeFolio) {
	o.Folio = &v
}

// GetFunctionSpaceDetails returns the FunctionSpaceDetails field value if set, zero value otherwise.
func (o *RoutingInfoType) GetFunctionSpaceDetails() RoutingInfoTypeFunctionSpaceDetails {
	if o == nil || IsNil(o.FunctionSpaceDetails) {
		var ret RoutingInfoTypeFunctionSpaceDetails
		return ret
	}
	return *o.FunctionSpaceDetails
}

// GetFunctionSpaceDetailsOk returns a tuple with the FunctionSpaceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoType) GetFunctionSpaceDetailsOk() (*RoutingInfoTypeFunctionSpaceDetails, bool) {
	if o == nil || IsNil(o.FunctionSpaceDetails) {
		return nil, false
	}
	return o.FunctionSpaceDetails, true
}

// HasFunctionSpaceDetails returns a boolean if a field has been set.
func (o *RoutingInfoType) HasFunctionSpaceDetails() bool {
	if o != nil && !IsNil(o.FunctionSpaceDetails) {
		return true
	}

	return false
}

// SetFunctionSpaceDetails gets a reference to the given RoutingInfoTypeFunctionSpaceDetails and assigns it to the FunctionSpaceDetails field.
func (o *RoutingInfoType) SetFunctionSpaceDetails(v RoutingInfoTypeFunctionSpaceDetails) {
	o.FunctionSpaceDetails = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *RoutingInfoType) GetRequest() RoutingInfoTypeRequest {
	if o == nil || IsNil(o.Request) {
		var ret RoutingInfoTypeRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoType) GetRequestOk() (*RoutingInfoTypeRequest, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *RoutingInfoType) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given RoutingInfoTypeRequest and assigns it to the Request field.
func (o *RoutingInfoType) SetRequest(v RoutingInfoTypeRequest) {
	o.Request = &v
}

// GetRefreshFolio returns the RefreshFolio field value if set, zero value otherwise.
func (o *RoutingInfoType) GetRefreshFolio() bool {
	if o == nil || IsNil(o.RefreshFolio) {
		var ret bool
		return ret
	}
	return *o.RefreshFolio
}

// GetRefreshFolioOk returns a tuple with the RefreshFolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoType) GetRefreshFolioOk() (*bool, bool) {
	if o == nil || IsNil(o.RefreshFolio) {
		return nil, false
	}
	return o.RefreshFolio, true
}

// HasRefreshFolio returns a boolean if a field has been set.
func (o *RoutingInfoType) HasRefreshFolio() bool {
	if o != nil && !IsNil(o.RefreshFolio) {
		return true
	}

	return false
}

// SetRefreshFolio gets a reference to the given bool and assigns it to the RefreshFolio field.
func (o *RoutingInfoType) SetRefreshFolio(v bool) {
	o.RefreshFolio = &v
}

func (o RoutingInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Folio) {
		toSerialize["folio"] = o.Folio
	}
	if !IsNil(o.FunctionSpaceDetails) {
		toSerialize["functionSpaceDetails"] = o.FunctionSpaceDetails
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.RefreshFolio) {
		toSerialize["refreshFolio"] = o.RefreshFolio
	}
	return toSerialize, nil
}

type NullableRoutingInfoType struct {
	value *RoutingInfoType
	isSet bool
}

func (v NullableRoutingInfoType) Get() *RoutingInfoType {
	return v.value
}

func (v *NullableRoutingInfoType) Set(val *RoutingInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingInfoType(val *RoutingInfoType) *NullableRoutingInfoType {
	return &NullableRoutingInfoType{value: val, isSet: true}
}

func (v NullableRoutingInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


