/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventItemsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventItemsType{}

// EventItemsType List of event items
type EventItemsType struct {
	// Flag to indicate all inventory items are critical.
	Critical *bool `json:"critical,omitempty"`
	// Collection of Detailed information about event items.
	EventItemInfo []EventItemInfoType `json:"eventItemInfo,omitempty"`
	// Flag to indicate all inventory items are part of a package.
	IncludedInPackage *bool `json:"includedInPackage,omitempty"`
}

// NewEventItemsType instantiates a new EventItemsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventItemsType() *EventItemsType {
	this := EventItemsType{}
	return &this
}

// NewEventItemsTypeWithDefaults instantiates a new EventItemsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventItemsTypeWithDefaults() *EventItemsType {
	this := EventItemsType{}
	return &this
}

// GetCritical returns the Critical field value if set, zero value otherwise.
func (o *EventItemsType) GetCritical() bool {
	if o == nil || IsNil(o.Critical) {
		var ret bool
		return ret
	}
	return *o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemsType) GetCriticalOk() (*bool, bool) {
	if o == nil || IsNil(o.Critical) {
		return nil, false
	}
	return o.Critical, true
}

// HasCritical returns a boolean if a field has been set.
func (o *EventItemsType) HasCritical() bool {
	if o != nil && !IsNil(o.Critical) {
		return true
	}

	return false
}

// SetCritical gets a reference to the given bool and assigns it to the Critical field.
func (o *EventItemsType) SetCritical(v bool) {
	o.Critical = &v
}

// GetEventItemInfo returns the EventItemInfo field value if set, zero value otherwise.
func (o *EventItemsType) GetEventItemInfo() []EventItemInfoType {
	if o == nil || IsNil(o.EventItemInfo) {
		var ret []EventItemInfoType
		return ret
	}
	return o.EventItemInfo
}

// GetEventItemInfoOk returns a tuple with the EventItemInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemsType) GetEventItemInfoOk() ([]EventItemInfoType, bool) {
	if o == nil || IsNil(o.EventItemInfo) {
		return nil, false
	}
	return o.EventItemInfo, true
}

// HasEventItemInfo returns a boolean if a field has been set.
func (o *EventItemsType) HasEventItemInfo() bool {
	if o != nil && !IsNil(o.EventItemInfo) {
		return true
	}

	return false
}

// SetEventItemInfo gets a reference to the given []EventItemInfoType and assigns it to the EventItemInfo field.
func (o *EventItemsType) SetEventItemInfo(v []EventItemInfoType) {
	o.EventItemInfo = v
}

// GetIncludedInPackage returns the IncludedInPackage field value if set, zero value otherwise.
func (o *EventItemsType) GetIncludedInPackage() bool {
	if o == nil || IsNil(o.IncludedInPackage) {
		var ret bool
		return ret
	}
	return *o.IncludedInPackage
}

// GetIncludedInPackageOk returns a tuple with the IncludedInPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventItemsType) GetIncludedInPackageOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludedInPackage) {
		return nil, false
	}
	return o.IncludedInPackage, true
}

// HasIncludedInPackage returns a boolean if a field has been set.
func (o *EventItemsType) HasIncludedInPackage() bool {
	if o != nil && !IsNil(o.IncludedInPackage) {
		return true
	}

	return false
}

// SetIncludedInPackage gets a reference to the given bool and assigns it to the IncludedInPackage field.
func (o *EventItemsType) SetIncludedInPackage(v bool) {
	o.IncludedInPackage = &v
}

func (o EventItemsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventItemsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Critical) {
		toSerialize["critical"] = o.Critical
	}
	if !IsNil(o.EventItemInfo) {
		toSerialize["eventItemInfo"] = o.EventItemInfo
	}
	if !IsNil(o.IncludedInPackage) {
		toSerialize["includedInPackage"] = o.IncludedInPackage
	}
	return toSerialize, nil
}

type NullableEventItemsType struct {
	value *EventItemsType
	isSet bool
}

func (v NullableEventItemsType) Get() *EventItemsType {
	return v.value
}

func (v *NullableEventItemsType) Set(val *EventItemsType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventItemsType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventItemsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventItemsType(val *EventItemsType) *NullableEventItemsType {
	return &NullableEventItemsType{value: val, isSet: true}
}

func (v NullableEventItemsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventItemsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


