/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ManageAlternateEventsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManageAlternateEventsRequest{}

// ManageAlternateEventsRequest struct for ManageAlternateEventsRequest
type ManageAlternateEventsRequest struct {
	// Pertain event information.
	AlternateEvents []EventInfoType `json:"alternateEvents,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	ManageAlternateEventsInstruction *ManageAlternateEventsInstructionType `json:"manageAlternateEventsInstruction,omitempty"`
	// Used in conjunction with the Success elementSpace to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewManageAlternateEventsRequest instantiates a new ManageAlternateEventsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageAlternateEventsRequest() *ManageAlternateEventsRequest {
	this := ManageAlternateEventsRequest{}
	return &this
}

// NewManageAlternateEventsRequestWithDefaults instantiates a new ManageAlternateEventsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageAlternateEventsRequestWithDefaults() *ManageAlternateEventsRequest {
	this := ManageAlternateEventsRequest{}
	return &this
}

// GetAlternateEvents returns the AlternateEvents field value if set, zero value otherwise.
func (o *ManageAlternateEventsRequest) GetAlternateEvents() []EventInfoType {
	if o == nil || IsNil(o.AlternateEvents) {
		var ret []EventInfoType
		return ret
	}
	return o.AlternateEvents
}

// GetAlternateEventsOk returns a tuple with the AlternateEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageAlternateEventsRequest) GetAlternateEventsOk() ([]EventInfoType, bool) {
	if o == nil || IsNil(o.AlternateEvents) {
		return nil, false
	}
	return o.AlternateEvents, true
}

// HasAlternateEvents returns a boolean if a field has been set.
func (o *ManageAlternateEventsRequest) HasAlternateEvents() bool {
	if o != nil && !IsNil(o.AlternateEvents) {
		return true
	}

	return false
}

// SetAlternateEvents gets a reference to the given []EventInfoType and assigns it to the AlternateEvents field.
func (o *ManageAlternateEventsRequest) SetAlternateEvents(v []EventInfoType) {
	o.AlternateEvents = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ManageAlternateEventsRequest) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageAlternateEventsRequest) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ManageAlternateEventsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ManageAlternateEventsRequest) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetManageAlternateEventsInstruction returns the ManageAlternateEventsInstruction field value if set, zero value otherwise.
func (o *ManageAlternateEventsRequest) GetManageAlternateEventsInstruction() ManageAlternateEventsInstructionType {
	if o == nil || IsNil(o.ManageAlternateEventsInstruction) {
		var ret ManageAlternateEventsInstructionType
		return ret
	}
	return *o.ManageAlternateEventsInstruction
}

// GetManageAlternateEventsInstructionOk returns a tuple with the ManageAlternateEventsInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageAlternateEventsRequest) GetManageAlternateEventsInstructionOk() (*ManageAlternateEventsInstructionType, bool) {
	if o == nil || IsNil(o.ManageAlternateEventsInstruction) {
		return nil, false
	}
	return o.ManageAlternateEventsInstruction, true
}

// HasManageAlternateEventsInstruction returns a boolean if a field has been set.
func (o *ManageAlternateEventsRequest) HasManageAlternateEventsInstruction() bool {
	if o != nil && !IsNil(o.ManageAlternateEventsInstruction) {
		return true
	}

	return false
}

// SetManageAlternateEventsInstruction gets a reference to the given ManageAlternateEventsInstructionType and assigns it to the ManageAlternateEventsInstruction field.
func (o *ManageAlternateEventsRequest) SetManageAlternateEventsInstruction(v ManageAlternateEventsInstructionType) {
	o.ManageAlternateEventsInstruction = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ManageAlternateEventsRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageAlternateEventsRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ManageAlternateEventsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ManageAlternateEventsRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ManageAlternateEventsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManageAlternateEventsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlternateEvents) {
		toSerialize["alternateEvents"] = o.AlternateEvents
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.ManageAlternateEventsInstruction) {
		toSerialize["manageAlternateEventsInstruction"] = o.ManageAlternateEventsInstruction
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableManageAlternateEventsRequest struct {
	value *ManageAlternateEventsRequest
	isSet bool
}

func (v NullableManageAlternateEventsRequest) Get() *ManageAlternateEventsRequest {
	return v.value
}

func (v *NullableManageAlternateEventsRequest) Set(val *ManageAlternateEventsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableManageAlternateEventsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableManageAlternateEventsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageAlternateEventsRequest(val *ManageAlternateEventsRequest) *NullableManageAlternateEventsRequest {
	return &NullableManageAlternateEventsRequest{value: val, isSet: true}
}

func (v NullableManageAlternateEventsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageAlternateEventsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


