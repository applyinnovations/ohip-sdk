/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CopyAndMoveEventResourcesType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyAndMoveEventResourcesType{}

// CopyAndMoveEventResourcesType Criteria to copy/move event resources
type CopyAndMoveEventResourcesType struct {
	BlockId *BlockId `json:"blockId,omitempty"`
	EventId *EventId `json:"eventId,omitempty"`
	// Hotel code where event resources will be copied/moved.
	HotelId *string `json:"hotelId,omitempty"`
	// Flag to indicate if the resources have to be copied as a package.
	IncludeAsPackage *bool `json:"includeAsPackage,omitempty"`
	// Indicates whether to override warnings for copying/moving resources. By default, it is always considered as false and will provide post-change warnings.
	OverrideCopyAndMoveResourceProcessWarnings *bool `json:"overrideCopyAndMoveResourceProcessWarnings,omitempty"`
	// Resource Type and its UniqueID.
	ResourceIdList []ResourceCopyAndMoveType `json:"resourceIdList,omitempty"`
	TargetBlockId *UniqueIDType `json:"targetBlockId,omitempty"`
	// Unique Id that references an object uniquely in the system.
	TargetEventIdList []UniqueIDType `json:"targetEventIdList,omitempty"`
}

// NewCopyAndMoveEventResourcesType instantiates a new CopyAndMoveEventResourcesType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyAndMoveEventResourcesType() *CopyAndMoveEventResourcesType {
	this := CopyAndMoveEventResourcesType{}
	return &this
}

// NewCopyAndMoveEventResourcesTypeWithDefaults instantiates a new CopyAndMoveEventResourcesType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyAndMoveEventResourcesTypeWithDefaults() *CopyAndMoveEventResourcesType {
	this := CopyAndMoveEventResourcesType{}
	return &this
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *CopyAndMoveEventResourcesType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetEventId() EventId {
	if o == nil || IsNil(o.EventId) {
		var ret EventId
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetEventIdOk() (*EventId, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given EventId and assigns it to the EventId field.
func (o *CopyAndMoveEventResourcesType) SetEventId(v EventId) {
	o.EventId = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CopyAndMoveEventResourcesType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetIncludeAsPackage returns the IncludeAsPackage field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetIncludeAsPackage() bool {
	if o == nil || IsNil(o.IncludeAsPackage) {
		var ret bool
		return ret
	}
	return *o.IncludeAsPackage
}

// GetIncludeAsPackageOk returns a tuple with the IncludeAsPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetIncludeAsPackageOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeAsPackage) {
		return nil, false
	}
	return o.IncludeAsPackage, true
}

// HasIncludeAsPackage returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasIncludeAsPackage() bool {
	if o != nil && !IsNil(o.IncludeAsPackage) {
		return true
	}

	return false
}

// SetIncludeAsPackage gets a reference to the given bool and assigns it to the IncludeAsPackage field.
func (o *CopyAndMoveEventResourcesType) SetIncludeAsPackage(v bool) {
	o.IncludeAsPackage = &v
}

// GetOverrideCopyAndMoveResourceProcessWarnings returns the OverrideCopyAndMoveResourceProcessWarnings field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetOverrideCopyAndMoveResourceProcessWarnings() bool {
	if o == nil || IsNil(o.OverrideCopyAndMoveResourceProcessWarnings) {
		var ret bool
		return ret
	}
	return *o.OverrideCopyAndMoveResourceProcessWarnings
}

// GetOverrideCopyAndMoveResourceProcessWarningsOk returns a tuple with the OverrideCopyAndMoveResourceProcessWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetOverrideCopyAndMoveResourceProcessWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideCopyAndMoveResourceProcessWarnings) {
		return nil, false
	}
	return o.OverrideCopyAndMoveResourceProcessWarnings, true
}

// HasOverrideCopyAndMoveResourceProcessWarnings returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasOverrideCopyAndMoveResourceProcessWarnings() bool {
	if o != nil && !IsNil(o.OverrideCopyAndMoveResourceProcessWarnings) {
		return true
	}

	return false
}

// SetOverrideCopyAndMoveResourceProcessWarnings gets a reference to the given bool and assigns it to the OverrideCopyAndMoveResourceProcessWarnings field.
func (o *CopyAndMoveEventResourcesType) SetOverrideCopyAndMoveResourceProcessWarnings(v bool) {
	o.OverrideCopyAndMoveResourceProcessWarnings = &v
}

// GetResourceIdList returns the ResourceIdList field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetResourceIdList() []ResourceCopyAndMoveType {
	if o == nil || IsNil(o.ResourceIdList) {
		var ret []ResourceCopyAndMoveType
		return ret
	}
	return o.ResourceIdList
}

// GetResourceIdListOk returns a tuple with the ResourceIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetResourceIdListOk() ([]ResourceCopyAndMoveType, bool) {
	if o == nil || IsNil(o.ResourceIdList) {
		return nil, false
	}
	return o.ResourceIdList, true
}

// HasResourceIdList returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasResourceIdList() bool {
	if o != nil && !IsNil(o.ResourceIdList) {
		return true
	}

	return false
}

// SetResourceIdList gets a reference to the given []ResourceCopyAndMoveType and assigns it to the ResourceIdList field.
func (o *CopyAndMoveEventResourcesType) SetResourceIdList(v []ResourceCopyAndMoveType) {
	o.ResourceIdList = v
}

// GetTargetBlockId returns the TargetBlockId field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetTargetBlockId() UniqueIDType {
	if o == nil || IsNil(o.TargetBlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.TargetBlockId
}

// GetTargetBlockIdOk returns a tuple with the TargetBlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetTargetBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.TargetBlockId) {
		return nil, false
	}
	return o.TargetBlockId, true
}

// HasTargetBlockId returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasTargetBlockId() bool {
	if o != nil && !IsNil(o.TargetBlockId) {
		return true
	}

	return false
}

// SetTargetBlockId gets a reference to the given UniqueIDType and assigns it to the TargetBlockId field.
func (o *CopyAndMoveEventResourcesType) SetTargetBlockId(v UniqueIDType) {
	o.TargetBlockId = &v
}

// GetTargetEventIdList returns the TargetEventIdList field value if set, zero value otherwise.
func (o *CopyAndMoveEventResourcesType) GetTargetEventIdList() []UniqueIDType {
	if o == nil || IsNil(o.TargetEventIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.TargetEventIdList
}

// GetTargetEventIdListOk returns a tuple with the TargetEventIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyAndMoveEventResourcesType) GetTargetEventIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.TargetEventIdList) {
		return nil, false
	}
	return o.TargetEventIdList, true
}

// HasTargetEventIdList returns a boolean if a field has been set.
func (o *CopyAndMoveEventResourcesType) HasTargetEventIdList() bool {
	if o != nil && !IsNil(o.TargetEventIdList) {
		return true
	}

	return false
}

// SetTargetEventIdList gets a reference to the given []UniqueIDType and assigns it to the TargetEventIdList field.
func (o *CopyAndMoveEventResourcesType) SetTargetEventIdList(v []UniqueIDType) {
	o.TargetEventIdList = v
}

func (o CopyAndMoveEventResourcesType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyAndMoveEventResourcesType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.EventId) {
		toSerialize["eventId"] = o.EventId
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.IncludeAsPackage) {
		toSerialize["includeAsPackage"] = o.IncludeAsPackage
	}
	if !IsNil(o.OverrideCopyAndMoveResourceProcessWarnings) {
		toSerialize["overrideCopyAndMoveResourceProcessWarnings"] = o.OverrideCopyAndMoveResourceProcessWarnings
	}
	if !IsNil(o.ResourceIdList) {
		toSerialize["resourceIdList"] = o.ResourceIdList
	}
	if !IsNil(o.TargetBlockId) {
		toSerialize["targetBlockId"] = o.TargetBlockId
	}
	if !IsNil(o.TargetEventIdList) {
		toSerialize["targetEventIdList"] = o.TargetEventIdList
	}
	return toSerialize, nil
}

type NullableCopyAndMoveEventResourcesType struct {
	value *CopyAndMoveEventResourcesType
	isSet bool
}

func (v NullableCopyAndMoveEventResourcesType) Get() *CopyAndMoveEventResourcesType {
	return v.value
}

func (v *NullableCopyAndMoveEventResourcesType) Set(val *CopyAndMoveEventResourcesType) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyAndMoveEventResourcesType) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyAndMoveEventResourcesType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyAndMoveEventResourcesType(val *CopyAndMoveEventResourcesType) *NullableCopyAndMoveEventResourcesType {
	return &NullableCopyAndMoveEventResourcesType{value: val, isSet: true}
}

func (v NullableCopyAndMoveEventResourcesType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyAndMoveEventResourcesType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


