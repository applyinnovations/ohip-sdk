/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the OpportunityBlockInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpportunityBlockInfoType{}

// OpportunityBlockInfoType Opportunity Block Information
type OpportunityBlockInfoType struct {
	// Unique Id that references an object uniquely in the system.
	HotelId *string `json:"hotelId,omitempty"`
	BlockId *UniqueIDType `json:"blockId,omitempty"`
	BlockTimeSpan *DateTimeSpanType `json:"blockTimeSpan,omitempty"`
}

// NewOpportunityBlockInfoType instantiates a new OpportunityBlockInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunityBlockInfoType() *OpportunityBlockInfoType {
	this := OpportunityBlockInfoType{}
	return &this
}

// NewOpportunityBlockInfoTypeWithDefaults instantiates a new OpportunityBlockInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityBlockInfoTypeWithDefaults() *OpportunityBlockInfoType {
	this := OpportunityBlockInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *OpportunityBlockInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityBlockInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *OpportunityBlockInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *OpportunityBlockInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *OpportunityBlockInfoType) GetBlockId() UniqueIDType {
	if o == nil || IsNil(o.BlockId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityBlockInfoType) GetBlockIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *OpportunityBlockInfoType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given UniqueIDType and assigns it to the BlockId field.
func (o *OpportunityBlockInfoType) SetBlockId(v UniqueIDType) {
	o.BlockId = &v
}

// GetBlockTimeSpan returns the BlockTimeSpan field value if set, zero value otherwise.
func (o *OpportunityBlockInfoType) GetBlockTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.BlockTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.BlockTimeSpan
}

// GetBlockTimeSpanOk returns a tuple with the BlockTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpportunityBlockInfoType) GetBlockTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.BlockTimeSpan) {
		return nil, false
	}
	return o.BlockTimeSpan, true
}

// HasBlockTimeSpan returns a boolean if a field has been set.
func (o *OpportunityBlockInfoType) HasBlockTimeSpan() bool {
	if o != nil && !IsNil(o.BlockTimeSpan) {
		return true
	}

	return false
}

// SetBlockTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the BlockTimeSpan field.
func (o *OpportunityBlockInfoType) SetBlockTimeSpan(v DateTimeSpanType) {
	o.BlockTimeSpan = &v
}

func (o OpportunityBlockInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpportunityBlockInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.BlockTimeSpan) {
		toSerialize["blockTimeSpan"] = o.BlockTimeSpan
	}
	return toSerialize, nil
}

type NullableOpportunityBlockInfoType struct {
	value *OpportunityBlockInfoType
	isSet bool
}

func (v NullableOpportunityBlockInfoType) Get() *OpportunityBlockInfoType {
	return v.value
}

func (v *NullableOpportunityBlockInfoType) Set(val *OpportunityBlockInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityBlockInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityBlockInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityBlockInfoType(val *OpportunityBlockInfoType) *NullableOpportunityBlockInfoType {
	return &NullableOpportunityBlockInfoType{value: val, isSet: true}
}

func (v NullableOpportunityBlockInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityBlockInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


