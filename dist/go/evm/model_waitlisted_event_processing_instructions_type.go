/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
	"fmt"
)

// WaitlistedEventProcessingInstructionsType A collection of supported processing instructions for waitlisted catering events.
type WaitlistedEventProcessingInstructionsType string

// List of waitlistedEventProcessingInstructionsType
const (
	WAITLISTEDEVENTPROCESSINGINSTRUCTIONSTYPE_INCREASE_PRIORITY WaitlistedEventProcessingInstructionsType = "IncreasePriority"
	WAITLISTEDEVENTPROCESSINGINSTRUCTIONSTYPE_DECREASE_PRIORITY WaitlistedEventProcessingInstructionsType = "DecreasePriority"
	WAITLISTEDEVENTPROCESSINGINSTRUCTIONSTYPE_FORCE_AVAILABILITY WaitlistedEventProcessingInstructionsType = "ForceAvailability"
	WAITLISTEDEVENTPROCESSINGINSTRUCTIONSTYPE_REASSIGN WaitlistedEventProcessingInstructionsType = "Reassign"
)

// All allowed values of WaitlistedEventProcessingInstructionsType enum
var AllowedWaitlistedEventProcessingInstructionsTypeEnumValues = []WaitlistedEventProcessingInstructionsType{
	"IncreasePriority",
	"DecreasePriority",
	"ForceAvailability",
	"Reassign",
}

func (v *WaitlistedEventProcessingInstructionsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WaitlistedEventProcessingInstructionsType(value)
	for _, existing := range AllowedWaitlistedEventProcessingInstructionsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WaitlistedEventProcessingInstructionsType", value)
}

// NewWaitlistedEventProcessingInstructionsTypeFromValue returns a pointer to a valid WaitlistedEventProcessingInstructionsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWaitlistedEventProcessingInstructionsTypeFromValue(v string) (*WaitlistedEventProcessingInstructionsType, error) {
	ev := WaitlistedEventProcessingInstructionsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WaitlistedEventProcessingInstructionsType: valid values are %v", v, AllowedWaitlistedEventProcessingInstructionsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WaitlistedEventProcessingInstructionsType) IsValid() bool {
	for _, existing := range AllowedWaitlistedEventProcessingInstructionsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to waitlistedEventProcessingInstructionsType value
func (v WaitlistedEventProcessingInstructionsType) Ptr() *WaitlistedEventProcessingInstructionsType {
	return &v
}

type NullableWaitlistedEventProcessingInstructionsType struct {
	value *WaitlistedEventProcessingInstructionsType
	isSet bool
}

func (v NullableWaitlistedEventProcessingInstructionsType) Get() *WaitlistedEventProcessingInstructionsType {
	return v.value
}

func (v *NullableWaitlistedEventProcessingInstructionsType) Set(val *WaitlistedEventProcessingInstructionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitlistedEventProcessingInstructionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitlistedEventProcessingInstructionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitlistedEventProcessingInstructionsType(val *WaitlistedEventProcessingInstructionsType) *NullableWaitlistedEventProcessingInstructionsType {
	return &NullableWaitlistedEventProcessingInstructionsType{value: val, isSet: true}
}

func (v NullableWaitlistedEventProcessingInstructionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitlistedEventProcessingInstructionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

