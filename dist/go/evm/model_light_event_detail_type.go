/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the LightEventDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LightEventDetailType{}

// LightEventDetailType Light Event Details.
type LightEventDetailType struct {
	EventDetail *EventDetailType `json:"eventDetail,omitempty"`
	EventPrimaryInfo *EventPrimaryInfoType `json:"eventPrimaryInfo,omitempty"`
	FunctionSpaceInformation *EventFunctionSpaceType `json:"functionSpaceInformation,omitempty"`
}

// NewLightEventDetailType instantiates a new LightEventDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLightEventDetailType() *LightEventDetailType {
	this := LightEventDetailType{}
	return &this
}

// NewLightEventDetailTypeWithDefaults instantiates a new LightEventDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLightEventDetailTypeWithDefaults() *LightEventDetailType {
	this := LightEventDetailType{}
	return &this
}

// GetEventDetail returns the EventDetail field value if set, zero value otherwise.
func (o *LightEventDetailType) GetEventDetail() EventDetailType {
	if o == nil || IsNil(o.EventDetail) {
		var ret EventDetailType
		return ret
	}
	return *o.EventDetail
}

// GetEventDetailOk returns a tuple with the EventDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LightEventDetailType) GetEventDetailOk() (*EventDetailType, bool) {
	if o == nil || IsNil(o.EventDetail) {
		return nil, false
	}
	return o.EventDetail, true
}

// HasEventDetail returns a boolean if a field has been set.
func (o *LightEventDetailType) HasEventDetail() bool {
	if o != nil && !IsNil(o.EventDetail) {
		return true
	}

	return false
}

// SetEventDetail gets a reference to the given EventDetailType and assigns it to the EventDetail field.
func (o *LightEventDetailType) SetEventDetail(v EventDetailType) {
	o.EventDetail = &v
}

// GetEventPrimaryInfo returns the EventPrimaryInfo field value if set, zero value otherwise.
func (o *LightEventDetailType) GetEventPrimaryInfo() EventPrimaryInfoType {
	if o == nil || IsNil(o.EventPrimaryInfo) {
		var ret EventPrimaryInfoType
		return ret
	}
	return *o.EventPrimaryInfo
}

// GetEventPrimaryInfoOk returns a tuple with the EventPrimaryInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LightEventDetailType) GetEventPrimaryInfoOk() (*EventPrimaryInfoType, bool) {
	if o == nil || IsNil(o.EventPrimaryInfo) {
		return nil, false
	}
	return o.EventPrimaryInfo, true
}

// HasEventPrimaryInfo returns a boolean if a field has been set.
func (o *LightEventDetailType) HasEventPrimaryInfo() bool {
	if o != nil && !IsNil(o.EventPrimaryInfo) {
		return true
	}

	return false
}

// SetEventPrimaryInfo gets a reference to the given EventPrimaryInfoType and assigns it to the EventPrimaryInfo field.
func (o *LightEventDetailType) SetEventPrimaryInfo(v EventPrimaryInfoType) {
	o.EventPrimaryInfo = &v
}

// GetFunctionSpaceInformation returns the FunctionSpaceInformation field value if set, zero value otherwise.
func (o *LightEventDetailType) GetFunctionSpaceInformation() EventFunctionSpaceType {
	if o == nil || IsNil(o.FunctionSpaceInformation) {
		var ret EventFunctionSpaceType
		return ret
	}
	return *o.FunctionSpaceInformation
}

// GetFunctionSpaceInformationOk returns a tuple with the FunctionSpaceInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LightEventDetailType) GetFunctionSpaceInformationOk() (*EventFunctionSpaceType, bool) {
	if o == nil || IsNil(o.FunctionSpaceInformation) {
		return nil, false
	}
	return o.FunctionSpaceInformation, true
}

// HasFunctionSpaceInformation returns a boolean if a field has been set.
func (o *LightEventDetailType) HasFunctionSpaceInformation() bool {
	if o != nil && !IsNil(o.FunctionSpaceInformation) {
		return true
	}

	return false
}

// SetFunctionSpaceInformation gets a reference to the given EventFunctionSpaceType and assigns it to the FunctionSpaceInformation field.
func (o *LightEventDetailType) SetFunctionSpaceInformation(v EventFunctionSpaceType) {
	o.FunctionSpaceInformation = &v
}

func (o LightEventDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LightEventDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventDetail) {
		toSerialize["eventDetail"] = o.EventDetail
	}
	if !IsNil(o.EventPrimaryInfo) {
		toSerialize["eventPrimaryInfo"] = o.EventPrimaryInfo
	}
	if !IsNil(o.FunctionSpaceInformation) {
		toSerialize["functionSpaceInformation"] = o.FunctionSpaceInformation
	}
	return toSerialize, nil
}

type NullableLightEventDetailType struct {
	value *LightEventDetailType
	isSet bool
}

func (v NullableLightEventDetailType) Get() *LightEventDetailType {
	return v.value
}

func (v *NullableLightEventDetailType) Set(val *LightEventDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableLightEventDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableLightEventDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLightEventDetailType(val *LightEventDetailType) *NullableLightEventDetailType {
	return &NullableLightEventDetailType{value: val, isSet: true}
}

func (v NullableLightEventDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLightEventDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


