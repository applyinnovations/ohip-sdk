/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EmailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailType{}

// EmailType Information on an email for the customer.
type EmailType struct {
	// Defines the e-mail address.
	EmailAddress *string `json:"emailAddress,omitempty"`
	// Supported Email format.
	EmailFormat *string `json:"emailFormat,omitempty"`
	// Defines the purpose of the e-mail address (e.g. personal, business, listserve).
	Type *string `json:"type,omitempty"`
	// Describes the Type code
	TypeDescription *string `json:"typeDescription,omitempty"`
}

// NewEmailType instantiates a new EmailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailType() *EmailType {
	this := EmailType{}
	return &this
}

// NewEmailTypeWithDefaults instantiates a new EmailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailTypeWithDefaults() *EmailType {
	this := EmailType{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *EmailType) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailType) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *EmailType) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *EmailType) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetEmailFormat returns the EmailFormat field value if set, zero value otherwise.
func (o *EmailType) GetEmailFormat() string {
	if o == nil || IsNil(o.EmailFormat) {
		var ret string
		return ret
	}
	return *o.EmailFormat
}

// GetEmailFormatOk returns a tuple with the EmailFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailType) GetEmailFormatOk() (*string, bool) {
	if o == nil || IsNil(o.EmailFormat) {
		return nil, false
	}
	return o.EmailFormat, true
}

// HasEmailFormat returns a boolean if a field has been set.
func (o *EmailType) HasEmailFormat() bool {
	if o != nil && !IsNil(o.EmailFormat) {
		return true
	}

	return false
}

// SetEmailFormat gets a reference to the given string and assigns it to the EmailFormat field.
func (o *EmailType) SetEmailFormat(v string) {
	o.EmailFormat = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EmailType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EmailType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EmailType) SetType(v string) {
	o.Type = &v
}

// GetTypeDescription returns the TypeDescription field value if set, zero value otherwise.
func (o *EmailType) GetTypeDescription() string {
	if o == nil || IsNil(o.TypeDescription) {
		var ret string
		return ret
	}
	return *o.TypeDescription
}

// GetTypeDescriptionOk returns a tuple with the TypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailType) GetTypeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TypeDescription) {
		return nil, false
	}
	return o.TypeDescription, true
}

// HasTypeDescription returns a boolean if a field has been set.
func (o *EmailType) HasTypeDescription() bool {
	if o != nil && !IsNil(o.TypeDescription) {
		return true
	}

	return false
}

// SetTypeDescription gets a reference to the given string and assigns it to the TypeDescription field.
func (o *EmailType) SetTypeDescription(v string) {
	o.TypeDescription = &v
}

func (o EmailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EmailAddress) {
		toSerialize["emailAddress"] = o.EmailAddress
	}
	if !IsNil(o.EmailFormat) {
		toSerialize["emailFormat"] = o.EmailFormat
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeDescription) {
		toSerialize["typeDescription"] = o.TypeDescription
	}
	return toSerialize, nil
}

type NullableEmailType struct {
	value *EmailType
	isSet bool
}

func (v NullableEmailType) Get() *EmailType {
	return v.value
}

func (v *NullableEmailType) Set(val *EmailType) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailType) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailType(val *EmailType) *NullableEmailType {
	return &NullableEmailType{value: val, isSet: true}
}

func (v NullableEmailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


