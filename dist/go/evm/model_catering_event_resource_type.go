/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CateringEventResourceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringEventResourceType{}

// CateringEventResourceType Event resource information.
type CateringEventResourceType struct {
	ResourceId *ResourceId `json:"resourceId,omitempty"`
	ResourceType *ResourceType `json:"resourceType,omitempty"`
	// Resource name, this could be a resource item or a menu.
	ResourceName *string `json:"resourceName,omitempty"`
	// Setup style for the function space.
	SetupCode *string `json:"setupCode,omitempty"`
	// Item attribute name for non Food and Beverage item.
	ItemAttribute *string `json:"itemAttribute,omitempty"`
	// The required quantity of the resource.
	Quantity *float32 `json:"quantity,omitempty"`
	// The number of charged hours for the resource.
	Hours *float32 `json:"hours,omitempty"`
	// The number of charged persons for the resource.
	Persons *float32 `json:"persons,omitempty"`
	// The attendees/quantity of an item INCLUDED in a package price.
	QuantityIncluded *float32 `json:"quantityIncluded,omitempty"`
	// The attendees/quantity charged extra, EXCLUDED from the package price.
	QuantityExcluded *float32 `json:"quantityExcluded,omitempty"`
	UnitPrice *CurrencyAmountType `json:"unitPrice,omitempty"`
	Revenue *CurrencyAmountType `json:"revenue,omitempty"`
	// Rate Code that is attached to the function spaces and non Food and Beverage items
	RentalCode *string `json:"rentalCode,omitempty"`
	// The menu discount percentage.
	Discount *float32 `json:"discount,omitempty"`
	// Contains event resource comment information.
	EventResourceNotes []EventResourceNoteType `json:"eventResourceNotes,omitempty"`
	// Sell Start Date of resource of type Menu.
	SellStartDate *string `json:"sellStartDate,omitempty"`
	// Sell End Date of resource of type Menu.
	SellEndDate *string `json:"sellEndDate,omitempty"`
	// Event Start Date of resource of type Menu.
	EventStartDate *string `json:"eventStartDate,omitempty"`
	// Event End Date of resource of type Menu.
	EventEndDate *string `json:"eventEndDate,omitempty"`
	// Indicates that this resource is consumption based in a catering package
	ConsumptionBased *bool `json:"consumptionBased,omitempty"`
	// Indicates that this resource is a MultiChoice Menu or not
	MultiChoice *bool `json:"multiChoice,omitempty"`
	// Hotel code which the event resource belong to.
	HotelId *string `json:"hotelId,omitempty"`
	// The order of the resource in the Banquet Event Order within their specific resource group.
	Order *string `json:"order,omitempty"`
	// Flag that indicates if at least one menu item has a discount.
	HasDiscountMenuItem *bool `json:"hasDiscountMenuItem,omitempty"`
	// Flag that indicates the resource has notes associated with it.
	HasNotes *bool `json:"hasNotes,omitempty"`
	// Indicates that item must be ordered externally.
	External *bool `json:"external,omitempty"`
	// Indicates that this resource item is a custom item added for this event.
	Custom *bool `json:"custom,omitempty"`
	// Indicates that this resource is included in a catering package.
	Packaged *bool `json:"packaged,omitempty"`
}

// NewCateringEventResourceType instantiates a new CateringEventResourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringEventResourceType() *CateringEventResourceType {
	this := CateringEventResourceType{}
	return &this
}

// NewCateringEventResourceTypeWithDefaults instantiates a new CateringEventResourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringEventResourceTypeWithDefaults() *CateringEventResourceType {
	this := CateringEventResourceType{}
	return &this
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetResourceId() ResourceId {
	if o == nil || IsNil(o.ResourceId) {
		var ret ResourceId
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetResourceIdOk() (*ResourceId, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given ResourceId and assigns it to the ResourceId field.
func (o *CateringEventResourceType) SetResourceId(v ResourceId) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetResourceType() ResourceType {
	if o == nil || IsNil(o.ResourceType) {
		var ret ResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetResourceTypeOk() (*ResourceType, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResourceType and assigns it to the ResourceType field.
func (o *CateringEventResourceType) SetResourceType(v ResourceType) {
	o.ResourceType = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName) {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetResourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceName) {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasResourceName() bool {
	if o != nil && !IsNil(o.ResourceName) {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *CateringEventResourceType) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetSetupCode returns the SetupCode field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetSetupCode() string {
	if o == nil || IsNil(o.SetupCode) {
		var ret string
		return ret
	}
	return *o.SetupCode
}

// GetSetupCodeOk returns a tuple with the SetupCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetSetupCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SetupCode) {
		return nil, false
	}
	return o.SetupCode, true
}

// HasSetupCode returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasSetupCode() bool {
	if o != nil && !IsNil(o.SetupCode) {
		return true
	}

	return false
}

// SetSetupCode gets a reference to the given string and assigns it to the SetupCode field.
func (o *CateringEventResourceType) SetSetupCode(v string) {
	o.SetupCode = &v
}

// GetItemAttribute returns the ItemAttribute field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetItemAttribute() string {
	if o == nil || IsNil(o.ItemAttribute) {
		var ret string
		return ret
	}
	return *o.ItemAttribute
}

// GetItemAttributeOk returns a tuple with the ItemAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetItemAttributeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemAttribute) {
		return nil, false
	}
	return o.ItemAttribute, true
}

// HasItemAttribute returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasItemAttribute() bool {
	if o != nil && !IsNil(o.ItemAttribute) {
		return true
	}

	return false
}

// SetItemAttribute gets a reference to the given string and assigns it to the ItemAttribute field.
func (o *CateringEventResourceType) SetItemAttribute(v string) {
	o.ItemAttribute = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *CateringEventResourceType) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetHours() float32 {
	if o == nil || IsNil(o.Hours) {
		var ret float32
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetHoursOk() (*float32, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given float32 and assigns it to the Hours field.
func (o *CateringEventResourceType) SetHours(v float32) {
	o.Hours = &v
}

// GetPersons returns the Persons field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetPersons() float32 {
	if o == nil || IsNil(o.Persons) {
		var ret float32
		return ret
	}
	return *o.Persons
}

// GetPersonsOk returns a tuple with the Persons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetPersonsOk() (*float32, bool) {
	if o == nil || IsNil(o.Persons) {
		return nil, false
	}
	return o.Persons, true
}

// HasPersons returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasPersons() bool {
	if o != nil && !IsNil(o.Persons) {
		return true
	}

	return false
}

// SetPersons gets a reference to the given float32 and assigns it to the Persons field.
func (o *CateringEventResourceType) SetPersons(v float32) {
	o.Persons = &v
}

// GetQuantityIncluded returns the QuantityIncluded field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetQuantityIncluded() float32 {
	if o == nil || IsNil(o.QuantityIncluded) {
		var ret float32
		return ret
	}
	return *o.QuantityIncluded
}

// GetQuantityIncludedOk returns a tuple with the QuantityIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetQuantityIncludedOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityIncluded) {
		return nil, false
	}
	return o.QuantityIncluded, true
}

// HasQuantityIncluded returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasQuantityIncluded() bool {
	if o != nil && !IsNil(o.QuantityIncluded) {
		return true
	}

	return false
}

// SetQuantityIncluded gets a reference to the given float32 and assigns it to the QuantityIncluded field.
func (o *CateringEventResourceType) SetQuantityIncluded(v float32) {
	o.QuantityIncluded = &v
}

// GetQuantityExcluded returns the QuantityExcluded field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetQuantityExcluded() float32 {
	if o == nil || IsNil(o.QuantityExcluded) {
		var ret float32
		return ret
	}
	return *o.QuantityExcluded
}

// GetQuantityExcludedOk returns a tuple with the QuantityExcluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetQuantityExcludedOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityExcluded) {
		return nil, false
	}
	return o.QuantityExcluded, true
}

// HasQuantityExcluded returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasQuantityExcluded() bool {
	if o != nil && !IsNil(o.QuantityExcluded) {
		return true
	}

	return false
}

// SetQuantityExcluded gets a reference to the given float32 and assigns it to the QuantityExcluded field.
func (o *CateringEventResourceType) SetQuantityExcluded(v float32) {
	o.QuantityExcluded = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetUnitPrice() CurrencyAmountType {
	if o == nil || IsNil(o.UnitPrice) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetUnitPriceOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given CurrencyAmountType and assigns it to the UnitPrice field.
func (o *CateringEventResourceType) SetUnitPrice(v CurrencyAmountType) {
	o.UnitPrice = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetRevenue() CurrencyAmountType {
	if o == nil || IsNil(o.Revenue) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetRevenueOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Revenue) {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasRevenue() bool {
	if o != nil && !IsNil(o.Revenue) {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given CurrencyAmountType and assigns it to the Revenue field.
func (o *CateringEventResourceType) SetRevenue(v CurrencyAmountType) {
	o.Revenue = &v
}

// GetRentalCode returns the RentalCode field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetRentalCode() string {
	if o == nil || IsNil(o.RentalCode) {
		var ret string
		return ret
	}
	return *o.RentalCode
}

// GetRentalCodeOk returns a tuple with the RentalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetRentalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RentalCode) {
		return nil, false
	}
	return o.RentalCode, true
}

// HasRentalCode returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasRentalCode() bool {
	if o != nil && !IsNil(o.RentalCode) {
		return true
	}

	return false
}

// SetRentalCode gets a reference to the given string and assigns it to the RentalCode field.
func (o *CateringEventResourceType) SetRentalCode(v string) {
	o.RentalCode = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetDiscount() float32 {
	if o == nil || IsNil(o.Discount) {
		var ret float32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetDiscountOk() (*float32, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given float32 and assigns it to the Discount field.
func (o *CateringEventResourceType) SetDiscount(v float32) {
	o.Discount = &v
}

// GetEventResourceNotes returns the EventResourceNotes field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetEventResourceNotes() []EventResourceNoteType {
	if o == nil || IsNil(o.EventResourceNotes) {
		var ret []EventResourceNoteType
		return ret
	}
	return o.EventResourceNotes
}

// GetEventResourceNotesOk returns a tuple with the EventResourceNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetEventResourceNotesOk() ([]EventResourceNoteType, bool) {
	if o == nil || IsNil(o.EventResourceNotes) {
		return nil, false
	}
	return o.EventResourceNotes, true
}

// HasEventResourceNotes returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasEventResourceNotes() bool {
	if o != nil && !IsNil(o.EventResourceNotes) {
		return true
	}

	return false
}

// SetEventResourceNotes gets a reference to the given []EventResourceNoteType and assigns it to the EventResourceNotes field.
func (o *CateringEventResourceType) SetEventResourceNotes(v []EventResourceNoteType) {
	o.EventResourceNotes = v
}

// GetSellStartDate returns the SellStartDate field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetSellStartDate() string {
	if o == nil || IsNil(o.SellStartDate) {
		var ret string
		return ret
	}
	return *o.SellStartDate
}

// GetSellStartDateOk returns a tuple with the SellStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetSellStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.SellStartDate) {
		return nil, false
	}
	return o.SellStartDate, true
}

// HasSellStartDate returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasSellStartDate() bool {
	if o != nil && !IsNil(o.SellStartDate) {
		return true
	}

	return false
}

// SetSellStartDate gets a reference to the given string and assigns it to the SellStartDate field.
func (o *CateringEventResourceType) SetSellStartDate(v string) {
	o.SellStartDate = &v
}

// GetSellEndDate returns the SellEndDate field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetSellEndDate() string {
	if o == nil || IsNil(o.SellEndDate) {
		var ret string
		return ret
	}
	return *o.SellEndDate
}

// GetSellEndDateOk returns a tuple with the SellEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetSellEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.SellEndDate) {
		return nil, false
	}
	return o.SellEndDate, true
}

// HasSellEndDate returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasSellEndDate() bool {
	if o != nil && !IsNil(o.SellEndDate) {
		return true
	}

	return false
}

// SetSellEndDate gets a reference to the given string and assigns it to the SellEndDate field.
func (o *CateringEventResourceType) SetSellEndDate(v string) {
	o.SellEndDate = &v
}

// GetEventStartDate returns the EventStartDate field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetEventStartDate() string {
	if o == nil || IsNil(o.EventStartDate) {
		var ret string
		return ret
	}
	return *o.EventStartDate
}

// GetEventStartDateOk returns a tuple with the EventStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetEventStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventStartDate) {
		return nil, false
	}
	return o.EventStartDate, true
}

// HasEventStartDate returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasEventStartDate() bool {
	if o != nil && !IsNil(o.EventStartDate) {
		return true
	}

	return false
}

// SetEventStartDate gets a reference to the given string and assigns it to the EventStartDate field.
func (o *CateringEventResourceType) SetEventStartDate(v string) {
	o.EventStartDate = &v
}

// GetEventEndDate returns the EventEndDate field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetEventEndDate() string {
	if o == nil || IsNil(o.EventEndDate) {
		var ret string
		return ret
	}
	return *o.EventEndDate
}

// GetEventEndDateOk returns a tuple with the EventEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetEventEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EventEndDate) {
		return nil, false
	}
	return o.EventEndDate, true
}

// HasEventEndDate returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasEventEndDate() bool {
	if o != nil && !IsNil(o.EventEndDate) {
		return true
	}

	return false
}

// SetEventEndDate gets a reference to the given string and assigns it to the EventEndDate field.
func (o *CateringEventResourceType) SetEventEndDate(v string) {
	o.EventEndDate = &v
}

// GetConsumptionBased returns the ConsumptionBased field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetConsumptionBased() bool {
	if o == nil || IsNil(o.ConsumptionBased) {
		var ret bool
		return ret
	}
	return *o.ConsumptionBased
}

// GetConsumptionBasedOk returns a tuple with the ConsumptionBased field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetConsumptionBasedOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsumptionBased) {
		return nil, false
	}
	return o.ConsumptionBased, true
}

// HasConsumptionBased returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasConsumptionBased() bool {
	if o != nil && !IsNil(o.ConsumptionBased) {
		return true
	}

	return false
}

// SetConsumptionBased gets a reference to the given bool and assigns it to the ConsumptionBased field.
func (o *CateringEventResourceType) SetConsumptionBased(v bool) {
	o.ConsumptionBased = &v
}

// GetMultiChoice returns the MultiChoice field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetMultiChoice() bool {
	if o == nil || IsNil(o.MultiChoice) {
		var ret bool
		return ret
	}
	return *o.MultiChoice
}

// GetMultiChoiceOk returns a tuple with the MultiChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetMultiChoiceOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiChoice) {
		return nil, false
	}
	return o.MultiChoice, true
}

// HasMultiChoice returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasMultiChoice() bool {
	if o != nil && !IsNil(o.MultiChoice) {
		return true
	}

	return false
}

// SetMultiChoice gets a reference to the given bool and assigns it to the MultiChoice field.
func (o *CateringEventResourceType) SetMultiChoice(v bool) {
	o.MultiChoice = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *CateringEventResourceType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *CateringEventResourceType) SetOrder(v string) {
	o.Order = &v
}

// GetHasDiscountMenuItem returns the HasDiscountMenuItem field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetHasDiscountMenuItem() bool {
	if o == nil || IsNil(o.HasDiscountMenuItem) {
		var ret bool
		return ret
	}
	return *o.HasDiscountMenuItem
}

// GetHasDiscountMenuItemOk returns a tuple with the HasDiscountMenuItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetHasDiscountMenuItemOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDiscountMenuItem) {
		return nil, false
	}
	return o.HasDiscountMenuItem, true
}

// HasHasDiscountMenuItem returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasHasDiscountMenuItem() bool {
	if o != nil && !IsNil(o.HasDiscountMenuItem) {
		return true
	}

	return false
}

// SetHasDiscountMenuItem gets a reference to the given bool and assigns it to the HasDiscountMenuItem field.
func (o *CateringEventResourceType) SetHasDiscountMenuItem(v bool) {
	o.HasDiscountMenuItem = &v
}

// GetHasNotes returns the HasNotes field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetHasNotes() bool {
	if o == nil || IsNil(o.HasNotes) {
		var ret bool
		return ret
	}
	return *o.HasNotes
}

// GetHasNotesOk returns a tuple with the HasNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetHasNotesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNotes) {
		return nil, false
	}
	return o.HasNotes, true
}

// HasHasNotes returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasHasNotes() bool {
	if o != nil && !IsNil(o.HasNotes) {
		return true
	}

	return false
}

// SetHasNotes gets a reference to the given bool and assigns it to the HasNotes field.
func (o *CateringEventResourceType) SetHasNotes(v bool) {
	o.HasNotes = &v
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetExternal() bool {
	if o == nil || IsNil(o.External) {
		var ret bool
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetExternalOk() (*bool, bool) {
	if o == nil || IsNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasExternal() bool {
	if o != nil && !IsNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given bool and assigns it to the External field.
func (o *CateringEventResourceType) SetExternal(v bool) {
	o.External = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetCustom() bool {
	if o == nil || IsNil(o.Custom) {
		var ret bool
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given bool and assigns it to the Custom field.
func (o *CateringEventResourceType) SetCustom(v bool) {
	o.Custom = &v
}

// GetPackaged returns the Packaged field value if set, zero value otherwise.
func (o *CateringEventResourceType) GetPackaged() bool {
	if o == nil || IsNil(o.Packaged) {
		var ret bool
		return ret
	}
	return *o.Packaged
}

// GetPackagedOk returns a tuple with the Packaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventResourceType) GetPackagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Packaged) {
		return nil, false
	}
	return o.Packaged, true
}

// HasPackaged returns a boolean if a field has been set.
func (o *CateringEventResourceType) HasPackaged() bool {
	if o != nil && !IsNil(o.Packaged) {
		return true
	}

	return false
}

// SetPackaged gets a reference to the given bool and assigns it to the Packaged field.
func (o *CateringEventResourceType) SetPackaged(v bool) {
	o.Packaged = &v
}

func (o CateringEventResourceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringEventResourceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.ResourceName) {
		toSerialize["resourceName"] = o.ResourceName
	}
	if !IsNil(o.SetupCode) {
		toSerialize["setupCode"] = o.SetupCode
	}
	if !IsNil(o.ItemAttribute) {
		toSerialize["itemAttribute"] = o.ItemAttribute
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.Persons) {
		toSerialize["persons"] = o.Persons
	}
	if !IsNil(o.QuantityIncluded) {
		toSerialize["quantityIncluded"] = o.QuantityIncluded
	}
	if !IsNil(o.QuantityExcluded) {
		toSerialize["quantityExcluded"] = o.QuantityExcluded
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	if !IsNil(o.Revenue) {
		toSerialize["revenue"] = o.Revenue
	}
	if !IsNil(o.RentalCode) {
		toSerialize["rentalCode"] = o.RentalCode
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.EventResourceNotes) {
		toSerialize["eventResourceNotes"] = o.EventResourceNotes
	}
	if !IsNil(o.SellStartDate) {
		toSerialize["sellStartDate"] = o.SellStartDate
	}
	if !IsNil(o.SellEndDate) {
		toSerialize["sellEndDate"] = o.SellEndDate
	}
	if !IsNil(o.EventStartDate) {
		toSerialize["eventStartDate"] = o.EventStartDate
	}
	if !IsNil(o.EventEndDate) {
		toSerialize["eventEndDate"] = o.EventEndDate
	}
	if !IsNil(o.ConsumptionBased) {
		toSerialize["consumptionBased"] = o.ConsumptionBased
	}
	if !IsNil(o.MultiChoice) {
		toSerialize["multiChoice"] = o.MultiChoice
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.HasDiscountMenuItem) {
		toSerialize["hasDiscountMenuItem"] = o.HasDiscountMenuItem
	}
	if !IsNil(o.HasNotes) {
		toSerialize["hasNotes"] = o.HasNotes
	}
	if !IsNil(o.External) {
		toSerialize["external"] = o.External
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Packaged) {
		toSerialize["packaged"] = o.Packaged
	}
	return toSerialize, nil
}

type NullableCateringEventResourceType struct {
	value *CateringEventResourceType
	isSet bool
}

func (v NullableCateringEventResourceType) Get() *CateringEventResourceType {
	return v.value
}

func (v *NullableCateringEventResourceType) Set(val *CateringEventResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventResourceType(val *CateringEventResourceType) *NullableCateringEventResourceType {
	return &NullableCateringEventResourceType{value: val, isSet: true}
}

func (v NullableCateringEventResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


