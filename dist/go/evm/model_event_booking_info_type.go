/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventBookingInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventBookingInfoType{}

// EventBookingInfoType Booking information about the Function Diary Event.
type EventBookingInfoType struct {
	// Business Block Code.
	BlockCode *string `json:"blockCode,omitempty"`
	// Business Block Name.
	BlockName *string `json:"blockName,omitempty"`
	// Room Status of the Block.
	RoomStatus *string `json:"roomStatus,omitempty"`
	// Catering Status of the Block.
	CateringStatus *string `json:"cateringStatus,omitempty"`
	// Catering Decision Date of the Block.
	CatDecisionDate *string `json:"catDecisionDate,omitempty"`
	// Catering Follow Up Date of the Block.
	CatFollowUpDate *string `json:"catFollowUpDate,omitempty"`
	// Room Follow Up Date of the Block.
	RoomFollowUpDate *string `json:"roomFollowUpDate,omitempty"`
	// Account attached to the block.
	Account *string `json:"account,omitempty"`
	// Contact attached to the block.
	Contact *string `json:"contact,omitempty"`
	// Boolean to indicate whether rooms are booked for the block.
	RoomNights *bool `json:"roomNights,omitempty"`
	// Original number of rooms booked for the block.
	OriginalRooms *float32 `json:"originalRooms,omitempty"`
	// Catering Sales Manager ID.
	CatOwner *float32 `json:"catOwner,omitempty"`
	// Catering Sales Manager Name.
	CatOwnerName *string `json:"catOwnerName,omitempty"`
	// Room Manager ID.
	SalesOwner *float32 `json:"salesOwner,omitempty"`
	// Room Manager Name.
	SalesOwnerName *string `json:"salesOwnerName,omitempty"`
	EventStatus *BookingStatusType `json:"eventStatus,omitempty"`
	// Flag to indicate Deduct Inventory.
	DeductInvYn *string `json:"deductInvYn,omitempty"`
	// Flag to indicate block is rate protected.
	RateProtect *bool `json:"rateProtect,omitempty"`
	// Flag to indicate block is non-compete protected.
	NonCompete *bool `json:"nonCompete,omitempty"`
	// Holds the industry code if non-compete is enabled.
	NonCompeteCode *string `json:"nonCompeteCode,omitempty"`
	// Holds the industry description.
	NonCompeteIndustry *string `json:"nonCompeteIndustry,omitempty"`
	// The Time Span(Arrival, Departure) which covers the Block Span.
	BlockDates []TimeSpanType `json:"blockDates,omitempty"`
	VipStatus *VIPStatusType `json:"vipStatus,omitempty"`
	Guarantee *ResGuaranteeType `json:"guarantee,omitempty"`
	// Reservation Name ID.
	ResvNameId *float32 `json:"resvNameId,omitempty"`
	// Hotel code of the Block.
	BookHotelCode *string `json:"bookHotelCode,omitempty"`
	// Business Block ID.
	BookId *float32 `json:"bookId,omitempty"`
	// Master Name ID.
	MasterNameId *float32 `json:"masterNameId,omitempty"`
	// Company Name ID.
	CompanyNameId *float32 `json:"companyNameId,omitempty"`
}

// NewEventBookingInfoType instantiates a new EventBookingInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventBookingInfoType() *EventBookingInfoType {
	this := EventBookingInfoType{}
	return &this
}

// NewEventBookingInfoTypeWithDefaults instantiates a new EventBookingInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventBookingInfoTypeWithDefaults() *EventBookingInfoType {
	this := EventBookingInfoType{}
	return &this
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *EventBookingInfoType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetBlockName returns the BlockName field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBlockName() string {
	if o == nil || IsNil(o.BlockName) {
		var ret string
		return ret
	}
	return *o.BlockName
}

// GetBlockNameOk returns a tuple with the BlockName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBlockNameOk() (*string, bool) {
	if o == nil || IsNil(o.BlockName) {
		return nil, false
	}
	return o.BlockName, true
}

// HasBlockName returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBlockName() bool {
	if o != nil && !IsNil(o.BlockName) {
		return true
	}

	return false
}

// SetBlockName gets a reference to the given string and assigns it to the BlockName field.
func (o *EventBookingInfoType) SetBlockName(v string) {
	o.BlockName = &v
}

// GetRoomStatus returns the RoomStatus field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetRoomStatus() string {
	if o == nil || IsNil(o.RoomStatus) {
		var ret string
		return ret
	}
	return *o.RoomStatus
}

// GetRoomStatusOk returns a tuple with the RoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetRoomStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RoomStatus) {
		return nil, false
	}
	return o.RoomStatus, true
}

// HasRoomStatus returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasRoomStatus() bool {
	if o != nil && !IsNil(o.RoomStatus) {
		return true
	}

	return false
}

// SetRoomStatus gets a reference to the given string and assigns it to the RoomStatus field.
func (o *EventBookingInfoType) SetRoomStatus(v string) {
	o.RoomStatus = &v
}

// GetCateringStatus returns the CateringStatus field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCateringStatus() string {
	if o == nil || IsNil(o.CateringStatus) {
		var ret string
		return ret
	}
	return *o.CateringStatus
}

// GetCateringStatusOk returns a tuple with the CateringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCateringStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CateringStatus) {
		return nil, false
	}
	return o.CateringStatus, true
}

// HasCateringStatus returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCateringStatus() bool {
	if o != nil && !IsNil(o.CateringStatus) {
		return true
	}

	return false
}

// SetCateringStatus gets a reference to the given string and assigns it to the CateringStatus field.
func (o *EventBookingInfoType) SetCateringStatus(v string) {
	o.CateringStatus = &v
}

// GetCatDecisionDate returns the CatDecisionDate field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCatDecisionDate() string {
	if o == nil || IsNil(o.CatDecisionDate) {
		var ret string
		return ret
	}
	return *o.CatDecisionDate
}

// GetCatDecisionDateOk returns a tuple with the CatDecisionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCatDecisionDateOk() (*string, bool) {
	if o == nil || IsNil(o.CatDecisionDate) {
		return nil, false
	}
	return o.CatDecisionDate, true
}

// HasCatDecisionDate returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCatDecisionDate() bool {
	if o != nil && !IsNil(o.CatDecisionDate) {
		return true
	}

	return false
}

// SetCatDecisionDate gets a reference to the given string and assigns it to the CatDecisionDate field.
func (o *EventBookingInfoType) SetCatDecisionDate(v string) {
	o.CatDecisionDate = &v
}

// GetCatFollowUpDate returns the CatFollowUpDate field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCatFollowUpDate() string {
	if o == nil || IsNil(o.CatFollowUpDate) {
		var ret string
		return ret
	}
	return *o.CatFollowUpDate
}

// GetCatFollowUpDateOk returns a tuple with the CatFollowUpDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCatFollowUpDateOk() (*string, bool) {
	if o == nil || IsNil(o.CatFollowUpDate) {
		return nil, false
	}
	return o.CatFollowUpDate, true
}

// HasCatFollowUpDate returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCatFollowUpDate() bool {
	if o != nil && !IsNil(o.CatFollowUpDate) {
		return true
	}

	return false
}

// SetCatFollowUpDate gets a reference to the given string and assigns it to the CatFollowUpDate field.
func (o *EventBookingInfoType) SetCatFollowUpDate(v string) {
	o.CatFollowUpDate = &v
}

// GetRoomFollowUpDate returns the RoomFollowUpDate field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetRoomFollowUpDate() string {
	if o == nil || IsNil(o.RoomFollowUpDate) {
		var ret string
		return ret
	}
	return *o.RoomFollowUpDate
}

// GetRoomFollowUpDateOk returns a tuple with the RoomFollowUpDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetRoomFollowUpDateOk() (*string, bool) {
	if o == nil || IsNil(o.RoomFollowUpDate) {
		return nil, false
	}
	return o.RoomFollowUpDate, true
}

// HasRoomFollowUpDate returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasRoomFollowUpDate() bool {
	if o != nil && !IsNil(o.RoomFollowUpDate) {
		return true
	}

	return false
}

// SetRoomFollowUpDate gets a reference to the given string and assigns it to the RoomFollowUpDate field.
func (o *EventBookingInfoType) SetRoomFollowUpDate(v string) {
	o.RoomFollowUpDate = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *EventBookingInfoType) SetAccount(v string) {
	o.Account = &v
}

// GetContact returns the Contact field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetContact() string {
	if o == nil || IsNil(o.Contact) {
		var ret string
		return ret
	}
	return *o.Contact
}

// GetContactOk returns a tuple with the Contact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetContactOk() (*string, bool) {
	if o == nil || IsNil(o.Contact) {
		return nil, false
	}
	return o.Contact, true
}

// HasContact returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasContact() bool {
	if o != nil && !IsNil(o.Contact) {
		return true
	}

	return false
}

// SetContact gets a reference to the given string and assigns it to the Contact field.
func (o *EventBookingInfoType) SetContact(v string) {
	o.Contact = &v
}

// GetRoomNights returns the RoomNights field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetRoomNights() bool {
	if o == nil || IsNil(o.RoomNights) {
		var ret bool
		return ret
	}
	return *o.RoomNights
}

// GetRoomNightsOk returns a tuple with the RoomNights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetRoomNightsOk() (*bool, bool) {
	if o == nil || IsNil(o.RoomNights) {
		return nil, false
	}
	return o.RoomNights, true
}

// HasRoomNights returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasRoomNights() bool {
	if o != nil && !IsNil(o.RoomNights) {
		return true
	}

	return false
}

// SetRoomNights gets a reference to the given bool and assigns it to the RoomNights field.
func (o *EventBookingInfoType) SetRoomNights(v bool) {
	o.RoomNights = &v
}

// GetOriginalRooms returns the OriginalRooms field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetOriginalRooms() float32 {
	if o == nil || IsNil(o.OriginalRooms) {
		var ret float32
		return ret
	}
	return *o.OriginalRooms
}

// GetOriginalRoomsOk returns a tuple with the OriginalRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetOriginalRoomsOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalRooms) {
		return nil, false
	}
	return o.OriginalRooms, true
}

// HasOriginalRooms returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasOriginalRooms() bool {
	if o != nil && !IsNil(o.OriginalRooms) {
		return true
	}

	return false
}

// SetOriginalRooms gets a reference to the given float32 and assigns it to the OriginalRooms field.
func (o *EventBookingInfoType) SetOriginalRooms(v float32) {
	o.OriginalRooms = &v
}

// GetCatOwner returns the CatOwner field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCatOwner() float32 {
	if o == nil || IsNil(o.CatOwner) {
		var ret float32
		return ret
	}
	return *o.CatOwner
}

// GetCatOwnerOk returns a tuple with the CatOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCatOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.CatOwner) {
		return nil, false
	}
	return o.CatOwner, true
}

// HasCatOwner returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCatOwner() bool {
	if o != nil && !IsNil(o.CatOwner) {
		return true
	}

	return false
}

// SetCatOwner gets a reference to the given float32 and assigns it to the CatOwner field.
func (o *EventBookingInfoType) SetCatOwner(v float32) {
	o.CatOwner = &v
}

// GetCatOwnerName returns the CatOwnerName field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCatOwnerName() string {
	if o == nil || IsNil(o.CatOwnerName) {
		var ret string
		return ret
	}
	return *o.CatOwnerName
}

// GetCatOwnerNameOk returns a tuple with the CatOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCatOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CatOwnerName) {
		return nil, false
	}
	return o.CatOwnerName, true
}

// HasCatOwnerName returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCatOwnerName() bool {
	if o != nil && !IsNil(o.CatOwnerName) {
		return true
	}

	return false
}

// SetCatOwnerName gets a reference to the given string and assigns it to the CatOwnerName field.
func (o *EventBookingInfoType) SetCatOwnerName(v string) {
	o.CatOwnerName = &v
}

// GetSalesOwner returns the SalesOwner field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetSalesOwner() float32 {
	if o == nil || IsNil(o.SalesOwner) {
		var ret float32
		return ret
	}
	return *o.SalesOwner
}

// GetSalesOwnerOk returns a tuple with the SalesOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetSalesOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.SalesOwner) {
		return nil, false
	}
	return o.SalesOwner, true
}

// HasSalesOwner returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasSalesOwner() bool {
	if o != nil && !IsNil(o.SalesOwner) {
		return true
	}

	return false
}

// SetSalesOwner gets a reference to the given float32 and assigns it to the SalesOwner field.
func (o *EventBookingInfoType) SetSalesOwner(v float32) {
	o.SalesOwner = &v
}

// GetSalesOwnerName returns the SalesOwnerName field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetSalesOwnerName() string {
	if o == nil || IsNil(o.SalesOwnerName) {
		var ret string
		return ret
	}
	return *o.SalesOwnerName
}

// GetSalesOwnerNameOk returns a tuple with the SalesOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetSalesOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SalesOwnerName) {
		return nil, false
	}
	return o.SalesOwnerName, true
}

// HasSalesOwnerName returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasSalesOwnerName() bool {
	if o != nil && !IsNil(o.SalesOwnerName) {
		return true
	}

	return false
}

// SetSalesOwnerName gets a reference to the given string and assigns it to the SalesOwnerName field.
func (o *EventBookingInfoType) SetSalesOwnerName(v string) {
	o.SalesOwnerName = &v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetEventStatus() BookingStatusType {
	if o == nil || IsNil(o.EventStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetEventStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given BookingStatusType and assigns it to the EventStatus field.
func (o *EventBookingInfoType) SetEventStatus(v BookingStatusType) {
	o.EventStatus = &v
}

// GetDeductInvYn returns the DeductInvYn field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetDeductInvYn() string {
	if o == nil || IsNil(o.DeductInvYn) {
		var ret string
		return ret
	}
	return *o.DeductInvYn
}

// GetDeductInvYnOk returns a tuple with the DeductInvYn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetDeductInvYnOk() (*string, bool) {
	if o == nil || IsNil(o.DeductInvYn) {
		return nil, false
	}
	return o.DeductInvYn, true
}

// HasDeductInvYn returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasDeductInvYn() bool {
	if o != nil && !IsNil(o.DeductInvYn) {
		return true
	}

	return false
}

// SetDeductInvYn gets a reference to the given string and assigns it to the DeductInvYn field.
func (o *EventBookingInfoType) SetDeductInvYn(v string) {
	o.DeductInvYn = &v
}

// GetRateProtect returns the RateProtect field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetRateProtect() bool {
	if o == nil || IsNil(o.RateProtect) {
		var ret bool
		return ret
	}
	return *o.RateProtect
}

// GetRateProtectOk returns a tuple with the RateProtect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetRateProtectOk() (*bool, bool) {
	if o == nil || IsNil(o.RateProtect) {
		return nil, false
	}
	return o.RateProtect, true
}

// HasRateProtect returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasRateProtect() bool {
	if o != nil && !IsNil(o.RateProtect) {
		return true
	}

	return false
}

// SetRateProtect gets a reference to the given bool and assigns it to the RateProtect field.
func (o *EventBookingInfoType) SetRateProtect(v bool) {
	o.RateProtect = &v
}

// GetNonCompete returns the NonCompete field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetNonCompete() bool {
	if o == nil || IsNil(o.NonCompete) {
		var ret bool
		return ret
	}
	return *o.NonCompete
}

// GetNonCompeteOk returns a tuple with the NonCompete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetNonCompeteOk() (*bool, bool) {
	if o == nil || IsNil(o.NonCompete) {
		return nil, false
	}
	return o.NonCompete, true
}

// HasNonCompete returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasNonCompete() bool {
	if o != nil && !IsNil(o.NonCompete) {
		return true
	}

	return false
}

// SetNonCompete gets a reference to the given bool and assigns it to the NonCompete field.
func (o *EventBookingInfoType) SetNonCompete(v bool) {
	o.NonCompete = &v
}

// GetNonCompeteCode returns the NonCompeteCode field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetNonCompeteCode() string {
	if o == nil || IsNil(o.NonCompeteCode) {
		var ret string
		return ret
	}
	return *o.NonCompeteCode
}

// GetNonCompeteCodeOk returns a tuple with the NonCompeteCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetNonCompeteCodeOk() (*string, bool) {
	if o == nil || IsNil(o.NonCompeteCode) {
		return nil, false
	}
	return o.NonCompeteCode, true
}

// HasNonCompeteCode returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasNonCompeteCode() bool {
	if o != nil && !IsNil(o.NonCompeteCode) {
		return true
	}

	return false
}

// SetNonCompeteCode gets a reference to the given string and assigns it to the NonCompeteCode field.
func (o *EventBookingInfoType) SetNonCompeteCode(v string) {
	o.NonCompeteCode = &v
}

// GetNonCompeteIndustry returns the NonCompeteIndustry field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetNonCompeteIndustry() string {
	if o == nil || IsNil(o.NonCompeteIndustry) {
		var ret string
		return ret
	}
	return *o.NonCompeteIndustry
}

// GetNonCompeteIndustryOk returns a tuple with the NonCompeteIndustry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetNonCompeteIndustryOk() (*string, bool) {
	if o == nil || IsNil(o.NonCompeteIndustry) {
		return nil, false
	}
	return o.NonCompeteIndustry, true
}

// HasNonCompeteIndustry returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasNonCompeteIndustry() bool {
	if o != nil && !IsNil(o.NonCompeteIndustry) {
		return true
	}

	return false
}

// SetNonCompeteIndustry gets a reference to the given string and assigns it to the NonCompeteIndustry field.
func (o *EventBookingInfoType) SetNonCompeteIndustry(v string) {
	o.NonCompeteIndustry = &v
}

// GetBlockDates returns the BlockDates field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBlockDates() []TimeSpanType {
	if o == nil || IsNil(o.BlockDates) {
		var ret []TimeSpanType
		return ret
	}
	return o.BlockDates
}

// GetBlockDatesOk returns a tuple with the BlockDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBlockDatesOk() ([]TimeSpanType, bool) {
	if o == nil || IsNil(o.BlockDates) {
		return nil, false
	}
	return o.BlockDates, true
}

// HasBlockDates returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBlockDates() bool {
	if o != nil && !IsNil(o.BlockDates) {
		return true
	}

	return false
}

// SetBlockDates gets a reference to the given []TimeSpanType and assigns it to the BlockDates field.
func (o *EventBookingInfoType) SetBlockDates(v []TimeSpanType) {
	o.BlockDates = v
}

// GetVipStatus returns the VipStatus field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetVipStatus() VIPStatusType {
	if o == nil || IsNil(o.VipStatus) {
		var ret VIPStatusType
		return ret
	}
	return *o.VipStatus
}

// GetVipStatusOk returns a tuple with the VipStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetVipStatusOk() (*VIPStatusType, bool) {
	if o == nil || IsNil(o.VipStatus) {
		return nil, false
	}
	return o.VipStatus, true
}

// HasVipStatus returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasVipStatus() bool {
	if o != nil && !IsNil(o.VipStatus) {
		return true
	}

	return false
}

// SetVipStatus gets a reference to the given VIPStatusType and assigns it to the VipStatus field.
func (o *EventBookingInfoType) SetVipStatus(v VIPStatusType) {
	o.VipStatus = &v
}

// GetGuarantee returns the Guarantee field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetGuarantee() ResGuaranteeType {
	if o == nil || IsNil(o.Guarantee) {
		var ret ResGuaranteeType
		return ret
	}
	return *o.Guarantee
}

// GetGuaranteeOk returns a tuple with the Guarantee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetGuaranteeOk() (*ResGuaranteeType, bool) {
	if o == nil || IsNil(o.Guarantee) {
		return nil, false
	}
	return o.Guarantee, true
}

// HasGuarantee returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasGuarantee() bool {
	if o != nil && !IsNil(o.Guarantee) {
		return true
	}

	return false
}

// SetGuarantee gets a reference to the given ResGuaranteeType and assigns it to the Guarantee field.
func (o *EventBookingInfoType) SetGuarantee(v ResGuaranteeType) {
	o.Guarantee = &v
}

// GetResvNameId returns the ResvNameId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetResvNameId() float32 {
	if o == nil || IsNil(o.ResvNameId) {
		var ret float32
		return ret
	}
	return *o.ResvNameId
}

// GetResvNameIdOk returns a tuple with the ResvNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetResvNameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ResvNameId) {
		return nil, false
	}
	return o.ResvNameId, true
}

// HasResvNameId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasResvNameId() bool {
	if o != nil && !IsNil(o.ResvNameId) {
		return true
	}

	return false
}

// SetResvNameId gets a reference to the given float32 and assigns it to the ResvNameId field.
func (o *EventBookingInfoType) SetResvNameId(v float32) {
	o.ResvNameId = &v
}

// GetBookHotelCode returns the BookHotelCode field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBookHotelCode() string {
	if o == nil || IsNil(o.BookHotelCode) {
		var ret string
		return ret
	}
	return *o.BookHotelCode
}

// GetBookHotelCodeOk returns a tuple with the BookHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBookHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BookHotelCode) {
		return nil, false
	}
	return o.BookHotelCode, true
}

// HasBookHotelCode returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBookHotelCode() bool {
	if o != nil && !IsNil(o.BookHotelCode) {
		return true
	}

	return false
}

// SetBookHotelCode gets a reference to the given string and assigns it to the BookHotelCode field.
func (o *EventBookingInfoType) SetBookHotelCode(v string) {
	o.BookHotelCode = &v
}

// GetBookId returns the BookId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBookId() float32 {
	if o == nil || IsNil(o.BookId) {
		var ret float32
		return ret
	}
	return *o.BookId
}

// GetBookIdOk returns a tuple with the BookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBookIdOk() (*float32, bool) {
	if o == nil || IsNil(o.BookId) {
		return nil, false
	}
	return o.BookId, true
}

// HasBookId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBookId() bool {
	if o != nil && !IsNil(o.BookId) {
		return true
	}

	return false
}

// SetBookId gets a reference to the given float32 and assigns it to the BookId field.
func (o *EventBookingInfoType) SetBookId(v float32) {
	o.BookId = &v
}

// GetMasterNameId returns the MasterNameId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetMasterNameId() float32 {
	if o == nil || IsNil(o.MasterNameId) {
		var ret float32
		return ret
	}
	return *o.MasterNameId
}

// GetMasterNameIdOk returns a tuple with the MasterNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetMasterNameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MasterNameId) {
		return nil, false
	}
	return o.MasterNameId, true
}

// HasMasterNameId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasMasterNameId() bool {
	if o != nil && !IsNil(o.MasterNameId) {
		return true
	}

	return false
}

// SetMasterNameId gets a reference to the given float32 and assigns it to the MasterNameId field.
func (o *EventBookingInfoType) SetMasterNameId(v float32) {
	o.MasterNameId = &v
}

// GetCompanyNameId returns the CompanyNameId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCompanyNameId() float32 {
	if o == nil || IsNil(o.CompanyNameId) {
		var ret float32
		return ret
	}
	return *o.CompanyNameId
}

// GetCompanyNameIdOk returns a tuple with the CompanyNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCompanyNameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CompanyNameId) {
		return nil, false
	}
	return o.CompanyNameId, true
}

// HasCompanyNameId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCompanyNameId() bool {
	if o != nil && !IsNil(o.CompanyNameId) {
		return true
	}

	return false
}

// SetCompanyNameId gets a reference to the given float32 and assigns it to the CompanyNameId field.
func (o *EventBookingInfoType) SetCompanyNameId(v float32) {
	o.CompanyNameId = &v
}

func (o EventBookingInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventBookingInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.BlockName) {
		toSerialize["blockName"] = o.BlockName
	}
	if !IsNil(o.RoomStatus) {
		toSerialize["roomStatus"] = o.RoomStatus
	}
	if !IsNil(o.CateringStatus) {
		toSerialize["cateringStatus"] = o.CateringStatus
	}
	if !IsNil(o.CatDecisionDate) {
		toSerialize["catDecisionDate"] = o.CatDecisionDate
	}
	if !IsNil(o.CatFollowUpDate) {
		toSerialize["catFollowUpDate"] = o.CatFollowUpDate
	}
	if !IsNil(o.RoomFollowUpDate) {
		toSerialize["roomFollowUpDate"] = o.RoomFollowUpDate
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.Contact) {
		toSerialize["contact"] = o.Contact
	}
	if !IsNil(o.RoomNights) {
		toSerialize["roomNights"] = o.RoomNights
	}
	if !IsNil(o.OriginalRooms) {
		toSerialize["originalRooms"] = o.OriginalRooms
	}
	if !IsNil(o.CatOwner) {
		toSerialize["catOwner"] = o.CatOwner
	}
	if !IsNil(o.CatOwnerName) {
		toSerialize["catOwnerName"] = o.CatOwnerName
	}
	if !IsNil(o.SalesOwner) {
		toSerialize["salesOwner"] = o.SalesOwner
	}
	if !IsNil(o.SalesOwnerName) {
		toSerialize["salesOwnerName"] = o.SalesOwnerName
	}
	if !IsNil(o.EventStatus) {
		toSerialize["eventStatus"] = o.EventStatus
	}
	if !IsNil(o.DeductInvYn) {
		toSerialize["deductInvYn"] = o.DeductInvYn
	}
	if !IsNil(o.RateProtect) {
		toSerialize["rateProtect"] = o.RateProtect
	}
	if !IsNil(o.NonCompete) {
		toSerialize["nonCompete"] = o.NonCompete
	}
	if !IsNil(o.NonCompeteCode) {
		toSerialize["nonCompeteCode"] = o.NonCompeteCode
	}
	if !IsNil(o.NonCompeteIndustry) {
		toSerialize["nonCompeteIndustry"] = o.NonCompeteIndustry
	}
	if !IsNil(o.BlockDates) {
		toSerialize["blockDates"] = o.BlockDates
	}
	if !IsNil(o.VipStatus) {
		toSerialize["vipStatus"] = o.VipStatus
	}
	if !IsNil(o.Guarantee) {
		toSerialize["guarantee"] = o.Guarantee
	}
	if !IsNil(o.ResvNameId) {
		toSerialize["resvNameId"] = o.ResvNameId
	}
	if !IsNil(o.BookHotelCode) {
		toSerialize["bookHotelCode"] = o.BookHotelCode
	}
	if !IsNil(o.BookId) {
		toSerialize["bookId"] = o.BookId
	}
	if !IsNil(o.MasterNameId) {
		toSerialize["masterNameId"] = o.MasterNameId
	}
	if !IsNil(o.CompanyNameId) {
		toSerialize["companyNameId"] = o.CompanyNameId
	}
	return toSerialize, nil
}

type NullableEventBookingInfoType struct {
	value *EventBookingInfoType
	isSet bool
}

func (v NullableEventBookingInfoType) Get() *EventBookingInfoType {
	return v.value
}

func (v *NullableEventBookingInfoType) Set(val *EventBookingInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventBookingInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventBookingInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventBookingInfoType(val *EventBookingInfoType) *NullableEventBookingInfoType {
	return &NullableEventBookingInfoType{value: val, isSet: true}
}

func (v NullableEventBookingInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventBookingInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


