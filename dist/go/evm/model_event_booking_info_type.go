/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventBookingInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventBookingInfoType{}

// EventBookingInfoType Booking information about the Function Diary Event.
type EventBookingInfoType struct {
	// The Time Span(Arrival, Departure) which covers the Block Span.
	BlockDates []TimeSpanType `json:"blockDates,omitempty"`
	// Hotel code of the Block.
	BookHotelCode *string `json:"bookHotelCode,omitempty"`
	// Business Block ID.
	BookId *float32 `json:"bookId,omitempty"`
	// Catering Sales Manager ID.
	CatOwner *float32 `json:"catOwner,omitempty"`
	// Catering Sales Manager Name.
	CatOwnerName *string `json:"catOwnerName,omitempty"`
	// Company Name ID.
	CompanyNameId *float32 `json:"companyNameId,omitempty"`
	// Flag to indicate Deduct Inventory.
	DeductInvYn *string `json:"deductInvYn,omitempty"`
	EventStatus *BookingStatusType `json:"eventStatus,omitempty"`
	Guarantee *ResGuaranteeType `json:"guarantee,omitempty"`
	// Master Name ID.
	MasterNameId *float32 `json:"masterNameId,omitempty"`
	// Flag to indicate block is non-compete protected.
	NonCompete *bool `json:"nonCompete,omitempty"`
	// Holds the industry code if non-compete is enabled.
	NonCompeteCode *string `json:"nonCompeteCode,omitempty"`
	// Holds the industry description.
	NonCompeteIndustry *string `json:"nonCompeteIndustry,omitempty"`
	// Flag to indicate block is rate protected.
	RateProtect *bool `json:"rateProtect,omitempty"`
	// Reservation Name ID.
	ResvNameId *float32 `json:"resvNameId,omitempty"`
	// Room Manager ID.
	SalesOwner *float32 `json:"salesOwner,omitempty"`
	// Room Manager Name.
	SalesOwnerName *string `json:"salesOwnerName,omitempty"`
	VipStatus *VIPStatusType `json:"vipStatus,omitempty"`
}

// NewEventBookingInfoType instantiates a new EventBookingInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventBookingInfoType() *EventBookingInfoType {
	this := EventBookingInfoType{}
	return &this
}

// NewEventBookingInfoTypeWithDefaults instantiates a new EventBookingInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventBookingInfoTypeWithDefaults() *EventBookingInfoType {
	this := EventBookingInfoType{}
	return &this
}

// GetBlockDates returns the BlockDates field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBlockDates() []TimeSpanType {
	if o == nil || IsNil(o.BlockDates) {
		var ret []TimeSpanType
		return ret
	}
	return o.BlockDates
}

// GetBlockDatesOk returns a tuple with the BlockDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBlockDatesOk() ([]TimeSpanType, bool) {
	if o == nil || IsNil(o.BlockDates) {
		return nil, false
	}
	return o.BlockDates, true
}

// HasBlockDates returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBlockDates() bool {
	if o != nil && !IsNil(o.BlockDates) {
		return true
	}

	return false
}

// SetBlockDates gets a reference to the given []TimeSpanType and assigns it to the BlockDates field.
func (o *EventBookingInfoType) SetBlockDates(v []TimeSpanType) {
	o.BlockDates = v
}

// GetBookHotelCode returns the BookHotelCode field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBookHotelCode() string {
	if o == nil || IsNil(o.BookHotelCode) {
		var ret string
		return ret
	}
	return *o.BookHotelCode
}

// GetBookHotelCodeOk returns a tuple with the BookHotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBookHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BookHotelCode) {
		return nil, false
	}
	return o.BookHotelCode, true
}

// HasBookHotelCode returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBookHotelCode() bool {
	if o != nil && !IsNil(o.BookHotelCode) {
		return true
	}

	return false
}

// SetBookHotelCode gets a reference to the given string and assigns it to the BookHotelCode field.
func (o *EventBookingInfoType) SetBookHotelCode(v string) {
	o.BookHotelCode = &v
}

// GetBookId returns the BookId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetBookId() float32 {
	if o == nil || IsNil(o.BookId) {
		var ret float32
		return ret
	}
	return *o.BookId
}

// GetBookIdOk returns a tuple with the BookId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetBookIdOk() (*float32, bool) {
	if o == nil || IsNil(o.BookId) {
		return nil, false
	}
	return o.BookId, true
}

// HasBookId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasBookId() bool {
	if o != nil && !IsNil(o.BookId) {
		return true
	}

	return false
}

// SetBookId gets a reference to the given float32 and assigns it to the BookId field.
func (o *EventBookingInfoType) SetBookId(v float32) {
	o.BookId = &v
}

// GetCatOwner returns the CatOwner field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCatOwner() float32 {
	if o == nil || IsNil(o.CatOwner) {
		var ret float32
		return ret
	}
	return *o.CatOwner
}

// GetCatOwnerOk returns a tuple with the CatOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCatOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.CatOwner) {
		return nil, false
	}
	return o.CatOwner, true
}

// HasCatOwner returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCatOwner() bool {
	if o != nil && !IsNil(o.CatOwner) {
		return true
	}

	return false
}

// SetCatOwner gets a reference to the given float32 and assigns it to the CatOwner field.
func (o *EventBookingInfoType) SetCatOwner(v float32) {
	o.CatOwner = &v
}

// GetCatOwnerName returns the CatOwnerName field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCatOwnerName() string {
	if o == nil || IsNil(o.CatOwnerName) {
		var ret string
		return ret
	}
	return *o.CatOwnerName
}

// GetCatOwnerNameOk returns a tuple with the CatOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCatOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.CatOwnerName) {
		return nil, false
	}
	return o.CatOwnerName, true
}

// HasCatOwnerName returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCatOwnerName() bool {
	if o != nil && !IsNil(o.CatOwnerName) {
		return true
	}

	return false
}

// SetCatOwnerName gets a reference to the given string and assigns it to the CatOwnerName field.
func (o *EventBookingInfoType) SetCatOwnerName(v string) {
	o.CatOwnerName = &v
}

// GetCompanyNameId returns the CompanyNameId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetCompanyNameId() float32 {
	if o == nil || IsNil(o.CompanyNameId) {
		var ret float32
		return ret
	}
	return *o.CompanyNameId
}

// GetCompanyNameIdOk returns a tuple with the CompanyNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetCompanyNameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CompanyNameId) {
		return nil, false
	}
	return o.CompanyNameId, true
}

// HasCompanyNameId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasCompanyNameId() bool {
	if o != nil && !IsNil(o.CompanyNameId) {
		return true
	}

	return false
}

// SetCompanyNameId gets a reference to the given float32 and assigns it to the CompanyNameId field.
func (o *EventBookingInfoType) SetCompanyNameId(v float32) {
	o.CompanyNameId = &v
}

// GetDeductInvYn returns the DeductInvYn field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetDeductInvYn() string {
	if o == nil || IsNil(o.DeductInvYn) {
		var ret string
		return ret
	}
	return *o.DeductInvYn
}

// GetDeductInvYnOk returns a tuple with the DeductInvYn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetDeductInvYnOk() (*string, bool) {
	if o == nil || IsNil(o.DeductInvYn) {
		return nil, false
	}
	return o.DeductInvYn, true
}

// HasDeductInvYn returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasDeductInvYn() bool {
	if o != nil && !IsNil(o.DeductInvYn) {
		return true
	}

	return false
}

// SetDeductInvYn gets a reference to the given string and assigns it to the DeductInvYn field.
func (o *EventBookingInfoType) SetDeductInvYn(v string) {
	o.DeductInvYn = &v
}

// GetEventStatus returns the EventStatus field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetEventStatus() BookingStatusType {
	if o == nil || IsNil(o.EventStatus) {
		var ret BookingStatusType
		return ret
	}
	return *o.EventStatus
}

// GetEventStatusOk returns a tuple with the EventStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetEventStatusOk() (*BookingStatusType, bool) {
	if o == nil || IsNil(o.EventStatus) {
		return nil, false
	}
	return o.EventStatus, true
}

// HasEventStatus returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasEventStatus() bool {
	if o != nil && !IsNil(o.EventStatus) {
		return true
	}

	return false
}

// SetEventStatus gets a reference to the given BookingStatusType and assigns it to the EventStatus field.
func (o *EventBookingInfoType) SetEventStatus(v BookingStatusType) {
	o.EventStatus = &v
}

// GetGuarantee returns the Guarantee field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetGuarantee() ResGuaranteeType {
	if o == nil || IsNil(o.Guarantee) {
		var ret ResGuaranteeType
		return ret
	}
	return *o.Guarantee
}

// GetGuaranteeOk returns a tuple with the Guarantee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetGuaranteeOk() (*ResGuaranteeType, bool) {
	if o == nil || IsNil(o.Guarantee) {
		return nil, false
	}
	return o.Guarantee, true
}

// HasGuarantee returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasGuarantee() bool {
	if o != nil && !IsNil(o.Guarantee) {
		return true
	}

	return false
}

// SetGuarantee gets a reference to the given ResGuaranteeType and assigns it to the Guarantee field.
func (o *EventBookingInfoType) SetGuarantee(v ResGuaranteeType) {
	o.Guarantee = &v
}

// GetMasterNameId returns the MasterNameId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetMasterNameId() float32 {
	if o == nil || IsNil(o.MasterNameId) {
		var ret float32
		return ret
	}
	return *o.MasterNameId
}

// GetMasterNameIdOk returns a tuple with the MasterNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetMasterNameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.MasterNameId) {
		return nil, false
	}
	return o.MasterNameId, true
}

// HasMasterNameId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasMasterNameId() bool {
	if o != nil && !IsNil(o.MasterNameId) {
		return true
	}

	return false
}

// SetMasterNameId gets a reference to the given float32 and assigns it to the MasterNameId field.
func (o *EventBookingInfoType) SetMasterNameId(v float32) {
	o.MasterNameId = &v
}

// GetNonCompete returns the NonCompete field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetNonCompete() bool {
	if o == nil || IsNil(o.NonCompete) {
		var ret bool
		return ret
	}
	return *o.NonCompete
}

// GetNonCompeteOk returns a tuple with the NonCompete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetNonCompeteOk() (*bool, bool) {
	if o == nil || IsNil(o.NonCompete) {
		return nil, false
	}
	return o.NonCompete, true
}

// HasNonCompete returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasNonCompete() bool {
	if o != nil && !IsNil(o.NonCompete) {
		return true
	}

	return false
}

// SetNonCompete gets a reference to the given bool and assigns it to the NonCompete field.
func (o *EventBookingInfoType) SetNonCompete(v bool) {
	o.NonCompete = &v
}

// GetNonCompeteCode returns the NonCompeteCode field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetNonCompeteCode() string {
	if o == nil || IsNil(o.NonCompeteCode) {
		var ret string
		return ret
	}
	return *o.NonCompeteCode
}

// GetNonCompeteCodeOk returns a tuple with the NonCompeteCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetNonCompeteCodeOk() (*string, bool) {
	if o == nil || IsNil(o.NonCompeteCode) {
		return nil, false
	}
	return o.NonCompeteCode, true
}

// HasNonCompeteCode returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasNonCompeteCode() bool {
	if o != nil && !IsNil(o.NonCompeteCode) {
		return true
	}

	return false
}

// SetNonCompeteCode gets a reference to the given string and assigns it to the NonCompeteCode field.
func (o *EventBookingInfoType) SetNonCompeteCode(v string) {
	o.NonCompeteCode = &v
}

// GetNonCompeteIndustry returns the NonCompeteIndustry field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetNonCompeteIndustry() string {
	if o == nil || IsNil(o.NonCompeteIndustry) {
		var ret string
		return ret
	}
	return *o.NonCompeteIndustry
}

// GetNonCompeteIndustryOk returns a tuple with the NonCompeteIndustry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetNonCompeteIndustryOk() (*string, bool) {
	if o == nil || IsNil(o.NonCompeteIndustry) {
		return nil, false
	}
	return o.NonCompeteIndustry, true
}

// HasNonCompeteIndustry returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasNonCompeteIndustry() bool {
	if o != nil && !IsNil(o.NonCompeteIndustry) {
		return true
	}

	return false
}

// SetNonCompeteIndustry gets a reference to the given string and assigns it to the NonCompeteIndustry field.
func (o *EventBookingInfoType) SetNonCompeteIndustry(v string) {
	o.NonCompeteIndustry = &v
}

// GetRateProtect returns the RateProtect field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetRateProtect() bool {
	if o == nil || IsNil(o.RateProtect) {
		var ret bool
		return ret
	}
	return *o.RateProtect
}

// GetRateProtectOk returns a tuple with the RateProtect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetRateProtectOk() (*bool, bool) {
	if o == nil || IsNil(o.RateProtect) {
		return nil, false
	}
	return o.RateProtect, true
}

// HasRateProtect returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasRateProtect() bool {
	if o != nil && !IsNil(o.RateProtect) {
		return true
	}

	return false
}

// SetRateProtect gets a reference to the given bool and assigns it to the RateProtect field.
func (o *EventBookingInfoType) SetRateProtect(v bool) {
	o.RateProtect = &v
}

// GetResvNameId returns the ResvNameId field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetResvNameId() float32 {
	if o == nil || IsNil(o.ResvNameId) {
		var ret float32
		return ret
	}
	return *o.ResvNameId
}

// GetResvNameIdOk returns a tuple with the ResvNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetResvNameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.ResvNameId) {
		return nil, false
	}
	return o.ResvNameId, true
}

// HasResvNameId returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasResvNameId() bool {
	if o != nil && !IsNil(o.ResvNameId) {
		return true
	}

	return false
}

// SetResvNameId gets a reference to the given float32 and assigns it to the ResvNameId field.
func (o *EventBookingInfoType) SetResvNameId(v float32) {
	o.ResvNameId = &v
}

// GetSalesOwner returns the SalesOwner field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetSalesOwner() float32 {
	if o == nil || IsNil(o.SalesOwner) {
		var ret float32
		return ret
	}
	return *o.SalesOwner
}

// GetSalesOwnerOk returns a tuple with the SalesOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetSalesOwnerOk() (*float32, bool) {
	if o == nil || IsNil(o.SalesOwner) {
		return nil, false
	}
	return o.SalesOwner, true
}

// HasSalesOwner returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasSalesOwner() bool {
	if o != nil && !IsNil(o.SalesOwner) {
		return true
	}

	return false
}

// SetSalesOwner gets a reference to the given float32 and assigns it to the SalesOwner field.
func (o *EventBookingInfoType) SetSalesOwner(v float32) {
	o.SalesOwner = &v
}

// GetSalesOwnerName returns the SalesOwnerName field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetSalesOwnerName() string {
	if o == nil || IsNil(o.SalesOwnerName) {
		var ret string
		return ret
	}
	return *o.SalesOwnerName
}

// GetSalesOwnerNameOk returns a tuple with the SalesOwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetSalesOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SalesOwnerName) {
		return nil, false
	}
	return o.SalesOwnerName, true
}

// HasSalesOwnerName returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasSalesOwnerName() bool {
	if o != nil && !IsNil(o.SalesOwnerName) {
		return true
	}

	return false
}

// SetSalesOwnerName gets a reference to the given string and assigns it to the SalesOwnerName field.
func (o *EventBookingInfoType) SetSalesOwnerName(v string) {
	o.SalesOwnerName = &v
}

// GetVipStatus returns the VipStatus field value if set, zero value otherwise.
func (o *EventBookingInfoType) GetVipStatus() VIPStatusType {
	if o == nil || IsNil(o.VipStatus) {
		var ret VIPStatusType
		return ret
	}
	return *o.VipStatus
}

// GetVipStatusOk returns a tuple with the VipStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBookingInfoType) GetVipStatusOk() (*VIPStatusType, bool) {
	if o == nil || IsNil(o.VipStatus) {
		return nil, false
	}
	return o.VipStatus, true
}

// HasVipStatus returns a boolean if a field has been set.
func (o *EventBookingInfoType) HasVipStatus() bool {
	if o != nil && !IsNil(o.VipStatus) {
		return true
	}

	return false
}

// SetVipStatus gets a reference to the given VIPStatusType and assigns it to the VipStatus field.
func (o *EventBookingInfoType) SetVipStatus(v VIPStatusType) {
	o.VipStatus = &v
}

func (o EventBookingInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventBookingInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockDates) {
		toSerialize["blockDates"] = o.BlockDates
	}
	if !IsNil(o.BookHotelCode) {
		toSerialize["bookHotelCode"] = o.BookHotelCode
	}
	if !IsNil(o.BookId) {
		toSerialize["bookId"] = o.BookId
	}
	if !IsNil(o.CatOwner) {
		toSerialize["catOwner"] = o.CatOwner
	}
	if !IsNil(o.CatOwnerName) {
		toSerialize["catOwnerName"] = o.CatOwnerName
	}
	if !IsNil(o.CompanyNameId) {
		toSerialize["companyNameId"] = o.CompanyNameId
	}
	if !IsNil(o.DeductInvYn) {
		toSerialize["deductInvYn"] = o.DeductInvYn
	}
	if !IsNil(o.EventStatus) {
		toSerialize["eventStatus"] = o.EventStatus
	}
	if !IsNil(o.Guarantee) {
		toSerialize["guarantee"] = o.Guarantee
	}
	if !IsNil(o.MasterNameId) {
		toSerialize["masterNameId"] = o.MasterNameId
	}
	if !IsNil(o.NonCompete) {
		toSerialize["nonCompete"] = o.NonCompete
	}
	if !IsNil(o.NonCompeteCode) {
		toSerialize["nonCompeteCode"] = o.NonCompeteCode
	}
	if !IsNil(o.NonCompeteIndustry) {
		toSerialize["nonCompeteIndustry"] = o.NonCompeteIndustry
	}
	if !IsNil(o.RateProtect) {
		toSerialize["rateProtect"] = o.RateProtect
	}
	if !IsNil(o.ResvNameId) {
		toSerialize["resvNameId"] = o.ResvNameId
	}
	if !IsNil(o.SalesOwner) {
		toSerialize["salesOwner"] = o.SalesOwner
	}
	if !IsNil(o.SalesOwnerName) {
		toSerialize["salesOwnerName"] = o.SalesOwnerName
	}
	if !IsNil(o.VipStatus) {
		toSerialize["vipStatus"] = o.VipStatus
	}
	return toSerialize, nil
}

type NullableEventBookingInfoType struct {
	value *EventBookingInfoType
	isSet bool
}

func (v NullableEventBookingInfoType) Get() *EventBookingInfoType {
	return v.value
}

func (v *NullableEventBookingInfoType) Set(val *EventBookingInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventBookingInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventBookingInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventBookingInfoType(val *EventBookingInfoType) *NullableEventBookingInfoType {
	return &NullableEventBookingInfoType{value: val, isSet: true}
}

func (v NullableEventBookingInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventBookingInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


