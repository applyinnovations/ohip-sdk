/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CopyCateringEventsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CopyCateringEventsRequest{}

// CopyCateringEventsRequest struct for CopyCateringEventsRequest
type CopyCateringEventsRequest struct {
	Criteria *CopyCateringEventsType `json:"criteria,omitempty"`
	// Used in conjunction with the Success elementSpace to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCopyCateringEventsRequest instantiates a new CopyCateringEventsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyCateringEventsRequest() *CopyCateringEventsRequest {
	this := CopyCateringEventsRequest{}
	return &this
}

// NewCopyCateringEventsRequestWithDefaults instantiates a new CopyCateringEventsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyCateringEventsRequestWithDefaults() *CopyCateringEventsRequest {
	this := CopyCateringEventsRequest{}
	return &this
}

// GetCriteria returns the Criteria field value if set, zero value otherwise.
func (o *CopyCateringEventsRequest) GetCriteria() CopyCateringEventsType {
	if o == nil || IsNil(o.Criteria) {
		var ret CopyCateringEventsType
		return ret
	}
	return *o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsRequest) GetCriteriaOk() (*CopyCateringEventsType, bool) {
	if o == nil || IsNil(o.Criteria) {
		return nil, false
	}
	return o.Criteria, true
}

// HasCriteria returns a boolean if a field has been set.
func (o *CopyCateringEventsRequest) HasCriteria() bool {
	if o != nil && !IsNil(o.Criteria) {
		return true
	}

	return false
}

// SetCriteria gets a reference to the given CopyCateringEventsType and assigns it to the Criteria field.
func (o *CopyCateringEventsRequest) SetCriteria(v CopyCateringEventsType) {
	o.Criteria = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CopyCateringEventsRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyCateringEventsRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CopyCateringEventsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CopyCateringEventsRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CopyCateringEventsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CopyCateringEventsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Criteria) {
		toSerialize["criteria"] = o.Criteria
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCopyCateringEventsRequest struct {
	value *CopyCateringEventsRequest
	isSet bool
}

func (v NullableCopyCateringEventsRequest) Get() *CopyCateringEventsRequest {
	return v.value
}

func (v *NullableCopyCateringEventsRequest) Set(val *CopyCateringEventsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyCateringEventsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyCateringEventsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyCateringEventsRequest(val *CopyCateringEventsRequest) *NullableCopyCateringEventsRequest {
	return &NullableCopyCateringEventsRequest{value: val, isSet: true}
}

func (v NullableCopyCateringEventsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyCateringEventsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


