/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the CateringEventsBulkUpdateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CateringEventsBulkUpdateType{}

// CateringEventsBulkUpdateType Collection of Event/Function Space Details and their Event IDs to be updated.
type CateringEventsBulkUpdateType struct {
	// Unique Id that references an object uniquely in the system.
	EventIdList []UniqueIDType `json:"eventIdList,omitempty"`
	EventRec *CateringEventBulkUpdateDetailType `json:"eventRec,omitempty"`
	FunctionSpaceRec *CateringEventBulkUpdateFunctionSpaceType `json:"functionSpaceRec,omitempty"`
	// Indicates whether to override warnings for editing multiple events. By default, it is always considered as false and will provide post-change warnings.
	OverrideProcessWarnings *bool `json:"overrideProcessWarnings,omitempty"`
}

// NewCateringEventsBulkUpdateType instantiates a new CateringEventsBulkUpdateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCateringEventsBulkUpdateType() *CateringEventsBulkUpdateType {
	this := CateringEventsBulkUpdateType{}
	return &this
}

// NewCateringEventsBulkUpdateTypeWithDefaults instantiates a new CateringEventsBulkUpdateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCateringEventsBulkUpdateTypeWithDefaults() *CateringEventsBulkUpdateType {
	this := CateringEventsBulkUpdateType{}
	return &this
}

// GetEventIdList returns the EventIdList field value if set, zero value otherwise.
func (o *CateringEventsBulkUpdateType) GetEventIdList() []UniqueIDType {
	if o == nil || IsNil(o.EventIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.EventIdList
}

// GetEventIdListOk returns a tuple with the EventIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsBulkUpdateType) GetEventIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.EventIdList) {
		return nil, false
	}
	return o.EventIdList, true
}

// HasEventIdList returns a boolean if a field has been set.
func (o *CateringEventsBulkUpdateType) HasEventIdList() bool {
	if o != nil && !IsNil(o.EventIdList) {
		return true
	}

	return false
}

// SetEventIdList gets a reference to the given []UniqueIDType and assigns it to the EventIdList field.
func (o *CateringEventsBulkUpdateType) SetEventIdList(v []UniqueIDType) {
	o.EventIdList = v
}

// GetEventRec returns the EventRec field value if set, zero value otherwise.
func (o *CateringEventsBulkUpdateType) GetEventRec() CateringEventBulkUpdateDetailType {
	if o == nil || IsNil(o.EventRec) {
		var ret CateringEventBulkUpdateDetailType
		return ret
	}
	return *o.EventRec
}

// GetEventRecOk returns a tuple with the EventRec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsBulkUpdateType) GetEventRecOk() (*CateringEventBulkUpdateDetailType, bool) {
	if o == nil || IsNil(o.EventRec) {
		return nil, false
	}
	return o.EventRec, true
}

// HasEventRec returns a boolean if a field has been set.
func (o *CateringEventsBulkUpdateType) HasEventRec() bool {
	if o != nil && !IsNil(o.EventRec) {
		return true
	}

	return false
}

// SetEventRec gets a reference to the given CateringEventBulkUpdateDetailType and assigns it to the EventRec field.
func (o *CateringEventsBulkUpdateType) SetEventRec(v CateringEventBulkUpdateDetailType) {
	o.EventRec = &v
}

// GetFunctionSpaceRec returns the FunctionSpaceRec field value if set, zero value otherwise.
func (o *CateringEventsBulkUpdateType) GetFunctionSpaceRec() CateringEventBulkUpdateFunctionSpaceType {
	if o == nil || IsNil(o.FunctionSpaceRec) {
		var ret CateringEventBulkUpdateFunctionSpaceType
		return ret
	}
	return *o.FunctionSpaceRec
}

// GetFunctionSpaceRecOk returns a tuple with the FunctionSpaceRec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsBulkUpdateType) GetFunctionSpaceRecOk() (*CateringEventBulkUpdateFunctionSpaceType, bool) {
	if o == nil || IsNil(o.FunctionSpaceRec) {
		return nil, false
	}
	return o.FunctionSpaceRec, true
}

// HasFunctionSpaceRec returns a boolean if a field has been set.
func (o *CateringEventsBulkUpdateType) HasFunctionSpaceRec() bool {
	if o != nil && !IsNil(o.FunctionSpaceRec) {
		return true
	}

	return false
}

// SetFunctionSpaceRec gets a reference to the given CateringEventBulkUpdateFunctionSpaceType and assigns it to the FunctionSpaceRec field.
func (o *CateringEventsBulkUpdateType) SetFunctionSpaceRec(v CateringEventBulkUpdateFunctionSpaceType) {
	o.FunctionSpaceRec = &v
}

// GetOverrideProcessWarnings returns the OverrideProcessWarnings field value if set, zero value otherwise.
func (o *CateringEventsBulkUpdateType) GetOverrideProcessWarnings() bool {
	if o == nil || IsNil(o.OverrideProcessWarnings) {
		var ret bool
		return ret
	}
	return *o.OverrideProcessWarnings
}

// GetOverrideProcessWarningsOk returns a tuple with the OverrideProcessWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CateringEventsBulkUpdateType) GetOverrideProcessWarningsOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideProcessWarnings) {
		return nil, false
	}
	return o.OverrideProcessWarnings, true
}

// HasOverrideProcessWarnings returns a boolean if a field has been set.
func (o *CateringEventsBulkUpdateType) HasOverrideProcessWarnings() bool {
	if o != nil && !IsNil(o.OverrideProcessWarnings) {
		return true
	}

	return false
}

// SetOverrideProcessWarnings gets a reference to the given bool and assigns it to the OverrideProcessWarnings field.
func (o *CateringEventsBulkUpdateType) SetOverrideProcessWarnings(v bool) {
	o.OverrideProcessWarnings = &v
}

func (o CateringEventsBulkUpdateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CateringEventsBulkUpdateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventIdList) {
		toSerialize["eventIdList"] = o.EventIdList
	}
	if !IsNil(o.EventRec) {
		toSerialize["eventRec"] = o.EventRec
	}
	if !IsNil(o.FunctionSpaceRec) {
		toSerialize["functionSpaceRec"] = o.FunctionSpaceRec
	}
	if !IsNil(o.OverrideProcessWarnings) {
		toSerialize["overrideProcessWarnings"] = o.OverrideProcessWarnings
	}
	return toSerialize, nil
}

type NullableCateringEventsBulkUpdateType struct {
	value *CateringEventsBulkUpdateType
	isSet bool
}

func (v NullableCateringEventsBulkUpdateType) Get() *CateringEventsBulkUpdateType {
	return v.value
}

func (v *NullableCateringEventsBulkUpdateType) Set(val *CateringEventsBulkUpdateType) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventsBulkUpdateType) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventsBulkUpdateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventsBulkUpdateType(val *CateringEventsBulkUpdateType) *NullableCateringEventsBulkUpdateType {
	return &NullableCateringEventsBulkUpdateType{value: val, isSet: true}
}

func (v NullableCateringEventsBulkUpdateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventsBulkUpdateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


