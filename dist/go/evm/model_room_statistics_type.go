/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the RoomStatisticsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomStatisticsType{}

// RoomStatisticsType struct for RoomStatisticsType
type RoomStatisticsType struct {
	// The total number of rooms.
	RoomCount *float32 `json:"roomCount,omitempty"`
	// The total revenue for the rooms.
	RoomRevenue *float32 `json:"roomRevenue,omitempty"`
	// The average rate per functionSpaceDetails.
	AverageRate *float32 `json:"averageRate,omitempty"`
}

// NewRoomStatisticsType instantiates a new RoomStatisticsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomStatisticsType() *RoomStatisticsType {
	this := RoomStatisticsType{}
	return &this
}

// NewRoomStatisticsTypeWithDefaults instantiates a new RoomStatisticsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomStatisticsTypeWithDefaults() *RoomStatisticsType {
	this := RoomStatisticsType{}
	return &this
}

// GetRoomCount returns the RoomCount field value if set, zero value otherwise.
func (o *RoomStatisticsType) GetRoomCount() float32 {
	if o == nil || IsNil(o.RoomCount) {
		var ret float32
		return ret
	}
	return *o.RoomCount
}

// GetRoomCountOk returns a tuple with the RoomCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStatisticsType) GetRoomCountOk() (*float32, bool) {
	if o == nil || IsNil(o.RoomCount) {
		return nil, false
	}
	return o.RoomCount, true
}

// HasRoomCount returns a boolean if a field has been set.
func (o *RoomStatisticsType) HasRoomCount() bool {
	if o != nil && !IsNil(o.RoomCount) {
		return true
	}

	return false
}

// SetRoomCount gets a reference to the given float32 and assigns it to the RoomCount field.
func (o *RoomStatisticsType) SetRoomCount(v float32) {
	o.RoomCount = &v
}

// GetRoomRevenue returns the RoomRevenue field value if set, zero value otherwise.
func (o *RoomStatisticsType) GetRoomRevenue() float32 {
	if o == nil || IsNil(o.RoomRevenue) {
		var ret float32
		return ret
	}
	return *o.RoomRevenue
}

// GetRoomRevenueOk returns a tuple with the RoomRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStatisticsType) GetRoomRevenueOk() (*float32, bool) {
	if o == nil || IsNil(o.RoomRevenue) {
		return nil, false
	}
	return o.RoomRevenue, true
}

// HasRoomRevenue returns a boolean if a field has been set.
func (o *RoomStatisticsType) HasRoomRevenue() bool {
	if o != nil && !IsNil(o.RoomRevenue) {
		return true
	}

	return false
}

// SetRoomRevenue gets a reference to the given float32 and assigns it to the RoomRevenue field.
func (o *RoomStatisticsType) SetRoomRevenue(v float32) {
	o.RoomRevenue = &v
}

// GetAverageRate returns the AverageRate field value if set, zero value otherwise.
func (o *RoomStatisticsType) GetAverageRate() float32 {
	if o == nil || IsNil(o.AverageRate) {
		var ret float32
		return ret
	}
	return *o.AverageRate
}

// GetAverageRateOk returns a tuple with the AverageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStatisticsType) GetAverageRateOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageRate) {
		return nil, false
	}
	return o.AverageRate, true
}

// HasAverageRate returns a boolean if a field has been set.
func (o *RoomStatisticsType) HasAverageRate() bool {
	if o != nil && !IsNil(o.AverageRate) {
		return true
	}

	return false
}

// SetAverageRate gets a reference to the given float32 and assigns it to the AverageRate field.
func (o *RoomStatisticsType) SetAverageRate(v float32) {
	o.AverageRate = &v
}

func (o RoomStatisticsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomStatisticsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomCount) {
		toSerialize["roomCount"] = o.RoomCount
	}
	if !IsNil(o.RoomRevenue) {
		toSerialize["roomRevenue"] = o.RoomRevenue
	}
	if !IsNil(o.AverageRate) {
		toSerialize["averageRate"] = o.AverageRate
	}
	return toSerialize, nil
}

type NullableRoomStatisticsType struct {
	value *RoomStatisticsType
	isSet bool
}

func (v NullableRoomStatisticsType) Get() *RoomStatisticsType {
	return v.value
}

func (v *NullableRoomStatisticsType) Set(val *RoomStatisticsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomStatisticsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomStatisticsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomStatisticsType(val *RoomStatisticsType) *NullableRoomStatisticsType {
	return &NullableRoomStatisticsType{value: val, isSet: true}
}

func (v NullableRoomStatisticsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomStatisticsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


