/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the EventSpaceScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSpaceScheduleType{}

// EventSpaceScheduleType Collection of the Events Booked/Scheduled for the function spaces in the Hotel for the particular time period.
type EventSpaceScheduleType struct {
	// Building name where this Room is.
	Building *string `json:"building,omitempty"`
	// Description for the Function Room.
	Description *string `json:"description,omitempty"`
	EventSpaceAttributes *EventSpaceAttributesType `json:"eventSpaceAttributes,omitempty"`
	Events *EventSpaceScheduleTypeEvents `json:"events,omitempty"`
	// Hotel Code associated with the Function Space.
	HotelId *string `json:"hotelId,omitempty"`
	// Name of the Function Room.
	Name *string `json:"name,omitempty"`
	// Function Room Number.
	RoomId *string `json:"roomId,omitempty"`
	// Order the Room is displayed based on the settings selected by the user.
	RoomOrder *int32 `json:"roomOrder,omitempty"`
}

// NewEventSpaceScheduleType instantiates a new EventSpaceScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSpaceScheduleType() *EventSpaceScheduleType {
	this := EventSpaceScheduleType{}
	return &this
}

// NewEventSpaceScheduleTypeWithDefaults instantiates a new EventSpaceScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSpaceScheduleTypeWithDefaults() *EventSpaceScheduleType {
	this := EventSpaceScheduleType{}
	return &this
}

// GetBuilding returns the Building field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetBuilding() string {
	if o == nil || IsNil(o.Building) {
		var ret string
		return ret
	}
	return *o.Building
}

// GetBuildingOk returns a tuple with the Building field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetBuildingOk() (*string, bool) {
	if o == nil || IsNil(o.Building) {
		return nil, false
	}
	return o.Building, true
}

// HasBuilding returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasBuilding() bool {
	if o != nil && !IsNil(o.Building) {
		return true
	}

	return false
}

// SetBuilding gets a reference to the given string and assigns it to the Building field.
func (o *EventSpaceScheduleType) SetBuilding(v string) {
	o.Building = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventSpaceScheduleType) SetDescription(v string) {
	o.Description = &v
}

// GetEventSpaceAttributes returns the EventSpaceAttributes field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetEventSpaceAttributes() EventSpaceAttributesType {
	if o == nil || IsNil(o.EventSpaceAttributes) {
		var ret EventSpaceAttributesType
		return ret
	}
	return *o.EventSpaceAttributes
}

// GetEventSpaceAttributesOk returns a tuple with the EventSpaceAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetEventSpaceAttributesOk() (*EventSpaceAttributesType, bool) {
	if o == nil || IsNil(o.EventSpaceAttributes) {
		return nil, false
	}
	return o.EventSpaceAttributes, true
}

// HasEventSpaceAttributes returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasEventSpaceAttributes() bool {
	if o != nil && !IsNil(o.EventSpaceAttributes) {
		return true
	}

	return false
}

// SetEventSpaceAttributes gets a reference to the given EventSpaceAttributesType and assigns it to the EventSpaceAttributes field.
func (o *EventSpaceScheduleType) SetEventSpaceAttributes(v EventSpaceAttributesType) {
	o.EventSpaceAttributes = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetEvents() EventSpaceScheduleTypeEvents {
	if o == nil || IsNil(o.Events) {
		var ret EventSpaceScheduleTypeEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetEventsOk() (*EventSpaceScheduleTypeEvents, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given EventSpaceScheduleTypeEvents and assigns it to the Events field.
func (o *EventSpaceScheduleType) SetEvents(v EventSpaceScheduleTypeEvents) {
	o.Events = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *EventSpaceScheduleType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EventSpaceScheduleType) SetName(v string) {
	o.Name = &v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *EventSpaceScheduleType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetRoomOrder returns the RoomOrder field value if set, zero value otherwise.
func (o *EventSpaceScheduleType) GetRoomOrder() int32 {
	if o == nil || IsNil(o.RoomOrder) {
		var ret int32
		return ret
	}
	return *o.RoomOrder
}

// GetRoomOrderOk returns a tuple with the RoomOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSpaceScheduleType) GetRoomOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.RoomOrder) {
		return nil, false
	}
	return o.RoomOrder, true
}

// HasRoomOrder returns a boolean if a field has been set.
func (o *EventSpaceScheduleType) HasRoomOrder() bool {
	if o != nil && !IsNil(o.RoomOrder) {
		return true
	}

	return false
}

// SetRoomOrder gets a reference to the given int32 and assigns it to the RoomOrder field.
func (o *EventSpaceScheduleType) SetRoomOrder(v int32) {
	o.RoomOrder = &v
}

func (o EventSpaceScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSpaceScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Building) {
		toSerialize["building"] = o.Building
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EventSpaceAttributes) {
		toSerialize["eventSpaceAttributes"] = o.EventSpaceAttributes
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.RoomOrder) {
		toSerialize["roomOrder"] = o.RoomOrder
	}
	return toSerialize, nil
}

type NullableEventSpaceScheduleType struct {
	value *EventSpaceScheduleType
	isSet bool
}

func (v NullableEventSpaceScheduleType) Get() *EventSpaceScheduleType {
	return v.value
}

func (v *NullableEventSpaceScheduleType) Set(val *EventSpaceScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSpaceScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSpaceScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSpaceScheduleType(val *EventSpaceScheduleType) *NullableEventSpaceScheduleType {
	return &NullableEventSpaceScheduleType{value: val, isSet: true}
}

func (v NullableEventSpaceScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSpaceScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


