/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
)

// checks if the ChangeEventsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangeEventsRequest{}

// ChangeEventsRequest struct for ChangeEventsRequest
type ChangeEventsRequest struct {
	// Pertain event information.
	EventDetails []EventInfoType `json:"eventDetails,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success elementSpace to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewChangeEventsRequest instantiates a new ChangeEventsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeEventsRequest() *ChangeEventsRequest {
	this := ChangeEventsRequest{}
	return &this
}

// NewChangeEventsRequestWithDefaults instantiates a new ChangeEventsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeEventsRequestWithDefaults() *ChangeEventsRequest {
	this := ChangeEventsRequest{}
	return &this
}

// GetEventDetails returns the EventDetails field value if set, zero value otherwise.
func (o *ChangeEventsRequest) GetEventDetails() []EventInfoType {
	if o == nil || IsNil(o.EventDetails) {
		var ret []EventInfoType
		return ret
	}
	return o.EventDetails
}

// GetEventDetailsOk returns a tuple with the EventDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEventsRequest) GetEventDetailsOk() ([]EventInfoType, bool) {
	if o == nil || IsNil(o.EventDetails) {
		return nil, false
	}
	return o.EventDetails, true
}

// HasEventDetails returns a boolean if a field has been set.
func (o *ChangeEventsRequest) HasEventDetails() bool {
	if o != nil && !IsNil(o.EventDetails) {
		return true
	}

	return false
}

// SetEventDetails gets a reference to the given []EventInfoType and assigns it to the EventDetails field.
func (o *ChangeEventsRequest) SetEventDetails(v []EventInfoType) {
	o.EventDetails = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ChangeEventsRequest) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEventsRequest) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ChangeEventsRequest) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ChangeEventsRequest) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ChangeEventsRequest) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangeEventsRequest) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ChangeEventsRequest) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ChangeEventsRequest) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ChangeEventsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangeEventsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventDetails) {
		toSerialize["eventDetails"] = o.EventDetails
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableChangeEventsRequest struct {
	value *ChangeEventsRequest
	isSet bool
}

func (v NullableChangeEventsRequest) Get() *ChangeEventsRequest {
	return v.value
}

func (v *NullableChangeEventsRequest) Set(val *ChangeEventsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeEventsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeEventsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeEventsRequest(val *ChangeEventsRequest) *NullableChangeEventsRequest {
	return &NullableChangeEventsRequest{value: val, isSet: true}
}

func (v NullableChangeEventsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeEventsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


