/*
OPERA Cloud Sales Event Management API

APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package evm

import (
	"encoding/json"
	"fmt"
)

// CateringEventChangeSources List of sources that can cause the event change
type CateringEventChangeSources string

// List of cateringEventChangeSources
const (
	CATERINGEVENTCHANGESOURCES_ATTENDEE CateringEventChangeSources = "Attendee"
	CATERINGEVENTCHANGESOURCES_EVENT CateringEventChangeSources = "Event"
	CATERINGEVENTCHANGESOURCES_ITEM CateringEventChangeSources = "Item"
	CATERINGEVENTCHANGESOURCES_MENU CateringEventChangeSources = "Menu"
	CATERINGEVENTCHANGESOURCES_MENUITEM CateringEventChangeSources = "Menuitem"
	CATERINGEVENTCHANGESOURCES_SPACE CateringEventChangeSources = "Space"
)

// All allowed values of CateringEventChangeSources enum
var AllowedCateringEventChangeSourcesEnumValues = []CateringEventChangeSources{
	"Attendee",
	"Event",
	"Item",
	"Menu",
	"Menuitem",
	"Space",
}

func (v *CateringEventChangeSources) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CateringEventChangeSources(value)
	for _, existing := range AllowedCateringEventChangeSourcesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CateringEventChangeSources", value)
}

// NewCateringEventChangeSourcesFromValue returns a pointer to a valid CateringEventChangeSources
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCateringEventChangeSourcesFromValue(v string) (*CateringEventChangeSources, error) {
	ev := CateringEventChangeSources(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CateringEventChangeSources: valid values are %v", v, AllowedCateringEventChangeSourcesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CateringEventChangeSources) IsValid() bool {
	for _, existing := range AllowedCateringEventChangeSourcesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to cateringEventChangeSources value
func (v CateringEventChangeSources) Ptr() *CateringEventChangeSources {
	return &v
}

type NullableCateringEventChangeSources struct {
	value *CateringEventChangeSources
	isSet bool
}

func (v NullableCateringEventChangeSources) Get() *CateringEventChangeSources {
	return v.value
}

func (v *NullableCateringEventChangeSources) Set(val *CateringEventChangeSources) {
	v.value = val
	v.isSet = true
}

func (v NullableCateringEventChangeSources) IsSet() bool {
	return v.isSet
}

func (v *NullableCateringEventChangeSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCateringEventChangeSources(val *CateringEventChangeSources) *NullableCateringEventChangeSources {
	return &NullableCateringEventChangeSources{value: val, isSet: true}
}

func (v NullableCateringEventChangeSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCateringEventChangeSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

