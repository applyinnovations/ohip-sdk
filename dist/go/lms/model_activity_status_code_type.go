/*
OPERA Cloud Leisure Management API

APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lms

import (
	"encoding/json"
)

// checks if the ActivityStatusCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityStatusCodeType{}

// ActivityStatusCodeType Activity Status Code detail information.
type ActivityStatusCodeType struct {
	// Used in Application for the activity status code.
	Application *string `json:"application,omitempty"`
	// Code for the activity status code. Cannot be null.
	Code *string `json:"code,omitempty"`
	// Description for the Activity Status Code. Cannot be null.
	Description *string `json:"description,omitempty"`
	// Property to which the activity status code belongs to. Cannot be null.
	HotelId *string `json:"hotelId,omitempty"`
	// Language identification.
	Language *string `json:"language,omitempty"`
	// Priority for the activity status code.
	Priority *int32 `json:"priority,omitempty"`
}

// NewActivityStatusCodeType instantiates a new ActivityStatusCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityStatusCodeType() *ActivityStatusCodeType {
	this := ActivityStatusCodeType{}
	return &this
}

// NewActivityStatusCodeTypeWithDefaults instantiates a new ActivityStatusCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityStatusCodeTypeWithDefaults() *ActivityStatusCodeType {
	this := ActivityStatusCodeType{}
	return &this
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *ActivityStatusCodeType) GetApplication() string {
	if o == nil || IsNil(o.Application) {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatusCodeType) GetApplicationOk() (*string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *ActivityStatusCodeType) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *ActivityStatusCodeType) SetApplication(v string) {
	o.Application = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ActivityStatusCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatusCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ActivityStatusCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ActivityStatusCodeType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ActivityStatusCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatusCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ActivityStatusCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ActivityStatusCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ActivityStatusCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatusCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ActivityStatusCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ActivityStatusCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ActivityStatusCodeType) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatusCodeType) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ActivityStatusCodeType) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ActivityStatusCodeType) SetLanguage(v string) {
	o.Language = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ActivityStatusCodeType) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityStatusCodeType) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ActivityStatusCodeType) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *ActivityStatusCodeType) SetPriority(v int32) {
	o.Priority = &v
}

func (o ActivityStatusCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityStatusCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableActivityStatusCodeType struct {
	value *ActivityStatusCodeType
	isSet bool
}

func (v NullableActivityStatusCodeType) Get() *ActivityStatusCodeType {
	return v.value
}

func (v *NullableActivityStatusCodeType) Set(val *ActivityStatusCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityStatusCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityStatusCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityStatusCodeType(val *ActivityStatusCodeType) *NullableActivityStatusCodeType {
	return &NullableActivityStatusCodeType{value: val, isSet: true}
}

func (v NullableActivityStatusCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityStatusCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


