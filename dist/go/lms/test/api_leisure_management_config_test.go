/*
OPERA Cloud Leisure Management API

Testing LeisureManagementConfigApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package lms

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/lms"
)

func Test_lms_LeisureManagementConfigApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LeisureManagementConfigApiService CopyActivityLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityLocationsId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.CopyActivityLocations(context.Background(), activityLocationsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService CopyActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityTypesId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.CopyActivityTypes(context.Background(), activityTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService DeleteActivityLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityLocationsId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.DeleteActivityLocations(context.Background(), activityLocationsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService DeleteActivityStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityStatusCodesId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.DeleteActivityStatusCodes(context.Background(), activityStatusCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService DeleteActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityTypesId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.DeleteActivityTypes(context.Background(), activityTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService GetActivityLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.GetActivityLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService GetActivityStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.GetActivityStatusCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService GetActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.GetActivityTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService PostActivityLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.PostActivityLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService PostActivityStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.PostActivityStatusCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService PostActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.PostActivityTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService PutActivityLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityLocationsId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.PutActivityLocations(context.Background(), activityLocationsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService PutActivityStatusCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityStatusCodesId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.PutActivityStatusCodes(context.Background(), activityStatusCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LeisureManagementConfigApiService PutActivityTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var activityTypesId string

		resp, httpRes, err := apiClient.LeisureManagementConfigApi.PutActivityTypes(context.Background(), activityTypesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
