/*
OPERA Cloud Leisure Management API

APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lms

import (
	"encoding/json"
	"fmt"
)

// LocationNotificationStatus (Enumeration) There are 3 possible values: SET, CLEAR and OTHER
type LocationNotificationStatus string

// List of locationNotificationStatus
const (
	LOCATIONNOTIFICATIONSTATUS_SET LocationNotificationStatus = "Set"
	LOCATIONNOTIFICATIONSTATUS_CLEAR LocationNotificationStatus = "Clear"
	LOCATIONNOTIFICATIONSTATUS_OTHER LocationNotificationStatus = "Other"
)

// All allowed values of LocationNotificationStatus enum
var AllowedLocationNotificationStatusEnumValues = []LocationNotificationStatus{
	"Set",
	"Clear",
	"Other",
}

func (v *LocationNotificationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocationNotificationStatus(value)
	for _, existing := range AllowedLocationNotificationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocationNotificationStatus", value)
}

// NewLocationNotificationStatusFromValue returns a pointer to a valid LocationNotificationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationNotificationStatusFromValue(v string) (*LocationNotificationStatus, error) {
	ev := LocationNotificationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocationNotificationStatus: valid values are %v", v, AllowedLocationNotificationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationNotificationStatus) IsValid() bool {
	for _, existing := range AllowedLocationNotificationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to locationNotificationStatus value
func (v LocationNotificationStatus) Ptr() *LocationNotificationStatus {
	return &v
}

type NullableLocationNotificationStatus struct {
	value *LocationNotificationStatus
	isSet bool
}

func (v NullableLocationNotificationStatus) Get() *LocationNotificationStatus {
	return v.value
}

func (v *NullableLocationNotificationStatus) Set(val *LocationNotificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationNotificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationNotificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationNotificationStatus(val *LocationNotificationStatus) *NullableLocationNotificationStatus {
	return &NullableLocationNotificationStatus{value: val, isSet: true}
}

func (v NullableLocationNotificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationNotificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

