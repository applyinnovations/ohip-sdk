/*
OPERA Cloud Cashiering Outbound API

APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cshoutbound

import (
	"encoding/json"
)

// checks if the PostCompRedemptionsRSCompRedemptionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCompRedemptionsRSCompRedemptionType{}

// PostCompRedemptionsRSCompRedemptionType Information about a Complimentary Redemption including its approval code.
type PostCompRedemptionsRSCompRedemptionType struct {
	// The associated Complimentary Redemption code.
	Code *string `json:"code,omitempty"`
	// Approval Code of the Complimentary Redemption.
	ApprovalCode *string `json:"approvalCode,omitempty"`
}

// NewPostCompRedemptionsRSCompRedemptionType instantiates a new PostCompRedemptionsRSCompRedemptionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCompRedemptionsRSCompRedemptionType() *PostCompRedemptionsRSCompRedemptionType {
	this := PostCompRedemptionsRSCompRedemptionType{}
	return &this
}

// NewPostCompRedemptionsRSCompRedemptionTypeWithDefaults instantiates a new PostCompRedemptionsRSCompRedemptionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCompRedemptionsRSCompRedemptionTypeWithDefaults() *PostCompRedemptionsRSCompRedemptionType {
	this := PostCompRedemptionsRSCompRedemptionType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PostCompRedemptionsRSCompRedemptionType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCompRedemptionsRSCompRedemptionType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PostCompRedemptionsRSCompRedemptionType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PostCompRedemptionsRSCompRedemptionType) SetCode(v string) {
	o.Code = &v
}

// GetApprovalCode returns the ApprovalCode field value if set, zero value otherwise.
func (o *PostCompRedemptionsRSCompRedemptionType) GetApprovalCode() string {
	if o == nil || IsNil(o.ApprovalCode) {
		var ret string
		return ret
	}
	return *o.ApprovalCode
}

// GetApprovalCodeOk returns a tuple with the ApprovalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCompRedemptionsRSCompRedemptionType) GetApprovalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ApprovalCode) {
		return nil, false
	}
	return o.ApprovalCode, true
}

// HasApprovalCode returns a boolean if a field has been set.
func (o *PostCompRedemptionsRSCompRedemptionType) HasApprovalCode() bool {
	if o != nil && !IsNil(o.ApprovalCode) {
		return true
	}

	return false
}

// SetApprovalCode gets a reference to the given string and assigns it to the ApprovalCode field.
func (o *PostCompRedemptionsRSCompRedemptionType) SetApprovalCode(v string) {
	o.ApprovalCode = &v
}

func (o PostCompRedemptionsRSCompRedemptionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCompRedemptionsRSCompRedemptionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ApprovalCode) {
		toSerialize["approvalCode"] = o.ApprovalCode
	}
	return toSerialize, nil
}

type NullablePostCompRedemptionsRSCompRedemptionType struct {
	value *PostCompRedemptionsRSCompRedemptionType
	isSet bool
}

func (v NullablePostCompRedemptionsRSCompRedemptionType) Get() *PostCompRedemptionsRSCompRedemptionType {
	return v.value
}

func (v *NullablePostCompRedemptionsRSCompRedemptionType) Set(val *PostCompRedemptionsRSCompRedemptionType) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCompRedemptionsRSCompRedemptionType) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCompRedemptionsRSCompRedemptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCompRedemptionsRSCompRedemptionType(val *PostCompRedemptionsRSCompRedemptionType) *NullablePostCompRedemptionsRSCompRedemptionType {
	return &NullablePostCompRedemptionsRSCompRedemptionType{value: val, isSet: true}
}

func (v NullablePostCompRedemptionsRSCompRedemptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCompRedemptionsRSCompRedemptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


