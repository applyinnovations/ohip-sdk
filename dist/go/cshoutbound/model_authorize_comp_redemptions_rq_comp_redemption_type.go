/*
OPERA Cloud Cashiering Outbound API

APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cshoutbound

import (
	"encoding/json"
)

// checks if the AuthorizeCompRedemptionsRQCompRedemptionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeCompRedemptionsRQCompRedemptionType{}

// AuthorizeCompRedemptionsRQCompRedemptionType Information about a Complimentary Redemption for approval.
type AuthorizeCompRedemptionsRQCompRedemptionType struct {
	Amount *CurrencyAmountType `json:"amount,omitempty"`
	// The associated redemption code.
	Code *string `json:"code,omitempty"`
	// Description of the Complimentary Redemption code.
	Description *string `json:"description,omitempty"`
	AvailableAmount *CurrencyAmountType `json:"availableAmount,omitempty"`
}

// NewAuthorizeCompRedemptionsRQCompRedemptionType instantiates a new AuthorizeCompRedemptionsRQCompRedemptionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeCompRedemptionsRQCompRedemptionType() *AuthorizeCompRedemptionsRQCompRedemptionType {
	this := AuthorizeCompRedemptionsRQCompRedemptionType{}
	return &this
}

// NewAuthorizeCompRedemptionsRQCompRedemptionTypeWithDefaults instantiates a new AuthorizeCompRedemptionsRQCompRedemptionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeCompRedemptionsRQCompRedemptionTypeWithDefaults() *AuthorizeCompRedemptionsRQCompRedemptionType {
	this := AuthorizeCompRedemptionsRQCompRedemptionType{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetAmount() CurrencyAmountType {
	if o == nil || IsNil(o.Amount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given CurrencyAmountType and assigns it to the Amount field.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) SetAmount(v CurrencyAmountType) {
	o.Amount = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) SetDescription(v string) {
	o.Description = &v
}

// GetAvailableAmount returns the AvailableAmount field value if set, zero value otherwise.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetAvailableAmount() CurrencyAmountType {
	if o == nil || IsNil(o.AvailableAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.AvailableAmount
}

// GetAvailableAmountOk returns a tuple with the AvailableAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) GetAvailableAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.AvailableAmount) {
		return nil, false
	}
	return o.AvailableAmount, true
}

// HasAvailableAmount returns a boolean if a field has been set.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) HasAvailableAmount() bool {
	if o != nil && !IsNil(o.AvailableAmount) {
		return true
	}

	return false
}

// SetAvailableAmount gets a reference to the given CurrencyAmountType and assigns it to the AvailableAmount field.
func (o *AuthorizeCompRedemptionsRQCompRedemptionType) SetAvailableAmount(v CurrencyAmountType) {
	o.AvailableAmount = &v
}

func (o AuthorizeCompRedemptionsRQCompRedemptionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeCompRedemptionsRQCompRedemptionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.AvailableAmount) {
		toSerialize["availableAmount"] = o.AvailableAmount
	}
	return toSerialize, nil
}

type NullableAuthorizeCompRedemptionsRQCompRedemptionType struct {
	value *AuthorizeCompRedemptionsRQCompRedemptionType
	isSet bool
}

func (v NullableAuthorizeCompRedemptionsRQCompRedemptionType) Get() *AuthorizeCompRedemptionsRQCompRedemptionType {
	return v.value
}

func (v *NullableAuthorizeCompRedemptionsRQCompRedemptionType) Set(val *AuthorizeCompRedemptionsRQCompRedemptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeCompRedemptionsRQCompRedemptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeCompRedemptionsRQCompRedemptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeCompRedemptionsRQCompRedemptionType(val *AuthorizeCompRedemptionsRQCompRedemptionType) *NullableAuthorizeCompRedemptionsRQCompRedemptionType {
	return &NullableAuthorizeCompRedemptionsRQCompRedemptionType{value: val, isSet: true}
}

func (v NullableAuthorizeCompRedemptionsRQCompRedemptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeCompRedemptionsRQCompRedemptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


