/*
OPERA Cloud Cashiering Outbound API

APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cshoutbound

import (
	"encoding/json"
)

// checks if the ReverseCompRedemptionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReverseCompRedemptionsRequest{}

// ReverseCompRedemptionsRequest struct for ReverseCompRedemptionsRequest
type ReverseCompRedemptionsRequest struct {
	// Collection of Complimentary Redemptions for reversal.
	CompRedemptions []ReverseCompRedemptionsRQCompRedemptionType `json:"compRedemptions,omitempty"`
}

// NewReverseCompRedemptionsRequest instantiates a new ReverseCompRedemptionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseCompRedemptionsRequest() *ReverseCompRedemptionsRequest {
	this := ReverseCompRedemptionsRequest{}
	return &this
}

// NewReverseCompRedemptionsRequestWithDefaults instantiates a new ReverseCompRedemptionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseCompRedemptionsRequestWithDefaults() *ReverseCompRedemptionsRequest {
	this := ReverseCompRedemptionsRequest{}
	return &this
}

// GetCompRedemptions returns the CompRedemptions field value if set, zero value otherwise.
func (o *ReverseCompRedemptionsRequest) GetCompRedemptions() []ReverseCompRedemptionsRQCompRedemptionType {
	if o == nil || IsNil(o.CompRedemptions) {
		var ret []ReverseCompRedemptionsRQCompRedemptionType
		return ret
	}
	return o.CompRedemptions
}

// GetCompRedemptionsOk returns a tuple with the CompRedemptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReverseCompRedemptionsRequest) GetCompRedemptionsOk() ([]ReverseCompRedemptionsRQCompRedemptionType, bool) {
	if o == nil || IsNil(o.CompRedemptions) {
		return nil, false
	}
	return o.CompRedemptions, true
}

// HasCompRedemptions returns a boolean if a field has been set.
func (o *ReverseCompRedemptionsRequest) HasCompRedemptions() bool {
	if o != nil && !IsNil(o.CompRedemptions) {
		return true
	}

	return false
}

// SetCompRedemptions gets a reference to the given []ReverseCompRedemptionsRQCompRedemptionType and assigns it to the CompRedemptions field.
func (o *ReverseCompRedemptionsRequest) SetCompRedemptions(v []ReverseCompRedemptionsRQCompRedemptionType) {
	o.CompRedemptions = v
}

func (o ReverseCompRedemptionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReverseCompRedemptionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompRedemptions) {
		toSerialize["compRedemptions"] = o.CompRedemptions
	}
	return toSerialize, nil
}

type NullableReverseCompRedemptionsRequest struct {
	value *ReverseCompRedemptionsRequest
	isSet bool
}

func (v NullableReverseCompRedemptionsRequest) Get() *ReverseCompRedemptionsRequest {
	return v.value
}

func (v *NullableReverseCompRedemptionsRequest) Set(val *ReverseCompRedemptionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseCompRedemptionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseCompRedemptionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseCompRedemptionsRequest(val *ReverseCompRedemptionsRequest) *NullableReverseCompRedemptionsRequest {
	return &NullableReverseCompRedemptionsRequest{value: val, isSet: true}
}

func (v NullableReverseCompRedemptionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseCompRedemptionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


