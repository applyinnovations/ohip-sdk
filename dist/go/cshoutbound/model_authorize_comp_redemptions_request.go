/*
OPERA Cloud Cashiering Outbound API

APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cshoutbound

import (
	"encoding/json"
)

// checks if the AuthorizeCompRedemptionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeCompRedemptionsRequest{}

// AuthorizeCompRedemptionsRequest struct for AuthorizeCompRedemptionsRequest
type AuthorizeCompRedemptionsRequest struct {
	// Collection of Complimentary Redemptions for approval.
	CompRedemptions []AuthorizeCompRedemptionsRQCompRedemptionType `json:"compRedemptions,omitempty"`
}

// NewAuthorizeCompRedemptionsRequest instantiates a new AuthorizeCompRedemptionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeCompRedemptionsRequest() *AuthorizeCompRedemptionsRequest {
	this := AuthorizeCompRedemptionsRequest{}
	return &this
}

// NewAuthorizeCompRedemptionsRequestWithDefaults instantiates a new AuthorizeCompRedemptionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeCompRedemptionsRequestWithDefaults() *AuthorizeCompRedemptionsRequest {
	this := AuthorizeCompRedemptionsRequest{}
	return &this
}

// GetCompRedemptions returns the CompRedemptions field value if set, zero value otherwise.
func (o *AuthorizeCompRedemptionsRequest) GetCompRedemptions() []AuthorizeCompRedemptionsRQCompRedemptionType {
	if o == nil || IsNil(o.CompRedemptions) {
		var ret []AuthorizeCompRedemptionsRQCompRedemptionType
		return ret
	}
	return o.CompRedemptions
}

// GetCompRedemptionsOk returns a tuple with the CompRedemptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeCompRedemptionsRequest) GetCompRedemptionsOk() ([]AuthorizeCompRedemptionsRQCompRedemptionType, bool) {
	if o == nil || IsNil(o.CompRedemptions) {
		return nil, false
	}
	return o.CompRedemptions, true
}

// HasCompRedemptions returns a boolean if a field has been set.
func (o *AuthorizeCompRedemptionsRequest) HasCompRedemptions() bool {
	if o != nil && !IsNil(o.CompRedemptions) {
		return true
	}

	return false
}

// SetCompRedemptions gets a reference to the given []AuthorizeCompRedemptionsRQCompRedemptionType and assigns it to the CompRedemptions field.
func (o *AuthorizeCompRedemptionsRequest) SetCompRedemptions(v []AuthorizeCompRedemptionsRQCompRedemptionType) {
	o.CompRedemptions = v
}

func (o AuthorizeCompRedemptionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeCompRedemptionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompRedemptions) {
		toSerialize["compRedemptions"] = o.CompRedemptions
	}
	return toSerialize, nil
}

type NullableAuthorizeCompRedemptionsRequest struct {
	value *AuthorizeCompRedemptionsRequest
	isSet bool
}

func (v NullableAuthorizeCompRedemptionsRequest) Get() *AuthorizeCompRedemptionsRequest {
	return v.value
}

func (v *NullableAuthorizeCompRedemptionsRequest) Set(val *AuthorizeCompRedemptionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeCompRedemptionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeCompRedemptionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeCompRedemptionsRequest(val *AuthorizeCompRedemptionsRequest) *NullableAuthorizeCompRedemptionsRequest {
	return &NullableAuthorizeCompRedemptionsRequest{value: val, isSet: true}
}

func (v NullableAuthorizeCompRedemptionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeCompRedemptionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


