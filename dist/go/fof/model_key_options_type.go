/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the KeyOptionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyOptionsType{}

// KeyOptionsType This contains code and description information for key options.
type KeyOptionsType struct {
	// key options code.
	KeyOptionsCode *string `json:"keyOptionsCode,omitempty"`
	// key options description.
	KeyOptionDescription *string `json:"keyOptionDescription,omitempty"`
}

// NewKeyOptionsType instantiates a new KeyOptionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyOptionsType() *KeyOptionsType {
	this := KeyOptionsType{}
	return &this
}

// NewKeyOptionsTypeWithDefaults instantiates a new KeyOptionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyOptionsTypeWithDefaults() *KeyOptionsType {
	this := KeyOptionsType{}
	return &this
}

// GetKeyOptionsCode returns the KeyOptionsCode field value if set, zero value otherwise.
func (o *KeyOptionsType) GetKeyOptionsCode() string {
	if o == nil || IsNil(o.KeyOptionsCode) {
		var ret string
		return ret
	}
	return *o.KeyOptionsCode
}

// GetKeyOptionsCodeOk returns a tuple with the KeyOptionsCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyOptionsType) GetKeyOptionsCodeOk() (*string, bool) {
	if o == nil || IsNil(o.KeyOptionsCode) {
		return nil, false
	}
	return o.KeyOptionsCode, true
}

// HasKeyOptionsCode returns a boolean if a field has been set.
func (o *KeyOptionsType) HasKeyOptionsCode() bool {
	if o != nil && !IsNil(o.KeyOptionsCode) {
		return true
	}

	return false
}

// SetKeyOptionsCode gets a reference to the given string and assigns it to the KeyOptionsCode field.
func (o *KeyOptionsType) SetKeyOptionsCode(v string) {
	o.KeyOptionsCode = &v
}

// GetKeyOptionDescription returns the KeyOptionDescription field value if set, zero value otherwise.
func (o *KeyOptionsType) GetKeyOptionDescription() string {
	if o == nil || IsNil(o.KeyOptionDescription) {
		var ret string
		return ret
	}
	return *o.KeyOptionDescription
}

// GetKeyOptionDescriptionOk returns a tuple with the KeyOptionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyOptionsType) GetKeyOptionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.KeyOptionDescription) {
		return nil, false
	}
	return o.KeyOptionDescription, true
}

// HasKeyOptionDescription returns a boolean if a field has been set.
func (o *KeyOptionsType) HasKeyOptionDescription() bool {
	if o != nil && !IsNil(o.KeyOptionDescription) {
		return true
	}

	return false
}

// SetKeyOptionDescription gets a reference to the given string and assigns it to the KeyOptionDescription field.
func (o *KeyOptionsType) SetKeyOptionDescription(v string) {
	o.KeyOptionDescription = &v
}

func (o KeyOptionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyOptionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyOptionsCode) {
		toSerialize["keyOptionsCode"] = o.KeyOptionsCode
	}
	if !IsNil(o.KeyOptionDescription) {
		toSerialize["keyOptionDescription"] = o.KeyOptionDescription
	}
	return toSerialize, nil
}

type NullableKeyOptionsType struct {
	value *KeyOptionsType
	isSet bool
}

func (v NullableKeyOptionsType) Get() *KeyOptionsType {
	return v.value
}

func (v *NullableKeyOptionsType) Set(val *KeyOptionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyOptionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyOptionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyOptionsType(val *KeyOptionsType) *NullableKeyOptionsType {
	return &NullableKeyOptionsType{value: val, isSet: true}
}

func (v NullableKeyOptionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyOptionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


