/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// RoomKeyResponseCodeType Response Code
type RoomKeyResponseCodeType string

// List of roomKeyResponseCodeType
const (
	ROOMKEYRESPONSECODETYPE_OK RoomKeyResponseCodeType = "OK"
	ROOMKEYRESPONSECODETYPE_BY RoomKeyResponseCodeType = "BY"
	ROOMKEYRESPONSECODETYPE_UR RoomKeyResponseCodeType = "UR"
	ROOMKEYRESPONSECODETYPE_RY RoomKeyResponseCodeType = "RY"
)

// All allowed values of RoomKeyResponseCodeType enum
var AllowedRoomKeyResponseCodeTypeEnumValues = []RoomKeyResponseCodeType{
	"OK",
	"BY",
	"UR",
	"RY",
}

func (v *RoomKeyResponseCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoomKeyResponseCodeType(value)
	for _, existing := range AllowedRoomKeyResponseCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoomKeyResponseCodeType", value)
}

// NewRoomKeyResponseCodeTypeFromValue returns a pointer to a valid RoomKeyResponseCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoomKeyResponseCodeTypeFromValue(v string) (*RoomKeyResponseCodeType, error) {
	ev := RoomKeyResponseCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoomKeyResponseCodeType: valid values are %v", v, AllowedRoomKeyResponseCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoomKeyResponseCodeType) IsValid() bool {
	for _, existing := range AllowedRoomKeyResponseCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roomKeyResponseCodeType value
func (v RoomKeyResponseCodeType) Ptr() *RoomKeyResponseCodeType {
	return &v
}

type NullableRoomKeyResponseCodeType struct {
	value *RoomKeyResponseCodeType
	isSet bool
}

func (v NullableRoomKeyResponseCodeType) Get() *RoomKeyResponseCodeType {
	return v.value
}

func (v *NullableRoomKeyResponseCodeType) Set(val *RoomKeyResponseCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomKeyResponseCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomKeyResponseCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomKeyResponseCodeType(val *RoomKeyResponseCodeType) *NullableRoomKeyResponseCodeType {
	return &NullableRoomKeyResponseCodeType{value: val, isSet: true}
}

func (v NullableRoomKeyResponseCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomKeyResponseCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

