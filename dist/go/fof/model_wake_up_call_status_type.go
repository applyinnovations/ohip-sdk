/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// WakeUpCallStatusType Statuses of the wake up call.
type WakeUpCallStatusType string

// List of wakeUpCallStatusType
const (
	WAKEUPCALLSTATUSTYPE_COMPLETED WakeUpCallStatusType = "Completed"
	WAKEUPCALLSTATUSTYPE_NO_ANSWER WakeUpCallStatusType = "NoAnswer"
	WAKEUPCALLSTATUSTYPE_CANCELLED WakeUpCallStatusType = "Cancelled"
	WAKEUPCALLSTATUSTYPE_PENDING WakeUpCallStatusType = "Pending"
)

// All allowed values of WakeUpCallStatusType enum
var AllowedWakeUpCallStatusTypeEnumValues = []WakeUpCallStatusType{
	"Completed",
	"NoAnswer",
	"Cancelled",
	"Pending",
}

func (v *WakeUpCallStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WakeUpCallStatusType(value)
	for _, existing := range AllowedWakeUpCallStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WakeUpCallStatusType", value)
}

// NewWakeUpCallStatusTypeFromValue returns a pointer to a valid WakeUpCallStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWakeUpCallStatusTypeFromValue(v string) (*WakeUpCallStatusType, error) {
	ev := WakeUpCallStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WakeUpCallStatusType: valid values are %v", v, AllowedWakeUpCallStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WakeUpCallStatusType) IsValid() bool {
	for _, existing := range AllowedWakeUpCallStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to wakeUpCallStatusType value
func (v WakeUpCallStatusType) Ptr() *WakeUpCallStatusType {
	return &v
}

type NullableWakeUpCallStatusType struct {
	value *WakeUpCallStatusType
	isSet bool
}

func (v NullableWakeUpCallStatusType) Get() *WakeUpCallStatusType {
	return v.value
}

func (v *NullableWakeUpCallStatusType) Set(val *WakeUpCallStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableWakeUpCallStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableWakeUpCallStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWakeUpCallStatusType(val *WakeUpCallStatusType) *NullableWakeUpCallStatusType {
	return &NullableWakeUpCallStatusType{value: val, isSet: true}
}

func (v NullableWakeUpCallStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWakeUpCallStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

