/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// CommissionReservationInstructionsType Type for commission reservation instructions.
type CommissionReservationInstructionsType string

// List of commissionReservationInstructionsType
const (
	COMMISSIONRESERVATIONINSTRUCTIONSTYPE_FETCH_RESERVATION_INFO CommissionReservationInstructionsType = "FetchReservationInfo"
)

// All allowed values of CommissionReservationInstructionsType enum
var AllowedCommissionReservationInstructionsTypeEnumValues = []CommissionReservationInstructionsType{
	"FetchReservationInfo",
}

func (v *CommissionReservationInstructionsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommissionReservationInstructionsType(value)
	for _, existing := range AllowedCommissionReservationInstructionsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommissionReservationInstructionsType", value)
}

// NewCommissionReservationInstructionsTypeFromValue returns a pointer to a valid CommissionReservationInstructionsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionReservationInstructionsTypeFromValue(v string) (*CommissionReservationInstructionsType, error) {
	ev := CommissionReservationInstructionsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionReservationInstructionsType: valid values are %v", v, AllowedCommissionReservationInstructionsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionReservationInstructionsType) IsValid() bool {
	for _, existing := range AllowedCommissionReservationInstructionsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to commissionReservationInstructionsType value
func (v CommissionReservationInstructionsType) Ptr() *CommissionReservationInstructionsType {
	return &v
}

type NullableCommissionReservationInstructionsType struct {
	value *CommissionReservationInstructionsType
	isSet bool
}

func (v NullableCommissionReservationInstructionsType) Get() *CommissionReservationInstructionsType {
	return v.value
}

func (v *NullableCommissionReservationInstructionsType) Set(val *CommissionReservationInstructionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionReservationInstructionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionReservationInstructionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionReservationInstructionsType(val *CommissionReservationInstructionsType) *NullableCommissionReservationInstructionsType {
	return &NullableCommissionReservationInstructionsType{value: val, isSet: true}
}

func (v NullableCommissionReservationInstructionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionReservationInstructionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

