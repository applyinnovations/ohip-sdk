/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// CommissionPaymentActivityStatusType Simple type for payment activity status type. Valid values are Outstanding, Reconciled, Unpresented and Void.
type CommissionPaymentActivityStatusType string

// List of commissionPaymentActivityStatusType
const (
	COMMISSIONPAYMENTACTIVITYSTATUSTYPE_OUTSTANDING CommissionPaymentActivityStatusType = "Outstanding"
	COMMISSIONPAYMENTACTIVITYSTATUSTYPE_RECONCILED CommissionPaymentActivityStatusType = "Reconciled"
	COMMISSIONPAYMENTACTIVITYSTATUSTYPE_UNPRESENTED CommissionPaymentActivityStatusType = "Unpresented"
	COMMISSIONPAYMENTACTIVITYSTATUSTYPE_VOID CommissionPaymentActivityStatusType = "Void"
	COMMISSIONPAYMENTACTIVITYSTATUSTYPE_FAILED CommissionPaymentActivityStatusType = "Failed"
)

// All allowed values of CommissionPaymentActivityStatusType enum
var AllowedCommissionPaymentActivityStatusTypeEnumValues = []CommissionPaymentActivityStatusType{
	"Outstanding",
	"Reconciled",
	"Unpresented",
	"Void",
	"Failed",
}

func (v *CommissionPaymentActivityStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommissionPaymentActivityStatusType(value)
	for _, existing := range AllowedCommissionPaymentActivityStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommissionPaymentActivityStatusType", value)
}

// NewCommissionPaymentActivityStatusTypeFromValue returns a pointer to a valid CommissionPaymentActivityStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommissionPaymentActivityStatusTypeFromValue(v string) (*CommissionPaymentActivityStatusType, error) {
	ev := CommissionPaymentActivityStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommissionPaymentActivityStatusType: valid values are %v", v, AllowedCommissionPaymentActivityStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommissionPaymentActivityStatusType) IsValid() bool {
	for _, existing := range AllowedCommissionPaymentActivityStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to commissionPaymentActivityStatusType value
func (v CommissionPaymentActivityStatusType) Ptr() *CommissionPaymentActivityStatusType {
	return &v
}

type NullableCommissionPaymentActivityStatusType struct {
	value *CommissionPaymentActivityStatusType
	isSet bool
}

func (v NullableCommissionPaymentActivityStatusType) Get() *CommissionPaymentActivityStatusType {
	return v.value
}

func (v *NullableCommissionPaymentActivityStatusType) Set(val *CommissionPaymentActivityStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionPaymentActivityStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionPaymentActivityStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionPaymentActivityStatusType(val *CommissionPaymentActivityStatusType) *NullableCommissionPaymentActivityStatusType {
	return &NullableCommissionPaymentActivityStatusType{value: val, isSet: true}
}

func (v NullableCommissionPaymentActivityStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionPaymentActivityStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

