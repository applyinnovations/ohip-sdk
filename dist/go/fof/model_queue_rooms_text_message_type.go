/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// QueueRoomsTextMessageType Text message will be delivered via Queue Rush, to housekeeping.
type QueueRoomsTextMessageType string

// List of queueRoomsTextMessageType
const (
	QUEUEROOMSTEXTMESSAGETYPE_QUEUE_RESERVATION QueueRoomsTextMessageType = "QueueReservation"
	QUEUEROOMSTEXTMESSAGETYPE_QUEUE_RUSH QueueRoomsTextMessageType = "QueueRush"
)

// All allowed values of QueueRoomsTextMessageType enum
var AllowedQueueRoomsTextMessageTypeEnumValues = []QueueRoomsTextMessageType{
	"QueueReservation",
	"QueueRush",
}

func (v *QueueRoomsTextMessageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueueRoomsTextMessageType(value)
	for _, existing := range AllowedQueueRoomsTextMessageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueueRoomsTextMessageType", value)
}

// NewQueueRoomsTextMessageTypeFromValue returns a pointer to a valid QueueRoomsTextMessageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueueRoomsTextMessageTypeFromValue(v string) (*QueueRoomsTextMessageType, error) {
	ev := QueueRoomsTextMessageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueueRoomsTextMessageType: valid values are %v", v, AllowedQueueRoomsTextMessageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueueRoomsTextMessageType) IsValid() bool {
	for _, existing := range AllowedQueueRoomsTextMessageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to queueRoomsTextMessageType value
func (v QueueRoomsTextMessageType) Ptr() *QueueRoomsTextMessageType {
	return &v
}

type NullableQueueRoomsTextMessageType struct {
	value *QueueRoomsTextMessageType
	isSet bool
}

func (v NullableQueueRoomsTextMessageType) Get() *QueueRoomsTextMessageType {
	return v.value
}

func (v *NullableQueueRoomsTextMessageType) Set(val *QueueRoomsTextMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableQueueRoomsTextMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableQueueRoomsTextMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueueRoomsTextMessageType(val *QueueRoomsTextMessageType) *NullableQueueRoomsTextMessageType {
	return &NullableQueueRoomsTextMessageType{value: val, isSet: true}
}

func (v NullableQueueRoomsTextMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueueRoomsTextMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

