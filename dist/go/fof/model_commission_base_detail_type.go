/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the CommissionBaseDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionBaseDetailType{}

// CommissionBaseDetailType Criteria for updating a commission record.
type CommissionBaseDetailType struct {
	CommissionId *UniqueIDType `json:"commissionId,omitempty"`
	CommissionCode *CommissionCodeType `json:"commissionCode,omitempty"`
	CommissionAmount *CurrencyAmountType `json:"commissionAmount,omitempty"`
	CommissionTaxAmount *CurrencyAmountType `json:"commissionTaxAmount,omitempty"`
	PrepaidCommissionAmount *CurrencyAmountType `json:"prepaidCommissionAmount,omitempty"`
	// Remarks for the commission record.
	Remarks *string `json:"remarks,omitempty"`
}

// NewCommissionBaseDetailType instantiates a new CommissionBaseDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionBaseDetailType() *CommissionBaseDetailType {
	this := CommissionBaseDetailType{}
	return &this
}

// NewCommissionBaseDetailTypeWithDefaults instantiates a new CommissionBaseDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionBaseDetailTypeWithDefaults() *CommissionBaseDetailType {
	this := CommissionBaseDetailType{}
	return &this
}

// GetCommissionId returns the CommissionId field value if set, zero value otherwise.
func (o *CommissionBaseDetailType) GetCommissionId() UniqueIDType {
	if o == nil || IsNil(o.CommissionId) {
		var ret UniqueIDType
		return ret
	}
	return *o.CommissionId
}

// GetCommissionIdOk returns a tuple with the CommissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionBaseDetailType) GetCommissionIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.CommissionId) {
		return nil, false
	}
	return o.CommissionId, true
}

// HasCommissionId returns a boolean if a field has been set.
func (o *CommissionBaseDetailType) HasCommissionId() bool {
	if o != nil && !IsNil(o.CommissionId) {
		return true
	}

	return false
}

// SetCommissionId gets a reference to the given UniqueIDType and assigns it to the CommissionId field.
func (o *CommissionBaseDetailType) SetCommissionId(v UniqueIDType) {
	o.CommissionId = &v
}

// GetCommissionCode returns the CommissionCode field value if set, zero value otherwise.
func (o *CommissionBaseDetailType) GetCommissionCode() CommissionCodeType {
	if o == nil || IsNil(o.CommissionCode) {
		var ret CommissionCodeType
		return ret
	}
	return *o.CommissionCode
}

// GetCommissionCodeOk returns a tuple with the CommissionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionBaseDetailType) GetCommissionCodeOk() (*CommissionCodeType, bool) {
	if o == nil || IsNil(o.CommissionCode) {
		return nil, false
	}
	return o.CommissionCode, true
}

// HasCommissionCode returns a boolean if a field has been set.
func (o *CommissionBaseDetailType) HasCommissionCode() bool {
	if o != nil && !IsNil(o.CommissionCode) {
		return true
	}

	return false
}

// SetCommissionCode gets a reference to the given CommissionCodeType and assigns it to the CommissionCode field.
func (o *CommissionBaseDetailType) SetCommissionCode(v CommissionCodeType) {
	o.CommissionCode = &v
}

// GetCommissionAmount returns the CommissionAmount field value if set, zero value otherwise.
func (o *CommissionBaseDetailType) GetCommissionAmount() CurrencyAmountType {
	if o == nil || IsNil(o.CommissionAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionBaseDetailType) GetCommissionAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CommissionAmount) {
		return nil, false
	}
	return o.CommissionAmount, true
}

// HasCommissionAmount returns a boolean if a field has been set.
func (o *CommissionBaseDetailType) HasCommissionAmount() bool {
	if o != nil && !IsNil(o.CommissionAmount) {
		return true
	}

	return false
}

// SetCommissionAmount gets a reference to the given CurrencyAmountType and assigns it to the CommissionAmount field.
func (o *CommissionBaseDetailType) SetCommissionAmount(v CurrencyAmountType) {
	o.CommissionAmount = &v
}

// GetCommissionTaxAmount returns the CommissionTaxAmount field value if set, zero value otherwise.
func (o *CommissionBaseDetailType) GetCommissionTaxAmount() CurrencyAmountType {
	if o == nil || IsNil(o.CommissionTaxAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CommissionTaxAmount
}

// GetCommissionTaxAmountOk returns a tuple with the CommissionTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionBaseDetailType) GetCommissionTaxAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CommissionTaxAmount) {
		return nil, false
	}
	return o.CommissionTaxAmount, true
}

// HasCommissionTaxAmount returns a boolean if a field has been set.
func (o *CommissionBaseDetailType) HasCommissionTaxAmount() bool {
	if o != nil && !IsNil(o.CommissionTaxAmount) {
		return true
	}

	return false
}

// SetCommissionTaxAmount gets a reference to the given CurrencyAmountType and assigns it to the CommissionTaxAmount field.
func (o *CommissionBaseDetailType) SetCommissionTaxAmount(v CurrencyAmountType) {
	o.CommissionTaxAmount = &v
}

// GetPrepaidCommissionAmount returns the PrepaidCommissionAmount field value if set, zero value otherwise.
func (o *CommissionBaseDetailType) GetPrepaidCommissionAmount() CurrencyAmountType {
	if o == nil || IsNil(o.PrepaidCommissionAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.PrepaidCommissionAmount
}

// GetPrepaidCommissionAmountOk returns a tuple with the PrepaidCommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionBaseDetailType) GetPrepaidCommissionAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.PrepaidCommissionAmount) {
		return nil, false
	}
	return o.PrepaidCommissionAmount, true
}

// HasPrepaidCommissionAmount returns a boolean if a field has been set.
func (o *CommissionBaseDetailType) HasPrepaidCommissionAmount() bool {
	if o != nil && !IsNil(o.PrepaidCommissionAmount) {
		return true
	}

	return false
}

// SetPrepaidCommissionAmount gets a reference to the given CurrencyAmountType and assigns it to the PrepaidCommissionAmount field.
func (o *CommissionBaseDetailType) SetPrepaidCommissionAmount(v CurrencyAmountType) {
	o.PrepaidCommissionAmount = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *CommissionBaseDetailType) GetRemarks() string {
	if o == nil || IsNil(o.Remarks) {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionBaseDetailType) GetRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.Remarks) {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *CommissionBaseDetailType) HasRemarks() bool {
	if o != nil && !IsNil(o.Remarks) {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *CommissionBaseDetailType) SetRemarks(v string) {
	o.Remarks = &v
}

func (o CommissionBaseDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionBaseDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommissionId) {
		toSerialize["commissionId"] = o.CommissionId
	}
	if !IsNil(o.CommissionCode) {
		toSerialize["commissionCode"] = o.CommissionCode
	}
	if !IsNil(o.CommissionAmount) {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if !IsNil(o.CommissionTaxAmount) {
		toSerialize["commissionTaxAmount"] = o.CommissionTaxAmount
	}
	if !IsNil(o.PrepaidCommissionAmount) {
		toSerialize["prepaidCommissionAmount"] = o.PrepaidCommissionAmount
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	return toSerialize, nil
}

type NullableCommissionBaseDetailType struct {
	value *CommissionBaseDetailType
	isSet bool
}

func (v NullableCommissionBaseDetailType) Get() *CommissionBaseDetailType {
	return v.value
}

func (v *NullableCommissionBaseDetailType) Set(val *CommissionBaseDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionBaseDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionBaseDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionBaseDetailType(val *CommissionBaseDetailType) *NullableCommissionBaseDetailType {
	return &NullableCommissionBaseDetailType{value: val, isSet: true}
}

func (v NullableCommissionBaseDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionBaseDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


