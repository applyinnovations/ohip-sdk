/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the ReservationDisplayColorInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationDisplayColorInfoType{}

// ReservationDisplayColorInfoType Information of reservation display color, determined based on OPERA parameter RESERVATION_COLOR_DEFINITION 
type ReservationDisplayColorInfoType struct {
	DisplayColor *ColorType `json:"displayColor,omitempty"`
	ColorDefinition *ColorDefinitionType `json:"colorDefinition,omitempty"`
	// Description populated based on DisplayColor.
	ColorDescription *string `json:"colorDescription,omitempty"`
}

// NewReservationDisplayColorInfoType instantiates a new ReservationDisplayColorInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationDisplayColorInfoType() *ReservationDisplayColorInfoType {
	this := ReservationDisplayColorInfoType{}
	return &this
}

// NewReservationDisplayColorInfoTypeWithDefaults instantiates a new ReservationDisplayColorInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationDisplayColorInfoTypeWithDefaults() *ReservationDisplayColorInfoType {
	this := ReservationDisplayColorInfoType{}
	return &this
}

// GetDisplayColor returns the DisplayColor field value if set, zero value otherwise.
func (o *ReservationDisplayColorInfoType) GetDisplayColor() ColorType {
	if o == nil || IsNil(o.DisplayColor) {
		var ret ColorType
		return ret
	}
	return *o.DisplayColor
}

// GetDisplayColorOk returns a tuple with the DisplayColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationDisplayColorInfoType) GetDisplayColorOk() (*ColorType, bool) {
	if o == nil || IsNil(o.DisplayColor) {
		return nil, false
	}
	return o.DisplayColor, true
}

// HasDisplayColor returns a boolean if a field has been set.
func (o *ReservationDisplayColorInfoType) HasDisplayColor() bool {
	if o != nil && !IsNil(o.DisplayColor) {
		return true
	}

	return false
}

// SetDisplayColor gets a reference to the given ColorType and assigns it to the DisplayColor field.
func (o *ReservationDisplayColorInfoType) SetDisplayColor(v ColorType) {
	o.DisplayColor = &v
}

// GetColorDefinition returns the ColorDefinition field value if set, zero value otherwise.
func (o *ReservationDisplayColorInfoType) GetColorDefinition() ColorDefinitionType {
	if o == nil || IsNil(o.ColorDefinition) {
		var ret ColorDefinitionType
		return ret
	}
	return *o.ColorDefinition
}

// GetColorDefinitionOk returns a tuple with the ColorDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationDisplayColorInfoType) GetColorDefinitionOk() (*ColorDefinitionType, bool) {
	if o == nil || IsNil(o.ColorDefinition) {
		return nil, false
	}
	return o.ColorDefinition, true
}

// HasColorDefinition returns a boolean if a field has been set.
func (o *ReservationDisplayColorInfoType) HasColorDefinition() bool {
	if o != nil && !IsNil(o.ColorDefinition) {
		return true
	}

	return false
}

// SetColorDefinition gets a reference to the given ColorDefinitionType and assigns it to the ColorDefinition field.
func (o *ReservationDisplayColorInfoType) SetColorDefinition(v ColorDefinitionType) {
	o.ColorDefinition = &v
}

// GetColorDescription returns the ColorDescription field value if set, zero value otherwise.
func (o *ReservationDisplayColorInfoType) GetColorDescription() string {
	if o == nil || IsNil(o.ColorDescription) {
		var ret string
		return ret
	}
	return *o.ColorDescription
}

// GetColorDescriptionOk returns a tuple with the ColorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationDisplayColorInfoType) GetColorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ColorDescription) {
		return nil, false
	}
	return o.ColorDescription, true
}

// HasColorDescription returns a boolean if a field has been set.
func (o *ReservationDisplayColorInfoType) HasColorDescription() bool {
	if o != nil && !IsNil(o.ColorDescription) {
		return true
	}

	return false
}

// SetColorDescription gets a reference to the given string and assigns it to the ColorDescription field.
func (o *ReservationDisplayColorInfoType) SetColorDescription(v string) {
	o.ColorDescription = &v
}

func (o ReservationDisplayColorInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationDisplayColorInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayColor) {
		toSerialize["displayColor"] = o.DisplayColor
	}
	if !IsNil(o.ColorDefinition) {
		toSerialize["colorDefinition"] = o.ColorDefinition
	}
	if !IsNil(o.ColorDescription) {
		toSerialize["colorDescription"] = o.ColorDescription
	}
	return toSerialize, nil
}

type NullableReservationDisplayColorInfoType struct {
	value *ReservationDisplayColorInfoType
	isSet bool
}

func (v NullableReservationDisplayColorInfoType) Get() *ReservationDisplayColorInfoType {
	return v.value
}

func (v *NullableReservationDisplayColorInfoType) Set(val *ReservationDisplayColorInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationDisplayColorInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationDisplayColorInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationDisplayColorInfoType(val *ReservationDisplayColorInfoType) *NullableReservationDisplayColorInfoType {
	return &NullableReservationDisplayColorInfoType{value: val, isSet: true}
}

func (v NullableReservationDisplayColorInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationDisplayColorInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


