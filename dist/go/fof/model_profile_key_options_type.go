/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the ProfileKeyOptionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileKeyOptionsType{}

// ProfileKeyOptionsType struct for ProfileKeyOptionsType
type ProfileKeyOptionsType struct {
	// Unique profile Id attached to the reservation.
	ProfileId *string `json:"profileId,omitempty"`
	// Key option preferences of the specific profile Id attached to the reservation.
	KeyOptions *string `json:"keyOptions,omitempty"`
}

// NewProfileKeyOptionsType instantiates a new ProfileKeyOptionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileKeyOptionsType() *ProfileKeyOptionsType {
	this := ProfileKeyOptionsType{}
	return &this
}

// NewProfileKeyOptionsTypeWithDefaults instantiates a new ProfileKeyOptionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileKeyOptionsTypeWithDefaults() *ProfileKeyOptionsType {
	this := ProfileKeyOptionsType{}
	return &this
}

// GetProfileId returns the ProfileId field value if set, zero value otherwise.
func (o *ProfileKeyOptionsType) GetProfileId() string {
	if o == nil || IsNil(o.ProfileId) {
		var ret string
		return ret
	}
	return *o.ProfileId
}

// GetProfileIdOk returns a tuple with the ProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileKeyOptionsType) GetProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileId) {
		return nil, false
	}
	return o.ProfileId, true
}

// HasProfileId returns a boolean if a field has been set.
func (o *ProfileKeyOptionsType) HasProfileId() bool {
	if o != nil && !IsNil(o.ProfileId) {
		return true
	}

	return false
}

// SetProfileId gets a reference to the given string and assigns it to the ProfileId field.
func (o *ProfileKeyOptionsType) SetProfileId(v string) {
	o.ProfileId = &v
}

// GetKeyOptions returns the KeyOptions field value if set, zero value otherwise.
func (o *ProfileKeyOptionsType) GetKeyOptions() string {
	if o == nil || IsNil(o.KeyOptions) {
		var ret string
		return ret
	}
	return *o.KeyOptions
}

// GetKeyOptionsOk returns a tuple with the KeyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileKeyOptionsType) GetKeyOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.KeyOptions) {
		return nil, false
	}
	return o.KeyOptions, true
}

// HasKeyOptions returns a boolean if a field has been set.
func (o *ProfileKeyOptionsType) HasKeyOptions() bool {
	if o != nil && !IsNil(o.KeyOptions) {
		return true
	}

	return false
}

// SetKeyOptions gets a reference to the given string and assigns it to the KeyOptions field.
func (o *ProfileKeyOptionsType) SetKeyOptions(v string) {
	o.KeyOptions = &v
}

func (o ProfileKeyOptionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileKeyOptionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileId) {
		toSerialize["profileId"] = o.ProfileId
	}
	if !IsNil(o.KeyOptions) {
		toSerialize["keyOptions"] = o.KeyOptions
	}
	return toSerialize, nil
}

type NullableProfileKeyOptionsType struct {
	value *ProfileKeyOptionsType
	isSet bool
}

func (v NullableProfileKeyOptionsType) Get() *ProfileKeyOptionsType {
	return v.value
}

func (v *NullableProfileKeyOptionsType) Set(val *ProfileKeyOptionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileKeyOptionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileKeyOptionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileKeyOptionsType(val *ProfileKeyOptionsType) *NullableProfileKeyOptionsType {
	return &NullableProfileKeyOptionsType{value: val, isSet: true}
}

func (v NullableProfileKeyOptionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileKeyOptionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


