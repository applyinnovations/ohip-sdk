/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// RoomKeyOutBoundType Simple type for representing room key type.
type RoomKeyOutBoundType string

// List of roomKeyOutBoundType
const (
	ROOMKEYOUTBOUNDTYPE_NEW RoomKeyOutBoundType = "New"
	ROOMKEYOUTBOUNDTYPE_DUPLICATE RoomKeyOutBoundType = "Duplicate"
	ROOMKEYOUTBOUNDTYPE_LOST RoomKeyOutBoundType = "Lost"
	ROOMKEYOUTBOUNDTYPE_ONE_SHOT RoomKeyOutBoundType = "OneShot"
	ROOMKEYOUTBOUNDTYPE_ROOM_MOVE RoomKeyOutBoundType = "RoomMove"
	ROOMKEYOUTBOUNDTYPE_RE_ENCODE RoomKeyOutBoundType = "ReEncode"
	ROOMKEYOUTBOUNDTYPE_REMOVE RoomKeyOutBoundType = "Remove"
	ROOMKEYOUTBOUNDTYPE_MODIFY_STAY RoomKeyOutBoundType = "ModifyStay"
	ROOMKEYOUTBOUNDTYPE_READ RoomKeyOutBoundType = "Read"
)

// All allowed values of RoomKeyOutBoundType enum
var AllowedRoomKeyOutBoundTypeEnumValues = []RoomKeyOutBoundType{
	"New",
	"Duplicate",
	"Lost",
	"OneShot",
	"RoomMove",
	"ReEncode",
	"Remove",
	"ModifyStay",
	"Read",
}

func (v *RoomKeyOutBoundType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoomKeyOutBoundType(value)
	for _, existing := range AllowedRoomKeyOutBoundTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoomKeyOutBoundType", value)
}

// NewRoomKeyOutBoundTypeFromValue returns a pointer to a valid RoomKeyOutBoundType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoomKeyOutBoundTypeFromValue(v string) (*RoomKeyOutBoundType, error) {
	ev := RoomKeyOutBoundType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoomKeyOutBoundType: valid values are %v", v, AllowedRoomKeyOutBoundTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoomKeyOutBoundType) IsValid() bool {
	for _, existing := range AllowedRoomKeyOutBoundTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roomKeyOutBoundType value
func (v RoomKeyOutBoundType) Ptr() *RoomKeyOutBoundType {
	return &v
}

type NullableRoomKeyOutBoundType struct {
	value *RoomKeyOutBoundType
	isSet bool
}

func (v NullableRoomKeyOutBoundType) Get() *RoomKeyOutBoundType {
	return v.value
}

func (v *NullableRoomKeyOutBoundType) Set(val *RoomKeyOutBoundType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomKeyOutBoundType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomKeyOutBoundType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomKeyOutBoundType(val *RoomKeyOutBoundType) *NullableRoomKeyOutBoundType {
	return &NullableRoomKeyOutBoundType{value: val, isSet: true}
}

func (v NullableRoomKeyOutBoundType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomKeyOutBoundType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

