/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoleUserEntryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleUserEntryType{}

// RoleUserEntryType Role or User in which the log book entry belongs to.
type RoleUserEntryType struct {
	Role *CodeDescriptionType `json:"role,omitempty"`
	User *string `json:"user,omitempty"`
}

// NewRoleUserEntryType instantiates a new RoleUserEntryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleUserEntryType() *RoleUserEntryType {
	this := RoleUserEntryType{}
	return &this
}

// NewRoleUserEntryTypeWithDefaults instantiates a new RoleUserEntryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleUserEntryTypeWithDefaults() *RoleUserEntryType {
	this := RoleUserEntryType{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RoleUserEntryType) GetRole() CodeDescriptionType {
	if o == nil || IsNil(o.Role) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUserEntryType) GetRoleOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RoleUserEntryType) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given CodeDescriptionType and assigns it to the Role field.
func (o *RoleUserEntryType) SetRole(v CodeDescriptionType) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RoleUserEntryType) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUserEntryType) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RoleUserEntryType) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RoleUserEntryType) SetUser(v string) {
	o.User = &v
}

func (o RoleUserEntryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleUserEntryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRoleUserEntryType struct {
	value *RoleUserEntryType
	isSet bool
}

func (v NullableRoleUserEntryType) Get() *RoleUserEntryType {
	return v.value
}

func (v *NullableRoleUserEntryType) Set(val *RoleUserEntryType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleUserEntryType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleUserEntryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleUserEntryType(val *RoleUserEntryType) *NullableRoleUserEntryType {
	return &NullableRoleUserEntryType{value: val, isSet: true}
}

func (v NullableRoleUserEntryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleUserEntryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


