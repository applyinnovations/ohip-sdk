/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// RoomKeyType Simple type for representing room key type.
type RoomKeyType string

// List of roomKeyType
const (
	ROOMKEYTYPE_NEW RoomKeyType = "New"
	ROOMKEYTYPE_DUPLICATE RoomKeyType = "Duplicate"
	ROOMKEYTYPE_LOST RoomKeyType = "Lost"
	ROOMKEYTYPE_ONE_SHOT RoomKeyType = "OneShot"
	ROOMKEYTYPE_ROOM_MOVE RoomKeyType = "RoomMove"
	ROOMKEYTYPE_RE_ENCODE RoomKeyType = "ReEncode"
	ROOMKEYTYPE_REMOVE RoomKeyType = "Remove"
	ROOMKEYTYPE_MODIFY_STAY RoomKeyType = "ModifyStay"
)

// All allowed values of RoomKeyType enum
var AllowedRoomKeyTypeEnumValues = []RoomKeyType{
	"New",
	"Duplicate",
	"Lost",
	"OneShot",
	"RoomMove",
	"ReEncode",
	"Remove",
	"ModifyStay",
}

func (v *RoomKeyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoomKeyType(value)
	for _, existing := range AllowedRoomKeyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoomKeyType", value)
}

// NewRoomKeyTypeFromValue returns a pointer to a valid RoomKeyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoomKeyTypeFromValue(v string) (*RoomKeyType, error) {
	ev := RoomKeyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoomKeyType: valid values are %v", v, AllowedRoomKeyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoomKeyType) IsValid() bool {
	for _, existing := range AllowedRoomKeyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roomKeyType value
func (v RoomKeyType) Ptr() *RoomKeyType {
	return &v
}

type NullableRoomKeyType struct {
	value *RoomKeyType
	isSet bool
}

func (v NullableRoomKeyType) Get() *RoomKeyType {
	return v.value
}

func (v *NullableRoomKeyType) Set(val *RoomKeyType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomKeyType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomKeyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomKeyType(val *RoomKeyType) *NullableRoomKeyType {
	return &NullableRoomKeyType{value: val, isSet: true}
}

func (v NullableRoomKeyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomKeyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

