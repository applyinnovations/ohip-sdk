/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoomOutOfOrderType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomOutOfOrderType{}

// RoomOutOfOrderType Out Of Order and Out Of Service Room information.
type RoomOutOfOrderType struct {
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	NewDateRange *DateRangeType `json:"newDateRange,omitempty"`
	// Reason Code why the room is OO/OS.
	ReasonCode *string `json:"reasonCode,omitempty"`
	// Reason Description why the room is OO/OS.
	ReasonDesc *string `json:"reasonDesc,omitempty"`
	// Notes or Remarks on the OO/OS room
	RepairRemarks *string `json:"repairRemarks,omitempty"`
	ReturnStatus *HousekeepingRoomStatusType `json:"returnStatus,omitempty"`
	RoomStatus *HousekeepingRoomStatusType `json:"roomStatus,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
}

// NewRoomOutOfOrderType instantiates a new RoomOutOfOrderType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomOutOfOrderType() *RoomOutOfOrderType {
	this := RoomOutOfOrderType{}
	return &this
}

// NewRoomOutOfOrderTypeWithDefaults instantiates a new RoomOutOfOrderType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomOutOfOrderTypeWithDefaults() *RoomOutOfOrderType {
	this := RoomOutOfOrderType{}
	return &this
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *RoomOutOfOrderType) SetEnd(v string) {
	o.End = &v
}

// GetNewDateRange returns the NewDateRange field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetNewDateRange() DateRangeType {
	if o == nil || IsNil(o.NewDateRange) {
		var ret DateRangeType
		return ret
	}
	return *o.NewDateRange
}

// GetNewDateRangeOk returns a tuple with the NewDateRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetNewDateRangeOk() (*DateRangeType, bool) {
	if o == nil || IsNil(o.NewDateRange) {
		return nil, false
	}
	return o.NewDateRange, true
}

// HasNewDateRange returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasNewDateRange() bool {
	if o != nil && !IsNil(o.NewDateRange) {
		return true
	}

	return false
}

// SetNewDateRange gets a reference to the given DateRangeType and assigns it to the NewDateRange field.
func (o *RoomOutOfOrderType) SetNewDateRange(v DateRangeType) {
	o.NewDateRange = &v
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetReasonCode() string {
	if o == nil || IsNil(o.ReasonCode) {
		var ret string
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetReasonCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given string and assigns it to the ReasonCode field.
func (o *RoomOutOfOrderType) SetReasonCode(v string) {
	o.ReasonCode = &v
}

// GetReasonDesc returns the ReasonDesc field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetReasonDesc() string {
	if o == nil || IsNil(o.ReasonDesc) {
		var ret string
		return ret
	}
	return *o.ReasonDesc
}

// GetReasonDescOk returns a tuple with the ReasonDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetReasonDescOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonDesc) {
		return nil, false
	}
	return o.ReasonDesc, true
}

// HasReasonDesc returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasReasonDesc() bool {
	if o != nil && !IsNil(o.ReasonDesc) {
		return true
	}

	return false
}

// SetReasonDesc gets a reference to the given string and assigns it to the ReasonDesc field.
func (o *RoomOutOfOrderType) SetReasonDesc(v string) {
	o.ReasonDesc = &v
}

// GetRepairRemarks returns the RepairRemarks field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetRepairRemarks() string {
	if o == nil || IsNil(o.RepairRemarks) {
		var ret string
		return ret
	}
	return *o.RepairRemarks
}

// GetRepairRemarksOk returns a tuple with the RepairRemarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetRepairRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.RepairRemarks) {
		return nil, false
	}
	return o.RepairRemarks, true
}

// HasRepairRemarks returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasRepairRemarks() bool {
	if o != nil && !IsNil(o.RepairRemarks) {
		return true
	}

	return false
}

// SetRepairRemarks gets a reference to the given string and assigns it to the RepairRemarks field.
func (o *RoomOutOfOrderType) SetRepairRemarks(v string) {
	o.RepairRemarks = &v
}

// GetReturnStatus returns the ReturnStatus field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetReturnStatus() HousekeepingRoomStatusType {
	if o == nil || IsNil(o.ReturnStatus) {
		var ret HousekeepingRoomStatusType
		return ret
	}
	return *o.ReturnStatus
}

// GetReturnStatusOk returns a tuple with the ReturnStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetReturnStatusOk() (*HousekeepingRoomStatusType, bool) {
	if o == nil || IsNil(o.ReturnStatus) {
		return nil, false
	}
	return o.ReturnStatus, true
}

// HasReturnStatus returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasReturnStatus() bool {
	if o != nil && !IsNil(o.ReturnStatus) {
		return true
	}

	return false
}

// SetReturnStatus gets a reference to the given HousekeepingRoomStatusType and assigns it to the ReturnStatus field.
func (o *RoomOutOfOrderType) SetReturnStatus(v HousekeepingRoomStatusType) {
	o.ReturnStatus = &v
}

// GetRoomStatus returns the RoomStatus field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetRoomStatus() HousekeepingRoomStatusType {
	if o == nil || IsNil(o.RoomStatus) {
		var ret HousekeepingRoomStatusType
		return ret
	}
	return *o.RoomStatus
}

// GetRoomStatusOk returns a tuple with the RoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetRoomStatusOk() (*HousekeepingRoomStatusType, bool) {
	if o == nil || IsNil(o.RoomStatus) {
		return nil, false
	}
	return o.RoomStatus, true
}

// HasRoomStatus returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasRoomStatus() bool {
	if o != nil && !IsNil(o.RoomStatus) {
		return true
	}

	return false
}

// SetRoomStatus gets a reference to the given HousekeepingRoomStatusType and assigns it to the RoomStatus field.
func (o *RoomOutOfOrderType) SetRoomStatus(v HousekeepingRoomStatusType) {
	o.RoomStatus = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *RoomOutOfOrderType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomOutOfOrderType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *RoomOutOfOrderType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *RoomOutOfOrderType) SetStart(v string) {
	o.Start = &v
}

func (o RoomOutOfOrderType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomOutOfOrderType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.NewDateRange) {
		toSerialize["newDateRange"] = o.NewDateRange
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["reasonCode"] = o.ReasonCode
	}
	if !IsNil(o.ReasonDesc) {
		toSerialize["reasonDesc"] = o.ReasonDesc
	}
	if !IsNil(o.RepairRemarks) {
		toSerialize["repairRemarks"] = o.RepairRemarks
	}
	if !IsNil(o.ReturnStatus) {
		toSerialize["returnStatus"] = o.ReturnStatus
	}
	if !IsNil(o.RoomStatus) {
		toSerialize["roomStatus"] = o.RoomStatus
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	return toSerialize, nil
}

type NullableRoomOutOfOrderType struct {
	value *RoomOutOfOrderType
	isSet bool
}

func (v NullableRoomOutOfOrderType) Get() *RoomOutOfOrderType {
	return v.value
}

func (v *NullableRoomOutOfOrderType) Set(val *RoomOutOfOrderType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomOutOfOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomOutOfOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomOutOfOrderType(val *RoomOutOfOrderType) *NullableRoomOutOfOrderType {
	return &NullableRoomOutOfOrderType{value: val, isSet: true}
}

func (v NullableRoomOutOfOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomOutOfOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


