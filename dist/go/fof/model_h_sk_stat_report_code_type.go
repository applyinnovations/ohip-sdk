/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// HSKStatReportCodeType Supported Housekeeping report codes.
type HSKStatReportCodeType string

// List of hSKStatReportCodeType
const (
	HSKSTATREPORTCODETYPE_HOUSE_SUMMARY HSKStatReportCodeType = "HouseSummary"
	HSKSTATREPORTCODETYPE_HOUSE_SUMMARY_MONTH_TO_DATE HSKStatReportCodeType = "HouseSummaryMonthToDate"
	HSKSTATREPORTCODETYPE_HOUSE_SUMMARY_YEAR_TO_DATE HSKStatReportCodeType = "HouseSummaryYearToDate"
	HSKSTATREPORTCODETYPE_RESERVATION_ACTIVITY HSKStatReportCodeType = "ReservationActivity"
	HSKSTATREPORTCODETYPE_RESERVATION_ACTIVITY_DAILY HSKStatReportCodeType = "ReservationActivityDaily"
	HSKSTATREPORTCODETYPE_RESERVATION_ACTIVITY_MONTH_TO_DATE HSKStatReportCodeType = "ReservationActivityMonthToDate"
	HSKSTATREPORTCODETYPE_RESERVATION_ACTIVITY_YEAR_TO_DATE HSKStatReportCodeType = "ReservationActivityYearToDate"
	HSKSTATREPORTCODETYPE_COMPLIMENTARY_OR_HOUSE_USE HSKStatReportCodeType = "ComplimentaryOrHouseUse"
	HSKSTATREPORTCODETYPE_DAILY_PROJECTION HSKStatReportCodeType = "DailyProjection"
	HSKSTATREPORTCODETYPE_ROOM_STATUS HSKStatReportCodeType = "RoomStatus"
	HSKSTATREPORTCODETYPE_LAST_HOUR_STATUS HSKStatReportCodeType = "LastHourStatus"
	HSKSTATREPORTCODETYPE_TURNDOWN HSKStatReportCodeType = "Turndown"
	HSKSTATREPORTCODETYPE_IN_HOUSE HSKStatReportCodeType = "InHouse"
	HSKSTATREPORTCODETYPE_CHECK_INS HSKStatReportCodeType = "CheckIns"
	HSKSTATREPORTCODETYPE_CHECK_OUTS HSKStatReportCodeType = "CheckOuts"
	HSKSTATREPORTCODETYPE_AVAILABLE_ROOMS HSKStatReportCodeType = "AvailableRooms"
	HSKSTATREPORTCODETYPE_ROOM_MAINTENANCE HSKStatReportCodeType = "RoomMaintenance"
	HSKSTATREPORTCODETYPE_RESERVATION_STATISTICS HSKStatReportCodeType = "ReservationStatistics"
	HSKSTATREPORTCODETYPE_VIP_GUESTS HSKStatReportCodeType = "VIPGuests"
	HSKSTATREPORTCODETYPE_ADVANCE_CHECK_IN HSKStatReportCodeType = "AdvanceCheckIn"
	HSKSTATREPORTCODETYPE_BLOCK_ARRIVALS HSKStatReportCodeType = "BlockArrivals"
	HSKSTATREPORTCODETYPE_RESERVATIONS_CANCELLATIONS_TODAY HSKStatReportCodeType = "ReservationsCancellationsToday"
	HSKSTATREPORTCODETYPE_AI_ROOM_ASSIGNMENT HSKStatReportCodeType = "AIRoomAssignment"
	HSKSTATREPORTCODETYPE_COMP_ROUTING HSKStatReportCodeType = "CompRouting"
	HSKSTATREPORTCODETYPE_ROOM_MOVE_STATISTICS HSKStatReportCodeType = "RoomMoveStatistics"
)

// All allowed values of HSKStatReportCodeType enum
var AllowedHSKStatReportCodeTypeEnumValues = []HSKStatReportCodeType{
	"HouseSummary",
	"HouseSummaryMonthToDate",
	"HouseSummaryYearToDate",
	"ReservationActivity",
	"ReservationActivityDaily",
	"ReservationActivityMonthToDate",
	"ReservationActivityYearToDate",
	"ComplimentaryOrHouseUse",
	"DailyProjection",
	"RoomStatus",
	"LastHourStatus",
	"Turndown",
	"InHouse",
	"CheckIns",
	"CheckOuts",
	"AvailableRooms",
	"RoomMaintenance",
	"ReservationStatistics",
	"VIPGuests",
	"AdvanceCheckIn",
	"BlockArrivals",
	"ReservationsCancellationsToday",
	"AIRoomAssignment",
	"CompRouting",
	"RoomMoveStatistics",
}

func (v *HSKStatReportCodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HSKStatReportCodeType(value)
	for _, existing := range AllowedHSKStatReportCodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HSKStatReportCodeType", value)
}

// NewHSKStatReportCodeTypeFromValue returns a pointer to a valid HSKStatReportCodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHSKStatReportCodeTypeFromValue(v string) (*HSKStatReportCodeType, error) {
	ev := HSKStatReportCodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HSKStatReportCodeType: valid values are %v", v, AllowedHSKStatReportCodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HSKStatReportCodeType) IsValid() bool {
	for _, existing := range AllowedHSKStatReportCodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hSKStatReportCodeType value
func (v HSKStatReportCodeType) Ptr() *HSKStatReportCodeType {
	return &v
}

type NullableHSKStatReportCodeType struct {
	value *HSKStatReportCodeType
	isSet bool
}

func (v NullableHSKStatReportCodeType) Get() *HSKStatReportCodeType {
	return v.value
}

func (v *NullableHSKStatReportCodeType) Set(val *HSKStatReportCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableHSKStatReportCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableHSKStatReportCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHSKStatReportCodeType(val *HSKStatReportCodeType) *NullableHSKStatReportCodeType {
	return &NullableHSKStatReportCodeType{value: val, isSet: true}
}

func (v NullableHSKStatReportCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHSKStatReportCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

