/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// ColorDefinitionType Color definition type. This color definition type is used to determine the defintion of color 
type ColorDefinitionType string

// List of colorDefinitionType
const (
	COLORDEFINITIONTYPE_RESERVATION ColorDefinitionType = "RESERVATION"
	COLORDEFINITIONTYPE_MARKET_CODE ColorDefinitionType = "MARKET_CODE"
	COLORDEFINITIONTYPE_VIP_LEVEL ColorDefinitionType = "VIP_LEVEL"
	COLORDEFINITIONTYPE_MEMBERSHIP_LEVEL ColorDefinitionType = "MEMBERSHIP_LEVEL"
)

// All allowed values of ColorDefinitionType enum
var AllowedColorDefinitionTypeEnumValues = []ColorDefinitionType{
	"RESERVATION",
	"MARKET_CODE",
	"VIP_LEVEL",
	"MEMBERSHIP_LEVEL",
}

func (v *ColorDefinitionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ColorDefinitionType(value)
	for _, existing := range AllowedColorDefinitionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ColorDefinitionType", value)
}

// NewColorDefinitionTypeFromValue returns a pointer to a valid ColorDefinitionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewColorDefinitionTypeFromValue(v string) (*ColorDefinitionType, error) {
	ev := ColorDefinitionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ColorDefinitionType: valid values are %v", v, AllowedColorDefinitionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ColorDefinitionType) IsValid() bool {
	for _, existing := range AllowedColorDefinitionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to colorDefinitionType value
func (v ColorDefinitionType) Ptr() *ColorDefinitionType {
	return &v
}

type NullableColorDefinitionType struct {
	value *ColorDefinitionType
	isSet bool
}

func (v NullableColorDefinitionType) Get() *ColorDefinitionType {
	return v.value
}

func (v *NullableColorDefinitionType) Set(val *ColorDefinitionType) {
	v.value = val
	v.isSet = true
}

func (v NullableColorDefinitionType) IsSet() bool {
	return v.isSet
}

func (v *NullableColorDefinitionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColorDefinitionType(val *ColorDefinitionType) *NullableColorDefinitionType {
	return &NullableColorDefinitionType{value: val, isSet: true}
}

func (v NullableColorDefinitionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColorDefinitionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

