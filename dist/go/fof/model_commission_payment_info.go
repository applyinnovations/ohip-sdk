/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the CommissionPaymentInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionPaymentInfo{}

// CommissionPaymentInfo Information on a commission payment for a reservation.
type CommissionPaymentInfo struct {
	// Batch Id for commission payment.
	BatchId *string `json:"batchId,omitempty"`
	// Check number for the payment.
	CheckNo *string `json:"checkNo,omitempty"`
	// Commission amount
	CommissionAmount *float32 `json:"commissionAmount,omitempty"`
	// Commission status
	CommissionStatus *string `json:"commissionStatus,omitempty"`
	// The payment date
	PaymentDate *string `json:"paymentDate,omitempty"`
	// Payment id 
	PaymentId *string `json:"paymentId,omitempty"`
	// Payment Method
	PaymentMethod *string `json:"paymentMethod,omitempty"`
	// Remarks for the commission.
	Remarks *string `json:"remarks,omitempty"`
}

// NewCommissionPaymentInfo instantiates a new CommissionPaymentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionPaymentInfo() *CommissionPaymentInfo {
	this := CommissionPaymentInfo{}
	return &this
}

// NewCommissionPaymentInfoWithDefaults instantiates a new CommissionPaymentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionPaymentInfoWithDefaults() *CommissionPaymentInfo {
	this := CommissionPaymentInfo{}
	return &this
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetBatchId() string {
	if o == nil || IsNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetBatchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BatchId) {
		return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasBatchId() bool {
	if o != nil && !IsNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *CommissionPaymentInfo) SetBatchId(v string) {
	o.BatchId = &v
}

// GetCheckNo returns the CheckNo field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetCheckNo() string {
	if o == nil || IsNil(o.CheckNo) {
		var ret string
		return ret
	}
	return *o.CheckNo
}

// GetCheckNoOk returns a tuple with the CheckNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetCheckNoOk() (*string, bool) {
	if o == nil || IsNil(o.CheckNo) {
		return nil, false
	}
	return o.CheckNo, true
}

// HasCheckNo returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasCheckNo() bool {
	if o != nil && !IsNil(o.CheckNo) {
		return true
	}

	return false
}

// SetCheckNo gets a reference to the given string and assigns it to the CheckNo field.
func (o *CommissionPaymentInfo) SetCheckNo(v string) {
	o.CheckNo = &v
}

// GetCommissionAmount returns the CommissionAmount field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetCommissionAmount() float32 {
	if o == nil || IsNil(o.CommissionAmount) {
		var ret float32
		return ret
	}
	return *o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetCommissionAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.CommissionAmount) {
		return nil, false
	}
	return o.CommissionAmount, true
}

// HasCommissionAmount returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasCommissionAmount() bool {
	if o != nil && !IsNil(o.CommissionAmount) {
		return true
	}

	return false
}

// SetCommissionAmount gets a reference to the given float32 and assigns it to the CommissionAmount field.
func (o *CommissionPaymentInfo) SetCommissionAmount(v float32) {
	o.CommissionAmount = &v
}

// GetCommissionStatus returns the CommissionStatus field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetCommissionStatus() string {
	if o == nil || IsNil(o.CommissionStatus) {
		var ret string
		return ret
	}
	return *o.CommissionStatus
}

// GetCommissionStatusOk returns a tuple with the CommissionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetCommissionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.CommissionStatus) {
		return nil, false
	}
	return o.CommissionStatus, true
}

// HasCommissionStatus returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasCommissionStatus() bool {
	if o != nil && !IsNil(o.CommissionStatus) {
		return true
	}

	return false
}

// SetCommissionStatus gets a reference to the given string and assigns it to the CommissionStatus field.
func (o *CommissionPaymentInfo) SetCommissionStatus(v string) {
	o.CommissionStatus = &v
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetPaymentDate() string {
	if o == nil || IsNil(o.PaymentDate) {
		var ret string
		return ret
	}
	return *o.PaymentDate
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentDate) {
		return nil, false
	}
	return o.PaymentDate, true
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasPaymentDate() bool {
	if o != nil && !IsNil(o.PaymentDate) {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given string and assigns it to the PaymentDate field.
func (o *CommissionPaymentInfo) SetPaymentDate(v string) {
	o.PaymentDate = &v
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetPaymentId() string {
	if o == nil || IsNil(o.PaymentId) {
		var ret string
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetPaymentIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given string and assigns it to the PaymentId field.
func (o *CommissionPaymentInfo) SetPaymentId(v string) {
	o.PaymentId = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetPaymentMethod() string {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret string
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetPaymentMethodOk() (*string, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given string and assigns it to the PaymentMethod field.
func (o *CommissionPaymentInfo) SetPaymentMethod(v string) {
	o.PaymentMethod = &v
}

// GetRemarks returns the Remarks field value if set, zero value otherwise.
func (o *CommissionPaymentInfo) GetRemarks() string {
	if o == nil || IsNil(o.Remarks) {
		var ret string
		return ret
	}
	return *o.Remarks
}

// GetRemarksOk returns a tuple with the Remarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionPaymentInfo) GetRemarksOk() (*string, bool) {
	if o == nil || IsNil(o.Remarks) {
		return nil, false
	}
	return o.Remarks, true
}

// HasRemarks returns a boolean if a field has been set.
func (o *CommissionPaymentInfo) HasRemarks() bool {
	if o != nil && !IsNil(o.Remarks) {
		return true
	}

	return false
}

// SetRemarks gets a reference to the given string and assigns it to the Remarks field.
func (o *CommissionPaymentInfo) SetRemarks(v string) {
	o.Remarks = &v
}

func (o CommissionPaymentInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionPaymentInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}
	if !IsNil(o.CheckNo) {
		toSerialize["checkNo"] = o.CheckNo
	}
	if !IsNil(o.CommissionAmount) {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if !IsNil(o.CommissionStatus) {
		toSerialize["commissionStatus"] = o.CommissionStatus
	}
	if !IsNil(o.PaymentDate) {
		toSerialize["paymentDate"] = o.PaymentDate
	}
	if !IsNil(o.PaymentId) {
		toSerialize["paymentId"] = o.PaymentId
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	if !IsNil(o.Remarks) {
		toSerialize["remarks"] = o.Remarks
	}
	return toSerialize, nil
}

type NullableCommissionPaymentInfo struct {
	value *CommissionPaymentInfo
	isSet bool
}

func (v NullableCommissionPaymentInfo) Get() *CommissionPaymentInfo {
	return v.value
}

func (v *NullableCommissionPaymentInfo) Set(val *CommissionPaymentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionPaymentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionPaymentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionPaymentInfo(val *CommissionPaymentInfo) *NullableCommissionPaymentInfo {
	return &NullableCommissionPaymentInfo{value: val, isSet: true}
}

func (v NullableCommissionPaymentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionPaymentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


