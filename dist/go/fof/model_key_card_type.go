/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// KeyCardType Key card types.
type KeyCardType string

// List of keyCardType
const (
	KEYCARDTYPE_MIFARE1_K KeyCardType = "Mifare1K"
	KEYCARDTYPE_MIFARE4_K KeyCardType = "Mifare4K"
	KEYCARDTYPE_MIFARE_ULTRALIGHT KeyCardType = "MifareUltralight"
)

// All allowed values of KeyCardType enum
var AllowedKeyCardTypeEnumValues = []KeyCardType{
	"Mifare1K",
	"Mifare4K",
	"MifareUltralight",
}

func (v *KeyCardType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyCardType(value)
	for _, existing := range AllowedKeyCardTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyCardType", value)
}

// NewKeyCardTypeFromValue returns a pointer to a valid KeyCardType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyCardTypeFromValue(v string) (*KeyCardType, error) {
	ev := KeyCardType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyCardType: valid values are %v", v, AllowedKeyCardTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyCardType) IsValid() bool {
	for _, existing := range AllowedKeyCardTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to keyCardType value
func (v KeyCardType) Ptr() *KeyCardType {
	return &v
}

type NullableKeyCardType struct {
	value *KeyCardType
	isSet bool
}

func (v NullableKeyCardType) Get() *KeyCardType {
	return v.value
}

func (v *NullableKeyCardType) Set(val *KeyCardType) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyCardType) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyCardType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyCardType(val *KeyCardType) *NullableKeyCardType {
	return &NullableKeyCardType{value: val, isSet: true}
}

func (v NullableKeyCardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyCardType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

