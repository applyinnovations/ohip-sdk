/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoomKeyInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomKeyInfoType{}

// RoomKeyInfoType Contains detail information of room keys .
type RoomKeyInfoType struct {
	// Name of the resort .
	HotelId *string `json:"hotelId,omitempty"`
	// Number of keys has been created for the reservation .
	KeyCount *string `json:"keyCount,omitempty"`
	// Start date and time of the key.
	KeyStartDate *string `json:"keyStartDate,omitempty"`
	// Expiry date and time of the key.
	KeyExpiryDate *string `json:"keyExpiryDate,omitempty"`
	// PIN provided in keyTrack3 from the Door Lock System that is used to unlock a room. This is supported when Key Pin handling is active for the property and the Door Lock System in use.
	KeyPin *string `json:"keyPin,omitempty"`
	KeyOptions []string `json:"keyOptions,omitempty"`
	AdditionalRooms []string `json:"additionalRooms,omitempty"`
	// Room Number.
	RoomId *string `json:"roomId,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	KeyTrack *KeyTrackType `json:"keyTrack,omitempty"`
	GuestInfo *RoomKeyGuest `json:"guestInfo,omitempty"`
	// Flag indicates whether the key is back to back.
	BackToBackKey *bool `json:"backToBackKey,omitempty"`
}

// NewRoomKeyInfoType instantiates a new RoomKeyInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomKeyInfoType() *RoomKeyInfoType {
	this := RoomKeyInfoType{}
	return &this
}

// NewRoomKeyInfoTypeWithDefaults instantiates a new RoomKeyInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomKeyInfoTypeWithDefaults() *RoomKeyInfoType {
	this := RoomKeyInfoType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomKeyInfoType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetKeyCount returns the KeyCount field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetKeyCount() string {
	if o == nil || IsNil(o.KeyCount) {
		var ret string
		return ret
	}
	return *o.KeyCount
}

// GetKeyCountOk returns a tuple with the KeyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetKeyCountOk() (*string, bool) {
	if o == nil || IsNil(o.KeyCount) {
		return nil, false
	}
	return o.KeyCount, true
}

// HasKeyCount returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasKeyCount() bool {
	if o != nil && !IsNil(o.KeyCount) {
		return true
	}

	return false
}

// SetKeyCount gets a reference to the given string and assigns it to the KeyCount field.
func (o *RoomKeyInfoType) SetKeyCount(v string) {
	o.KeyCount = &v
}

// GetKeyStartDate returns the KeyStartDate field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetKeyStartDate() string {
	if o == nil || IsNil(o.KeyStartDate) {
		var ret string
		return ret
	}
	return *o.KeyStartDate
}

// GetKeyStartDateOk returns a tuple with the KeyStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetKeyStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.KeyStartDate) {
		return nil, false
	}
	return o.KeyStartDate, true
}

// HasKeyStartDate returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasKeyStartDate() bool {
	if o != nil && !IsNil(o.KeyStartDate) {
		return true
	}

	return false
}

// SetKeyStartDate gets a reference to the given string and assigns it to the KeyStartDate field.
func (o *RoomKeyInfoType) SetKeyStartDate(v string) {
	o.KeyStartDate = &v
}

// GetKeyExpiryDate returns the KeyExpiryDate field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetKeyExpiryDate() string {
	if o == nil || IsNil(o.KeyExpiryDate) {
		var ret string
		return ret
	}
	return *o.KeyExpiryDate
}

// GetKeyExpiryDateOk returns a tuple with the KeyExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetKeyExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.KeyExpiryDate) {
		return nil, false
	}
	return o.KeyExpiryDate, true
}

// HasKeyExpiryDate returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasKeyExpiryDate() bool {
	if o != nil && !IsNil(o.KeyExpiryDate) {
		return true
	}

	return false
}

// SetKeyExpiryDate gets a reference to the given string and assigns it to the KeyExpiryDate field.
func (o *RoomKeyInfoType) SetKeyExpiryDate(v string) {
	o.KeyExpiryDate = &v
}

// GetKeyPin returns the KeyPin field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetKeyPin() string {
	if o == nil || IsNil(o.KeyPin) {
		var ret string
		return ret
	}
	return *o.KeyPin
}

// GetKeyPinOk returns a tuple with the KeyPin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetKeyPinOk() (*string, bool) {
	if o == nil || IsNil(o.KeyPin) {
		return nil, false
	}
	return o.KeyPin, true
}

// HasKeyPin returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasKeyPin() bool {
	if o != nil && !IsNil(o.KeyPin) {
		return true
	}

	return false
}

// SetKeyPin gets a reference to the given string and assigns it to the KeyPin field.
func (o *RoomKeyInfoType) SetKeyPin(v string) {
	o.KeyPin = &v
}

// GetKeyOptions returns the KeyOptions field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetKeyOptions() []string {
	if o == nil || IsNil(o.KeyOptions) {
		var ret []string
		return ret
	}
	return o.KeyOptions
}

// GetKeyOptionsOk returns a tuple with the KeyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetKeyOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyOptions) {
		return nil, false
	}
	return o.KeyOptions, true
}

// HasKeyOptions returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasKeyOptions() bool {
	if o != nil && !IsNil(o.KeyOptions) {
		return true
	}

	return false
}

// SetKeyOptions gets a reference to the given []string and assigns it to the KeyOptions field.
func (o *RoomKeyInfoType) SetKeyOptions(v []string) {
	o.KeyOptions = v
}

// GetAdditionalRooms returns the AdditionalRooms field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetAdditionalRooms() []string {
	if o == nil || IsNil(o.AdditionalRooms) {
		var ret []string
		return ret
	}
	return o.AdditionalRooms
}

// GetAdditionalRoomsOk returns a tuple with the AdditionalRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetAdditionalRoomsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalRooms) {
		return nil, false
	}
	return o.AdditionalRooms, true
}

// HasAdditionalRooms returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasAdditionalRooms() bool {
	if o != nil && !IsNil(o.AdditionalRooms) {
		return true
	}

	return false
}

// SetAdditionalRooms gets a reference to the given []string and assigns it to the AdditionalRooms field.
func (o *RoomKeyInfoType) SetAdditionalRooms(v []string) {
	o.AdditionalRooms = v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *RoomKeyInfoType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *RoomKeyInfoType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetKeyTrack returns the KeyTrack field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetKeyTrack() KeyTrackType {
	if o == nil || IsNil(o.KeyTrack) {
		var ret KeyTrackType
		return ret
	}
	return *o.KeyTrack
}

// GetKeyTrackOk returns a tuple with the KeyTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetKeyTrackOk() (*KeyTrackType, bool) {
	if o == nil || IsNil(o.KeyTrack) {
		return nil, false
	}
	return o.KeyTrack, true
}

// HasKeyTrack returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasKeyTrack() bool {
	if o != nil && !IsNil(o.KeyTrack) {
		return true
	}

	return false
}

// SetKeyTrack gets a reference to the given KeyTrackType and assigns it to the KeyTrack field.
func (o *RoomKeyInfoType) SetKeyTrack(v KeyTrackType) {
	o.KeyTrack = &v
}

// GetGuestInfo returns the GuestInfo field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetGuestInfo() RoomKeyGuest {
	if o == nil || IsNil(o.GuestInfo) {
		var ret RoomKeyGuest
		return ret
	}
	return *o.GuestInfo
}

// GetGuestInfoOk returns a tuple with the GuestInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetGuestInfoOk() (*RoomKeyGuest, bool) {
	if o == nil || IsNil(o.GuestInfo) {
		return nil, false
	}
	return o.GuestInfo, true
}

// HasGuestInfo returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasGuestInfo() bool {
	if o != nil && !IsNil(o.GuestInfo) {
		return true
	}

	return false
}

// SetGuestInfo gets a reference to the given RoomKeyGuest and assigns it to the GuestInfo field.
func (o *RoomKeyInfoType) SetGuestInfo(v RoomKeyGuest) {
	o.GuestInfo = &v
}

// GetBackToBackKey returns the BackToBackKey field value if set, zero value otherwise.
func (o *RoomKeyInfoType) GetBackToBackKey() bool {
	if o == nil || IsNil(o.BackToBackKey) {
		var ret bool
		return ret
	}
	return *o.BackToBackKey
}

// GetBackToBackKeyOk returns a tuple with the BackToBackKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyInfoType) GetBackToBackKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.BackToBackKey) {
		return nil, false
	}
	return o.BackToBackKey, true
}

// HasBackToBackKey returns a boolean if a field has been set.
func (o *RoomKeyInfoType) HasBackToBackKey() bool {
	if o != nil && !IsNil(o.BackToBackKey) {
		return true
	}

	return false
}

// SetBackToBackKey gets a reference to the given bool and assigns it to the BackToBackKey field.
func (o *RoomKeyInfoType) SetBackToBackKey(v bool) {
	o.BackToBackKey = &v
}

func (o RoomKeyInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomKeyInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.KeyCount) {
		toSerialize["keyCount"] = o.KeyCount
	}
	if !IsNil(o.KeyStartDate) {
		toSerialize["keyStartDate"] = o.KeyStartDate
	}
	if !IsNil(o.KeyExpiryDate) {
		toSerialize["keyExpiryDate"] = o.KeyExpiryDate
	}
	if !IsNil(o.KeyPin) {
		toSerialize["keyPin"] = o.KeyPin
	}
	if !IsNil(o.KeyOptions) {
		toSerialize["keyOptions"] = o.KeyOptions
	}
	if !IsNil(o.AdditionalRooms) {
		toSerialize["additionalRooms"] = o.AdditionalRooms
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.KeyTrack) {
		toSerialize["keyTrack"] = o.KeyTrack
	}
	if !IsNil(o.GuestInfo) {
		toSerialize["guestInfo"] = o.GuestInfo
	}
	if !IsNil(o.BackToBackKey) {
		toSerialize["backToBackKey"] = o.BackToBackKey
	}
	return toSerialize, nil
}

type NullableRoomKeyInfoType struct {
	value *RoomKeyInfoType
	isSet bool
}

func (v NullableRoomKeyInfoType) Get() *RoomKeyInfoType {
	return v.value
}

func (v *NullableRoomKeyInfoType) Set(val *RoomKeyInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomKeyInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomKeyInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomKeyInfoType(val *RoomKeyInfoType) *NullableRoomKeyInfoType {
	return &NullableRoomKeyInfoType{value: val, isSet: true}
}

func (v NullableRoomKeyInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomKeyInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


