/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the HousekeepingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HousekeepingType{}

// HousekeepingType Identifies the Housekeeping information.
type HousekeepingType struct {
	CleaningPriority *RoomCleaningPriorityType `json:"cleaningPriority,omitempty"`
	FacilityTaskCode []string `json:"facilityTaskCode,omitempty"`
	GuestServiceRequest *GuestHousekeepingServiceRequestType `json:"guestServiceRequest,omitempty"`
	// Indicates if a linen change is necessary.
	LinenChange *bool `json:"linenChange,omitempty"`
	RoomCondition *RoomConditionType `json:"roomCondition,omitempty"`
	RoomPersons *RoomPersonsType `json:"roomPersons,omitempty"`
	RoomStatus *RoomStatusType `json:"roomStatus,omitempty"`
}

// NewHousekeepingType instantiates a new HousekeepingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHousekeepingType() *HousekeepingType {
	this := HousekeepingType{}
	return &this
}

// NewHousekeepingTypeWithDefaults instantiates a new HousekeepingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHousekeepingTypeWithDefaults() *HousekeepingType {
	this := HousekeepingType{}
	return &this
}

// GetCleaningPriority returns the CleaningPriority field value if set, zero value otherwise.
func (o *HousekeepingType) GetCleaningPriority() RoomCleaningPriorityType {
	if o == nil || IsNil(o.CleaningPriority) {
		var ret RoomCleaningPriorityType
		return ret
	}
	return *o.CleaningPriority
}

// GetCleaningPriorityOk returns a tuple with the CleaningPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingType) GetCleaningPriorityOk() (*RoomCleaningPriorityType, bool) {
	if o == nil || IsNil(o.CleaningPriority) {
		return nil, false
	}
	return o.CleaningPriority, true
}

// HasCleaningPriority returns a boolean if a field has been set.
func (o *HousekeepingType) HasCleaningPriority() bool {
	if o != nil && !IsNil(o.CleaningPriority) {
		return true
	}

	return false
}

// SetCleaningPriority gets a reference to the given RoomCleaningPriorityType and assigns it to the CleaningPriority field.
func (o *HousekeepingType) SetCleaningPriority(v RoomCleaningPriorityType) {
	o.CleaningPriority = &v
}

// GetFacilityTaskCode returns the FacilityTaskCode field value if set, zero value otherwise.
func (o *HousekeepingType) GetFacilityTaskCode() []string {
	if o == nil || IsNil(o.FacilityTaskCode) {
		var ret []string
		return ret
	}
	return o.FacilityTaskCode
}

// GetFacilityTaskCodeOk returns a tuple with the FacilityTaskCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingType) GetFacilityTaskCodeOk() ([]string, bool) {
	if o == nil || IsNil(o.FacilityTaskCode) {
		return nil, false
	}
	return o.FacilityTaskCode, true
}

// HasFacilityTaskCode returns a boolean if a field has been set.
func (o *HousekeepingType) HasFacilityTaskCode() bool {
	if o != nil && !IsNil(o.FacilityTaskCode) {
		return true
	}

	return false
}

// SetFacilityTaskCode gets a reference to the given []string and assigns it to the FacilityTaskCode field.
func (o *HousekeepingType) SetFacilityTaskCode(v []string) {
	o.FacilityTaskCode = v
}

// GetGuestServiceRequest returns the GuestServiceRequest field value if set, zero value otherwise.
func (o *HousekeepingType) GetGuestServiceRequest() GuestHousekeepingServiceRequestType {
	if o == nil || IsNil(o.GuestServiceRequest) {
		var ret GuestHousekeepingServiceRequestType
		return ret
	}
	return *o.GuestServiceRequest
}

// GetGuestServiceRequestOk returns a tuple with the GuestServiceRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingType) GetGuestServiceRequestOk() (*GuestHousekeepingServiceRequestType, bool) {
	if o == nil || IsNil(o.GuestServiceRequest) {
		return nil, false
	}
	return o.GuestServiceRequest, true
}

// HasGuestServiceRequest returns a boolean if a field has been set.
func (o *HousekeepingType) HasGuestServiceRequest() bool {
	if o != nil && !IsNil(o.GuestServiceRequest) {
		return true
	}

	return false
}

// SetGuestServiceRequest gets a reference to the given GuestHousekeepingServiceRequestType and assigns it to the GuestServiceRequest field.
func (o *HousekeepingType) SetGuestServiceRequest(v GuestHousekeepingServiceRequestType) {
	o.GuestServiceRequest = &v
}

// GetLinenChange returns the LinenChange field value if set, zero value otherwise.
func (o *HousekeepingType) GetLinenChange() bool {
	if o == nil || IsNil(o.LinenChange) {
		var ret bool
		return ret
	}
	return *o.LinenChange
}

// GetLinenChangeOk returns a tuple with the LinenChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingType) GetLinenChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.LinenChange) {
		return nil, false
	}
	return o.LinenChange, true
}

// HasLinenChange returns a boolean if a field has been set.
func (o *HousekeepingType) HasLinenChange() bool {
	if o != nil && !IsNil(o.LinenChange) {
		return true
	}

	return false
}

// SetLinenChange gets a reference to the given bool and assigns it to the LinenChange field.
func (o *HousekeepingType) SetLinenChange(v bool) {
	o.LinenChange = &v
}

// GetRoomCondition returns the RoomCondition field value if set, zero value otherwise.
func (o *HousekeepingType) GetRoomCondition() RoomConditionType {
	if o == nil || IsNil(o.RoomCondition) {
		var ret RoomConditionType
		return ret
	}
	return *o.RoomCondition
}

// GetRoomConditionOk returns a tuple with the RoomCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingType) GetRoomConditionOk() (*RoomConditionType, bool) {
	if o == nil || IsNil(o.RoomCondition) {
		return nil, false
	}
	return o.RoomCondition, true
}

// HasRoomCondition returns a boolean if a field has been set.
func (o *HousekeepingType) HasRoomCondition() bool {
	if o != nil && !IsNil(o.RoomCondition) {
		return true
	}

	return false
}

// SetRoomCondition gets a reference to the given RoomConditionType and assigns it to the RoomCondition field.
func (o *HousekeepingType) SetRoomCondition(v RoomConditionType) {
	o.RoomCondition = &v
}

// GetRoomPersons returns the RoomPersons field value if set, zero value otherwise.
func (o *HousekeepingType) GetRoomPersons() RoomPersonsType {
	if o == nil || IsNil(o.RoomPersons) {
		var ret RoomPersonsType
		return ret
	}
	return *o.RoomPersons
}

// GetRoomPersonsOk returns a tuple with the RoomPersons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingType) GetRoomPersonsOk() (*RoomPersonsType, bool) {
	if o == nil || IsNil(o.RoomPersons) {
		return nil, false
	}
	return o.RoomPersons, true
}

// HasRoomPersons returns a boolean if a field has been set.
func (o *HousekeepingType) HasRoomPersons() bool {
	if o != nil && !IsNil(o.RoomPersons) {
		return true
	}

	return false
}

// SetRoomPersons gets a reference to the given RoomPersonsType and assigns it to the RoomPersons field.
func (o *HousekeepingType) SetRoomPersons(v RoomPersonsType) {
	o.RoomPersons = &v
}

// GetRoomStatus returns the RoomStatus field value if set, zero value otherwise.
func (o *HousekeepingType) GetRoomStatus() RoomStatusType {
	if o == nil || IsNil(o.RoomStatus) {
		var ret RoomStatusType
		return ret
	}
	return *o.RoomStatus
}

// GetRoomStatusOk returns a tuple with the RoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HousekeepingType) GetRoomStatusOk() (*RoomStatusType, bool) {
	if o == nil || IsNil(o.RoomStatus) {
		return nil, false
	}
	return o.RoomStatus, true
}

// HasRoomStatus returns a boolean if a field has been set.
func (o *HousekeepingType) HasRoomStatus() bool {
	if o != nil && !IsNil(o.RoomStatus) {
		return true
	}

	return false
}

// SetRoomStatus gets a reference to the given RoomStatusType and assigns it to the RoomStatus field.
func (o *HousekeepingType) SetRoomStatus(v RoomStatusType) {
	o.RoomStatus = &v
}

func (o HousekeepingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HousekeepingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CleaningPriority) {
		toSerialize["cleaningPriority"] = o.CleaningPriority
	}
	if !IsNil(o.FacilityTaskCode) {
		toSerialize["facilityTaskCode"] = o.FacilityTaskCode
	}
	if !IsNil(o.GuestServiceRequest) {
		toSerialize["guestServiceRequest"] = o.GuestServiceRequest
	}
	if !IsNil(o.LinenChange) {
		toSerialize["linenChange"] = o.LinenChange
	}
	if !IsNil(o.RoomCondition) {
		toSerialize["roomCondition"] = o.RoomCondition
	}
	if !IsNil(o.RoomPersons) {
		toSerialize["roomPersons"] = o.RoomPersons
	}
	if !IsNil(o.RoomStatus) {
		toSerialize["roomStatus"] = o.RoomStatus
	}
	return toSerialize, nil
}

type NullableHousekeepingType struct {
	value *HousekeepingType
	isSet bool
}

func (v NullableHousekeepingType) Get() *HousekeepingType {
	return v.value
}

func (v *NullableHousekeepingType) Set(val *HousekeepingType) {
	v.value = val
	v.isSet = true
}

func (v NullableHousekeepingType) IsSet() bool {
	return v.isSet
}

func (v *NullableHousekeepingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHousekeepingType(val *HousekeepingType) *NullableHousekeepingType {
	return &NullableHousekeepingType{value: val, isSet: true}
}

func (v NullableHousekeepingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHousekeepingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


