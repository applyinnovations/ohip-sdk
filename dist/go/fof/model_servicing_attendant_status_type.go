/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// ServicingAttendantStatusType Possible values for the Status of a Servicing Attendant.
type ServicingAttendantStatusType string

// List of servicingAttendantStatusType
const (
	SERVICINGATTENDANTSTATUSTYPE_STANDBY ServicingAttendantStatusType = "Standby"
	SERVICINGATTENDANTSTATUSTYPE_BREAK ServicingAttendantStatusType = "Break"
	SERVICINGATTENDANTSTATUSTYPE_WORKING ServicingAttendantStatusType = "Working"
	SERVICINGATTENDANTSTATUSTYPE_COMPLETED ServicingAttendantStatusType = "Completed"
)

// All allowed values of ServicingAttendantStatusType enum
var AllowedServicingAttendantStatusTypeEnumValues = []ServicingAttendantStatusType{
	"Standby",
	"Break",
	"Working",
	"Completed",
}

func (v *ServicingAttendantStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServicingAttendantStatusType(value)
	for _, existing := range AllowedServicingAttendantStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServicingAttendantStatusType", value)
}

// NewServicingAttendantStatusTypeFromValue returns a pointer to a valid ServicingAttendantStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServicingAttendantStatusTypeFromValue(v string) (*ServicingAttendantStatusType, error) {
	ev := ServicingAttendantStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServicingAttendantStatusType: valid values are %v", v, AllowedServicingAttendantStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServicingAttendantStatusType) IsValid() bool {
	for _, existing := range AllowedServicingAttendantStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to servicingAttendantStatusType value
func (v ServicingAttendantStatusType) Ptr() *ServicingAttendantStatusType {
	return &v
}

type NullableServicingAttendantStatusType struct {
	value *ServicingAttendantStatusType
	isSet bool
}

func (v NullableServicingAttendantStatusType) Get() *ServicingAttendantStatusType {
	return v.value
}

func (v *NullableServicingAttendantStatusType) Set(val *ServicingAttendantStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableServicingAttendantStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableServicingAttendantStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicingAttendantStatusType(val *ServicingAttendantStatusType) *NullableServicingAttendantStatusType {
	return &NullableServicingAttendantStatusType{value: val, isSet: true}
}

func (v NullableServicingAttendantStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicingAttendantStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

