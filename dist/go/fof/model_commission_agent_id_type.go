/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the CommissionAgentIDType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionAgentIDType{}

// CommissionAgentIDType Type which contains the Commission Agent id and its type.
type CommissionAgentIDType struct {
	CommissionAgentType *CommissionAgentTypeType `json:"commissionAgentType,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// A reference to the type of object defined by the UniqueID element.
	Type *string `json:"type,omitempty"`
}

// NewCommissionAgentIDType instantiates a new CommissionAgentIDType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionAgentIDType() *CommissionAgentIDType {
	this := CommissionAgentIDType{}
	return &this
}

// NewCommissionAgentIDTypeWithDefaults instantiates a new CommissionAgentIDType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionAgentIDTypeWithDefaults() *CommissionAgentIDType {
	this := CommissionAgentIDType{}
	return &this
}

// GetCommissionAgentType returns the CommissionAgentType field value if set, zero value otherwise.
func (o *CommissionAgentIDType) GetCommissionAgentType() CommissionAgentTypeType {
	if o == nil || IsNil(o.CommissionAgentType) {
		var ret CommissionAgentTypeType
		return ret
	}
	return *o.CommissionAgentType
}

// GetCommissionAgentTypeOk returns a tuple with the CommissionAgentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionAgentIDType) GetCommissionAgentTypeOk() (*CommissionAgentTypeType, bool) {
	if o == nil || IsNil(o.CommissionAgentType) {
		return nil, false
	}
	return o.CommissionAgentType, true
}

// HasCommissionAgentType returns a boolean if a field has been set.
func (o *CommissionAgentIDType) HasCommissionAgentType() bool {
	if o != nil && !IsNil(o.CommissionAgentType) {
		return true
	}

	return false
}

// SetCommissionAgentType gets a reference to the given CommissionAgentTypeType and assigns it to the CommissionAgentType field.
func (o *CommissionAgentIDType) SetCommissionAgentType(v CommissionAgentTypeType) {
	o.CommissionAgentType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CommissionAgentIDType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionAgentIDType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CommissionAgentIDType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CommissionAgentIDType) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CommissionAgentIDType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionAgentIDType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CommissionAgentIDType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CommissionAgentIDType) SetType(v string) {
	o.Type = &v
}

func (o CommissionAgentIDType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionAgentIDType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommissionAgentType) {
		toSerialize["commissionAgentType"] = o.CommissionAgentType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCommissionAgentIDType struct {
	value *CommissionAgentIDType
	isSet bool
}

func (v NullableCommissionAgentIDType) Get() *CommissionAgentIDType {
	return v.value
}

func (v *NullableCommissionAgentIDType) Set(val *CommissionAgentIDType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionAgentIDType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionAgentIDType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionAgentIDType(val *CommissionAgentIDType) *NullableCommissionAgentIDType {
	return &NullableCommissionAgentIDType{value: val, isSet: true}
}

func (v NullableCommissionAgentIDType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionAgentIDType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


