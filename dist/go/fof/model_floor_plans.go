/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the FloorPlans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FloorPlans{}

// FloorPlans Response object to the Fetch Reservation Request operation. Based on the criteria, reservation information is returned.
type FloorPlans struct {
	FloorPlansDetails []FloorPlanType `json:"floorPlansDetails,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewFloorPlans instantiates a new FloorPlans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFloorPlans() *FloorPlans {
	this := FloorPlans{}
	return &this
}

// NewFloorPlansWithDefaults instantiates a new FloorPlans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFloorPlansWithDefaults() *FloorPlans {
	this := FloorPlans{}
	return &this
}

// GetFloorPlansDetails returns the FloorPlansDetails field value if set, zero value otherwise.
func (o *FloorPlans) GetFloorPlansDetails() []FloorPlanType {
	if o == nil || IsNil(o.FloorPlansDetails) {
		var ret []FloorPlanType
		return ret
	}
	return o.FloorPlansDetails
}

// GetFloorPlansDetailsOk returns a tuple with the FloorPlansDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloorPlans) GetFloorPlansDetailsOk() ([]FloorPlanType, bool) {
	if o == nil || IsNil(o.FloorPlansDetails) {
		return nil, false
	}
	return o.FloorPlansDetails, true
}

// HasFloorPlansDetails returns a boolean if a field has been set.
func (o *FloorPlans) HasFloorPlansDetails() bool {
	if o != nil && !IsNil(o.FloorPlansDetails) {
		return true
	}

	return false
}

// SetFloorPlansDetails gets a reference to the given []FloorPlanType and assigns it to the FloorPlansDetails field.
func (o *FloorPlans) SetFloorPlansDetails(v []FloorPlanType) {
	o.FloorPlansDetails = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FloorPlans) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloorPlans) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FloorPlans) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *FloorPlans) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *FloorPlans) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloorPlans) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *FloorPlans) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *FloorPlans) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o FloorPlans) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FloorPlans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FloorPlansDetails) {
		toSerialize["floorPlansDetails"] = o.FloorPlansDetails
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableFloorPlans struct {
	value *FloorPlans
	isSet bool
}

func (v NullableFloorPlans) Get() *FloorPlans {
	return v.value
}

func (v *NullableFloorPlans) Set(val *FloorPlans) {
	v.value = val
	v.isSet = true
}

func (v NullableFloorPlans) IsSet() bool {
	return v.isSet
}

func (v *NullableFloorPlans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFloorPlans(val *FloorPlans) *NullableFloorPlans {
	return &NullableFloorPlans{value: val, isSet: true}
}

func (v NullableFloorPlans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFloorPlans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


