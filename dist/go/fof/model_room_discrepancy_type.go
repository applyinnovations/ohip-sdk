/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// RoomDiscrepancyType Simple type for discrepant room status instructions to be used in requests for fetching housekeeping and front office room discrepancy. Valid values are Sleep, Skip, Person Discrepancy, Due Out Only.
type RoomDiscrepancyType string

// List of roomDiscrepancyType
const (
	ROOMDISCREPANCYTYPE_SLEEP RoomDiscrepancyType = "Sleep"
	ROOMDISCREPANCYTYPE_SKIP RoomDiscrepancyType = "Skip"
	ROOMDISCREPANCYTYPE_PERSON_DISCREPANCY RoomDiscrepancyType = "PersonDiscrepancy"
)

// All allowed values of RoomDiscrepancyType enum
var AllowedRoomDiscrepancyTypeEnumValues = []RoomDiscrepancyType{
	"Sleep",
	"Skip",
	"PersonDiscrepancy",
}

func (v *RoomDiscrepancyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoomDiscrepancyType(value)
	for _, existing := range AllowedRoomDiscrepancyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoomDiscrepancyType", value)
}

// NewRoomDiscrepancyTypeFromValue returns a pointer to a valid RoomDiscrepancyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoomDiscrepancyTypeFromValue(v string) (*RoomDiscrepancyType, error) {
	ev := RoomDiscrepancyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoomDiscrepancyType: valid values are %v", v, AllowedRoomDiscrepancyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoomDiscrepancyType) IsValid() bool {
	for _, existing := range AllowedRoomDiscrepancyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to roomDiscrepancyType value
func (v RoomDiscrepancyType) Ptr() *RoomDiscrepancyType {
	return &v
}

type NullableRoomDiscrepancyType struct {
	value *RoomDiscrepancyType
	isSet bool
}

func (v NullableRoomDiscrepancyType) Get() *RoomDiscrepancyType {
	return v.value
}

func (v *NullableRoomDiscrepancyType) Set(val *RoomDiscrepancyType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomDiscrepancyType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomDiscrepancyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomDiscrepancyType(val *RoomDiscrepancyType) *NullableRoomDiscrepancyType {
	return &NullableRoomDiscrepancyType{value: val, isSet: true}
}

func (v NullableRoomDiscrepancyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomDiscrepancyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

