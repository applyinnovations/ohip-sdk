/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the HotelReservationTypeCancellation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HotelReservationTypeCancellation{}

// HotelReservationTypeCancellation Information regarding why reservation has been/was cancelled. This could hold information as history even if reservation is no more in in Cancelled status.
type HotelReservationTypeCancellation struct {
	CancellationNo *UniqueIDType `json:"cancellationNo,omitempty"`
	Code *string `json:"code,omitempty"`
	// Date when reservation was last cancelled.
	Date *string `json:"date,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewHotelReservationTypeCancellation instantiates a new HotelReservationTypeCancellation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotelReservationTypeCancellation() *HotelReservationTypeCancellation {
	this := HotelReservationTypeCancellation{}
	return &this
}

// NewHotelReservationTypeCancellationWithDefaults instantiates a new HotelReservationTypeCancellation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotelReservationTypeCancellationWithDefaults() *HotelReservationTypeCancellation {
	this := HotelReservationTypeCancellation{}
	return &this
}

// GetCancellationNo returns the CancellationNo field value if set, zero value otherwise.
func (o *HotelReservationTypeCancellation) GetCancellationNo() UniqueIDType {
	if o == nil || IsNil(o.CancellationNo) {
		var ret UniqueIDType
		return ret
	}
	return *o.CancellationNo
}

// GetCancellationNoOk returns a tuple with the CancellationNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelReservationTypeCancellation) GetCancellationNoOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.CancellationNo) {
		return nil, false
	}
	return o.CancellationNo, true
}

// HasCancellationNo returns a boolean if a field has been set.
func (o *HotelReservationTypeCancellation) HasCancellationNo() bool {
	if o != nil && !IsNil(o.CancellationNo) {
		return true
	}

	return false
}

// SetCancellationNo gets a reference to the given UniqueIDType and assigns it to the CancellationNo field.
func (o *HotelReservationTypeCancellation) SetCancellationNo(v UniqueIDType) {
	o.CancellationNo = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *HotelReservationTypeCancellation) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelReservationTypeCancellation) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *HotelReservationTypeCancellation) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *HotelReservationTypeCancellation) SetCode(v string) {
	o.Code = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HotelReservationTypeCancellation) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelReservationTypeCancellation) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HotelReservationTypeCancellation) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *HotelReservationTypeCancellation) SetDate(v string) {
	o.Date = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HotelReservationTypeCancellation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HotelReservationTypeCancellation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HotelReservationTypeCancellation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HotelReservationTypeCancellation) SetDescription(v string) {
	o.Description = &v
}

func (o HotelReservationTypeCancellation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HotelReservationTypeCancellation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancellationNo) {
		toSerialize["cancellationNo"] = o.CancellationNo
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableHotelReservationTypeCancellation struct {
	value *HotelReservationTypeCancellation
	isSet bool
}

func (v NullableHotelReservationTypeCancellation) Get() *HotelReservationTypeCancellation {
	return v.value
}

func (v *NullableHotelReservationTypeCancellation) Set(val *HotelReservationTypeCancellation) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelReservationTypeCancellation) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelReservationTypeCancellation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelReservationTypeCancellation(val *HotelReservationTypeCancellation) *NullableHotelReservationTypeCancellation {
	return &NullableHotelReservationTypeCancellation{value: val, isSet: true}
}

func (v NullableHotelReservationTypeCancellation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelReservationTypeCancellation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


