/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// FrontOfficeRoomStatusType Simple type for front office room status instructions to be used in requests for fetching housekeeping rooms. Valid values are Vacant and Occupied.
type FrontOfficeRoomStatusType string

// List of frontOfficeRoomStatusType
const (
	FRONTOFFICEROOMSTATUSTYPE_VACANT FrontOfficeRoomStatusType = "Vacant"
	FRONTOFFICEROOMSTATUSTYPE_OCCUPIED FrontOfficeRoomStatusType = "Occupied"
)

// All allowed values of FrontOfficeRoomStatusType enum
var AllowedFrontOfficeRoomStatusTypeEnumValues = []FrontOfficeRoomStatusType{
	"Vacant",
	"Occupied",
}

func (v *FrontOfficeRoomStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FrontOfficeRoomStatusType(value)
	for _, existing := range AllowedFrontOfficeRoomStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FrontOfficeRoomStatusType", value)
}

// NewFrontOfficeRoomStatusTypeFromValue returns a pointer to a valid FrontOfficeRoomStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFrontOfficeRoomStatusTypeFromValue(v string) (*FrontOfficeRoomStatusType, error) {
	ev := FrontOfficeRoomStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FrontOfficeRoomStatusType: valid values are %v", v, AllowedFrontOfficeRoomStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FrontOfficeRoomStatusType) IsValid() bool {
	for _, existing := range AllowedFrontOfficeRoomStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to frontOfficeRoomStatusType value
func (v FrontOfficeRoomStatusType) Ptr() *FrontOfficeRoomStatusType {
	return &v
}

type NullableFrontOfficeRoomStatusType struct {
	value *FrontOfficeRoomStatusType
	isSet bool
}

func (v NullableFrontOfficeRoomStatusType) Get() *FrontOfficeRoomStatusType {
	return v.value
}

func (v *NullableFrontOfficeRoomStatusType) Set(val *FrontOfficeRoomStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableFrontOfficeRoomStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableFrontOfficeRoomStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFrontOfficeRoomStatusType(val *FrontOfficeRoomStatusType) *NullableFrontOfficeRoomStatusType {
	return &NullableFrontOfficeRoomStatusType{value: val, isSet: true}
}

func (v NullableFrontOfficeRoomStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFrontOfficeRoomStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

