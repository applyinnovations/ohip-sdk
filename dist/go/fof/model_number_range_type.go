/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the NumberRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberRangeType{}

// NumberRangeType Date Range with Start and End dates.
type NumberRangeType struct {
	// The starting value of the range of number
	From *int32 `json:"from,omitempty"`
	// The ending value of the range of number
	To *int32 `json:"to,omitempty"`
}

// NewNumberRangeType instantiates a new NumberRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberRangeType() *NumberRangeType {
	this := NumberRangeType{}
	return &this
}

// NewNumberRangeTypeWithDefaults instantiates a new NumberRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberRangeTypeWithDefaults() *NumberRangeType {
	this := NumberRangeType{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *NumberRangeType) GetFrom() int32 {
	if o == nil || IsNil(o.From) {
		var ret int32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberRangeType) GetFromOk() (*int32, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *NumberRangeType) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int32 and assigns it to the From field.
func (o *NumberRangeType) SetFrom(v int32) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *NumberRangeType) GetTo() int32 {
	if o == nil || IsNil(o.To) {
		var ret int32
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumberRangeType) GetToOk() (*int32, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *NumberRangeType) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given int32 and assigns it to the To field.
func (o *NumberRangeType) SetTo(v int32) {
	o.To = &v
}

func (o NumberRangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableNumberRangeType struct {
	value *NumberRangeType
	isSet bool
}

func (v NullableNumberRangeType) Get() *NumberRangeType {
	return v.value
}

func (v *NullableNumberRangeType) Set(val *NumberRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberRangeType(val *NumberRangeType) *NullableNumberRangeType {
	return &NullableNumberRangeType{value: val, isSet: true}
}

func (v NullableNumberRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


