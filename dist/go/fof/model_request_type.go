/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// RequestType Simple type for representing request type.
type RequestType string

// List of requestType
const (
	REQUESTTYPE_R1 RequestType = "R1"
	REQUESTTYPE_R2 RequestType = "R2"
	REQUESTTYPE_R3 RequestType = "R3"
	REQUESTTYPE_R4 RequestType = "R4"
)

// All allowed values of RequestType enum
var AllowedRequestTypeEnumValues = []RequestType{
	"R1",
	"R2",
	"R3",
	"R4",
}

func (v *RequestType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestType(value)
	for _, existing := range AllowedRequestTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestType", value)
}

// NewRequestTypeFromValue returns a pointer to a valid RequestType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestTypeFromValue(v string) (*RequestType, error) {
	ev := RequestType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestType: valid values are %v", v, AllowedRequestTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestType) IsValid() bool {
	for _, existing := range AllowedRequestTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to requestType value
func (v RequestType) Ptr() *RequestType {
	return &v
}

type NullableRequestType struct {
	value *RequestType
	isSet bool
}

func (v NullableRequestType) Get() *RequestType {
	return v.value
}

func (v *NullableRequestType) Set(val *RequestType) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestType) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestType(val *RequestType) *NullableRequestType {
	return &NullableRequestType{value: val, isSet: true}
}

func (v NullableRequestType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

