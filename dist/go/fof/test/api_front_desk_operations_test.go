/*
OPERA Cloud Front Desk Operations Service

Testing FrontDeskOperationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package fof

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/fof"
)

func Test_fof_FrontDeskOperationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FrontDeskOperationsAPIService AddReservationToQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.AddReservationToQueue(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService AssignRoomsAI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.AssignRoomsAI(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService AutoAssignRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.AutoAssignRoom(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService AutoUnAssignRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.AutoUnAssignRoom(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteAdvanceCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteAdvanceCheckIn(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteAssignRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteAssignRoom(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteCheckin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteCheckin(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var docketId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteDailyDocket(context.Background(), docketId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteReservationFromQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteReservationFromQueue(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteRoomKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteRoomKey(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var serviceRequestId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteServiceRequests(context.Background(), serviceRequestId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeleteWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeleteWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService DeliverQueueRoomsTextMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageType string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.DeliverQueueRoomsTextMessage(context.Background(), messageType, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetAiraLastRunStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetAiraLastRunStatus(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetDailyDocket(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetFloorPlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetFloorPlans(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetFulfillmentActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetFulfillmentActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetHotelRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetHotelRooms(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetKeyOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetKeyOptions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetLinkedReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetLinkedReservations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetQueueRoomsTextMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var messageType string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetQueueRoomsTextMessage(context.Background(), messageType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetReservationSummaries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetReservationSummaries(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetReservationsForBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetReservationsForBilling(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetReservationsInQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetReservationsInQueue(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetReservationsKeyOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetReservationsKeyOptions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetResvForBatchCCAuth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetResvForBatchCCAuth(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetRoomInterfaceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetRoomInterfaceStatus(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetRoomKeyInterfaceDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetRoomKeyInterfaceDetails(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetRoomKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetRoomKeys(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetRoomMoveHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetRoomMoveHistory(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetServiceRequests(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetSuggestedRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetSuggestedRooms(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService GetWakeUpCalls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.GetWakeUpCalls(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService MoveInHouseGuest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.MoveInHouseGuest(context.Background(), roomId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PlaceRoomsOnHold", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PlaceRoomsOnHold(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostAdvanceCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostAdvanceCheckIn(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostCheckIn(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostDailyDocket(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostExternalRoomKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostExternalRoomKeys(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostMassAdvanceCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostMassAdvanceCheckIn(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostMassCheckIn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostMassCheckIn(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostRoomAssignment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostRoomAssignment(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostRoomKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostRoomKey(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostRoomKeysExternal", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostRoomKeysExternal(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostServiceRequests(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PostWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PostWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService ProcessBatchCCAuth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.ProcessBatchCCAuth(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PutDailyDocket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PutDailyDocket(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PutReservationQueuePriority", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PutReservationQueuePriority(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PutRoomInterfaceStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var interfaceId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PutRoomInterfaceStatus(context.Background(), interfaceId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PutRoomKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PutRoomKeys(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PutServiceRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PutServiceRequests(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService PutWakeUpCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.PutWakeUpCall(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService ReadRoomKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.ReadRoomKey(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService ReleaseRoomsOnHold", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.ReleaseRoomsOnHold(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService ShiftRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var sourceReservationId string
		var targetReservationId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.ShiftRooms(context.Background(), hotelId, sourceReservationId, targetReservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService SwapRooms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var sourceReservationId string
		var targetReservationId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.SwapRooms(context.Background(), hotelId, sourceReservationId, targetReservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FrontDeskOperationsAPIService VerifyCheckinReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.FrontDeskOperationsAPI.VerifyCheckinReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
