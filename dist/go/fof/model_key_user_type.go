/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// KeyUserType Simple type for representing key user type. 'Guest' = request Opera Guest room key
type KeyUserType string

// List of keyUserType
const (
	KEYUSERTYPE_GUEST KeyUserType = "Guest"
)

// All allowed values of KeyUserType enum
var AllowedKeyUserTypeEnumValues = []KeyUserType{
	"Guest",
}

func (v *KeyUserType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KeyUserType(value)
	for _, existing := range AllowedKeyUserTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KeyUserType", value)
}

// NewKeyUserTypeFromValue returns a pointer to a valid KeyUserType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeyUserTypeFromValue(v string) (*KeyUserType, error) {
	ev := KeyUserType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KeyUserType: valid values are %v", v, AllowedKeyUserTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeyUserType) IsValid() bool {
	for _, existing := range AllowedKeyUserTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to keyUserType value
func (v KeyUserType) Ptr() *KeyUserType {
	return &v
}

type NullableKeyUserType struct {
	value *KeyUserType
	isSet bool
}

func (v NullableKeyUserType) Get() *KeyUserType {
	return v.value
}

func (v *NullableKeyUserType) Set(val *KeyUserType) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyUserType) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyUserType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyUserType(val *KeyUserType) *NullableKeyUserType {
	return &NullableKeyUserType{value: val, isSet: true}
}

func (v NullableKeyUserType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyUserType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

