/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the KeyTrackType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyTrackType{}

// KeyTrackType struct for KeyTrackType
type KeyTrackType struct {
	KeyTrack1 *string `json:"keyTrack1,omitempty"`
	KeyTrack2 *string `json:"keyTrack2,omitempty"`
	KeyTrack3 *string `json:"keyTrack3,omitempty"`
	KeyTrack4 *string `json:"keyTrack4,omitempty"`
}

// NewKeyTrackType instantiates a new KeyTrackType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyTrackType() *KeyTrackType {
	this := KeyTrackType{}
	return &this
}

// NewKeyTrackTypeWithDefaults instantiates a new KeyTrackType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyTrackTypeWithDefaults() *KeyTrackType {
	this := KeyTrackType{}
	return &this
}

// GetKeyTrack1 returns the KeyTrack1 field value if set, zero value otherwise.
func (o *KeyTrackType) GetKeyTrack1() string {
	if o == nil || IsNil(o.KeyTrack1) {
		var ret string
		return ret
	}
	return *o.KeyTrack1
}

// GetKeyTrack1Ok returns a tuple with the KeyTrack1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyTrackType) GetKeyTrack1Ok() (*string, bool) {
	if o == nil || IsNil(o.KeyTrack1) {
		return nil, false
	}
	return o.KeyTrack1, true
}

// HasKeyTrack1 returns a boolean if a field has been set.
func (o *KeyTrackType) HasKeyTrack1() bool {
	if o != nil && !IsNil(o.KeyTrack1) {
		return true
	}

	return false
}

// SetKeyTrack1 gets a reference to the given string and assigns it to the KeyTrack1 field.
func (o *KeyTrackType) SetKeyTrack1(v string) {
	o.KeyTrack1 = &v
}

// GetKeyTrack2 returns the KeyTrack2 field value if set, zero value otherwise.
func (o *KeyTrackType) GetKeyTrack2() string {
	if o == nil || IsNil(o.KeyTrack2) {
		var ret string
		return ret
	}
	return *o.KeyTrack2
}

// GetKeyTrack2Ok returns a tuple with the KeyTrack2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyTrackType) GetKeyTrack2Ok() (*string, bool) {
	if o == nil || IsNil(o.KeyTrack2) {
		return nil, false
	}
	return o.KeyTrack2, true
}

// HasKeyTrack2 returns a boolean if a field has been set.
func (o *KeyTrackType) HasKeyTrack2() bool {
	if o != nil && !IsNil(o.KeyTrack2) {
		return true
	}

	return false
}

// SetKeyTrack2 gets a reference to the given string and assigns it to the KeyTrack2 field.
func (o *KeyTrackType) SetKeyTrack2(v string) {
	o.KeyTrack2 = &v
}

// GetKeyTrack3 returns the KeyTrack3 field value if set, zero value otherwise.
func (o *KeyTrackType) GetKeyTrack3() string {
	if o == nil || IsNil(o.KeyTrack3) {
		var ret string
		return ret
	}
	return *o.KeyTrack3
}

// GetKeyTrack3Ok returns a tuple with the KeyTrack3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyTrackType) GetKeyTrack3Ok() (*string, bool) {
	if o == nil || IsNil(o.KeyTrack3) {
		return nil, false
	}
	return o.KeyTrack3, true
}

// HasKeyTrack3 returns a boolean if a field has been set.
func (o *KeyTrackType) HasKeyTrack3() bool {
	if o != nil && !IsNil(o.KeyTrack3) {
		return true
	}

	return false
}

// SetKeyTrack3 gets a reference to the given string and assigns it to the KeyTrack3 field.
func (o *KeyTrackType) SetKeyTrack3(v string) {
	o.KeyTrack3 = &v
}

// GetKeyTrack4 returns the KeyTrack4 field value if set, zero value otherwise.
func (o *KeyTrackType) GetKeyTrack4() string {
	if o == nil || IsNil(o.KeyTrack4) {
		var ret string
		return ret
	}
	return *o.KeyTrack4
}

// GetKeyTrack4Ok returns a tuple with the KeyTrack4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyTrackType) GetKeyTrack4Ok() (*string, bool) {
	if o == nil || IsNil(o.KeyTrack4) {
		return nil, false
	}
	return o.KeyTrack4, true
}

// HasKeyTrack4 returns a boolean if a field has been set.
func (o *KeyTrackType) HasKeyTrack4() bool {
	if o != nil && !IsNil(o.KeyTrack4) {
		return true
	}

	return false
}

// SetKeyTrack4 gets a reference to the given string and assigns it to the KeyTrack4 field.
func (o *KeyTrackType) SetKeyTrack4(v string) {
	o.KeyTrack4 = &v
}

func (o KeyTrackType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyTrackType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyTrack1) {
		toSerialize["keyTrack1"] = o.KeyTrack1
	}
	if !IsNil(o.KeyTrack2) {
		toSerialize["keyTrack2"] = o.KeyTrack2
	}
	if !IsNil(o.KeyTrack3) {
		toSerialize["keyTrack3"] = o.KeyTrack3
	}
	if !IsNil(o.KeyTrack4) {
		toSerialize["keyTrack4"] = o.KeyTrack4
	}
	return toSerialize, nil
}

type NullableKeyTrackType struct {
	value *KeyTrackType
	isSet bool
}

func (v NullableKeyTrackType) Get() *KeyTrackType {
	return v.value
}

func (v *NullableKeyTrackType) Set(val *KeyTrackType) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyTrackType) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyTrackType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyTrackType(val *KeyTrackType) *NullableKeyTrackType {
	return &NullableKeyTrackType{value: val, isSet: true}
}

func (v NullableKeyTrackType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyTrackType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


