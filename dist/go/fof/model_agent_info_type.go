/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the AgentInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentInfoType{}

// AgentInfoType Agent or source commission information.
type AgentInfoType struct {
	BankAccountId *UniqueIDType `json:"bankAccountId,omitempty"`
	AgentId *UniqueIDType `json:"agentId,omitempty"`
	// Travel agent or source profile name.
	Name *string `json:"name,omitempty"`
	// Alternate name of the agent or source profile.
	AlternateName *string `json:"alternateName,omitempty"`
	// City of the travel agency or source profile.
	City *string `json:"city,omitempty"`
	IATANo *UniqueIDType `json:"iATANo,omitempty"`
	ProfileType *ProfileTypeType `json:"profileType,omitempty"`
	CommissionCode *CommissionCodeType `json:"commissionCode,omitempty"`
	CommissionAmount *CurrencyAmountType `json:"commissionAmount,omitempty"`
	HoldReason *CodeDescriptionType `json:"holdReason,omitempty"`
	// Whether this agent/source has been paid or will be paid for commission.
	OnCommission *bool `json:"onCommission,omitempty"`
	// When set to true, commission for all the reservations associated with this agent is flagged as on hold.
	OnHold *bool `json:"onHold,omitempty"`
}

// NewAgentInfoType instantiates a new AgentInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentInfoType() *AgentInfoType {
	this := AgentInfoType{}
	return &this
}

// NewAgentInfoTypeWithDefaults instantiates a new AgentInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentInfoTypeWithDefaults() *AgentInfoType {
	this := AgentInfoType{}
	return &this
}

// GetBankAccountId returns the BankAccountId field value if set, zero value otherwise.
func (o *AgentInfoType) GetBankAccountId() UniqueIDType {
	if o == nil || IsNil(o.BankAccountId) {
		var ret UniqueIDType
		return ret
	}
	return *o.BankAccountId
}

// GetBankAccountIdOk returns a tuple with the BankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetBankAccountIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.BankAccountId) {
		return nil, false
	}
	return o.BankAccountId, true
}

// HasBankAccountId returns a boolean if a field has been set.
func (o *AgentInfoType) HasBankAccountId() bool {
	if o != nil && !IsNil(o.BankAccountId) {
		return true
	}

	return false
}

// SetBankAccountId gets a reference to the given UniqueIDType and assigns it to the BankAccountId field.
func (o *AgentInfoType) SetBankAccountId(v UniqueIDType) {
	o.BankAccountId = &v
}

// GetAgentId returns the AgentId field value if set, zero value otherwise.
func (o *AgentInfoType) GetAgentId() UniqueIDType {
	if o == nil || IsNil(o.AgentId) {
		var ret UniqueIDType
		return ret
	}
	return *o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetAgentIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.AgentId) {
		return nil, false
	}
	return o.AgentId, true
}

// HasAgentId returns a boolean if a field has been set.
func (o *AgentInfoType) HasAgentId() bool {
	if o != nil && !IsNil(o.AgentId) {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given UniqueIDType and assigns it to the AgentId field.
func (o *AgentInfoType) SetAgentId(v UniqueIDType) {
	o.AgentId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AgentInfoType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AgentInfoType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AgentInfoType) SetName(v string) {
	o.Name = &v
}

// GetAlternateName returns the AlternateName field value if set, zero value otherwise.
func (o *AgentInfoType) GetAlternateName() string {
	if o == nil || IsNil(o.AlternateName) {
		var ret string
		return ret
	}
	return *o.AlternateName
}

// GetAlternateNameOk returns a tuple with the AlternateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetAlternateNameOk() (*string, bool) {
	if o == nil || IsNil(o.AlternateName) {
		return nil, false
	}
	return o.AlternateName, true
}

// HasAlternateName returns a boolean if a field has been set.
func (o *AgentInfoType) HasAlternateName() bool {
	if o != nil && !IsNil(o.AlternateName) {
		return true
	}

	return false
}

// SetAlternateName gets a reference to the given string and assigns it to the AlternateName field.
func (o *AgentInfoType) SetAlternateName(v string) {
	o.AlternateName = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AgentInfoType) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AgentInfoType) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AgentInfoType) SetCity(v string) {
	o.City = &v
}

// GetIATANo returns the IATANo field value if set, zero value otherwise.
func (o *AgentInfoType) GetIATANo() UniqueIDType {
	if o == nil || IsNil(o.IATANo) {
		var ret UniqueIDType
		return ret
	}
	return *o.IATANo
}

// GetIATANoOk returns a tuple with the IATANo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetIATANoOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.IATANo) {
		return nil, false
	}
	return o.IATANo, true
}

// HasIATANo returns a boolean if a field has been set.
func (o *AgentInfoType) HasIATANo() bool {
	if o != nil && !IsNil(o.IATANo) {
		return true
	}

	return false
}

// SetIATANo gets a reference to the given UniqueIDType and assigns it to the IATANo field.
func (o *AgentInfoType) SetIATANo(v UniqueIDType) {
	o.IATANo = &v
}

// GetProfileType returns the ProfileType field value if set, zero value otherwise.
func (o *AgentInfoType) GetProfileType() ProfileTypeType {
	if o == nil || IsNil(o.ProfileType) {
		var ret ProfileTypeType
		return ret
	}
	return *o.ProfileType
}

// GetProfileTypeOk returns a tuple with the ProfileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetProfileTypeOk() (*ProfileTypeType, bool) {
	if o == nil || IsNil(o.ProfileType) {
		return nil, false
	}
	return o.ProfileType, true
}

// HasProfileType returns a boolean if a field has been set.
func (o *AgentInfoType) HasProfileType() bool {
	if o != nil && !IsNil(o.ProfileType) {
		return true
	}

	return false
}

// SetProfileType gets a reference to the given ProfileTypeType and assigns it to the ProfileType field.
func (o *AgentInfoType) SetProfileType(v ProfileTypeType) {
	o.ProfileType = &v
}

// GetCommissionCode returns the CommissionCode field value if set, zero value otherwise.
func (o *AgentInfoType) GetCommissionCode() CommissionCodeType {
	if o == nil || IsNil(o.CommissionCode) {
		var ret CommissionCodeType
		return ret
	}
	return *o.CommissionCode
}

// GetCommissionCodeOk returns a tuple with the CommissionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetCommissionCodeOk() (*CommissionCodeType, bool) {
	if o == nil || IsNil(o.CommissionCode) {
		return nil, false
	}
	return o.CommissionCode, true
}

// HasCommissionCode returns a boolean if a field has been set.
func (o *AgentInfoType) HasCommissionCode() bool {
	if o != nil && !IsNil(o.CommissionCode) {
		return true
	}

	return false
}

// SetCommissionCode gets a reference to the given CommissionCodeType and assigns it to the CommissionCode field.
func (o *AgentInfoType) SetCommissionCode(v CommissionCodeType) {
	o.CommissionCode = &v
}

// GetCommissionAmount returns the CommissionAmount field value if set, zero value otherwise.
func (o *AgentInfoType) GetCommissionAmount() CurrencyAmountType {
	if o == nil || IsNil(o.CommissionAmount) {
		var ret CurrencyAmountType
		return ret
	}
	return *o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetCommissionAmountOk() (*CurrencyAmountType, bool) {
	if o == nil || IsNil(o.CommissionAmount) {
		return nil, false
	}
	return o.CommissionAmount, true
}

// HasCommissionAmount returns a boolean if a field has been set.
func (o *AgentInfoType) HasCommissionAmount() bool {
	if o != nil && !IsNil(o.CommissionAmount) {
		return true
	}

	return false
}

// SetCommissionAmount gets a reference to the given CurrencyAmountType and assigns it to the CommissionAmount field.
func (o *AgentInfoType) SetCommissionAmount(v CurrencyAmountType) {
	o.CommissionAmount = &v
}

// GetHoldReason returns the HoldReason field value if set, zero value otherwise.
func (o *AgentInfoType) GetHoldReason() CodeDescriptionType {
	if o == nil || IsNil(o.HoldReason) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.HoldReason
}

// GetHoldReasonOk returns a tuple with the HoldReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetHoldReasonOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.HoldReason) {
		return nil, false
	}
	return o.HoldReason, true
}

// HasHoldReason returns a boolean if a field has been set.
func (o *AgentInfoType) HasHoldReason() bool {
	if o != nil && !IsNil(o.HoldReason) {
		return true
	}

	return false
}

// SetHoldReason gets a reference to the given CodeDescriptionType and assigns it to the HoldReason field.
func (o *AgentInfoType) SetHoldReason(v CodeDescriptionType) {
	o.HoldReason = &v
}

// GetOnCommission returns the OnCommission field value if set, zero value otherwise.
func (o *AgentInfoType) GetOnCommission() bool {
	if o == nil || IsNil(o.OnCommission) {
		var ret bool
		return ret
	}
	return *o.OnCommission
}

// GetOnCommissionOk returns a tuple with the OnCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetOnCommissionOk() (*bool, bool) {
	if o == nil || IsNil(o.OnCommission) {
		return nil, false
	}
	return o.OnCommission, true
}

// HasOnCommission returns a boolean if a field has been set.
func (o *AgentInfoType) HasOnCommission() bool {
	if o != nil && !IsNil(o.OnCommission) {
		return true
	}

	return false
}

// SetOnCommission gets a reference to the given bool and assigns it to the OnCommission field.
func (o *AgentInfoType) SetOnCommission(v bool) {
	o.OnCommission = &v
}

// GetOnHold returns the OnHold field value if set, zero value otherwise.
func (o *AgentInfoType) GetOnHold() bool {
	if o == nil || IsNil(o.OnHold) {
		var ret bool
		return ret
	}
	return *o.OnHold
}

// GetOnHoldOk returns a tuple with the OnHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentInfoType) GetOnHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.OnHold) {
		return nil, false
	}
	return o.OnHold, true
}

// HasOnHold returns a boolean if a field has been set.
func (o *AgentInfoType) HasOnHold() bool {
	if o != nil && !IsNil(o.OnHold) {
		return true
	}

	return false
}

// SetOnHold gets a reference to the given bool and assigns it to the OnHold field.
func (o *AgentInfoType) SetOnHold(v bool) {
	o.OnHold = &v
}

func (o AgentInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAccountId) {
		toSerialize["bankAccountId"] = o.BankAccountId
	}
	if !IsNil(o.AgentId) {
		toSerialize["agentId"] = o.AgentId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AlternateName) {
		toSerialize["alternateName"] = o.AlternateName
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.IATANo) {
		toSerialize["iATANo"] = o.IATANo
	}
	if !IsNil(o.ProfileType) {
		toSerialize["profileType"] = o.ProfileType
	}
	if !IsNil(o.CommissionCode) {
		toSerialize["commissionCode"] = o.CommissionCode
	}
	if !IsNil(o.CommissionAmount) {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if !IsNil(o.HoldReason) {
		toSerialize["holdReason"] = o.HoldReason
	}
	if !IsNil(o.OnCommission) {
		toSerialize["onCommission"] = o.OnCommission
	}
	if !IsNil(o.OnHold) {
		toSerialize["onHold"] = o.OnHold
	}
	return toSerialize, nil
}

type NullableAgentInfoType struct {
	value *AgentInfoType
	isSet bool
}

func (v NullableAgentInfoType) Get() *AgentInfoType {
	return v.value
}

func (v *NullableAgentInfoType) Set(val *AgentInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentInfoType(val *AgentInfoType) *NullableAgentInfoType {
	return &NullableAgentInfoType{value: val, isSet: true}
}

func (v NullableAgentInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


