/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the ReservationRoomSelectionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationRoomSelectionType{}

// ReservationRoomSelectionType Defines search criteria needed to configure a room to a reservation.
type ReservationRoomSelectionType struct {
	HotelId *string `json:"hotelId,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
	// Room identifier which the reservation will hold.
	RoomId *string `json:"roomId,omitempty"`
	OverrideInstructions *ReservationRoomSelectionOverrideType `json:"overrideInstructions,omitempty"`
	// This list contains the Reservation IDs of the Back to Back Reservations that will be assigned to the same room. Back to Back Reservation functionality is available when the Back to Back Handling of Linked Reservations OPERA Control is active.
	IncludedBackToBack [][]UniqueIDType `json:"includedBackToBack,omitempty"`
	// Valid share reservation identifier.
	IncludedSharers [][]UniqueIDType `json:"includedSharers,omitempty"`
	// Update the Room Type used for the Rate calculation.
	UpdateRoomTypeCharged *bool `json:"updateRoomTypeCharged,omitempty"`
	// Indicates if departure rooms are to be included for room assignment.
	IncludeDepartureRooms *bool `json:"includeDepartureRooms,omitempty"`
	// Update the do not move flag used to locking the reservation room number.
	RoomNumberLocked *bool `json:"roomNumberLocked,omitempty"`
	OrderBy *HotelRoomsOrderBy `json:"orderBy,omitempty"`
	// Indicates the Room Segment number the room is assigned to.
	ScheduledRoomSegmentNumber *float32 `json:"scheduledRoomSegmentNumber,omitempty"`
	// Defines the start date of the room segment of the reservation.Room segments/scheduled room move functionality is available when the Advanced Daily Details OPERA Control is active.
	RoomSegmentBeginDate *string `json:"roomSegmentBeginDate,omitempty"`
	// Defines the end date of the room segment of the reservation.Room segments/scheduled room move functionality is available when the Advanced Daily Details OPERA Control is active.
	RoomSegmentEndDate *string `json:"roomSegmentEndDate,omitempty"`
}

// NewReservationRoomSelectionType instantiates a new ReservationRoomSelectionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationRoomSelectionType() *ReservationRoomSelectionType {
	this := ReservationRoomSelectionType{}
	return &this
}

// NewReservationRoomSelectionTypeWithDefaults instantiates a new ReservationRoomSelectionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationRoomSelectionTypeWithDefaults() *ReservationRoomSelectionType {
	this := ReservationRoomSelectionType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ReservationRoomSelectionType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *ReservationRoomSelectionType) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *ReservationRoomSelectionType) SetRoomId(v string) {
	o.RoomId = &v
}

// GetOverrideInstructions returns the OverrideInstructions field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetOverrideInstructions() ReservationRoomSelectionOverrideType {
	if o == nil || IsNil(o.OverrideInstructions) {
		var ret ReservationRoomSelectionOverrideType
		return ret
	}
	return *o.OverrideInstructions
}

// GetOverrideInstructionsOk returns a tuple with the OverrideInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetOverrideInstructionsOk() (*ReservationRoomSelectionOverrideType, bool) {
	if o == nil || IsNil(o.OverrideInstructions) {
		return nil, false
	}
	return o.OverrideInstructions, true
}

// HasOverrideInstructions returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasOverrideInstructions() bool {
	if o != nil && !IsNil(o.OverrideInstructions) {
		return true
	}

	return false
}

// SetOverrideInstructions gets a reference to the given ReservationRoomSelectionOverrideType and assigns it to the OverrideInstructions field.
func (o *ReservationRoomSelectionType) SetOverrideInstructions(v ReservationRoomSelectionOverrideType) {
	o.OverrideInstructions = &v
}

// GetIncludedBackToBack returns the IncludedBackToBack field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetIncludedBackToBack() [][]UniqueIDType {
	if o == nil || IsNil(o.IncludedBackToBack) {
		var ret [][]UniqueIDType
		return ret
	}
	return o.IncludedBackToBack
}

// GetIncludedBackToBackOk returns a tuple with the IncludedBackToBack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetIncludedBackToBackOk() ([][]UniqueIDType, bool) {
	if o == nil || IsNil(o.IncludedBackToBack) {
		return nil, false
	}
	return o.IncludedBackToBack, true
}

// HasIncludedBackToBack returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasIncludedBackToBack() bool {
	if o != nil && !IsNil(o.IncludedBackToBack) {
		return true
	}

	return false
}

// SetIncludedBackToBack gets a reference to the given [][]UniqueIDType and assigns it to the IncludedBackToBack field.
func (o *ReservationRoomSelectionType) SetIncludedBackToBack(v [][]UniqueIDType) {
	o.IncludedBackToBack = v
}

// GetIncludedSharers returns the IncludedSharers field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetIncludedSharers() [][]UniqueIDType {
	if o == nil || IsNil(o.IncludedSharers) {
		var ret [][]UniqueIDType
		return ret
	}
	return o.IncludedSharers
}

// GetIncludedSharersOk returns a tuple with the IncludedSharers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetIncludedSharersOk() ([][]UniqueIDType, bool) {
	if o == nil || IsNil(o.IncludedSharers) {
		return nil, false
	}
	return o.IncludedSharers, true
}

// HasIncludedSharers returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasIncludedSharers() bool {
	if o != nil && !IsNil(o.IncludedSharers) {
		return true
	}

	return false
}

// SetIncludedSharers gets a reference to the given [][]UniqueIDType and assigns it to the IncludedSharers field.
func (o *ReservationRoomSelectionType) SetIncludedSharers(v [][]UniqueIDType) {
	o.IncludedSharers = v
}

// GetUpdateRoomTypeCharged returns the UpdateRoomTypeCharged field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetUpdateRoomTypeCharged() bool {
	if o == nil || IsNil(o.UpdateRoomTypeCharged) {
		var ret bool
		return ret
	}
	return *o.UpdateRoomTypeCharged
}

// GetUpdateRoomTypeChargedOk returns a tuple with the UpdateRoomTypeCharged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetUpdateRoomTypeChargedOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdateRoomTypeCharged) {
		return nil, false
	}
	return o.UpdateRoomTypeCharged, true
}

// HasUpdateRoomTypeCharged returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasUpdateRoomTypeCharged() bool {
	if o != nil && !IsNil(o.UpdateRoomTypeCharged) {
		return true
	}

	return false
}

// SetUpdateRoomTypeCharged gets a reference to the given bool and assigns it to the UpdateRoomTypeCharged field.
func (o *ReservationRoomSelectionType) SetUpdateRoomTypeCharged(v bool) {
	o.UpdateRoomTypeCharged = &v
}

// GetIncludeDepartureRooms returns the IncludeDepartureRooms field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetIncludeDepartureRooms() bool {
	if o == nil || IsNil(o.IncludeDepartureRooms) {
		var ret bool
		return ret
	}
	return *o.IncludeDepartureRooms
}

// GetIncludeDepartureRoomsOk returns a tuple with the IncludeDepartureRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetIncludeDepartureRoomsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeDepartureRooms) {
		return nil, false
	}
	return o.IncludeDepartureRooms, true
}

// HasIncludeDepartureRooms returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasIncludeDepartureRooms() bool {
	if o != nil && !IsNil(o.IncludeDepartureRooms) {
		return true
	}

	return false
}

// SetIncludeDepartureRooms gets a reference to the given bool and assigns it to the IncludeDepartureRooms field.
func (o *ReservationRoomSelectionType) SetIncludeDepartureRooms(v bool) {
	o.IncludeDepartureRooms = &v
}

// GetRoomNumberLocked returns the RoomNumberLocked field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetRoomNumberLocked() bool {
	if o == nil || IsNil(o.RoomNumberLocked) {
		var ret bool
		return ret
	}
	return *o.RoomNumberLocked
}

// GetRoomNumberLockedOk returns a tuple with the RoomNumberLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetRoomNumberLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.RoomNumberLocked) {
		return nil, false
	}
	return o.RoomNumberLocked, true
}

// HasRoomNumberLocked returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasRoomNumberLocked() bool {
	if o != nil && !IsNil(o.RoomNumberLocked) {
		return true
	}

	return false
}

// SetRoomNumberLocked gets a reference to the given bool and assigns it to the RoomNumberLocked field.
func (o *ReservationRoomSelectionType) SetRoomNumberLocked(v bool) {
	o.RoomNumberLocked = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetOrderBy() HotelRoomsOrderBy {
	if o == nil || IsNil(o.OrderBy) {
		var ret HotelRoomsOrderBy
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetOrderByOk() (*HotelRoomsOrderBy, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given HotelRoomsOrderBy and assigns it to the OrderBy field.
func (o *ReservationRoomSelectionType) SetOrderBy(v HotelRoomsOrderBy) {
	o.OrderBy = &v
}

// GetScheduledRoomSegmentNumber returns the ScheduledRoomSegmentNumber field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetScheduledRoomSegmentNumber() float32 {
	if o == nil || IsNil(o.ScheduledRoomSegmentNumber) {
		var ret float32
		return ret
	}
	return *o.ScheduledRoomSegmentNumber
}

// GetScheduledRoomSegmentNumberOk returns a tuple with the ScheduledRoomSegmentNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetScheduledRoomSegmentNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.ScheduledRoomSegmentNumber) {
		return nil, false
	}
	return o.ScheduledRoomSegmentNumber, true
}

// HasScheduledRoomSegmentNumber returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasScheduledRoomSegmentNumber() bool {
	if o != nil && !IsNil(o.ScheduledRoomSegmentNumber) {
		return true
	}

	return false
}

// SetScheduledRoomSegmentNumber gets a reference to the given float32 and assigns it to the ScheduledRoomSegmentNumber field.
func (o *ReservationRoomSelectionType) SetScheduledRoomSegmentNumber(v float32) {
	o.ScheduledRoomSegmentNumber = &v
}

// GetRoomSegmentBeginDate returns the RoomSegmentBeginDate field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetRoomSegmentBeginDate() string {
	if o == nil || IsNil(o.RoomSegmentBeginDate) {
		var ret string
		return ret
	}
	return *o.RoomSegmentBeginDate
}

// GetRoomSegmentBeginDateOk returns a tuple with the RoomSegmentBeginDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetRoomSegmentBeginDateOk() (*string, bool) {
	if o == nil || IsNil(o.RoomSegmentBeginDate) {
		return nil, false
	}
	return o.RoomSegmentBeginDate, true
}

// HasRoomSegmentBeginDate returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasRoomSegmentBeginDate() bool {
	if o != nil && !IsNil(o.RoomSegmentBeginDate) {
		return true
	}

	return false
}

// SetRoomSegmentBeginDate gets a reference to the given string and assigns it to the RoomSegmentBeginDate field.
func (o *ReservationRoomSelectionType) SetRoomSegmentBeginDate(v string) {
	o.RoomSegmentBeginDate = &v
}

// GetRoomSegmentEndDate returns the RoomSegmentEndDate field value if set, zero value otherwise.
func (o *ReservationRoomSelectionType) GetRoomSegmentEndDate() string {
	if o == nil || IsNil(o.RoomSegmentEndDate) {
		var ret string
		return ret
	}
	return *o.RoomSegmentEndDate
}

// GetRoomSegmentEndDateOk returns a tuple with the RoomSegmentEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationRoomSelectionType) GetRoomSegmentEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.RoomSegmentEndDate) {
		return nil, false
	}
	return o.RoomSegmentEndDate, true
}

// HasRoomSegmentEndDate returns a boolean if a field has been set.
func (o *ReservationRoomSelectionType) HasRoomSegmentEndDate() bool {
	if o != nil && !IsNil(o.RoomSegmentEndDate) {
		return true
	}

	return false
}

// SetRoomSegmentEndDate gets a reference to the given string and assigns it to the RoomSegmentEndDate field.
func (o *ReservationRoomSelectionType) SetRoomSegmentEndDate(v string) {
	o.RoomSegmentEndDate = &v
}

func (o ReservationRoomSelectionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationRoomSelectionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.OverrideInstructions) {
		toSerialize["overrideInstructions"] = o.OverrideInstructions
	}
	if !IsNil(o.IncludedBackToBack) {
		toSerialize["includedBackToBack"] = o.IncludedBackToBack
	}
	if !IsNil(o.IncludedSharers) {
		toSerialize["includedSharers"] = o.IncludedSharers
	}
	if !IsNil(o.UpdateRoomTypeCharged) {
		toSerialize["updateRoomTypeCharged"] = o.UpdateRoomTypeCharged
	}
	if !IsNil(o.IncludeDepartureRooms) {
		toSerialize["includeDepartureRooms"] = o.IncludeDepartureRooms
	}
	if !IsNil(o.RoomNumberLocked) {
		toSerialize["roomNumberLocked"] = o.RoomNumberLocked
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.ScheduledRoomSegmentNumber) {
		toSerialize["scheduledRoomSegmentNumber"] = o.ScheduledRoomSegmentNumber
	}
	if !IsNil(o.RoomSegmentBeginDate) {
		toSerialize["roomSegmentBeginDate"] = o.RoomSegmentBeginDate
	}
	if !IsNil(o.RoomSegmentEndDate) {
		toSerialize["roomSegmentEndDate"] = o.RoomSegmentEndDate
	}
	return toSerialize, nil
}

type NullableReservationRoomSelectionType struct {
	value *ReservationRoomSelectionType
	isSet bool
}

func (v NullableReservationRoomSelectionType) Get() *ReservationRoomSelectionType {
	return v.value
}

func (v *NullableReservationRoomSelectionType) Set(val *ReservationRoomSelectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationRoomSelectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationRoomSelectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationRoomSelectionType(val *ReservationRoomSelectionType) *NullableReservationRoomSelectionType {
	return &NullableReservationRoomSelectionType{value: val, isSet: true}
}

func (v NullableReservationRoomSelectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationRoomSelectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


