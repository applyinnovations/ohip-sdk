/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the SitePlanSectionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SitePlanSectionType{}

// SitePlanSectionType Represents the site plan section record.
type SitePlanSectionType struct {
	// The site plan section code.
	SectionCode *string `json:"sectionCode,omitempty"`
	// The section type.
	SectionType *string `json:"sectionType,omitempty"`
	// The link code for the section.
	LinkCode *string `json:"linkCode,omitempty"`
	// The coordinates for this section.
	Coordinates *string `json:"coordinates,omitempty"`
	// The description of this section.
	Description *string `json:"description,omitempty"`
}

// NewSitePlanSectionType instantiates a new SitePlanSectionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSitePlanSectionType() *SitePlanSectionType {
	this := SitePlanSectionType{}
	return &this
}

// NewSitePlanSectionTypeWithDefaults instantiates a new SitePlanSectionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSitePlanSectionTypeWithDefaults() *SitePlanSectionType {
	this := SitePlanSectionType{}
	return &this
}

// GetSectionCode returns the SectionCode field value if set, zero value otherwise.
func (o *SitePlanSectionType) GetSectionCode() string {
	if o == nil || IsNil(o.SectionCode) {
		var ret string
		return ret
	}
	return *o.SectionCode
}

// GetSectionCodeOk returns a tuple with the SectionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitePlanSectionType) GetSectionCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SectionCode) {
		return nil, false
	}
	return o.SectionCode, true
}

// HasSectionCode returns a boolean if a field has been set.
func (o *SitePlanSectionType) HasSectionCode() bool {
	if o != nil && !IsNil(o.SectionCode) {
		return true
	}

	return false
}

// SetSectionCode gets a reference to the given string and assigns it to the SectionCode field.
func (o *SitePlanSectionType) SetSectionCode(v string) {
	o.SectionCode = &v
}

// GetSectionType returns the SectionType field value if set, zero value otherwise.
func (o *SitePlanSectionType) GetSectionType() string {
	if o == nil || IsNil(o.SectionType) {
		var ret string
		return ret
	}
	return *o.SectionType
}

// GetSectionTypeOk returns a tuple with the SectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitePlanSectionType) GetSectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SectionType) {
		return nil, false
	}
	return o.SectionType, true
}

// HasSectionType returns a boolean if a field has been set.
func (o *SitePlanSectionType) HasSectionType() bool {
	if o != nil && !IsNil(o.SectionType) {
		return true
	}

	return false
}

// SetSectionType gets a reference to the given string and assigns it to the SectionType field.
func (o *SitePlanSectionType) SetSectionType(v string) {
	o.SectionType = &v
}

// GetLinkCode returns the LinkCode field value if set, zero value otherwise.
func (o *SitePlanSectionType) GetLinkCode() string {
	if o == nil || IsNil(o.LinkCode) {
		var ret string
		return ret
	}
	return *o.LinkCode
}

// GetLinkCodeOk returns a tuple with the LinkCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitePlanSectionType) GetLinkCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkCode) {
		return nil, false
	}
	return o.LinkCode, true
}

// HasLinkCode returns a boolean if a field has been set.
func (o *SitePlanSectionType) HasLinkCode() bool {
	if o != nil && !IsNil(o.LinkCode) {
		return true
	}

	return false
}

// SetLinkCode gets a reference to the given string and assigns it to the LinkCode field.
func (o *SitePlanSectionType) SetLinkCode(v string) {
	o.LinkCode = &v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *SitePlanSectionType) GetCoordinates() string {
	if o == nil || IsNil(o.Coordinates) {
		var ret string
		return ret
	}
	return *o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitePlanSectionType) GetCoordinatesOk() (*string, bool) {
	if o == nil || IsNil(o.Coordinates) {
		return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *SitePlanSectionType) HasCoordinates() bool {
	if o != nil && !IsNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given string and assigns it to the Coordinates field.
func (o *SitePlanSectionType) SetCoordinates(v string) {
	o.Coordinates = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SitePlanSectionType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitePlanSectionType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SitePlanSectionType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SitePlanSectionType) SetDescription(v string) {
	o.Description = &v
}

func (o SitePlanSectionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SitePlanSectionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SectionCode) {
		toSerialize["sectionCode"] = o.SectionCode
	}
	if !IsNil(o.SectionType) {
		toSerialize["sectionType"] = o.SectionType
	}
	if !IsNil(o.LinkCode) {
		toSerialize["linkCode"] = o.LinkCode
	}
	if !IsNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableSitePlanSectionType struct {
	value *SitePlanSectionType
	isSet bool
}

func (v NullableSitePlanSectionType) Get() *SitePlanSectionType {
	return v.value
}

func (v *NullableSitePlanSectionType) Set(val *SitePlanSectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSitePlanSectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSitePlanSectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSitePlanSectionType(val *SitePlanSectionType) *NullableSitePlanSectionType {
	return &NullableSitePlanSectionType{value: val, isSet: true}
}

func (v NullableSitePlanSectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSitePlanSectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


