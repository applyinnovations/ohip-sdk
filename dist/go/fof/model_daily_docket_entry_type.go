/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the DailyDocketEntryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DailyDocketEntryType{}

// DailyDocketEntryType Log book entry.
type DailyDocketEntryType struct {
	// Hotel Code of the log book entry.
	HotelId *string `json:"hotelId,omitempty"`
	DocketEntryId *UniqueIDType `json:"docketEntryId,omitempty"`
	Department *CodeDescriptionType `json:"department,omitempty"`
	RoleUserEntry *RoleUserEntryType `json:"roleUserEntry,omitempty"`
	// The date-time in which the log book entry was created.
	EntryDate *string `json:"entryDate,omitempty"`
	// Entry details.
	Details *string `json:"details,omitempty"`
	History *ChangeHistoryType `json:"history,omitempty"`
}

// NewDailyDocketEntryType instantiates a new DailyDocketEntryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyDocketEntryType() *DailyDocketEntryType {
	this := DailyDocketEntryType{}
	return &this
}

// NewDailyDocketEntryTypeWithDefaults instantiates a new DailyDocketEntryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyDocketEntryTypeWithDefaults() *DailyDocketEntryType {
	this := DailyDocketEntryType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *DailyDocketEntryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyDocketEntryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *DailyDocketEntryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *DailyDocketEntryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetDocketEntryId returns the DocketEntryId field value if set, zero value otherwise.
func (o *DailyDocketEntryType) GetDocketEntryId() UniqueIDType {
	if o == nil || IsNil(o.DocketEntryId) {
		var ret UniqueIDType
		return ret
	}
	return *o.DocketEntryId
}

// GetDocketEntryIdOk returns a tuple with the DocketEntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyDocketEntryType) GetDocketEntryIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.DocketEntryId) {
		return nil, false
	}
	return o.DocketEntryId, true
}

// HasDocketEntryId returns a boolean if a field has been set.
func (o *DailyDocketEntryType) HasDocketEntryId() bool {
	if o != nil && !IsNil(o.DocketEntryId) {
		return true
	}

	return false
}

// SetDocketEntryId gets a reference to the given UniqueIDType and assigns it to the DocketEntryId field.
func (o *DailyDocketEntryType) SetDocketEntryId(v UniqueIDType) {
	o.DocketEntryId = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *DailyDocketEntryType) GetDepartment() CodeDescriptionType {
	if o == nil || IsNil(o.Department) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyDocketEntryType) GetDepartmentOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *DailyDocketEntryType) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given CodeDescriptionType and assigns it to the Department field.
func (o *DailyDocketEntryType) SetDepartment(v CodeDescriptionType) {
	o.Department = &v
}

// GetRoleUserEntry returns the RoleUserEntry field value if set, zero value otherwise.
func (o *DailyDocketEntryType) GetRoleUserEntry() RoleUserEntryType {
	if o == nil || IsNil(o.RoleUserEntry) {
		var ret RoleUserEntryType
		return ret
	}
	return *o.RoleUserEntry
}

// GetRoleUserEntryOk returns a tuple with the RoleUserEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyDocketEntryType) GetRoleUserEntryOk() (*RoleUserEntryType, bool) {
	if o == nil || IsNil(o.RoleUserEntry) {
		return nil, false
	}
	return o.RoleUserEntry, true
}

// HasRoleUserEntry returns a boolean if a field has been set.
func (o *DailyDocketEntryType) HasRoleUserEntry() bool {
	if o != nil && !IsNil(o.RoleUserEntry) {
		return true
	}

	return false
}

// SetRoleUserEntry gets a reference to the given RoleUserEntryType and assigns it to the RoleUserEntry field.
func (o *DailyDocketEntryType) SetRoleUserEntry(v RoleUserEntryType) {
	o.RoleUserEntry = &v
}

// GetEntryDate returns the EntryDate field value if set, zero value otherwise.
func (o *DailyDocketEntryType) GetEntryDate() string {
	if o == nil || IsNil(o.EntryDate) {
		var ret string
		return ret
	}
	return *o.EntryDate
}

// GetEntryDateOk returns a tuple with the EntryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyDocketEntryType) GetEntryDateOk() (*string, bool) {
	if o == nil || IsNil(o.EntryDate) {
		return nil, false
	}
	return o.EntryDate, true
}

// HasEntryDate returns a boolean if a field has been set.
func (o *DailyDocketEntryType) HasEntryDate() bool {
	if o != nil && !IsNil(o.EntryDate) {
		return true
	}

	return false
}

// SetEntryDate gets a reference to the given string and assigns it to the EntryDate field.
func (o *DailyDocketEntryType) SetEntryDate(v string) {
	o.EntryDate = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *DailyDocketEntryType) GetDetails() string {
	if o == nil || IsNil(o.Details) {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyDocketEntryType) GetDetailsOk() (*string, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *DailyDocketEntryType) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *DailyDocketEntryType) SetDetails(v string) {
	o.Details = &v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *DailyDocketEntryType) GetHistory() ChangeHistoryType {
	if o == nil || IsNil(o.History) {
		var ret ChangeHistoryType
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DailyDocketEntryType) GetHistoryOk() (*ChangeHistoryType, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *DailyDocketEntryType) HasHistory() bool {
	if o != nil && !IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given ChangeHistoryType and assigns it to the History field.
func (o *DailyDocketEntryType) SetHistory(v ChangeHistoryType) {
	o.History = &v
}

func (o DailyDocketEntryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DailyDocketEntryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.DocketEntryId) {
		toSerialize["docketEntryId"] = o.DocketEntryId
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.RoleUserEntry) {
		toSerialize["roleUserEntry"] = o.RoleUserEntry
	}
	if !IsNil(o.EntryDate) {
		toSerialize["entryDate"] = o.EntryDate
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.History) {
		toSerialize["history"] = o.History
	}
	return toSerialize, nil
}

type NullableDailyDocketEntryType struct {
	value *DailyDocketEntryType
	isSet bool
}

func (v NullableDailyDocketEntryType) Get() *DailyDocketEntryType {
	return v.value
}

func (v *NullableDailyDocketEntryType) Set(val *DailyDocketEntryType) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyDocketEntryType) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyDocketEntryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyDocketEntryType(val *DailyDocketEntryType) *NullableDailyDocketEntryType {
	return &NullableDailyDocketEntryType{value: val, isSet: true}
}

func (v NullableDailyDocketEntryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyDocketEntryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


