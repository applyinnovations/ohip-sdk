/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the CommissionCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommissionCodeType{}

// CommissionCodeType Type for commission code info.
type CommissionCodeType struct {
	// Commission code.
	Code *string `json:"code,omitempty"`
	// Total commission that will be paid.
	VatPercentage *float32 `json:"vatPercentage,omitempty"`
}

// NewCommissionCodeType instantiates a new CommissionCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommissionCodeType() *CommissionCodeType {
	this := CommissionCodeType{}
	return &this
}

// NewCommissionCodeTypeWithDefaults instantiates a new CommissionCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommissionCodeTypeWithDefaults() *CommissionCodeType {
	this := CommissionCodeType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CommissionCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CommissionCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CommissionCodeType) SetCode(v string) {
	o.Code = &v
}

// GetVatPercentage returns the VatPercentage field value if set, zero value otherwise.
func (o *CommissionCodeType) GetVatPercentage() float32 {
	if o == nil || IsNil(o.VatPercentage) {
		var ret float32
		return ret
	}
	return *o.VatPercentage
}

// GetVatPercentageOk returns a tuple with the VatPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommissionCodeType) GetVatPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.VatPercentage) {
		return nil, false
	}
	return o.VatPercentage, true
}

// HasVatPercentage returns a boolean if a field has been set.
func (o *CommissionCodeType) HasVatPercentage() bool {
	if o != nil && !IsNil(o.VatPercentage) {
		return true
	}

	return false
}

// SetVatPercentage gets a reference to the given float32 and assigns it to the VatPercentage field.
func (o *CommissionCodeType) SetVatPercentage(v float32) {
	o.VatPercentage = &v
}

func (o CommissionCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommissionCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.VatPercentage) {
		toSerialize["vatPercentage"] = o.VatPercentage
	}
	return toSerialize, nil
}

type NullableCommissionCodeType struct {
	value *CommissionCodeType
	isSet bool
}

func (v NullableCommissionCodeType) Get() *CommissionCodeType {
	return v.value
}

func (v *NullableCommissionCodeType) Set(val *CommissionCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCommissionCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCommissionCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommissionCodeType(val *CommissionCodeType) *NullableCommissionCodeType {
	return &NullableCommissionCodeType{value: val, isSet: true}
}

func (v NullableCommissionCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommissionCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


