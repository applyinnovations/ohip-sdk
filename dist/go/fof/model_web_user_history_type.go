/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the WebUserHistoryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebUserHistoryType{}

// WebUserHistoryType Creation date time, Creator Id, last modification date time and last Modifier Id.
type WebUserHistoryType struct {
	// Time stamp of the creation.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
	CreatorId *string `json:"creatorId,omitempty"`
	// Time stamp of last modification.
	LastModifyDateTime *string `json:"lastModifyDateTime,omitempty"`
	// Identifies the last software system or person to modify a record.
	LastModifierId *string `json:"lastModifierId,omitempty"`
	// Date an item will be purged from a database (e.g., from a live database to an archive).
	PurgeDate *string `json:"purgeDate,omitempty"`
	// Last login date.
	LastLogin *string `json:"lastLogin,omitempty"`
	// Last Password change date.
	LastPasswordChange *string `json:"lastPasswordChange,omitempty"`
	// Inactive date.
	InactiveDate *string `json:"inactiveDate,omitempty"`
}

// NewWebUserHistoryType instantiates a new WebUserHistoryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebUserHistoryType() *WebUserHistoryType {
	this := WebUserHistoryType{}
	return &this
}

// NewWebUserHistoryTypeWithDefaults instantiates a new WebUserHistoryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebUserHistoryTypeWithDefaults() *WebUserHistoryType {
	this := WebUserHistoryType{}
	return &this
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *WebUserHistoryType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *WebUserHistoryType) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModifyDateTime returns the LastModifyDateTime field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetLastModifyDateTime() string {
	if o == nil || IsNil(o.LastModifyDateTime) {
		var ret string
		return ret
	}
	return *o.LastModifyDateTime
}

// GetLastModifyDateTimeOk returns a tuple with the LastModifyDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetLastModifyDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifyDateTime) {
		return nil, false
	}
	return o.LastModifyDateTime, true
}

// HasLastModifyDateTime returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasLastModifyDateTime() bool {
	if o != nil && !IsNil(o.LastModifyDateTime) {
		return true
	}

	return false
}

// SetLastModifyDateTime gets a reference to the given string and assigns it to the LastModifyDateTime field.
func (o *WebUserHistoryType) SetLastModifyDateTime(v string) {
	o.LastModifyDateTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *WebUserHistoryType) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetPurgeDate returns the PurgeDate field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetPurgeDate() string {
	if o == nil || IsNil(o.PurgeDate) {
		var ret string
		return ret
	}
	return *o.PurgeDate
}

// GetPurgeDateOk returns a tuple with the PurgeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetPurgeDateOk() (*string, bool) {
	if o == nil || IsNil(o.PurgeDate) {
		return nil, false
	}
	return o.PurgeDate, true
}

// HasPurgeDate returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasPurgeDate() bool {
	if o != nil && !IsNil(o.PurgeDate) {
		return true
	}

	return false
}

// SetPurgeDate gets a reference to the given string and assigns it to the PurgeDate field.
func (o *WebUserHistoryType) SetPurgeDate(v string) {
	o.PurgeDate = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetLastLogin() string {
	if o == nil || IsNil(o.LastLogin) {
		var ret string
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetLastLoginOk() (*string, bool) {
	if o == nil || IsNil(o.LastLogin) {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasLastLogin() bool {
	if o != nil && !IsNil(o.LastLogin) {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given string and assigns it to the LastLogin field.
func (o *WebUserHistoryType) SetLastLogin(v string) {
	o.LastLogin = &v
}

// GetLastPasswordChange returns the LastPasswordChange field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetLastPasswordChange() string {
	if o == nil || IsNil(o.LastPasswordChange) {
		var ret string
		return ret
	}
	return *o.LastPasswordChange
}

// GetLastPasswordChangeOk returns a tuple with the LastPasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetLastPasswordChangeOk() (*string, bool) {
	if o == nil || IsNil(o.LastPasswordChange) {
		return nil, false
	}
	return o.LastPasswordChange, true
}

// HasLastPasswordChange returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasLastPasswordChange() bool {
	if o != nil && !IsNil(o.LastPasswordChange) {
		return true
	}

	return false
}

// SetLastPasswordChange gets a reference to the given string and assigns it to the LastPasswordChange field.
func (o *WebUserHistoryType) SetLastPasswordChange(v string) {
	o.LastPasswordChange = &v
}

// GetInactiveDate returns the InactiveDate field value if set, zero value otherwise.
func (o *WebUserHistoryType) GetInactiveDate() string {
	if o == nil || IsNil(o.InactiveDate) {
		var ret string
		return ret
	}
	return *o.InactiveDate
}

// GetInactiveDateOk returns a tuple with the InactiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebUserHistoryType) GetInactiveDateOk() (*string, bool) {
	if o == nil || IsNil(o.InactiveDate) {
		return nil, false
	}
	return o.InactiveDate, true
}

// HasInactiveDate returns a boolean if a field has been set.
func (o *WebUserHistoryType) HasInactiveDate() bool {
	if o != nil && !IsNil(o.InactiveDate) {
		return true
	}

	return false
}

// SetInactiveDate gets a reference to the given string and assigns it to the InactiveDate field.
func (o *WebUserHistoryType) SetInactiveDate(v string) {
	o.InactiveDate = &v
}

func (o WebUserHistoryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebUserHistoryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModifyDateTime) {
		toSerialize["lastModifyDateTime"] = o.LastModifyDateTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.PurgeDate) {
		toSerialize["purgeDate"] = o.PurgeDate
	}
	if !IsNil(o.LastLogin) {
		toSerialize["lastLogin"] = o.LastLogin
	}
	if !IsNil(o.LastPasswordChange) {
		toSerialize["lastPasswordChange"] = o.LastPasswordChange
	}
	if !IsNil(o.InactiveDate) {
		toSerialize["inactiveDate"] = o.InactiveDate
	}
	return toSerialize, nil
}

type NullableWebUserHistoryType struct {
	value *WebUserHistoryType
	isSet bool
}

func (v NullableWebUserHistoryType) Get() *WebUserHistoryType {
	return v.value
}

func (v *NullableWebUserHistoryType) Set(val *WebUserHistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableWebUserHistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableWebUserHistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebUserHistoryType(val *WebUserHistoryType) *NullableWebUserHistoryType {
	return &NullableWebUserHistoryType{value: val, isSet: true}
}

func (v NullableWebUserHistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebUserHistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


