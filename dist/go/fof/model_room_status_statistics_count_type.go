/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoomStatusStatisticsCountType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomStatusStatisticsCountType{}

// RoomStatusStatisticsCountType struct for RoomStatusStatisticsCountType
type RoomStatusStatisticsCountType struct {
	HousekeepingRoomStatus *string `json:"housekeepingRoomStatus,omitempty"`
	HousekeepingRoomStatusCount *int32 `json:"housekeepingRoomStatusCount,omitempty"`
}

// NewRoomStatusStatisticsCountType instantiates a new RoomStatusStatisticsCountType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomStatusStatisticsCountType() *RoomStatusStatisticsCountType {
	this := RoomStatusStatisticsCountType{}
	return &this
}

// NewRoomStatusStatisticsCountTypeWithDefaults instantiates a new RoomStatusStatisticsCountType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomStatusStatisticsCountTypeWithDefaults() *RoomStatusStatisticsCountType {
	this := RoomStatusStatisticsCountType{}
	return &this
}

// GetHousekeepingRoomStatus returns the HousekeepingRoomStatus field value if set, zero value otherwise.
func (o *RoomStatusStatisticsCountType) GetHousekeepingRoomStatus() string {
	if o == nil || IsNil(o.HousekeepingRoomStatus) {
		var ret string
		return ret
	}
	return *o.HousekeepingRoomStatus
}

// GetHousekeepingRoomStatusOk returns a tuple with the HousekeepingRoomStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStatusStatisticsCountType) GetHousekeepingRoomStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HousekeepingRoomStatus) {
		return nil, false
	}
	return o.HousekeepingRoomStatus, true
}

// HasHousekeepingRoomStatus returns a boolean if a field has been set.
func (o *RoomStatusStatisticsCountType) HasHousekeepingRoomStatus() bool {
	if o != nil && !IsNil(o.HousekeepingRoomStatus) {
		return true
	}

	return false
}

// SetHousekeepingRoomStatus gets a reference to the given string and assigns it to the HousekeepingRoomStatus field.
func (o *RoomStatusStatisticsCountType) SetHousekeepingRoomStatus(v string) {
	o.HousekeepingRoomStatus = &v
}

// GetHousekeepingRoomStatusCount returns the HousekeepingRoomStatusCount field value if set, zero value otherwise.
func (o *RoomStatusStatisticsCountType) GetHousekeepingRoomStatusCount() int32 {
	if o == nil || IsNil(o.HousekeepingRoomStatusCount) {
		var ret int32
		return ret
	}
	return *o.HousekeepingRoomStatusCount
}

// GetHousekeepingRoomStatusCountOk returns a tuple with the HousekeepingRoomStatusCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomStatusStatisticsCountType) GetHousekeepingRoomStatusCountOk() (*int32, bool) {
	if o == nil || IsNil(o.HousekeepingRoomStatusCount) {
		return nil, false
	}
	return o.HousekeepingRoomStatusCount, true
}

// HasHousekeepingRoomStatusCount returns a boolean if a field has been set.
func (o *RoomStatusStatisticsCountType) HasHousekeepingRoomStatusCount() bool {
	if o != nil && !IsNil(o.HousekeepingRoomStatusCount) {
		return true
	}

	return false
}

// SetHousekeepingRoomStatusCount gets a reference to the given int32 and assigns it to the HousekeepingRoomStatusCount field.
func (o *RoomStatusStatisticsCountType) SetHousekeepingRoomStatusCount(v int32) {
	o.HousekeepingRoomStatusCount = &v
}

func (o RoomStatusStatisticsCountType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomStatusStatisticsCountType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HousekeepingRoomStatus) {
		toSerialize["housekeepingRoomStatus"] = o.HousekeepingRoomStatus
	}
	if !IsNil(o.HousekeepingRoomStatusCount) {
		toSerialize["housekeepingRoomStatusCount"] = o.HousekeepingRoomStatusCount
	}
	return toSerialize, nil
}

type NullableRoomStatusStatisticsCountType struct {
	value *RoomStatusStatisticsCountType
	isSet bool
}

func (v NullableRoomStatusStatisticsCountType) Get() *RoomStatusStatisticsCountType {
	return v.value
}

func (v *NullableRoomStatusStatisticsCountType) Set(val *RoomStatusStatisticsCountType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomStatusStatisticsCountType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomStatusStatisticsCountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomStatusStatisticsCountType(val *RoomStatusStatisticsCountType) *NullableRoomStatusStatisticsCountType {
	return &NullableRoomStatusStatisticsCountType{value: val, isSet: true}
}

func (v NullableRoomStatusStatisticsCountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomStatusStatisticsCountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


