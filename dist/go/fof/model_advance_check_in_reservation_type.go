/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the AdvanceCheckInReservationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvanceCheckInReservationType{}

// AdvanceCheckInReservationType Information needed to perform Advance Check In of a Reservation
type AdvanceCheckInReservationType struct {
	// Resort to which the Reservation belongs.
	HotelId *string `json:"hotelId,omitempty"`
	ReservationId *ReservationId `json:"reservationId,omitempty"`
	// Time when the guest is expected to return to perform Check In
	ExpectedReturnTime *string `json:"expectedReturnTime,omitempty"`
	// Comments relating to the Advance Checked In guest's return to the property
	ETRComments *string `json:"eTRComments,omitempty"`
	ReservationCommunication *ResCommunicationType `json:"reservationCommunication,omitempty"`
	// Indicates if the guest has opted for communications pertaining to this reservation.
	OptedForCommunication *bool `json:"optedForCommunication,omitempty"`
}

// NewAdvanceCheckInReservationType instantiates a new AdvanceCheckInReservationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvanceCheckInReservationType() *AdvanceCheckInReservationType {
	this := AdvanceCheckInReservationType{}
	return &this
}

// NewAdvanceCheckInReservationTypeWithDefaults instantiates a new AdvanceCheckInReservationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvanceCheckInReservationTypeWithDefaults() *AdvanceCheckInReservationType {
	this := AdvanceCheckInReservationType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *AdvanceCheckInReservationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceCheckInReservationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *AdvanceCheckInReservationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *AdvanceCheckInReservationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReservationId returns the ReservationId field value if set, zero value otherwise.
func (o *AdvanceCheckInReservationType) GetReservationId() ReservationId {
	if o == nil || IsNil(o.ReservationId) {
		var ret ReservationId
		return ret
	}
	return *o.ReservationId
}

// GetReservationIdOk returns a tuple with the ReservationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceCheckInReservationType) GetReservationIdOk() (*ReservationId, bool) {
	if o == nil || IsNil(o.ReservationId) {
		return nil, false
	}
	return o.ReservationId, true
}

// HasReservationId returns a boolean if a field has been set.
func (o *AdvanceCheckInReservationType) HasReservationId() bool {
	if o != nil && !IsNil(o.ReservationId) {
		return true
	}

	return false
}

// SetReservationId gets a reference to the given ReservationId and assigns it to the ReservationId field.
func (o *AdvanceCheckInReservationType) SetReservationId(v ReservationId) {
	o.ReservationId = &v
}

// GetExpectedReturnTime returns the ExpectedReturnTime field value if set, zero value otherwise.
func (o *AdvanceCheckInReservationType) GetExpectedReturnTime() string {
	if o == nil || IsNil(o.ExpectedReturnTime) {
		var ret string
		return ret
	}
	return *o.ExpectedReturnTime
}

// GetExpectedReturnTimeOk returns a tuple with the ExpectedReturnTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceCheckInReservationType) GetExpectedReturnTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedReturnTime) {
		return nil, false
	}
	return o.ExpectedReturnTime, true
}

// HasExpectedReturnTime returns a boolean if a field has been set.
func (o *AdvanceCheckInReservationType) HasExpectedReturnTime() bool {
	if o != nil && !IsNil(o.ExpectedReturnTime) {
		return true
	}

	return false
}

// SetExpectedReturnTime gets a reference to the given string and assigns it to the ExpectedReturnTime field.
func (o *AdvanceCheckInReservationType) SetExpectedReturnTime(v string) {
	o.ExpectedReturnTime = &v
}

// GetETRComments returns the ETRComments field value if set, zero value otherwise.
func (o *AdvanceCheckInReservationType) GetETRComments() string {
	if o == nil || IsNil(o.ETRComments) {
		var ret string
		return ret
	}
	return *o.ETRComments
}

// GetETRCommentsOk returns a tuple with the ETRComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceCheckInReservationType) GetETRCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.ETRComments) {
		return nil, false
	}
	return o.ETRComments, true
}

// HasETRComments returns a boolean if a field has been set.
func (o *AdvanceCheckInReservationType) HasETRComments() bool {
	if o != nil && !IsNil(o.ETRComments) {
		return true
	}

	return false
}

// SetETRComments gets a reference to the given string and assigns it to the ETRComments field.
func (o *AdvanceCheckInReservationType) SetETRComments(v string) {
	o.ETRComments = &v
}

// GetReservationCommunication returns the ReservationCommunication field value if set, zero value otherwise.
func (o *AdvanceCheckInReservationType) GetReservationCommunication() ResCommunicationType {
	if o == nil || IsNil(o.ReservationCommunication) {
		var ret ResCommunicationType
		return ret
	}
	return *o.ReservationCommunication
}

// GetReservationCommunicationOk returns a tuple with the ReservationCommunication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceCheckInReservationType) GetReservationCommunicationOk() (*ResCommunicationType, bool) {
	if o == nil || IsNil(o.ReservationCommunication) {
		return nil, false
	}
	return o.ReservationCommunication, true
}

// HasReservationCommunication returns a boolean if a field has been set.
func (o *AdvanceCheckInReservationType) HasReservationCommunication() bool {
	if o != nil && !IsNil(o.ReservationCommunication) {
		return true
	}

	return false
}

// SetReservationCommunication gets a reference to the given ResCommunicationType and assigns it to the ReservationCommunication field.
func (o *AdvanceCheckInReservationType) SetReservationCommunication(v ResCommunicationType) {
	o.ReservationCommunication = &v
}

// GetOptedForCommunication returns the OptedForCommunication field value if set, zero value otherwise.
func (o *AdvanceCheckInReservationType) GetOptedForCommunication() bool {
	if o == nil || IsNil(o.OptedForCommunication) {
		var ret bool
		return ret
	}
	return *o.OptedForCommunication
}

// GetOptedForCommunicationOk returns a tuple with the OptedForCommunication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdvanceCheckInReservationType) GetOptedForCommunicationOk() (*bool, bool) {
	if o == nil || IsNil(o.OptedForCommunication) {
		return nil, false
	}
	return o.OptedForCommunication, true
}

// HasOptedForCommunication returns a boolean if a field has been set.
func (o *AdvanceCheckInReservationType) HasOptedForCommunication() bool {
	if o != nil && !IsNil(o.OptedForCommunication) {
		return true
	}

	return false
}

// SetOptedForCommunication gets a reference to the given bool and assigns it to the OptedForCommunication field.
func (o *AdvanceCheckInReservationType) SetOptedForCommunication(v bool) {
	o.OptedForCommunication = &v
}

func (o AdvanceCheckInReservationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvanceCheckInReservationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ReservationId) {
		toSerialize["reservationId"] = o.ReservationId
	}
	if !IsNil(o.ExpectedReturnTime) {
		toSerialize["expectedReturnTime"] = o.ExpectedReturnTime
	}
	if !IsNil(o.ETRComments) {
		toSerialize["eTRComments"] = o.ETRComments
	}
	if !IsNil(o.ReservationCommunication) {
		toSerialize["reservationCommunication"] = o.ReservationCommunication
	}
	if !IsNil(o.OptedForCommunication) {
		toSerialize["optedForCommunication"] = o.OptedForCommunication
	}
	return toSerialize, nil
}

type NullableAdvanceCheckInReservationType struct {
	value *AdvanceCheckInReservationType
	isSet bool
}

func (v NullableAdvanceCheckInReservationType) Get() *AdvanceCheckInReservationType {
	return v.value
}

func (v *NullableAdvanceCheckInReservationType) Set(val *AdvanceCheckInReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvanceCheckInReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvanceCheckInReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvanceCheckInReservationType(val *AdvanceCheckInReservationType) *NullableAdvanceCheckInReservationType {
	return &NullableAdvanceCheckInReservationType{value: val, isSet: true}
}

func (v NullableAdvanceCheckInReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvanceCheckInReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


