/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// HotelRoomsOrderBy This type is used to support various sortings for available rooms search results.
type HotelRoomsOrderBy string

// List of hotelRoomsOrderBy
const (
	HOTELROOMSORDERBY_FORECAST_ROTATION_POINTS HotelRoomsOrderBy = "ForecastRotationPoints"
)

// All allowed values of HotelRoomsOrderBy enum
var AllowedHotelRoomsOrderByEnumValues = []HotelRoomsOrderBy{
	"ForecastRotationPoints",
}

func (v *HotelRoomsOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HotelRoomsOrderBy(value)
	for _, existing := range AllowedHotelRoomsOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HotelRoomsOrderBy", value)
}

// NewHotelRoomsOrderByFromValue returns a pointer to a valid HotelRoomsOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHotelRoomsOrderByFromValue(v string) (*HotelRoomsOrderBy, error) {
	ev := HotelRoomsOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HotelRoomsOrderBy: valid values are %v", v, AllowedHotelRoomsOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HotelRoomsOrderBy) IsValid() bool {
	for _, existing := range AllowedHotelRoomsOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to hotelRoomsOrderBy value
func (v HotelRoomsOrderBy) Ptr() *HotelRoomsOrderBy {
	return &v
}

type NullableHotelRoomsOrderBy struct {
	value *HotelRoomsOrderBy
	isSet bool
}

func (v NullableHotelRoomsOrderBy) Get() *HotelRoomsOrderBy {
	return v.value
}

func (v *NullableHotelRoomsOrderBy) Set(val *HotelRoomsOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullableHotelRoomsOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullableHotelRoomsOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotelRoomsOrderBy(val *HotelRoomsOrderBy) *NullableHotelRoomsOrderBy {
	return &NullableHotelRoomsOrderBy{value: val, isSet: true}
}

func (v NullableHotelRoomsOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotelRoomsOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

