/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// ExternalRoomKeyType Simple type for representing room key request type. 'HardKey' = request for physical key card with RFID; 'MobileKey' = request for mobile key (no physical key); 'PinCode' = request for PinCode; 'KeyPayload' = request Key image from DLS System
type ExternalRoomKeyType string

// List of externalRoomKeyType
const (
	EXTERNALROOMKEYTYPE_HARD_KEY ExternalRoomKeyType = "HardKey"
	EXTERNALROOMKEYTYPE_MOBILE_KEY ExternalRoomKeyType = "MobileKey"
	EXTERNALROOMKEYTYPE_PIN_CODE ExternalRoomKeyType = "PinCode"
	EXTERNALROOMKEYTYPE_KEY_PAYLOAD ExternalRoomKeyType = "KeyPayload"
)

// All allowed values of ExternalRoomKeyType enum
var AllowedExternalRoomKeyTypeEnumValues = []ExternalRoomKeyType{
	"HardKey",
	"MobileKey",
	"PinCode",
	"KeyPayload",
}

func (v *ExternalRoomKeyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalRoomKeyType(value)
	for _, existing := range AllowedExternalRoomKeyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalRoomKeyType", value)
}

// NewExternalRoomKeyTypeFromValue returns a pointer to a valid ExternalRoomKeyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalRoomKeyTypeFromValue(v string) (*ExternalRoomKeyType, error) {
	ev := ExternalRoomKeyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalRoomKeyType: valid values are %v", v, AllowedExternalRoomKeyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalRoomKeyType) IsValid() bool {
	for _, existing := range AllowedExternalRoomKeyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to externalRoomKeyType value
func (v ExternalRoomKeyType) Ptr() *ExternalRoomKeyType {
	return &v
}

type NullableExternalRoomKeyType struct {
	value *ExternalRoomKeyType
	isSet bool
}

func (v NullableExternalRoomKeyType) Get() *ExternalRoomKeyType {
	return v.value
}

func (v *NullableExternalRoomKeyType) Set(val *ExternalRoomKeyType) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalRoomKeyType) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalRoomKeyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalRoomKeyType(val *ExternalRoomKeyType) *NullableExternalRoomKeyType {
	return &NullableExternalRoomKeyType{value: val, isSet: true}
}

func (v NullableExternalRoomKeyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalRoomKeyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

