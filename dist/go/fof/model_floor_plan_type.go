/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the FloorPlanType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FloorPlanType{}

// FloorPlanType Floor information containing collection of Room records that contain Housekeeping and Out Of Order information.
type FloorPlanType struct {
	Rooms []FloorPlanRoomType `json:"rooms,omitempty"`
	HotelId *string `json:"hotelId,omitempty"`
	SiteCode *string `json:"siteCode,omitempty"`
	SiteDescription *string `json:"siteDescription,omitempty"`
}

// NewFloorPlanType instantiates a new FloorPlanType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFloorPlanType() *FloorPlanType {
	this := FloorPlanType{}
	return &this
}

// NewFloorPlanTypeWithDefaults instantiates a new FloorPlanType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFloorPlanTypeWithDefaults() *FloorPlanType {
	this := FloorPlanType{}
	return &this
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *FloorPlanType) GetRooms() []FloorPlanRoomType {
	if o == nil || IsNil(o.Rooms) {
		var ret []FloorPlanRoomType
		return ret
	}
	return o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloorPlanType) GetRoomsOk() ([]FloorPlanRoomType, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *FloorPlanType) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given []FloorPlanRoomType and assigns it to the Rooms field.
func (o *FloorPlanType) SetRooms(v []FloorPlanRoomType) {
	o.Rooms = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FloorPlanType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloorPlanType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FloorPlanType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FloorPlanType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetSiteCode returns the SiteCode field value if set, zero value otherwise.
func (o *FloorPlanType) GetSiteCode() string {
	if o == nil || IsNil(o.SiteCode) {
		var ret string
		return ret
	}
	return *o.SiteCode
}

// GetSiteCodeOk returns a tuple with the SiteCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloorPlanType) GetSiteCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SiteCode) {
		return nil, false
	}
	return o.SiteCode, true
}

// HasSiteCode returns a boolean if a field has been set.
func (o *FloorPlanType) HasSiteCode() bool {
	if o != nil && !IsNil(o.SiteCode) {
		return true
	}

	return false
}

// SetSiteCode gets a reference to the given string and assigns it to the SiteCode field.
func (o *FloorPlanType) SetSiteCode(v string) {
	o.SiteCode = &v
}

// GetSiteDescription returns the SiteDescription field value if set, zero value otherwise.
func (o *FloorPlanType) GetSiteDescription() string {
	if o == nil || IsNil(o.SiteDescription) {
		var ret string
		return ret
	}
	return *o.SiteDescription
}

// GetSiteDescriptionOk returns a tuple with the SiteDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloorPlanType) GetSiteDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SiteDescription) {
		return nil, false
	}
	return o.SiteDescription, true
}

// HasSiteDescription returns a boolean if a field has been set.
func (o *FloorPlanType) HasSiteDescription() bool {
	if o != nil && !IsNil(o.SiteDescription) {
		return true
	}

	return false
}

// SetSiteDescription gets a reference to the given string and assigns it to the SiteDescription field.
func (o *FloorPlanType) SetSiteDescription(v string) {
	o.SiteDescription = &v
}

func (o FloorPlanType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FloorPlanType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.SiteCode) {
		toSerialize["siteCode"] = o.SiteCode
	}
	if !IsNil(o.SiteDescription) {
		toSerialize["siteDescription"] = o.SiteDescription
	}
	return toSerialize, nil
}

type NullableFloorPlanType struct {
	value *FloorPlanType
	isSet bool
}

func (v NullableFloorPlanType) Get() *FloorPlanType {
	return v.value
}

func (v *NullableFloorPlanType) Set(val *FloorPlanType) {
	v.value = val
	v.isSet = true
}

func (v NullableFloorPlanType) IsSet() bool {
	return v.isSet
}

func (v *NullableFloorPlanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFloorPlanType(val *FloorPlanType) *NullableFloorPlanType {
	return &NullableFloorPlanType{value: val, isSet: true}
}

func (v NullableFloorPlanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFloorPlanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


