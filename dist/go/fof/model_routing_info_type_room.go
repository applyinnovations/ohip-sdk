/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoutingInfoTypeRoom type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingInfoTypeRoom{}

// RoutingInfoTypeRoom Room routing type.
type RoutingInfoTypeRoom struct {
	// Room number to route the instructions.
	RoomId *string `json:"roomId,omitempty"`
	GuestNameId *UniqueIDType `json:"guestNameId,omitempty"`
	// Display Name for the guest.
	GuestDisplayName *string `json:"guestDisplayName,omitempty"`
	ReservationNameId *UniqueIDType `json:"reservationNameId,omitempty"`
	// Set of routing instructions associated to this routing type.
	Instructions []RoutingInstructionType `json:"instructions,omitempty"`
}

// NewRoutingInfoTypeRoom instantiates a new RoutingInfoTypeRoom object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingInfoTypeRoom() *RoutingInfoTypeRoom {
	this := RoutingInfoTypeRoom{}
	return &this
}

// NewRoutingInfoTypeRoomWithDefaults instantiates a new RoutingInfoTypeRoom object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingInfoTypeRoomWithDefaults() *RoutingInfoTypeRoom {
	this := RoutingInfoTypeRoom{}
	return &this
}

// GetRoomId returns the RoomId field value if set, zero value otherwise.
func (o *RoutingInfoTypeRoom) GetRoomId() string {
	if o == nil || IsNil(o.RoomId) {
		var ret string
		return ret
	}
	return *o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeRoom) GetRoomIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoomId) {
		return nil, false
	}
	return o.RoomId, true
}

// HasRoomId returns a boolean if a field has been set.
func (o *RoutingInfoTypeRoom) HasRoomId() bool {
	if o != nil && !IsNil(o.RoomId) {
		return true
	}

	return false
}

// SetRoomId gets a reference to the given string and assigns it to the RoomId field.
func (o *RoutingInfoTypeRoom) SetRoomId(v string) {
	o.RoomId = &v
}

// GetGuestNameId returns the GuestNameId field value if set, zero value otherwise.
func (o *RoutingInfoTypeRoom) GetGuestNameId() UniqueIDType {
	if o == nil || IsNil(o.GuestNameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.GuestNameId
}

// GetGuestNameIdOk returns a tuple with the GuestNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeRoom) GetGuestNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.GuestNameId) {
		return nil, false
	}
	return o.GuestNameId, true
}

// HasGuestNameId returns a boolean if a field has been set.
func (o *RoutingInfoTypeRoom) HasGuestNameId() bool {
	if o != nil && !IsNil(o.GuestNameId) {
		return true
	}

	return false
}

// SetGuestNameId gets a reference to the given UniqueIDType and assigns it to the GuestNameId field.
func (o *RoutingInfoTypeRoom) SetGuestNameId(v UniqueIDType) {
	o.GuestNameId = &v
}

// GetGuestDisplayName returns the GuestDisplayName field value if set, zero value otherwise.
func (o *RoutingInfoTypeRoom) GetGuestDisplayName() string {
	if o == nil || IsNil(o.GuestDisplayName) {
		var ret string
		return ret
	}
	return *o.GuestDisplayName
}

// GetGuestDisplayNameOk returns a tuple with the GuestDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeRoom) GetGuestDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestDisplayName) {
		return nil, false
	}
	return o.GuestDisplayName, true
}

// HasGuestDisplayName returns a boolean if a field has been set.
func (o *RoutingInfoTypeRoom) HasGuestDisplayName() bool {
	if o != nil && !IsNil(o.GuestDisplayName) {
		return true
	}

	return false
}

// SetGuestDisplayName gets a reference to the given string and assigns it to the GuestDisplayName field.
func (o *RoutingInfoTypeRoom) SetGuestDisplayName(v string) {
	o.GuestDisplayName = &v
}

// GetReservationNameId returns the ReservationNameId field value if set, zero value otherwise.
func (o *RoutingInfoTypeRoom) GetReservationNameId() UniqueIDType {
	if o == nil || IsNil(o.ReservationNameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ReservationNameId
}

// GetReservationNameIdOk returns a tuple with the ReservationNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeRoom) GetReservationNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationNameId) {
		return nil, false
	}
	return o.ReservationNameId, true
}

// HasReservationNameId returns a boolean if a field has been set.
func (o *RoutingInfoTypeRoom) HasReservationNameId() bool {
	if o != nil && !IsNil(o.ReservationNameId) {
		return true
	}

	return false
}

// SetReservationNameId gets a reference to the given UniqueIDType and assigns it to the ReservationNameId field.
func (o *RoutingInfoTypeRoom) SetReservationNameId(v UniqueIDType) {
	o.ReservationNameId = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *RoutingInfoTypeRoom) GetInstructions() []RoutingInstructionType {
	if o == nil || IsNil(o.Instructions) {
		var ret []RoutingInstructionType
		return ret
	}
	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingInfoTypeRoom) GetInstructionsOk() ([]RoutingInstructionType, bool) {
	if o == nil || IsNil(o.Instructions) {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *RoutingInfoTypeRoom) HasInstructions() bool {
	if o != nil && !IsNil(o.Instructions) {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []RoutingInstructionType and assigns it to the Instructions field.
func (o *RoutingInfoTypeRoom) SetInstructions(v []RoutingInstructionType) {
	o.Instructions = v
}

func (o RoutingInfoTypeRoom) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingInfoTypeRoom) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RoomId) {
		toSerialize["roomId"] = o.RoomId
	}
	if !IsNil(o.GuestNameId) {
		toSerialize["guestNameId"] = o.GuestNameId
	}
	if !IsNil(o.GuestDisplayName) {
		toSerialize["guestDisplayName"] = o.GuestDisplayName
	}
	if !IsNil(o.ReservationNameId) {
		toSerialize["reservationNameId"] = o.ReservationNameId
	}
	if !IsNil(o.Instructions) {
		toSerialize["instructions"] = o.Instructions
	}
	return toSerialize, nil
}

type NullableRoutingInfoTypeRoom struct {
	value *RoutingInfoTypeRoom
	isSet bool
}

func (v NullableRoutingInfoTypeRoom) Get() *RoutingInfoTypeRoom {
	return v.value
}

func (v *NullableRoutingInfoTypeRoom) Set(val *RoutingInfoTypeRoom) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingInfoTypeRoom) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingInfoTypeRoom) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingInfoTypeRoom(val *RoutingInfoTypeRoom) *NullableRoutingInfoTypeRoom {
	return &NullableRoutingInfoTypeRoom{value: val, isSet: true}
}

func (v NullableRoutingInfoTypeRoom) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingInfoTypeRoom) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


