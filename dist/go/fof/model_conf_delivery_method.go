/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// ConfDeliveryMethod the model 'ConfDeliveryMethod'
type ConfDeliveryMethod string

// List of confDeliveryMethod
const (
	CONFDELIVERYMETHOD_PRINT ConfDeliveryMethod = "Print"
	CONFDELIVERYMETHOD_EMAIL ConfDeliveryMethod = "Email"
	CONFDELIVERYMETHOD_FAX ConfDeliveryMethod = "Fax"
	CONFDELIVERYMETHOD_TEXT ConfDeliveryMethod = "Text"
	CONFDELIVERYMETHOD_NOT_CONFIGURED ConfDeliveryMethod = "NotConfigured"
)

// All allowed values of ConfDeliveryMethod enum
var AllowedConfDeliveryMethodEnumValues = []ConfDeliveryMethod{
	"Print",
	"Email",
	"Fax",
	"Text",
	"NotConfigured",
}

func (v *ConfDeliveryMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfDeliveryMethod(value)
	for _, existing := range AllowedConfDeliveryMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfDeliveryMethod", value)
}

// NewConfDeliveryMethodFromValue returns a pointer to a valid ConfDeliveryMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfDeliveryMethodFromValue(v string) (*ConfDeliveryMethod, error) {
	ev := ConfDeliveryMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfDeliveryMethod: valid values are %v", v, AllowedConfDeliveryMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfDeliveryMethod) IsValid() bool {
	for _, existing := range AllowedConfDeliveryMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to confDeliveryMethod value
func (v ConfDeliveryMethod) Ptr() *ConfDeliveryMethod {
	return &v
}

type NullableConfDeliveryMethod struct {
	value *ConfDeliveryMethod
	isSet bool
}

func (v NullableConfDeliveryMethod) Get() *ConfDeliveryMethod {
	return v.value
}

func (v *NullableConfDeliveryMethod) Set(val *ConfDeliveryMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableConfDeliveryMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableConfDeliveryMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfDeliveryMethod(val *ConfDeliveryMethod) *NullableConfDeliveryMethod {
	return &NullableConfDeliveryMethod{value: val, isSet: true}
}

func (v NullableConfDeliveryMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfDeliveryMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

