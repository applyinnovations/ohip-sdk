/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the DateTimeRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateTimeRangeType{}

// DateTimeRangeType Date Range with Start and End dates.
type DateTimeRangeType struct {
	// The ending value of the time span.
	End *string `json:"end,omitempty"`
	// The starting value of the time span.
	Start *string `json:"start,omitempty"`
}

// NewDateTimeRangeType instantiates a new DateTimeRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeRangeType() *DateTimeRangeType {
	this := DateTimeRangeType{}
	return &this
}

// NewDateTimeRangeTypeWithDefaults instantiates a new DateTimeRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeRangeTypeWithDefaults() *DateTimeRangeType {
	this := DateTimeRangeType{}
	return &this
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *DateTimeRangeType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeRangeType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *DateTimeRangeType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *DateTimeRangeType) SetEnd(v string) {
	o.End = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *DateTimeRangeType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeRangeType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *DateTimeRangeType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *DateTimeRangeType) SetStart(v string) {
	o.Start = &v
}

func (o DateTimeRangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateTimeRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	return toSerialize, nil
}

type NullableDateTimeRangeType struct {
	value *DateTimeRangeType
	isSet bool
}

func (v NullableDateTimeRangeType) Get() *DateTimeRangeType {
	return v.value
}

func (v *NullableDateTimeRangeType) Set(val *DateTimeRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeRangeType(val *DateTimeRangeType) *NullableDateTimeRangeType {
	return &NullableDateTimeRangeType{value: val, isSet: true}
}

func (v NullableDateTimeRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


