/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the PrintDataType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrintDataType{}

// PrintDataType Lists the text, file or picture to print onto a Guest room key (only for roomKeyType is HardKey).
type PrintDataType struct {
	// key options code.
	PrintText *string `json:"printText,omitempty"`
	// Base64 format of file representing data to print.
	PrintFile *string `json:"printFile,omitempty"`
	// Base64 format of picture representing data to print.
	PrintPicture *string `json:"printPicture,omitempty"`
}

// NewPrintDataType instantiates a new PrintDataType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrintDataType() *PrintDataType {
	this := PrintDataType{}
	return &this
}

// NewPrintDataTypeWithDefaults instantiates a new PrintDataType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrintDataTypeWithDefaults() *PrintDataType {
	this := PrintDataType{}
	return &this
}

// GetPrintText returns the PrintText field value if set, zero value otherwise.
func (o *PrintDataType) GetPrintText() string {
	if o == nil || IsNil(o.PrintText) {
		var ret string
		return ret
	}
	return *o.PrintText
}

// GetPrintTextOk returns a tuple with the PrintText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintDataType) GetPrintTextOk() (*string, bool) {
	if o == nil || IsNil(o.PrintText) {
		return nil, false
	}
	return o.PrintText, true
}

// HasPrintText returns a boolean if a field has been set.
func (o *PrintDataType) HasPrintText() bool {
	if o != nil && !IsNil(o.PrintText) {
		return true
	}

	return false
}

// SetPrintText gets a reference to the given string and assigns it to the PrintText field.
func (o *PrintDataType) SetPrintText(v string) {
	o.PrintText = &v
}

// GetPrintFile returns the PrintFile field value if set, zero value otherwise.
func (o *PrintDataType) GetPrintFile() string {
	if o == nil || IsNil(o.PrintFile) {
		var ret string
		return ret
	}
	return *o.PrintFile
}

// GetPrintFileOk returns a tuple with the PrintFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintDataType) GetPrintFileOk() (*string, bool) {
	if o == nil || IsNil(o.PrintFile) {
		return nil, false
	}
	return o.PrintFile, true
}

// HasPrintFile returns a boolean if a field has been set.
func (o *PrintDataType) HasPrintFile() bool {
	if o != nil && !IsNil(o.PrintFile) {
		return true
	}

	return false
}

// SetPrintFile gets a reference to the given string and assigns it to the PrintFile field.
func (o *PrintDataType) SetPrintFile(v string) {
	o.PrintFile = &v
}

// GetPrintPicture returns the PrintPicture field value if set, zero value otherwise.
func (o *PrintDataType) GetPrintPicture() string {
	if o == nil || IsNil(o.PrintPicture) {
		var ret string
		return ret
	}
	return *o.PrintPicture
}

// GetPrintPictureOk returns a tuple with the PrintPicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintDataType) GetPrintPictureOk() (*string, bool) {
	if o == nil || IsNil(o.PrintPicture) {
		return nil, false
	}
	return o.PrintPicture, true
}

// HasPrintPicture returns a boolean if a field has been set.
func (o *PrintDataType) HasPrintPicture() bool {
	if o != nil && !IsNil(o.PrintPicture) {
		return true
	}

	return false
}

// SetPrintPicture gets a reference to the given string and assigns it to the PrintPicture field.
func (o *PrintDataType) SetPrintPicture(v string) {
	o.PrintPicture = &v
}

func (o PrintDataType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrintDataType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PrintText) {
		toSerialize["printText"] = o.PrintText
	}
	if !IsNil(o.PrintFile) {
		toSerialize["printFile"] = o.PrintFile
	}
	if !IsNil(o.PrintPicture) {
		toSerialize["printPicture"] = o.PrintPicture
	}
	return toSerialize, nil
}

type NullablePrintDataType struct {
	value *PrintDataType
	isSet bool
}

func (v NullablePrintDataType) Get() *PrintDataType {
	return v.value
}

func (v *NullablePrintDataType) Set(val *PrintDataType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrintDataType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrintDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrintDataType(val *PrintDataType) *NullablePrintDataType {
	return &NullablePrintDataType{value: val, isSet: true}
}

func (v NullablePrintDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrintDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


