/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// checks if the RoomKeyExternalDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomKeyExternalDetails{}

// RoomKeyExternalDetails Response for the key request made to DLS from Opera PMS.
type RoomKeyExternalDetails struct {
	// Unique Id as defined by Door Lock System.
	EncoderId *string `json:"encoderId,omitempty"`
	// The Unique PMS encoder name linked with the encoderId
	EncoderTerminal string `json:"encoderTerminal"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
	// The PMS room number to generate a key for.
	RoomId string `json:"roomId"`
	// KeyTrack Data.
	KeyTrack []KeyTrackType `json:"keyTrack,omitempty"`
	// Lists all PMS access areas - only send in response for keyType: 'Read' request
	KeyOptions *string `json:"keyOptions,omitempty"`
	// Date/Time Key is valid from - only send in response for keyType: 'Read' request
	KeyValidityStart *string `json:"keyValidityStart,omitempty"`
	// Date/Time Key is valid to - only send in response for keyType: 'Read' request
	KeyValidityEnd *string `json:"keyValidityEnd,omitempty"`
	// A user-friendly text with information on why a request is not successful
	ResponseText *string `json:"responseText,omitempty"`
	ResponseCode RoomKeyResponseCodeType `json:"responseCode"`
	// Collection of additional rooms to be included in key creation of reservation room.
	AdditionalRooms []string `json:"additionalRooms,omitempty"`
}

type _RoomKeyExternalDetails RoomKeyExternalDetails

// NewRoomKeyExternalDetails instantiates a new RoomKeyExternalDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomKeyExternalDetails(encoderTerminal string, roomId string, responseCode RoomKeyResponseCodeType) *RoomKeyExternalDetails {
	this := RoomKeyExternalDetails{}
	this.EncoderTerminal = encoderTerminal
	this.RoomId = roomId
	this.ResponseCode = responseCode
	return &this
}

// NewRoomKeyExternalDetailsWithDefaults instantiates a new RoomKeyExternalDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomKeyExternalDetailsWithDefaults() *RoomKeyExternalDetails {
	this := RoomKeyExternalDetails{}
	return &this
}

// GetEncoderId returns the EncoderId field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetEncoderId() string {
	if o == nil || IsNil(o.EncoderId) {
		var ret string
		return ret
	}
	return *o.EncoderId
}

// GetEncoderIdOk returns a tuple with the EncoderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetEncoderIdOk() (*string, bool) {
	if o == nil || IsNil(o.EncoderId) {
		return nil, false
	}
	return o.EncoderId, true
}

// HasEncoderId returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasEncoderId() bool {
	if o != nil && !IsNil(o.EncoderId) {
		return true
	}

	return false
}

// SetEncoderId gets a reference to the given string and assigns it to the EncoderId field.
func (o *RoomKeyExternalDetails) SetEncoderId(v string) {
	o.EncoderId = &v
}

// GetEncoderTerminal returns the EncoderTerminal field value
func (o *RoomKeyExternalDetails) GetEncoderTerminal() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncoderTerminal
}

// GetEncoderTerminalOk returns a tuple with the EncoderTerminal field value
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetEncoderTerminalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncoderTerminal, true
}

// SetEncoderTerminal sets field value
func (o *RoomKeyExternalDetails) SetEncoderTerminal(v string) {
	o.EncoderTerminal = v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *RoomKeyExternalDetails) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

// GetRoomId returns the RoomId field value
func (o *RoomKeyExternalDetails) GetRoomId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoomId
}

// GetRoomIdOk returns a tuple with the RoomId field value
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetRoomIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoomId, true
}

// SetRoomId sets field value
func (o *RoomKeyExternalDetails) SetRoomId(v string) {
	o.RoomId = v
}

// GetKeyTrack returns the KeyTrack field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetKeyTrack() []KeyTrackType {
	if o == nil || IsNil(o.KeyTrack) {
		var ret []KeyTrackType
		return ret
	}
	return o.KeyTrack
}

// GetKeyTrackOk returns a tuple with the KeyTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetKeyTrackOk() ([]KeyTrackType, bool) {
	if o == nil || IsNil(o.KeyTrack) {
		return nil, false
	}
	return o.KeyTrack, true
}

// HasKeyTrack returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasKeyTrack() bool {
	if o != nil && !IsNil(o.KeyTrack) {
		return true
	}

	return false
}

// SetKeyTrack gets a reference to the given []KeyTrackType and assigns it to the KeyTrack field.
func (o *RoomKeyExternalDetails) SetKeyTrack(v []KeyTrackType) {
	o.KeyTrack = v
}

// GetKeyOptions returns the KeyOptions field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetKeyOptions() string {
	if o == nil || IsNil(o.KeyOptions) {
		var ret string
		return ret
	}
	return *o.KeyOptions
}

// GetKeyOptionsOk returns a tuple with the KeyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetKeyOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.KeyOptions) {
		return nil, false
	}
	return o.KeyOptions, true
}

// HasKeyOptions returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasKeyOptions() bool {
	if o != nil && !IsNil(o.KeyOptions) {
		return true
	}

	return false
}

// SetKeyOptions gets a reference to the given string and assigns it to the KeyOptions field.
func (o *RoomKeyExternalDetails) SetKeyOptions(v string) {
	o.KeyOptions = &v
}

// GetKeyValidityStart returns the KeyValidityStart field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetKeyValidityStart() string {
	if o == nil || IsNil(o.KeyValidityStart) {
		var ret string
		return ret
	}
	return *o.KeyValidityStart
}

// GetKeyValidityStartOk returns a tuple with the KeyValidityStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetKeyValidityStartOk() (*string, bool) {
	if o == nil || IsNil(o.KeyValidityStart) {
		return nil, false
	}
	return o.KeyValidityStart, true
}

// HasKeyValidityStart returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasKeyValidityStart() bool {
	if o != nil && !IsNil(o.KeyValidityStart) {
		return true
	}

	return false
}

// SetKeyValidityStart gets a reference to the given string and assigns it to the KeyValidityStart field.
func (o *RoomKeyExternalDetails) SetKeyValidityStart(v string) {
	o.KeyValidityStart = &v
}

// GetKeyValidityEnd returns the KeyValidityEnd field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetKeyValidityEnd() string {
	if o == nil || IsNil(o.KeyValidityEnd) {
		var ret string
		return ret
	}
	return *o.KeyValidityEnd
}

// GetKeyValidityEndOk returns a tuple with the KeyValidityEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetKeyValidityEndOk() (*string, bool) {
	if o == nil || IsNil(o.KeyValidityEnd) {
		return nil, false
	}
	return o.KeyValidityEnd, true
}

// HasKeyValidityEnd returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasKeyValidityEnd() bool {
	if o != nil && !IsNil(o.KeyValidityEnd) {
		return true
	}

	return false
}

// SetKeyValidityEnd gets a reference to the given string and assigns it to the KeyValidityEnd field.
func (o *RoomKeyExternalDetails) SetKeyValidityEnd(v string) {
	o.KeyValidityEnd = &v
}

// GetResponseText returns the ResponseText field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetResponseText() string {
	if o == nil || IsNil(o.ResponseText) {
		var ret string
		return ret
	}
	return *o.ResponseText
}

// GetResponseTextOk returns a tuple with the ResponseText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetResponseTextOk() (*string, bool) {
	if o == nil || IsNil(o.ResponseText) {
		return nil, false
	}
	return o.ResponseText, true
}

// HasResponseText returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasResponseText() bool {
	if o != nil && !IsNil(o.ResponseText) {
		return true
	}

	return false
}

// SetResponseText gets a reference to the given string and assigns it to the ResponseText field.
func (o *RoomKeyExternalDetails) SetResponseText(v string) {
	o.ResponseText = &v
}

// GetResponseCode returns the ResponseCode field value
func (o *RoomKeyExternalDetails) GetResponseCode() RoomKeyResponseCodeType {
	if o == nil {
		var ret RoomKeyResponseCodeType
		return ret
	}

	return o.ResponseCode
}

// GetResponseCodeOk returns a tuple with the ResponseCode field value
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetResponseCodeOk() (*RoomKeyResponseCodeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCode, true
}

// SetResponseCode sets field value
func (o *RoomKeyExternalDetails) SetResponseCode(v RoomKeyResponseCodeType) {
	o.ResponseCode = v
}

// GetAdditionalRooms returns the AdditionalRooms field value if set, zero value otherwise.
func (o *RoomKeyExternalDetails) GetAdditionalRooms() []string {
	if o == nil || IsNil(o.AdditionalRooms) {
		var ret []string
		return ret
	}
	return o.AdditionalRooms
}

// GetAdditionalRoomsOk returns a tuple with the AdditionalRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomKeyExternalDetails) GetAdditionalRoomsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalRooms) {
		return nil, false
	}
	return o.AdditionalRooms, true
}

// HasAdditionalRooms returns a boolean if a field has been set.
func (o *RoomKeyExternalDetails) HasAdditionalRooms() bool {
	if o != nil && !IsNil(o.AdditionalRooms) {
		return true
	}

	return false
}

// SetAdditionalRooms gets a reference to the given []string and assigns it to the AdditionalRooms field.
func (o *RoomKeyExternalDetails) SetAdditionalRooms(v []string) {
	o.AdditionalRooms = v
}

func (o RoomKeyExternalDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomKeyExternalDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncoderId) {
		toSerialize["encoderId"] = o.EncoderId
	}
	toSerialize["encoderTerminal"] = o.EncoderTerminal
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	toSerialize["roomId"] = o.RoomId
	if !IsNil(o.KeyTrack) {
		toSerialize["keyTrack"] = o.KeyTrack
	}
	if !IsNil(o.KeyOptions) {
		toSerialize["keyOptions"] = o.KeyOptions
	}
	if !IsNil(o.KeyValidityStart) {
		toSerialize["keyValidityStart"] = o.KeyValidityStart
	}
	if !IsNil(o.KeyValidityEnd) {
		toSerialize["keyValidityEnd"] = o.KeyValidityEnd
	}
	if !IsNil(o.ResponseText) {
		toSerialize["responseText"] = o.ResponseText
	}
	toSerialize["responseCode"] = o.ResponseCode
	if !IsNil(o.AdditionalRooms) {
		toSerialize["additionalRooms"] = o.AdditionalRooms
	}
	return toSerialize, nil
}

func (o *RoomKeyExternalDetails) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"encoderTerminal",
		"roomId",
		"responseCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoomKeyExternalDetails := _RoomKeyExternalDetails{}

	err = json.Unmarshal(bytes, &varRoomKeyExternalDetails)

	if err != nil {
		return err
	}

	*o = RoomKeyExternalDetails(varRoomKeyExternalDetails)

	return err
}

type NullableRoomKeyExternalDetails struct {
	value *RoomKeyExternalDetails
	isSet bool
}

func (v NullableRoomKeyExternalDetails) Get() *RoomKeyExternalDetails {
	return v.value
}

func (v *NullableRoomKeyExternalDetails) Set(val *RoomKeyExternalDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomKeyExternalDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomKeyExternalDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomKeyExternalDetails(val *RoomKeyExternalDetails) *NullableRoomKeyExternalDetails {
	return &NullableRoomKeyExternalDetails{value: val, isSet: true}
}

func (v NullableRoomKeyExternalDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomKeyExternalDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


