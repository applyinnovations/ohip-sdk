/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
	"fmt"
)

// ScheduledRoomMoveStatusType Flag indicating scheduled room move status.
type ScheduledRoomMoveStatusType string

// List of scheduledRoomMoveStatusType
const (
	SCHEDULEDROOMMOVESTATUSTYPE_COMPLETED ScheduledRoomMoveStatusType = "Completed"
	SCHEDULEDROOMMOVESTATUSTYPE_PENDING ScheduledRoomMoveStatusType = "Pending"
)

// All allowed values of ScheduledRoomMoveStatusType enum
var AllowedScheduledRoomMoveStatusTypeEnumValues = []ScheduledRoomMoveStatusType{
	"Completed",
	"Pending",
}

func (v *ScheduledRoomMoveStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduledRoomMoveStatusType(value)
	for _, existing := range AllowedScheduledRoomMoveStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduledRoomMoveStatusType", value)
}

// NewScheduledRoomMoveStatusTypeFromValue returns a pointer to a valid ScheduledRoomMoveStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduledRoomMoveStatusTypeFromValue(v string) (*ScheduledRoomMoveStatusType, error) {
	ev := ScheduledRoomMoveStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScheduledRoomMoveStatusType: valid values are %v", v, AllowedScheduledRoomMoveStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduledRoomMoveStatusType) IsValid() bool {
	for _, existing := range AllowedScheduledRoomMoveStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to scheduledRoomMoveStatusType value
func (v ScheduledRoomMoveStatusType) Ptr() *ScheduledRoomMoveStatusType {
	return &v
}

type NullableScheduledRoomMoveStatusType struct {
	value *ScheduledRoomMoveStatusType
	isSet bool
}

func (v NullableScheduledRoomMoveStatusType) Get() *ScheduledRoomMoveStatusType {
	return v.value
}

func (v *NullableScheduledRoomMoveStatusType) Set(val *ScheduledRoomMoveStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduledRoomMoveStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduledRoomMoveStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduledRoomMoveStatusType(val *ScheduledRoomMoveStatusType) *NullableScheduledRoomMoveStatusType {
	return &NullableScheduledRoomMoveStatusType{value: val, isSet: true}
}

func (v NullableScheduledRoomMoveStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduledRoomMoveStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

