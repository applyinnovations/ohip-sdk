/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoomPersonsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomPersonsType{}

// RoomPersonsType struct for RoomPersonsType
type RoomPersonsType struct {
	FrontOfficePersons *int32 `json:"frontOfficePersons,omitempty"`
	HouseKeepingPersons *int32 `json:"houseKeepingPersons,omitempty"`
}

// NewRoomPersonsType instantiates a new RoomPersonsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomPersonsType() *RoomPersonsType {
	this := RoomPersonsType{}
	return &this
}

// NewRoomPersonsTypeWithDefaults instantiates a new RoomPersonsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomPersonsTypeWithDefaults() *RoomPersonsType {
	this := RoomPersonsType{}
	return &this
}

// GetFrontOfficePersons returns the FrontOfficePersons field value if set, zero value otherwise.
func (o *RoomPersonsType) GetFrontOfficePersons() int32 {
	if o == nil || IsNil(o.FrontOfficePersons) {
		var ret int32
		return ret
	}
	return *o.FrontOfficePersons
}

// GetFrontOfficePersonsOk returns a tuple with the FrontOfficePersons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPersonsType) GetFrontOfficePersonsOk() (*int32, bool) {
	if o == nil || IsNil(o.FrontOfficePersons) {
		return nil, false
	}
	return o.FrontOfficePersons, true
}

// HasFrontOfficePersons returns a boolean if a field has been set.
func (o *RoomPersonsType) HasFrontOfficePersons() bool {
	if o != nil && !IsNil(o.FrontOfficePersons) {
		return true
	}

	return false
}

// SetFrontOfficePersons gets a reference to the given int32 and assigns it to the FrontOfficePersons field.
func (o *RoomPersonsType) SetFrontOfficePersons(v int32) {
	o.FrontOfficePersons = &v
}

// GetHouseKeepingPersons returns the HouseKeepingPersons field value if set, zero value otherwise.
func (o *RoomPersonsType) GetHouseKeepingPersons() int32 {
	if o == nil || IsNil(o.HouseKeepingPersons) {
		var ret int32
		return ret
	}
	return *o.HouseKeepingPersons
}

// GetHouseKeepingPersonsOk returns a tuple with the HouseKeepingPersons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomPersonsType) GetHouseKeepingPersonsOk() (*int32, bool) {
	if o == nil || IsNil(o.HouseKeepingPersons) {
		return nil, false
	}
	return o.HouseKeepingPersons, true
}

// HasHouseKeepingPersons returns a boolean if a field has been set.
func (o *RoomPersonsType) HasHouseKeepingPersons() bool {
	if o != nil && !IsNil(o.HouseKeepingPersons) {
		return true
	}

	return false
}

// SetHouseKeepingPersons gets a reference to the given int32 and assigns it to the HouseKeepingPersons field.
func (o *RoomPersonsType) SetHouseKeepingPersons(v int32) {
	o.HouseKeepingPersons = &v
}

func (o RoomPersonsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomPersonsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FrontOfficePersons) {
		toSerialize["frontOfficePersons"] = o.FrontOfficePersons
	}
	if !IsNil(o.HouseKeepingPersons) {
		toSerialize["houseKeepingPersons"] = o.HouseKeepingPersons
	}
	return toSerialize, nil
}

type NullableRoomPersonsType struct {
	value *RoomPersonsType
	isSet bool
}

func (v NullableRoomPersonsType) Get() *RoomPersonsType {
	return v.value
}

func (v *NullableRoomPersonsType) Set(val *RoomPersonsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomPersonsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomPersonsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomPersonsType(val *RoomPersonsType) *NullableRoomPersonsType {
	return &NullableRoomPersonsType{value: val, isSet: true}
}

func (v NullableRoomPersonsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomPersonsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


