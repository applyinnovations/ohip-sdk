/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the ReservationsInQueue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationsInQueue{}

// ReservationsInQueue Response for the operation to fetch Reservations in Queue
type ReservationsInQueue struct {
	Links []InstanceLink `json:"links,omitempty"`
	Reservations *ReservationList `json:"reservations,omitempty"`
	RoomStatusInfo *HotelRoomsType `json:"roomStatusInfo,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewReservationsInQueue instantiates a new ReservationsInQueue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationsInQueue() *ReservationsInQueue {
	this := ReservationsInQueue{}
	return &this
}

// NewReservationsInQueueWithDefaults instantiates a new ReservationsInQueue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationsInQueueWithDefaults() *ReservationsInQueue {
	this := ReservationsInQueue{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ReservationsInQueue) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsInQueue) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ReservationsInQueue) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ReservationsInQueue) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetReservations returns the Reservations field value if set, zero value otherwise.
func (o *ReservationsInQueue) GetReservations() ReservationList {
	if o == nil || IsNil(o.Reservations) {
		var ret ReservationList
		return ret
	}
	return *o.Reservations
}

// GetReservationsOk returns a tuple with the Reservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsInQueue) GetReservationsOk() (*ReservationList, bool) {
	if o == nil || IsNil(o.Reservations) {
		return nil, false
	}
	return o.Reservations, true
}

// HasReservations returns a boolean if a field has been set.
func (o *ReservationsInQueue) HasReservations() bool {
	if o != nil && !IsNil(o.Reservations) {
		return true
	}

	return false
}

// SetReservations gets a reference to the given ReservationList and assigns it to the Reservations field.
func (o *ReservationsInQueue) SetReservations(v ReservationList) {
	o.Reservations = &v
}

// GetRoomStatusInfo returns the RoomStatusInfo field value if set, zero value otherwise.
func (o *ReservationsInQueue) GetRoomStatusInfo() HotelRoomsType {
	if o == nil || IsNil(o.RoomStatusInfo) {
		var ret HotelRoomsType
		return ret
	}
	return *o.RoomStatusInfo
}

// GetRoomStatusInfoOk returns a tuple with the RoomStatusInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsInQueue) GetRoomStatusInfoOk() (*HotelRoomsType, bool) {
	if o == nil || IsNil(o.RoomStatusInfo) {
		return nil, false
	}
	return o.RoomStatusInfo, true
}

// HasRoomStatusInfo returns a boolean if a field has been set.
func (o *ReservationsInQueue) HasRoomStatusInfo() bool {
	if o != nil && !IsNil(o.RoomStatusInfo) {
		return true
	}

	return false
}

// SetRoomStatusInfo gets a reference to the given HotelRoomsType and assigns it to the RoomStatusInfo field.
func (o *ReservationsInQueue) SetRoomStatusInfo(v HotelRoomsType) {
	o.RoomStatusInfo = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ReservationsInQueue) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationsInQueue) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ReservationsInQueue) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ReservationsInQueue) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ReservationsInQueue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationsInQueue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Reservations) {
		toSerialize["reservations"] = o.Reservations
	}
	if !IsNil(o.RoomStatusInfo) {
		toSerialize["roomStatusInfo"] = o.RoomStatusInfo
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableReservationsInQueue struct {
	value *ReservationsInQueue
	isSet bool
}

func (v NullableReservationsInQueue) Get() *ReservationsInQueue {
	return v.value
}

func (v *NullableReservationsInQueue) Set(val *ReservationsInQueue) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationsInQueue) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationsInQueue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationsInQueue(val *ReservationsInQueue) *NullableReservationsInQueue {
	return &NullableReservationsInQueue{value: val, isSet: true}
}

func (v NullableReservationsInQueue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationsInQueue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


