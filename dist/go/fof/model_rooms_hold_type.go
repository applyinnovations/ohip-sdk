/*
OPERA Cloud Front Desk Operations Service

APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fof

import (
	"encoding/json"
)

// checks if the RoomsHoldType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomsHoldType{}

// RoomsHoldType Hold reason and the list of the rooms that are to be put on hold under that reason.
type RoomsHoldType struct {
	// Comments to the rooms being put on hold.
	Comments *string `json:"comments,omitempty"`
	// Resort where room hold is to take place.
	HotelId *string `json:"hotelId,omitempty"`
	// List of rooms that are to be put on hold.
	Reason *string `json:"reason,omitempty"`
	// Collection of room numbers that are to be placed on hold.
	Rooms []string `json:"rooms,omitempty"`
}

// NewRoomsHoldType instantiates a new RoomsHoldType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomsHoldType() *RoomsHoldType {
	this := RoomsHoldType{}
	return &this
}

// NewRoomsHoldTypeWithDefaults instantiates a new RoomsHoldType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomsHoldTypeWithDefaults() *RoomsHoldType {
	this := RoomsHoldType{}
	return &this
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *RoomsHoldType) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsHoldType) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *RoomsHoldType) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *RoomsHoldType) SetComments(v string) {
	o.Comments = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RoomsHoldType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsHoldType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RoomsHoldType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RoomsHoldType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RoomsHoldType) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsHoldType) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RoomsHoldType) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RoomsHoldType) SetReason(v string) {
	o.Reason = &v
}

// GetRooms returns the Rooms field value if set, zero value otherwise.
func (o *RoomsHoldType) GetRooms() []string {
	if o == nil || IsNil(o.Rooms) {
		var ret []string
		return ret
	}
	return o.Rooms
}

// GetRoomsOk returns a tuple with the Rooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomsHoldType) GetRoomsOk() ([]string, bool) {
	if o == nil || IsNil(o.Rooms) {
		return nil, false
	}
	return o.Rooms, true
}

// HasRooms returns a boolean if a field has been set.
func (o *RoomsHoldType) HasRooms() bool {
	if o != nil && !IsNil(o.Rooms) {
		return true
	}

	return false
}

// SetRooms gets a reference to the given []string and assigns it to the Rooms field.
func (o *RoomsHoldType) SetRooms(v []string) {
	o.Rooms = v
}

func (o RoomsHoldType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomsHoldType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Rooms) {
		toSerialize["rooms"] = o.Rooms
	}
	return toSerialize, nil
}

type NullableRoomsHoldType struct {
	value *RoomsHoldType
	isSet bool
}

func (v NullableRoomsHoldType) Get() *RoomsHoldType {
	return v.value
}

func (v *NullableRoomsHoldType) Set(val *RoomsHoldType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomsHoldType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomsHoldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomsHoldType(val *RoomsHoldType) *NullableRoomsHoldType {
	return &NullableRoomsHoldType{value: val, isSet: true}
}

func (v NullableRoomsHoldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomsHoldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


