/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportMappingLinkedCodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMappingLinkedCodes{}

// ExportMappingLinkedCodes Response to fetch codes linked to export mapping codes.
type ExportMappingLinkedCodes struct {
	// The linked codes for the given hotel.
	LinkedCodes []ExportMappingLinkedCodeType `json:"linkedCodes,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	MasterInfo *ExportMappingMasterInfoType `json:"masterInfo,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewExportMappingLinkedCodes instantiates a new ExportMappingLinkedCodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMappingLinkedCodes() *ExportMappingLinkedCodes {
	this := ExportMappingLinkedCodes{}
	return &this
}

// NewExportMappingLinkedCodesWithDefaults instantiates a new ExportMappingLinkedCodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMappingLinkedCodesWithDefaults() *ExportMappingLinkedCodes {
	this := ExportMappingLinkedCodes{}
	return &this
}

// GetLinkedCodes returns the LinkedCodes field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodes) GetLinkedCodes() []ExportMappingLinkedCodeType {
	if o == nil || IsNil(o.LinkedCodes) {
		var ret []ExportMappingLinkedCodeType
		return ret
	}
	return o.LinkedCodes
}

// GetLinkedCodesOk returns a tuple with the LinkedCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodes) GetLinkedCodesOk() ([]ExportMappingLinkedCodeType, bool) {
	if o == nil || IsNil(o.LinkedCodes) {
		return nil, false
	}
	return o.LinkedCodes, true
}

// HasLinkedCodes returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodes) HasLinkedCodes() bool {
	if o != nil && !IsNil(o.LinkedCodes) {
		return true
	}

	return false
}

// SetLinkedCodes gets a reference to the given []ExportMappingLinkedCodeType and assigns it to the LinkedCodes field.
func (o *ExportMappingLinkedCodes) SetLinkedCodes(v []ExportMappingLinkedCodeType) {
	o.LinkedCodes = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodes) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodes) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodes) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ExportMappingLinkedCodes) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetMasterInfo returns the MasterInfo field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodes) GetMasterInfo() ExportMappingMasterInfoType {
	if o == nil || IsNil(o.MasterInfo) {
		var ret ExportMappingMasterInfoType
		return ret
	}
	return *o.MasterInfo
}

// GetMasterInfoOk returns a tuple with the MasterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodes) GetMasterInfoOk() (*ExportMappingMasterInfoType, bool) {
	if o == nil || IsNil(o.MasterInfo) {
		return nil, false
	}
	return o.MasterInfo, true
}

// HasMasterInfo returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodes) HasMasterInfo() bool {
	if o != nil && !IsNil(o.MasterInfo) {
		return true
	}

	return false
}

// SetMasterInfo gets a reference to the given ExportMappingMasterInfoType and assigns it to the MasterInfo field.
func (o *ExportMappingLinkedCodes) SetMasterInfo(v ExportMappingMasterInfoType) {
	o.MasterInfo = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ExportMappingLinkedCodes) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingLinkedCodes) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ExportMappingLinkedCodes) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ExportMappingLinkedCodes) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ExportMappingLinkedCodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMappingLinkedCodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinkedCodes) {
		toSerialize["linkedCodes"] = o.LinkedCodes
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.MasterInfo) {
		toSerialize["masterInfo"] = o.MasterInfo
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableExportMappingLinkedCodes struct {
	value *ExportMappingLinkedCodes
	isSet bool
}

func (v NullableExportMappingLinkedCodes) Get() *ExportMappingLinkedCodes {
	return v.value
}

func (v *NullableExportMappingLinkedCodes) Set(val *ExportMappingLinkedCodes) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMappingLinkedCodes) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMappingLinkedCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMappingLinkedCodes(val *ExportMappingLinkedCodes) *NullableExportMappingLinkedCodes {
	return &NullableExportMappingLinkedCodes{value: val, isSet: true}
}

func (v NullableExportMappingLinkedCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMappingLinkedCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


