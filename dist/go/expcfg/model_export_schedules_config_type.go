/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportSchedulesConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportSchedulesConfigType{}

// ExportSchedulesConfigType Export schedules information that are required to configure schedules
type ExportSchedulesConfigType struct {
	// Export Schedule
	ExportSchedules []ExportScheduleType `json:"exportSchedules,omitempty"`
	// Time zone hour and minute specified in the format TZH:TZM example:-05:00
	TimeZone *string `json:"timeZone,omitempty"`
}

// NewExportSchedulesConfigType instantiates a new ExportSchedulesConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportSchedulesConfigType() *ExportSchedulesConfigType {
	this := ExportSchedulesConfigType{}
	return &this
}

// NewExportSchedulesConfigTypeWithDefaults instantiates a new ExportSchedulesConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportSchedulesConfigTypeWithDefaults() *ExportSchedulesConfigType {
	this := ExportSchedulesConfigType{}
	return &this
}

// GetExportSchedules returns the ExportSchedules field value if set, zero value otherwise.
func (o *ExportSchedulesConfigType) GetExportSchedules() []ExportScheduleType {
	if o == nil || IsNil(o.ExportSchedules) {
		var ret []ExportScheduleType
		return ret
	}
	return o.ExportSchedules
}

// GetExportSchedulesOk returns a tuple with the ExportSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSchedulesConfigType) GetExportSchedulesOk() ([]ExportScheduleType, bool) {
	if o == nil || IsNil(o.ExportSchedules) {
		return nil, false
	}
	return o.ExportSchedules, true
}

// HasExportSchedules returns a boolean if a field has been set.
func (o *ExportSchedulesConfigType) HasExportSchedules() bool {
	if o != nil && !IsNil(o.ExportSchedules) {
		return true
	}

	return false
}

// SetExportSchedules gets a reference to the given []ExportScheduleType and assigns it to the ExportSchedules field.
func (o *ExportSchedulesConfigType) SetExportSchedules(v []ExportScheduleType) {
	o.ExportSchedules = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *ExportSchedulesConfigType) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSchedulesConfigType) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *ExportSchedulesConfigType) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *ExportSchedulesConfigType) SetTimeZone(v string) {
	o.TimeZone = &v
}

func (o ExportSchedulesConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportSchedulesConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportSchedules) {
		toSerialize["exportSchedules"] = o.ExportSchedules
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	return toSerialize, nil
}

type NullableExportSchedulesConfigType struct {
	value *ExportSchedulesConfigType
	isSet bool
}

func (v NullableExportSchedulesConfigType) Get() *ExportSchedulesConfigType {
	return v.value
}

func (v *NullableExportSchedulesConfigType) Set(val *ExportSchedulesConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportSchedulesConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportSchedulesConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportSchedulesConfigType(val *ExportSchedulesConfigType) *NullableExportSchedulesConfigType {
	return &NullableExportSchedulesConfigType{value: val, isSet: true}
}

func (v NullableExportSchedulesConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportSchedulesConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


