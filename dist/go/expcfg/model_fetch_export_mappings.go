/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the FetchExportMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchExportMappings{}

// FetchExportMappings Response to fetch the export definitions for a given export.
type FetchExportMappings struct {
	// The export file ID to delete definition.
	ExportMappings []ExportMappingType `json:"exportMappings,omitempty"`
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewFetchExportMappings instantiates a new FetchExportMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchExportMappings() *FetchExportMappings {
	this := FetchExportMappings{}
	return &this
}

// NewFetchExportMappingsWithDefaults instantiates a new FetchExportMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchExportMappingsWithDefaults() *FetchExportMappings {
	this := FetchExportMappings{}
	return &this
}

// GetExportMappings returns the ExportMappings field value if set, zero value otherwise.
func (o *FetchExportMappings) GetExportMappings() []ExportMappingType {
	if o == nil || IsNil(o.ExportMappings) {
		var ret []ExportMappingType
		return ret
	}
	return o.ExportMappings
}

// GetExportMappingsOk returns a tuple with the ExportMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchExportMappings) GetExportMappingsOk() ([]ExportMappingType, bool) {
	if o == nil || IsNil(o.ExportMappings) {
		return nil, false
	}
	return o.ExportMappings, true
}

// HasExportMappings returns a boolean if a field has been set.
func (o *FetchExportMappings) HasExportMappings() bool {
	if o != nil && !IsNil(o.ExportMappings) {
		return true
	}

	return false
}

// SetExportMappings gets a reference to the given []ExportMappingType and assigns it to the ExportMappings field.
func (o *FetchExportMappings) SetExportMappings(v []ExportMappingType) {
	o.ExportMappings = v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *FetchExportMappings) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchExportMappings) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *FetchExportMappings) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *FetchExportMappings) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FetchExportMappings) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchExportMappings) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FetchExportMappings) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *FetchExportMappings) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *FetchExportMappings) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FetchExportMappings) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *FetchExportMappings) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *FetchExportMappings) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o FetchExportMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchExportMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportMappings) {
		toSerialize["exportMappings"] = o.ExportMappings
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableFetchExportMappings struct {
	value *FetchExportMappings
	isSet bool
}

func (v NullableFetchExportMappings) Get() *FetchExportMappings {
	return v.value
}

func (v *NullableFetchExportMappings) Set(val *FetchExportMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchExportMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchExportMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchExportMappings(val *FetchExportMappings) *NullableFetchExportMappings {
	return &NullableFetchExportMappings{value: val, isSet: true}
}

func (v NullableFetchExportMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchExportMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


