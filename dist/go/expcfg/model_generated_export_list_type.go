/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the GeneratedExportListType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeneratedExportListType{}

// GeneratedExportListType Contains a collection of available export instance records.
type GeneratedExportListType struct {
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
	// The list of export instance records.
	ExportDataHeader []GeneratedExportType `json:"exportDataHeader,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	HasMore *bool `json:"hasMore,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// NewGeneratedExportListType instantiates a new GeneratedExportListType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneratedExportListType() *GeneratedExportListType {
	this := GeneratedExportListType{}
	return &this
}

// NewGeneratedExportListTypeWithDefaults instantiates a new GeneratedExportListType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneratedExportListTypeWithDefaults() *GeneratedExportListType {
	this := GeneratedExportListType{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *GeneratedExportListType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedExportListType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *GeneratedExportListType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *GeneratedExportListType) SetCount(v int32) {
	o.Count = &v
}

// GetExportDataHeader returns the ExportDataHeader field value if set, zero value otherwise.
func (o *GeneratedExportListType) GetExportDataHeader() []GeneratedExportType {
	if o == nil || IsNil(o.ExportDataHeader) {
		var ret []GeneratedExportType
		return ret
	}
	return o.ExportDataHeader
}

// GetExportDataHeaderOk returns a tuple with the ExportDataHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedExportListType) GetExportDataHeaderOk() ([]GeneratedExportType, bool) {
	if o == nil || IsNil(o.ExportDataHeader) {
		return nil, false
	}
	return o.ExportDataHeader, true
}

// HasExportDataHeader returns a boolean if a field has been set.
func (o *GeneratedExportListType) HasExportDataHeader() bool {
	if o != nil && !IsNil(o.ExportDataHeader) {
		return true
	}

	return false
}

// SetExportDataHeader gets a reference to the given []GeneratedExportType and assigns it to the ExportDataHeader field.
func (o *GeneratedExportListType) SetExportDataHeader(v []GeneratedExportType) {
	o.ExportDataHeader = v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *GeneratedExportListType) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedExportListType) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *GeneratedExportListType) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *GeneratedExportListType) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *GeneratedExportListType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedExportListType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *GeneratedExportListType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *GeneratedExportListType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

func (o GeneratedExportListType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeneratedExportListType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.ExportDataHeader) {
		toSerialize["exportDataHeader"] = o.ExportDataHeader
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableGeneratedExportListType struct {
	value *GeneratedExportListType
	isSet bool
}

func (v NullableGeneratedExportListType) Get() *GeneratedExportListType {
	return v.value
}

func (v *NullableGeneratedExportListType) Set(val *GeneratedExportListType) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneratedExportListType) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneratedExportListType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneratedExportListType(val *GeneratedExportListType) *NullableGeneratedExportListType {
	return &NullableGeneratedExportListType{value: val, isSet: true}
}

func (v NullableGeneratedExportListType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneratedExportListType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


