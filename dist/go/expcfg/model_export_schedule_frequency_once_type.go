/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportScheduleFrequencyOnceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportScheduleFrequencyOnceType{}

// ExportScheduleFrequencyOnceType If specified then export is scheduled to run only once
type ExportScheduleFrequencyOnceType struct {
	// Export will be generated using the date and time specified. Time will be specified in the format dd-MM-yyyy:hh:mm:ss a Z
	RunAt *string `json:"runAt,omitempty"`
}

// NewExportScheduleFrequencyOnceType instantiates a new ExportScheduleFrequencyOnceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportScheduleFrequencyOnceType() *ExportScheduleFrequencyOnceType {
	this := ExportScheduleFrequencyOnceType{}
	return &this
}

// NewExportScheduleFrequencyOnceTypeWithDefaults instantiates a new ExportScheduleFrequencyOnceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportScheduleFrequencyOnceTypeWithDefaults() *ExportScheduleFrequencyOnceType {
	this := ExportScheduleFrequencyOnceType{}
	return &this
}

// GetRunAt returns the RunAt field value if set, zero value otherwise.
func (o *ExportScheduleFrequencyOnceType) GetRunAt() string {
	if o == nil || IsNil(o.RunAt) {
		var ret string
		return ret
	}
	return *o.RunAt
}

// GetRunAtOk returns a tuple with the RunAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleFrequencyOnceType) GetRunAtOk() (*string, bool) {
	if o == nil || IsNil(o.RunAt) {
		return nil, false
	}
	return o.RunAt, true
}

// HasRunAt returns a boolean if a field has been set.
func (o *ExportScheduleFrequencyOnceType) HasRunAt() bool {
	if o != nil && !IsNil(o.RunAt) {
		return true
	}

	return false
}

// SetRunAt gets a reference to the given string and assigns it to the RunAt field.
func (o *ExportScheduleFrequencyOnceType) SetRunAt(v string) {
	o.RunAt = &v
}

func (o ExportScheduleFrequencyOnceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportScheduleFrequencyOnceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunAt) {
		toSerialize["runAt"] = o.RunAt
	}
	return toSerialize, nil
}

type NullableExportScheduleFrequencyOnceType struct {
	value *ExportScheduleFrequencyOnceType
	isSet bool
}

func (v NullableExportScheduleFrequencyOnceType) Get() *ExportScheduleFrequencyOnceType {
	return v.value
}

func (v *NullableExportScheduleFrequencyOnceType) Set(val *ExportScheduleFrequencyOnceType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportScheduleFrequencyOnceType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportScheduleFrequencyOnceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportScheduleFrequencyOnceType(val *ExportScheduleFrequencyOnceType) *NullableExportScheduleFrequencyOnceType {
	return &NullableExportScheduleFrequencyOnceType{value: val, isSet: true}
}

func (v NullableExportScheduleFrequencyOnceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportScheduleFrequencyOnceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


