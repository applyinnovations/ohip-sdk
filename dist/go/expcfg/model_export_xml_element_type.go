/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportXMLElementType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportXMLElementType{}

// ExportXMLElementType Type that holds all attributes associated with this tag together
type ExportXMLElementType struct {
	SimpleElement *ExportXMLSimpleType `json:"simpleElement,omitempty"`
	ComplexElement *ExportXMLComplexType `json:"complexElement,omitempty"`
	ComplexElementWithSource *ExportXMLComplexWithSourceType `json:"complexElementWithSource,omitempty"`
}

// NewExportXMLElementType instantiates a new ExportXMLElementType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportXMLElementType() *ExportXMLElementType {
	this := ExportXMLElementType{}
	return &this
}

// NewExportXMLElementTypeWithDefaults instantiates a new ExportXMLElementType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportXMLElementTypeWithDefaults() *ExportXMLElementType {
	this := ExportXMLElementType{}
	return &this
}

// GetSimpleElement returns the SimpleElement field value if set, zero value otherwise.
func (o *ExportXMLElementType) GetSimpleElement() ExportXMLSimpleType {
	if o == nil || IsNil(o.SimpleElement) {
		var ret ExportXMLSimpleType
		return ret
	}
	return *o.SimpleElement
}

// GetSimpleElementOk returns a tuple with the SimpleElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLElementType) GetSimpleElementOk() (*ExportXMLSimpleType, bool) {
	if o == nil || IsNil(o.SimpleElement) {
		return nil, false
	}
	return o.SimpleElement, true
}

// HasSimpleElement returns a boolean if a field has been set.
func (o *ExportXMLElementType) HasSimpleElement() bool {
	if o != nil && !IsNil(o.SimpleElement) {
		return true
	}

	return false
}

// SetSimpleElement gets a reference to the given ExportXMLSimpleType and assigns it to the SimpleElement field.
func (o *ExportXMLElementType) SetSimpleElement(v ExportXMLSimpleType) {
	o.SimpleElement = &v
}

// GetComplexElement returns the ComplexElement field value if set, zero value otherwise.
func (o *ExportXMLElementType) GetComplexElement() ExportXMLComplexType {
	if o == nil || IsNil(o.ComplexElement) {
		var ret ExportXMLComplexType
		return ret
	}
	return *o.ComplexElement
}

// GetComplexElementOk returns a tuple with the ComplexElement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLElementType) GetComplexElementOk() (*ExportXMLComplexType, bool) {
	if o == nil || IsNil(o.ComplexElement) {
		return nil, false
	}
	return o.ComplexElement, true
}

// HasComplexElement returns a boolean if a field has been set.
func (o *ExportXMLElementType) HasComplexElement() bool {
	if o != nil && !IsNil(o.ComplexElement) {
		return true
	}

	return false
}

// SetComplexElement gets a reference to the given ExportXMLComplexType and assigns it to the ComplexElement field.
func (o *ExportXMLElementType) SetComplexElement(v ExportXMLComplexType) {
	o.ComplexElement = &v
}

// GetComplexElementWithSource returns the ComplexElementWithSource field value if set, zero value otherwise.
func (o *ExportXMLElementType) GetComplexElementWithSource() ExportXMLComplexWithSourceType {
	if o == nil || IsNil(o.ComplexElementWithSource) {
		var ret ExportXMLComplexWithSourceType
		return ret
	}
	return *o.ComplexElementWithSource
}

// GetComplexElementWithSourceOk returns a tuple with the ComplexElementWithSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLElementType) GetComplexElementWithSourceOk() (*ExportXMLComplexWithSourceType, bool) {
	if o == nil || IsNil(o.ComplexElementWithSource) {
		return nil, false
	}
	return o.ComplexElementWithSource, true
}

// HasComplexElementWithSource returns a boolean if a field has been set.
func (o *ExportXMLElementType) HasComplexElementWithSource() bool {
	if o != nil && !IsNil(o.ComplexElementWithSource) {
		return true
	}

	return false
}

// SetComplexElementWithSource gets a reference to the given ExportXMLComplexWithSourceType and assigns it to the ComplexElementWithSource field.
func (o *ExportXMLElementType) SetComplexElementWithSource(v ExportXMLComplexWithSourceType) {
	o.ComplexElementWithSource = &v
}

func (o ExportXMLElementType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportXMLElementType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SimpleElement) {
		toSerialize["simpleElement"] = o.SimpleElement
	}
	if !IsNil(o.ComplexElement) {
		toSerialize["complexElement"] = o.ComplexElement
	}
	if !IsNil(o.ComplexElementWithSource) {
		toSerialize["complexElementWithSource"] = o.ComplexElementWithSource
	}
	return toSerialize, nil
}

type NullableExportXMLElementType struct {
	value *ExportXMLElementType
	isSet bool
}

func (v NullableExportXMLElementType) Get() *ExportXMLElementType {
	return v.value
}

func (v *NullableExportXMLElementType) Set(val *ExportXMLElementType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportXMLElementType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportXMLElementType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportXMLElementType(val *ExportXMLElementType) *NullableExportXMLElementType {
	return &NullableExportXMLElementType{value: val, isSet: true}
}

func (v NullableExportXMLElementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportXMLElementType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


