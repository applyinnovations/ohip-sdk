/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExpFunctionParamType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpFunctionParamType{}

// ExpFunctionParamType Parameters related to export functions
type ExpFunctionParamType struct {
	// Parameter Type
	DataType *string `json:"dataType,omitempty"`
	// Parameter Name
	Name *string `json:"name,omitempty"`
	// Paramter Position
	Position *int32 `json:"position,omitempty"`
	// Flag that determines whether parameter is required or not
	Required *bool `json:"required,omitempty"`
}

// NewExpFunctionParamType instantiates a new ExpFunctionParamType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpFunctionParamType() *ExpFunctionParamType {
	this := ExpFunctionParamType{}
	return &this
}

// NewExpFunctionParamTypeWithDefaults instantiates a new ExpFunctionParamType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpFunctionParamTypeWithDefaults() *ExpFunctionParamType {
	this := ExpFunctionParamType{}
	return &this
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ExpFunctionParamType) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpFunctionParamType) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ExpFunctionParamType) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *ExpFunctionParamType) SetDataType(v string) {
	o.DataType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExpFunctionParamType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpFunctionParamType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExpFunctionParamType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExpFunctionParamType) SetName(v string) {
	o.Name = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ExpFunctionParamType) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpFunctionParamType) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ExpFunctionParamType) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *ExpFunctionParamType) SetPosition(v int32) {
	o.Position = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ExpFunctionParamType) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpFunctionParamType) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ExpFunctionParamType) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ExpFunctionParamType) SetRequired(v bool) {
	o.Required = &v
}

func (o ExpFunctionParamType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpFunctionParamType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableExpFunctionParamType struct {
	value *ExpFunctionParamType
	isSet bool
}

func (v NullableExpFunctionParamType) Get() *ExpFunctionParamType {
	return v.value
}

func (v *NullableExpFunctionParamType) Set(val *ExpFunctionParamType) {
	v.value = val
	v.isSet = true
}

func (v NullableExpFunctionParamType) IsSet() bool {
	return v.isSet
}

func (v *NullableExpFunctionParamType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpFunctionParamType(val *ExpFunctionParamType) *NullableExpFunctionParamType {
	return &NullableExpFunctionParamType{value: val, isSet: true}
}

func (v NullableExpFunctionParamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpFunctionParamType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


