/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportMappingCodesToLinkType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMappingCodesToLinkType{}

// ExportMappingCodesToLinkType Details of code which is being mapped.
type ExportMappingCodesToLinkType struct {
	// The code with which the mapping is linked to in the external system.
	CodeToLink *string `json:"codeToLink,omitempty"`
	// The description of code with which the mapping is linked to in the external system.
	CodeToLinkDescription *string `json:"codeToLinkDescription,omitempty"`
	ConfigType *ExportMappingConfigType `json:"configType,omitempty"`
	// Display sequence.
	SequenceNumber *float32 `json:"sequenceNumber,omitempty"`
}

// NewExportMappingCodesToLinkType instantiates a new ExportMappingCodesToLinkType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMappingCodesToLinkType() *ExportMappingCodesToLinkType {
	this := ExportMappingCodesToLinkType{}
	return &this
}

// NewExportMappingCodesToLinkTypeWithDefaults instantiates a new ExportMappingCodesToLinkType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMappingCodesToLinkTypeWithDefaults() *ExportMappingCodesToLinkType {
	this := ExportMappingCodesToLinkType{}
	return &this
}

// GetCodeToLink returns the CodeToLink field value if set, zero value otherwise.
func (o *ExportMappingCodesToLinkType) GetCodeToLink() string {
	if o == nil || IsNil(o.CodeToLink) {
		var ret string
		return ret
	}
	return *o.CodeToLink
}

// GetCodeToLinkOk returns a tuple with the CodeToLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodesToLinkType) GetCodeToLinkOk() (*string, bool) {
	if o == nil || IsNil(o.CodeToLink) {
		return nil, false
	}
	return o.CodeToLink, true
}

// HasCodeToLink returns a boolean if a field has been set.
func (o *ExportMappingCodesToLinkType) HasCodeToLink() bool {
	if o != nil && !IsNil(o.CodeToLink) {
		return true
	}

	return false
}

// SetCodeToLink gets a reference to the given string and assigns it to the CodeToLink field.
func (o *ExportMappingCodesToLinkType) SetCodeToLink(v string) {
	o.CodeToLink = &v
}

// GetCodeToLinkDescription returns the CodeToLinkDescription field value if set, zero value otherwise.
func (o *ExportMappingCodesToLinkType) GetCodeToLinkDescription() string {
	if o == nil || IsNil(o.CodeToLinkDescription) {
		var ret string
		return ret
	}
	return *o.CodeToLinkDescription
}

// GetCodeToLinkDescriptionOk returns a tuple with the CodeToLinkDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodesToLinkType) GetCodeToLinkDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CodeToLinkDescription) {
		return nil, false
	}
	return o.CodeToLinkDescription, true
}

// HasCodeToLinkDescription returns a boolean if a field has been set.
func (o *ExportMappingCodesToLinkType) HasCodeToLinkDescription() bool {
	if o != nil && !IsNil(o.CodeToLinkDescription) {
		return true
	}

	return false
}

// SetCodeToLinkDescription gets a reference to the given string and assigns it to the CodeToLinkDescription field.
func (o *ExportMappingCodesToLinkType) SetCodeToLinkDescription(v string) {
	o.CodeToLinkDescription = &v
}

// GetConfigType returns the ConfigType field value if set, zero value otherwise.
func (o *ExportMappingCodesToLinkType) GetConfigType() ExportMappingConfigType {
	if o == nil || IsNil(o.ConfigType) {
		var ret ExportMappingConfigType
		return ret
	}
	return *o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodesToLinkType) GetConfigTypeOk() (*ExportMappingConfigType, bool) {
	if o == nil || IsNil(o.ConfigType) {
		return nil, false
	}
	return o.ConfigType, true
}

// HasConfigType returns a boolean if a field has been set.
func (o *ExportMappingCodesToLinkType) HasConfigType() bool {
	if o != nil && !IsNil(o.ConfigType) {
		return true
	}

	return false
}

// SetConfigType gets a reference to the given ExportMappingConfigType and assigns it to the ConfigType field.
func (o *ExportMappingCodesToLinkType) SetConfigType(v ExportMappingConfigType) {
	o.ConfigType = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *ExportMappingCodesToLinkType) GetSequenceNumber() float32 {
	if o == nil || IsNil(o.SequenceNumber) {
		var ret float32
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodesToLinkType) GetSequenceNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.SequenceNumber) {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ExportMappingCodesToLinkType) HasSequenceNumber() bool {
	if o != nil && !IsNil(o.SequenceNumber) {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given float32 and assigns it to the SequenceNumber field.
func (o *ExportMappingCodesToLinkType) SetSequenceNumber(v float32) {
	o.SequenceNumber = &v
}

func (o ExportMappingCodesToLinkType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMappingCodesToLinkType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeToLink) {
		toSerialize["codeToLink"] = o.CodeToLink
	}
	if !IsNil(o.CodeToLinkDescription) {
		toSerialize["codeToLinkDescription"] = o.CodeToLinkDescription
	}
	if !IsNil(o.ConfigType) {
		toSerialize["configType"] = o.ConfigType
	}
	if !IsNil(o.SequenceNumber) {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	return toSerialize, nil
}

type NullableExportMappingCodesToLinkType struct {
	value *ExportMappingCodesToLinkType
	isSet bool
}

func (v NullableExportMappingCodesToLinkType) Get() *ExportMappingCodesToLinkType {
	return v.value
}

func (v *NullableExportMappingCodesToLinkType) Set(val *ExportMappingCodesToLinkType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMappingCodesToLinkType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMappingCodesToLinkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMappingCodesToLinkType(val *ExportMappingCodesToLinkType) *NullableExportMappingCodesToLinkType {
	return &NullableExportMappingCodesToLinkType{value: val, isSet: true}
}

func (v NullableExportMappingCodesToLinkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMappingCodesToLinkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


