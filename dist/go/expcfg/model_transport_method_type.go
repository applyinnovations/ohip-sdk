/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
	"fmt"
)

// TransportMethodType Enumeration of transport methods used to deliver exports.
type TransportMethodType string

// List of transportMethodType
const (
	TRANSPORTMETHODTYPE_FTP TransportMethodType = "Ftp"
	TRANSPORTMETHODTYPE_SFTP TransportMethodType = "Sftp"
	TRANSPORTMETHODTYPE_SFTP_CN TransportMethodType = "SftpCn"
	TRANSPORTMETHODTYPE_HTTP TransportMethodType = "Http"
	TRANSPORTMETHODTYPE_FILE_SYSTEM TransportMethodType = "FileSystem"
	TRANSPORTMETHODTYPE_DEFAULT TransportMethodType = "Default"
)

// All allowed values of TransportMethodType enum
var AllowedTransportMethodTypeEnumValues = []TransportMethodType{
	"Ftp",
	"Sftp",
	"SftpCn",
	"Http",
	"FileSystem",
	"Default",
}

func (v *TransportMethodType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransportMethodType(value)
	for _, existing := range AllowedTransportMethodTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransportMethodType", value)
}

// NewTransportMethodTypeFromValue returns a pointer to a valid TransportMethodType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransportMethodTypeFromValue(v string) (*TransportMethodType, error) {
	ev := TransportMethodType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransportMethodType: valid values are %v", v, AllowedTransportMethodTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransportMethodType) IsValid() bool {
	for _, existing := range AllowedTransportMethodTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to transportMethodType value
func (v TransportMethodType) Ptr() *TransportMethodType {
	return &v
}

type NullableTransportMethodType struct {
	value *TransportMethodType
	isSet bool
}

func (v NullableTransportMethodType) Get() *TransportMethodType {
	return v.value
}

func (v *NullableTransportMethodType) Set(val *TransportMethodType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransportMethodType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransportMethodType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransportMethodType(val *TransportMethodType) *NullableTransportMethodType {
	return &NullableTransportMethodType{value: val, isSet: true}
}

func (v NullableTransportMethodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransportMethodType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

