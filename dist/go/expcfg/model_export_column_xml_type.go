/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
	"fmt"
)

// ExportColumnXMLType Enumeration of export column XML types.
type ExportColumnXMLType string

// List of exportColumnXMLType
const (
	EXPORTCOLUMNXMLTYPE_SIMPLE ExportColumnXMLType = "Simple"
	EXPORTCOLUMNXMLTYPE_COMPLEX ExportColumnXMLType = "Complex"
	EXPORTCOLUMNXMLTYPE_COMPLEX_ADD_SOURCE ExportColumnXMLType = "ComplexAddSource"
)

// All allowed values of ExportColumnXMLType enum
var AllowedExportColumnXMLTypeEnumValues = []ExportColumnXMLType{
	"Simple",
	"Complex",
	"ComplexAddSource",
}

func (v *ExportColumnXMLType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportColumnXMLType(value)
	for _, existing := range AllowedExportColumnXMLTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportColumnXMLType", value)
}

// NewExportColumnXMLTypeFromValue returns a pointer to a valid ExportColumnXMLType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportColumnXMLTypeFromValue(v string) (*ExportColumnXMLType, error) {
	ev := ExportColumnXMLType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportColumnXMLType: valid values are %v", v, AllowedExportColumnXMLTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportColumnXMLType) IsValid() bool {
	for _, existing := range AllowedExportColumnXMLTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to exportColumnXMLType value
func (v ExportColumnXMLType) Ptr() *ExportColumnXMLType {
	return &v
}

type NullableExportColumnXMLType struct {
	value *ExportColumnXMLType
	isSet bool
}

func (v NullableExportColumnXMLType) Get() *ExportColumnXMLType {
	return v.value
}

func (v *NullableExportColumnXMLType) Set(val *ExportColumnXMLType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportColumnXMLType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportColumnXMLType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportColumnXMLType(val *ExportColumnXMLType) *NullableExportColumnXMLType {
	return &NullableExportColumnXMLType{value: val, isSet: true}
}

func (v NullableExportColumnXMLType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportColumnXMLType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

