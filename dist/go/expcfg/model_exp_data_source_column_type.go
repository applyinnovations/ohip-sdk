/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExpDataSourceColumnType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpDataSourceColumnType{}

// ExpDataSourceColumnType Information related to database columns
type ExpDataSourceColumnType struct {
	// Database columns Name
	Name *string `json:"name,omitempty"`
	// Database columns description
	Description *string `json:"description,omitempty"`
	// Database columns description
	DataType *string `json:"dataType,omitempty"`
}

// NewExpDataSourceColumnType instantiates a new ExpDataSourceColumnType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpDataSourceColumnType() *ExpDataSourceColumnType {
	this := ExpDataSourceColumnType{}
	return &this
}

// NewExpDataSourceColumnTypeWithDefaults instantiates a new ExpDataSourceColumnType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpDataSourceColumnTypeWithDefaults() *ExpDataSourceColumnType {
	this := ExpDataSourceColumnType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExpDataSourceColumnType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpDataSourceColumnType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExpDataSourceColumnType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExpDataSourceColumnType) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExpDataSourceColumnType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpDataSourceColumnType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExpDataSourceColumnType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExpDataSourceColumnType) SetDescription(v string) {
	o.Description = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ExpDataSourceColumnType) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpDataSourceColumnType) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ExpDataSourceColumnType) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *ExpDataSourceColumnType) SetDataType(v string) {
	o.DataType = &v
}

func (o ExpDataSourceColumnType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpDataSourceColumnType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	return toSerialize, nil
}

type NullableExpDataSourceColumnType struct {
	value *ExpDataSourceColumnType
	isSet bool
}

func (v NullableExpDataSourceColumnType) Get() *ExpDataSourceColumnType {
	return v.value
}

func (v *NullableExpDataSourceColumnType) Set(val *ExpDataSourceColumnType) {
	v.value = val
	v.isSet = true
}

func (v NullableExpDataSourceColumnType) IsSet() bool {
	return v.isSet
}

func (v *NullableExpDataSourceColumnType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpDataSourceColumnType(val *ExpDataSourceColumnType) *NullableExpDataSourceColumnType {
	return &NullableExpDataSourceColumnType{value: val, isSet: true}
}

func (v NullableExpDataSourceColumnType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpDataSourceColumnType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


