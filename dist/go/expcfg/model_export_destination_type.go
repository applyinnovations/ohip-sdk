/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportDestinationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportDestinationType{}

// ExportDestinationType Details of the export's destination and format.
type ExportDestinationType struct {
	// Key that will be used during export file encryption; this is only needed if an Encryption Type has been specified.
	EncryptionKey *string `json:"encryptionKey,omitempty"`
	// Name of an encryption algorithm that will be used to encrypt an export file upon generation. This is used for the Default transport method.
	EncryptionType *string `json:"encryptionType,omitempty"`
	FileDeliveryConfig *FileDeliveryConfigType `json:"fileDeliveryConfig,omitempty"`
	// Formula used to generate the extension of the export file.
	FileExtension *string `json:"fileExtension,omitempty"`
	// Formula used to generate the name of the export file.
	FileName *string `json:"fileName,omitempty"`
	// URL address of HTTP server which received export file.
	HttpAddress *string `json:"httpAddress,omitempty"`
	// Interface ID from OXI, required if UploadType is not available.
	OXIInterfaceId *string `json:"oXIInterfaceId,omitempty"`
	// Protocol used to upload the export file to HTTP server.
	Protocol *string `json:"protocol,omitempty"`
	// Soap Action information if SOAP protocol is used to upload the export file.
	SOAPActionInformation *string `json:"sOAPActionInformation,omitempty"`
	TransportMethod *TransportMethodType `json:"transportMethod,omitempty"`
	// Protocol used to upload the export file to FTP server.
	UploadType *string `json:"uploadType,omitempty"`
	// Specify if the OXI interface will be used for export file delivery.
	UseOXIInterface *bool `json:"useOXIInterface,omitempty"`
	// Main tag for the XML document.
	XMLDocumentName *string `json:"xMLDocumentName,omitempty"`
	// The zip file location where the zip file is saved after being generated.
	ZipFileLocation *string `json:"zipFileLocation,omitempty"`
	// The zip file name based on the formula used in the setup.
	ZipFileName *string `json:"zipFileName,omitempty"`
}

// NewExportDestinationType instantiates a new ExportDestinationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportDestinationType() *ExportDestinationType {
	this := ExportDestinationType{}
	return &this
}

// NewExportDestinationTypeWithDefaults instantiates a new ExportDestinationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportDestinationTypeWithDefaults() *ExportDestinationType {
	this := ExportDestinationType{}
	return &this
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *ExportDestinationType) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *ExportDestinationType) HasEncryptionKey() bool {
	if o != nil && !IsNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *ExportDestinationType) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetEncryptionType returns the EncryptionType field value if set, zero value otherwise.
func (o *ExportDestinationType) GetEncryptionType() string {
	if o == nil || IsNil(o.EncryptionType) {
		var ret string
		return ret
	}
	return *o.EncryptionType
}

// GetEncryptionTypeOk returns a tuple with the EncryptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetEncryptionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionType) {
		return nil, false
	}
	return o.EncryptionType, true
}

// HasEncryptionType returns a boolean if a field has been set.
func (o *ExportDestinationType) HasEncryptionType() bool {
	if o != nil && !IsNil(o.EncryptionType) {
		return true
	}

	return false
}

// SetEncryptionType gets a reference to the given string and assigns it to the EncryptionType field.
func (o *ExportDestinationType) SetEncryptionType(v string) {
	o.EncryptionType = &v
}

// GetFileDeliveryConfig returns the FileDeliveryConfig field value if set, zero value otherwise.
func (o *ExportDestinationType) GetFileDeliveryConfig() FileDeliveryConfigType {
	if o == nil || IsNil(o.FileDeliveryConfig) {
		var ret FileDeliveryConfigType
		return ret
	}
	return *o.FileDeliveryConfig
}

// GetFileDeliveryConfigOk returns a tuple with the FileDeliveryConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetFileDeliveryConfigOk() (*FileDeliveryConfigType, bool) {
	if o == nil || IsNil(o.FileDeliveryConfig) {
		return nil, false
	}
	return o.FileDeliveryConfig, true
}

// HasFileDeliveryConfig returns a boolean if a field has been set.
func (o *ExportDestinationType) HasFileDeliveryConfig() bool {
	if o != nil && !IsNil(o.FileDeliveryConfig) {
		return true
	}

	return false
}

// SetFileDeliveryConfig gets a reference to the given FileDeliveryConfigType and assigns it to the FileDeliveryConfig field.
func (o *ExportDestinationType) SetFileDeliveryConfig(v FileDeliveryConfigType) {
	o.FileDeliveryConfig = &v
}

// GetFileExtension returns the FileExtension field value if set, zero value otherwise.
func (o *ExportDestinationType) GetFileExtension() string {
	if o == nil || IsNil(o.FileExtension) {
		var ret string
		return ret
	}
	return *o.FileExtension
}

// GetFileExtensionOk returns a tuple with the FileExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetFileExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.FileExtension) {
		return nil, false
	}
	return o.FileExtension, true
}

// HasFileExtension returns a boolean if a field has been set.
func (o *ExportDestinationType) HasFileExtension() bool {
	if o != nil && !IsNil(o.FileExtension) {
		return true
	}

	return false
}

// SetFileExtension gets a reference to the given string and assigns it to the FileExtension field.
func (o *ExportDestinationType) SetFileExtension(v string) {
	o.FileExtension = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ExportDestinationType) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ExportDestinationType) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ExportDestinationType) SetFileName(v string) {
	o.FileName = &v
}

// GetHttpAddress returns the HttpAddress field value if set, zero value otherwise.
func (o *ExportDestinationType) GetHttpAddress() string {
	if o == nil || IsNil(o.HttpAddress) {
		var ret string
		return ret
	}
	return *o.HttpAddress
}

// GetHttpAddressOk returns a tuple with the HttpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetHttpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.HttpAddress) {
		return nil, false
	}
	return o.HttpAddress, true
}

// HasHttpAddress returns a boolean if a field has been set.
func (o *ExportDestinationType) HasHttpAddress() bool {
	if o != nil && !IsNil(o.HttpAddress) {
		return true
	}

	return false
}

// SetHttpAddress gets a reference to the given string and assigns it to the HttpAddress field.
func (o *ExportDestinationType) SetHttpAddress(v string) {
	o.HttpAddress = &v
}

// GetOXIInterfaceId returns the OXIInterfaceId field value if set, zero value otherwise.
func (o *ExportDestinationType) GetOXIInterfaceId() string {
	if o == nil || IsNil(o.OXIInterfaceId) {
		var ret string
		return ret
	}
	return *o.OXIInterfaceId
}

// GetOXIInterfaceIdOk returns a tuple with the OXIInterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetOXIInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.OXIInterfaceId) {
		return nil, false
	}
	return o.OXIInterfaceId, true
}

// HasOXIInterfaceId returns a boolean if a field has been set.
func (o *ExportDestinationType) HasOXIInterfaceId() bool {
	if o != nil && !IsNil(o.OXIInterfaceId) {
		return true
	}

	return false
}

// SetOXIInterfaceId gets a reference to the given string and assigns it to the OXIInterfaceId field.
func (o *ExportDestinationType) SetOXIInterfaceId(v string) {
	o.OXIInterfaceId = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *ExportDestinationType) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *ExportDestinationType) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *ExportDestinationType) SetProtocol(v string) {
	o.Protocol = &v
}

// GetSOAPActionInformation returns the SOAPActionInformation field value if set, zero value otherwise.
func (o *ExportDestinationType) GetSOAPActionInformation() string {
	if o == nil || IsNil(o.SOAPActionInformation) {
		var ret string
		return ret
	}
	return *o.SOAPActionInformation
}

// GetSOAPActionInformationOk returns a tuple with the SOAPActionInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetSOAPActionInformationOk() (*string, bool) {
	if o == nil || IsNil(o.SOAPActionInformation) {
		return nil, false
	}
	return o.SOAPActionInformation, true
}

// HasSOAPActionInformation returns a boolean if a field has been set.
func (o *ExportDestinationType) HasSOAPActionInformation() bool {
	if o != nil && !IsNil(o.SOAPActionInformation) {
		return true
	}

	return false
}

// SetSOAPActionInformation gets a reference to the given string and assigns it to the SOAPActionInformation field.
func (o *ExportDestinationType) SetSOAPActionInformation(v string) {
	o.SOAPActionInformation = &v
}

// GetTransportMethod returns the TransportMethod field value if set, zero value otherwise.
func (o *ExportDestinationType) GetTransportMethod() TransportMethodType {
	if o == nil || IsNil(o.TransportMethod) {
		var ret TransportMethodType
		return ret
	}
	return *o.TransportMethod
}

// GetTransportMethodOk returns a tuple with the TransportMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetTransportMethodOk() (*TransportMethodType, bool) {
	if o == nil || IsNil(o.TransportMethod) {
		return nil, false
	}
	return o.TransportMethod, true
}

// HasTransportMethod returns a boolean if a field has been set.
func (o *ExportDestinationType) HasTransportMethod() bool {
	if o != nil && !IsNil(o.TransportMethod) {
		return true
	}

	return false
}

// SetTransportMethod gets a reference to the given TransportMethodType and assigns it to the TransportMethod field.
func (o *ExportDestinationType) SetTransportMethod(v TransportMethodType) {
	o.TransportMethod = &v
}

// GetUploadType returns the UploadType field value if set, zero value otherwise.
func (o *ExportDestinationType) GetUploadType() string {
	if o == nil || IsNil(o.UploadType) {
		var ret string
		return ret
	}
	return *o.UploadType
}

// GetUploadTypeOk returns a tuple with the UploadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetUploadTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UploadType) {
		return nil, false
	}
	return o.UploadType, true
}

// HasUploadType returns a boolean if a field has been set.
func (o *ExportDestinationType) HasUploadType() bool {
	if o != nil && !IsNil(o.UploadType) {
		return true
	}

	return false
}

// SetUploadType gets a reference to the given string and assigns it to the UploadType field.
func (o *ExportDestinationType) SetUploadType(v string) {
	o.UploadType = &v
}

// GetUseOXIInterface returns the UseOXIInterface field value if set, zero value otherwise.
func (o *ExportDestinationType) GetUseOXIInterface() bool {
	if o == nil || IsNil(o.UseOXIInterface) {
		var ret bool
		return ret
	}
	return *o.UseOXIInterface
}

// GetUseOXIInterfaceOk returns a tuple with the UseOXIInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetUseOXIInterfaceOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOXIInterface) {
		return nil, false
	}
	return o.UseOXIInterface, true
}

// HasUseOXIInterface returns a boolean if a field has been set.
func (o *ExportDestinationType) HasUseOXIInterface() bool {
	if o != nil && !IsNil(o.UseOXIInterface) {
		return true
	}

	return false
}

// SetUseOXIInterface gets a reference to the given bool and assigns it to the UseOXIInterface field.
func (o *ExportDestinationType) SetUseOXIInterface(v bool) {
	o.UseOXIInterface = &v
}

// GetXMLDocumentName returns the XMLDocumentName field value if set, zero value otherwise.
func (o *ExportDestinationType) GetXMLDocumentName() string {
	if o == nil || IsNil(o.XMLDocumentName) {
		var ret string
		return ret
	}
	return *o.XMLDocumentName
}

// GetXMLDocumentNameOk returns a tuple with the XMLDocumentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetXMLDocumentNameOk() (*string, bool) {
	if o == nil || IsNil(o.XMLDocumentName) {
		return nil, false
	}
	return o.XMLDocumentName, true
}

// HasXMLDocumentName returns a boolean if a field has been set.
func (o *ExportDestinationType) HasXMLDocumentName() bool {
	if o != nil && !IsNil(o.XMLDocumentName) {
		return true
	}

	return false
}

// SetXMLDocumentName gets a reference to the given string and assigns it to the XMLDocumentName field.
func (o *ExportDestinationType) SetXMLDocumentName(v string) {
	o.XMLDocumentName = &v
}

// GetZipFileLocation returns the ZipFileLocation field value if set, zero value otherwise.
func (o *ExportDestinationType) GetZipFileLocation() string {
	if o == nil || IsNil(o.ZipFileLocation) {
		var ret string
		return ret
	}
	return *o.ZipFileLocation
}

// GetZipFileLocationOk returns a tuple with the ZipFileLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetZipFileLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ZipFileLocation) {
		return nil, false
	}
	return o.ZipFileLocation, true
}

// HasZipFileLocation returns a boolean if a field has been set.
func (o *ExportDestinationType) HasZipFileLocation() bool {
	if o != nil && !IsNil(o.ZipFileLocation) {
		return true
	}

	return false
}

// SetZipFileLocation gets a reference to the given string and assigns it to the ZipFileLocation field.
func (o *ExportDestinationType) SetZipFileLocation(v string) {
	o.ZipFileLocation = &v
}

// GetZipFileName returns the ZipFileName field value if set, zero value otherwise.
func (o *ExportDestinationType) GetZipFileName() string {
	if o == nil || IsNil(o.ZipFileName) {
		var ret string
		return ret
	}
	return *o.ZipFileName
}

// GetZipFileNameOk returns a tuple with the ZipFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDestinationType) GetZipFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZipFileName) {
		return nil, false
	}
	return o.ZipFileName, true
}

// HasZipFileName returns a boolean if a field has been set.
func (o *ExportDestinationType) HasZipFileName() bool {
	if o != nil && !IsNil(o.ZipFileName) {
		return true
	}

	return false
}

// SetZipFileName gets a reference to the given string and assigns it to the ZipFileName field.
func (o *ExportDestinationType) SetZipFileName(v string) {
	o.ZipFileName = &v
}

func (o ExportDestinationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportDestinationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncryptionKey) {
		toSerialize["encryptionKey"] = o.EncryptionKey
	}
	if !IsNil(o.EncryptionType) {
		toSerialize["encryptionType"] = o.EncryptionType
	}
	if !IsNil(o.FileDeliveryConfig) {
		toSerialize["fileDeliveryConfig"] = o.FileDeliveryConfig
	}
	if !IsNil(o.FileExtension) {
		toSerialize["fileExtension"] = o.FileExtension
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.HttpAddress) {
		toSerialize["httpAddress"] = o.HttpAddress
	}
	if !IsNil(o.OXIInterfaceId) {
		toSerialize["oXIInterfaceId"] = o.OXIInterfaceId
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.SOAPActionInformation) {
		toSerialize["sOAPActionInformation"] = o.SOAPActionInformation
	}
	if !IsNil(o.TransportMethod) {
		toSerialize["transportMethod"] = o.TransportMethod
	}
	if !IsNil(o.UploadType) {
		toSerialize["uploadType"] = o.UploadType
	}
	if !IsNil(o.UseOXIInterface) {
		toSerialize["useOXIInterface"] = o.UseOXIInterface
	}
	if !IsNil(o.XMLDocumentName) {
		toSerialize["xMLDocumentName"] = o.XMLDocumentName
	}
	if !IsNil(o.ZipFileLocation) {
		toSerialize["zipFileLocation"] = o.ZipFileLocation
	}
	if !IsNil(o.ZipFileName) {
		toSerialize["zipFileName"] = o.ZipFileName
	}
	return toSerialize, nil
}

type NullableExportDestinationType struct {
	value *ExportDestinationType
	isSet bool
}

func (v NullableExportDestinationType) Get() *ExportDestinationType {
	return v.value
}

func (v *NullableExportDestinationType) Set(val *ExportDestinationType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportDestinationType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportDestinationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportDestinationType(val *ExportDestinationType) *NullableExportDestinationType {
	return &NullableExportDestinationType{value: val, isSet: true}
}

func (v NullableExportDestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportDestinationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


