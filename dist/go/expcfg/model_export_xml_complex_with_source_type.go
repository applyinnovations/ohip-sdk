/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportXMLComplexWithSourceType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportXMLComplexWithSourceType{}

// ExportXMLComplexWithSourceType XML simple type that holds all the information related to complex element tag
type ExportXMLComplexWithSourceType struct {
	// XML attribute type that holds all the information related to attribute tag
	Attributes []ExportXMLAttributeType `json:"attributes,omitempty"`
	// XML element type that holds all the information related to element tag
	Elements []ExportXMLElementType `json:"elements,omitempty"`
	// Filter data using this attribute
	Filter *string `json:"filter,omitempty"`
	// XML simple tag name
	Name *string `json:"name,omitempty"`
	// Source from where data needs to be extracted
	Source *string `json:"source,omitempty"`
}

// NewExportXMLComplexWithSourceType instantiates a new ExportXMLComplexWithSourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportXMLComplexWithSourceType() *ExportXMLComplexWithSourceType {
	this := ExportXMLComplexWithSourceType{}
	return &this
}

// NewExportXMLComplexWithSourceTypeWithDefaults instantiates a new ExportXMLComplexWithSourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportXMLComplexWithSourceTypeWithDefaults() *ExportXMLComplexWithSourceType {
	this := ExportXMLComplexWithSourceType{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ExportXMLComplexWithSourceType) GetAttributes() []ExportXMLAttributeType {
	if o == nil || IsNil(o.Attributes) {
		var ret []ExportXMLAttributeType
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLComplexWithSourceType) GetAttributesOk() ([]ExportXMLAttributeType, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ExportXMLComplexWithSourceType) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ExportXMLAttributeType and assigns it to the Attributes field.
func (o *ExportXMLComplexWithSourceType) SetAttributes(v []ExportXMLAttributeType) {
	o.Attributes = v
}

// GetElements returns the Elements field value if set, zero value otherwise.
func (o *ExportXMLComplexWithSourceType) GetElements() []ExportXMLElementType {
	if o == nil || IsNil(o.Elements) {
		var ret []ExportXMLElementType
		return ret
	}
	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLComplexWithSourceType) GetElementsOk() ([]ExportXMLElementType, bool) {
	if o == nil || IsNil(o.Elements) {
		return nil, false
	}
	return o.Elements, true
}

// HasElements returns a boolean if a field has been set.
func (o *ExportXMLComplexWithSourceType) HasElements() bool {
	if o != nil && !IsNil(o.Elements) {
		return true
	}

	return false
}

// SetElements gets a reference to the given []ExportXMLElementType and assigns it to the Elements field.
func (o *ExportXMLComplexWithSourceType) SetElements(v []ExportXMLElementType) {
	o.Elements = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ExportXMLComplexWithSourceType) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLComplexWithSourceType) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ExportXMLComplexWithSourceType) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *ExportXMLComplexWithSourceType) SetFilter(v string) {
	o.Filter = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExportXMLComplexWithSourceType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLComplexWithSourceType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExportXMLComplexWithSourceType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExportXMLComplexWithSourceType) SetName(v string) {
	o.Name = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ExportXMLComplexWithSourceType) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportXMLComplexWithSourceType) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ExportXMLComplexWithSourceType) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ExportXMLComplexWithSourceType) SetSource(v string) {
	o.Source = &v
}

func (o ExportXMLComplexWithSourceType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportXMLComplexWithSourceType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Elements) {
		toSerialize["elements"] = o.Elements
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableExportXMLComplexWithSourceType struct {
	value *ExportXMLComplexWithSourceType
	isSet bool
}

func (v NullableExportXMLComplexWithSourceType) Get() *ExportXMLComplexWithSourceType {
	return v.value
}

func (v *NullableExportXMLComplexWithSourceType) Set(val *ExportXMLComplexWithSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportXMLComplexWithSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportXMLComplexWithSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportXMLComplexWithSourceType(val *ExportXMLComplexWithSourceType) *NullableExportXMLComplexWithSourceType {
	return &NullableExportXMLComplexWithSourceType{value: val, isSet: true}
}

func (v NullableExportXMLComplexWithSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportXMLComplexWithSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


