/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExpFunctionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpFunctionType{}

// ExpFunctionType Information related to export function
type ExpFunctionType struct {
	// Name of the function
	FunctionName *string `json:"functionName,omitempty"`
	// Function parameters
	FunctionParameter []ExpFunctionParamType `json:"functionParameter,omitempty"`
}

// NewExpFunctionType instantiates a new ExpFunctionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpFunctionType() *ExpFunctionType {
	this := ExpFunctionType{}
	return &this
}

// NewExpFunctionTypeWithDefaults instantiates a new ExpFunctionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpFunctionTypeWithDefaults() *ExpFunctionType {
	this := ExpFunctionType{}
	return &this
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *ExpFunctionType) GetFunctionName() string {
	if o == nil || IsNil(o.FunctionName) {
		var ret string
		return ret
	}
	return *o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpFunctionType) GetFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.FunctionName) {
		return nil, false
	}
	return o.FunctionName, true
}

// HasFunctionName returns a boolean if a field has been set.
func (o *ExpFunctionType) HasFunctionName() bool {
	if o != nil && !IsNil(o.FunctionName) {
		return true
	}

	return false
}

// SetFunctionName gets a reference to the given string and assigns it to the FunctionName field.
func (o *ExpFunctionType) SetFunctionName(v string) {
	o.FunctionName = &v
}

// GetFunctionParameter returns the FunctionParameter field value if set, zero value otherwise.
func (o *ExpFunctionType) GetFunctionParameter() []ExpFunctionParamType {
	if o == nil || IsNil(o.FunctionParameter) {
		var ret []ExpFunctionParamType
		return ret
	}
	return o.FunctionParameter
}

// GetFunctionParameterOk returns a tuple with the FunctionParameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExpFunctionType) GetFunctionParameterOk() ([]ExpFunctionParamType, bool) {
	if o == nil || IsNil(o.FunctionParameter) {
		return nil, false
	}
	return o.FunctionParameter, true
}

// HasFunctionParameter returns a boolean if a field has been set.
func (o *ExpFunctionType) HasFunctionParameter() bool {
	if o != nil && !IsNil(o.FunctionParameter) {
		return true
	}

	return false
}

// SetFunctionParameter gets a reference to the given []ExpFunctionParamType and assigns it to the FunctionParameter field.
func (o *ExpFunctionType) SetFunctionParameter(v []ExpFunctionParamType) {
	o.FunctionParameter = v
}

func (o ExpFunctionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpFunctionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FunctionName) {
		toSerialize["functionName"] = o.FunctionName
	}
	if !IsNil(o.FunctionParameter) {
		toSerialize["functionParameter"] = o.FunctionParameter
	}
	return toSerialize, nil
}

type NullableExpFunctionType struct {
	value *ExpFunctionType
	isSet bool
}

func (v NullableExpFunctionType) Get() *ExpFunctionType {
	return v.value
}

func (v *NullableExpFunctionType) Set(val *ExpFunctionType) {
	v.value = val
	v.isSet = true
}

func (v NullableExpFunctionType) IsSet() bool {
	return v.isSet
}

func (v *NullableExpFunctionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpFunctionType(val *ExpFunctionType) *NullableExpFunctionType {
	return &NullableExpFunctionType{value: val, isSet: true}
}

func (v NullableExpFunctionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpFunctionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


