/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportMappingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMappingType{}

// ExportMappingType Details of one export.
type ExportMappingType struct {
	ExportMappingId *UniqueIDType `json:"exportMappingId,omitempty"`
	ConfigType *ExportMappingConfigType `json:"configType,omitempty"`
	// Code for the export mapping type.
	MappingType *string `json:"mappingType,omitempty"`
	// Specify whether the mapping type has default value.
	HasDefaultValue *bool `json:"hasDefaultValue,omitempty"`
	// Description of the export mapping type.
	Description *string `json:"description,omitempty"`
}

// NewExportMappingType instantiates a new ExportMappingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMappingType() *ExportMappingType {
	this := ExportMappingType{}
	return &this
}

// NewExportMappingTypeWithDefaults instantiates a new ExportMappingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMappingTypeWithDefaults() *ExportMappingType {
	this := ExportMappingType{}
	return &this
}

// GetExportMappingId returns the ExportMappingId field value if set, zero value otherwise.
func (o *ExportMappingType) GetExportMappingId() UniqueIDType {
	if o == nil || IsNil(o.ExportMappingId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExportMappingId
}

// GetExportMappingIdOk returns a tuple with the ExportMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingType) GetExportMappingIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExportMappingId) {
		return nil, false
	}
	return o.ExportMappingId, true
}

// HasExportMappingId returns a boolean if a field has been set.
func (o *ExportMappingType) HasExportMappingId() bool {
	if o != nil && !IsNil(o.ExportMappingId) {
		return true
	}

	return false
}

// SetExportMappingId gets a reference to the given UniqueIDType and assigns it to the ExportMappingId field.
func (o *ExportMappingType) SetExportMappingId(v UniqueIDType) {
	o.ExportMappingId = &v
}

// GetConfigType returns the ConfigType field value if set, zero value otherwise.
func (o *ExportMappingType) GetConfigType() ExportMappingConfigType {
	if o == nil || IsNil(o.ConfigType) {
		var ret ExportMappingConfigType
		return ret
	}
	return *o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingType) GetConfigTypeOk() (*ExportMappingConfigType, bool) {
	if o == nil || IsNil(o.ConfigType) {
		return nil, false
	}
	return o.ConfigType, true
}

// HasConfigType returns a boolean if a field has been set.
func (o *ExportMappingType) HasConfigType() bool {
	if o != nil && !IsNil(o.ConfigType) {
		return true
	}

	return false
}

// SetConfigType gets a reference to the given ExportMappingConfigType and assigns it to the ConfigType field.
func (o *ExportMappingType) SetConfigType(v ExportMappingConfigType) {
	o.ConfigType = &v
}

// GetMappingType returns the MappingType field value if set, zero value otherwise.
func (o *ExportMappingType) GetMappingType() string {
	if o == nil || IsNil(o.MappingType) {
		var ret string
		return ret
	}
	return *o.MappingType
}

// GetMappingTypeOk returns a tuple with the MappingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingType) GetMappingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MappingType) {
		return nil, false
	}
	return o.MappingType, true
}

// HasMappingType returns a boolean if a field has been set.
func (o *ExportMappingType) HasMappingType() bool {
	if o != nil && !IsNil(o.MappingType) {
		return true
	}

	return false
}

// SetMappingType gets a reference to the given string and assigns it to the MappingType field.
func (o *ExportMappingType) SetMappingType(v string) {
	o.MappingType = &v
}

// GetHasDefaultValue returns the HasDefaultValue field value if set, zero value otherwise.
func (o *ExportMappingType) GetHasDefaultValue() bool {
	if o == nil || IsNil(o.HasDefaultValue) {
		var ret bool
		return ret
	}
	return *o.HasDefaultValue
}

// GetHasDefaultValueOk returns a tuple with the HasDefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingType) GetHasDefaultValueOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDefaultValue) {
		return nil, false
	}
	return o.HasDefaultValue, true
}

// HasHasDefaultValue returns a boolean if a field has been set.
func (o *ExportMappingType) HasHasDefaultValue() bool {
	if o != nil && !IsNil(o.HasDefaultValue) {
		return true
	}

	return false
}

// SetHasDefaultValue gets a reference to the given bool and assigns it to the HasDefaultValue field.
func (o *ExportMappingType) SetHasDefaultValue(v bool) {
	o.HasDefaultValue = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExportMappingType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExportMappingType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExportMappingType) SetDescription(v string) {
	o.Description = &v
}

func (o ExportMappingType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMappingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportMappingId) {
		toSerialize["exportMappingId"] = o.ExportMappingId
	}
	if !IsNil(o.ConfigType) {
		toSerialize["configType"] = o.ConfigType
	}
	if !IsNil(o.MappingType) {
		toSerialize["mappingType"] = o.MappingType
	}
	if !IsNil(o.HasDefaultValue) {
		toSerialize["hasDefaultValue"] = o.HasDefaultValue
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableExportMappingType struct {
	value *ExportMappingType
	isSet bool
}

func (v NullableExportMappingType) Get() *ExportMappingType {
	return v.value
}

func (v *NullableExportMappingType) Set(val *ExportMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMappingType(val *ExportMappingType) *NullableExportMappingType {
	return &NullableExportMappingType{value: val, isSet: true}
}

func (v NullableExportMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


