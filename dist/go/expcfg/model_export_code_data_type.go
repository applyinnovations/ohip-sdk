/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
	"fmt"
)

// ExportCodeDataType Enumeration of export mapping types.
type ExportCodeDataType string

// List of exportCodeDataType
const (
	EXPORTCODEDATATYPE_CHARACTER ExportCodeDataType = "Character"
	EXPORTCODEDATATYPE_DATE ExportCodeDataType = "Date"
	EXPORTCODEDATATYPE_NUMBER ExportCodeDataType = "Number"
)

// All allowed values of ExportCodeDataType enum
var AllowedExportCodeDataTypeEnumValues = []ExportCodeDataType{
	"Character",
	"Date",
	"Number",
}

func (v *ExportCodeDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportCodeDataType(value)
	for _, existing := range AllowedExportCodeDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportCodeDataType", value)
}

// NewExportCodeDataTypeFromValue returns a pointer to a valid ExportCodeDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportCodeDataTypeFromValue(v string) (*ExportCodeDataType, error) {
	ev := ExportCodeDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportCodeDataType: valid values are %v", v, AllowedExportCodeDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportCodeDataType) IsValid() bool {
	for _, existing := range AllowedExportCodeDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to exportCodeDataType value
func (v ExportCodeDataType) Ptr() *ExportCodeDataType {
	return &v
}

type NullableExportCodeDataType struct {
	value *ExportCodeDataType
	isSet bool
}

func (v NullableExportCodeDataType) Get() *ExportCodeDataType {
	return v.value
}

func (v *NullableExportCodeDataType) Set(val *ExportCodeDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCodeDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCodeDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCodeDataType(val *ExportCodeDataType) *NullableExportCodeDataType {
	return &NullableExportCodeDataType{value: val, isSet: true}
}

func (v NullableExportCodeDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCodeDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

