/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportDataSetupType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportDataSetupType{}

// ExportDataSetupType Details of processing data for export being setup.
type ExportDataSetupType struct {
	// A flag to add new line character after every row of data generated.
	AddNewLine *bool `json:"addNewLine,omitempty"`
	// A flag to indicate if the data should be appended to an existing file.
	AppendToFile *bool `json:"appendToFile,omitempty"`
	// Column separator of the export file.
	ColumnSeparator *string `json:"columnSeparator,omitempty"`
	// A flag to indicate if this export contains export components.
	ComponentExport *bool `json:"componentExport,omitempty"`
	// A flag to indicate if the export is compressed.
	CompressData *bool `json:"compressData,omitempty"`
	// A flag to indicate if Export header and footer should always be created even if no data is generated.
	CreateHeaderFooter *bool `json:"createHeaderFooter,omitempty"`
	// The source view code.
	DataSourceName *string `json:"dataSourceName,omitempty"`
	// Where clause for the file to select data form the Source View.
	FilterCondition *string `json:"filterCondition,omitempty"`
	// The code to execute after running the export, usually to clean up data.
	PostExportProcedure *string `json:"postExportProcedure,omitempty"`
	// The code to execute prior to running the export in order to prepare the data.
	PreExportProcedure *string `json:"preExportProcedure,omitempty"`
	// For XML exports this defines the optional document type name
	XMLDocumentTypeName *string `json:"xMLDocumentTypeName,omitempty"`
	// For XML exports this defines the optional public id in doc type tag
	XMLDocumentTypePublicId *string `json:"xMLDocumentTypePublicId,omitempty"`
	// For XML exports this defines the optional system id in doc type tag
	XMLDocumentTypeSystemId *string `json:"xMLDocumentTypeSystemId,omitempty"`
	// For XML exports this allows to add the encoding attribute to the xml file header.
	XMLEncoding *string `json:"xMLEncoding,omitempty"`
	// For XML exports this allows to add the additional processing instructions to the XML file header if needed.
	XMLProcessingInstructions *string `json:"xMLProcessingInstructions,omitempty"`
	// Main tag for the xml document
	XMLRootTag *string `json:"xMLRootTag,omitempty"`
}

// NewExportDataSetupType instantiates a new ExportDataSetupType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportDataSetupType() *ExportDataSetupType {
	this := ExportDataSetupType{}
	return &this
}

// NewExportDataSetupTypeWithDefaults instantiates a new ExportDataSetupType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportDataSetupTypeWithDefaults() *ExportDataSetupType {
	this := ExportDataSetupType{}
	return &this
}

// GetAddNewLine returns the AddNewLine field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetAddNewLine() bool {
	if o == nil || IsNil(o.AddNewLine) {
		var ret bool
		return ret
	}
	return *o.AddNewLine
}

// GetAddNewLineOk returns a tuple with the AddNewLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetAddNewLineOk() (*bool, bool) {
	if o == nil || IsNil(o.AddNewLine) {
		return nil, false
	}
	return o.AddNewLine, true
}

// HasAddNewLine returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasAddNewLine() bool {
	if o != nil && !IsNil(o.AddNewLine) {
		return true
	}

	return false
}

// SetAddNewLine gets a reference to the given bool and assigns it to the AddNewLine field.
func (o *ExportDataSetupType) SetAddNewLine(v bool) {
	o.AddNewLine = &v
}

// GetAppendToFile returns the AppendToFile field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetAppendToFile() bool {
	if o == nil || IsNil(o.AppendToFile) {
		var ret bool
		return ret
	}
	return *o.AppendToFile
}

// GetAppendToFileOk returns a tuple with the AppendToFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetAppendToFileOk() (*bool, bool) {
	if o == nil || IsNil(o.AppendToFile) {
		return nil, false
	}
	return o.AppendToFile, true
}

// HasAppendToFile returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasAppendToFile() bool {
	if o != nil && !IsNil(o.AppendToFile) {
		return true
	}

	return false
}

// SetAppendToFile gets a reference to the given bool and assigns it to the AppendToFile field.
func (o *ExportDataSetupType) SetAppendToFile(v bool) {
	o.AppendToFile = &v
}

// GetColumnSeparator returns the ColumnSeparator field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetColumnSeparator() string {
	if o == nil || IsNil(o.ColumnSeparator) {
		var ret string
		return ret
	}
	return *o.ColumnSeparator
}

// GetColumnSeparatorOk returns a tuple with the ColumnSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetColumnSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnSeparator) {
		return nil, false
	}
	return o.ColumnSeparator, true
}

// HasColumnSeparator returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasColumnSeparator() bool {
	if o != nil && !IsNil(o.ColumnSeparator) {
		return true
	}

	return false
}

// SetColumnSeparator gets a reference to the given string and assigns it to the ColumnSeparator field.
func (o *ExportDataSetupType) SetColumnSeparator(v string) {
	o.ColumnSeparator = &v
}

// GetComponentExport returns the ComponentExport field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetComponentExport() bool {
	if o == nil || IsNil(o.ComponentExport) {
		var ret bool
		return ret
	}
	return *o.ComponentExport
}

// GetComponentExportOk returns a tuple with the ComponentExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetComponentExportOk() (*bool, bool) {
	if o == nil || IsNil(o.ComponentExport) {
		return nil, false
	}
	return o.ComponentExport, true
}

// HasComponentExport returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasComponentExport() bool {
	if o != nil && !IsNil(o.ComponentExport) {
		return true
	}

	return false
}

// SetComponentExport gets a reference to the given bool and assigns it to the ComponentExport field.
func (o *ExportDataSetupType) SetComponentExport(v bool) {
	o.ComponentExport = &v
}

// GetCompressData returns the CompressData field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetCompressData() bool {
	if o == nil || IsNil(o.CompressData) {
		var ret bool
		return ret
	}
	return *o.CompressData
}

// GetCompressDataOk returns a tuple with the CompressData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetCompressDataOk() (*bool, bool) {
	if o == nil || IsNil(o.CompressData) {
		return nil, false
	}
	return o.CompressData, true
}

// HasCompressData returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasCompressData() bool {
	if o != nil && !IsNil(o.CompressData) {
		return true
	}

	return false
}

// SetCompressData gets a reference to the given bool and assigns it to the CompressData field.
func (o *ExportDataSetupType) SetCompressData(v bool) {
	o.CompressData = &v
}

// GetCreateHeaderFooter returns the CreateHeaderFooter field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetCreateHeaderFooter() bool {
	if o == nil || IsNil(o.CreateHeaderFooter) {
		var ret bool
		return ret
	}
	return *o.CreateHeaderFooter
}

// GetCreateHeaderFooterOk returns a tuple with the CreateHeaderFooter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetCreateHeaderFooterOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateHeaderFooter) {
		return nil, false
	}
	return o.CreateHeaderFooter, true
}

// HasCreateHeaderFooter returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasCreateHeaderFooter() bool {
	if o != nil && !IsNil(o.CreateHeaderFooter) {
		return true
	}

	return false
}

// SetCreateHeaderFooter gets a reference to the given bool and assigns it to the CreateHeaderFooter field.
func (o *ExportDataSetupType) SetCreateHeaderFooter(v bool) {
	o.CreateHeaderFooter = &v
}

// GetDataSourceName returns the DataSourceName field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetDataSourceName() string {
	if o == nil || IsNil(o.DataSourceName) {
		var ret string
		return ret
	}
	return *o.DataSourceName
}

// GetDataSourceNameOk returns a tuple with the DataSourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetDataSourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataSourceName) {
		return nil, false
	}
	return o.DataSourceName, true
}

// HasDataSourceName returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasDataSourceName() bool {
	if o != nil && !IsNil(o.DataSourceName) {
		return true
	}

	return false
}

// SetDataSourceName gets a reference to the given string and assigns it to the DataSourceName field.
func (o *ExportDataSetupType) SetDataSourceName(v string) {
	o.DataSourceName = &v
}

// GetFilterCondition returns the FilterCondition field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetFilterCondition() string {
	if o == nil || IsNil(o.FilterCondition) {
		var ret string
		return ret
	}
	return *o.FilterCondition
}

// GetFilterConditionOk returns a tuple with the FilterCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetFilterConditionOk() (*string, bool) {
	if o == nil || IsNil(o.FilterCondition) {
		return nil, false
	}
	return o.FilterCondition, true
}

// HasFilterCondition returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasFilterCondition() bool {
	if o != nil && !IsNil(o.FilterCondition) {
		return true
	}

	return false
}

// SetFilterCondition gets a reference to the given string and assigns it to the FilterCondition field.
func (o *ExportDataSetupType) SetFilterCondition(v string) {
	o.FilterCondition = &v
}

// GetPostExportProcedure returns the PostExportProcedure field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetPostExportProcedure() string {
	if o == nil || IsNil(o.PostExportProcedure) {
		var ret string
		return ret
	}
	return *o.PostExportProcedure
}

// GetPostExportProcedureOk returns a tuple with the PostExportProcedure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetPostExportProcedureOk() (*string, bool) {
	if o == nil || IsNil(o.PostExportProcedure) {
		return nil, false
	}
	return o.PostExportProcedure, true
}

// HasPostExportProcedure returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasPostExportProcedure() bool {
	if o != nil && !IsNil(o.PostExportProcedure) {
		return true
	}

	return false
}

// SetPostExportProcedure gets a reference to the given string and assigns it to the PostExportProcedure field.
func (o *ExportDataSetupType) SetPostExportProcedure(v string) {
	o.PostExportProcedure = &v
}

// GetPreExportProcedure returns the PreExportProcedure field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetPreExportProcedure() string {
	if o == nil || IsNil(o.PreExportProcedure) {
		var ret string
		return ret
	}
	return *o.PreExportProcedure
}

// GetPreExportProcedureOk returns a tuple with the PreExportProcedure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetPreExportProcedureOk() (*string, bool) {
	if o == nil || IsNil(o.PreExportProcedure) {
		return nil, false
	}
	return o.PreExportProcedure, true
}

// HasPreExportProcedure returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasPreExportProcedure() bool {
	if o != nil && !IsNil(o.PreExportProcedure) {
		return true
	}

	return false
}

// SetPreExportProcedure gets a reference to the given string and assigns it to the PreExportProcedure field.
func (o *ExportDataSetupType) SetPreExportProcedure(v string) {
	o.PreExportProcedure = &v
}

// GetXMLDocumentTypeName returns the XMLDocumentTypeName field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetXMLDocumentTypeName() string {
	if o == nil || IsNil(o.XMLDocumentTypeName) {
		var ret string
		return ret
	}
	return *o.XMLDocumentTypeName
}

// GetXMLDocumentTypeNameOk returns a tuple with the XMLDocumentTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetXMLDocumentTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.XMLDocumentTypeName) {
		return nil, false
	}
	return o.XMLDocumentTypeName, true
}

// HasXMLDocumentTypeName returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasXMLDocumentTypeName() bool {
	if o != nil && !IsNil(o.XMLDocumentTypeName) {
		return true
	}

	return false
}

// SetXMLDocumentTypeName gets a reference to the given string and assigns it to the XMLDocumentTypeName field.
func (o *ExportDataSetupType) SetXMLDocumentTypeName(v string) {
	o.XMLDocumentTypeName = &v
}

// GetXMLDocumentTypePublicId returns the XMLDocumentTypePublicId field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetXMLDocumentTypePublicId() string {
	if o == nil || IsNil(o.XMLDocumentTypePublicId) {
		var ret string
		return ret
	}
	return *o.XMLDocumentTypePublicId
}

// GetXMLDocumentTypePublicIdOk returns a tuple with the XMLDocumentTypePublicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetXMLDocumentTypePublicIdOk() (*string, bool) {
	if o == nil || IsNil(o.XMLDocumentTypePublicId) {
		return nil, false
	}
	return o.XMLDocumentTypePublicId, true
}

// HasXMLDocumentTypePublicId returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasXMLDocumentTypePublicId() bool {
	if o != nil && !IsNil(o.XMLDocumentTypePublicId) {
		return true
	}

	return false
}

// SetXMLDocumentTypePublicId gets a reference to the given string and assigns it to the XMLDocumentTypePublicId field.
func (o *ExportDataSetupType) SetXMLDocumentTypePublicId(v string) {
	o.XMLDocumentTypePublicId = &v
}

// GetXMLDocumentTypeSystemId returns the XMLDocumentTypeSystemId field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetXMLDocumentTypeSystemId() string {
	if o == nil || IsNil(o.XMLDocumentTypeSystemId) {
		var ret string
		return ret
	}
	return *o.XMLDocumentTypeSystemId
}

// GetXMLDocumentTypeSystemIdOk returns a tuple with the XMLDocumentTypeSystemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetXMLDocumentTypeSystemIdOk() (*string, bool) {
	if o == nil || IsNil(o.XMLDocumentTypeSystemId) {
		return nil, false
	}
	return o.XMLDocumentTypeSystemId, true
}

// HasXMLDocumentTypeSystemId returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasXMLDocumentTypeSystemId() bool {
	if o != nil && !IsNil(o.XMLDocumentTypeSystemId) {
		return true
	}

	return false
}

// SetXMLDocumentTypeSystemId gets a reference to the given string and assigns it to the XMLDocumentTypeSystemId field.
func (o *ExportDataSetupType) SetXMLDocumentTypeSystemId(v string) {
	o.XMLDocumentTypeSystemId = &v
}

// GetXMLEncoding returns the XMLEncoding field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetXMLEncoding() string {
	if o == nil || IsNil(o.XMLEncoding) {
		var ret string
		return ret
	}
	return *o.XMLEncoding
}

// GetXMLEncodingOk returns a tuple with the XMLEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetXMLEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.XMLEncoding) {
		return nil, false
	}
	return o.XMLEncoding, true
}

// HasXMLEncoding returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasXMLEncoding() bool {
	if o != nil && !IsNil(o.XMLEncoding) {
		return true
	}

	return false
}

// SetXMLEncoding gets a reference to the given string and assigns it to the XMLEncoding field.
func (o *ExportDataSetupType) SetXMLEncoding(v string) {
	o.XMLEncoding = &v
}

// GetXMLProcessingInstructions returns the XMLProcessingInstructions field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetXMLProcessingInstructions() string {
	if o == nil || IsNil(o.XMLProcessingInstructions) {
		var ret string
		return ret
	}
	return *o.XMLProcessingInstructions
}

// GetXMLProcessingInstructionsOk returns a tuple with the XMLProcessingInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetXMLProcessingInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.XMLProcessingInstructions) {
		return nil, false
	}
	return o.XMLProcessingInstructions, true
}

// HasXMLProcessingInstructions returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasXMLProcessingInstructions() bool {
	if o != nil && !IsNil(o.XMLProcessingInstructions) {
		return true
	}

	return false
}

// SetXMLProcessingInstructions gets a reference to the given string and assigns it to the XMLProcessingInstructions field.
func (o *ExportDataSetupType) SetXMLProcessingInstructions(v string) {
	o.XMLProcessingInstructions = &v
}

// GetXMLRootTag returns the XMLRootTag field value if set, zero value otherwise.
func (o *ExportDataSetupType) GetXMLRootTag() string {
	if o == nil || IsNil(o.XMLRootTag) {
		var ret string
		return ret
	}
	return *o.XMLRootTag
}

// GetXMLRootTagOk returns a tuple with the XMLRootTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDataSetupType) GetXMLRootTagOk() (*string, bool) {
	if o == nil || IsNil(o.XMLRootTag) {
		return nil, false
	}
	return o.XMLRootTag, true
}

// HasXMLRootTag returns a boolean if a field has been set.
func (o *ExportDataSetupType) HasXMLRootTag() bool {
	if o != nil && !IsNil(o.XMLRootTag) {
		return true
	}

	return false
}

// SetXMLRootTag gets a reference to the given string and assigns it to the XMLRootTag field.
func (o *ExportDataSetupType) SetXMLRootTag(v string) {
	o.XMLRootTag = &v
}

func (o ExportDataSetupType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportDataSetupType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddNewLine) {
		toSerialize["addNewLine"] = o.AddNewLine
	}
	if !IsNil(o.AppendToFile) {
		toSerialize["appendToFile"] = o.AppendToFile
	}
	if !IsNil(o.ColumnSeparator) {
		toSerialize["columnSeparator"] = o.ColumnSeparator
	}
	if !IsNil(o.ComponentExport) {
		toSerialize["componentExport"] = o.ComponentExport
	}
	if !IsNil(o.CompressData) {
		toSerialize["compressData"] = o.CompressData
	}
	if !IsNil(o.CreateHeaderFooter) {
		toSerialize["createHeaderFooter"] = o.CreateHeaderFooter
	}
	if !IsNil(o.DataSourceName) {
		toSerialize["dataSourceName"] = o.DataSourceName
	}
	if !IsNil(o.FilterCondition) {
		toSerialize["filterCondition"] = o.FilterCondition
	}
	if !IsNil(o.PostExportProcedure) {
		toSerialize["postExportProcedure"] = o.PostExportProcedure
	}
	if !IsNil(o.PreExportProcedure) {
		toSerialize["preExportProcedure"] = o.PreExportProcedure
	}
	if !IsNil(o.XMLDocumentTypeName) {
		toSerialize["xMLDocumentTypeName"] = o.XMLDocumentTypeName
	}
	if !IsNil(o.XMLDocumentTypePublicId) {
		toSerialize["xMLDocumentTypePublicId"] = o.XMLDocumentTypePublicId
	}
	if !IsNil(o.XMLDocumentTypeSystemId) {
		toSerialize["xMLDocumentTypeSystemId"] = o.XMLDocumentTypeSystemId
	}
	if !IsNil(o.XMLEncoding) {
		toSerialize["xMLEncoding"] = o.XMLEncoding
	}
	if !IsNil(o.XMLProcessingInstructions) {
		toSerialize["xMLProcessingInstructions"] = o.XMLProcessingInstructions
	}
	if !IsNil(o.XMLRootTag) {
		toSerialize["xMLRootTag"] = o.XMLRootTag
	}
	return toSerialize, nil
}

type NullableExportDataSetupType struct {
	value *ExportDataSetupType
	isSet bool
}

func (v NullableExportDataSetupType) Get() *ExportDataSetupType {
	return v.value
}

func (v *NullableExportDataSetupType) Set(val *ExportDataSetupType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportDataSetupType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportDataSetupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportDataSetupType(val *ExportDataSetupType) *NullableExportDataSetupType {
	return &NullableExportDataSetupType{value: val, isSet: true}
}

func (v NullableExportDataSetupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportDataSetupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


