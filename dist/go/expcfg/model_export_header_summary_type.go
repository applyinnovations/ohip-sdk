/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportHeaderSummaryType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportHeaderSummaryType{}

// ExportHeaderSummaryType Details of one export.
type ExportHeaderSummaryType struct {
	ExportFileId *UniqueIDType `json:"exportFileId,omitempty"`
	// The file type of the export.
	FileType *string `json:"fileType,omitempty"`
	// The description of the source file of the export.
	SourceDescription *string `json:"sourceDescription,omitempty"`
	// The description of the export.
	Description *string `json:"description,omitempty"`
	// The hotel code for the export.
	HotelId *string `json:"hotelId,omitempty"`
	ExportType *ExportType `json:"exportType,omitempty"`
	// An indicator which show the active status of the export.
	Inactive *bool `json:"inactive,omitempty"`
	MasterExportId *UniqueIDType `json:"masterExportId,omitempty"`
	// The name of the parameter form used to collect runtime information.
	ParameterForm *string `json:"parameterForm,omitempty"`
	// Indicates if the export is an XML file
	ExportXml *bool `json:"exportXml,omitempty"`
	// Internal number to indicate the log level used when generating the export.
	LogLevel *int32 `json:"logLevel,omitempty"`
	// Component export sequence
	ExportSequence *int32 `json:"exportSequence,omitempty"`
	// Indicates if the export has sensitive data
	ContainsSensitiveData *bool `json:"containsSensitiveData,omitempty"`
}

// NewExportHeaderSummaryType instantiates a new ExportHeaderSummaryType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportHeaderSummaryType() *ExportHeaderSummaryType {
	this := ExportHeaderSummaryType{}
	return &this
}

// NewExportHeaderSummaryTypeWithDefaults instantiates a new ExportHeaderSummaryType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportHeaderSummaryTypeWithDefaults() *ExportHeaderSummaryType {
	this := ExportHeaderSummaryType{}
	return &this
}

// GetExportFileId returns the ExportFileId field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetExportFileId() UniqueIDType {
	if o == nil || IsNil(o.ExportFileId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExportFileId
}

// GetExportFileIdOk returns a tuple with the ExportFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetExportFileIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExportFileId) {
		return nil, false
	}
	return o.ExportFileId, true
}

// HasExportFileId returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasExportFileId() bool {
	if o != nil && !IsNil(o.ExportFileId) {
		return true
	}

	return false
}

// SetExportFileId gets a reference to the given UniqueIDType and assigns it to the ExportFileId field.
func (o *ExportHeaderSummaryType) SetExportFileId(v UniqueIDType) {
	o.ExportFileId = &v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *ExportHeaderSummaryType) SetFileType(v string) {
	o.FileType = &v
}

// GetSourceDescription returns the SourceDescription field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetSourceDescription() string {
	if o == nil || IsNil(o.SourceDescription) {
		var ret string
		return ret
	}
	return *o.SourceDescription
}

// GetSourceDescriptionOk returns a tuple with the SourceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetSourceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SourceDescription) {
		return nil, false
	}
	return o.SourceDescription, true
}

// HasSourceDescription returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasSourceDescription() bool {
	if o != nil && !IsNil(o.SourceDescription) {
		return true
	}

	return false
}

// SetSourceDescription gets a reference to the given string and assigns it to the SourceDescription field.
func (o *ExportHeaderSummaryType) SetSourceDescription(v string) {
	o.SourceDescription = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExportHeaderSummaryType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ExportHeaderSummaryType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetExportType returns the ExportType field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetExportType() ExportType {
	if o == nil || IsNil(o.ExportType) {
		var ret ExportType
		return ret
	}
	return *o.ExportType
}

// GetExportTypeOk returns a tuple with the ExportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetExportTypeOk() (*ExportType, bool) {
	if o == nil || IsNil(o.ExportType) {
		return nil, false
	}
	return o.ExportType, true
}

// HasExportType returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasExportType() bool {
	if o != nil && !IsNil(o.ExportType) {
		return true
	}

	return false
}

// SetExportType gets a reference to the given ExportType and assigns it to the ExportType field.
func (o *ExportHeaderSummaryType) SetExportType(v ExportType) {
	o.ExportType = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ExportHeaderSummaryType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetMasterExportId returns the MasterExportId field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetMasterExportId() UniqueIDType {
	if o == nil || IsNil(o.MasterExportId) {
		var ret UniqueIDType
		return ret
	}
	return *o.MasterExportId
}

// GetMasterExportIdOk returns a tuple with the MasterExportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetMasterExportIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.MasterExportId) {
		return nil, false
	}
	return o.MasterExportId, true
}

// HasMasterExportId returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasMasterExportId() bool {
	if o != nil && !IsNil(o.MasterExportId) {
		return true
	}

	return false
}

// SetMasterExportId gets a reference to the given UniqueIDType and assigns it to the MasterExportId field.
func (o *ExportHeaderSummaryType) SetMasterExportId(v UniqueIDType) {
	o.MasterExportId = &v
}

// GetParameterForm returns the ParameterForm field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetParameterForm() string {
	if o == nil || IsNil(o.ParameterForm) {
		var ret string
		return ret
	}
	return *o.ParameterForm
}

// GetParameterFormOk returns a tuple with the ParameterForm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetParameterFormOk() (*string, bool) {
	if o == nil || IsNil(o.ParameterForm) {
		return nil, false
	}
	return o.ParameterForm, true
}

// HasParameterForm returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasParameterForm() bool {
	if o != nil && !IsNil(o.ParameterForm) {
		return true
	}

	return false
}

// SetParameterForm gets a reference to the given string and assigns it to the ParameterForm field.
func (o *ExportHeaderSummaryType) SetParameterForm(v string) {
	o.ParameterForm = &v
}

// GetExportXml returns the ExportXml field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetExportXml() bool {
	if o == nil || IsNil(o.ExportXml) {
		var ret bool
		return ret
	}
	return *o.ExportXml
}

// GetExportXmlOk returns a tuple with the ExportXml field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetExportXmlOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportXml) {
		return nil, false
	}
	return o.ExportXml, true
}

// HasExportXml returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasExportXml() bool {
	if o != nil && !IsNil(o.ExportXml) {
		return true
	}

	return false
}

// SetExportXml gets a reference to the given bool and assigns it to the ExportXml field.
func (o *ExportHeaderSummaryType) SetExportXml(v bool) {
	o.ExportXml = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetLogLevel() int32 {
	if o == nil || IsNil(o.LogLevel) {
		var ret int32
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetLogLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.LogLevel) {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasLogLevel() bool {
	if o != nil && !IsNil(o.LogLevel) {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given int32 and assigns it to the LogLevel field.
func (o *ExportHeaderSummaryType) SetLogLevel(v int32) {
	o.LogLevel = &v
}

// GetExportSequence returns the ExportSequence field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetExportSequence() int32 {
	if o == nil || IsNil(o.ExportSequence) {
		var ret int32
		return ret
	}
	return *o.ExportSequence
}

// GetExportSequenceOk returns a tuple with the ExportSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetExportSequenceOk() (*int32, bool) {
	if o == nil || IsNil(o.ExportSequence) {
		return nil, false
	}
	return o.ExportSequence, true
}

// HasExportSequence returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasExportSequence() bool {
	if o != nil && !IsNil(o.ExportSequence) {
		return true
	}

	return false
}

// SetExportSequence gets a reference to the given int32 and assigns it to the ExportSequence field.
func (o *ExportHeaderSummaryType) SetExportSequence(v int32) {
	o.ExportSequence = &v
}

// GetContainsSensitiveData returns the ContainsSensitiveData field value if set, zero value otherwise.
func (o *ExportHeaderSummaryType) GetContainsSensitiveData() bool {
	if o == nil || IsNil(o.ContainsSensitiveData) {
		var ret bool
		return ret
	}
	return *o.ContainsSensitiveData
}

// GetContainsSensitiveDataOk returns a tuple with the ContainsSensitiveData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportHeaderSummaryType) GetContainsSensitiveDataOk() (*bool, bool) {
	if o == nil || IsNil(o.ContainsSensitiveData) {
		return nil, false
	}
	return o.ContainsSensitiveData, true
}

// HasContainsSensitiveData returns a boolean if a field has been set.
func (o *ExportHeaderSummaryType) HasContainsSensitiveData() bool {
	if o != nil && !IsNil(o.ContainsSensitiveData) {
		return true
	}

	return false
}

// SetContainsSensitiveData gets a reference to the given bool and assigns it to the ContainsSensitiveData field.
func (o *ExportHeaderSummaryType) SetContainsSensitiveData(v bool) {
	o.ContainsSensitiveData = &v
}

func (o ExportHeaderSummaryType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportHeaderSummaryType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportFileId) {
		toSerialize["exportFileId"] = o.ExportFileId
	}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}
	if !IsNil(o.SourceDescription) {
		toSerialize["sourceDescription"] = o.SourceDescription
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ExportType) {
		toSerialize["exportType"] = o.ExportType
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.MasterExportId) {
		toSerialize["masterExportId"] = o.MasterExportId
	}
	if !IsNil(o.ParameterForm) {
		toSerialize["parameterForm"] = o.ParameterForm
	}
	if !IsNil(o.ExportXml) {
		toSerialize["exportXml"] = o.ExportXml
	}
	if !IsNil(o.LogLevel) {
		toSerialize["logLevel"] = o.LogLevel
	}
	if !IsNil(o.ExportSequence) {
		toSerialize["exportSequence"] = o.ExportSequence
	}
	if !IsNil(o.ContainsSensitiveData) {
		toSerialize["containsSensitiveData"] = o.ContainsSensitiveData
	}
	return toSerialize, nil
}

type NullableExportHeaderSummaryType struct {
	value *ExportHeaderSummaryType
	isSet bool
}

func (v NullableExportHeaderSummaryType) Get() *ExportHeaderSummaryType {
	return v.value
}

func (v *NullableExportHeaderSummaryType) Set(val *ExportHeaderSummaryType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportHeaderSummaryType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportHeaderSummaryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportHeaderSummaryType(val *ExportHeaderSummaryType) *NullableExportHeaderSummaryType {
	return &NullableExportHeaderSummaryType{value: val, isSet: true}
}

func (v NullableExportHeaderSummaryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportHeaderSummaryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


