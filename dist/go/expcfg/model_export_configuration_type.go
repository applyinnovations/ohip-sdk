/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportConfigurationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportConfigurationType{}

// ExportConfigurationType Type that hold configuration information related to export
type ExportConfigurationType struct {
	// A collection of export columns.
	Columns []ExportColumnDetailType `json:"columns,omitempty"`
	// A collection of export components.
	Components []ExportComponentType `json:"components,omitempty"`
	DataSetup *ExportDataSetupType `json:"dataSetup,omitempty"`
	DestinationSetup *ExportDestinationType `json:"destinationSetup,omitempty"`
	GenerateConfigSetup *ExportGenerateConfigurationType `json:"generateConfigSetup,omitempty"`
	SummaryInfo *ExportHeaderSummaryType `json:"summaryInfo,omitempty"`
	XmlColumns *ExportXMLColumnsType `json:"xmlColumns,omitempty"`
}

// NewExportConfigurationType instantiates a new ExportConfigurationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportConfigurationType() *ExportConfigurationType {
	this := ExportConfigurationType{}
	return &this
}

// NewExportConfigurationTypeWithDefaults instantiates a new ExportConfigurationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportConfigurationTypeWithDefaults() *ExportConfigurationType {
	this := ExportConfigurationType{}
	return &this
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *ExportConfigurationType) GetColumns() []ExportColumnDetailType {
	if o == nil || IsNil(o.Columns) {
		var ret []ExportColumnDetailType
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConfigurationType) GetColumnsOk() ([]ExportColumnDetailType, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *ExportConfigurationType) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []ExportColumnDetailType and assigns it to the Columns field.
func (o *ExportConfigurationType) SetColumns(v []ExportColumnDetailType) {
	o.Columns = v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *ExportConfigurationType) GetComponents() []ExportComponentType {
	if o == nil || IsNil(o.Components) {
		var ret []ExportComponentType
		return ret
	}
	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConfigurationType) GetComponentsOk() ([]ExportComponentType, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *ExportConfigurationType) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []ExportComponentType and assigns it to the Components field.
func (o *ExportConfigurationType) SetComponents(v []ExportComponentType) {
	o.Components = v
}

// GetDataSetup returns the DataSetup field value if set, zero value otherwise.
func (o *ExportConfigurationType) GetDataSetup() ExportDataSetupType {
	if o == nil || IsNil(o.DataSetup) {
		var ret ExportDataSetupType
		return ret
	}
	return *o.DataSetup
}

// GetDataSetupOk returns a tuple with the DataSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConfigurationType) GetDataSetupOk() (*ExportDataSetupType, bool) {
	if o == nil || IsNil(o.DataSetup) {
		return nil, false
	}
	return o.DataSetup, true
}

// HasDataSetup returns a boolean if a field has been set.
func (o *ExportConfigurationType) HasDataSetup() bool {
	if o != nil && !IsNil(o.DataSetup) {
		return true
	}

	return false
}

// SetDataSetup gets a reference to the given ExportDataSetupType and assigns it to the DataSetup field.
func (o *ExportConfigurationType) SetDataSetup(v ExportDataSetupType) {
	o.DataSetup = &v
}

// GetDestinationSetup returns the DestinationSetup field value if set, zero value otherwise.
func (o *ExportConfigurationType) GetDestinationSetup() ExportDestinationType {
	if o == nil || IsNil(o.DestinationSetup) {
		var ret ExportDestinationType
		return ret
	}
	return *o.DestinationSetup
}

// GetDestinationSetupOk returns a tuple with the DestinationSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConfigurationType) GetDestinationSetupOk() (*ExportDestinationType, bool) {
	if o == nil || IsNil(o.DestinationSetup) {
		return nil, false
	}
	return o.DestinationSetup, true
}

// HasDestinationSetup returns a boolean if a field has been set.
func (o *ExportConfigurationType) HasDestinationSetup() bool {
	if o != nil && !IsNil(o.DestinationSetup) {
		return true
	}

	return false
}

// SetDestinationSetup gets a reference to the given ExportDestinationType and assigns it to the DestinationSetup field.
func (o *ExportConfigurationType) SetDestinationSetup(v ExportDestinationType) {
	o.DestinationSetup = &v
}

// GetGenerateConfigSetup returns the GenerateConfigSetup field value if set, zero value otherwise.
func (o *ExportConfigurationType) GetGenerateConfigSetup() ExportGenerateConfigurationType {
	if o == nil || IsNil(o.GenerateConfigSetup) {
		var ret ExportGenerateConfigurationType
		return ret
	}
	return *o.GenerateConfigSetup
}

// GetGenerateConfigSetupOk returns a tuple with the GenerateConfigSetup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConfigurationType) GetGenerateConfigSetupOk() (*ExportGenerateConfigurationType, bool) {
	if o == nil || IsNil(o.GenerateConfigSetup) {
		return nil, false
	}
	return o.GenerateConfigSetup, true
}

// HasGenerateConfigSetup returns a boolean if a field has been set.
func (o *ExportConfigurationType) HasGenerateConfigSetup() bool {
	if o != nil && !IsNil(o.GenerateConfigSetup) {
		return true
	}

	return false
}

// SetGenerateConfigSetup gets a reference to the given ExportGenerateConfigurationType and assigns it to the GenerateConfigSetup field.
func (o *ExportConfigurationType) SetGenerateConfigSetup(v ExportGenerateConfigurationType) {
	o.GenerateConfigSetup = &v
}

// GetSummaryInfo returns the SummaryInfo field value if set, zero value otherwise.
func (o *ExportConfigurationType) GetSummaryInfo() ExportHeaderSummaryType {
	if o == nil || IsNil(o.SummaryInfo) {
		var ret ExportHeaderSummaryType
		return ret
	}
	return *o.SummaryInfo
}

// GetSummaryInfoOk returns a tuple with the SummaryInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConfigurationType) GetSummaryInfoOk() (*ExportHeaderSummaryType, bool) {
	if o == nil || IsNil(o.SummaryInfo) {
		return nil, false
	}
	return o.SummaryInfo, true
}

// HasSummaryInfo returns a boolean if a field has been set.
func (o *ExportConfigurationType) HasSummaryInfo() bool {
	if o != nil && !IsNil(o.SummaryInfo) {
		return true
	}

	return false
}

// SetSummaryInfo gets a reference to the given ExportHeaderSummaryType and assigns it to the SummaryInfo field.
func (o *ExportConfigurationType) SetSummaryInfo(v ExportHeaderSummaryType) {
	o.SummaryInfo = &v
}

// GetXmlColumns returns the XmlColumns field value if set, zero value otherwise.
func (o *ExportConfigurationType) GetXmlColumns() ExportXMLColumnsType {
	if o == nil || IsNil(o.XmlColumns) {
		var ret ExportXMLColumnsType
		return ret
	}
	return *o.XmlColumns
}

// GetXmlColumnsOk returns a tuple with the XmlColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportConfigurationType) GetXmlColumnsOk() (*ExportXMLColumnsType, bool) {
	if o == nil || IsNil(o.XmlColumns) {
		return nil, false
	}
	return o.XmlColumns, true
}

// HasXmlColumns returns a boolean if a field has been set.
func (o *ExportConfigurationType) HasXmlColumns() bool {
	if o != nil && !IsNil(o.XmlColumns) {
		return true
	}

	return false
}

// SetXmlColumns gets a reference to the given ExportXMLColumnsType and assigns it to the XmlColumns field.
func (o *ExportConfigurationType) SetXmlColumns(v ExportXMLColumnsType) {
	o.XmlColumns = &v
}

func (o ExportConfigurationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportConfigurationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	if !IsNil(o.DataSetup) {
		toSerialize["dataSetup"] = o.DataSetup
	}
	if !IsNil(o.DestinationSetup) {
		toSerialize["destinationSetup"] = o.DestinationSetup
	}
	if !IsNil(o.GenerateConfigSetup) {
		toSerialize["generateConfigSetup"] = o.GenerateConfigSetup
	}
	if !IsNil(o.SummaryInfo) {
		toSerialize["summaryInfo"] = o.SummaryInfo
	}
	if !IsNil(o.XmlColumns) {
		toSerialize["xmlColumns"] = o.XmlColumns
	}
	return toSerialize, nil
}

type NullableExportConfigurationType struct {
	value *ExportConfigurationType
	isSet bool
}

func (v NullableExportConfigurationType) Get() *ExportConfigurationType {
	return v.value
}

func (v *NullableExportConfigurationType) Set(val *ExportConfigurationType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportConfigurationType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportConfigurationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportConfigurationType(val *ExportConfigurationType) *NullableExportConfigurationType {
	return &NullableExportConfigurationType{value: val, isSet: true}
}

func (v NullableExportConfigurationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportConfigurationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


