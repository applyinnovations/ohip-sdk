/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportMappingMasterInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMappingMasterInfoType{}

// ExportMappingMasterInfoType Contains information about the various mapping types and the mapping codes.
type ExportMappingMasterInfoType struct {
	// Provides information about the mapping type.
	MappingCodes []ExportMappingCodeType `json:"mappingCodes,omitempty"`
	MappingCodesCount *int32 `json:"mappingCodesCount,omitempty"`
	// Provides information about the mapping type.
	MappingTypes []ExportMappingType `json:"mappingTypes,omitempty"`
	MappingTypesCount *int32 `json:"mappingTypesCount,omitempty"`
}

// NewExportMappingMasterInfoType instantiates a new ExportMappingMasterInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMappingMasterInfoType() *ExportMappingMasterInfoType {
	this := ExportMappingMasterInfoType{}
	return &this
}

// NewExportMappingMasterInfoTypeWithDefaults instantiates a new ExportMappingMasterInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMappingMasterInfoTypeWithDefaults() *ExportMappingMasterInfoType {
	this := ExportMappingMasterInfoType{}
	return &this
}

// GetMappingCodes returns the MappingCodes field value if set, zero value otherwise.
func (o *ExportMappingMasterInfoType) GetMappingCodes() []ExportMappingCodeType {
	if o == nil || IsNil(o.MappingCodes) {
		var ret []ExportMappingCodeType
		return ret
	}
	return o.MappingCodes
}

// GetMappingCodesOk returns a tuple with the MappingCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingMasterInfoType) GetMappingCodesOk() ([]ExportMappingCodeType, bool) {
	if o == nil || IsNil(o.MappingCodes) {
		return nil, false
	}
	return o.MappingCodes, true
}

// HasMappingCodes returns a boolean if a field has been set.
func (o *ExportMappingMasterInfoType) HasMappingCodes() bool {
	if o != nil && !IsNil(o.MappingCodes) {
		return true
	}

	return false
}

// SetMappingCodes gets a reference to the given []ExportMappingCodeType and assigns it to the MappingCodes field.
func (o *ExportMappingMasterInfoType) SetMappingCodes(v []ExportMappingCodeType) {
	o.MappingCodes = v
}

// GetMappingCodesCount returns the MappingCodesCount field value if set, zero value otherwise.
func (o *ExportMappingMasterInfoType) GetMappingCodesCount() int32 {
	if o == nil || IsNil(o.MappingCodesCount) {
		var ret int32
		return ret
	}
	return *o.MappingCodesCount
}

// GetMappingCodesCountOk returns a tuple with the MappingCodesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingMasterInfoType) GetMappingCodesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MappingCodesCount) {
		return nil, false
	}
	return o.MappingCodesCount, true
}

// HasMappingCodesCount returns a boolean if a field has been set.
func (o *ExportMappingMasterInfoType) HasMappingCodesCount() bool {
	if o != nil && !IsNil(o.MappingCodesCount) {
		return true
	}

	return false
}

// SetMappingCodesCount gets a reference to the given int32 and assigns it to the MappingCodesCount field.
func (o *ExportMappingMasterInfoType) SetMappingCodesCount(v int32) {
	o.MappingCodesCount = &v
}

// GetMappingTypes returns the MappingTypes field value if set, zero value otherwise.
func (o *ExportMappingMasterInfoType) GetMappingTypes() []ExportMappingType {
	if o == nil || IsNil(o.MappingTypes) {
		var ret []ExportMappingType
		return ret
	}
	return o.MappingTypes
}

// GetMappingTypesOk returns a tuple with the MappingTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingMasterInfoType) GetMappingTypesOk() ([]ExportMappingType, bool) {
	if o == nil || IsNil(o.MappingTypes) {
		return nil, false
	}
	return o.MappingTypes, true
}

// HasMappingTypes returns a boolean if a field has been set.
func (o *ExportMappingMasterInfoType) HasMappingTypes() bool {
	if o != nil && !IsNil(o.MappingTypes) {
		return true
	}

	return false
}

// SetMappingTypes gets a reference to the given []ExportMappingType and assigns it to the MappingTypes field.
func (o *ExportMappingMasterInfoType) SetMappingTypes(v []ExportMappingType) {
	o.MappingTypes = v
}

// GetMappingTypesCount returns the MappingTypesCount field value if set, zero value otherwise.
func (o *ExportMappingMasterInfoType) GetMappingTypesCount() int32 {
	if o == nil || IsNil(o.MappingTypesCount) {
		var ret int32
		return ret
	}
	return *o.MappingTypesCount
}

// GetMappingTypesCountOk returns a tuple with the MappingTypesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingMasterInfoType) GetMappingTypesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MappingTypesCount) {
		return nil, false
	}
	return o.MappingTypesCount, true
}

// HasMappingTypesCount returns a boolean if a field has been set.
func (o *ExportMappingMasterInfoType) HasMappingTypesCount() bool {
	if o != nil && !IsNil(o.MappingTypesCount) {
		return true
	}

	return false
}

// SetMappingTypesCount gets a reference to the given int32 and assigns it to the MappingTypesCount field.
func (o *ExportMappingMasterInfoType) SetMappingTypesCount(v int32) {
	o.MappingTypesCount = &v
}

func (o ExportMappingMasterInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMappingMasterInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MappingCodes) {
		toSerialize["mappingCodes"] = o.MappingCodes
	}
	if !IsNil(o.MappingCodesCount) {
		toSerialize["mappingCodesCount"] = o.MappingCodesCount
	}
	if !IsNil(o.MappingTypes) {
		toSerialize["mappingTypes"] = o.MappingTypes
	}
	if !IsNil(o.MappingTypesCount) {
		toSerialize["mappingTypesCount"] = o.MappingTypesCount
	}
	return toSerialize, nil
}

type NullableExportMappingMasterInfoType struct {
	value *ExportMappingMasterInfoType
	isSet bool
}

func (v NullableExportMappingMasterInfoType) Get() *ExportMappingMasterInfoType {
	return v.value
}

func (v *NullableExportMappingMasterInfoType) Set(val *ExportMappingMasterInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMappingMasterInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMappingMasterInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMappingMasterInfoType(val *ExportMappingMasterInfoType) *NullableExportMappingMasterInfoType {
	return &NullableExportMappingMasterInfoType{value: val, isSet: true}
}

func (v NullableExportMappingMasterInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMappingMasterInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


