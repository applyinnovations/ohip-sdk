/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
	"fmt"
)

// GeneratedExportStatusType Status indicates whether job is running or not
type GeneratedExportStatusType string

// List of generatedExportStatusType
const (
	GENERATEDEXPORTSTATUSTYPE_IN_QUEUE GeneratedExportStatusType = "InQueue"
	GENERATEDEXPORTSTATUSTYPE_RUNNING GeneratedExportStatusType = "Running"
	GENERATEDEXPORTSTATUSTYPE_COMPLETED GeneratedExportStatusType = "Completed"
	GENERATEDEXPORTSTATUSTYPE_FAILED GeneratedExportStatusType = "Failed"
)

// All allowed values of GeneratedExportStatusType enum
var AllowedGeneratedExportStatusTypeEnumValues = []GeneratedExportStatusType{
	"InQueue",
	"Running",
	"Completed",
	"Failed",
}

func (v *GeneratedExportStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GeneratedExportStatusType(value)
	for _, existing := range AllowedGeneratedExportStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GeneratedExportStatusType", value)
}

// NewGeneratedExportStatusTypeFromValue returns a pointer to a valid GeneratedExportStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGeneratedExportStatusTypeFromValue(v string) (*GeneratedExportStatusType, error) {
	ev := GeneratedExportStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GeneratedExportStatusType: valid values are %v", v, AllowedGeneratedExportStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GeneratedExportStatusType) IsValid() bool {
	for _, existing := range AllowedGeneratedExportStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to generatedExportStatusType value
func (v GeneratedExportStatusType) Ptr() *GeneratedExportStatusType {
	return &v
}

type NullableGeneratedExportStatusType struct {
	value *GeneratedExportStatusType
	isSet bool
}

func (v NullableGeneratedExportStatusType) Get() *GeneratedExportStatusType {
	return v.value
}

func (v *NullableGeneratedExportStatusType) Set(val *GeneratedExportStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneratedExportStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneratedExportStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneratedExportStatusType(val *GeneratedExportStatusType) *NullableGeneratedExportStatusType {
	return &NullableGeneratedExportStatusType{value: val, isSet: true}
}

func (v NullableGeneratedExportStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneratedExportStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

