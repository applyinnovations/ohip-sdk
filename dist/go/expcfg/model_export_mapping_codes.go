/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportMappingCodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMappingCodes{}

// ExportMappingCodes Request to create export mapping code for a given export.
type ExportMappingCodes struct {
	// Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
	HotelId *string `json:"hotelId,omitempty"`
	// The details of the export mapping code being created.
	ExportMappingCodes []ExportMappingCodeType `json:"exportMappingCodes,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewExportMappingCodes instantiates a new ExportMappingCodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMappingCodes() *ExportMappingCodes {
	this := ExportMappingCodes{}
	return &this
}

// NewExportMappingCodesWithDefaults instantiates a new ExportMappingCodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMappingCodesWithDefaults() *ExportMappingCodes {
	this := ExportMappingCodes{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ExportMappingCodes) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodes) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ExportMappingCodes) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ExportMappingCodes) SetHotelId(v string) {
	o.HotelId = &v
}

// GetExportMappingCodes returns the ExportMappingCodes field value if set, zero value otherwise.
func (o *ExportMappingCodes) GetExportMappingCodes() []ExportMappingCodeType {
	if o == nil || IsNil(o.ExportMappingCodes) {
		var ret []ExportMappingCodeType
		return ret
	}
	return o.ExportMappingCodes
}

// GetExportMappingCodesOk returns a tuple with the ExportMappingCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodes) GetExportMappingCodesOk() ([]ExportMappingCodeType, bool) {
	if o == nil || IsNil(o.ExportMappingCodes) {
		return nil, false
	}
	return o.ExportMappingCodes, true
}

// HasExportMappingCodes returns a boolean if a field has been set.
func (o *ExportMappingCodes) HasExportMappingCodes() bool {
	if o != nil && !IsNil(o.ExportMappingCodes) {
		return true
	}

	return false
}

// SetExportMappingCodes gets a reference to the given []ExportMappingCodeType and assigns it to the ExportMappingCodes field.
func (o *ExportMappingCodes) SetExportMappingCodes(v []ExportMappingCodeType) {
	o.ExportMappingCodes = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExportMappingCodes) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodes) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExportMappingCodes) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ExportMappingCodes) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ExportMappingCodes) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodes) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ExportMappingCodes) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ExportMappingCodes) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ExportMappingCodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMappingCodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ExportMappingCodes) {
		toSerialize["exportMappingCodes"] = o.ExportMappingCodes
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableExportMappingCodes struct {
	value *ExportMappingCodes
	isSet bool
}

func (v NullableExportMappingCodes) Get() *ExportMappingCodes {
	return v.value
}

func (v *NullableExportMappingCodes) Set(val *ExportMappingCodes) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMappingCodes) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMappingCodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMappingCodes(val *ExportMappingCodes) *NullableExportMappingCodes {
	return &NullableExportMappingCodes{value: val, isSet: true}
}

func (v NullableExportMappingCodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMappingCodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


