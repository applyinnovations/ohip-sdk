/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportMappingCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMappingCodeType{}

// ExportMappingCodeType Details of one export.
type ExportMappingCodeType struct {
	ExportMappingId *UniqueIDType `json:"exportMappingId,omitempty"`
	// Code for the export mapping type.
	MappingTypeCode *string `json:"mappingTypeCode,omitempty"`
	// Description of the export mapping code.
	Description *string `json:"description,omitempty"`
	DataType *ExportCodeDataType `json:"dataType,omitempty"`
	// Display sequence.
	SequenceNumber *float32 `json:"sequenceNumber,omitempty"`
	// Name of the LOV group to be used.
	LovName *string `json:"lovName,omitempty"`
	// This flag show LOV button when linking this mapping code to the configuration item.
	UseLov *bool `json:"useLov,omitempty"`
	// This flag indicates the configuration item cannot be saved until a mapping for this mapping detail has been entered.
	Required *bool `json:"required,omitempty"`
}

// NewExportMappingCodeType instantiates a new ExportMappingCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMappingCodeType() *ExportMappingCodeType {
	this := ExportMappingCodeType{}
	return &this
}

// NewExportMappingCodeTypeWithDefaults instantiates a new ExportMappingCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMappingCodeTypeWithDefaults() *ExportMappingCodeType {
	this := ExportMappingCodeType{}
	return &this
}

// GetExportMappingId returns the ExportMappingId field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetExportMappingId() UniqueIDType {
	if o == nil || IsNil(o.ExportMappingId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExportMappingId
}

// GetExportMappingIdOk returns a tuple with the ExportMappingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetExportMappingIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExportMappingId) {
		return nil, false
	}
	return o.ExportMappingId, true
}

// HasExportMappingId returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasExportMappingId() bool {
	if o != nil && !IsNil(o.ExportMappingId) {
		return true
	}

	return false
}

// SetExportMappingId gets a reference to the given UniqueIDType and assigns it to the ExportMappingId field.
func (o *ExportMappingCodeType) SetExportMappingId(v UniqueIDType) {
	o.ExportMappingId = &v
}

// GetMappingTypeCode returns the MappingTypeCode field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetMappingTypeCode() string {
	if o == nil || IsNil(o.MappingTypeCode) {
		var ret string
		return ret
	}
	return *o.MappingTypeCode
}

// GetMappingTypeCodeOk returns a tuple with the MappingTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetMappingTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MappingTypeCode) {
		return nil, false
	}
	return o.MappingTypeCode, true
}

// HasMappingTypeCode returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasMappingTypeCode() bool {
	if o != nil && !IsNil(o.MappingTypeCode) {
		return true
	}

	return false
}

// SetMappingTypeCode gets a reference to the given string and assigns it to the MappingTypeCode field.
func (o *ExportMappingCodeType) SetMappingTypeCode(v string) {
	o.MappingTypeCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ExportMappingCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetDataType() ExportCodeDataType {
	if o == nil || IsNil(o.DataType) {
		var ret ExportCodeDataType
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetDataTypeOk() (*ExportCodeDataType, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given ExportCodeDataType and assigns it to the DataType field.
func (o *ExportMappingCodeType) SetDataType(v ExportCodeDataType) {
	o.DataType = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetSequenceNumber() float32 {
	if o == nil || IsNil(o.SequenceNumber) {
		var ret float32
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetSequenceNumberOk() (*float32, bool) {
	if o == nil || IsNil(o.SequenceNumber) {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasSequenceNumber() bool {
	if o != nil && !IsNil(o.SequenceNumber) {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given float32 and assigns it to the SequenceNumber field.
func (o *ExportMappingCodeType) SetSequenceNumber(v float32) {
	o.SequenceNumber = &v
}

// GetLovName returns the LovName field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetLovName() string {
	if o == nil || IsNil(o.LovName) {
		var ret string
		return ret
	}
	return *o.LovName
}

// GetLovNameOk returns a tuple with the LovName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetLovNameOk() (*string, bool) {
	if o == nil || IsNil(o.LovName) {
		return nil, false
	}
	return o.LovName, true
}

// HasLovName returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasLovName() bool {
	if o != nil && !IsNil(o.LovName) {
		return true
	}

	return false
}

// SetLovName gets a reference to the given string and assigns it to the LovName field.
func (o *ExportMappingCodeType) SetLovName(v string) {
	o.LovName = &v
}

// GetUseLov returns the UseLov field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetUseLov() bool {
	if o == nil || IsNil(o.UseLov) {
		var ret bool
		return ret
	}
	return *o.UseLov
}

// GetUseLovOk returns a tuple with the UseLov field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetUseLovOk() (*bool, bool) {
	if o == nil || IsNil(o.UseLov) {
		return nil, false
	}
	return o.UseLov, true
}

// HasUseLov returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasUseLov() bool {
	if o != nil && !IsNil(o.UseLov) {
		return true
	}

	return false
}

// SetUseLov gets a reference to the given bool and assigns it to the UseLov field.
func (o *ExportMappingCodeType) SetUseLov(v bool) {
	o.UseLov = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ExportMappingCodeType) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMappingCodeType) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ExportMappingCodeType) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ExportMappingCodeType) SetRequired(v bool) {
	o.Required = &v
}

func (o ExportMappingCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMappingCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExportMappingId) {
		toSerialize["exportMappingId"] = o.ExportMappingId
	}
	if !IsNil(o.MappingTypeCode) {
		toSerialize["mappingTypeCode"] = o.MappingTypeCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DataType) {
		toSerialize["dataType"] = o.DataType
	}
	if !IsNil(o.SequenceNumber) {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if !IsNil(o.LovName) {
		toSerialize["lovName"] = o.LovName
	}
	if !IsNil(o.UseLov) {
		toSerialize["useLov"] = o.UseLov
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	return toSerialize, nil
}

type NullableExportMappingCodeType struct {
	value *ExportMappingCodeType
	isSet bool
}

func (v NullableExportMappingCodeType) Get() *ExportMappingCodeType {
	return v.value
}

func (v *NullableExportMappingCodeType) Set(val *ExportMappingCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMappingCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMappingCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMappingCodeType(val *ExportMappingCodeType) *NullableExportMappingCodeType {
	return &NullableExportMappingCodeType{value: val, isSet: true}
}

func (v NullableExportMappingCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMappingCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


