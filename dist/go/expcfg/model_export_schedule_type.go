/*
OPERA Cloud Export Configuration API

APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package expcfg

import (
	"encoding/json"
)

// checks if the ExportScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportScheduleType{}

// ExportScheduleType Type that holds all the information related to export schedule
type ExportScheduleType struct {
	// User who created the export schedule
	CreatedBy *string `json:"createdBy,omitempty"`
	// Export schedule is expected to end around this time. Time will be specified in the format dd-MM-yyyy:hh:mm:ss a Z
	EndDate *string `json:"endDate,omitempty"`
	// Export Description
	ExportDescription *string `json:"exportDescription,omitempty"`
	ExportFileId *UniqueIDType `json:"exportFileId,omitempty"`
	ExportGroup *ScheduleExportGroupType `json:"exportGroup,omitempty"`
	// Name of the export
	ExportName *string `json:"exportName,omitempty"`
	Frequency *ExportScheduleFrequencyType `json:"frequency,omitempty"`
	// Indicates whether schedule export is active or not
	Inactive *bool `json:"inactive,omitempty"`
	// Unique name that identifies export schedule
	JobName *string `json:"jobName,omitempty"`
	// Export is expected to run at time specified by this element. Time will be specified in the format dd-MM-yyyy:hh:mm:ss a Z
	NextScheduledRun *string `json:"nextScheduledRun,omitempty"`
	// Number of time export generated
	Runcount *int32 `json:"runcount,omitempty"`
	// Export scheduled started at this time. Time will be specified in the format dd-MM-yyyy:hh:mm:ss a Z
	StartDate *string `json:"startDate,omitempty"`
	// Export schedule status
	Status *string `json:"status,omitempty"`
}

// NewExportScheduleType instantiates a new ExportScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportScheduleType() *ExportScheduleType {
	this := ExportScheduleType{}
	return &this
}

// NewExportScheduleTypeWithDefaults instantiates a new ExportScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportScheduleTypeWithDefaults() *ExportScheduleType {
	this := ExportScheduleType{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ExportScheduleType) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ExportScheduleType) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *ExportScheduleType) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ExportScheduleType) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ExportScheduleType) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ExportScheduleType) SetEndDate(v string) {
	o.EndDate = &v
}

// GetExportDescription returns the ExportDescription field value if set, zero value otherwise.
func (o *ExportScheduleType) GetExportDescription() string {
	if o == nil || IsNil(o.ExportDescription) {
		var ret string
		return ret
	}
	return *o.ExportDescription
}

// GetExportDescriptionOk returns a tuple with the ExportDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetExportDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.ExportDescription) {
		return nil, false
	}
	return o.ExportDescription, true
}

// HasExportDescription returns a boolean if a field has been set.
func (o *ExportScheduleType) HasExportDescription() bool {
	if o != nil && !IsNil(o.ExportDescription) {
		return true
	}

	return false
}

// SetExportDescription gets a reference to the given string and assigns it to the ExportDescription field.
func (o *ExportScheduleType) SetExportDescription(v string) {
	o.ExportDescription = &v
}

// GetExportFileId returns the ExportFileId field value if set, zero value otherwise.
func (o *ExportScheduleType) GetExportFileId() UniqueIDType {
	if o == nil || IsNil(o.ExportFileId) {
		var ret UniqueIDType
		return ret
	}
	return *o.ExportFileId
}

// GetExportFileIdOk returns a tuple with the ExportFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetExportFileIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.ExportFileId) {
		return nil, false
	}
	return o.ExportFileId, true
}

// HasExportFileId returns a boolean if a field has been set.
func (o *ExportScheduleType) HasExportFileId() bool {
	if o != nil && !IsNil(o.ExportFileId) {
		return true
	}

	return false
}

// SetExportFileId gets a reference to the given UniqueIDType and assigns it to the ExportFileId field.
func (o *ExportScheduleType) SetExportFileId(v UniqueIDType) {
	o.ExportFileId = &v
}

// GetExportGroup returns the ExportGroup field value if set, zero value otherwise.
func (o *ExportScheduleType) GetExportGroup() ScheduleExportGroupType {
	if o == nil || IsNil(o.ExportGroup) {
		var ret ScheduleExportGroupType
		return ret
	}
	return *o.ExportGroup
}

// GetExportGroupOk returns a tuple with the ExportGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetExportGroupOk() (*ScheduleExportGroupType, bool) {
	if o == nil || IsNil(o.ExportGroup) {
		return nil, false
	}
	return o.ExportGroup, true
}

// HasExportGroup returns a boolean if a field has been set.
func (o *ExportScheduleType) HasExportGroup() bool {
	if o != nil && !IsNil(o.ExportGroup) {
		return true
	}

	return false
}

// SetExportGroup gets a reference to the given ScheduleExportGroupType and assigns it to the ExportGroup field.
func (o *ExportScheduleType) SetExportGroup(v ScheduleExportGroupType) {
	o.ExportGroup = &v
}

// GetExportName returns the ExportName field value if set, zero value otherwise.
func (o *ExportScheduleType) GetExportName() string {
	if o == nil || IsNil(o.ExportName) {
		var ret string
		return ret
	}
	return *o.ExportName
}

// GetExportNameOk returns a tuple with the ExportName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetExportNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExportName) {
		return nil, false
	}
	return o.ExportName, true
}

// HasExportName returns a boolean if a field has been set.
func (o *ExportScheduleType) HasExportName() bool {
	if o != nil && !IsNil(o.ExportName) {
		return true
	}

	return false
}

// SetExportName gets a reference to the given string and assigns it to the ExportName field.
func (o *ExportScheduleType) SetExportName(v string) {
	o.ExportName = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *ExportScheduleType) GetFrequency() ExportScheduleFrequencyType {
	if o == nil || IsNil(o.Frequency) {
		var ret ExportScheduleFrequencyType
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetFrequencyOk() (*ExportScheduleFrequencyType, bool) {
	if o == nil || IsNil(o.Frequency) {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *ExportScheduleType) HasFrequency() bool {
	if o != nil && !IsNil(o.Frequency) {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given ExportScheduleFrequencyType and assigns it to the Frequency field.
func (o *ExportScheduleType) SetFrequency(v ExportScheduleFrequencyType) {
	o.Frequency = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *ExportScheduleType) GetInactive() bool {
	if o == nil || IsNil(o.Inactive) {
		var ret bool
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetInactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *ExportScheduleType) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given bool and assigns it to the Inactive field.
func (o *ExportScheduleType) SetInactive(v bool) {
	o.Inactive = &v
}

// GetJobName returns the JobName field value if set, zero value otherwise.
func (o *ExportScheduleType) GetJobName() string {
	if o == nil || IsNil(o.JobName) {
		var ret string
		return ret
	}
	return *o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetJobNameOk() (*string, bool) {
	if o == nil || IsNil(o.JobName) {
		return nil, false
	}
	return o.JobName, true
}

// HasJobName returns a boolean if a field has been set.
func (o *ExportScheduleType) HasJobName() bool {
	if o != nil && !IsNil(o.JobName) {
		return true
	}

	return false
}

// SetJobName gets a reference to the given string and assigns it to the JobName field.
func (o *ExportScheduleType) SetJobName(v string) {
	o.JobName = &v
}

// GetNextScheduledRun returns the NextScheduledRun field value if set, zero value otherwise.
func (o *ExportScheduleType) GetNextScheduledRun() string {
	if o == nil || IsNil(o.NextScheduledRun) {
		var ret string
		return ret
	}
	return *o.NextScheduledRun
}

// GetNextScheduledRunOk returns a tuple with the NextScheduledRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetNextScheduledRunOk() (*string, bool) {
	if o == nil || IsNil(o.NextScheduledRun) {
		return nil, false
	}
	return o.NextScheduledRun, true
}

// HasNextScheduledRun returns a boolean if a field has been set.
func (o *ExportScheduleType) HasNextScheduledRun() bool {
	if o != nil && !IsNil(o.NextScheduledRun) {
		return true
	}

	return false
}

// SetNextScheduledRun gets a reference to the given string and assigns it to the NextScheduledRun field.
func (o *ExportScheduleType) SetNextScheduledRun(v string) {
	o.NextScheduledRun = &v
}

// GetRuncount returns the Runcount field value if set, zero value otherwise.
func (o *ExportScheduleType) GetRuncount() int32 {
	if o == nil || IsNil(o.Runcount) {
		var ret int32
		return ret
	}
	return *o.Runcount
}

// GetRuncountOk returns a tuple with the Runcount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetRuncountOk() (*int32, bool) {
	if o == nil || IsNil(o.Runcount) {
		return nil, false
	}
	return o.Runcount, true
}

// HasRuncount returns a boolean if a field has been set.
func (o *ExportScheduleType) HasRuncount() bool {
	if o != nil && !IsNil(o.Runcount) {
		return true
	}

	return false
}

// SetRuncount gets a reference to the given int32 and assigns it to the Runcount field.
func (o *ExportScheduleType) SetRuncount(v int32) {
	o.Runcount = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ExportScheduleType) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ExportScheduleType) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ExportScheduleType) SetStartDate(v string) {
	o.StartDate = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExportScheduleType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportScheduleType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExportScheduleType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExportScheduleType) SetStatus(v string) {
	o.Status = &v
}

func (o ExportScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.ExportDescription) {
		toSerialize["exportDescription"] = o.ExportDescription
	}
	if !IsNil(o.ExportFileId) {
		toSerialize["exportFileId"] = o.ExportFileId
	}
	if !IsNil(o.ExportGroup) {
		toSerialize["exportGroup"] = o.ExportGroup
	}
	if !IsNil(o.ExportName) {
		toSerialize["exportName"] = o.ExportName
	}
	if !IsNil(o.Frequency) {
		toSerialize["frequency"] = o.Frequency
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.JobName) {
		toSerialize["jobName"] = o.JobName
	}
	if !IsNil(o.NextScheduledRun) {
		toSerialize["nextScheduledRun"] = o.NextScheduledRun
	}
	if !IsNil(o.Runcount) {
		toSerialize["runcount"] = o.Runcount
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableExportScheduleType struct {
	value *ExportScheduleType
	isSet bool
}

func (v NullableExportScheduleType) Get() *ExportScheduleType {
	return v.value
}

func (v *NullableExportScheduleType) Set(val *ExportScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableExportScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableExportScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportScheduleType(val *ExportScheduleType) *NullableExportScheduleType {
	return &NullableExportScheduleType{value: val, isSet: true}
}

func (v NullableExportScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


