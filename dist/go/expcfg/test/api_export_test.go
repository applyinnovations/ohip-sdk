/*
OPERA Cloud Export Configuration API

Testing ExportAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package expcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/expcfg"
)

func Test_expcfg_ExportAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExportAPIService ChangeExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var exportFileId string

		resp, httpRes, err := apiClient.ExportAPI.ChangeExportSchedules(context.Background(), hotelId, exportFileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService ChangeExportSchedulesByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportFileId string

		resp, httpRes, err := apiClient.ExportAPI.ChangeExportSchedulesByChain(context.Background(), exportFileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService DeleteExistingExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportMappingId string
		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.DeleteExistingExportMappings(context.Background(), exportMappingId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService DeleteExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mappingTypeCode string
		var exportMappingId string
		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.DeleteExportMappingCodes(context.Background(), mappingTypeCode, exportMappingId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.GetExportActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportColumnsAndFunctions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.GetExportColumnsAndFunctions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportMappingTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.GetExportMappingCodes(context.Background(), exportMappingTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportMappingCodesToLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configType string
		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.GetExportMappingCodesToLink(context.Background(), configType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportMappingLinkedCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.GetExportMappingLinkedCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.GetExportMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportMappingsByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.GetExportMappingsByChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.GetExportSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportsAvailable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.GetExportsAvailable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService GetExportsGenerated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportFileId string

		resp, httpRes, err := apiClient.ExportAPI.GetExportsGenerated(context.Background(), exportFileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService PostExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.PostExportMappingCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService PostExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.PostExportMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService PostExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.PostExportSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService PutExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.PutExportMappingCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService PutExportMappingLinkedTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.PutExportMappingLinkedTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService PutExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportAPI.PutExportMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportAPIService RemoveExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportAPI.RemoveExportSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
