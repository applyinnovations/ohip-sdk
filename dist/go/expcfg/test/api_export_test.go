/*
OPERA Cloud Export Configuration API

Testing ExportApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package expcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/expcfg"
)

func Test_expcfg_ExportApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ExportApiService ChangeExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string
		var exportFileId string

		resp, httpRes, err := apiClient.ExportApi.ChangeExportSchedules(context.Background(), hotelId, exportFileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService ChangeExportSchedulesByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportFileId string

		resp, httpRes, err := apiClient.ExportApi.ChangeExportSchedulesByChain(context.Background(), exportFileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService DeleteExistingExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportMappingId string
		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.DeleteExistingExportMappings(context.Background(), exportMappingId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService DeleteExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var mappingTypeCode string
		var exportMappingId string
		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.DeleteExportMappingCodes(context.Background(), mappingTypeCode, exportMappingId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.GetExportActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportColumnsAndFunctions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.GetExportColumnsAndFunctions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportMappingTypeId string
		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.GetExportMappingCodes(context.Background(), exportMappingTypeId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportMappingCodesToLink", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var configType string
		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.GetExportMappingCodesToLink(context.Background(), configType, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportMappingLinkedCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.GetExportMappingLinkedCodes(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.GetExportMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportMappingsByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.GetExportMappingsByChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.GetExportSchedules(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportsAvailable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.GetExportsAvailable(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService GetExportsGenerated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var exportFileId string

		resp, httpRes, err := apiClient.ExportApi.GetExportsGenerated(context.Background(), exportFileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService PostExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.PostExportMappingCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService PostExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.PostExportMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService PostExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.PostExportSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService PutExportMappingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.PutExportMappingCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService PutExportMappingLinkedTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.PutExportMappingLinkedTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService PutExportMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ExportApi.PutExportMappings(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExportApiService RemoveExportSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ExportApi.RemoveExportSchedules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
