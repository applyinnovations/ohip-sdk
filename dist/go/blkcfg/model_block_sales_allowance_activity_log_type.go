/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the BlockSalesAllowanceActivityLogType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockSalesAllowanceActivityLogType{}

// BlockSalesAllowanceActivityLogType struct for BlockSalesAllowanceActivityLogType
type BlockSalesAllowanceActivityLogType struct {
	HotelId *string `json:"hotelId,omitempty"`
	// Date on which change happened.
	LogDate *string `json:"logDate,omitempty"`
	// sales Allowance Date
	SalesAllowanceDate *string `json:"salesAllowanceDate,omitempty"`
	// Value of sales allowance before the change.
	OldQuantity *float32 `json:"oldQuantity,omitempty"`
	// Value of sales allowance after the change.
	NewQuantity *float32 `json:"newQuantity,omitempty"`
	RefActionId *float32 `json:"refActionId,omitempty"`
	// ID of user who made the change.
	LogUserId *float32 `json:"logUserId,omitempty"`
	// Name of user who made the change.
	LogUserName *string `json:"logUserName,omitempty"`
	// Action type.
	ActionType *string `json:"actionType,omitempty"`
	// The IP Address of the machine that performed the activity
	IpAddress *string `json:"ipAddress,omitempty"`
}

// NewBlockSalesAllowanceActivityLogType instantiates a new BlockSalesAllowanceActivityLogType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockSalesAllowanceActivityLogType() *BlockSalesAllowanceActivityLogType {
	this := BlockSalesAllowanceActivityLogType{}
	return &this
}

// NewBlockSalesAllowanceActivityLogTypeWithDefaults instantiates a new BlockSalesAllowanceActivityLogType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockSalesAllowanceActivityLogTypeWithDefaults() *BlockSalesAllowanceActivityLogType {
	this := BlockSalesAllowanceActivityLogType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockSalesAllowanceActivityLogType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetLogDate returns the LogDate field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetLogDate() string {
	if o == nil || IsNil(o.LogDate) {
		var ret string
		return ret
	}
	return *o.LogDate
}

// GetLogDateOk returns a tuple with the LogDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetLogDateOk() (*string, bool) {
	if o == nil || IsNil(o.LogDate) {
		return nil, false
	}
	return o.LogDate, true
}

// HasLogDate returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasLogDate() bool {
	if o != nil && !IsNil(o.LogDate) {
		return true
	}

	return false
}

// SetLogDate gets a reference to the given string and assigns it to the LogDate field.
func (o *BlockSalesAllowanceActivityLogType) SetLogDate(v string) {
	o.LogDate = &v
}

// GetSalesAllowanceDate returns the SalesAllowanceDate field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetSalesAllowanceDate() string {
	if o == nil || IsNil(o.SalesAllowanceDate) {
		var ret string
		return ret
	}
	return *o.SalesAllowanceDate
}

// GetSalesAllowanceDateOk returns a tuple with the SalesAllowanceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetSalesAllowanceDateOk() (*string, bool) {
	if o == nil || IsNil(o.SalesAllowanceDate) {
		return nil, false
	}
	return o.SalesAllowanceDate, true
}

// HasSalesAllowanceDate returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasSalesAllowanceDate() bool {
	if o != nil && !IsNil(o.SalesAllowanceDate) {
		return true
	}

	return false
}

// SetSalesAllowanceDate gets a reference to the given string and assigns it to the SalesAllowanceDate field.
func (o *BlockSalesAllowanceActivityLogType) SetSalesAllowanceDate(v string) {
	o.SalesAllowanceDate = &v
}

// GetOldQuantity returns the OldQuantity field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetOldQuantity() float32 {
	if o == nil || IsNil(o.OldQuantity) {
		var ret float32
		return ret
	}
	return *o.OldQuantity
}

// GetOldQuantityOk returns a tuple with the OldQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetOldQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.OldQuantity) {
		return nil, false
	}
	return o.OldQuantity, true
}

// HasOldQuantity returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasOldQuantity() bool {
	if o != nil && !IsNil(o.OldQuantity) {
		return true
	}

	return false
}

// SetOldQuantity gets a reference to the given float32 and assigns it to the OldQuantity field.
func (o *BlockSalesAllowanceActivityLogType) SetOldQuantity(v float32) {
	o.OldQuantity = &v
}

// GetNewQuantity returns the NewQuantity field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetNewQuantity() float32 {
	if o == nil || IsNil(o.NewQuantity) {
		var ret float32
		return ret
	}
	return *o.NewQuantity
}

// GetNewQuantityOk returns a tuple with the NewQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetNewQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.NewQuantity) {
		return nil, false
	}
	return o.NewQuantity, true
}

// HasNewQuantity returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasNewQuantity() bool {
	if o != nil && !IsNil(o.NewQuantity) {
		return true
	}

	return false
}

// SetNewQuantity gets a reference to the given float32 and assigns it to the NewQuantity field.
func (o *BlockSalesAllowanceActivityLogType) SetNewQuantity(v float32) {
	o.NewQuantity = &v
}

// GetRefActionId returns the RefActionId field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetRefActionId() float32 {
	if o == nil || IsNil(o.RefActionId) {
		var ret float32
		return ret
	}
	return *o.RefActionId
}

// GetRefActionIdOk returns a tuple with the RefActionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetRefActionIdOk() (*float32, bool) {
	if o == nil || IsNil(o.RefActionId) {
		return nil, false
	}
	return o.RefActionId, true
}

// HasRefActionId returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasRefActionId() bool {
	if o != nil && !IsNil(o.RefActionId) {
		return true
	}

	return false
}

// SetRefActionId gets a reference to the given float32 and assigns it to the RefActionId field.
func (o *BlockSalesAllowanceActivityLogType) SetRefActionId(v float32) {
	o.RefActionId = &v
}

// GetLogUserId returns the LogUserId field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetLogUserId() float32 {
	if o == nil || IsNil(o.LogUserId) {
		var ret float32
		return ret
	}
	return *o.LogUserId
}

// GetLogUserIdOk returns a tuple with the LogUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetLogUserIdOk() (*float32, bool) {
	if o == nil || IsNil(o.LogUserId) {
		return nil, false
	}
	return o.LogUserId, true
}

// HasLogUserId returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasLogUserId() bool {
	if o != nil && !IsNil(o.LogUserId) {
		return true
	}

	return false
}

// SetLogUserId gets a reference to the given float32 and assigns it to the LogUserId field.
func (o *BlockSalesAllowanceActivityLogType) SetLogUserId(v float32) {
	o.LogUserId = &v
}

// GetLogUserName returns the LogUserName field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetLogUserName() string {
	if o == nil || IsNil(o.LogUserName) {
		var ret string
		return ret
	}
	return *o.LogUserName
}

// GetLogUserNameOk returns a tuple with the LogUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetLogUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.LogUserName) {
		return nil, false
	}
	return o.LogUserName, true
}

// HasLogUserName returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasLogUserName() bool {
	if o != nil && !IsNil(o.LogUserName) {
		return true
	}

	return false
}

// SetLogUserName gets a reference to the given string and assigns it to the LogUserName field.
func (o *BlockSalesAllowanceActivityLogType) SetLogUserName(v string) {
	o.LogUserName = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *BlockSalesAllowanceActivityLogType) SetActionType(v string) {
	o.ActionType = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *BlockSalesAllowanceActivityLogType) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceActivityLogType) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *BlockSalesAllowanceActivityLogType) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *BlockSalesAllowanceActivityLogType) SetIpAddress(v string) {
	o.IpAddress = &v
}

func (o BlockSalesAllowanceActivityLogType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockSalesAllowanceActivityLogType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.LogDate) {
		toSerialize["logDate"] = o.LogDate
	}
	if !IsNil(o.SalesAllowanceDate) {
		toSerialize["salesAllowanceDate"] = o.SalesAllowanceDate
	}
	if !IsNil(o.OldQuantity) {
		toSerialize["oldQuantity"] = o.OldQuantity
	}
	if !IsNil(o.NewQuantity) {
		toSerialize["newQuantity"] = o.NewQuantity
	}
	if !IsNil(o.RefActionId) {
		toSerialize["refActionId"] = o.RefActionId
	}
	if !IsNil(o.LogUserId) {
		toSerialize["logUserId"] = o.LogUserId
	}
	if !IsNil(o.LogUserName) {
		toSerialize["logUserName"] = o.LogUserName
	}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	return toSerialize, nil
}

type NullableBlockSalesAllowanceActivityLogType struct {
	value *BlockSalesAllowanceActivityLogType
	isSet bool
}

func (v NullableBlockSalesAllowanceActivityLogType) Get() *BlockSalesAllowanceActivityLogType {
	return v.value
}

func (v *NullableBlockSalesAllowanceActivityLogType) Set(val *BlockSalesAllowanceActivityLogType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockSalesAllowanceActivityLogType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockSalesAllowanceActivityLogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockSalesAllowanceActivityLogType(val *BlockSalesAllowanceActivityLogType) *NullableBlockSalesAllowanceActivityLogType {
	return &NullableBlockSalesAllowanceActivityLogType{value: val, isSet: true}
}

func (v NullableBlockSalesAllowanceActivityLogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockSalesAllowanceActivityLogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


