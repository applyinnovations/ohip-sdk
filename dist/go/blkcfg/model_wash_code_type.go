/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the WashCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WashCodeType{}

// WashCodeType A representation of the information contained by a Wash Code.
type WashCodeType struct {
	// Wash Code.
	Code *string `json:"code,omitempty"`
	// Description of the Wash Code.
	Description *string `json:"description,omitempty"`
	// Hotel Code to which the Wash Code belongs to.
	HotelId *string `json:"hotelId,omitempty"`
	// Wash Code Detail for a single entry.
	WashCodeDetails []WashCodeDetailType `json:"washCodeDetails,omitempty"`
}

// NewWashCodeType instantiates a new WashCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWashCodeType() *WashCodeType {
	this := WashCodeType{}
	return &this
}

// NewWashCodeTypeWithDefaults instantiates a new WashCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWashCodeTypeWithDefaults() *WashCodeType {
	this := WashCodeType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *WashCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WashCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *WashCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *WashCodeType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WashCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WashCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WashCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WashCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *WashCodeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WashCodeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *WashCodeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *WashCodeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetWashCodeDetails returns the WashCodeDetails field value if set, zero value otherwise.
func (o *WashCodeType) GetWashCodeDetails() []WashCodeDetailType {
	if o == nil || IsNil(o.WashCodeDetails) {
		var ret []WashCodeDetailType
		return ret
	}
	return o.WashCodeDetails
}

// GetWashCodeDetailsOk returns a tuple with the WashCodeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WashCodeType) GetWashCodeDetailsOk() ([]WashCodeDetailType, bool) {
	if o == nil || IsNil(o.WashCodeDetails) {
		return nil, false
	}
	return o.WashCodeDetails, true
}

// HasWashCodeDetails returns a boolean if a field has been set.
func (o *WashCodeType) HasWashCodeDetails() bool {
	if o != nil && !IsNil(o.WashCodeDetails) {
		return true
	}

	return false
}

// SetWashCodeDetails gets a reference to the given []WashCodeDetailType and assigns it to the WashCodeDetails field.
func (o *WashCodeType) SetWashCodeDetails(v []WashCodeDetailType) {
	o.WashCodeDetails = v
}

func (o WashCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WashCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.WashCodeDetails) {
		toSerialize["washCodeDetails"] = o.WashCodeDetails
	}
	return toSerialize, nil
}

type NullableWashCodeType struct {
	value *WashCodeType
	isSet bool
}

func (v NullableWashCodeType) Get() *WashCodeType {
	return v.value
}

func (v *NullableWashCodeType) Set(val *WashCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableWashCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableWashCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWashCodeType(val *WashCodeType) *NullableWashCodeType {
	return &NullableWashCodeType{value: val, isSet: true}
}

func (v NullableWashCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWashCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


