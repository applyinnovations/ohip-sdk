/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the SalesManagerType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesManagerType{}

// SalesManagerType Sales Manager's information.
type SalesManagerType struct {
	// Indicates if the Sales manager has Activity Goal
	Activity *bool `json:"activity,omitempty"`
	// Indicates if the Sales manager has Group Room with Catering Goal
	GroupRoomWithCatering *bool `json:"groupRoomWithCatering,omitempty"`
	// Hotel Code of the Sales Manager
	HotelId *string `json:"hotelId,omitempty"`
	// Sales Manager's name
	Name *string `json:"name,omitempty"`
	NameId *UniqueIDType `json:"nameId,omitempty"`
	// Sales Manager's code
	SalesManagerCode *string `json:"salesManagerCode,omitempty"`
	// Indicates if the Sales manager has Transient Room Goal
	TransientRoom *bool `json:"transientRoom,omitempty"`
}

// NewSalesManagerType instantiates a new SalesManagerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesManagerType() *SalesManagerType {
	this := SalesManagerType{}
	return &this
}

// NewSalesManagerTypeWithDefaults instantiates a new SalesManagerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesManagerTypeWithDefaults() *SalesManagerType {
	this := SalesManagerType{}
	return &this
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *SalesManagerType) GetActivity() bool {
	if o == nil || IsNil(o.Activity) {
		var ret bool
		return ret
	}
	return *o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerType) GetActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *SalesManagerType) HasActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given bool and assigns it to the Activity field.
func (o *SalesManagerType) SetActivity(v bool) {
	o.Activity = &v
}

// GetGroupRoomWithCatering returns the GroupRoomWithCatering field value if set, zero value otherwise.
func (o *SalesManagerType) GetGroupRoomWithCatering() bool {
	if o == nil || IsNil(o.GroupRoomWithCatering) {
		var ret bool
		return ret
	}
	return *o.GroupRoomWithCatering
}

// GetGroupRoomWithCateringOk returns a tuple with the GroupRoomWithCatering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerType) GetGroupRoomWithCateringOk() (*bool, bool) {
	if o == nil || IsNil(o.GroupRoomWithCatering) {
		return nil, false
	}
	return o.GroupRoomWithCatering, true
}

// HasGroupRoomWithCatering returns a boolean if a field has been set.
func (o *SalesManagerType) HasGroupRoomWithCatering() bool {
	if o != nil && !IsNil(o.GroupRoomWithCatering) {
		return true
	}

	return false
}

// SetGroupRoomWithCatering gets a reference to the given bool and assigns it to the GroupRoomWithCatering field.
func (o *SalesManagerType) SetGroupRoomWithCatering(v bool) {
	o.GroupRoomWithCatering = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *SalesManagerType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *SalesManagerType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *SalesManagerType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SalesManagerType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SalesManagerType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SalesManagerType) SetName(v string) {
	o.Name = &v
}

// GetNameId returns the NameId field value if set, zero value otherwise.
func (o *SalesManagerType) GetNameId() UniqueIDType {
	if o == nil || IsNil(o.NameId) {
		var ret UniqueIDType
		return ret
	}
	return *o.NameId
}

// GetNameIdOk returns a tuple with the NameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerType) GetNameIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.NameId) {
		return nil, false
	}
	return o.NameId, true
}

// HasNameId returns a boolean if a field has been set.
func (o *SalesManagerType) HasNameId() bool {
	if o != nil && !IsNil(o.NameId) {
		return true
	}

	return false
}

// SetNameId gets a reference to the given UniqueIDType and assigns it to the NameId field.
func (o *SalesManagerType) SetNameId(v UniqueIDType) {
	o.NameId = &v
}

// GetSalesManagerCode returns the SalesManagerCode field value if set, zero value otherwise.
func (o *SalesManagerType) GetSalesManagerCode() string {
	if o == nil || IsNil(o.SalesManagerCode) {
		var ret string
		return ret
	}
	return *o.SalesManagerCode
}

// GetSalesManagerCodeOk returns a tuple with the SalesManagerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerType) GetSalesManagerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.SalesManagerCode) {
		return nil, false
	}
	return o.SalesManagerCode, true
}

// HasSalesManagerCode returns a boolean if a field has been set.
func (o *SalesManagerType) HasSalesManagerCode() bool {
	if o != nil && !IsNil(o.SalesManagerCode) {
		return true
	}

	return false
}

// SetSalesManagerCode gets a reference to the given string and assigns it to the SalesManagerCode field.
func (o *SalesManagerType) SetSalesManagerCode(v string) {
	o.SalesManagerCode = &v
}

// GetTransientRoom returns the TransientRoom field value if set, zero value otherwise.
func (o *SalesManagerType) GetTransientRoom() bool {
	if o == nil || IsNil(o.TransientRoom) {
		var ret bool
		return ret
	}
	return *o.TransientRoom
}

// GetTransientRoomOk returns a tuple with the TransientRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalesManagerType) GetTransientRoomOk() (*bool, bool) {
	if o == nil || IsNil(o.TransientRoom) {
		return nil, false
	}
	return o.TransientRoom, true
}

// HasTransientRoom returns a boolean if a field has been set.
func (o *SalesManagerType) HasTransientRoom() bool {
	if o != nil && !IsNil(o.TransientRoom) {
		return true
	}

	return false
}

// SetTransientRoom gets a reference to the given bool and assigns it to the TransientRoom field.
func (o *SalesManagerType) SetTransientRoom(v bool) {
	o.TransientRoom = &v
}

func (o SalesManagerType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesManagerType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.GroupRoomWithCatering) {
		toSerialize["groupRoomWithCatering"] = o.GroupRoomWithCatering
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameId) {
		toSerialize["nameId"] = o.NameId
	}
	if !IsNil(o.SalesManagerCode) {
		toSerialize["salesManagerCode"] = o.SalesManagerCode
	}
	if !IsNil(o.TransientRoom) {
		toSerialize["transientRoom"] = o.TransientRoom
	}
	return toSerialize, nil
}

type NullableSalesManagerType struct {
	value *SalesManagerType
	isSet bool
}

func (v NullableSalesManagerType) Get() *SalesManagerType {
	return v.value
}

func (v *NullableSalesManagerType) Set(val *SalesManagerType) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesManagerType) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesManagerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesManagerType(val *SalesManagerType) *NullableSalesManagerType {
	return &NullableSalesManagerType{value: val, isSet: true}
}

func (v NullableSalesManagerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesManagerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


