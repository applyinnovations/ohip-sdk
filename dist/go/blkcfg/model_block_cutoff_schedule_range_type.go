/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the BlockCutoffScheduleRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockCutoffScheduleRangeType{}

// BlockCutoffScheduleRangeType Object to create block cutoff schedule details by providing date range, room type, days of week and cutoff days.
type BlockCutoffScheduleRangeType struct {
	// Contains Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	// Contains Cutoff Schedule Code Id.
	CutoffCodeId *int32 `json:"cutoffCodeId,omitempty"`
	// Contains Room Types.
	RoomTypes []string `json:"roomTypes,omitempty"`
	// Number of cutoff Days.
	CutoffDays *int32 `json:"cutoffDays,omitempty"`
	// Flag to indicate if the cutoff schedule already exists for criteria then overwrite the records.
	OverwriteExistingcutoffschedule *bool `json:"overwriteExistingcutoffschedule,omitempty"`
	// The starting value of the date range.
	StayDateFrom *string `json:"stayDateFrom,omitempty"`
	// The ending value of the date range.
	StayDateTo *string `json:"stayDateTo,omitempty"`
	Sunday *bool `json:"sunday,omitempty"`
	Monday *bool `json:"monday,omitempty"`
	Tuesday *bool `json:"tuesday,omitempty"`
	Wednesday *bool `json:"wednesday,omitempty"`
	Thursday *bool `json:"thursday,omitempty"`
	Friday *bool `json:"friday,omitempty"`
	Saturday *bool `json:"saturday,omitempty"`
}

// NewBlockCutoffScheduleRangeType instantiates a new BlockCutoffScheduleRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockCutoffScheduleRangeType() *BlockCutoffScheduleRangeType {
	this := BlockCutoffScheduleRangeType{}
	return &this
}

// NewBlockCutoffScheduleRangeTypeWithDefaults instantiates a new BlockCutoffScheduleRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockCutoffScheduleRangeTypeWithDefaults() *BlockCutoffScheduleRangeType {
	this := BlockCutoffScheduleRangeType{}
	return &this
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockCutoffScheduleRangeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetCutoffCodeId returns the CutoffCodeId field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetCutoffCodeId() int32 {
	if o == nil || IsNil(o.CutoffCodeId) {
		var ret int32
		return ret
	}
	return *o.CutoffCodeId
}

// GetCutoffCodeIdOk returns a tuple with the CutoffCodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetCutoffCodeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CutoffCodeId) {
		return nil, false
	}
	return o.CutoffCodeId, true
}

// HasCutoffCodeId returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasCutoffCodeId() bool {
	if o != nil && !IsNil(o.CutoffCodeId) {
		return true
	}

	return false
}

// SetCutoffCodeId gets a reference to the given int32 and assigns it to the CutoffCodeId field.
func (o *BlockCutoffScheduleRangeType) SetCutoffCodeId(v int32) {
	o.CutoffCodeId = &v
}

// GetRoomTypes returns the RoomTypes field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetRoomTypes() []string {
	if o == nil || IsNil(o.RoomTypes) {
		var ret []string
		return ret
	}
	return o.RoomTypes
}

// GetRoomTypesOk returns a tuple with the RoomTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetRoomTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RoomTypes) {
		return nil, false
	}
	return o.RoomTypes, true
}

// HasRoomTypes returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasRoomTypes() bool {
	if o != nil && !IsNil(o.RoomTypes) {
		return true
	}

	return false
}

// SetRoomTypes gets a reference to the given []string and assigns it to the RoomTypes field.
func (o *BlockCutoffScheduleRangeType) SetRoomTypes(v []string) {
	o.RoomTypes = v
}

// GetCutoffDays returns the CutoffDays field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetCutoffDays() int32 {
	if o == nil || IsNil(o.CutoffDays) {
		var ret int32
		return ret
	}
	return *o.CutoffDays
}

// GetCutoffDaysOk returns a tuple with the CutoffDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetCutoffDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.CutoffDays) {
		return nil, false
	}
	return o.CutoffDays, true
}

// HasCutoffDays returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasCutoffDays() bool {
	if o != nil && !IsNil(o.CutoffDays) {
		return true
	}

	return false
}

// SetCutoffDays gets a reference to the given int32 and assigns it to the CutoffDays field.
func (o *BlockCutoffScheduleRangeType) SetCutoffDays(v int32) {
	o.CutoffDays = &v
}

// GetOverwriteExistingcutoffschedule returns the OverwriteExistingcutoffschedule field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetOverwriteExistingcutoffschedule() bool {
	if o == nil || IsNil(o.OverwriteExistingcutoffschedule) {
		var ret bool
		return ret
	}
	return *o.OverwriteExistingcutoffschedule
}

// GetOverwriteExistingcutoffscheduleOk returns a tuple with the OverwriteExistingcutoffschedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetOverwriteExistingcutoffscheduleOk() (*bool, bool) {
	if o == nil || IsNil(o.OverwriteExistingcutoffschedule) {
		return nil, false
	}
	return o.OverwriteExistingcutoffschedule, true
}

// HasOverwriteExistingcutoffschedule returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasOverwriteExistingcutoffschedule() bool {
	if o != nil && !IsNil(o.OverwriteExistingcutoffschedule) {
		return true
	}

	return false
}

// SetOverwriteExistingcutoffschedule gets a reference to the given bool and assigns it to the OverwriteExistingcutoffschedule field.
func (o *BlockCutoffScheduleRangeType) SetOverwriteExistingcutoffschedule(v bool) {
	o.OverwriteExistingcutoffschedule = &v
}

// GetStayDateFrom returns the StayDateFrom field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetStayDateFrom() string {
	if o == nil || IsNil(o.StayDateFrom) {
		var ret string
		return ret
	}
	return *o.StayDateFrom
}

// GetStayDateFromOk returns a tuple with the StayDateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetStayDateFromOk() (*string, bool) {
	if o == nil || IsNil(o.StayDateFrom) {
		return nil, false
	}
	return o.StayDateFrom, true
}

// HasStayDateFrom returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasStayDateFrom() bool {
	if o != nil && !IsNil(o.StayDateFrom) {
		return true
	}

	return false
}

// SetStayDateFrom gets a reference to the given string and assigns it to the StayDateFrom field.
func (o *BlockCutoffScheduleRangeType) SetStayDateFrom(v string) {
	o.StayDateFrom = &v
}

// GetStayDateTo returns the StayDateTo field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetStayDateTo() string {
	if o == nil || IsNil(o.StayDateTo) {
		var ret string
		return ret
	}
	return *o.StayDateTo
}

// GetStayDateToOk returns a tuple with the StayDateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetStayDateToOk() (*string, bool) {
	if o == nil || IsNil(o.StayDateTo) {
		return nil, false
	}
	return o.StayDateTo, true
}

// HasStayDateTo returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasStayDateTo() bool {
	if o != nil && !IsNil(o.StayDateTo) {
		return true
	}

	return false
}

// SetStayDateTo gets a reference to the given string and assigns it to the StayDateTo field.
func (o *BlockCutoffScheduleRangeType) SetStayDateTo(v string) {
	o.StayDateTo = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetSunday() bool {
	if o == nil || IsNil(o.Sunday) {
		var ret bool
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetSundayOk() (*bool, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given bool and assigns it to the Sunday field.
func (o *BlockCutoffScheduleRangeType) SetSunday(v bool) {
	o.Sunday = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetMonday() bool {
	if o == nil || IsNil(o.Monday) {
		var ret bool
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetMondayOk() (*bool, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given bool and assigns it to the Monday field.
func (o *BlockCutoffScheduleRangeType) SetMonday(v bool) {
	o.Monday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetTuesday() bool {
	if o == nil || IsNil(o.Tuesday) {
		var ret bool
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetTuesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given bool and assigns it to the Tuesday field.
func (o *BlockCutoffScheduleRangeType) SetTuesday(v bool) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetWednesday() bool {
	if o == nil || IsNil(o.Wednesday) {
		var ret bool
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetWednesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given bool and assigns it to the Wednesday field.
func (o *BlockCutoffScheduleRangeType) SetWednesday(v bool) {
	o.Wednesday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetThursday() bool {
	if o == nil || IsNil(o.Thursday) {
		var ret bool
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetThursdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given bool and assigns it to the Thursday field.
func (o *BlockCutoffScheduleRangeType) SetThursday(v bool) {
	o.Thursday = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetFriday() bool {
	if o == nil || IsNil(o.Friday) {
		var ret bool
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetFridayOk() (*bool, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given bool and assigns it to the Friday field.
func (o *BlockCutoffScheduleRangeType) SetFriday(v bool) {
	o.Friday = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *BlockCutoffScheduleRangeType) GetSaturday() bool {
	if o == nil || IsNil(o.Saturday) {
		var ret bool
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockCutoffScheduleRangeType) GetSaturdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *BlockCutoffScheduleRangeType) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given bool and assigns it to the Saturday field.
func (o *BlockCutoffScheduleRangeType) SetSaturday(v bool) {
	o.Saturday = &v
}

func (o BlockCutoffScheduleRangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockCutoffScheduleRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.CutoffCodeId) {
		toSerialize["cutoffCodeId"] = o.CutoffCodeId
	}
	if !IsNil(o.RoomTypes) {
		toSerialize["roomTypes"] = o.RoomTypes
	}
	if !IsNil(o.CutoffDays) {
		toSerialize["cutoffDays"] = o.CutoffDays
	}
	if !IsNil(o.OverwriteExistingcutoffschedule) {
		toSerialize["overwriteExistingcutoffschedule"] = o.OverwriteExistingcutoffschedule
	}
	if !IsNil(o.StayDateFrom) {
		toSerialize["stayDateFrom"] = o.StayDateFrom
	}
	if !IsNil(o.StayDateTo) {
		toSerialize["stayDateTo"] = o.StayDateTo
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	return toSerialize, nil
}

type NullableBlockCutoffScheduleRangeType struct {
	value *BlockCutoffScheduleRangeType
	isSet bool
}

func (v NullableBlockCutoffScheduleRangeType) Get() *BlockCutoffScheduleRangeType {
	return v.value
}

func (v *NullableBlockCutoffScheduleRangeType) Set(val *BlockCutoffScheduleRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockCutoffScheduleRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockCutoffScheduleRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockCutoffScheduleRangeType(val *BlockCutoffScheduleRangeType) *NullableBlockCutoffScheduleRangeType {
	return &NullableBlockCutoffScheduleRangeType{value: val, isSet: true}
}

func (v NullableBlockCutoffScheduleRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockCutoffScheduleRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


