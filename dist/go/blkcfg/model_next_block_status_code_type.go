/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the NextBlockStatusCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NextBlockStatusCodeType{}

// NextBlockStatusCodeType Next block status codes information. Contains list of all configured and/or available next status codes for a particular status code.
type NextBlockStatusCodeType struct {
	// List of all configured next status codes for the main status code.
	NextAvailableStatusList []NextBlockStatusCodeInfoType `json:"nextAvailableStatusList,omitempty"`
	// List of all configured next status codes for the main status code.
	NextConfiguredStatusList []NextBlockStatusCodeInfoType `json:"nextConfiguredStatusList,omitempty"`
	// Main block status code.
	Status *string `json:"status,omitempty"`
}

// NewNextBlockStatusCodeType instantiates a new NextBlockStatusCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextBlockStatusCodeType() *NextBlockStatusCodeType {
	this := NextBlockStatusCodeType{}
	return &this
}

// NewNextBlockStatusCodeTypeWithDefaults instantiates a new NextBlockStatusCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextBlockStatusCodeTypeWithDefaults() *NextBlockStatusCodeType {
	this := NextBlockStatusCodeType{}
	return &this
}

// GetNextAvailableStatusList returns the NextAvailableStatusList field value if set, zero value otherwise.
func (o *NextBlockStatusCodeType) GetNextAvailableStatusList() []NextBlockStatusCodeInfoType {
	if o == nil || IsNil(o.NextAvailableStatusList) {
		var ret []NextBlockStatusCodeInfoType
		return ret
	}
	return o.NextAvailableStatusList
}

// GetNextAvailableStatusListOk returns a tuple with the NextAvailableStatusList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatusCodeType) GetNextAvailableStatusListOk() ([]NextBlockStatusCodeInfoType, bool) {
	if o == nil || IsNil(o.NextAvailableStatusList) {
		return nil, false
	}
	return o.NextAvailableStatusList, true
}

// HasNextAvailableStatusList returns a boolean if a field has been set.
func (o *NextBlockStatusCodeType) HasNextAvailableStatusList() bool {
	if o != nil && !IsNil(o.NextAvailableStatusList) {
		return true
	}

	return false
}

// SetNextAvailableStatusList gets a reference to the given []NextBlockStatusCodeInfoType and assigns it to the NextAvailableStatusList field.
func (o *NextBlockStatusCodeType) SetNextAvailableStatusList(v []NextBlockStatusCodeInfoType) {
	o.NextAvailableStatusList = v
}

// GetNextConfiguredStatusList returns the NextConfiguredStatusList field value if set, zero value otherwise.
func (o *NextBlockStatusCodeType) GetNextConfiguredStatusList() []NextBlockStatusCodeInfoType {
	if o == nil || IsNil(o.NextConfiguredStatusList) {
		var ret []NextBlockStatusCodeInfoType
		return ret
	}
	return o.NextConfiguredStatusList
}

// GetNextConfiguredStatusListOk returns a tuple with the NextConfiguredStatusList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatusCodeType) GetNextConfiguredStatusListOk() ([]NextBlockStatusCodeInfoType, bool) {
	if o == nil || IsNil(o.NextConfiguredStatusList) {
		return nil, false
	}
	return o.NextConfiguredStatusList, true
}

// HasNextConfiguredStatusList returns a boolean if a field has been set.
func (o *NextBlockStatusCodeType) HasNextConfiguredStatusList() bool {
	if o != nil && !IsNil(o.NextConfiguredStatusList) {
		return true
	}

	return false
}

// SetNextConfiguredStatusList gets a reference to the given []NextBlockStatusCodeInfoType and assigns it to the NextConfiguredStatusList field.
func (o *NextBlockStatusCodeType) SetNextConfiguredStatusList(v []NextBlockStatusCodeInfoType) {
	o.NextConfiguredStatusList = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NextBlockStatusCodeType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatusCodeType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NextBlockStatusCodeType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NextBlockStatusCodeType) SetStatus(v string) {
	o.Status = &v
}

func (o NextBlockStatusCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NextBlockStatusCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextAvailableStatusList) {
		toSerialize["nextAvailableStatusList"] = o.NextAvailableStatusList
	}
	if !IsNil(o.NextConfiguredStatusList) {
		toSerialize["nextConfiguredStatusList"] = o.NextConfiguredStatusList
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableNextBlockStatusCodeType struct {
	value *NextBlockStatusCodeType
	isSet bool
}

func (v NullableNextBlockStatusCodeType) Get() *NextBlockStatusCodeType {
	return v.value
}

func (v *NullableNextBlockStatusCodeType) Set(val *NextBlockStatusCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableNextBlockStatusCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableNextBlockStatusCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextBlockStatusCodeType(val *NextBlockStatusCodeType) *NullableNextBlockStatusCodeType {
	return &NullableNextBlockStatusCodeType{value: val, isSet: true}
}

func (v NullableNextBlockStatusCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextBlockStatusCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


