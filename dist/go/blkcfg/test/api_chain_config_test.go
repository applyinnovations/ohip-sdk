/*
OPERA Cloud Block Configuration API

Testing ChainConfigAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package blkcfg

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/blkcfg"
)

func Test_blkcfg_ChainConfigAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChainConfigAPIService DeleteBlockCancellationReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockCancellationReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteBlockCancellationReasons(context.Background(), blockCancellationReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteBlockLostBookingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockLostBookingCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteBlockLostBookingCodes(context.Background(), blockLostBookingCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteBlockRateOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRateOverrideReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteBlockRateOverrideReasons(context.Background(), blockRateOverrideReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteBlockRefusedReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRefusedReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteBlockRefusedReasons(context.Background(), blockRefusedReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteDestinationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var destinationCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteDestinationCodes(context.Background(), destinationCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService DeleteReservationMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationMethodsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.DeleteReservationMethods(context.Background(), reservationMethodsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBlockCancellationReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBlockCancellationReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBlockLostBookingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBlockLostBookingCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBlockRateOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBlockRateOverrideReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetBlockRefusedReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetBlockRefusedReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetDestinationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetDestinationCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService GetReservationMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.GetReservationMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBlockCancellationReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBlockCancellationReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBlockLostBookingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBlockLostBookingCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBlockRateOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBlockRateOverrideReasons(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostBlockRefusedReasonspostBlo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostBlockRefusedReasonspostBlo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostDestinationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostDestinationCodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PostReservationMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChainConfigAPI.PostReservationMethods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutBlockCancellationReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockCancellationReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutBlockCancellationReasons(context.Background(), blockCancellationReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutBlockLostBookingCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockLostBookingCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutBlockLostBookingCodes(context.Background(), blockLostBookingCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutBlockRateOverrideReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRateOverrideReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutBlockRateOverrideReasons(context.Background(), blockRateOverrideReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutBlockRefusedReasons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockRefusedReasonsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutBlockRefusedReasons(context.Background(), blockRefusedReasonsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutDestinationCodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var destinationCodesId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutDestinationCodes(context.Background(), destinationCodesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChainConfigAPIService PutReservationMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationMethodsId string

		resp, httpRes, err := apiClient.ChainConfigAPI.PutReservationMethods(context.Background(), reservationMethodsId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
