/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the CutoffCodeDetailType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CutoffCodeDetailType{}

// CutoffCodeDetailType Cutoff Code Detail for a single entry
type CutoffCodeDetailType struct {
	CutoffCodeDetail *CutoffCodeDetail `json:"cutoffCodeDetail,omitempty"`
}

// NewCutoffCodeDetailType instantiates a new CutoffCodeDetailType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCutoffCodeDetailType() *CutoffCodeDetailType {
	this := CutoffCodeDetailType{}
	return &this
}

// NewCutoffCodeDetailTypeWithDefaults instantiates a new CutoffCodeDetailType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCutoffCodeDetailTypeWithDefaults() *CutoffCodeDetailType {
	this := CutoffCodeDetailType{}
	return &this
}

// GetCutoffCodeDetail returns the CutoffCodeDetail field value if set, zero value otherwise.
func (o *CutoffCodeDetailType) GetCutoffCodeDetail() CutoffCodeDetail {
	if o == nil || IsNil(o.CutoffCodeDetail) {
		var ret CutoffCodeDetail
		return ret
	}
	return *o.CutoffCodeDetail
}

// GetCutoffCodeDetailOk returns a tuple with the CutoffCodeDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeDetailType) GetCutoffCodeDetailOk() (*CutoffCodeDetail, bool) {
	if o == nil || IsNil(o.CutoffCodeDetail) {
		return nil, false
	}
	return o.CutoffCodeDetail, true
}

// HasCutoffCodeDetail returns a boolean if a field has been set.
func (o *CutoffCodeDetailType) HasCutoffCodeDetail() bool {
	if o != nil && !IsNil(o.CutoffCodeDetail) {
		return true
	}

	return false
}

// SetCutoffCodeDetail gets a reference to the given CutoffCodeDetail and assigns it to the CutoffCodeDetail field.
func (o *CutoffCodeDetailType) SetCutoffCodeDetail(v CutoffCodeDetail) {
	o.CutoffCodeDetail = &v
}

func (o CutoffCodeDetailType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CutoffCodeDetailType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CutoffCodeDetail) {
		toSerialize["cutoffCodeDetail"] = o.CutoffCodeDetail
	}
	return toSerialize, nil
}

type NullableCutoffCodeDetailType struct {
	value *CutoffCodeDetailType
	isSet bool
}

func (v NullableCutoffCodeDetailType) Get() *CutoffCodeDetailType {
	return v.value
}

func (v *NullableCutoffCodeDetailType) Set(val *CutoffCodeDetailType) {
	v.value = val
	v.isSet = true
}

func (v NullableCutoffCodeDetailType) IsSet() bool {
	return v.isSet
}

func (v *NullableCutoffCodeDetailType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCutoffCodeDetailType(val *CutoffCodeDetailType) *NullableCutoffCodeDetailType {
	return &NullableCutoffCodeDetailType{value: val, isSet: true}
}

func (v NullableCutoffCodeDetailType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCutoffCodeDetailType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


