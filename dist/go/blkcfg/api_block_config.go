/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// BlockConfigAPIService BlockConfigAPI service
type BlockConfigAPIService service

type BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	endDate *string
	startDate *string
	authorization *string
	xAppKey *string
	xHotelid *string
	friday *bool
	monday *bool
	saturday *bool
	sunday *bool
	thursday *bool
	tuesday *bool
	wednesday *bool
	xExternalsystem *string
	acceptLanguage *string
}

// The ending value of the date range.
func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) EndDate(endDate string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.endDate = &endDate
	return r
}

// The starting value of the date range.
func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) StartDate(startDate string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.startDate = &startDate
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Authorization(authorization string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) XAppKey(xAppKey string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) XHotelid(xHotelid string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Friday(friday bool) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.friday = &friday
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Monday(monday bool) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.monday = &monday
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Saturday(saturday bool) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.saturday = &saturday
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Sunday(sunday bool) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.sunday = &sunday
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Thursday(thursday bool) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.thursday = &thursday
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Tuesday(tuesday bool) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.tuesday = &tuesday
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Wednesday(wednesday bool) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.wednesday = &wednesday
	return r
}

// External system code.
func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteBlockSalesAllowanceRangeExecute(r)
}

/*
DeleteBlockSalesAllowanceRange Delete block sales allowance range

You can use this API to delete block sales allowance range. <p><strong>OperationId:</strong>deleteBlockSalesAllowanceRange</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest
*/
func (a *BlockConfigAPIService) DeleteBlockSalesAllowanceRange(ctx context.Context, hotelId string) BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest {
	return BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) DeleteBlockSalesAllowanceRangeExecute(r BlockConfigAPIDeleteBlockSalesAllowanceRangeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.DeleteBlockSalesAllowanceRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blockSalesAllowanceRange"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	if r.friday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "friday", r.friday, "")
  }
	if r.monday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monday", r.monday, "")
  }
	if r.saturday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturday", r.saturday, "")
  }
	if r.sunday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sunday", r.sunday, "")
  }
	if r.thursday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "thursday", r.thursday, "")
  }
	if r.tuesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tuesday", r.tuesday, "")
  }
	if r.wednesday != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wednesday", r.wednesday, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIDeleteBlockStatusCodeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	blockStatusCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIDeleteBlockStatusCodeRequest) Authorization(authorization string) BlockConfigAPIDeleteBlockStatusCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIDeleteBlockStatusCodeRequest) XAppKey(xAppKey string) BlockConfigAPIDeleteBlockStatusCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIDeleteBlockStatusCodeRequest) XHotelid(xHotelid string) BlockConfigAPIDeleteBlockStatusCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r BlockConfigAPIDeleteBlockStatusCodeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIDeleteBlockStatusCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIDeleteBlockStatusCodeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIDeleteBlockStatusCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIDeleteBlockStatusCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteBlockStatusCodeExecute(r)
}

/*
DeleteBlockStatusCode Delete block status code

You can use this API to delete block status code. <p><strong>OperationId:</strong>deleteBlockStatusCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockStatusCode OPERA Block status code
 @return BlockConfigAPIDeleteBlockStatusCodeRequest
*/
func (a *BlockConfigAPIService) DeleteBlockStatusCode(ctx context.Context, blockStatusCode string) BlockConfigAPIDeleteBlockStatusCodeRequest {
	return BlockConfigAPIDeleteBlockStatusCodeRequest{
		ApiService: a,
		ctx: ctx,
		blockStatusCode: blockStatusCode,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) DeleteBlockStatusCodeExecute(r BlockConfigAPIDeleteBlockStatusCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.DeleteBlockStatusCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockStatusCodes/{blockStatusCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"blockStatusCode"+"}", url.PathEscape(parameterValueToString(r.blockStatusCode, "blockStatusCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.blockStatusCode) < 1 {
		return localVarReturnValue, nil, reportError("blockStatusCode must have at least 1 elements")
	}
	if strlen(r.blockStatusCode) > 2000 {
		return localVarReturnValue, nil, reportError("blockStatusCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIDeleteCutoffScheduleCodeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	cutoffCodeId int32
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIDeleteCutoffScheduleCodeRequest) Authorization(authorization string) BlockConfigAPIDeleteCutoffScheduleCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIDeleteCutoffScheduleCodeRequest) XAppKey(xAppKey string) BlockConfigAPIDeleteCutoffScheduleCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIDeleteCutoffScheduleCodeRequest) XHotelid(xHotelid string) BlockConfigAPIDeleteCutoffScheduleCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r BlockConfigAPIDeleteCutoffScheduleCodeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIDeleteCutoffScheduleCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIDeleteCutoffScheduleCodeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIDeleteCutoffScheduleCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIDeleteCutoffScheduleCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteCutoffScheduleCodeExecute(r)
}

/*
DeleteCutoffScheduleCode Delete cutoff schedule code.

You can use this API to delete cutoff schedule code. <p><strong>OperationId:</strong>removeCutoffScheduleCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cutoffCodeId Unique Cutoff Schedule Code Id.
 @param hotelId Unique OPERA Hotel Code.
 @return BlockConfigAPIDeleteCutoffScheduleCodeRequest
*/
func (a *BlockConfigAPIService) DeleteCutoffScheduleCode(ctx context.Context, cutoffCodeId int32, hotelId string) BlockConfigAPIDeleteCutoffScheduleCodeRequest {
	return BlockConfigAPIDeleteCutoffScheduleCodeRequest{
		ApiService: a,
		ctx: ctx,
		cutoffCodeId: cutoffCodeId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) DeleteCutoffScheduleCodeExecute(r BlockConfigAPIDeleteCutoffScheduleCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.DeleteCutoffScheduleCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/cutoffSchedules/{cutoffCodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cutoffCodeId"+"}", url.PathEscape(parameterValueToString(r.cutoffCodeId, "cutoffCodeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIDeleteWashScheduleRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	washScheduleCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIDeleteWashScheduleRequest) Authorization(authorization string) BlockConfigAPIDeleteWashScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIDeleteWashScheduleRequest) XAppKey(xAppKey string) BlockConfigAPIDeleteWashScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIDeleteWashScheduleRequest) XHotelid(xHotelid string) BlockConfigAPIDeleteWashScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r BlockConfigAPIDeleteWashScheduleRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIDeleteWashScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIDeleteWashScheduleRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIDeleteWashScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIDeleteWashScheduleRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.DeleteWashScheduleExecute(r)
}

/*
DeleteWashSchedule Delete block wash schedule

Delete a block wash schedule. <p><strong>OperationId:</strong>deleteWashSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param washScheduleCode Unique Block Wash Code
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPIDeleteWashScheduleRequest
*/
func (a *BlockConfigAPIService) DeleteWashSchedule(ctx context.Context, washScheduleCode string, hotelId string) BlockConfigAPIDeleteWashScheduleRequest {
	return BlockConfigAPIDeleteWashScheduleRequest{
		ApiService: a,
		ctx: ctx,
		washScheduleCode: washScheduleCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) DeleteWashScheduleExecute(r BlockConfigAPIDeleteWashScheduleRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.DeleteWashSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/washSchedules/{washScheduleCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"washScheduleCode"+"}", url.PathEscape(parameterValueToString(r.washScheduleCode, "washScheduleCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.washScheduleCode) < 1 {
		return localVarReturnValue, nil, reportError("washScheduleCode must have at least 1 elements")
	}
	if strlen(r.washScheduleCode) > 2000 {
		return localVarReturnValue, nil, reportError("washScheduleCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetBlockSalesAllowanceRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	endDateRange *string
	startDateRange *string
	includeRestricted *bool
	roomTypesCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) Authorization(authorization string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) XAppKey(xAppKey string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) XHotelid(xHotelid string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.xHotelid = &xHotelid
	return r
}

// The ending value of the date range.
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) EndDateRange(endDateRange string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.endDateRange = &endDateRange
	return r
}

// The starting value of the date range.
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) StartDateRange(startDateRange string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.startDateRange = &startDateRange
	return r
}

// Indicate to include restricted room types.
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) IncludeRestricted(includeRestricted bool) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.includeRestricted = &includeRestricted
	return r
}

func (r BlockConfigAPIGetBlockSalesAllowanceRequest) RoomTypesCodes(roomTypesCodes []string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.roomTypesCodes = &roomTypesCodes
	return r
}

// External system code.
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetBlockSalesAllowanceRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetBlockSalesAllowanceRequest) Execute() (*BlockSalesAllowance, *http.Response, error) {
	return r.ApiService.GetBlockSalesAllowanceExecute(r)
}

/*
GetBlockSalesAllowance Get Block Sales Allowance

You can use this API to get Block Sales Allowance. <p><strong>OperationId:</strong>getBlockSalesAllowance</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPIGetBlockSalesAllowanceRequest
*/
func (a *BlockConfigAPIService) GetBlockSalesAllowance(ctx context.Context, hotelId string) BlockConfigAPIGetBlockSalesAllowanceRequest {
	return BlockConfigAPIGetBlockSalesAllowanceRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return BlockSalesAllowance
func (a *BlockConfigAPIService) GetBlockSalesAllowanceExecute(r BlockConfigAPIGetBlockSalesAllowanceRequest) (*BlockSalesAllowance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockSalesAllowance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetBlockSalesAllowance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blockSalesAllowance"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.endDateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDateRange", r.endDateRange, "")
  }
	if r.startDateRange != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDateRange", r.startDateRange, "")
  }
	if r.includeRestricted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeRestricted", r.includeRestricted, "")
  }
	if r.roomTypesCodes != nil {
		t := *r.roomTypesCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypesCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "roomTypesCodes", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	changeLogDate *string
	salesAllowanceDate *string
	userId *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) Authorization(authorization string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) XAppKey(xAppKey string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) XHotelid(xHotelid string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) Limit(limit int32) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) Offset(offset int32) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.offset = &offset
	return r
}

// Search date for the user activity log.
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) ChangeLogDate(changeLogDate string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.changeLogDate = &changeLogDate
	return r
}

// Sales Allowance date for the user activity log.
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) SalesAllowanceDate(salesAllowanceDate string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.salesAllowanceDate = &salesAllowanceDate
	return r
}

// User Id for the user activity log.
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) UserId(userId int32) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.userId = &userId
	return r
}

// External system code.
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) Execute() (*BlockSalesAllowanceActivityLog, *http.Response, error) {
	return r.ApiService.GetBlockSalesAllowanceActivityLogExecute(r)
}

/*
GetBlockSalesAllowanceActivityLog Get the Block Sales Allowance activity log

Use this API to facilitate retrieving the Block Sales Allowance activity log. <p><strong>OperationId:</strong>getBlockSalesAllowanceActivityLog</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Hotel code.
 @return BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest
*/
func (a *BlockConfigAPIService) GetBlockSalesAllowanceActivityLog(ctx context.Context, hotelId string) BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest {
	return BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return BlockSalesAllowanceActivityLog
func (a *BlockConfigAPIService) GetBlockSalesAllowanceActivityLogExecute(r BlockConfigAPIGetBlockSalesAllowanceActivityLogRequest) (*BlockSalesAllowanceActivityLog, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockSalesAllowanceActivityLog
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetBlockSalesAllowanceActivityLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blockSalesAllowance/activityLog"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.changeLogDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "changeLogDate", r.changeLogDate, "")
  }
	if r.salesAllowanceDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "salesAllowanceDate", r.salesAllowanceDate, "")
  }
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetBlockStatusCodesRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	blockStatusCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetBlockStatusCodesRequest) Authorization(authorization string) BlockConfigAPIGetBlockStatusCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetBlockStatusCodesRequest) XAppKey(xAppKey string) BlockConfigAPIGetBlockStatusCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetBlockStatusCodesRequest) XHotelid(xHotelid string) BlockConfigAPIGetBlockStatusCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r BlockConfigAPIGetBlockStatusCodesRequest) BlockStatusCodes(blockStatusCodes []string) BlockConfigAPIGetBlockStatusCodesRequest {
	r.blockStatusCodes = &blockStatusCodes
	return r
}

// External system code.
func (r BlockConfigAPIGetBlockStatusCodesRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetBlockStatusCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetBlockStatusCodesRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetBlockStatusCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetBlockStatusCodesRequest) Execute() (*StatusCodeDetails, *http.Response, error) {
	return r.ApiService.GetBlockStatusCodesExecute(r)
}

/*
GetBlockStatusCodes Get block status codes

This API fetches a list of configured status codes for the chain. It returns status code, description, and status type such as non-deduct, deduct, cancel, waitlist, inquiry, and actual. Status attributes, such as starting status, function diary visibility, allows pickup, and log catering changes are also returned in the response. Please note, that status codes are configured in a strict sequence that must be followed. In order to find available next statuses for the current block status, please use operation getNextBlockStatusCodes. <p><strong>OperationId:</strong>getBlockStatusCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockConfigAPIGetBlockStatusCodesRequest
*/
func (a *BlockConfigAPIService) GetBlockStatusCodes(ctx context.Context) BlockConfigAPIGetBlockStatusCodesRequest {
	return BlockConfigAPIGetBlockStatusCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StatusCodeDetails
func (a *BlockConfigAPIService) GetBlockStatusCodesExecute(r BlockConfigAPIGetBlockStatusCodesRequest) (*StatusCodeDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StatusCodeDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetBlockStatusCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockStatusCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.blockStatusCodes != nil {
		t := *r.blockStatusCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetCutoffSchedulesRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	cutoffCodes *[]string
	cutoffCodeStartDate *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetCutoffSchedulesRequest) Authorization(authorization string) BlockConfigAPIGetCutoffSchedulesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetCutoffSchedulesRequest) XAppKey(xAppKey string) BlockConfigAPIGetCutoffSchedulesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetCutoffSchedulesRequest) XHotelid(xHotelid string) BlockConfigAPIGetCutoffSchedulesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Cutoff Schedule Codes to be searched.
func (r BlockConfigAPIGetCutoffSchedulesRequest) CutoffCodes(cutoffCodes []string) BlockConfigAPIGetCutoffSchedulesRequest {
	r.cutoffCodes = &cutoffCodes
	return r
}

// Cutoff Schedule Code start date.
func (r BlockConfigAPIGetCutoffSchedulesRequest) CutoffCodeStartDate(cutoffCodeStartDate string) BlockConfigAPIGetCutoffSchedulesRequest {
	r.cutoffCodeStartDate = &cutoffCodeStartDate
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r BlockConfigAPIGetCutoffSchedulesRequest) Limit(limit int32) BlockConfigAPIGetCutoffSchedulesRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r BlockConfigAPIGetCutoffSchedulesRequest) Offset(offset int32) BlockConfigAPIGetCutoffSchedulesRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r BlockConfigAPIGetCutoffSchedulesRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetCutoffSchedulesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetCutoffSchedulesRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetCutoffSchedulesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetCutoffSchedulesRequest) Execute() (*CutoffScheduleDetails, *http.Response, error) {
	return r.ApiService.GetCutoffSchedulesExecute(r)
}

/*
GetCutoffSchedules Get block cutoff schedule codes.

This API fetches a list of configured cutoff schedule codes for the property. It returns cutoff schedule code, description, start date, end date and default cutoff days. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates. <p><strong>OperationId:</strong>getCutoffSchedules</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPIGetCutoffSchedulesRequest
*/
func (a *BlockConfigAPIService) GetCutoffSchedules(ctx context.Context, hotelId string) BlockConfigAPIGetCutoffSchedulesRequest {
	return BlockConfigAPIGetCutoffSchedulesRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return CutoffScheduleDetails
func (a *BlockConfigAPIService) GetCutoffSchedulesExecute(r BlockConfigAPIGetCutoffSchedulesRequest) (*CutoffScheduleDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CutoffScheduleDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetCutoffSchedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/cutoffSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	if r.cutoffCodes != nil {
		t := *r.cutoffCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "cutoffCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "cutoffCodes", t, "multi")
		}
  }
	if r.cutoffCodeStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cutoffCodeStartDate", r.cutoffCodeStartDate, "")
  }
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetCutoffSchedulesDetailsRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	cutoffCodeId int32
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) Authorization(authorization string) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) XAppKey(xAppKey string) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) XHotelid(xHotelid string) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) Limit(limit int32) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) Offset(offset int32) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	r.offset = &offset
	return r
}

// External system code.
func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetCutoffSchedulesDetailsRequest) Execute() (*CutoffScheduleDetails, *http.Response, error) {
	return r.ApiService.GetCutoffSchedulesDetailsExecute(r)
}

/*
GetCutoffSchedulesDetails Get cutoff Schedules Details for a cutoff schedule code.

This API fetches a list of cutoff schedule details for a cutoff schedule code. It returns stay date, room type and cutoff days for cutoff schedule. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>getCutoffSchedulesDetails</p> <p>The maximum allowable limit for this API is <strong>365</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel code
 @param cutoffCodeId Unique cutoff schedule code for which details will be fetched.
 @return BlockConfigAPIGetCutoffSchedulesDetailsRequest
*/
func (a *BlockConfigAPIService) GetCutoffSchedulesDetails(ctx context.Context, hotelId string, cutoffCodeId int32) BlockConfigAPIGetCutoffSchedulesDetailsRequest {
	return BlockConfigAPIGetCutoffSchedulesDetailsRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
		cutoffCodeId: cutoffCodeId,
	}
}

// Execute executes the request
//  @return CutoffScheduleDetails
func (a *BlockConfigAPIService) GetCutoffSchedulesDetailsExecute(r BlockConfigAPIGetCutoffSchedulesDetailsRequest) (*CutoffScheduleDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CutoffScheduleDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetCutoffSchedulesDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/cutoffSchedules/{cutoffCodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"cutoffCodeId"+"}", url.PathEscape(parameterValueToString(r.cutoffCodeId, "cutoffCodeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetNextBlockStatusCodesRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	configuredOnly *bool
	blockStatusCodes *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetNextBlockStatusCodesRequest) Authorization(authorization string) BlockConfigAPIGetNextBlockStatusCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetNextBlockStatusCodesRequest) XAppKey(xAppKey string) BlockConfigAPIGetNextBlockStatusCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetNextBlockStatusCodesRequest) XHotelid(xHotelid string) BlockConfigAPIGetNextBlockStatusCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// When set to true, only configured next status codes will be included (available status list will not be included).
func (r BlockConfigAPIGetNextBlockStatusCodesRequest) ConfiguredOnly(configuredOnly bool) BlockConfigAPIGetNextBlockStatusCodesRequest {
	r.configuredOnly = &configuredOnly
	return r
}

func (r BlockConfigAPIGetNextBlockStatusCodesRequest) BlockStatusCodes(blockStatusCodes []string) BlockConfigAPIGetNextBlockStatusCodesRequest {
	r.blockStatusCodes = &blockStatusCodes
	return r
}

// External system code.
func (r BlockConfigAPIGetNextBlockStatusCodesRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetNextBlockStatusCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetNextBlockStatusCodesRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetNextBlockStatusCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetNextBlockStatusCodesRequest) Execute() (*NextBlockStatusCodeDetails, *http.Response, error) {
	return r.ApiService.GetNextBlockStatusCodesExecute(r)
}

/*
GetNextBlockStatusCodes Get next block status codes

Retrieve the next block Status Codes for a property. <p><strong>OperationId:</strong>getNextBlockStatusCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockConfigAPIGetNextBlockStatusCodesRequest
*/
func (a *BlockConfigAPIService) GetNextBlockStatusCodes(ctx context.Context) BlockConfigAPIGetNextBlockStatusCodesRequest {
	return BlockConfigAPIGetNextBlockStatusCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NextBlockStatusCodeDetails
func (a *BlockConfigAPIService) GetNextBlockStatusCodesExecute(r BlockConfigAPIGetNextBlockStatusCodesRequest) (*NextBlockStatusCodeDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NextBlockStatusCodeDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetNextBlockStatusCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockStatusCodes/nextStatusCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.configuredOnly != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "configuredOnly", r.configuredOnly, "")
  }
	if r.blockStatusCodes != nil {
		t := *r.blockStatusCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "blockStatusCodes", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetSalesManagerGoalsRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	salesManagerId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	future *bool
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetSalesManagerGoalsRequest) Authorization(authorization string) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetSalesManagerGoalsRequest) XAppKey(xAppKey string) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetSalesManagerGoalsRequest) XHotelid(xHotelid string) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r BlockConfigAPIGetSalesManagerGoalsRequest) Limit(limit int32) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r BlockConfigAPIGetSalesManagerGoalsRequest) Offset(offset int32) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.offset = &offset
	return r
}

// Use this indicator to fetch goal&#39;s having Production From or Arrival From dates later than the current business date or quarter
func (r BlockConfigAPIGetSalesManagerGoalsRequest) Future(future bool) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.future = &future
	return r
}

// Fetch instructions that can be used to fetch details of particular Sales Manager type,ex: Group Room, Transient Room, Catering, Activity.
func (r BlockConfigAPIGetSalesManagerGoalsRequest) FetchInstructions(fetchInstructions []string) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r BlockConfigAPIGetSalesManagerGoalsRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetSalesManagerGoalsRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetSalesManagerGoalsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetSalesManagerGoalsRequest) Execute() (*SalesManagerGoalsInfo, *http.Response, error) {
	return r.ApiService.GetSalesManagerGoalsExecute(r)
}

/*
GetSalesManagerGoals Get Sales Manager Goals by Hotel

You can use this API to retrieve individual Sales Manager Goals for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoals</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesManagerId Sales Manager Id required to fetch Sales Manager goals information
 @param hotelId Unique OPERA Hotel Id
 @return BlockConfigAPIGetSalesManagerGoalsRequest
*/
func (a *BlockConfigAPIService) GetSalesManagerGoals(ctx context.Context, salesManagerId string, hotelId string) BlockConfigAPIGetSalesManagerGoalsRequest {
	return BlockConfigAPIGetSalesManagerGoalsRequest{
		ApiService: a,
		ctx: ctx,
		salesManagerId: salesManagerId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return SalesManagerGoalsInfo
func (a *BlockConfigAPIService) GetSalesManagerGoalsExecute(r BlockConfigAPIGetSalesManagerGoalsRequest) (*SalesManagerGoalsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesManagerGoalsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetSalesManagerGoals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals"
	localVarPath = strings.Replace(localVarPath, "{"+"salesManagerId"+"}", url.PathEscape(parameterValueToString(r.salesManagerId, "salesManagerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.salesManagerId) < 1 {
		return localVarReturnValue, nil, reportError("salesManagerId must have at least 1 elements")
	}
	if strlen(r.salesManagerId) > 2000 {
		return localVarReturnValue, nil, reportError("salesManagerId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.future != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "future", r.future, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	salesManagerId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	hotelIds *[]string
	future *bool
	fetchInstructions *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) Authorization(authorization string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) XAppKey(xAppKey string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) XHotelid(xHotelid string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) Limit(limit int32) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) Offset(offset int32) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.offset = &offset
	return r
}

func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) HotelIds(hotelIds []string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Use this indicator to fetch goal&#39;s having Production From or Arrival From dates later than the current business date or quarter
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) Future(future bool) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.future = &future
	return r
}

// Fetch instructions that can be used to fetch details of particular Sales Manager type,ex: Group Room, Transient Room, Catering, Activity.
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) FetchInstructions(fetchInstructions []string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.fetchInstructions = &fetchInstructions
	return r
}

// External system code.
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) Execute() (*SalesManagerGoalsInfo, *http.Response, error) {
	return r.ApiService.GetSalesManagerGoalsMultipleHotelIdsExecute(r)
}

/*
GetSalesManagerGoalsMultipleHotelIds Get Sales Manager Goals

You can use this API to retrieve individual Sales Manager Goals, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoalsMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesManagerId Sales Manager Id required to fetch Sales Manager goals information
 @return BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest
*/
func (a *BlockConfigAPIService) GetSalesManagerGoalsMultipleHotelIds(ctx context.Context, salesManagerId string) BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest {
	return BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest{
		ApiService: a,
		ctx: ctx,
		salesManagerId: salesManagerId,
	}
}

// Execute executes the request
//  @return SalesManagerGoalsInfo
func (a *BlockConfigAPIService) GetSalesManagerGoalsMultipleHotelIdsExecute(r BlockConfigAPIGetSalesManagerGoalsMultipleHotelIdsRequest) (*SalesManagerGoalsInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesManagerGoalsInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetSalesManagerGoalsMultipleHotelIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/salesManagers/{salesManagerId}/salesManagerGoals"
	localVarPath = strings.Replace(localVarPath, "{"+"salesManagerId"+"}", url.PathEscape(parameterValueToString(r.salesManagerId, "salesManagerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.salesManagerId) < 1 {
		return localVarReturnValue, nil, reportError("salesManagerId must have at least 1 elements")
	}
	if strlen(r.salesManagerId) > 2000 {
		return localVarReturnValue, nil, reportError("salesManagerId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.future != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "future", r.future, "")
  }
	if r.fetchInstructions != nil {
		t := *r.fetchInstructions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fetchInstructions", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetSalesManagersRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	ownerCodes *[]string
	firstName *string
	lastName *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetSalesManagersRequest) Authorization(authorization string) BlockConfigAPIGetSalesManagersRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetSalesManagersRequest) XAppKey(xAppKey string) BlockConfigAPIGetSalesManagersRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetSalesManagersRequest) XHotelid(xHotelid string) BlockConfigAPIGetSalesManagersRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r BlockConfigAPIGetSalesManagersRequest) Limit(limit int32) BlockConfigAPIGetSalesManagersRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r BlockConfigAPIGetSalesManagersRequest) Offset(offset int32) BlockConfigAPIGetSalesManagersRequest {
	r.offset = &offset
	return r
}

func (r BlockConfigAPIGetSalesManagersRequest) OwnerCodes(ownerCodes []string) BlockConfigAPIGetSalesManagersRequest {
	r.ownerCodes = &ownerCodes
	return r
}

// First name required to fetch Sales Manager information.
func (r BlockConfigAPIGetSalesManagersRequest) FirstName(firstName string) BlockConfigAPIGetSalesManagersRequest {
	r.firstName = &firstName
	return r
}

// Last name required to fetch Sales Manager information.
func (r BlockConfigAPIGetSalesManagersRequest) LastName(lastName string) BlockConfigAPIGetSalesManagersRequest {
	r.lastName = &lastName
	return r
}

// External system code.
func (r BlockConfigAPIGetSalesManagersRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetSalesManagersRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetSalesManagersRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetSalesManagersRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetSalesManagersRequest) Execute() (*SalesManagersInfo, *http.Response, error) {
	return r.ApiService.GetSalesManagersExecute(r)
}

/*
GetSalesManagers Get Sales Managers by Hotel.

You can use this API to retrieve multiple Sales Managers for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagers</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel Id
 @return BlockConfigAPIGetSalesManagersRequest
*/
func (a *BlockConfigAPIService) GetSalesManagers(ctx context.Context, hotelId string) BlockConfigAPIGetSalesManagersRequest {
	return BlockConfigAPIGetSalesManagersRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return SalesManagersInfo
func (a *BlockConfigAPIService) GetSalesManagersExecute(r BlockConfigAPIGetSalesManagersRequest) (*SalesManagersInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesManagersInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetSalesManagers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/salesManagers"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.ownerCodes != nil {
		t := *r.ownerCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCodes", t, "multi")
		}
  }
	if r.firstName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstName", r.firstName, "")
  }
	if r.lastName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastName", r.lastName, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelIds *[]string
	authorization *string
	xAppKey *string
	xHotelid *string
	limit *int32
	offset *int32
	ownerCodes *[]string
	firstName *string
	lastName *string
	xExternalsystem *string
	acceptLanguage *string
}

func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) HotelIds(hotelIds []string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.hotelIds = &hotelIds
	return r
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) Authorization(authorization string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) XAppKey(xAppKey string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) XHotelid(xHotelid string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Indicates maximum number of records a Web Service should return.
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) Limit(limit int32) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.limit = &limit
	return r
}

// Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) Offset(offset int32) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.offset = &offset
	return r
}

func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) OwnerCodes(ownerCodes []string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.ownerCodes = &ownerCodes
	return r
}

// First name required to fetch Sales Manager information.
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) FirstName(firstName string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.firstName = &firstName
	return r
}

// Last name required to fetch Sales Manager information.
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) LastName(lastName string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.lastName = &lastName
	return r
}

// External system code.
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) Execute() (*SalesManagersInfo, *http.Response, error) {
	return r.ApiService.GetSalesManagersMultipleHotelIdsExecute(r)
}

/*
GetSalesManagersMultipleHotelIds Get Sales Managers.

You can use this API to retrieve multiple Sales Managers, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagersMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>20</strong>.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest
*/
func (a *BlockConfigAPIService) GetSalesManagersMultipleHotelIds(ctx context.Context) BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest {
	return BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SalesManagersInfo
func (a *BlockConfigAPIService) GetSalesManagersMultipleHotelIdsExecute(r BlockConfigAPIGetSalesManagersMultipleHotelIdsRequest) (*SalesManagersInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesManagersInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetSalesManagersMultipleHotelIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/salesManagers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	{
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
  }
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
  }
	if r.ownerCodes != nil {
		t := *r.ownerCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "ownerCodes", t, "multi")
		}
  }
	if r.firstName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "firstName", r.firstName, "")
  }
	if r.lastName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastName", r.lastName, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIGetWashScheduleRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelIds *[]string
	washCodes *[]string
	wildCard *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIGetWashScheduleRequest) Authorization(authorization string) BlockConfigAPIGetWashScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIGetWashScheduleRequest) XAppKey(xAppKey string) BlockConfigAPIGetWashScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIGetWashScheduleRequest) XHotelid(xHotelid string) BlockConfigAPIGetWashScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

func (r BlockConfigAPIGetWashScheduleRequest) HotelIds(hotelIds []string) BlockConfigAPIGetWashScheduleRequest {
	r.hotelIds = &hotelIds
	return r
}

// Codes to be searched.
func (r BlockConfigAPIGetWashScheduleRequest) WashCodes(washCodes []string) BlockConfigAPIGetWashScheduleRequest {
	r.washCodes = &washCodes
	return r
}

// Wildcard search on the code.
func (r BlockConfigAPIGetWashScheduleRequest) WildCard(wildCard string) BlockConfigAPIGetWashScheduleRequest {
	r.wildCard = &wildCard
	return r
}

// External system code.
func (r BlockConfigAPIGetWashScheduleRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIGetWashScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIGetWashScheduleRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIGetWashScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIGetWashScheduleRequest) Execute() (*WashScheduleDetails, *http.Response, error) {
	return r.ApiService.GetWashScheduleExecute(r)
}

/*
GetWashSchedule Get block wash schedule

Get block wash schedules. <p><strong>OperationId:</strong>getWashSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockConfigAPIGetWashScheduleRequest
*/
func (a *BlockConfigAPIService) GetWashSchedule(ctx context.Context) BlockConfigAPIGetWashScheduleRequest {
	return BlockConfigAPIGetWashScheduleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WashScheduleDetails
func (a *BlockConfigAPIService) GetWashScheduleExecute(r BlockConfigAPIGetWashScheduleRequest) (*WashScheduleDetails, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WashScheduleDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.GetWashSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/washSchedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelIds != nil {
		t := *r.hotelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelIds", t, "multi")
		}
  }
	if r.washCodes != nil {
		t := *r.washCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "washCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "washCodes", t, "multi")
		}
  }
	if r.wildCard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wildCard", r.wildCard, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPostBlockStatusCodeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	blockStatusCodeDetails *BlockStatusCodeDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPostBlockStatusCodeRequest) Authorization(authorization string) BlockConfigAPIPostBlockStatusCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPostBlockStatusCodeRequest) XAppKey(xAppKey string) BlockConfigAPIPostBlockStatusCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPostBlockStatusCodeRequest) XHotelid(xHotelid string) BlockConfigAPIPostBlockStatusCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a block status code.
func (r BlockConfigAPIPostBlockStatusCodeRequest) BlockStatusCodeDetails(blockStatusCodeDetails BlockStatusCodeDetails) BlockConfigAPIPostBlockStatusCodeRequest {
	r.blockStatusCodeDetails = &blockStatusCodeDetails
	return r
}

// External system code.
func (r BlockConfigAPIPostBlockStatusCodeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPostBlockStatusCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPostBlockStatusCodeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPostBlockStatusCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPostBlockStatusCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostBlockStatusCodeExecute(r)
}

/*
PostBlockStatusCode Create a block status code

You can use this API to create a new block status code. <p><strong>OperationId:</strong>postBlockStatusCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BlockConfigAPIPostBlockStatusCodeRequest
*/
func (a *BlockConfigAPIService) PostBlockStatusCode(ctx context.Context) BlockConfigAPIPostBlockStatusCodeRequest {
	return BlockConfigAPIPostBlockStatusCodeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PostBlockStatusCodeExecute(r BlockConfigAPIPostBlockStatusCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PostBlockStatusCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockStatusCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.blockStatusCodeDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPostCutoffScheduleCodeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	cutoffScheduleCodeDetails *CutoffCodeCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPostCutoffScheduleCodeRequest) Authorization(authorization string) BlockConfigAPIPostCutoffScheduleCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPostCutoffScheduleCodeRequest) XAppKey(xAppKey string) BlockConfigAPIPostCutoffScheduleCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPostCutoffScheduleCodeRequest) XHotelid(xHotelid string) BlockConfigAPIPostCutoffScheduleCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for creating a block cutoff schedule code.
func (r BlockConfigAPIPostCutoffScheduleCodeRequest) CutoffScheduleCodeDetails(cutoffScheduleCodeDetails CutoffCodeCriteria) BlockConfigAPIPostCutoffScheduleCodeRequest {
	r.cutoffScheduleCodeDetails = &cutoffScheduleCodeDetails
	return r
}

// External system code.
func (r BlockConfigAPIPostCutoffScheduleCodeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPostCutoffScheduleCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPostCutoffScheduleCodeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPostCutoffScheduleCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPostCutoffScheduleCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostCutoffScheduleCodeExecute(r)
}

/*
PostCutoffScheduleCode Create a block cutoff schedule code.

You can use this API to create a new block cutoff schedule code. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates. <p><strong>OperationId:</strong>postCutoffScheduleCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel Id
 @return BlockConfigAPIPostCutoffScheduleCodeRequest
*/
func (a *BlockConfigAPIService) PostCutoffScheduleCode(ctx context.Context, hotelId string) BlockConfigAPIPostCutoffScheduleCodeRequest {
	return BlockConfigAPIPostCutoffScheduleCodeRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PostCutoffScheduleCodeExecute(r BlockConfigAPIPostCutoffScheduleCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PostCutoffScheduleCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/cutoffSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.cutoffScheduleCodeDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPostSalesManagerGoalsRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	salesManagerId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	createSalesManagerGoals *CreateSalesManagerGoals
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPostSalesManagerGoalsRequest) Authorization(authorization string) BlockConfigAPIPostSalesManagerGoalsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPostSalesManagerGoalsRequest) XAppKey(xAppKey string) BlockConfigAPIPostSalesManagerGoalsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPostSalesManagerGoalsRequest) XHotelid(xHotelid string) BlockConfigAPIPostSalesManagerGoalsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for Creating Sales Manager Goal(s).
func (r BlockConfigAPIPostSalesManagerGoalsRequest) CreateSalesManagerGoals(createSalesManagerGoals CreateSalesManagerGoals) BlockConfigAPIPostSalesManagerGoalsRequest {
	r.createSalesManagerGoals = &createSalesManagerGoals
	return r
}

// External system code.
func (r BlockConfigAPIPostSalesManagerGoalsRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPostSalesManagerGoalsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPostSalesManagerGoalsRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPostSalesManagerGoalsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPostSalesManagerGoalsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostSalesManagerGoalsExecute(r)
}

/*
PostSalesManagerGoals Create Sales Manager Goals

Use this API to Create Sales Manager Goals for a Sales Manager ID.You must know the OPERA Sales Manager ID for this API. <p><strong>OperationId:</strong>postSalesManagerGoals</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesManagerId Sales Manager Id required to fetch Sales Manager goals information
 @param hotelId Unique OPERA Hotel Id
 @return BlockConfigAPIPostSalesManagerGoalsRequest
*/
func (a *BlockConfigAPIService) PostSalesManagerGoals(ctx context.Context, salesManagerId string, hotelId string) BlockConfigAPIPostSalesManagerGoalsRequest {
	return BlockConfigAPIPostSalesManagerGoalsRequest{
		ApiService: a,
		ctx: ctx,
		salesManagerId: salesManagerId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PostSalesManagerGoalsExecute(r BlockConfigAPIPostSalesManagerGoalsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PostSalesManagerGoals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals"
	localVarPath = strings.Replace(localVarPath, "{"+"salesManagerId"+"}", url.PathEscape(parameterValueToString(r.salesManagerId, "salesManagerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.salesManagerId) < 1 {
		return localVarReturnValue, nil, reportError("salesManagerId must have at least 1 elements")
	}
	if strlen(r.salesManagerId) > 2000 {
		return localVarReturnValue, nil, reportError("salesManagerId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.createSalesManagerGoals
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPostWashScheduleRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	washScheduleCriteria *WashScheduleCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPostWashScheduleRequest) Authorization(authorization string) BlockConfigAPIPostWashScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPostWashScheduleRequest) XAppKey(xAppKey string) BlockConfigAPIPostWashScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPostWashScheduleRequest) XHotelid(xHotelid string) BlockConfigAPIPostWashScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to create new Wash Schedule Configuration under the selected property.
func (r BlockConfigAPIPostWashScheduleRequest) WashScheduleCriteria(washScheduleCriteria WashScheduleCriteria) BlockConfigAPIPostWashScheduleRequest {
	r.washScheduleCriteria = &washScheduleCriteria
	return r
}

// External system code.
func (r BlockConfigAPIPostWashScheduleRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPostWashScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPostWashScheduleRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPostWashScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPostWashScheduleRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PostWashScheduleExecute(r)
}

/*
PostWashSchedule Create block wash schedule

Create a block wash schedule. <p><strong>OperationId:</strong>postWashSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPIPostWashScheduleRequest
*/
func (a *BlockConfigAPIService) PostWashSchedule(ctx context.Context, hotelId string) BlockConfigAPIPostWashScheduleRequest {
	return BlockConfigAPIPostWashScheduleRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PostWashScheduleExecute(r BlockConfigAPIPostWashScheduleRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PostWashSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/washSchedules"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.washScheduleCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPutBlockStatusCodeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	blockStatusCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	blockStatusCodeDetails *BlockStatusCodeDetails
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPutBlockStatusCodeRequest) Authorization(authorization string) BlockConfigAPIPutBlockStatusCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPutBlockStatusCodeRequest) XAppKey(xAppKey string) BlockConfigAPIPutBlockStatusCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPutBlockStatusCodeRequest) XHotelid(xHotelid string) BlockConfigAPIPutBlockStatusCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating block status code.
func (r BlockConfigAPIPutBlockStatusCodeRequest) BlockStatusCodeDetails(blockStatusCodeDetails BlockStatusCodeDetails) BlockConfigAPIPutBlockStatusCodeRequest {
	r.blockStatusCodeDetails = &blockStatusCodeDetails
	return r
}

// External system code.
func (r BlockConfigAPIPutBlockStatusCodeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPutBlockStatusCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPutBlockStatusCodeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPutBlockStatusCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPutBlockStatusCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutBlockStatusCodeExecute(r)
}

/*
PutBlockStatusCode Change block status code

You can use this API to change block status code. <p><strong>OperationId:</strong>putBlockStatusCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockStatusCode OPERA Block status code
 @return BlockConfigAPIPutBlockStatusCodeRequest
*/
func (a *BlockConfigAPIService) PutBlockStatusCode(ctx context.Context, blockStatusCode string) BlockConfigAPIPutBlockStatusCodeRequest {
	return BlockConfigAPIPutBlockStatusCodeRequest{
		ApiService: a,
		ctx: ctx,
		blockStatusCode: blockStatusCode,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PutBlockStatusCodeExecute(r BlockConfigAPIPutBlockStatusCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PutBlockStatusCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockStatusCodes/{blockStatusCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"blockStatusCode"+"}", url.PathEscape(parameterValueToString(r.blockStatusCode, "blockStatusCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.blockStatusCode) < 1 {
		return localVarReturnValue, nil, reportError("blockStatusCode must have at least 1 elements")
	}
	if strlen(r.blockStatusCode) > 2000 {
		return localVarReturnValue, nil, reportError("blockStatusCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.blockStatusCodeDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPutCutoffScheduleCodeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	cutoffCodeId int32
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	blockCutoffCodeDetails *CutoffCodeCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPutCutoffScheduleCodeRequest) Authorization(authorization string) BlockConfigAPIPutCutoffScheduleCodeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPutCutoffScheduleCodeRequest) XAppKey(xAppKey string) BlockConfigAPIPutCutoffScheduleCodeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPutCutoffScheduleCodeRequest) XHotelid(xHotelid string) BlockConfigAPIPutCutoffScheduleCodeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for updating block cutoff schedule code.
func (r BlockConfigAPIPutCutoffScheduleCodeRequest) BlockCutoffCodeDetails(blockCutoffCodeDetails CutoffCodeCriteria) BlockConfigAPIPutCutoffScheduleCodeRequest {
	r.blockCutoffCodeDetails = &blockCutoffCodeDetails
	return r
}

// External system code.
func (r BlockConfigAPIPutCutoffScheduleCodeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPutCutoffScheduleCodeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPutCutoffScheduleCodeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPutCutoffScheduleCodeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPutCutoffScheduleCodeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutCutoffScheduleCodeExecute(r)
}

/*
PutCutoffScheduleCode Change block cutoff schedule code

You can use this API to change block cutoff schedule code. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>putCutoffScheduleCode</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cutoffCodeId OPERA Block cutoff schedule code Id.
 @param hotelId Unique OPERA Hotel Id
 @return BlockConfigAPIPutCutoffScheduleCodeRequest
*/
func (a *BlockConfigAPIService) PutCutoffScheduleCode(ctx context.Context, cutoffCodeId int32, hotelId string) BlockConfigAPIPutCutoffScheduleCodeRequest {
	return BlockConfigAPIPutCutoffScheduleCodeRequest{
		ApiService: a,
		ctx: ctx,
		cutoffCodeId: cutoffCodeId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PutCutoffScheduleCodeExecute(r BlockConfigAPIPutCutoffScheduleCodeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PutCutoffScheduleCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/cutoffSchedules/{cutoffCodeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cutoffCodeId"+"}", url.PathEscape(parameterValueToString(r.cutoffCodeId, "cutoffCodeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.blockCutoffCodeDetails
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPutNextBlockStatusCodesRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	srcBlockStatusCode string
	authorization *string
	xAppKey *string
	xHotelid *string
	nextBlockStatusCode *NextBlockStatusCode
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPutNextBlockStatusCodesRequest) Authorization(authorization string) BlockConfigAPIPutNextBlockStatusCodesRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPutNextBlockStatusCodesRequest) XAppKey(xAppKey string) BlockConfigAPIPutNextBlockStatusCodesRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPutNextBlockStatusCodesRequest) XHotelid(xHotelid string) BlockConfigAPIPutNextBlockStatusCodesRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for change block status code flow. Batch insert/update/delete of next status code list of a particular status code.
func (r BlockConfigAPIPutNextBlockStatusCodesRequest) NextBlockStatusCode(nextBlockStatusCode NextBlockStatusCode) BlockConfigAPIPutNextBlockStatusCodesRequest {
	r.nextBlockStatusCode = &nextBlockStatusCode
	return r
}

// External system code.
func (r BlockConfigAPIPutNextBlockStatusCodesRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPutNextBlockStatusCodesRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPutNextBlockStatusCodesRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPutNextBlockStatusCodesRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPutNextBlockStatusCodesRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutNextBlockStatusCodesExecute(r)
}

/*
PutNextBlockStatusCodes Change next block status codes

Update the next Block status. <p><strong>OperationId:</strong>putNextBlockStatusCodes</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param srcBlockStatusCode OPERA Block status code
 @return BlockConfigAPIPutNextBlockStatusCodesRequest
*/
func (a *BlockConfigAPIService) PutNextBlockStatusCodes(ctx context.Context, srcBlockStatusCode string) BlockConfigAPIPutNextBlockStatusCodesRequest {
	return BlockConfigAPIPutNextBlockStatusCodesRequest{
		ApiService: a,
		ctx: ctx,
		srcBlockStatusCode: srcBlockStatusCode,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PutNextBlockStatusCodesExecute(r BlockConfigAPIPutNextBlockStatusCodesRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PutNextBlockStatusCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockStatusCodes/{srcBlockStatusCode}/nextStatusCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"srcBlockStatusCode"+"}", url.PathEscape(parameterValueToString(r.srcBlockStatusCode, "srcBlockStatusCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.srcBlockStatusCode) < 1 {
		return localVarReturnValue, nil, reportError("srcBlockStatusCode must have at least 1 elements")
	}
	if strlen(r.srcBlockStatusCode) > 2000 {
		return localVarReturnValue, nil, reportError("srcBlockStatusCode must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.nextBlockStatusCode
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPutSalesManagerGoalsRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	salesGoalId string
	salesManagerId string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	salesManagerGoalsInfo *SalesManagerGoalsInfo
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPutSalesManagerGoalsRequest) Authorization(authorization string) BlockConfigAPIPutSalesManagerGoalsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPutSalesManagerGoalsRequest) XAppKey(xAppKey string) BlockConfigAPIPutSalesManagerGoalsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPutSalesManagerGoalsRequest) XHotelid(xHotelid string) BlockConfigAPIPutSalesManagerGoalsRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object for modifying Sales Manager&#39;s goal.
func (r BlockConfigAPIPutSalesManagerGoalsRequest) SalesManagerGoalsInfo(salesManagerGoalsInfo SalesManagerGoalsInfo) BlockConfigAPIPutSalesManagerGoalsRequest {
	r.salesManagerGoalsInfo = &salesManagerGoalsInfo
	return r
}

// External system code.
func (r BlockConfigAPIPutSalesManagerGoalsRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPutSalesManagerGoalsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPutSalesManagerGoalsRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPutSalesManagerGoalsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPutSalesManagerGoalsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutSalesManagerGoalsExecute(r)
}

/*
PutSalesManagerGoals Update Sales Manager Goal in a hotel by ID

Use this API to update Sales Manager Goal.You must know the OPERA Sales Manager ID and Goal ID for this API. <p><strong>OperationId:</strong>putSalesManagerGoals</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesGoalId Unique Sales Goal Id assigned to a Sales Manager.
 @param salesManagerId Sales Manager Id required to put Sales Manager goals information
 @param hotelId Unique OPERA Hotel Id
 @return BlockConfigAPIPutSalesManagerGoalsRequest
*/
func (a *BlockConfigAPIService) PutSalesManagerGoals(ctx context.Context, salesGoalId string, salesManagerId string, hotelId string) BlockConfigAPIPutSalesManagerGoalsRequest {
	return BlockConfigAPIPutSalesManagerGoalsRequest{
		ApiService: a,
		ctx: ctx,
		salesGoalId: salesGoalId,
		salesManagerId: salesManagerId,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PutSalesManagerGoalsExecute(r BlockConfigAPIPutSalesManagerGoalsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PutSalesManagerGoals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals/{salesGoalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"salesGoalId"+"}", url.PathEscape(parameterValueToString(r.salesGoalId, "salesGoalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"salesManagerId"+"}", url.PathEscape(parameterValueToString(r.salesManagerId, "salesManagerId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.salesGoalId) < 1 {
		return localVarReturnValue, nil, reportError("salesGoalId must have at least 1 elements")
	}
	if strlen(r.salesGoalId) > 2000 {
		return localVarReturnValue, nil, reportError("salesGoalId must have less than 2000 elements")
	}
	if strlen(r.salesManagerId) < 1 {
		return localVarReturnValue, nil, reportError("salesManagerId must have at least 1 elements")
	}
	if strlen(r.salesManagerId) > 2000 {
		return localVarReturnValue, nil, reportError("salesManagerId must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.salesManagerGoalsInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIPutWashScheduleRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	washScheduleCode string
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	washScheduleCriteria *WashScheduleCriteria
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIPutWashScheduleRequest) Authorization(authorization string) BlockConfigAPIPutWashScheduleRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIPutWashScheduleRequest) XAppKey(xAppKey string) BlockConfigAPIPutWashScheduleRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIPutWashScheduleRequest) XHotelid(xHotelid string) BlockConfigAPIPutWashScheduleRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to change existing Wash Schedule Configuration.
func (r BlockConfigAPIPutWashScheduleRequest) WashScheduleCriteria(washScheduleCriteria WashScheduleCriteria) BlockConfigAPIPutWashScheduleRequest {
	r.washScheduleCriteria = &washScheduleCriteria
	return r
}

// External system code.
func (r BlockConfigAPIPutWashScheduleRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIPutWashScheduleRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIPutWashScheduleRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIPutWashScheduleRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIPutWashScheduleRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.PutWashScheduleExecute(r)
}

/*
PutWashSchedule Change block wash schedule

Change a block wash schedule. <p><strong>OperationId:</strong>putWashSchedule</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param washScheduleCode Unique Block Wash Code
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPIPutWashScheduleRequest
*/
func (a *BlockConfigAPIService) PutWashSchedule(ctx context.Context, washScheduleCode string, hotelId string) BlockConfigAPIPutWashScheduleRequest {
	return BlockConfigAPIPutWashScheduleRequest{
		ApiService: a,
		ctx: ctx,
		washScheduleCode: washScheduleCode,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) PutWashScheduleExecute(r BlockConfigAPIPutWashScheduleRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.PutWashSchedule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/washSchedules/{washScheduleCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"washScheduleCode"+"}", url.PathEscape(parameterValueToString(r.washScheduleCode, "washScheduleCode")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.washScheduleCode) < 1 {
		return localVarReturnValue, nil, reportError("washScheduleCode must have at least 1 elements")
	}
	if strlen(r.washScheduleCode) > 2000 {
		return localVarReturnValue, nil, reportError("washScheduleCode must have less than 2000 elements")
	}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.washScheduleCriteria
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIRemoveSalesManagerGoalRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	salesGoalId string
	salesManagerId string
	authorization *string
	xAppKey *string
	xHotelid *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIRemoveSalesManagerGoalRequest) Authorization(authorization string) BlockConfigAPIRemoveSalesManagerGoalRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIRemoveSalesManagerGoalRequest) XAppKey(xAppKey string) BlockConfigAPIRemoveSalesManagerGoalRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIRemoveSalesManagerGoalRequest) XHotelid(xHotelid string) BlockConfigAPIRemoveSalesManagerGoalRequest {
	r.xHotelid = &xHotelid
	return r
}

// External system code.
func (r BlockConfigAPIRemoveSalesManagerGoalRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIRemoveSalesManagerGoalRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIRemoveSalesManagerGoalRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIRemoveSalesManagerGoalRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIRemoveSalesManagerGoalRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.RemoveSalesManagerGoalExecute(r)
}

/*
RemoveSalesManagerGoal Delete Sale Manager Goal

Use this API to delete Sales Manager Goal. <p><strong>OperationId:</strong>removeSalesManagerGoal</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesGoalId Unique Sales Goal Id assigned to a Sales Manager.
 @param salesManagerId Unique Sales Managers Id
 @return BlockConfigAPIRemoveSalesManagerGoalRequest
*/
func (a *BlockConfigAPIService) RemoveSalesManagerGoal(ctx context.Context, salesGoalId string, salesManagerId string) BlockConfigAPIRemoveSalesManagerGoalRequest {
	return BlockConfigAPIRemoveSalesManagerGoalRequest{
		ApiService: a,
		ctx: ctx,
		salesGoalId: salesGoalId,
		salesManagerId: salesManagerId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) RemoveSalesManagerGoalExecute(r BlockConfigAPIRemoveSalesManagerGoalRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.RemoveSalesManagerGoal")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/salesManagers/{salesManagerId}/salesManagerGoals/{salesGoalId}"
	localVarPath = strings.Replace(localVarPath, "{"+"salesGoalId"+"}", url.PathEscape(parameterValueToString(r.salesGoalId, "salesGoalId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"salesManagerId"+"}", url.PathEscape(parameterValueToString(r.salesManagerId, "salesManagerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.salesGoalId) < 1 {
		return localVarReturnValue, nil, reportError("salesGoalId must have at least 1 elements")
	}
	if strlen(r.salesGoalId) > 2000 {
		return localVarReturnValue, nil, reportError("salesGoalId must have less than 2000 elements")
	}
	if strlen(r.salesManagerId) < 1 {
		return localVarReturnValue, nil, reportError("salesManagerId must have at least 1 elements")
	}
	if strlen(r.salesManagerId) > 2000 {
		return localVarReturnValue, nil, reportError("salesManagerId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPIRemoveSalesManagerGoalsRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	salesManagerId string
	authorization *string
	xAppKey *string
	xHotelid *string
	salesGoalId *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPIRemoveSalesManagerGoalsRequest) Authorization(authorization string) BlockConfigAPIRemoveSalesManagerGoalsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPIRemoveSalesManagerGoalsRequest) XAppKey(xAppKey string) BlockConfigAPIRemoveSalesManagerGoalsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPIRemoveSalesManagerGoalsRequest) XHotelid(xHotelid string) BlockConfigAPIRemoveSalesManagerGoalsRequest {
	r.xHotelid = &xHotelid
	return r
}

// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
func (r BlockConfigAPIRemoveSalesManagerGoalsRequest) SalesGoalId(salesGoalId []string) BlockConfigAPIRemoveSalesManagerGoalsRequest {
	r.salesGoalId = &salesGoalId
	return r
}

// External system code.
func (r BlockConfigAPIRemoveSalesManagerGoalsRequest) XExternalsystem(xExternalsystem string) BlockConfigAPIRemoveSalesManagerGoalsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPIRemoveSalesManagerGoalsRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPIRemoveSalesManagerGoalsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPIRemoveSalesManagerGoalsRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.RemoveSalesManagerGoalsExecute(r)
}

/*
RemoveSalesManagerGoals Delete Sale Manager Goals

Use this API to delete Sales Manager Goals. <p><strong>OperationId:</strong>removeSalesManagerGoals</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesManagerId Unique Sales Managers Id
 @return BlockConfigAPIRemoveSalesManagerGoalsRequest
*/
func (a *BlockConfigAPIService) RemoveSalesManagerGoals(ctx context.Context, salesManagerId string) BlockConfigAPIRemoveSalesManagerGoalsRequest {
	return BlockConfigAPIRemoveSalesManagerGoalsRequest{
		ApiService: a,
		ctx: ctx,
		salesManagerId: salesManagerId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) RemoveSalesManagerGoalsExecute(r BlockConfigAPIRemoveSalesManagerGoalsRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.RemoveSalesManagerGoals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/salesManagers/{salesManagerId}/salesManagerGoals"
	localVarPath = strings.Replace(localVarPath, "{"+"salesManagerId"+"}", url.PathEscape(parameterValueToString(r.salesManagerId, "salesManagerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.salesManagerId) < 1 {
		return localVarReturnValue, nil, reportError("salesManagerId must have at least 1 elements")
	}
	if strlen(r.salesManagerId) > 2000 {
		return localVarReturnValue, nil, reportError("salesManagerId must have less than 2000 elements")
	}

	if r.salesGoalId != nil {
		t := *r.salesGoalId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "salesGoalId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "salesGoalId", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPISetBlockCutoffScheduleRangeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	blockCutoffScheduleRange *BlockCutoffScheduleRange
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPISetBlockCutoffScheduleRangeRequest) Authorization(authorization string) BlockConfigAPISetBlockCutoffScheduleRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPISetBlockCutoffScheduleRangeRequest) XAppKey(xAppKey string) BlockConfigAPISetBlockCutoffScheduleRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPISetBlockCutoffScheduleRangeRequest) XHotelid(xHotelid string) BlockConfigAPISetBlockCutoffScheduleRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Request object to a create block cutoff schedule with date range.
func (r BlockConfigAPISetBlockCutoffScheduleRangeRequest) BlockCutoffScheduleRange(blockCutoffScheduleRange BlockCutoffScheduleRange) BlockConfigAPISetBlockCutoffScheduleRangeRequest {
	r.blockCutoffScheduleRange = &blockCutoffScheduleRange
	return r
}

// External system code.
func (r BlockConfigAPISetBlockCutoffScheduleRangeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPISetBlockCutoffScheduleRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPISetBlockCutoffScheduleRangeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPISetBlockCutoffScheduleRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPISetBlockCutoffScheduleRangeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetBlockCutoffScheduleRangeExecute(r)
}

/*
SetBlockCutoffScheduleRange Set block cutoff schedule range

You can use this API to set block cutoff schedule range. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.<p><strong>OperationId:</strong>setBlockCutoffScheduleRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPISetBlockCutoffScheduleRangeRequest
*/
func (a *BlockConfigAPIService) SetBlockCutoffScheduleRange(ctx context.Context, hotelId string) BlockConfigAPISetBlockCutoffScheduleRangeRequest {
	return BlockConfigAPISetBlockCutoffScheduleRangeRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) SetBlockCutoffScheduleRangeExecute(r BlockConfigAPISetBlockCutoffScheduleRangeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.SetBlockCutoffScheduleRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blockCutoffScheduleRange"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 20 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 20 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.blockCutoffScheduleRange
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BlockConfigAPISetBlockSalesAllowanceRangeRequest struct {
	ctx context.Context
	ApiService *BlockConfigAPIService
	hotelId string
	authorization *string
	xAppKey *string
	xHotelid *string
	blockSalesAllowanceRange *BlockSalesAllowanceRange
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r BlockConfigAPISetBlockSalesAllowanceRangeRequest) Authorization(authorization string) BlockConfigAPISetBlockSalesAllowanceRangeRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r BlockConfigAPISetBlockSalesAllowanceRangeRequest) XAppKey(xAppKey string) BlockConfigAPISetBlockSalesAllowanceRangeRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r BlockConfigAPISetBlockSalesAllowanceRangeRequest) XHotelid(xHotelid string) BlockConfigAPISetBlockSalesAllowanceRangeRequest {
	r.xHotelid = &xHotelid
	return r
}

// Operation to a create block sales allowance with date range.
func (r BlockConfigAPISetBlockSalesAllowanceRangeRequest) BlockSalesAllowanceRange(blockSalesAllowanceRange BlockSalesAllowanceRange) BlockConfigAPISetBlockSalesAllowanceRangeRequest {
	r.blockSalesAllowanceRange = &blockSalesAllowanceRange
	return r
}

// External system code.
func (r BlockConfigAPISetBlockSalesAllowanceRangeRequest) XExternalsystem(xExternalsystem string) BlockConfigAPISetBlockSalesAllowanceRangeRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r BlockConfigAPISetBlockSalesAllowanceRangeRequest) AcceptLanguage(acceptLanguage string) BlockConfigAPISetBlockSalesAllowanceRangeRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r BlockConfigAPISetBlockSalesAllowanceRangeRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.SetBlockSalesAllowanceRangeExecute(r)
}

/*
SetBlockSalesAllowanceRange Set block sales allowance range

You can use this API to set block sales allowance range. <p><strong>OperationId:</strong>setBlockSalesAllowanceRange</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hotelId Unique OPERA Hotel code
 @return BlockConfigAPISetBlockSalesAllowanceRangeRequest
*/
func (a *BlockConfigAPIService) SetBlockSalesAllowanceRange(ctx context.Context, hotelId string) BlockConfigAPISetBlockSalesAllowanceRangeRequest {
	return BlockConfigAPISetBlockSalesAllowanceRangeRequest{
		ApiService: a,
		ctx: ctx,
		hotelId: hotelId,
	}
}

// Execute executes the request
//  @return Status
func (a *BlockConfigAPIService) SetBlockSalesAllowanceRangeExecute(r BlockConfigAPISetBlockSalesAllowanceRangeRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlockConfigAPIService.SetBlockSalesAllowanceRange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/hotels/{hotelId}/blockSalesAllowanceRange"
	localVarPath = strings.Replace(localVarPath, "{"+"hotelId"+"}", url.PathEscape(parameterValueToString(r.hotelId, "hotelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.hotelId) < 1 {
		return localVarReturnValue, nil, reportError("hotelId must have at least 1 elements")
	}
	if strlen(r.hotelId) > 2000 {
		return localVarReturnValue, nil, reportError("hotelId must have less than 2000 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;charset=UTF-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.blockSalesAllowanceRange
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
