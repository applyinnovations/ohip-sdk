/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the CutoffCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CutoffCodeType{}

// CutoffCodeType A representation of the information contained by a Cutoff Code.
type CutoffCodeType struct {
	// Detail information of the Cutoff Code.
	CutoffCodeDetails []CutoffCodeDetailType `json:"cutoffCodeDetails,omitempty"`
	// Hotel Code to which the cutoff Code belongs to.
	HotelCode *string `json:"hotelCode,omitempty"`
	// Unique Cutoff Schedule Code.
	Code *string `json:"code,omitempty"`
	// Unique Cutoff Schedule Code Id
	Id *int32 `json:"id,omitempty"`
	// Description of the Cutoff Schedule Code.
	Description *string `json:"description,omitempty"`
	// Cutoff Schedule Code Start Date.
	CutoffCodeStartDate *string `json:"cutoffCodeStartDate,omitempty"`
	// Cutoff Schedule Code End Date.
	CutoffCodeEndDate *string `json:"cutoffCodeEndDate,omitempty"`
	// Cutoff Schedule Code Default Days. This value will be used if no pre defined schedule exist for a date or room type.
	DefaultDays *int32 `json:"defaultDays,omitempty"`
}

// NewCutoffCodeType instantiates a new CutoffCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCutoffCodeType() *CutoffCodeType {
	this := CutoffCodeType{}
	return &this
}

// NewCutoffCodeTypeWithDefaults instantiates a new CutoffCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCutoffCodeTypeWithDefaults() *CutoffCodeType {
	this := CutoffCodeType{}
	return &this
}

// GetCutoffCodeDetails returns the CutoffCodeDetails field value if set, zero value otherwise.
func (o *CutoffCodeType) GetCutoffCodeDetails() []CutoffCodeDetailType {
	if o == nil || IsNil(o.CutoffCodeDetails) {
		var ret []CutoffCodeDetailType
		return ret
	}
	return o.CutoffCodeDetails
}

// GetCutoffCodeDetailsOk returns a tuple with the CutoffCodeDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetCutoffCodeDetailsOk() ([]CutoffCodeDetailType, bool) {
	if o == nil || IsNil(o.CutoffCodeDetails) {
		return nil, false
	}
	return o.CutoffCodeDetails, true
}

// HasCutoffCodeDetails returns a boolean if a field has been set.
func (o *CutoffCodeType) HasCutoffCodeDetails() bool {
	if o != nil && !IsNil(o.CutoffCodeDetails) {
		return true
	}

	return false
}

// SetCutoffCodeDetails gets a reference to the given []CutoffCodeDetailType and assigns it to the CutoffCodeDetails field.
func (o *CutoffCodeType) SetCutoffCodeDetails(v []CutoffCodeDetailType) {
	o.CutoffCodeDetails = v
}

// GetHotelCode returns the HotelCode field value if set, zero value otherwise.
func (o *CutoffCodeType) GetHotelCode() string {
	if o == nil || IsNil(o.HotelCode) {
		var ret string
		return ret
	}
	return *o.HotelCode
}

// GetHotelCodeOk returns a tuple with the HotelCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetHotelCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HotelCode) {
		return nil, false
	}
	return o.HotelCode, true
}

// HasHotelCode returns a boolean if a field has been set.
func (o *CutoffCodeType) HasHotelCode() bool {
	if o != nil && !IsNil(o.HotelCode) {
		return true
	}

	return false
}

// SetHotelCode gets a reference to the given string and assigns it to the HotelCode field.
func (o *CutoffCodeType) SetHotelCode(v string) {
	o.HotelCode = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CutoffCodeType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CutoffCodeType) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CutoffCodeType) SetCode(v string) {
	o.Code = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CutoffCodeType) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CutoffCodeType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CutoffCodeType) SetId(v int32) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CutoffCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CutoffCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CutoffCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetCutoffCodeStartDate returns the CutoffCodeStartDate field value if set, zero value otherwise.
func (o *CutoffCodeType) GetCutoffCodeStartDate() string {
	if o == nil || IsNil(o.CutoffCodeStartDate) {
		var ret string
		return ret
	}
	return *o.CutoffCodeStartDate
}

// GetCutoffCodeStartDateOk returns a tuple with the CutoffCodeStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetCutoffCodeStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.CutoffCodeStartDate) {
		return nil, false
	}
	return o.CutoffCodeStartDate, true
}

// HasCutoffCodeStartDate returns a boolean if a field has been set.
func (o *CutoffCodeType) HasCutoffCodeStartDate() bool {
	if o != nil && !IsNil(o.CutoffCodeStartDate) {
		return true
	}

	return false
}

// SetCutoffCodeStartDate gets a reference to the given string and assigns it to the CutoffCodeStartDate field.
func (o *CutoffCodeType) SetCutoffCodeStartDate(v string) {
	o.CutoffCodeStartDate = &v
}

// GetCutoffCodeEndDate returns the CutoffCodeEndDate field value if set, zero value otherwise.
func (o *CutoffCodeType) GetCutoffCodeEndDate() string {
	if o == nil || IsNil(o.CutoffCodeEndDate) {
		var ret string
		return ret
	}
	return *o.CutoffCodeEndDate
}

// GetCutoffCodeEndDateOk returns a tuple with the CutoffCodeEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetCutoffCodeEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.CutoffCodeEndDate) {
		return nil, false
	}
	return o.CutoffCodeEndDate, true
}

// HasCutoffCodeEndDate returns a boolean if a field has been set.
func (o *CutoffCodeType) HasCutoffCodeEndDate() bool {
	if o != nil && !IsNil(o.CutoffCodeEndDate) {
		return true
	}

	return false
}

// SetCutoffCodeEndDate gets a reference to the given string and assigns it to the CutoffCodeEndDate field.
func (o *CutoffCodeType) SetCutoffCodeEndDate(v string) {
	o.CutoffCodeEndDate = &v
}

// GetDefaultDays returns the DefaultDays field value if set, zero value otherwise.
func (o *CutoffCodeType) GetDefaultDays() int32 {
	if o == nil || IsNil(o.DefaultDays) {
		var ret int32
		return ret
	}
	return *o.DefaultDays
}

// GetDefaultDaysOk returns a tuple with the DefaultDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CutoffCodeType) GetDefaultDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultDays) {
		return nil, false
	}
	return o.DefaultDays, true
}

// HasDefaultDays returns a boolean if a field has been set.
func (o *CutoffCodeType) HasDefaultDays() bool {
	if o != nil && !IsNil(o.DefaultDays) {
		return true
	}

	return false
}

// SetDefaultDays gets a reference to the given int32 and assigns it to the DefaultDays field.
func (o *CutoffCodeType) SetDefaultDays(v int32) {
	o.DefaultDays = &v
}

func (o CutoffCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CutoffCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CutoffCodeDetails) {
		toSerialize["cutoffCodeDetails"] = o.CutoffCodeDetails
	}
	if !IsNil(o.HotelCode) {
		toSerialize["hotelCode"] = o.HotelCode
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CutoffCodeStartDate) {
		toSerialize["cutoffCodeStartDate"] = o.CutoffCodeStartDate
	}
	if !IsNil(o.CutoffCodeEndDate) {
		toSerialize["cutoffCodeEndDate"] = o.CutoffCodeEndDate
	}
	if !IsNil(o.DefaultDays) {
		toSerialize["defaultDays"] = o.DefaultDays
	}
	return toSerialize, nil
}

type NullableCutoffCodeType struct {
	value *CutoffCodeType
	isSet bool
}

func (v NullableCutoffCodeType) Get() *CutoffCodeType {
	return v.value
}

func (v *NullableCutoffCodeType) Set(val *CutoffCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableCutoffCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableCutoffCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCutoffCodeType(val *CutoffCodeType) *NullableCutoffCodeType {
	return &NullableCutoffCodeType{value: val, isSet: true}
}

func (v NullableCutoffCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCutoffCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


