/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the NextBlockStatusCodeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NextBlockStatusCodeInfoType{}

// NextBlockStatusCodeInfoType Information of next block status code.
type NextBlockStatusCodeInfoType struct {
	// Order of next block status code
	Order *int32 `json:"order,omitempty"`
	// Next block status code.
	Status *string `json:"status,omitempty"`
}

// NewNextBlockStatusCodeInfoType instantiates a new NextBlockStatusCodeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNextBlockStatusCodeInfoType() *NextBlockStatusCodeInfoType {
	this := NextBlockStatusCodeInfoType{}
	return &this
}

// NewNextBlockStatusCodeInfoTypeWithDefaults instantiates a new NextBlockStatusCodeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNextBlockStatusCodeInfoTypeWithDefaults() *NextBlockStatusCodeInfoType {
	this := NextBlockStatusCodeInfoType{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *NextBlockStatusCodeInfoType) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatusCodeInfoType) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *NextBlockStatusCodeInfoType) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *NextBlockStatusCodeInfoType) SetOrder(v int32) {
	o.Order = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NextBlockStatusCodeInfoType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NextBlockStatusCodeInfoType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NextBlockStatusCodeInfoType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NextBlockStatusCodeInfoType) SetStatus(v string) {
	o.Status = &v
}

func (o NextBlockStatusCodeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NextBlockStatusCodeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableNextBlockStatusCodeInfoType struct {
	value *NextBlockStatusCodeInfoType
	isSet bool
}

func (v NullableNextBlockStatusCodeInfoType) Get() *NextBlockStatusCodeInfoType {
	return v.value
}

func (v *NullableNextBlockStatusCodeInfoType) Set(val *NextBlockStatusCodeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableNextBlockStatusCodeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableNextBlockStatusCodeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextBlockStatusCodeInfoType(val *NextBlockStatusCodeInfoType) *NullableNextBlockStatusCodeInfoType {
	return &NullableNextBlockStatusCodeInfoType{value: val, isSet: true}
}

func (v NullableNextBlockStatusCodeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextBlockStatusCodeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


