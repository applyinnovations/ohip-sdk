/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the BlockStatusCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockStatusCodeType{}

// BlockStatusCodeType Block status code information.
type BlockStatusCodeType struct {
	// Indicates if the rooms with this status code will be allowed for pickup or not.
	AllowPickup *bool `json:"allowPickup,omitempty"`
	// Returns true if the status code is already used in Events.
	CateringInUse *bool `json:"cateringInUse,omitempty"`
	CateringStatusType *BlockStatusCodeStatusType `json:"cateringStatusType,omitempty"`
	Color *StatusColorType `json:"color,omitempty"`
	DefaultReservationType *CodeDescriptionType `json:"defaultReservationType,omitempty"`
	// Returns true if the status code is already used in Block / Event / Status Flow.
	InUse *bool `json:"inUse,omitempty"`
	// Indicates the default status for all new leads. Only one lead status can be selected as the default.
	LeadStatus *bool `json:"leadStatus,omitempty"`
	// Indicates if the status code logs the catering changes or not.
	LogCatering *bool `json:"logCatering,omitempty"`
	// Indicates that the business block created with this Status is an Opportunity.
	Opportunity *bool `json:"opportunity,omitempty"`
	// Indicates the order the status code is displayed in the status cycle.
	OrderBy *int32 `json:"orderBy,omitempty"`
	// Reason type for every block reservation cancellation. Block Cancellation Reason, Block Refused Reasons, and Block Lost Reasons.
	ReasonType *string `json:"reasonType,omitempty"`
	// Indicates if the rooms with this status code can be returned to availability or not.
	ReturnToInventory *bool `json:"returnToInventory,omitempty"`
	RoomStatusType *BlockStatusCodeStatusType `json:"roomStatusType,omitempty"`
	// Indicates if the function diary will be shown within the Sales and Catering.
	ShowDiary *bool `json:"showDiary,omitempty"`
	// Indicates if the status code is the starting status of the status cycle or not.
	Starting *bool `json:"starting,omitempty"`
	Status *CodeDescriptionType `json:"status,omitempty"`
}

// NewBlockStatusCodeType instantiates a new BlockStatusCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockStatusCodeType() *BlockStatusCodeType {
	this := BlockStatusCodeType{}
	return &this
}

// NewBlockStatusCodeTypeWithDefaults instantiates a new BlockStatusCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockStatusCodeTypeWithDefaults() *BlockStatusCodeType {
	this := BlockStatusCodeType{}
	return &this
}

// GetAllowPickup returns the AllowPickup field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetAllowPickup() bool {
	if o == nil || IsNil(o.AllowPickup) {
		var ret bool
		return ret
	}
	return *o.AllowPickup
}

// GetAllowPickupOk returns a tuple with the AllowPickup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetAllowPickupOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowPickup) {
		return nil, false
	}
	return o.AllowPickup, true
}

// HasAllowPickup returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasAllowPickup() bool {
	if o != nil && !IsNil(o.AllowPickup) {
		return true
	}

	return false
}

// SetAllowPickup gets a reference to the given bool and assigns it to the AllowPickup field.
func (o *BlockStatusCodeType) SetAllowPickup(v bool) {
	o.AllowPickup = &v
}

// GetCateringInUse returns the CateringInUse field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetCateringInUse() bool {
	if o == nil || IsNil(o.CateringInUse) {
		var ret bool
		return ret
	}
	return *o.CateringInUse
}

// GetCateringInUseOk returns a tuple with the CateringInUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetCateringInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.CateringInUse) {
		return nil, false
	}
	return o.CateringInUse, true
}

// HasCateringInUse returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasCateringInUse() bool {
	if o != nil && !IsNil(o.CateringInUse) {
		return true
	}

	return false
}

// SetCateringInUse gets a reference to the given bool and assigns it to the CateringInUse field.
func (o *BlockStatusCodeType) SetCateringInUse(v bool) {
	o.CateringInUse = &v
}

// GetCateringStatusType returns the CateringStatusType field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetCateringStatusType() BlockStatusCodeStatusType {
	if o == nil || IsNil(o.CateringStatusType) {
		var ret BlockStatusCodeStatusType
		return ret
	}
	return *o.CateringStatusType
}

// GetCateringStatusTypeOk returns a tuple with the CateringStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetCateringStatusTypeOk() (*BlockStatusCodeStatusType, bool) {
	if o == nil || IsNil(o.CateringStatusType) {
		return nil, false
	}
	return o.CateringStatusType, true
}

// HasCateringStatusType returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasCateringStatusType() bool {
	if o != nil && !IsNil(o.CateringStatusType) {
		return true
	}

	return false
}

// SetCateringStatusType gets a reference to the given BlockStatusCodeStatusType and assigns it to the CateringStatusType field.
func (o *BlockStatusCodeType) SetCateringStatusType(v BlockStatusCodeStatusType) {
	o.CateringStatusType = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetColor() StatusColorType {
	if o == nil || IsNil(o.Color) {
		var ret StatusColorType
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetColorOk() (*StatusColorType, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given StatusColorType and assigns it to the Color field.
func (o *BlockStatusCodeType) SetColor(v StatusColorType) {
	o.Color = &v
}

// GetDefaultReservationType returns the DefaultReservationType field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetDefaultReservationType() CodeDescriptionType {
	if o == nil || IsNil(o.DefaultReservationType) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.DefaultReservationType
}

// GetDefaultReservationTypeOk returns a tuple with the DefaultReservationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetDefaultReservationTypeOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.DefaultReservationType) {
		return nil, false
	}
	return o.DefaultReservationType, true
}

// HasDefaultReservationType returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasDefaultReservationType() bool {
	if o != nil && !IsNil(o.DefaultReservationType) {
		return true
	}

	return false
}

// SetDefaultReservationType gets a reference to the given CodeDescriptionType and assigns it to the DefaultReservationType field.
func (o *BlockStatusCodeType) SetDefaultReservationType(v CodeDescriptionType) {
	o.DefaultReservationType = &v
}

// GetInUse returns the InUse field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetInUse() bool {
	if o == nil || IsNil(o.InUse) {
		var ret bool
		return ret
	}
	return *o.InUse
}

// GetInUseOk returns a tuple with the InUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetInUseOk() (*bool, bool) {
	if o == nil || IsNil(o.InUse) {
		return nil, false
	}
	return o.InUse, true
}

// HasInUse returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasInUse() bool {
	if o != nil && !IsNil(o.InUse) {
		return true
	}

	return false
}

// SetInUse gets a reference to the given bool and assigns it to the InUse field.
func (o *BlockStatusCodeType) SetInUse(v bool) {
	o.InUse = &v
}

// GetLeadStatus returns the LeadStatus field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetLeadStatus() bool {
	if o == nil || IsNil(o.LeadStatus) {
		var ret bool
		return ret
	}
	return *o.LeadStatus
}

// GetLeadStatusOk returns a tuple with the LeadStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetLeadStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.LeadStatus) {
		return nil, false
	}
	return o.LeadStatus, true
}

// HasLeadStatus returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasLeadStatus() bool {
	if o != nil && !IsNil(o.LeadStatus) {
		return true
	}

	return false
}

// SetLeadStatus gets a reference to the given bool and assigns it to the LeadStatus field.
func (o *BlockStatusCodeType) SetLeadStatus(v bool) {
	o.LeadStatus = &v
}

// GetLogCatering returns the LogCatering field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetLogCatering() bool {
	if o == nil || IsNil(o.LogCatering) {
		var ret bool
		return ret
	}
	return *o.LogCatering
}

// GetLogCateringOk returns a tuple with the LogCatering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetLogCateringOk() (*bool, bool) {
	if o == nil || IsNil(o.LogCatering) {
		return nil, false
	}
	return o.LogCatering, true
}

// HasLogCatering returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasLogCatering() bool {
	if o != nil && !IsNil(o.LogCatering) {
		return true
	}

	return false
}

// SetLogCatering gets a reference to the given bool and assigns it to the LogCatering field.
func (o *BlockStatusCodeType) SetLogCatering(v bool) {
	o.LogCatering = &v
}

// GetOpportunity returns the Opportunity field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetOpportunity() bool {
	if o == nil || IsNil(o.Opportunity) {
		var ret bool
		return ret
	}
	return *o.Opportunity
}

// GetOpportunityOk returns a tuple with the Opportunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetOpportunityOk() (*bool, bool) {
	if o == nil || IsNil(o.Opportunity) {
		return nil, false
	}
	return o.Opportunity, true
}

// HasOpportunity returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasOpportunity() bool {
	if o != nil && !IsNil(o.Opportunity) {
		return true
	}

	return false
}

// SetOpportunity gets a reference to the given bool and assigns it to the Opportunity field.
func (o *BlockStatusCodeType) SetOpportunity(v bool) {
	o.Opportunity = &v
}

// GetOrderBy returns the OrderBy field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetOrderBy() int32 {
	if o == nil || IsNil(o.OrderBy) {
		var ret int32
		return ret
	}
	return *o.OrderBy
}

// GetOrderByOk returns a tuple with the OrderBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetOrderByOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderBy) {
		return nil, false
	}
	return o.OrderBy, true
}

// HasOrderBy returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasOrderBy() bool {
	if o != nil && !IsNil(o.OrderBy) {
		return true
	}

	return false
}

// SetOrderBy gets a reference to the given int32 and assigns it to the OrderBy field.
func (o *BlockStatusCodeType) SetOrderBy(v int32) {
	o.OrderBy = &v
}

// GetReasonType returns the ReasonType field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetReasonType() string {
	if o == nil || IsNil(o.ReasonType) {
		var ret string
		return ret
	}
	return *o.ReasonType
}

// GetReasonTypeOk returns a tuple with the ReasonType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetReasonTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonType) {
		return nil, false
	}
	return o.ReasonType, true
}

// HasReasonType returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasReasonType() bool {
	if o != nil && !IsNil(o.ReasonType) {
		return true
	}

	return false
}

// SetReasonType gets a reference to the given string and assigns it to the ReasonType field.
func (o *BlockStatusCodeType) SetReasonType(v string) {
	o.ReasonType = &v
}

// GetReturnToInventory returns the ReturnToInventory field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetReturnToInventory() bool {
	if o == nil || IsNil(o.ReturnToInventory) {
		var ret bool
		return ret
	}
	return *o.ReturnToInventory
}

// GetReturnToInventoryOk returns a tuple with the ReturnToInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetReturnToInventoryOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnToInventory) {
		return nil, false
	}
	return o.ReturnToInventory, true
}

// HasReturnToInventory returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasReturnToInventory() bool {
	if o != nil && !IsNil(o.ReturnToInventory) {
		return true
	}

	return false
}

// SetReturnToInventory gets a reference to the given bool and assigns it to the ReturnToInventory field.
func (o *BlockStatusCodeType) SetReturnToInventory(v bool) {
	o.ReturnToInventory = &v
}

// GetRoomStatusType returns the RoomStatusType field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetRoomStatusType() BlockStatusCodeStatusType {
	if o == nil || IsNil(o.RoomStatusType) {
		var ret BlockStatusCodeStatusType
		return ret
	}
	return *o.RoomStatusType
}

// GetRoomStatusTypeOk returns a tuple with the RoomStatusType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetRoomStatusTypeOk() (*BlockStatusCodeStatusType, bool) {
	if o == nil || IsNil(o.RoomStatusType) {
		return nil, false
	}
	return o.RoomStatusType, true
}

// HasRoomStatusType returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasRoomStatusType() bool {
	if o != nil && !IsNil(o.RoomStatusType) {
		return true
	}

	return false
}

// SetRoomStatusType gets a reference to the given BlockStatusCodeStatusType and assigns it to the RoomStatusType field.
func (o *BlockStatusCodeType) SetRoomStatusType(v BlockStatusCodeStatusType) {
	o.RoomStatusType = &v
}

// GetShowDiary returns the ShowDiary field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetShowDiary() bool {
	if o == nil || IsNil(o.ShowDiary) {
		var ret bool
		return ret
	}
	return *o.ShowDiary
}

// GetShowDiaryOk returns a tuple with the ShowDiary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetShowDiaryOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowDiary) {
		return nil, false
	}
	return o.ShowDiary, true
}

// HasShowDiary returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasShowDiary() bool {
	if o != nil && !IsNil(o.ShowDiary) {
		return true
	}

	return false
}

// SetShowDiary gets a reference to the given bool and assigns it to the ShowDiary field.
func (o *BlockStatusCodeType) SetShowDiary(v bool) {
	o.ShowDiary = &v
}

// GetStarting returns the Starting field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetStarting() bool {
	if o == nil || IsNil(o.Starting) {
		var ret bool
		return ret
	}
	return *o.Starting
}

// GetStartingOk returns a tuple with the Starting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetStartingOk() (*bool, bool) {
	if o == nil || IsNil(o.Starting) {
		return nil, false
	}
	return o.Starting, true
}

// HasStarting returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasStarting() bool {
	if o != nil && !IsNil(o.Starting) {
		return true
	}

	return false
}

// SetStarting gets a reference to the given bool and assigns it to the Starting field.
func (o *BlockStatusCodeType) SetStarting(v bool) {
	o.Starting = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BlockStatusCodeType) GetStatus() CodeDescriptionType {
	if o == nil || IsNil(o.Status) {
		var ret CodeDescriptionType
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockStatusCodeType) GetStatusOk() (*CodeDescriptionType, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BlockStatusCodeType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CodeDescriptionType and assigns it to the Status field.
func (o *BlockStatusCodeType) SetStatus(v CodeDescriptionType) {
	o.Status = &v
}

func (o BlockStatusCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockStatusCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowPickup) {
		toSerialize["allowPickup"] = o.AllowPickup
	}
	if !IsNil(o.CateringInUse) {
		toSerialize["cateringInUse"] = o.CateringInUse
	}
	if !IsNil(o.CateringStatusType) {
		toSerialize["cateringStatusType"] = o.CateringStatusType
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.DefaultReservationType) {
		toSerialize["defaultReservationType"] = o.DefaultReservationType
	}
	if !IsNil(o.InUse) {
		toSerialize["inUse"] = o.InUse
	}
	if !IsNil(o.LeadStatus) {
		toSerialize["leadStatus"] = o.LeadStatus
	}
	if !IsNil(o.LogCatering) {
		toSerialize["logCatering"] = o.LogCatering
	}
	if !IsNil(o.Opportunity) {
		toSerialize["opportunity"] = o.Opportunity
	}
	if !IsNil(o.OrderBy) {
		toSerialize["orderBy"] = o.OrderBy
	}
	if !IsNil(o.ReasonType) {
		toSerialize["reasonType"] = o.ReasonType
	}
	if !IsNil(o.ReturnToInventory) {
		toSerialize["returnToInventory"] = o.ReturnToInventory
	}
	if !IsNil(o.RoomStatusType) {
		toSerialize["roomStatusType"] = o.RoomStatusType
	}
	if !IsNil(o.ShowDiary) {
		toSerialize["showDiary"] = o.ShowDiary
	}
	if !IsNil(o.Starting) {
		toSerialize["starting"] = o.Starting
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableBlockStatusCodeType struct {
	value *BlockStatusCodeType
	isSet bool
}

func (v NullableBlockStatusCodeType) Get() *BlockStatusCodeType {
	return v.value
}

func (v *NullableBlockStatusCodeType) Set(val *BlockStatusCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStatusCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStatusCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStatusCodeType(val *BlockStatusCodeType) *NullableBlockStatusCodeType {
	return &NullableBlockStatusCodeType{value: val, isSet: true}
}

func (v NullableBlockStatusCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStatusCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


