/*
OPERA Cloud Block Configuration API

APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package blkcfg

import (
	"encoding/json"
)

// checks if the BlockSalesAllowanceRangeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockSalesAllowanceRangeType{}

// BlockSalesAllowanceRangeType Indicates the block sales allowance for a date range.
type BlockSalesAllowanceRangeType struct {
	// Number of days before sales allowance date, after which unused quantity should set to 0.
	CutoffDays *int32 `json:"cutoffDays,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
	Friday *bool `json:"friday,omitempty"`
	// Contains Hotel Code.
	HotelId *string `json:"hotelId,omitempty"`
	// Flag to indicate if the sales allowance update is absolute or relative to the current value.
	IncrementFlag *bool `json:"incrementFlag,omitempty"`
	Monday *bool `json:"monday,omitempty"`
	// Flag to indicate if the sales allowance already exists for criteria then overwrite the records.
	OverwriteExistingSalesAllowance *bool `json:"overwriteExistingSalesAllowance,omitempty"`
	// Contains quantity for sales allowance.
	Quantity *int32 `json:"quantity,omitempty"`
	Saturday *bool `json:"saturday,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	Sunday *bool `json:"sunday,omitempty"`
	Thursday *bool `json:"thursday,omitempty"`
	Tuesday *bool `json:"tuesday,omitempty"`
	// Flag to validate existing sales allowance records within criteria.
	ValidateExistingSalesAllowance *bool `json:"validateExistingSalesAllowance,omitempty"`
	Wednesday *bool `json:"wednesday,omitempty"`
}

// NewBlockSalesAllowanceRangeType instantiates a new BlockSalesAllowanceRangeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockSalesAllowanceRangeType() *BlockSalesAllowanceRangeType {
	this := BlockSalesAllowanceRangeType{}
	return &this
}

// NewBlockSalesAllowanceRangeTypeWithDefaults instantiates a new BlockSalesAllowanceRangeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockSalesAllowanceRangeTypeWithDefaults() *BlockSalesAllowanceRangeType {
	this := BlockSalesAllowanceRangeType{}
	return &this
}

// GetCutoffDays returns the CutoffDays field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetCutoffDays() int32 {
	if o == nil || IsNil(o.CutoffDays) {
		var ret int32
		return ret
	}
	return *o.CutoffDays
}

// GetCutoffDaysOk returns a tuple with the CutoffDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetCutoffDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.CutoffDays) {
		return nil, false
	}
	return o.CutoffDays, true
}

// HasCutoffDays returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasCutoffDays() bool {
	if o != nil && !IsNil(o.CutoffDays) {
		return true
	}

	return false
}

// SetCutoffDays gets a reference to the given int32 and assigns it to the CutoffDays field.
func (o *BlockSalesAllowanceRangeType) SetCutoffDays(v int32) {
	o.CutoffDays = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *BlockSalesAllowanceRangeType) SetEnd(v string) {
	o.End = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetFriday() bool {
	if o == nil || IsNil(o.Friday) {
		var ret bool
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetFridayOk() (*bool, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given bool and assigns it to the Friday field.
func (o *BlockSalesAllowanceRangeType) SetFriday(v bool) {
	o.Friday = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *BlockSalesAllowanceRangeType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetIncrementFlag returns the IncrementFlag field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetIncrementFlag() bool {
	if o == nil || IsNil(o.IncrementFlag) {
		var ret bool
		return ret
	}
	return *o.IncrementFlag
}

// GetIncrementFlagOk returns a tuple with the IncrementFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetIncrementFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.IncrementFlag) {
		return nil, false
	}
	return o.IncrementFlag, true
}

// HasIncrementFlag returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasIncrementFlag() bool {
	if o != nil && !IsNil(o.IncrementFlag) {
		return true
	}

	return false
}

// SetIncrementFlag gets a reference to the given bool and assigns it to the IncrementFlag field.
func (o *BlockSalesAllowanceRangeType) SetIncrementFlag(v bool) {
	o.IncrementFlag = &v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetMonday() bool {
	if o == nil || IsNil(o.Monday) {
		var ret bool
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetMondayOk() (*bool, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given bool and assigns it to the Monday field.
func (o *BlockSalesAllowanceRangeType) SetMonday(v bool) {
	o.Monday = &v
}

// GetOverwriteExistingSalesAllowance returns the OverwriteExistingSalesAllowance field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetOverwriteExistingSalesAllowance() bool {
	if o == nil || IsNil(o.OverwriteExistingSalesAllowance) {
		var ret bool
		return ret
	}
	return *o.OverwriteExistingSalesAllowance
}

// GetOverwriteExistingSalesAllowanceOk returns a tuple with the OverwriteExistingSalesAllowance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetOverwriteExistingSalesAllowanceOk() (*bool, bool) {
	if o == nil || IsNil(o.OverwriteExistingSalesAllowance) {
		return nil, false
	}
	return o.OverwriteExistingSalesAllowance, true
}

// HasOverwriteExistingSalesAllowance returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasOverwriteExistingSalesAllowance() bool {
	if o != nil && !IsNil(o.OverwriteExistingSalesAllowance) {
		return true
	}

	return false
}

// SetOverwriteExistingSalesAllowance gets a reference to the given bool and assigns it to the OverwriteExistingSalesAllowance field.
func (o *BlockSalesAllowanceRangeType) SetOverwriteExistingSalesAllowance(v bool) {
	o.OverwriteExistingSalesAllowance = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *BlockSalesAllowanceRangeType) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetSaturday() bool {
	if o == nil || IsNil(o.Saturday) {
		var ret bool
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetSaturdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given bool and assigns it to the Saturday field.
func (o *BlockSalesAllowanceRangeType) SetSaturday(v bool) {
	o.Saturday = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *BlockSalesAllowanceRangeType) SetStart(v string) {
	o.Start = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetSunday() bool {
	if o == nil || IsNil(o.Sunday) {
		var ret bool
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetSundayOk() (*bool, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given bool and assigns it to the Sunday field.
func (o *BlockSalesAllowanceRangeType) SetSunday(v bool) {
	o.Sunday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetThursday() bool {
	if o == nil || IsNil(o.Thursday) {
		var ret bool
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetThursdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given bool and assigns it to the Thursday field.
func (o *BlockSalesAllowanceRangeType) SetThursday(v bool) {
	o.Thursday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetTuesday() bool {
	if o == nil || IsNil(o.Tuesday) {
		var ret bool
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetTuesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given bool and assigns it to the Tuesday field.
func (o *BlockSalesAllowanceRangeType) SetTuesday(v bool) {
	o.Tuesday = &v
}

// GetValidateExistingSalesAllowance returns the ValidateExistingSalesAllowance field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetValidateExistingSalesAllowance() bool {
	if o == nil || IsNil(o.ValidateExistingSalesAllowance) {
		var ret bool
		return ret
	}
	return *o.ValidateExistingSalesAllowance
}

// GetValidateExistingSalesAllowanceOk returns a tuple with the ValidateExistingSalesAllowance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetValidateExistingSalesAllowanceOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateExistingSalesAllowance) {
		return nil, false
	}
	return o.ValidateExistingSalesAllowance, true
}

// HasValidateExistingSalesAllowance returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasValidateExistingSalesAllowance() bool {
	if o != nil && !IsNil(o.ValidateExistingSalesAllowance) {
		return true
	}

	return false
}

// SetValidateExistingSalesAllowance gets a reference to the given bool and assigns it to the ValidateExistingSalesAllowance field.
func (o *BlockSalesAllowanceRangeType) SetValidateExistingSalesAllowance(v bool) {
	o.ValidateExistingSalesAllowance = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *BlockSalesAllowanceRangeType) GetWednesday() bool {
	if o == nil || IsNil(o.Wednesday) {
		var ret bool
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockSalesAllowanceRangeType) GetWednesdayOk() (*bool, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *BlockSalesAllowanceRangeType) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given bool and assigns it to the Wednesday field.
func (o *BlockSalesAllowanceRangeType) SetWednesday(v bool) {
	o.Wednesday = &v
}

func (o BlockSalesAllowanceRangeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockSalesAllowanceRangeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CutoffDays) {
		toSerialize["cutoffDays"] = o.CutoffDays
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.IncrementFlag) {
		toSerialize["incrementFlag"] = o.IncrementFlag
	}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.OverwriteExistingSalesAllowance) {
		toSerialize["overwriteExistingSalesAllowance"] = o.OverwriteExistingSalesAllowance
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.ValidateExistingSalesAllowance) {
		toSerialize["validateExistingSalesAllowance"] = o.ValidateExistingSalesAllowance
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}
	return toSerialize, nil
}

type NullableBlockSalesAllowanceRangeType struct {
	value *BlockSalesAllowanceRangeType
	isSet bool
}

func (v NullableBlockSalesAllowanceRangeType) Get() *BlockSalesAllowanceRangeType {
	return v.value
}

func (v *NullableBlockSalesAllowanceRangeType) Set(val *BlockSalesAllowanceRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockSalesAllowanceRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockSalesAllowanceRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockSalesAllowanceRangeType(val *BlockSalesAllowanceRangeType) *NullableBlockSalesAllowanceRangeType {
	return &NullableBlockSalesAllowanceRangeType{value: val, isSet: true}
}

func (v NullableBlockSalesAllowanceRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockSalesAllowanceRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


