/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ImageSetType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageSetType{}

// ImageSetType Represents on image set record.
type ImageSetType struct {
	// Language identification.
	Language *string `json:"language,omitempty"`
	// The image set name.
	ImageSet *string `json:"imageSet,omitempty"`
	ImageStyle *ImageStyleType `json:"imageStyle,omitempty"`
	// The image set hotel code.
	HotelId *string `json:"hotelId,omitempty"`
	// The image set URL.
	ImageURL *string `json:"imageURL,omitempty"`
	// The image set description.
	Description *string `json:"description,omitempty"`
}

// NewImageSetType instantiates a new ImageSetType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageSetType() *ImageSetType {
	this := ImageSetType{}
	return &this
}

// NewImageSetTypeWithDefaults instantiates a new ImageSetType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageSetTypeWithDefaults() *ImageSetType {
	this := ImageSetType{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ImageSetType) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageSetType) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ImageSetType) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ImageSetType) SetLanguage(v string) {
	o.Language = &v
}

// GetImageSet returns the ImageSet field value if set, zero value otherwise.
func (o *ImageSetType) GetImageSet() string {
	if o == nil || IsNil(o.ImageSet) {
		var ret string
		return ret
	}
	return *o.ImageSet
}

// GetImageSetOk returns a tuple with the ImageSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageSetType) GetImageSetOk() (*string, bool) {
	if o == nil || IsNil(o.ImageSet) {
		return nil, false
	}
	return o.ImageSet, true
}

// HasImageSet returns a boolean if a field has been set.
func (o *ImageSetType) HasImageSet() bool {
	if o != nil && !IsNil(o.ImageSet) {
		return true
	}

	return false
}

// SetImageSet gets a reference to the given string and assigns it to the ImageSet field.
func (o *ImageSetType) SetImageSet(v string) {
	o.ImageSet = &v
}

// GetImageStyle returns the ImageStyle field value if set, zero value otherwise.
func (o *ImageSetType) GetImageStyle() ImageStyleType {
	if o == nil || IsNil(o.ImageStyle) {
		var ret ImageStyleType
		return ret
	}
	return *o.ImageStyle
}

// GetImageStyleOk returns a tuple with the ImageStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageSetType) GetImageStyleOk() (*ImageStyleType, bool) {
	if o == nil || IsNil(o.ImageStyle) {
		return nil, false
	}
	return o.ImageStyle, true
}

// HasImageStyle returns a boolean if a field has been set.
func (o *ImageSetType) HasImageStyle() bool {
	if o != nil && !IsNil(o.ImageStyle) {
		return true
	}

	return false
}

// SetImageStyle gets a reference to the given ImageStyleType and assigns it to the ImageStyle field.
func (o *ImageSetType) SetImageStyle(v ImageStyleType) {
	o.ImageStyle = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *ImageSetType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageSetType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *ImageSetType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *ImageSetType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetImageURL returns the ImageURL field value if set, zero value otherwise.
func (o *ImageSetType) GetImageURL() string {
	if o == nil || IsNil(o.ImageURL) {
		var ret string
		return ret
	}
	return *o.ImageURL
}

// GetImageURLOk returns a tuple with the ImageURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageSetType) GetImageURLOk() (*string, bool) {
	if o == nil || IsNil(o.ImageURL) {
		return nil, false
	}
	return o.ImageURL, true
}

// HasImageURL returns a boolean if a field has been set.
func (o *ImageSetType) HasImageURL() bool {
	if o != nil && !IsNil(o.ImageURL) {
		return true
	}

	return false
}

// SetImageURL gets a reference to the given string and assigns it to the ImageURL field.
func (o *ImageSetType) SetImageURL(v string) {
	o.ImageURL = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ImageSetType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageSetType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ImageSetType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ImageSetType) SetDescription(v string) {
	o.Description = &v
}

func (o ImageSetType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageSetType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.ImageSet) {
		toSerialize["imageSet"] = o.ImageSet
	}
	if !IsNil(o.ImageStyle) {
		toSerialize["imageStyle"] = o.ImageStyle
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.ImageURL) {
		toSerialize["imageURL"] = o.ImageURL
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableImageSetType struct {
	value *ImageSetType
	isSet bool
}

func (v NullableImageSetType) Get() *ImageSetType {
	return v.value
}

func (v *NullableImageSetType) Set(val *ImageSetType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageSetType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageSetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageSetType(val *ImageSetType) *NullableImageSetType {
	return &NullableImageSetType{value: val, isSet: true}
}

func (v NullableImageSetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageSetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


