/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the PayeeInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayeeInfoType{}

// PayeeInfoType Payee information.
type PayeeInfoType struct {
	PayeeId *UniqueIDType `json:"payeeId,omitempty"`
	// Name of the payee.
	PayeeName *string `json:"payeeName,omitempty"`
}

// NewPayeeInfoType instantiates a new PayeeInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayeeInfoType() *PayeeInfoType {
	this := PayeeInfoType{}
	return &this
}

// NewPayeeInfoTypeWithDefaults instantiates a new PayeeInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayeeInfoTypeWithDefaults() *PayeeInfoType {
	this := PayeeInfoType{}
	return &this
}

// GetPayeeId returns the PayeeId field value if set, zero value otherwise.
func (o *PayeeInfoType) GetPayeeId() UniqueIDType {
	if o == nil || IsNil(o.PayeeId) {
		var ret UniqueIDType
		return ret
	}
	return *o.PayeeId
}

// GetPayeeIdOk returns a tuple with the PayeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayeeInfoType) GetPayeeIdOk() (*UniqueIDType, bool) {
	if o == nil || IsNil(o.PayeeId) {
		return nil, false
	}
	return o.PayeeId, true
}

// HasPayeeId returns a boolean if a field has been set.
func (o *PayeeInfoType) HasPayeeId() bool {
	if o != nil && !IsNil(o.PayeeId) {
		return true
	}

	return false
}

// SetPayeeId gets a reference to the given UniqueIDType and assigns it to the PayeeId field.
func (o *PayeeInfoType) SetPayeeId(v UniqueIDType) {
	o.PayeeId = &v
}

// GetPayeeName returns the PayeeName field value if set, zero value otherwise.
func (o *PayeeInfoType) GetPayeeName() string {
	if o == nil || IsNil(o.PayeeName) {
		var ret string
		return ret
	}
	return *o.PayeeName
}

// GetPayeeNameOk returns a tuple with the PayeeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayeeInfoType) GetPayeeNameOk() (*string, bool) {
	if o == nil || IsNil(o.PayeeName) {
		return nil, false
	}
	return o.PayeeName, true
}

// HasPayeeName returns a boolean if a field has been set.
func (o *PayeeInfoType) HasPayeeName() bool {
	if o != nil && !IsNil(o.PayeeName) {
		return true
	}

	return false
}

// SetPayeeName gets a reference to the given string and assigns it to the PayeeName field.
func (o *PayeeInfoType) SetPayeeName(v string) {
	o.PayeeName = &v
}

func (o PayeeInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayeeInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PayeeId) {
		toSerialize["payeeId"] = o.PayeeId
	}
	if !IsNil(o.PayeeName) {
		toSerialize["payeeName"] = o.PayeeName
	}
	return toSerialize, nil
}

type NullablePayeeInfoType struct {
	value *PayeeInfoType
	isSet bool
}

func (v NullablePayeeInfoType) Get() *PayeeInfoType {
	return v.value
}

func (v *NullablePayeeInfoType) Set(val *PayeeInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullablePayeeInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullablePayeeInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayeeInfoType(val *PayeeInfoType) *NullablePayeeInfoType {
	return &NullablePayeeInfoType{value: val, isSet: true}
}

func (v NullablePayeeInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayeeInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


