/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the FiscalInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FiscalInfoType{}

// FiscalInfoType Fiscal related information for a reservation.
type FiscalInfoType struct {
	// Fiscal partner code.
	PartnerCode *string `json:"partnerCode,omitempty"`
	// OPERA Fiscal status.
	FiscalStatus *string `json:"fiscalStatus,omitempty"`
	FiscalPayloadType *PayloadType `json:"fiscalPayloadType,omitempty"`
}

// NewFiscalInfoType instantiates a new FiscalInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiscalInfoType() *FiscalInfoType {
	this := FiscalInfoType{}
	return &this
}

// NewFiscalInfoTypeWithDefaults instantiates a new FiscalInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiscalInfoTypeWithDefaults() *FiscalInfoType {
	this := FiscalInfoType{}
	return &this
}

// GetPartnerCode returns the PartnerCode field value if set, zero value otherwise.
func (o *FiscalInfoType) GetPartnerCode() string {
	if o == nil || IsNil(o.PartnerCode) {
		var ret string
		return ret
	}
	return *o.PartnerCode
}

// GetPartnerCodeOk returns a tuple with the PartnerCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalInfoType) GetPartnerCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerCode) {
		return nil, false
	}
	return o.PartnerCode, true
}

// HasPartnerCode returns a boolean if a field has been set.
func (o *FiscalInfoType) HasPartnerCode() bool {
	if o != nil && !IsNil(o.PartnerCode) {
		return true
	}

	return false
}

// SetPartnerCode gets a reference to the given string and assigns it to the PartnerCode field.
func (o *FiscalInfoType) SetPartnerCode(v string) {
	o.PartnerCode = &v
}

// GetFiscalStatus returns the FiscalStatus field value if set, zero value otherwise.
func (o *FiscalInfoType) GetFiscalStatus() string {
	if o == nil || IsNil(o.FiscalStatus) {
		var ret string
		return ret
	}
	return *o.FiscalStatus
}

// GetFiscalStatusOk returns a tuple with the FiscalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalInfoType) GetFiscalStatusOk() (*string, bool) {
	if o == nil || IsNil(o.FiscalStatus) {
		return nil, false
	}
	return o.FiscalStatus, true
}

// HasFiscalStatus returns a boolean if a field has been set.
func (o *FiscalInfoType) HasFiscalStatus() bool {
	if o != nil && !IsNil(o.FiscalStatus) {
		return true
	}

	return false
}

// SetFiscalStatus gets a reference to the given string and assigns it to the FiscalStatus field.
func (o *FiscalInfoType) SetFiscalStatus(v string) {
	o.FiscalStatus = &v
}

// GetFiscalPayloadType returns the FiscalPayloadType field value if set, zero value otherwise.
func (o *FiscalInfoType) GetFiscalPayloadType() PayloadType {
	if o == nil || IsNil(o.FiscalPayloadType) {
		var ret PayloadType
		return ret
	}
	return *o.FiscalPayloadType
}

// GetFiscalPayloadTypeOk returns a tuple with the FiscalPayloadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiscalInfoType) GetFiscalPayloadTypeOk() (*PayloadType, bool) {
	if o == nil || IsNil(o.FiscalPayloadType) {
		return nil, false
	}
	return o.FiscalPayloadType, true
}

// HasFiscalPayloadType returns a boolean if a field has been set.
func (o *FiscalInfoType) HasFiscalPayloadType() bool {
	if o != nil && !IsNil(o.FiscalPayloadType) {
		return true
	}

	return false
}

// SetFiscalPayloadType gets a reference to the given PayloadType and assigns it to the FiscalPayloadType field.
func (o *FiscalInfoType) SetFiscalPayloadType(v PayloadType) {
	o.FiscalPayloadType = &v
}

func (o FiscalInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FiscalInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PartnerCode) {
		toSerialize["partnerCode"] = o.PartnerCode
	}
	if !IsNil(o.FiscalStatus) {
		toSerialize["fiscalStatus"] = o.FiscalStatus
	}
	if !IsNil(o.FiscalPayloadType) {
		toSerialize["fiscalPayloadType"] = o.FiscalPayloadType
	}
	return toSerialize, nil
}

type NullableFiscalInfoType struct {
	value *FiscalInfoType
	isSet bool
}

func (v NullableFiscalInfoType) Get() *FiscalInfoType {
	return v.value
}

func (v *NullableFiscalInfoType) Set(val *FiscalInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableFiscalInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableFiscalInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiscalInfoType(val *FiscalInfoType) *NullableFiscalInfoType {
	return &NullableFiscalInfoType{value: val, isSet: true}
}

func (v NullableFiscalInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiscalInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


