/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the StatisticCodeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatisticCodeType{}

// StatisticCodeType Defines the codes and corresponding categories for which the data in the other elements has been gathered.
type StatisticCodeType struct {
	// Statistic code description.
	Description *string `json:"description,omitempty"`
	// Category Code category of StatCode attribute (e.g. Market Segment).
	StatCategoryCode *string `json:"statCategoryCode,omitempty"`
	// Actual code used by the system to collect the statistics (e.g. CORP, RACK if category is Market Segment).
	StatCode *string `json:"statCode,omitempty"`
	// Class grouping of StatCode attribute.
	StatCodeClass *string `json:"statCodeClass,omitempty"`
	// Collection of statistic summary data.
	StatisticSetsType []StatisticSetType `json:"statisticSetsType,omitempty"`
}

// NewStatisticCodeType instantiates a new StatisticCodeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatisticCodeType() *StatisticCodeType {
	this := StatisticCodeType{}
	return &this
}

// NewStatisticCodeTypeWithDefaults instantiates a new StatisticCodeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticCodeTypeWithDefaults() *StatisticCodeType {
	this := StatisticCodeType{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StatisticCodeType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticCodeType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StatisticCodeType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StatisticCodeType) SetDescription(v string) {
	o.Description = &v
}

// GetStatCategoryCode returns the StatCategoryCode field value if set, zero value otherwise.
func (o *StatisticCodeType) GetStatCategoryCode() string {
	if o == nil || IsNil(o.StatCategoryCode) {
		var ret string
		return ret
	}
	return *o.StatCategoryCode
}

// GetStatCategoryCodeOk returns a tuple with the StatCategoryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticCodeType) GetStatCategoryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatCategoryCode) {
		return nil, false
	}
	return o.StatCategoryCode, true
}

// HasStatCategoryCode returns a boolean if a field has been set.
func (o *StatisticCodeType) HasStatCategoryCode() bool {
	if o != nil && !IsNil(o.StatCategoryCode) {
		return true
	}

	return false
}

// SetStatCategoryCode gets a reference to the given string and assigns it to the StatCategoryCode field.
func (o *StatisticCodeType) SetStatCategoryCode(v string) {
	o.StatCategoryCode = &v
}

// GetStatCode returns the StatCode field value if set, zero value otherwise.
func (o *StatisticCodeType) GetStatCode() string {
	if o == nil || IsNil(o.StatCode) {
		var ret string
		return ret
	}
	return *o.StatCode
}

// GetStatCodeOk returns a tuple with the StatCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticCodeType) GetStatCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StatCode) {
		return nil, false
	}
	return o.StatCode, true
}

// HasStatCode returns a boolean if a field has been set.
func (o *StatisticCodeType) HasStatCode() bool {
	if o != nil && !IsNil(o.StatCode) {
		return true
	}

	return false
}

// SetStatCode gets a reference to the given string and assigns it to the StatCode field.
func (o *StatisticCodeType) SetStatCode(v string) {
	o.StatCode = &v
}

// GetStatCodeClass returns the StatCodeClass field value if set, zero value otherwise.
func (o *StatisticCodeType) GetStatCodeClass() string {
	if o == nil || IsNil(o.StatCodeClass) {
		var ret string
		return ret
	}
	return *o.StatCodeClass
}

// GetStatCodeClassOk returns a tuple with the StatCodeClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticCodeType) GetStatCodeClassOk() (*string, bool) {
	if o == nil || IsNil(o.StatCodeClass) {
		return nil, false
	}
	return o.StatCodeClass, true
}

// HasStatCodeClass returns a boolean if a field has been set.
func (o *StatisticCodeType) HasStatCodeClass() bool {
	if o != nil && !IsNil(o.StatCodeClass) {
		return true
	}

	return false
}

// SetStatCodeClass gets a reference to the given string and assigns it to the StatCodeClass field.
func (o *StatisticCodeType) SetStatCodeClass(v string) {
	o.StatCodeClass = &v
}

// GetStatisticSetsType returns the StatisticSetsType field value if set, zero value otherwise.
func (o *StatisticCodeType) GetStatisticSetsType() []StatisticSetType {
	if o == nil || IsNil(o.StatisticSetsType) {
		var ret []StatisticSetType
		return ret
	}
	return o.StatisticSetsType
}

// GetStatisticSetsTypeOk returns a tuple with the StatisticSetsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatisticCodeType) GetStatisticSetsTypeOk() ([]StatisticSetType, bool) {
	if o == nil || IsNil(o.StatisticSetsType) {
		return nil, false
	}
	return o.StatisticSetsType, true
}

// HasStatisticSetsType returns a boolean if a field has been set.
func (o *StatisticCodeType) HasStatisticSetsType() bool {
	if o != nil && !IsNil(o.StatisticSetsType) {
		return true
	}

	return false
}

// SetStatisticSetsType gets a reference to the given []StatisticSetType and assigns it to the StatisticSetsType field.
func (o *StatisticCodeType) SetStatisticSetsType(v []StatisticSetType) {
	o.StatisticSetsType = v
}

func (o StatisticCodeType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatisticCodeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.StatCategoryCode) {
		toSerialize["statCategoryCode"] = o.StatCategoryCode
	}
	if !IsNil(o.StatCode) {
		toSerialize["statCode"] = o.StatCode
	}
	if !IsNil(o.StatCodeClass) {
		toSerialize["statCodeClass"] = o.StatCodeClass
	}
	if !IsNil(o.StatisticSetsType) {
		toSerialize["statisticSetsType"] = o.StatisticSetsType
	}
	return toSerialize, nil
}

type NullableStatisticCodeType struct {
	value *StatisticCodeType
	isSet bool
}

func (v NullableStatisticCodeType) Get() *StatisticCodeType {
	return v.value
}

func (v *NullableStatisticCodeType) Set(val *StatisticCodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableStatisticCodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableStatisticCodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatisticCodeType(val *StatisticCodeType) *NullableStatisticCodeType {
	return &NullableStatisticCodeType{value: val, isSet: true}
}

func (v NullableStatisticCodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatisticCodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


