/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the LastStayInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LastStayInfoType{}

// LastStayInfoType Contains last stay related details for the profile
type LastStayInfoType struct {
	// Used to hold last room information for the profile.
	LastRoom *string `json:"lastRoom,omitempty"`
	// The total number of previous stay of the profile.
	TotalStay *int32 `json:"totalStay,omitempty"`
}

// NewLastStayInfoType instantiates a new LastStayInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLastStayInfoType() *LastStayInfoType {
	this := LastStayInfoType{}
	return &this
}

// NewLastStayInfoTypeWithDefaults instantiates a new LastStayInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLastStayInfoTypeWithDefaults() *LastStayInfoType {
	this := LastStayInfoType{}
	return &this
}

// GetLastRoom returns the LastRoom field value if set, zero value otherwise.
func (o *LastStayInfoType) GetLastRoom() string {
	if o == nil || IsNil(o.LastRoom) {
		var ret string
		return ret
	}
	return *o.LastRoom
}

// GetLastRoomOk returns a tuple with the LastRoom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LastStayInfoType) GetLastRoomOk() (*string, bool) {
	if o == nil || IsNil(o.LastRoom) {
		return nil, false
	}
	return o.LastRoom, true
}

// HasLastRoom returns a boolean if a field has been set.
func (o *LastStayInfoType) HasLastRoom() bool {
	if o != nil && !IsNil(o.LastRoom) {
		return true
	}

	return false
}

// SetLastRoom gets a reference to the given string and assigns it to the LastRoom field.
func (o *LastStayInfoType) SetLastRoom(v string) {
	o.LastRoom = &v
}

// GetTotalStay returns the TotalStay field value if set, zero value otherwise.
func (o *LastStayInfoType) GetTotalStay() int32 {
	if o == nil || IsNil(o.TotalStay) {
		var ret int32
		return ret
	}
	return *o.TotalStay
}

// GetTotalStayOk returns a tuple with the TotalStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LastStayInfoType) GetTotalStayOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalStay) {
		return nil, false
	}
	return o.TotalStay, true
}

// HasTotalStay returns a boolean if a field has been set.
func (o *LastStayInfoType) HasTotalStay() bool {
	if o != nil && !IsNil(o.TotalStay) {
		return true
	}

	return false
}

// SetTotalStay gets a reference to the given int32 and assigns it to the TotalStay field.
func (o *LastStayInfoType) SetTotalStay(v int32) {
	o.TotalStay = &v
}

func (o LastStayInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LastStayInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastRoom) {
		toSerialize["lastRoom"] = o.LastRoom
	}
	if !IsNil(o.TotalStay) {
		toSerialize["totalStay"] = o.TotalStay
	}
	return toSerialize, nil
}

type NullableLastStayInfoType struct {
	value *LastStayInfoType
	isSet bool
}

func (v NullableLastStayInfoType) Get() *LastStayInfoType {
	return v.value
}

func (v *NullableLastStayInfoType) Set(val *LastStayInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableLastStayInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableLastStayInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLastStayInfoType(val *LastStayInfoType) *NullableLastStayInfoType {
	return &NullableLastStayInfoType{value: val, isSet: true}
}

func (v NullableLastStayInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLastStayInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


