/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationMembershipAwardType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationMembershipAwardType{}

// ReservationMembershipAwardType This type contains information of a membership award attached to a reservation.
type ReservationMembershipAwardType struct {
	// The number of points actually deducted from the member's total award points if there is a penalty points restriction associated with the award cancellation.
	ActualCancelPoints *float32 `json:"actualCancelPoints,omitempty"`
	// The arrival date of the stay for when the award is associated.
	ArrivalDate *string `json:"arrivalDate,omitempty"`
	// Indicates if the Award is based on RATE, PRODUCT or UPGRADE.
	AwardBasedOn *string `json:"awardBasedOn,omitempty"`
	// If the reservation associated with the award was cancelled, the reservation cancellation date appears here.
	AwardCancelDate *string `json:"awardCancelDate,omitempty"`
	// Unique ID for the award cancellation if cancelled.
	AwardCancellationNo *float32 `json:"awardCancellationNo,omitempty"`
	// Unique code that identifies this award.
	AwardType *string `json:"awardType,omitempty"`
	// The cancel days, set up in awards configuration that establishes the number of days before arrival when a reservation may be cancelled without an award points penalty.
	CancelPenaltyDays *float32 `json:"cancelPenaltyDays,omitempty"`
	// The award points that will be deducted (based on a cancel days restriction) if the award is cancelled. (Cancel days, set up in awards configuration, and establish the number of days before arrival when a reservation may be cancelled without an award points penalty).
	CancelPenaltyPoints *float32 `json:"cancelPenaltyPoints,omitempty"`
	// Date when the award was issued.
	DateAwarded *string `json:"dateAwarded,omitempty"`
	// The card number associated with this membership.
	MembershipCardNo *string `json:"membershipCardNo,omitempty"`
	// Membership type for which awards are defined.
	MembershipType *string `json:"membershipType,omitempty"`
	// Name to be displayed on the membership card.
	NameOnCard *string `json:"nameOnCard,omitempty"`
	// Number of points required for the award.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
}

// NewReservationMembershipAwardType instantiates a new ReservationMembershipAwardType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationMembershipAwardType() *ReservationMembershipAwardType {
	this := ReservationMembershipAwardType{}
	return &this
}

// NewReservationMembershipAwardTypeWithDefaults instantiates a new ReservationMembershipAwardType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationMembershipAwardTypeWithDefaults() *ReservationMembershipAwardType {
	this := ReservationMembershipAwardType{}
	return &this
}

// GetActualCancelPoints returns the ActualCancelPoints field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetActualCancelPoints() float32 {
	if o == nil || IsNil(o.ActualCancelPoints) {
		var ret float32
		return ret
	}
	return *o.ActualCancelPoints
}

// GetActualCancelPointsOk returns a tuple with the ActualCancelPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetActualCancelPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.ActualCancelPoints) {
		return nil, false
	}
	return o.ActualCancelPoints, true
}

// HasActualCancelPoints returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasActualCancelPoints() bool {
	if o != nil && !IsNil(o.ActualCancelPoints) {
		return true
	}

	return false
}

// SetActualCancelPoints gets a reference to the given float32 and assigns it to the ActualCancelPoints field.
func (o *ReservationMembershipAwardType) SetActualCancelPoints(v float32) {
	o.ActualCancelPoints = &v
}

// GetArrivalDate returns the ArrivalDate field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetArrivalDate() string {
	if o == nil || IsNil(o.ArrivalDate) {
		var ret string
		return ret
	}
	return *o.ArrivalDate
}

// GetArrivalDateOk returns a tuple with the ArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetArrivalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalDate) {
		return nil, false
	}
	return o.ArrivalDate, true
}

// HasArrivalDate returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasArrivalDate() bool {
	if o != nil && !IsNil(o.ArrivalDate) {
		return true
	}

	return false
}

// SetArrivalDate gets a reference to the given string and assigns it to the ArrivalDate field.
func (o *ReservationMembershipAwardType) SetArrivalDate(v string) {
	o.ArrivalDate = &v
}

// GetAwardBasedOn returns the AwardBasedOn field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetAwardBasedOn() string {
	if o == nil || IsNil(o.AwardBasedOn) {
		var ret string
		return ret
	}
	return *o.AwardBasedOn
}

// GetAwardBasedOnOk returns a tuple with the AwardBasedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetAwardBasedOnOk() (*string, bool) {
	if o == nil || IsNil(o.AwardBasedOn) {
		return nil, false
	}
	return o.AwardBasedOn, true
}

// HasAwardBasedOn returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasAwardBasedOn() bool {
	if o != nil && !IsNil(o.AwardBasedOn) {
		return true
	}

	return false
}

// SetAwardBasedOn gets a reference to the given string and assigns it to the AwardBasedOn field.
func (o *ReservationMembershipAwardType) SetAwardBasedOn(v string) {
	o.AwardBasedOn = &v
}

// GetAwardCancelDate returns the AwardCancelDate field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetAwardCancelDate() string {
	if o == nil || IsNil(o.AwardCancelDate) {
		var ret string
		return ret
	}
	return *o.AwardCancelDate
}

// GetAwardCancelDateOk returns a tuple with the AwardCancelDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetAwardCancelDateOk() (*string, bool) {
	if o == nil || IsNil(o.AwardCancelDate) {
		return nil, false
	}
	return o.AwardCancelDate, true
}

// HasAwardCancelDate returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasAwardCancelDate() bool {
	if o != nil && !IsNil(o.AwardCancelDate) {
		return true
	}

	return false
}

// SetAwardCancelDate gets a reference to the given string and assigns it to the AwardCancelDate field.
func (o *ReservationMembershipAwardType) SetAwardCancelDate(v string) {
	o.AwardCancelDate = &v
}

// GetAwardCancellationNo returns the AwardCancellationNo field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetAwardCancellationNo() float32 {
	if o == nil || IsNil(o.AwardCancellationNo) {
		var ret float32
		return ret
	}
	return *o.AwardCancellationNo
}

// GetAwardCancellationNoOk returns a tuple with the AwardCancellationNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetAwardCancellationNoOk() (*float32, bool) {
	if o == nil || IsNil(o.AwardCancellationNo) {
		return nil, false
	}
	return o.AwardCancellationNo, true
}

// HasAwardCancellationNo returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasAwardCancellationNo() bool {
	if o != nil && !IsNil(o.AwardCancellationNo) {
		return true
	}

	return false
}

// SetAwardCancellationNo gets a reference to the given float32 and assigns it to the AwardCancellationNo field.
func (o *ReservationMembershipAwardType) SetAwardCancellationNo(v float32) {
	o.AwardCancellationNo = &v
}

// GetAwardType returns the AwardType field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetAwardType() string {
	if o == nil || IsNil(o.AwardType) {
		var ret string
		return ret
	}
	return *o.AwardType
}

// GetAwardTypeOk returns a tuple with the AwardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetAwardTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AwardType) {
		return nil, false
	}
	return o.AwardType, true
}

// HasAwardType returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasAwardType() bool {
	if o != nil && !IsNil(o.AwardType) {
		return true
	}

	return false
}

// SetAwardType gets a reference to the given string and assigns it to the AwardType field.
func (o *ReservationMembershipAwardType) SetAwardType(v string) {
	o.AwardType = &v
}

// GetCancelPenaltyDays returns the CancelPenaltyDays field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetCancelPenaltyDays() float32 {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyDays
}

// GetCancelPenaltyDaysOk returns a tuple with the CancelPenaltyDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetCancelPenaltyDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyDays) {
		return nil, false
	}
	return o.CancelPenaltyDays, true
}

// HasCancelPenaltyDays returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasCancelPenaltyDays() bool {
	if o != nil && !IsNil(o.CancelPenaltyDays) {
		return true
	}

	return false
}

// SetCancelPenaltyDays gets a reference to the given float32 and assigns it to the CancelPenaltyDays field.
func (o *ReservationMembershipAwardType) SetCancelPenaltyDays(v float32) {
	o.CancelPenaltyDays = &v
}

// GetCancelPenaltyPoints returns the CancelPenaltyPoints field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetCancelPenaltyPoints() float32 {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		var ret float32
		return ret
	}
	return *o.CancelPenaltyPoints
}

// GetCancelPenaltyPointsOk returns a tuple with the CancelPenaltyPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetCancelPenaltyPointsOk() (*float32, bool) {
	if o == nil || IsNil(o.CancelPenaltyPoints) {
		return nil, false
	}
	return o.CancelPenaltyPoints, true
}

// HasCancelPenaltyPoints returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasCancelPenaltyPoints() bool {
	if o != nil && !IsNil(o.CancelPenaltyPoints) {
		return true
	}

	return false
}

// SetCancelPenaltyPoints gets a reference to the given float32 and assigns it to the CancelPenaltyPoints field.
func (o *ReservationMembershipAwardType) SetCancelPenaltyPoints(v float32) {
	o.CancelPenaltyPoints = &v
}

// GetDateAwarded returns the DateAwarded field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetDateAwarded() string {
	if o == nil || IsNil(o.DateAwarded) {
		var ret string
		return ret
	}
	return *o.DateAwarded
}

// GetDateAwardedOk returns a tuple with the DateAwarded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetDateAwardedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAwarded) {
		return nil, false
	}
	return o.DateAwarded, true
}

// HasDateAwarded returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasDateAwarded() bool {
	if o != nil && !IsNil(o.DateAwarded) {
		return true
	}

	return false
}

// SetDateAwarded gets a reference to the given string and assigns it to the DateAwarded field.
func (o *ReservationMembershipAwardType) SetDateAwarded(v string) {
	o.DateAwarded = &v
}

// GetMembershipCardNo returns the MembershipCardNo field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetMembershipCardNo() string {
	if o == nil || IsNil(o.MembershipCardNo) {
		var ret string
		return ret
	}
	return *o.MembershipCardNo
}

// GetMembershipCardNoOk returns a tuple with the MembershipCardNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetMembershipCardNoOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipCardNo) {
		return nil, false
	}
	return o.MembershipCardNo, true
}

// HasMembershipCardNo returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasMembershipCardNo() bool {
	if o != nil && !IsNil(o.MembershipCardNo) {
		return true
	}

	return false
}

// SetMembershipCardNo gets a reference to the given string and assigns it to the MembershipCardNo field.
func (o *ReservationMembershipAwardType) SetMembershipCardNo(v string) {
	o.MembershipCardNo = &v
}

// GetMembershipType returns the MembershipType field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetMembershipType() string {
	if o == nil || IsNil(o.MembershipType) {
		var ret string
		return ret
	}
	return *o.MembershipType
}

// GetMembershipTypeOk returns a tuple with the MembershipType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetMembershipTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipType) {
		return nil, false
	}
	return o.MembershipType, true
}

// HasMembershipType returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasMembershipType() bool {
	if o != nil && !IsNil(o.MembershipType) {
		return true
	}

	return false
}

// SetMembershipType gets a reference to the given string and assigns it to the MembershipType field.
func (o *ReservationMembershipAwardType) SetMembershipType(v string) {
	o.MembershipType = &v
}

// GetNameOnCard returns the NameOnCard field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetNameOnCard() string {
	if o == nil || IsNil(o.NameOnCard) {
		var ret string
		return ret
	}
	return *o.NameOnCard
}

// GetNameOnCardOk returns a tuple with the NameOnCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetNameOnCardOk() (*string, bool) {
	if o == nil || IsNil(o.NameOnCard) {
		return nil, false
	}
	return o.NameOnCard, true
}

// HasNameOnCard returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasNameOnCard() bool {
	if o != nil && !IsNil(o.NameOnCard) {
		return true
	}

	return false
}

// SetNameOnCard gets a reference to the given string and assigns it to the NameOnCard field.
func (o *ReservationMembershipAwardType) SetNameOnCard(v string) {
	o.NameOnCard = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *ReservationMembershipAwardType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationMembershipAwardType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *ReservationMembershipAwardType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *ReservationMembershipAwardType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

func (o ReservationMembershipAwardType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationMembershipAwardType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActualCancelPoints) {
		toSerialize["actualCancelPoints"] = o.ActualCancelPoints
	}
	if !IsNil(o.ArrivalDate) {
		toSerialize["arrivalDate"] = o.ArrivalDate
	}
	if !IsNil(o.AwardBasedOn) {
		toSerialize["awardBasedOn"] = o.AwardBasedOn
	}
	if !IsNil(o.AwardCancelDate) {
		toSerialize["awardCancelDate"] = o.AwardCancelDate
	}
	if !IsNil(o.AwardCancellationNo) {
		toSerialize["awardCancellationNo"] = o.AwardCancellationNo
	}
	if !IsNil(o.AwardType) {
		toSerialize["awardType"] = o.AwardType
	}
	if !IsNil(o.CancelPenaltyDays) {
		toSerialize["cancelPenaltyDays"] = o.CancelPenaltyDays
	}
	if !IsNil(o.CancelPenaltyPoints) {
		toSerialize["cancelPenaltyPoints"] = o.CancelPenaltyPoints
	}
	if !IsNil(o.DateAwarded) {
		toSerialize["dateAwarded"] = o.DateAwarded
	}
	if !IsNil(o.MembershipCardNo) {
		toSerialize["membershipCardNo"] = o.MembershipCardNo
	}
	if !IsNil(o.MembershipType) {
		toSerialize["membershipType"] = o.MembershipType
	}
	if !IsNil(o.NameOnCard) {
		toSerialize["nameOnCard"] = o.NameOnCard
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	return toSerialize, nil
}

type NullableReservationMembershipAwardType struct {
	value *ReservationMembershipAwardType
	isSet bool
}

func (v NullableReservationMembershipAwardType) Get() *ReservationMembershipAwardType {
	return v.value
}

func (v *NullableReservationMembershipAwardType) Set(val *ReservationMembershipAwardType) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationMembershipAwardType) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationMembershipAwardType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationMembershipAwardType(val *ReservationMembershipAwardType) *NullableReservationMembershipAwardType {
	return &NullableReservationMembershipAwardType{value: val, isSet: true}
}

func (v NullableReservationMembershipAwardType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationMembershipAwardType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


