/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the SellMessageConfigType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SellMessageConfigType{}

// SellMessageConfigType Only one of the following can hold a value: HotelCode, CROCode or ChainCode
type SellMessageConfigType struct {
	// Block Code to which the sell message is defined.
	BlockCode *string `json:"blockCode,omitempty"`
	BlockId *BlockId `json:"blockId,omitempty"`
	// Chain Code for which the sell message is defined.
	ChainCode *string `json:"chainCode,omitempty"`
	// CRO Code for which the sell message is defined.
	CroCode *string `json:"croCode,omitempty"`
	// Hotel Code for which the sell message is defined.
	HotelId *string `json:"hotelId,omitempty"`
	// A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
	Id *string `json:"id,omitempty"`
	// Used to identify the source of the identifier (e.g., IATA, ABTA).
	IdContext *string `json:"idContext,omitempty"`
	// Additional identifying value assigned by the creating system.
	IdExtension *int32 `json:"idExtension,omitempty"`
	// The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
	Instance *string `json:"instance,omitempty"`
	// Language in which the sell message is defined.
	LanguageCode *string `json:"languageCode,omitempty"`
	// Sell message text.
	Message *string `json:"message,omitempty"`
	// Rate Plan Code for which the sell message is defined.
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// Room type for which the sell message is defined.
	RoomType *string `json:"roomType,omitempty"`
	// This number indicates the display order of the sell message.
	SellSequence *float32 `json:"sellSequence,omitempty"`
	// Sticky flag is used to define if the sell message should display on the block screen by default.
	StickyFlag *bool `json:"stickyFlag,omitempty"`
	Timespan *TimeSpanType `json:"timespan,omitempty"`
	// A reference to the type of object defined by the UniqueID element.
	Type *string `json:"type,omitempty"`
	// URL that identifies the location associated with the record identified by the UniqueID.
	Url *string `json:"url,omitempty"`
	// This represents the moduleType where we want to display this SellMessage.
	UsedInModule []UsedInModuleType `json:"usedInModule,omitempty"`
}

// NewSellMessageConfigType instantiates a new SellMessageConfigType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSellMessageConfigType() *SellMessageConfigType {
	this := SellMessageConfigType{}
	return &this
}

// NewSellMessageConfigTypeWithDefaults instantiates a new SellMessageConfigType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellMessageConfigTypeWithDefaults() *SellMessageConfigType {
	this := SellMessageConfigType{}
	return &this
}

// GetBlockCode returns the BlockCode field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetBlockCode() string {
	if o == nil || IsNil(o.BlockCode) {
		var ret string
		return ret
	}
	return *o.BlockCode
}

// GetBlockCodeOk returns a tuple with the BlockCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetBlockCodeOk() (*string, bool) {
	if o == nil || IsNil(o.BlockCode) {
		return nil, false
	}
	return o.BlockCode, true
}

// HasBlockCode returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasBlockCode() bool {
	if o != nil && !IsNil(o.BlockCode) {
		return true
	}

	return false
}

// SetBlockCode gets a reference to the given string and assigns it to the BlockCode field.
func (o *SellMessageConfigType) SetBlockCode(v string) {
	o.BlockCode = &v
}

// GetBlockId returns the BlockId field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetBlockId() BlockId {
	if o == nil || IsNil(o.BlockId) {
		var ret BlockId
		return ret
	}
	return *o.BlockId
}

// GetBlockIdOk returns a tuple with the BlockId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetBlockIdOk() (*BlockId, bool) {
	if o == nil || IsNil(o.BlockId) {
		return nil, false
	}
	return o.BlockId, true
}

// HasBlockId returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasBlockId() bool {
	if o != nil && !IsNil(o.BlockId) {
		return true
	}

	return false
}

// SetBlockId gets a reference to the given BlockId and assigns it to the BlockId field.
func (o *SellMessageConfigType) SetBlockId(v BlockId) {
	o.BlockId = &v
}

// GetChainCode returns the ChainCode field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetChainCode() string {
	if o == nil || IsNil(o.ChainCode) {
		var ret string
		return ret
	}
	return *o.ChainCode
}

// GetChainCodeOk returns a tuple with the ChainCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetChainCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ChainCode) {
		return nil, false
	}
	return o.ChainCode, true
}

// HasChainCode returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasChainCode() bool {
	if o != nil && !IsNil(o.ChainCode) {
		return true
	}

	return false
}

// SetChainCode gets a reference to the given string and assigns it to the ChainCode field.
func (o *SellMessageConfigType) SetChainCode(v string) {
	o.ChainCode = &v
}

// GetCroCode returns the CroCode field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetCroCode() string {
	if o == nil || IsNil(o.CroCode) {
		var ret string
		return ret
	}
	return *o.CroCode
}

// GetCroCodeOk returns a tuple with the CroCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetCroCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CroCode) {
		return nil, false
	}
	return o.CroCode, true
}

// HasCroCode returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasCroCode() bool {
	if o != nil && !IsNil(o.CroCode) {
		return true
	}

	return false
}

// SetCroCode gets a reference to the given string and assigns it to the CroCode field.
func (o *SellMessageConfigType) SetCroCode(v string) {
	o.CroCode = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *SellMessageConfigType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SellMessageConfigType) SetId(v string) {
	o.Id = &v
}

// GetIdContext returns the IdContext field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetIdContext() string {
	if o == nil || IsNil(o.IdContext) {
		var ret string
		return ret
	}
	return *o.IdContext
}

// GetIdContextOk returns a tuple with the IdContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetIdContextOk() (*string, bool) {
	if o == nil || IsNil(o.IdContext) {
		return nil, false
	}
	return o.IdContext, true
}

// HasIdContext returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasIdContext() bool {
	if o != nil && !IsNil(o.IdContext) {
		return true
	}

	return false
}

// SetIdContext gets a reference to the given string and assigns it to the IdContext field.
func (o *SellMessageConfigType) SetIdContext(v string) {
	o.IdContext = &v
}

// GetIdExtension returns the IdExtension field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetIdExtension() int32 {
	if o == nil || IsNil(o.IdExtension) {
		var ret int32
		return ret
	}
	return *o.IdExtension
}

// GetIdExtensionOk returns a tuple with the IdExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetIdExtensionOk() (*int32, bool) {
	if o == nil || IsNil(o.IdExtension) {
		return nil, false
	}
	return o.IdExtension, true
}

// HasIdExtension returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasIdExtension() bool {
	if o != nil && !IsNil(o.IdExtension) {
		return true
	}

	return false
}

// SetIdExtension gets a reference to the given int32 and assigns it to the IdExtension field.
func (o *SellMessageConfigType) SetIdExtension(v int32) {
	o.IdExtension = &v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *SellMessageConfigType) SetInstance(v string) {
	o.Instance = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetLanguageCode() string {
	if o == nil || IsNil(o.LanguageCode) {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetLanguageCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LanguageCode) {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasLanguageCode() bool {
	if o != nil && !IsNil(o.LanguageCode) {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *SellMessageConfigType) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SellMessageConfigType) SetMessage(v string) {
	o.Message = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *SellMessageConfigType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *SellMessageConfigType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetSellSequence returns the SellSequence field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetSellSequence() float32 {
	if o == nil || IsNil(o.SellSequence) {
		var ret float32
		return ret
	}
	return *o.SellSequence
}

// GetSellSequenceOk returns a tuple with the SellSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetSellSequenceOk() (*float32, bool) {
	if o == nil || IsNil(o.SellSequence) {
		return nil, false
	}
	return o.SellSequence, true
}

// HasSellSequence returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasSellSequence() bool {
	if o != nil && !IsNil(o.SellSequence) {
		return true
	}

	return false
}

// SetSellSequence gets a reference to the given float32 and assigns it to the SellSequence field.
func (o *SellMessageConfigType) SetSellSequence(v float32) {
	o.SellSequence = &v
}

// GetStickyFlag returns the StickyFlag field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetStickyFlag() bool {
	if o == nil || IsNil(o.StickyFlag) {
		var ret bool
		return ret
	}
	return *o.StickyFlag
}

// GetStickyFlagOk returns a tuple with the StickyFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetStickyFlagOk() (*bool, bool) {
	if o == nil || IsNil(o.StickyFlag) {
		return nil, false
	}
	return o.StickyFlag, true
}

// HasStickyFlag returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasStickyFlag() bool {
	if o != nil && !IsNil(o.StickyFlag) {
		return true
	}

	return false
}

// SetStickyFlag gets a reference to the given bool and assigns it to the StickyFlag field.
func (o *SellMessageConfigType) SetStickyFlag(v bool) {
	o.StickyFlag = &v
}

// GetTimespan returns the Timespan field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetTimespan() TimeSpanType {
	if o == nil || IsNil(o.Timespan) {
		var ret TimeSpanType
		return ret
	}
	return *o.Timespan
}

// GetTimespanOk returns a tuple with the Timespan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetTimespanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.Timespan) {
		return nil, false
	}
	return o.Timespan, true
}

// HasTimespan returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasTimespan() bool {
	if o != nil && !IsNil(o.Timespan) {
		return true
	}

	return false
}

// SetTimespan gets a reference to the given TimeSpanType and assigns it to the Timespan field.
func (o *SellMessageConfigType) SetTimespan(v TimeSpanType) {
	o.Timespan = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SellMessageConfigType) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SellMessageConfigType) SetUrl(v string) {
	o.Url = &v
}

// GetUsedInModule returns the UsedInModule field value if set, zero value otherwise.
func (o *SellMessageConfigType) GetUsedInModule() []UsedInModuleType {
	if o == nil || IsNil(o.UsedInModule) {
		var ret []UsedInModuleType
		return ret
	}
	return o.UsedInModule
}

// GetUsedInModuleOk returns a tuple with the UsedInModule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigType) GetUsedInModuleOk() ([]UsedInModuleType, bool) {
	if o == nil || IsNil(o.UsedInModule) {
		return nil, false
	}
	return o.UsedInModule, true
}

// HasUsedInModule returns a boolean if a field has been set.
func (o *SellMessageConfigType) HasUsedInModule() bool {
	if o != nil && !IsNil(o.UsedInModule) {
		return true
	}

	return false
}

// SetUsedInModule gets a reference to the given []UsedInModuleType and assigns it to the UsedInModule field.
func (o *SellMessageConfigType) SetUsedInModule(v []UsedInModuleType) {
	o.UsedInModule = v
}

func (o SellMessageConfigType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SellMessageConfigType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockCode) {
		toSerialize["blockCode"] = o.BlockCode
	}
	if !IsNil(o.BlockId) {
		toSerialize["blockId"] = o.BlockId
	}
	if !IsNil(o.ChainCode) {
		toSerialize["chainCode"] = o.ChainCode
	}
	if !IsNil(o.CroCode) {
		toSerialize["croCode"] = o.CroCode
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IdContext) {
		toSerialize["idContext"] = o.IdContext
	}
	if !IsNil(o.IdExtension) {
		toSerialize["idExtension"] = o.IdExtension
	}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.LanguageCode) {
		toSerialize["languageCode"] = o.LanguageCode
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.SellSequence) {
		toSerialize["sellSequence"] = o.SellSequence
	}
	if !IsNil(o.StickyFlag) {
		toSerialize["stickyFlag"] = o.StickyFlag
	}
	if !IsNil(o.Timespan) {
		toSerialize["timespan"] = o.Timespan
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.UsedInModule) {
		toSerialize["usedInModule"] = o.UsedInModule
	}
	return toSerialize, nil
}

type NullableSellMessageConfigType struct {
	value *SellMessageConfigType
	isSet bool
}

func (v NullableSellMessageConfigType) Get() *SellMessageConfigType {
	return v.value
}

func (v *NullableSellMessageConfigType) Set(val *SellMessageConfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableSellMessageConfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableSellMessageConfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSellMessageConfigType(val *SellMessageConfigType) *NullableSellMessageConfigType {
	return &NullableSellMessageConfigType{value: val, isSet: true}
}

func (v NullableSellMessageConfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSellMessageConfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


