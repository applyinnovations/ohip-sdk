/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the DepartureReservationInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepartureReservationInfoType{}

// DepartureReservationInfoType Key information about the departure reservation.
type DepartureReservationInfoType struct {
	// The departure Reservation Expected Departure Time.
	ReservationExpectedDepartureTime *string `json:"reservationExpectedDepartureTime,omitempty"`
	ReservationStatus *PMSResStatusType `json:"reservationStatus,omitempty"`
}

// NewDepartureReservationInfoType instantiates a new DepartureReservationInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepartureReservationInfoType() *DepartureReservationInfoType {
	this := DepartureReservationInfoType{}
	return &this
}

// NewDepartureReservationInfoTypeWithDefaults instantiates a new DepartureReservationInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepartureReservationInfoTypeWithDefaults() *DepartureReservationInfoType {
	this := DepartureReservationInfoType{}
	return &this
}

// GetReservationExpectedDepartureTime returns the ReservationExpectedDepartureTime field value if set, zero value otherwise.
func (o *DepartureReservationInfoType) GetReservationExpectedDepartureTime() string {
	if o == nil || IsNil(o.ReservationExpectedDepartureTime) {
		var ret string
		return ret
	}
	return *o.ReservationExpectedDepartureTime
}

// GetReservationExpectedDepartureTimeOk returns a tuple with the ReservationExpectedDepartureTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartureReservationInfoType) GetReservationExpectedDepartureTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReservationExpectedDepartureTime) {
		return nil, false
	}
	return o.ReservationExpectedDepartureTime, true
}

// HasReservationExpectedDepartureTime returns a boolean if a field has been set.
func (o *DepartureReservationInfoType) HasReservationExpectedDepartureTime() bool {
	if o != nil && !IsNil(o.ReservationExpectedDepartureTime) {
		return true
	}

	return false
}

// SetReservationExpectedDepartureTime gets a reference to the given string and assigns it to the ReservationExpectedDepartureTime field.
func (o *DepartureReservationInfoType) SetReservationExpectedDepartureTime(v string) {
	o.ReservationExpectedDepartureTime = &v
}

// GetReservationStatus returns the ReservationStatus field value if set, zero value otherwise.
func (o *DepartureReservationInfoType) GetReservationStatus() PMSResStatusType {
	if o == nil || IsNil(o.ReservationStatus) {
		var ret PMSResStatusType
		return ret
	}
	return *o.ReservationStatus
}

// GetReservationStatusOk returns a tuple with the ReservationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepartureReservationInfoType) GetReservationStatusOk() (*PMSResStatusType, bool) {
	if o == nil || IsNil(o.ReservationStatus) {
		return nil, false
	}
	return o.ReservationStatus, true
}

// HasReservationStatus returns a boolean if a field has been set.
func (o *DepartureReservationInfoType) HasReservationStatus() bool {
	if o != nil && !IsNil(o.ReservationStatus) {
		return true
	}

	return false
}

// SetReservationStatus gets a reference to the given PMSResStatusType and assigns it to the ReservationStatus field.
func (o *DepartureReservationInfoType) SetReservationStatus(v PMSResStatusType) {
	o.ReservationStatus = &v
}

func (o DepartureReservationInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepartureReservationInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationExpectedDepartureTime) {
		toSerialize["reservationExpectedDepartureTime"] = o.ReservationExpectedDepartureTime
	}
	if !IsNil(o.ReservationStatus) {
		toSerialize["reservationStatus"] = o.ReservationStatus
	}
	return toSerialize, nil
}

type NullableDepartureReservationInfoType struct {
	value *DepartureReservationInfoType
	isSet bool
}

func (v NullableDepartureReservationInfoType) Get() *DepartureReservationInfoType {
	return v.value
}

func (v *NullableDepartureReservationInfoType) Set(val *DepartureReservationInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableDepartureReservationInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableDepartureReservationInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepartureReservationInfoType(val *DepartureReservationInfoType) *NullableDepartureReservationInfoType {
	return &NullableDepartureReservationInfoType{value: val, isSet: true}
}

func (v NullableDepartureReservationInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepartureReservationInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


