/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CancellationInstructionsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancellationInstructionsType{}

// CancellationInstructionsType struct for CancellationInstructionsType
type CancellationInstructionsType struct {
	DeleteResTraces *bool `json:"deleteResTraces,omitempty"`
	// Detailed description such as why reservation cannot be cancelled.
	Description *string `json:"description,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewCancellationInstructionsType instantiates a new CancellationInstructionsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationInstructionsType() *CancellationInstructionsType {
	this := CancellationInstructionsType{}
	return &this
}

// NewCancellationInstructionsTypeWithDefaults instantiates a new CancellationInstructionsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationInstructionsTypeWithDefaults() *CancellationInstructionsType {
	this := CancellationInstructionsType{}
	return &this
}

// GetDeleteResTraces returns the DeleteResTraces field value if set, zero value otherwise.
func (o *CancellationInstructionsType) GetDeleteResTraces() bool {
	if o == nil || IsNil(o.DeleteResTraces) {
		var ret bool
		return ret
	}
	return *o.DeleteResTraces
}

// GetDeleteResTracesOk returns a tuple with the DeleteResTraces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationInstructionsType) GetDeleteResTracesOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteResTraces) {
		return nil, false
	}
	return o.DeleteResTraces, true
}

// HasDeleteResTraces returns a boolean if a field has been set.
func (o *CancellationInstructionsType) HasDeleteResTraces() bool {
	if o != nil && !IsNil(o.DeleteResTraces) {
		return true
	}

	return false
}

// SetDeleteResTraces gets a reference to the given bool and assigns it to the DeleteResTraces field.
func (o *CancellationInstructionsType) SetDeleteResTraces(v bool) {
	o.DeleteResTraces = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CancellationInstructionsType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationInstructionsType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CancellationInstructionsType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CancellationInstructionsType) SetDescription(v string) {
	o.Description = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CancellationInstructionsType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationInstructionsType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CancellationInstructionsType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CancellationInstructionsType) SetStatus(v string) {
	o.Status = &v
}

func (o CancellationInstructionsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancellationInstructionsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteResTraces) {
		toSerialize["deleteResTraces"] = o.DeleteResTraces
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCancellationInstructionsType struct {
	value *CancellationInstructionsType
	isSet bool
}

func (v NullableCancellationInstructionsType) Get() *CancellationInstructionsType {
	return v.value
}

func (v *NullableCancellationInstructionsType) Set(val *CancellationInstructionsType) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationInstructionsType) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationInstructionsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationInstructionsType(val *CancellationInstructionsType) *NullableCancellationInstructionsType {
	return &NullableCancellationInstructionsType{value: val, isSet: true}
}

func (v NullableCancellationInstructionsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationInstructionsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


