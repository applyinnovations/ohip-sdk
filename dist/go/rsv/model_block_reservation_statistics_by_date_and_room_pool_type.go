/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the BlockReservationStatisticsByDateAndRoomPoolType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BlockReservationStatisticsByDateAndRoomPoolType{}

// BlockReservationStatisticsByDateAndRoomPoolType Statistics of block reservations summarized by date and room pools.
type BlockReservationStatisticsByDateAndRoomPoolType struct {
	// Statistics of one day.
	DailyStats []DailyStatType `json:"dailyStats,omitempty"`
}

// NewBlockReservationStatisticsByDateAndRoomPoolType instantiates a new BlockReservationStatisticsByDateAndRoomPoolType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockReservationStatisticsByDateAndRoomPoolType() *BlockReservationStatisticsByDateAndRoomPoolType {
	this := BlockReservationStatisticsByDateAndRoomPoolType{}
	return &this
}

// NewBlockReservationStatisticsByDateAndRoomPoolTypeWithDefaults instantiates a new BlockReservationStatisticsByDateAndRoomPoolType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockReservationStatisticsByDateAndRoomPoolTypeWithDefaults() *BlockReservationStatisticsByDateAndRoomPoolType {
	this := BlockReservationStatisticsByDateAndRoomPoolType{}
	return &this
}

// GetDailyStats returns the DailyStats field value if set, zero value otherwise.
func (o *BlockReservationStatisticsByDateAndRoomPoolType) GetDailyStats() []DailyStatType {
	if o == nil || IsNil(o.DailyStats) {
		var ret []DailyStatType
		return ret
	}
	return o.DailyStats
}

// GetDailyStatsOk returns a tuple with the DailyStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockReservationStatisticsByDateAndRoomPoolType) GetDailyStatsOk() ([]DailyStatType, bool) {
	if o == nil || IsNil(o.DailyStats) {
		return nil, false
	}
	return o.DailyStats, true
}

// HasDailyStats returns a boolean if a field has been set.
func (o *BlockReservationStatisticsByDateAndRoomPoolType) HasDailyStats() bool {
	if o != nil && !IsNil(o.DailyStats) {
		return true
	}

	return false
}

// SetDailyStats gets a reference to the given []DailyStatType and assigns it to the DailyStats field.
func (o *BlockReservationStatisticsByDateAndRoomPoolType) SetDailyStats(v []DailyStatType) {
	o.DailyStats = v
}

func (o BlockReservationStatisticsByDateAndRoomPoolType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BlockReservationStatisticsByDateAndRoomPoolType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyStats) {
		toSerialize["dailyStats"] = o.DailyStats
	}
	return toSerialize, nil
}

type NullableBlockReservationStatisticsByDateAndRoomPoolType struct {
	value *BlockReservationStatisticsByDateAndRoomPoolType
	isSet bool
}

func (v NullableBlockReservationStatisticsByDateAndRoomPoolType) Get() *BlockReservationStatisticsByDateAndRoomPoolType {
	return v.value
}

func (v *NullableBlockReservationStatisticsByDateAndRoomPoolType) Set(val *BlockReservationStatisticsByDateAndRoomPoolType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockReservationStatisticsByDateAndRoomPoolType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockReservationStatisticsByDateAndRoomPoolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockReservationStatisticsByDateAndRoomPoolType(val *BlockReservationStatisticsByDateAndRoomPoolType) *NullableBlockReservationStatisticsByDateAndRoomPoolType {
	return &NullableBlockReservationStatisticsByDateAndRoomPoolType{value: val, isSet: true}
}

func (v NullableBlockReservationStatisticsByDateAndRoomPoolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockReservationStatisticsByDateAndRoomPoolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


