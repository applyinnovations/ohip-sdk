/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ShareReservationInstructionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareReservationInstructionType{}

// ShareReservationInstructionType struct for ShareReservationInstructionType
type ShareReservationInstructionType struct {
	// Collection of effective rate amount per guest on specific dates.
	EffectiveRates []EffectiveRateType `json:"effectiveRates,omitempty"`
	// Indicates whether fixed rate will be applied to all shares.
	FixedRate *bool `json:"fixedRate,omitempty"`
	PaymentMethod *ReservationPaymentMethodType `json:"paymentMethod,omitempty"`
	RateAmountShare *ShareDistributionInstructionType `json:"rateAmountShare,omitempty"`
	ShareType *ShareTypeType `json:"shareType,omitempty"`
}

// NewShareReservationInstructionType instantiates a new ShareReservationInstructionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareReservationInstructionType() *ShareReservationInstructionType {
	this := ShareReservationInstructionType{}
	return &this
}

// NewShareReservationInstructionTypeWithDefaults instantiates a new ShareReservationInstructionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareReservationInstructionTypeWithDefaults() *ShareReservationInstructionType {
	this := ShareReservationInstructionType{}
	return &this
}

// GetEffectiveRates returns the EffectiveRates field value if set, zero value otherwise.
func (o *ShareReservationInstructionType) GetEffectiveRates() []EffectiveRateType {
	if o == nil || IsNil(o.EffectiveRates) {
		var ret []EffectiveRateType
		return ret
	}
	return o.EffectiveRates
}

// GetEffectiveRatesOk returns a tuple with the EffectiveRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareReservationInstructionType) GetEffectiveRatesOk() ([]EffectiveRateType, bool) {
	if o == nil || IsNil(o.EffectiveRates) {
		return nil, false
	}
	return o.EffectiveRates, true
}

// HasEffectiveRates returns a boolean if a field has been set.
func (o *ShareReservationInstructionType) HasEffectiveRates() bool {
	if o != nil && !IsNil(o.EffectiveRates) {
		return true
	}

	return false
}

// SetEffectiveRates gets a reference to the given []EffectiveRateType and assigns it to the EffectiveRates field.
func (o *ShareReservationInstructionType) SetEffectiveRates(v []EffectiveRateType) {
	o.EffectiveRates = v
}

// GetFixedRate returns the FixedRate field value if set, zero value otherwise.
func (o *ShareReservationInstructionType) GetFixedRate() bool {
	if o == nil || IsNil(o.FixedRate) {
		var ret bool
		return ret
	}
	return *o.FixedRate
}

// GetFixedRateOk returns a tuple with the FixedRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareReservationInstructionType) GetFixedRateOk() (*bool, bool) {
	if o == nil || IsNil(o.FixedRate) {
		return nil, false
	}
	return o.FixedRate, true
}

// HasFixedRate returns a boolean if a field has been set.
func (o *ShareReservationInstructionType) HasFixedRate() bool {
	if o != nil && !IsNil(o.FixedRate) {
		return true
	}

	return false
}

// SetFixedRate gets a reference to the given bool and assigns it to the FixedRate field.
func (o *ShareReservationInstructionType) SetFixedRate(v bool) {
	o.FixedRate = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *ShareReservationInstructionType) GetPaymentMethod() ReservationPaymentMethodType {
	if o == nil || IsNil(o.PaymentMethod) {
		var ret ReservationPaymentMethodType
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareReservationInstructionType) GetPaymentMethodOk() (*ReservationPaymentMethodType, bool) {
	if o == nil || IsNil(o.PaymentMethod) {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *ShareReservationInstructionType) HasPaymentMethod() bool {
	if o != nil && !IsNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given ReservationPaymentMethodType and assigns it to the PaymentMethod field.
func (o *ShareReservationInstructionType) SetPaymentMethod(v ReservationPaymentMethodType) {
	o.PaymentMethod = &v
}

// GetRateAmountShare returns the RateAmountShare field value if set, zero value otherwise.
func (o *ShareReservationInstructionType) GetRateAmountShare() ShareDistributionInstructionType {
	if o == nil || IsNil(o.RateAmountShare) {
		var ret ShareDistributionInstructionType
		return ret
	}
	return *o.RateAmountShare
}

// GetRateAmountShareOk returns a tuple with the RateAmountShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareReservationInstructionType) GetRateAmountShareOk() (*ShareDistributionInstructionType, bool) {
	if o == nil || IsNil(o.RateAmountShare) {
		return nil, false
	}
	return o.RateAmountShare, true
}

// HasRateAmountShare returns a boolean if a field has been set.
func (o *ShareReservationInstructionType) HasRateAmountShare() bool {
	if o != nil && !IsNil(o.RateAmountShare) {
		return true
	}

	return false
}

// SetRateAmountShare gets a reference to the given ShareDistributionInstructionType and assigns it to the RateAmountShare field.
func (o *ShareReservationInstructionType) SetRateAmountShare(v ShareDistributionInstructionType) {
	o.RateAmountShare = &v
}

// GetShareType returns the ShareType field value if set, zero value otherwise.
func (o *ShareReservationInstructionType) GetShareType() ShareTypeType {
	if o == nil || IsNil(o.ShareType) {
		var ret ShareTypeType
		return ret
	}
	return *o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareReservationInstructionType) GetShareTypeOk() (*ShareTypeType, bool) {
	if o == nil || IsNil(o.ShareType) {
		return nil, false
	}
	return o.ShareType, true
}

// HasShareType returns a boolean if a field has been set.
func (o *ShareReservationInstructionType) HasShareType() bool {
	if o != nil && !IsNil(o.ShareType) {
		return true
	}

	return false
}

// SetShareType gets a reference to the given ShareTypeType and assigns it to the ShareType field.
func (o *ShareReservationInstructionType) SetShareType(v ShareTypeType) {
	o.ShareType = &v
}

func (o ShareReservationInstructionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShareReservationInstructionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectiveRates) {
		toSerialize["effectiveRates"] = o.EffectiveRates
	}
	if !IsNil(o.FixedRate) {
		toSerialize["fixedRate"] = o.FixedRate
	}
	if !IsNil(o.PaymentMethod) {
		toSerialize["paymentMethod"] = o.PaymentMethod
	}
	if !IsNil(o.RateAmountShare) {
		toSerialize["rateAmountShare"] = o.RateAmountShare
	}
	if !IsNil(o.ShareType) {
		toSerialize["shareType"] = o.ShareType
	}
	return toSerialize, nil
}

type NullableShareReservationInstructionType struct {
	value *ShareReservationInstructionType
	isSet bool
}

func (v NullableShareReservationInstructionType) Get() *ShareReservationInstructionType {
	return v.value
}

func (v *NullableShareReservationInstructionType) Set(val *ShareReservationInstructionType) {
	v.value = val
	v.isSet = true
}

func (v NullableShareReservationInstructionType) IsSet() bool {
	return v.isSet
}

func (v *NullableShareReservationInstructionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareReservationInstructionType(val *ShareReservationInstructionType) *NullableShareReservationInstructionType {
	return &NullableShareReservationInstructionType{value: val, isSet: true}
}

func (v NullableShareReservationInstructionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareReservationInstructionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


