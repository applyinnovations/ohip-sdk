/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ScheduleRoomMoveType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleRoomMoveType{}

// ScheduleRoomMoveType Type of room move scheduled either from or to information
type ScheduleRoomMoveType struct {
	ScheduleRoomMoveStatus *ScheduledRoomMoveStatusType `json:"scheduleRoomMoveStatus,omitempty"`
	// Business date on which room is scheduled to be moved from or to another room.
	ScheduleRoomMoveDate *string `json:"scheduleRoomMoveDate,omitempty"`
	// Room to which guest is scheduled to be moved.
	ScheduleMoveRoomNumber *string `json:"scheduleMoveRoomNumber,omitempty"`
	// The scheduled time of room move.
	ScheduledMoveTime *string `json:"scheduledMoveTime,omitempty"`
}

// NewScheduleRoomMoveType instantiates a new ScheduleRoomMoveType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleRoomMoveType() *ScheduleRoomMoveType {
	this := ScheduleRoomMoveType{}
	return &this
}

// NewScheduleRoomMoveTypeWithDefaults instantiates a new ScheduleRoomMoveType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleRoomMoveTypeWithDefaults() *ScheduleRoomMoveType {
	this := ScheduleRoomMoveType{}
	return &this
}

// GetScheduleRoomMoveStatus returns the ScheduleRoomMoveStatus field value if set, zero value otherwise.
func (o *ScheduleRoomMoveType) GetScheduleRoomMoveStatus() ScheduledRoomMoveStatusType {
	if o == nil || IsNil(o.ScheduleRoomMoveStatus) {
		var ret ScheduledRoomMoveStatusType
		return ret
	}
	return *o.ScheduleRoomMoveStatus
}

// GetScheduleRoomMoveStatusOk returns a tuple with the ScheduleRoomMoveStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRoomMoveType) GetScheduleRoomMoveStatusOk() (*ScheduledRoomMoveStatusType, bool) {
	if o == nil || IsNil(o.ScheduleRoomMoveStatus) {
		return nil, false
	}
	return o.ScheduleRoomMoveStatus, true
}

// HasScheduleRoomMoveStatus returns a boolean if a field has been set.
func (o *ScheduleRoomMoveType) HasScheduleRoomMoveStatus() bool {
	if o != nil && !IsNil(o.ScheduleRoomMoveStatus) {
		return true
	}

	return false
}

// SetScheduleRoomMoveStatus gets a reference to the given ScheduledRoomMoveStatusType and assigns it to the ScheduleRoomMoveStatus field.
func (o *ScheduleRoomMoveType) SetScheduleRoomMoveStatus(v ScheduledRoomMoveStatusType) {
	o.ScheduleRoomMoveStatus = &v
}

// GetScheduleRoomMoveDate returns the ScheduleRoomMoveDate field value if set, zero value otherwise.
func (o *ScheduleRoomMoveType) GetScheduleRoomMoveDate() string {
	if o == nil || IsNil(o.ScheduleRoomMoveDate) {
		var ret string
		return ret
	}
	return *o.ScheduleRoomMoveDate
}

// GetScheduleRoomMoveDateOk returns a tuple with the ScheduleRoomMoveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRoomMoveType) GetScheduleRoomMoveDateOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleRoomMoveDate) {
		return nil, false
	}
	return o.ScheduleRoomMoveDate, true
}

// HasScheduleRoomMoveDate returns a boolean if a field has been set.
func (o *ScheduleRoomMoveType) HasScheduleRoomMoveDate() bool {
	if o != nil && !IsNil(o.ScheduleRoomMoveDate) {
		return true
	}

	return false
}

// SetScheduleRoomMoveDate gets a reference to the given string and assigns it to the ScheduleRoomMoveDate field.
func (o *ScheduleRoomMoveType) SetScheduleRoomMoveDate(v string) {
	o.ScheduleRoomMoveDate = &v
}

// GetScheduleMoveRoomNumber returns the ScheduleMoveRoomNumber field value if set, zero value otherwise.
func (o *ScheduleRoomMoveType) GetScheduleMoveRoomNumber() string {
	if o == nil || IsNil(o.ScheduleMoveRoomNumber) {
		var ret string
		return ret
	}
	return *o.ScheduleMoveRoomNumber
}

// GetScheduleMoveRoomNumberOk returns a tuple with the ScheduleMoveRoomNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRoomMoveType) GetScheduleMoveRoomNumberOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleMoveRoomNumber) {
		return nil, false
	}
	return o.ScheduleMoveRoomNumber, true
}

// HasScheduleMoveRoomNumber returns a boolean if a field has been set.
func (o *ScheduleRoomMoveType) HasScheduleMoveRoomNumber() bool {
	if o != nil && !IsNil(o.ScheduleMoveRoomNumber) {
		return true
	}

	return false
}

// SetScheduleMoveRoomNumber gets a reference to the given string and assigns it to the ScheduleMoveRoomNumber field.
func (o *ScheduleRoomMoveType) SetScheduleMoveRoomNumber(v string) {
	o.ScheduleMoveRoomNumber = &v
}

// GetScheduledMoveTime returns the ScheduledMoveTime field value if set, zero value otherwise.
func (o *ScheduleRoomMoveType) GetScheduledMoveTime() string {
	if o == nil || IsNil(o.ScheduledMoveTime) {
		var ret string
		return ret
	}
	return *o.ScheduledMoveTime
}

// GetScheduledMoveTimeOk returns a tuple with the ScheduledMoveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleRoomMoveType) GetScheduledMoveTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduledMoveTime) {
		return nil, false
	}
	return o.ScheduledMoveTime, true
}

// HasScheduledMoveTime returns a boolean if a field has been set.
func (o *ScheduleRoomMoveType) HasScheduledMoveTime() bool {
	if o != nil && !IsNil(o.ScheduledMoveTime) {
		return true
	}

	return false
}

// SetScheduledMoveTime gets a reference to the given string and assigns it to the ScheduledMoveTime field.
func (o *ScheduleRoomMoveType) SetScheduledMoveTime(v string) {
	o.ScheduledMoveTime = &v
}

func (o ScheduleRoomMoveType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleRoomMoveType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScheduleRoomMoveStatus) {
		toSerialize["scheduleRoomMoveStatus"] = o.ScheduleRoomMoveStatus
	}
	if !IsNil(o.ScheduleRoomMoveDate) {
		toSerialize["scheduleRoomMoveDate"] = o.ScheduleRoomMoveDate
	}
	if !IsNil(o.ScheduleMoveRoomNumber) {
		toSerialize["scheduleMoveRoomNumber"] = o.ScheduleMoveRoomNumber
	}
	if !IsNil(o.ScheduledMoveTime) {
		toSerialize["scheduledMoveTime"] = o.ScheduledMoveTime
	}
	return toSerialize, nil
}

type NullableScheduleRoomMoveType struct {
	value *ScheduleRoomMoveType
	isSet bool
}

func (v NullableScheduleRoomMoveType) Get() *ScheduleRoomMoveType {
	return v.value
}

func (v *NullableScheduleRoomMoveType) Set(val *ScheduleRoomMoveType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleRoomMoveType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleRoomMoveType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleRoomMoveType(val *ScheduleRoomMoveType) *NullableScheduleRoomMoveType {
	return &NullableScheduleRoomMoveType{value: val, isSet: true}
}

func (v NullableScheduleRoomMoveType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleRoomMoveType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


