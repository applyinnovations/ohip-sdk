/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ComponentBlockOutDates type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentBlockOutDates{}

// ComponentBlockOutDates struct for ComponentBlockOutDates
type ComponentBlockOutDates struct {
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
	DateTimeSpan *DateTimeSpanType `json:"dateTimeSpan,omitempty"`
}

// NewComponentBlockOutDates instantiates a new ComponentBlockOutDates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentBlockOutDates() *ComponentBlockOutDates {
	this := ComponentBlockOutDates{}
	return &this
}

// NewComponentBlockOutDatesWithDefaults instantiates a new ComponentBlockOutDates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentBlockOutDatesWithDefaults() *ComponentBlockOutDates {
	this := ComponentBlockOutDates{}
	return &this
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *ComponentBlockOutDates) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentBlockOutDates) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *ComponentBlockOutDates) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *ComponentBlockOutDates) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

// GetDateTimeSpan returns the DateTimeSpan field value if set, zero value otherwise.
func (o *ComponentBlockOutDates) GetDateTimeSpan() DateTimeSpanType {
	if o == nil || IsNil(o.DateTimeSpan) {
		var ret DateTimeSpanType
		return ret
	}
	return *o.DateTimeSpan
}

// GetDateTimeSpanOk returns a tuple with the DateTimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentBlockOutDates) GetDateTimeSpanOk() (*DateTimeSpanType, bool) {
	if o == nil || IsNil(o.DateTimeSpan) {
		return nil, false
	}
	return o.DateTimeSpan, true
}

// HasDateTimeSpan returns a boolean if a field has been set.
func (o *ComponentBlockOutDates) HasDateTimeSpan() bool {
	if o != nil && !IsNil(o.DateTimeSpan) {
		return true
	}

	return false
}

// SetDateTimeSpan gets a reference to the given DateTimeSpanType and assigns it to the DateTimeSpan field.
func (o *ComponentBlockOutDates) SetDateTimeSpan(v DateTimeSpanType) {
	o.DateTimeSpan = &v
}

func (o ComponentBlockOutDates) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentBlockOutDates) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	if !IsNil(o.DateTimeSpan) {
		toSerialize["dateTimeSpan"] = o.DateTimeSpan
	}
	return toSerialize, nil
}

type NullableComponentBlockOutDates struct {
	value *ComponentBlockOutDates
	isSet bool
}

func (v NullableComponentBlockOutDates) Get() *ComponentBlockOutDates {
	return v.value
}

func (v *NullableComponentBlockOutDates) Set(val *ComponentBlockOutDates) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentBlockOutDates) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentBlockOutDates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentBlockOutDates(val *ComponentBlockOutDates) *NullableComponentBlockOutDates {
	return &NullableComponentBlockOutDates{value: val, isSet: true}
}

func (v NullableComponentBlockOutDates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentBlockOutDates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


