/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the PreArrivalMemberReservationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreArrivalMemberReservationType{}

// PreArrivalMemberReservationType struct for PreArrivalMemberReservationType
type PreArrivalMemberReservationType struct {
	// Date on which Reservation is Created.
	CreateDateTime *string `json:"createDateTime,omitempty"`
	// Arrival Date.
	ArrivalDate *string `json:"arrivalDate,omitempty"`
	// Membership Card number.
	MembershipId *string `json:"membershipId,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
}

// NewPreArrivalMemberReservationType instantiates a new PreArrivalMemberReservationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreArrivalMemberReservationType() *PreArrivalMemberReservationType {
	this := PreArrivalMemberReservationType{}
	return &this
}

// NewPreArrivalMemberReservationTypeWithDefaults instantiates a new PreArrivalMemberReservationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreArrivalMemberReservationTypeWithDefaults() *PreArrivalMemberReservationType {
	this := PreArrivalMemberReservationType{}
	return &this
}

// GetCreateDateTime returns the CreateDateTime field value if set, zero value otherwise.
func (o *PreArrivalMemberReservationType) GetCreateDateTime() string {
	if o == nil || IsNil(o.CreateDateTime) {
		var ret string
		return ret
	}
	return *o.CreateDateTime
}

// GetCreateDateTimeOk returns a tuple with the CreateDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreArrivalMemberReservationType) GetCreateDateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreateDateTime) {
		return nil, false
	}
	return o.CreateDateTime, true
}

// HasCreateDateTime returns a boolean if a field has been set.
func (o *PreArrivalMemberReservationType) HasCreateDateTime() bool {
	if o != nil && !IsNil(o.CreateDateTime) {
		return true
	}

	return false
}

// SetCreateDateTime gets a reference to the given string and assigns it to the CreateDateTime field.
func (o *PreArrivalMemberReservationType) SetCreateDateTime(v string) {
	o.CreateDateTime = &v
}

// GetArrivalDate returns the ArrivalDate field value if set, zero value otherwise.
func (o *PreArrivalMemberReservationType) GetArrivalDate() string {
	if o == nil || IsNil(o.ArrivalDate) {
		var ret string
		return ret
	}
	return *o.ArrivalDate
}

// GetArrivalDateOk returns a tuple with the ArrivalDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreArrivalMemberReservationType) GetArrivalDateOk() (*string, bool) {
	if o == nil || IsNil(o.ArrivalDate) {
		return nil, false
	}
	return o.ArrivalDate, true
}

// HasArrivalDate returns a boolean if a field has been set.
func (o *PreArrivalMemberReservationType) HasArrivalDate() bool {
	if o != nil && !IsNil(o.ArrivalDate) {
		return true
	}

	return false
}

// SetArrivalDate gets a reference to the given string and assigns it to the ArrivalDate field.
func (o *PreArrivalMemberReservationType) SetArrivalDate(v string) {
	o.ArrivalDate = &v
}

// GetMembershipId returns the MembershipId field value if set, zero value otherwise.
func (o *PreArrivalMemberReservationType) GetMembershipId() string {
	if o == nil || IsNil(o.MembershipId) {
		var ret string
		return ret
	}
	return *o.MembershipId
}

// GetMembershipIdOk returns a tuple with the MembershipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreArrivalMemberReservationType) GetMembershipIdOk() (*string, bool) {
	if o == nil || IsNil(o.MembershipId) {
		return nil, false
	}
	return o.MembershipId, true
}

// HasMembershipId returns a boolean if a field has been set.
func (o *PreArrivalMemberReservationType) HasMembershipId() bool {
	if o != nil && !IsNil(o.MembershipId) {
		return true
	}

	return false
}

// SetMembershipId gets a reference to the given string and assigns it to the MembershipId field.
func (o *PreArrivalMemberReservationType) SetMembershipId(v string) {
	o.MembershipId = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *PreArrivalMemberReservationType) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreArrivalMemberReservationType) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *PreArrivalMemberReservationType) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *PreArrivalMemberReservationType) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

func (o PreArrivalMemberReservationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreArrivalMemberReservationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreateDateTime) {
		toSerialize["createDateTime"] = o.CreateDateTime
	}
	if !IsNil(o.ArrivalDate) {
		toSerialize["arrivalDate"] = o.ArrivalDate
	}
	if !IsNil(o.MembershipId) {
		toSerialize["membershipId"] = o.MembershipId
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	return toSerialize, nil
}

type NullablePreArrivalMemberReservationType struct {
	value *PreArrivalMemberReservationType
	isSet bool
}

func (v NullablePreArrivalMemberReservationType) Get() *PreArrivalMemberReservationType {
	return v.value
}

func (v *NullablePreArrivalMemberReservationType) Set(val *PreArrivalMemberReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullablePreArrivalMemberReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullablePreArrivalMemberReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreArrivalMemberReservationType(val *PreArrivalMemberReservationType) *NullablePreArrivalMemberReservationType {
	return &NullablePreArrivalMemberReservationType{value: val, isSet: true}
}

func (v NullablePreArrivalMemberReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreArrivalMemberReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


