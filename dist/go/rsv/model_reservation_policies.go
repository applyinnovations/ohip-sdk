/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ReservationPolicies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReservationPolicies{}

// ReservationPolicies Response that contains deposit and cancellation policies attached with the reservation.
type ReservationPolicies struct {
	// A list of reservation cancellation policies.
	CancellationPolicies []ResCancellationPolicyType `json:"cancellationPolicies,omitempty"`
	// A list of deposit policies attached with the reservation.
	DepositPolicies []ResDepositPolicyType `json:"depositPolicies,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewReservationPolicies instantiates a new ReservationPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReservationPolicies() *ReservationPolicies {
	this := ReservationPolicies{}
	return &this
}

// NewReservationPoliciesWithDefaults instantiates a new ReservationPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReservationPoliciesWithDefaults() *ReservationPolicies {
	this := ReservationPolicies{}
	return &this
}

// GetCancellationPolicies returns the CancellationPolicies field value if set, zero value otherwise.
func (o *ReservationPolicies) GetCancellationPolicies() []ResCancellationPolicyType {
	if o == nil || IsNil(o.CancellationPolicies) {
		var ret []ResCancellationPolicyType
		return ret
	}
	return o.CancellationPolicies
}

// GetCancellationPoliciesOk returns a tuple with the CancellationPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationPolicies) GetCancellationPoliciesOk() ([]ResCancellationPolicyType, bool) {
	if o == nil || IsNil(o.CancellationPolicies) {
		return nil, false
	}
	return o.CancellationPolicies, true
}

// HasCancellationPolicies returns a boolean if a field has been set.
func (o *ReservationPolicies) HasCancellationPolicies() bool {
	if o != nil && !IsNil(o.CancellationPolicies) {
		return true
	}

	return false
}

// SetCancellationPolicies gets a reference to the given []ResCancellationPolicyType and assigns it to the CancellationPolicies field.
func (o *ReservationPolicies) SetCancellationPolicies(v []ResCancellationPolicyType) {
	o.CancellationPolicies = v
}

// GetDepositPolicies returns the DepositPolicies field value if set, zero value otherwise.
func (o *ReservationPolicies) GetDepositPolicies() []ResDepositPolicyType {
	if o == nil || IsNil(o.DepositPolicies) {
		var ret []ResDepositPolicyType
		return ret
	}
	return o.DepositPolicies
}

// GetDepositPoliciesOk returns a tuple with the DepositPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationPolicies) GetDepositPoliciesOk() ([]ResDepositPolicyType, bool) {
	if o == nil || IsNil(o.DepositPolicies) {
		return nil, false
	}
	return o.DepositPolicies, true
}

// HasDepositPolicies returns a boolean if a field has been set.
func (o *ReservationPolicies) HasDepositPolicies() bool {
	if o != nil && !IsNil(o.DepositPolicies) {
		return true
	}

	return false
}

// SetDepositPolicies gets a reference to the given []ResDepositPolicyType and assigns it to the DepositPolicies field.
func (o *ReservationPolicies) SetDepositPolicies(v []ResDepositPolicyType) {
	o.DepositPolicies = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ReservationPolicies) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationPolicies) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ReservationPolicies) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *ReservationPolicies) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ReservationPolicies) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReservationPolicies) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ReservationPolicies) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *ReservationPolicies) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o ReservationPolicies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReservationPolicies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CancellationPolicies) {
		toSerialize["cancellationPolicies"] = o.CancellationPolicies
	}
	if !IsNil(o.DepositPolicies) {
		toSerialize["depositPolicies"] = o.DepositPolicies
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableReservationPolicies struct {
	value *ReservationPolicies
	isSet bool
}

func (v NullableReservationPolicies) Get() *ReservationPolicies {
	return v.value
}

func (v *NullableReservationPolicies) Set(val *ReservationPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableReservationPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableReservationPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReservationPolicies(val *ReservationPolicies) *NullableReservationPolicies {
	return &NullableReservationPolicies{value: val, isSet: true}
}

func (v NullableReservationPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReservationPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


