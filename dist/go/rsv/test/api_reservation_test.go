/*
OPERA Cloud Reservation API

Testing ReservationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package rsv

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/applyinnovations/ohip-sdk/rsv"
)

func Test_rsv_ReservationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReservationApiService ChangeReservationLocators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locatorId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.ChangeReservationLocators(context.Background(), locatorId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteCancellationPolicy(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteDepositPolicy(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteECoupons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteECoupons(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteGuestMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestMessageId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteGuestMessages(context.Background(), guestMessageId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteMasterAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteMasterAccount(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeletePaymentMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeletePaymentMethods(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeletePreCheckInReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeletePreCheckInReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteRefundTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteRefundTickets(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attachmentId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationAttachment(context.Background(), attachmentId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationCertificate(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationLinks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationLinks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationLinksByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationLinksByChain(context.Background(), reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationLinksByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationLinksByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationLocators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var locatorId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationLocators(context.Background(), locatorId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lockHandle string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationLock(context.Background(), lockHandle, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationMembership(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationPackage(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservationPreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceCode string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservationPreference(context.Background(), preferenceCode, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteReservedInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteReservedInventoryItems(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteSellMessageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteSellMessageConfig(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteSellMessageConfigByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.DeleteSellMessageConfigByChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteShareReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteShareReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteShareReservationByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteShareReservationByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteTickets(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteTransactionDiversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteTransactionDiversions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService DeleteUpsell", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.DeleteUpsell(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetAlertNotices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetAlertNotices(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetAwardUpgrades", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetAwardUpgrades(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetAwards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetAwards(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetCallHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetCallHistory(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetCallStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.GetCallStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetCancellationHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetCancellationHistory(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetConfirmationLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetConfirmationLetters(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetECoupons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetECoupons(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetExternalSystemDeliveryHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetExternalSystemDeliveryHistory(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetExternalSystemReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var extSystemCode string

		resp, httpRes, err := apiClient.ReservationApi.GetExternalSystemReservations(context.Background(), extSystemCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetFutureReservationsOrBlocks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileId string

		resp, httpRes, err := apiClient.ReservationApi.GetFutureReservationsOrBlocks(context.Background(), profileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetGuestMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetGuestMessages(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetHotelReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetHotelReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetLinkedReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetLinkedReservations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetLinkedReservationsSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetLinkedReservationsSummary(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetPackage(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetPaymentMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetPaymentMethods(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetPreArrivalMemberReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetPreArrivalMemberReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetPreConfiguredRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetPreConfiguredRoutingInstructions(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetRateInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetRateInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetRecentlyAccessedReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.GetRecentlyAccessedReservations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReprintTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReprintTickets(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationActivityLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationActivityLog(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationAttachments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationAttachments(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationExcludedPreferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationExcludedPreferences(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationIndicators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.GetReservationIndicators(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationLocators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationLocators(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationPolicies(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationPreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationPreference(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationUpsellInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationUpsellInfo(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.GetReservations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationsSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationsSummary(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationsToShareByProfileId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var profileIdtoShare string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationsToShareByProfileId(context.Background(), profileIdtoShare, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservationsToShareByReservationId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationIdtoShare string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservationsToShareByReservationId(context.Background(), reservationIdtoShare, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetReservedInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetReservedInventoryItems(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetRoomCalendar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetRoomCalendar(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetScript(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetSellMessageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetSellMessageConfig(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetSellMessageConfigByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.GetSellMessageConfigByChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetSellMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.GetSellMessages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetShareReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetShareReservations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetShareReservationsByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetShareReservationsByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetTickets(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetTicketsInquiry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetTicketsInquiry(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetTracesByReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetTracesByReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetTracesByRoom", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roomId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetTracesByRoom(context.Background(), roomId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetTransactionDiversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetTransactionDiversions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService GetUpgradeEligibilityReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.GetUpgradeEligibilityReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService MergeReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.MergeReservations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostBreakReservationLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostBreakReservationLock(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostBulkReservationAlerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostBulkReservationAlerts(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.PostCall(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCancelReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostCancelReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCancelReservationByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostCancelReservationByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCancelReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostCancelReservations(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCancelShareReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostCancelShareReservation(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostCancellationPolicy(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCombineShareReservations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostCombineShareReservations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostCombineShareReservationsByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostCombineShareReservationsByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostConfirmationLetters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostConfirmationLetters(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostDepositPolicy(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostECoupons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostECoupons(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostGuestMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostGuestMessages(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostIssueTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostIssueTickets(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostMasterAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostMasterAccount(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostPaymentMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostPaymentMethods(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostPreCheckInReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostPreCheckInReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservation(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationByBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var blockId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationByBlock(context.Background(), blockId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationCertificate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationCertificate(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationCopy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationCopy(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationLinks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationLinks(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationLinksByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationLinksByChain(context.Background(), reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationLinksByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationLinksByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationLocators", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationLocators(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationMembership", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationMembership(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationPackage(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReservationPreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReservationPreference(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReserveInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReserveInventoryItems(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostReverseDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostReverseDepositPolicy(context.Background(), policyId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostRoutingInstructionsByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostRoutingInstructionsByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostSellMessageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostSellMessageConfig(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostSellMessageConfigByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.PostSellMessageConfigByChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostTickets(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostTransactionDiversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostTransactionDiversions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostTurnawayReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostTurnawayReservation(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PostUpsellReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PostUpsellReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutAcquireReservationLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutAcquireReservationLock(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutBreakShareValidations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutBreakShareValidations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutCancellationPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutCancellationPolicy(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutCombineShareValidations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutCombineShareValidations(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutComputeCancellationPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutComputeCancellationPolicies(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutComputeDepositPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutComputeDepositPolicies(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutDepositPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutDepositPolicy(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutECoupons", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutECoupons(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutGuestMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var guestMessageId string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutGuestMessages(context.Background(), guestMessageId, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutMasterAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutMasterAccount(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutPaymentMethods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutPaymentMethods(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReinstateReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReinstateReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReinstateReservationByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReinstateReservationByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationDailyRateDetailValidation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationDailyRateDetailValidation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationHeaderValidation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationHeaderValidation(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationHotelMove", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationHotelMove(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationLock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var lockHandle string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationLock(context.Background(), lockHandle, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationPackage(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationPreference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var preferenceCode string
		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationPreference(context.Background(), preferenceCode, reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservationsUpgradeEligibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservationsUpgradeEligibility(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutReservedInventoryItems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutReservedInventoryItems(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutResvGuestMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutResvGuestMessages(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutRoutingInstructions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutRoutingInstructions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutRoutingInstructionsByExtId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationExternalId string
		var externalSystemCode string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutRoutingInstructionsByExtId(context.Background(), reservationExternalId, externalSystemCode, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutSellMessageConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutSellMessageConfig(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutSellMessageConfigByChain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReservationApi.PutSellMessageConfigByChain(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutShareRateAmount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutShareRateAmount(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutSharingGuests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutSharingGuests(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutSplitMultiRoomReservation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string

		resp, httpRes, err := apiClient.ReservationApi.PutSplitMultiRoomReservation(context.Background(), reservationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutTickets(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutTransactionDiversions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutTransactionDiversions(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutValidateOverlappingStay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reservationId string
		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutValidateOverlappingStay(context.Background(), reservationId, hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutValidateOverlappingStays", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutValidateOverlappingStays(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService PutValidateReservationChanges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.PutValidateReservationChanges(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReservationApiService ValidateRateInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hotelId string

		resp, httpRes, err := apiClient.ReservationApi.ValidateRateInfo(context.Background(), hotelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
