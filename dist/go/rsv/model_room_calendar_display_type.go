/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RoomCalendarDisplayType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoomCalendarDisplayType{}

// RoomCalendarDisplayType Display Information for the Room Calendar.
type RoomCalendarDisplayType struct {
	DisplayColor *string `json:"displayColor,omitempty"`
	DisplayLabel *string `json:"displayLabel,omitempty"`
}

// NewRoomCalendarDisplayType instantiates a new RoomCalendarDisplayType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoomCalendarDisplayType() *RoomCalendarDisplayType {
	this := RoomCalendarDisplayType{}
	return &this
}

// NewRoomCalendarDisplayTypeWithDefaults instantiates a new RoomCalendarDisplayType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoomCalendarDisplayTypeWithDefaults() *RoomCalendarDisplayType {
	this := RoomCalendarDisplayType{}
	return &this
}

// GetDisplayColor returns the DisplayColor field value if set, zero value otherwise.
func (o *RoomCalendarDisplayType) GetDisplayColor() string {
	if o == nil || IsNil(o.DisplayColor) {
		var ret string
		return ret
	}
	return *o.DisplayColor
}

// GetDisplayColorOk returns a tuple with the DisplayColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarDisplayType) GetDisplayColorOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayColor) {
		return nil, false
	}
	return o.DisplayColor, true
}

// HasDisplayColor returns a boolean if a field has been set.
func (o *RoomCalendarDisplayType) HasDisplayColor() bool {
	if o != nil && !IsNil(o.DisplayColor) {
		return true
	}

	return false
}

// SetDisplayColor gets a reference to the given string and assigns it to the DisplayColor field.
func (o *RoomCalendarDisplayType) SetDisplayColor(v string) {
	o.DisplayColor = &v
}

// GetDisplayLabel returns the DisplayLabel field value if set, zero value otherwise.
func (o *RoomCalendarDisplayType) GetDisplayLabel() string {
	if o == nil || IsNil(o.DisplayLabel) {
		var ret string
		return ret
	}
	return *o.DisplayLabel
}

// GetDisplayLabelOk returns a tuple with the DisplayLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoomCalendarDisplayType) GetDisplayLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayLabel) {
		return nil, false
	}
	return o.DisplayLabel, true
}

// HasDisplayLabel returns a boolean if a field has been set.
func (o *RoomCalendarDisplayType) HasDisplayLabel() bool {
	if o != nil && !IsNil(o.DisplayLabel) {
		return true
	}

	return false
}

// SetDisplayLabel gets a reference to the given string and assigns it to the DisplayLabel field.
func (o *RoomCalendarDisplayType) SetDisplayLabel(v string) {
	o.DisplayLabel = &v
}

func (o RoomCalendarDisplayType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoomCalendarDisplayType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayColor) {
		toSerialize["displayColor"] = o.DisplayColor
	}
	if !IsNil(o.DisplayLabel) {
		toSerialize["displayLabel"] = o.DisplayLabel
	}
	return toSerialize, nil
}

type NullableRoomCalendarDisplayType struct {
	value *RoomCalendarDisplayType
	isSet bool
}

func (v NullableRoomCalendarDisplayType) Get() *RoomCalendarDisplayType {
	return v.value
}

func (v *NullableRoomCalendarDisplayType) Set(val *RoomCalendarDisplayType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoomCalendarDisplayType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoomCalendarDisplayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoomCalendarDisplayType(val *RoomCalendarDisplayType) *NullableRoomCalendarDisplayType {
	return &NullableRoomCalendarDisplayType{value: val, isSet: true}
}

func (v NullableRoomCalendarDisplayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoomCalendarDisplayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


