/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 22.3.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 22.3
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the EffectiveRateType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EffectiveRateType{}

// EffectiveRateType Effective rate amount per guest on specific dates.
type EffectiveRateType struct {
	// Rate amount for one person.
	OnePersonRate *float32 `json:"onePersonRate,omitempty"`
	// Rate amount for two persons.
	TwoPersonRate *float32 `json:"twoPersonRate,omitempty"`
	// Rate amount for three persons.
	ThreePersonRate *float32 `json:"threePersonRate,omitempty"`
	// Rate amount for four persons.
	FourPersonRate *float32 `json:"fourPersonRate,omitempty"`
	// Rate amount for five persons.
	FivePersonRate *float32 `json:"fivePersonRate,omitempty"`
	// Rate amount for each extra person.
	ExtraPersonRate *float32 `json:"extraPersonRate,omitempty"`
	// Rate amount for each extra Child.
	ExtraChildRate *float32 `json:"extraChildRate,omitempty"`
	// Rate amount for one Child.
	OneChildRate *float32 `json:"oneChildRate,omitempty"`
	// Rate amount for two Children.
	TwoChildrenRate *float32 `json:"twoChildrenRate,omitempty"`
	// Rate amount for three Children.
	ThreeChildrenRate *float32 `json:"threeChildrenRate,omitempty"`
	// Rate amount for four Children.
	FourChildrenRate *float32 `json:"fourChildrenRate,omitempty"`
	// Rate amount by age bucket.
	RateByAgeBuckets []RateByAgeBucketType `json:"rateByAgeBuckets,omitempty"`
	// Minimum number of children needed to get free stay.
	MinimumChildrenForFreeStay *int32 `json:"minimumChildrenForFreeStay,omitempty"`
	// The number of award points required for applying this rate plan schedule.
	PointsRequired *float32 `json:"pointsRequired,omitempty"`
	// true if floor amount needs to be override
	OverrideFloorAmount *bool `json:"overrideFloorAmount,omitempty"`
	// 
	HotelId *string `json:"hotelId,omitempty"`
	// 
	RatePlanCode *string `json:"ratePlanCode,omitempty"`
	// 
	RoomType *string `json:"roomType,omitempty"`
	// 
	NumberOfRooms *int32 `json:"numberOfRooms,omitempty"`
	// Rate amount Before Tax.
	AmountBeforeTax *float32 `json:"amountBeforeTax,omitempty"`
	// The starting value of the date range.
	Start *string `json:"start,omitempty"`
	// The ending value of the date range.
	End *string `json:"end,omitempty"`
}

// NewEffectiveRateType instantiates a new EffectiveRateType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEffectiveRateType() *EffectiveRateType {
	this := EffectiveRateType{}
	return &this
}

// NewEffectiveRateTypeWithDefaults instantiates a new EffectiveRateType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEffectiveRateTypeWithDefaults() *EffectiveRateType {
	this := EffectiveRateType{}
	return &this
}

// GetOnePersonRate returns the OnePersonRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetOnePersonRate() float32 {
	if o == nil || IsNil(o.OnePersonRate) {
		var ret float32
		return ret
	}
	return *o.OnePersonRate
}

// GetOnePersonRateOk returns a tuple with the OnePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetOnePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OnePersonRate) {
		return nil, false
	}
	return o.OnePersonRate, true
}

// HasOnePersonRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasOnePersonRate() bool {
	if o != nil && !IsNil(o.OnePersonRate) {
		return true
	}

	return false
}

// SetOnePersonRate gets a reference to the given float32 and assigns it to the OnePersonRate field.
func (o *EffectiveRateType) SetOnePersonRate(v float32) {
	o.OnePersonRate = &v
}

// GetTwoPersonRate returns the TwoPersonRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetTwoPersonRate() float32 {
	if o == nil || IsNil(o.TwoPersonRate) {
		var ret float32
		return ret
	}
	return *o.TwoPersonRate
}

// GetTwoPersonRateOk returns a tuple with the TwoPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetTwoPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoPersonRate) {
		return nil, false
	}
	return o.TwoPersonRate, true
}

// HasTwoPersonRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasTwoPersonRate() bool {
	if o != nil && !IsNil(o.TwoPersonRate) {
		return true
	}

	return false
}

// SetTwoPersonRate gets a reference to the given float32 and assigns it to the TwoPersonRate field.
func (o *EffectiveRateType) SetTwoPersonRate(v float32) {
	o.TwoPersonRate = &v
}

// GetThreePersonRate returns the ThreePersonRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetThreePersonRate() float32 {
	if o == nil || IsNil(o.ThreePersonRate) {
		var ret float32
		return ret
	}
	return *o.ThreePersonRate
}

// GetThreePersonRateOk returns a tuple with the ThreePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetThreePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreePersonRate) {
		return nil, false
	}
	return o.ThreePersonRate, true
}

// HasThreePersonRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasThreePersonRate() bool {
	if o != nil && !IsNil(o.ThreePersonRate) {
		return true
	}

	return false
}

// SetThreePersonRate gets a reference to the given float32 and assigns it to the ThreePersonRate field.
func (o *EffectiveRateType) SetThreePersonRate(v float32) {
	o.ThreePersonRate = &v
}

// GetFourPersonRate returns the FourPersonRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetFourPersonRate() float32 {
	if o == nil || IsNil(o.FourPersonRate) {
		var ret float32
		return ret
	}
	return *o.FourPersonRate
}

// GetFourPersonRateOk returns a tuple with the FourPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetFourPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FourPersonRate) {
		return nil, false
	}
	return o.FourPersonRate, true
}

// HasFourPersonRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasFourPersonRate() bool {
	if o != nil && !IsNil(o.FourPersonRate) {
		return true
	}

	return false
}

// SetFourPersonRate gets a reference to the given float32 and assigns it to the FourPersonRate field.
func (o *EffectiveRateType) SetFourPersonRate(v float32) {
	o.FourPersonRate = &v
}

// GetFivePersonRate returns the FivePersonRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetFivePersonRate() float32 {
	if o == nil || IsNil(o.FivePersonRate) {
		var ret float32
		return ret
	}
	return *o.FivePersonRate
}

// GetFivePersonRateOk returns a tuple with the FivePersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetFivePersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FivePersonRate) {
		return nil, false
	}
	return o.FivePersonRate, true
}

// HasFivePersonRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasFivePersonRate() bool {
	if o != nil && !IsNil(o.FivePersonRate) {
		return true
	}

	return false
}

// SetFivePersonRate gets a reference to the given float32 and assigns it to the FivePersonRate field.
func (o *EffectiveRateType) SetFivePersonRate(v float32) {
	o.FivePersonRate = &v
}

// GetExtraPersonRate returns the ExtraPersonRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetExtraPersonRate() float32 {
	if o == nil || IsNil(o.ExtraPersonRate) {
		var ret float32
		return ret
	}
	return *o.ExtraPersonRate
}

// GetExtraPersonRateOk returns a tuple with the ExtraPersonRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetExtraPersonRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtraPersonRate) {
		return nil, false
	}
	return o.ExtraPersonRate, true
}

// HasExtraPersonRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasExtraPersonRate() bool {
	if o != nil && !IsNil(o.ExtraPersonRate) {
		return true
	}

	return false
}

// SetExtraPersonRate gets a reference to the given float32 and assigns it to the ExtraPersonRate field.
func (o *EffectiveRateType) SetExtraPersonRate(v float32) {
	o.ExtraPersonRate = &v
}

// GetExtraChildRate returns the ExtraChildRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetExtraChildRate() float32 {
	if o == nil || IsNil(o.ExtraChildRate) {
		var ret float32
		return ret
	}
	return *o.ExtraChildRate
}

// GetExtraChildRateOk returns a tuple with the ExtraChildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetExtraChildRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ExtraChildRate) {
		return nil, false
	}
	return o.ExtraChildRate, true
}

// HasExtraChildRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasExtraChildRate() bool {
	if o != nil && !IsNil(o.ExtraChildRate) {
		return true
	}

	return false
}

// SetExtraChildRate gets a reference to the given float32 and assigns it to the ExtraChildRate field.
func (o *EffectiveRateType) SetExtraChildRate(v float32) {
	o.ExtraChildRate = &v
}

// GetOneChildRate returns the OneChildRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetOneChildRate() float32 {
	if o == nil || IsNil(o.OneChildRate) {
		var ret float32
		return ret
	}
	return *o.OneChildRate
}

// GetOneChildRateOk returns a tuple with the OneChildRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetOneChildRateOk() (*float32, bool) {
	if o == nil || IsNil(o.OneChildRate) {
		return nil, false
	}
	return o.OneChildRate, true
}

// HasOneChildRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasOneChildRate() bool {
	if o != nil && !IsNil(o.OneChildRate) {
		return true
	}

	return false
}

// SetOneChildRate gets a reference to the given float32 and assigns it to the OneChildRate field.
func (o *EffectiveRateType) SetOneChildRate(v float32) {
	o.OneChildRate = &v
}

// GetTwoChildrenRate returns the TwoChildrenRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetTwoChildrenRate() float32 {
	if o == nil || IsNil(o.TwoChildrenRate) {
		var ret float32
		return ret
	}
	return *o.TwoChildrenRate
}

// GetTwoChildrenRateOk returns a tuple with the TwoChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetTwoChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.TwoChildrenRate) {
		return nil, false
	}
	return o.TwoChildrenRate, true
}

// HasTwoChildrenRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasTwoChildrenRate() bool {
	if o != nil && !IsNil(o.TwoChildrenRate) {
		return true
	}

	return false
}

// SetTwoChildrenRate gets a reference to the given float32 and assigns it to the TwoChildrenRate field.
func (o *EffectiveRateType) SetTwoChildrenRate(v float32) {
	o.TwoChildrenRate = &v
}

// GetThreeChildrenRate returns the ThreeChildrenRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetThreeChildrenRate() float32 {
	if o == nil || IsNil(o.ThreeChildrenRate) {
		var ret float32
		return ret
	}
	return *o.ThreeChildrenRate
}

// GetThreeChildrenRateOk returns a tuple with the ThreeChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetThreeChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.ThreeChildrenRate) {
		return nil, false
	}
	return o.ThreeChildrenRate, true
}

// HasThreeChildrenRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasThreeChildrenRate() bool {
	if o != nil && !IsNil(o.ThreeChildrenRate) {
		return true
	}

	return false
}

// SetThreeChildrenRate gets a reference to the given float32 and assigns it to the ThreeChildrenRate field.
func (o *EffectiveRateType) SetThreeChildrenRate(v float32) {
	o.ThreeChildrenRate = &v
}

// GetFourChildrenRate returns the FourChildrenRate field value if set, zero value otherwise.
func (o *EffectiveRateType) GetFourChildrenRate() float32 {
	if o == nil || IsNil(o.FourChildrenRate) {
		var ret float32
		return ret
	}
	return *o.FourChildrenRate
}

// GetFourChildrenRateOk returns a tuple with the FourChildrenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetFourChildrenRateOk() (*float32, bool) {
	if o == nil || IsNil(o.FourChildrenRate) {
		return nil, false
	}
	return o.FourChildrenRate, true
}

// HasFourChildrenRate returns a boolean if a field has been set.
func (o *EffectiveRateType) HasFourChildrenRate() bool {
	if o != nil && !IsNil(o.FourChildrenRate) {
		return true
	}

	return false
}

// SetFourChildrenRate gets a reference to the given float32 and assigns it to the FourChildrenRate field.
func (o *EffectiveRateType) SetFourChildrenRate(v float32) {
	o.FourChildrenRate = &v
}

// GetRateByAgeBuckets returns the RateByAgeBuckets field value if set, zero value otherwise.
func (o *EffectiveRateType) GetRateByAgeBuckets() []RateByAgeBucketType {
	if o == nil || IsNil(o.RateByAgeBuckets) {
		var ret []RateByAgeBucketType
		return ret
	}
	return o.RateByAgeBuckets
}

// GetRateByAgeBucketsOk returns a tuple with the RateByAgeBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetRateByAgeBucketsOk() ([]RateByAgeBucketType, bool) {
	if o == nil || IsNil(o.RateByAgeBuckets) {
		return nil, false
	}
	return o.RateByAgeBuckets, true
}

// HasRateByAgeBuckets returns a boolean if a field has been set.
func (o *EffectiveRateType) HasRateByAgeBuckets() bool {
	if o != nil && !IsNil(o.RateByAgeBuckets) {
		return true
	}

	return false
}

// SetRateByAgeBuckets gets a reference to the given []RateByAgeBucketType and assigns it to the RateByAgeBuckets field.
func (o *EffectiveRateType) SetRateByAgeBuckets(v []RateByAgeBucketType) {
	o.RateByAgeBuckets = v
}

// GetMinimumChildrenForFreeStay returns the MinimumChildrenForFreeStay field value if set, zero value otherwise.
func (o *EffectiveRateType) GetMinimumChildrenForFreeStay() int32 {
	if o == nil || IsNil(o.MinimumChildrenForFreeStay) {
		var ret int32
		return ret
	}
	return *o.MinimumChildrenForFreeStay
}

// GetMinimumChildrenForFreeStayOk returns a tuple with the MinimumChildrenForFreeStay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetMinimumChildrenForFreeStayOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumChildrenForFreeStay) {
		return nil, false
	}
	return o.MinimumChildrenForFreeStay, true
}

// HasMinimumChildrenForFreeStay returns a boolean if a field has been set.
func (o *EffectiveRateType) HasMinimumChildrenForFreeStay() bool {
	if o != nil && !IsNil(o.MinimumChildrenForFreeStay) {
		return true
	}

	return false
}

// SetMinimumChildrenForFreeStay gets a reference to the given int32 and assigns it to the MinimumChildrenForFreeStay field.
func (o *EffectiveRateType) SetMinimumChildrenForFreeStay(v int32) {
	o.MinimumChildrenForFreeStay = &v
}

// GetPointsRequired returns the PointsRequired field value if set, zero value otherwise.
func (o *EffectiveRateType) GetPointsRequired() float32 {
	if o == nil || IsNil(o.PointsRequired) {
		var ret float32
		return ret
	}
	return *o.PointsRequired
}

// GetPointsRequiredOk returns a tuple with the PointsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetPointsRequiredOk() (*float32, bool) {
	if o == nil || IsNil(o.PointsRequired) {
		return nil, false
	}
	return o.PointsRequired, true
}

// HasPointsRequired returns a boolean if a field has been set.
func (o *EffectiveRateType) HasPointsRequired() bool {
	if o != nil && !IsNil(o.PointsRequired) {
		return true
	}

	return false
}

// SetPointsRequired gets a reference to the given float32 and assigns it to the PointsRequired field.
func (o *EffectiveRateType) SetPointsRequired(v float32) {
	o.PointsRequired = &v
}

// GetOverrideFloorAmount returns the OverrideFloorAmount field value if set, zero value otherwise.
func (o *EffectiveRateType) GetOverrideFloorAmount() bool {
	if o == nil || IsNil(o.OverrideFloorAmount) {
		var ret bool
		return ret
	}
	return *o.OverrideFloorAmount
}

// GetOverrideFloorAmountOk returns a tuple with the OverrideFloorAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetOverrideFloorAmountOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideFloorAmount) {
		return nil, false
	}
	return o.OverrideFloorAmount, true
}

// HasOverrideFloorAmount returns a boolean if a field has been set.
func (o *EffectiveRateType) HasOverrideFloorAmount() bool {
	if o != nil && !IsNil(o.OverrideFloorAmount) {
		return true
	}

	return false
}

// SetOverrideFloorAmount gets a reference to the given bool and assigns it to the OverrideFloorAmount field.
func (o *EffectiveRateType) SetOverrideFloorAmount(v bool) {
	o.OverrideFloorAmount = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *EffectiveRateType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *EffectiveRateType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *EffectiveRateType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetRatePlanCode returns the RatePlanCode field value if set, zero value otherwise.
func (o *EffectiveRateType) GetRatePlanCode() string {
	if o == nil || IsNil(o.RatePlanCode) {
		var ret string
		return ret
	}
	return *o.RatePlanCode
}

// GetRatePlanCodeOk returns a tuple with the RatePlanCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetRatePlanCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RatePlanCode) {
		return nil, false
	}
	return o.RatePlanCode, true
}

// HasRatePlanCode returns a boolean if a field has been set.
func (o *EffectiveRateType) HasRatePlanCode() bool {
	if o != nil && !IsNil(o.RatePlanCode) {
		return true
	}

	return false
}

// SetRatePlanCode gets a reference to the given string and assigns it to the RatePlanCode field.
func (o *EffectiveRateType) SetRatePlanCode(v string) {
	o.RatePlanCode = &v
}

// GetRoomType returns the RoomType field value if set, zero value otherwise.
func (o *EffectiveRateType) GetRoomType() string {
	if o == nil || IsNil(o.RoomType) {
		var ret string
		return ret
	}
	return *o.RoomType
}

// GetRoomTypeOk returns a tuple with the RoomType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetRoomTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoomType) {
		return nil, false
	}
	return o.RoomType, true
}

// HasRoomType returns a boolean if a field has been set.
func (o *EffectiveRateType) HasRoomType() bool {
	if o != nil && !IsNil(o.RoomType) {
		return true
	}

	return false
}

// SetRoomType gets a reference to the given string and assigns it to the RoomType field.
func (o *EffectiveRateType) SetRoomType(v string) {
	o.RoomType = &v
}

// GetNumberOfRooms returns the NumberOfRooms field value if set, zero value otherwise.
func (o *EffectiveRateType) GetNumberOfRooms() int32 {
	if o == nil || IsNil(o.NumberOfRooms) {
		var ret int32
		return ret
	}
	return *o.NumberOfRooms
}

// GetNumberOfRoomsOk returns a tuple with the NumberOfRooms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetNumberOfRoomsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfRooms) {
		return nil, false
	}
	return o.NumberOfRooms, true
}

// HasNumberOfRooms returns a boolean if a field has been set.
func (o *EffectiveRateType) HasNumberOfRooms() bool {
	if o != nil && !IsNil(o.NumberOfRooms) {
		return true
	}

	return false
}

// SetNumberOfRooms gets a reference to the given int32 and assigns it to the NumberOfRooms field.
func (o *EffectiveRateType) SetNumberOfRooms(v int32) {
	o.NumberOfRooms = &v
}

// GetAmountBeforeTax returns the AmountBeforeTax field value if set, zero value otherwise.
func (o *EffectiveRateType) GetAmountBeforeTax() float32 {
	if o == nil || IsNil(o.AmountBeforeTax) {
		var ret float32
		return ret
	}
	return *o.AmountBeforeTax
}

// GetAmountBeforeTaxOk returns a tuple with the AmountBeforeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetAmountBeforeTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.AmountBeforeTax) {
		return nil, false
	}
	return o.AmountBeforeTax, true
}

// HasAmountBeforeTax returns a boolean if a field has been set.
func (o *EffectiveRateType) HasAmountBeforeTax() bool {
	if o != nil && !IsNil(o.AmountBeforeTax) {
		return true
	}

	return false
}

// SetAmountBeforeTax gets a reference to the given float32 and assigns it to the AmountBeforeTax field.
func (o *EffectiveRateType) SetAmountBeforeTax(v float32) {
	o.AmountBeforeTax = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *EffectiveRateType) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *EffectiveRateType) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *EffectiveRateType) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *EffectiveRateType) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EffectiveRateType) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *EffectiveRateType) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *EffectiveRateType) SetEnd(v string) {
	o.End = &v
}

func (o EffectiveRateType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EffectiveRateType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnePersonRate) {
		toSerialize["onePersonRate"] = o.OnePersonRate
	}
	if !IsNil(o.TwoPersonRate) {
		toSerialize["twoPersonRate"] = o.TwoPersonRate
	}
	if !IsNil(o.ThreePersonRate) {
		toSerialize["threePersonRate"] = o.ThreePersonRate
	}
	if !IsNil(o.FourPersonRate) {
		toSerialize["fourPersonRate"] = o.FourPersonRate
	}
	if !IsNil(o.FivePersonRate) {
		toSerialize["fivePersonRate"] = o.FivePersonRate
	}
	if !IsNil(o.ExtraPersonRate) {
		toSerialize["extraPersonRate"] = o.ExtraPersonRate
	}
	if !IsNil(o.ExtraChildRate) {
		toSerialize["extraChildRate"] = o.ExtraChildRate
	}
	if !IsNil(o.OneChildRate) {
		toSerialize["oneChildRate"] = o.OneChildRate
	}
	if !IsNil(o.TwoChildrenRate) {
		toSerialize["twoChildrenRate"] = o.TwoChildrenRate
	}
	if !IsNil(o.ThreeChildrenRate) {
		toSerialize["threeChildrenRate"] = o.ThreeChildrenRate
	}
	if !IsNil(o.FourChildrenRate) {
		toSerialize["fourChildrenRate"] = o.FourChildrenRate
	}
	if !IsNil(o.RateByAgeBuckets) {
		toSerialize["rateByAgeBuckets"] = o.RateByAgeBuckets
	}
	if !IsNil(o.MinimumChildrenForFreeStay) {
		toSerialize["minimumChildrenForFreeStay"] = o.MinimumChildrenForFreeStay
	}
	if !IsNil(o.PointsRequired) {
		toSerialize["pointsRequired"] = o.PointsRequired
	}
	if !IsNil(o.OverrideFloorAmount) {
		toSerialize["overrideFloorAmount"] = o.OverrideFloorAmount
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.RatePlanCode) {
		toSerialize["ratePlanCode"] = o.RatePlanCode
	}
	if !IsNil(o.RoomType) {
		toSerialize["roomType"] = o.RoomType
	}
	if !IsNil(o.NumberOfRooms) {
		toSerialize["numberOfRooms"] = o.NumberOfRooms
	}
	if !IsNil(o.AmountBeforeTax) {
		toSerialize["amountBeforeTax"] = o.AmountBeforeTax
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableEffectiveRateType struct {
	value *EffectiveRateType
	isSet bool
}

func (v NullableEffectiveRateType) Get() *EffectiveRateType {
	return v.value
}

func (v *NullableEffectiveRateType) Set(val *EffectiveRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableEffectiveRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableEffectiveRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEffectiveRateType(val *EffectiveRateType) *NullableEffectiveRateType {
	return &NullableEffectiveRateType{value: val, isSet: true}
}

func (v NullableEffectiveRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEffectiveRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


