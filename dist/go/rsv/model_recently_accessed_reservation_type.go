/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the RecentlyAccessedReservationType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecentlyAccessedReservationType{}

// RecentlyAccessedReservationType A recently used reservation record.
type RecentlyAccessedReservationType struct {
	// The date the record was accessed.
	AccessDate *string `json:"accessDate,omitempty"`
	// Given name, first name or names
	GuestFirstName *string `json:"guestFirstName,omitempty"`
	// Family name, last name.
	GuestLastName *string `json:"guestLastName,omitempty"`
	// The resort of the reservation.
	HotelId *string `json:"hotelId,omitempty"`
	// A text field used to communicate the proper name of the hotel.
	HotelName *string `json:"hotelName,omitempty"`
	// Unique Id that references an object uniquely in the system.
	ReservationIdList []UniqueIDType `json:"reservationIdList,omitempty"`
	ReservationStatus *PMSResStatusType `json:"reservationStatus,omitempty"`
	TimeSpan *TimeSpanType `json:"timeSpan,omitempty"`
}

// NewRecentlyAccessedReservationType instantiates a new RecentlyAccessedReservationType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecentlyAccessedReservationType() *RecentlyAccessedReservationType {
	this := RecentlyAccessedReservationType{}
	return &this
}

// NewRecentlyAccessedReservationTypeWithDefaults instantiates a new RecentlyAccessedReservationType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecentlyAccessedReservationTypeWithDefaults() *RecentlyAccessedReservationType {
	this := RecentlyAccessedReservationType{}
	return &this
}

// GetAccessDate returns the AccessDate field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetAccessDate() string {
	if o == nil || IsNil(o.AccessDate) {
		var ret string
		return ret
	}
	return *o.AccessDate
}

// GetAccessDateOk returns a tuple with the AccessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetAccessDateOk() (*string, bool) {
	if o == nil || IsNil(o.AccessDate) {
		return nil, false
	}
	return o.AccessDate, true
}

// HasAccessDate returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasAccessDate() bool {
	if o != nil && !IsNil(o.AccessDate) {
		return true
	}

	return false
}

// SetAccessDate gets a reference to the given string and assigns it to the AccessDate field.
func (o *RecentlyAccessedReservationType) SetAccessDate(v string) {
	o.AccessDate = &v
}

// GetGuestFirstName returns the GuestFirstName field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetGuestFirstName() string {
	if o == nil || IsNil(o.GuestFirstName) {
		var ret string
		return ret
	}
	return *o.GuestFirstName
}

// GetGuestFirstNameOk returns a tuple with the GuestFirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetGuestFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestFirstName) {
		return nil, false
	}
	return o.GuestFirstName, true
}

// HasGuestFirstName returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasGuestFirstName() bool {
	if o != nil && !IsNil(o.GuestFirstName) {
		return true
	}

	return false
}

// SetGuestFirstName gets a reference to the given string and assigns it to the GuestFirstName field.
func (o *RecentlyAccessedReservationType) SetGuestFirstName(v string) {
	o.GuestFirstName = &v
}

// GetGuestLastName returns the GuestLastName field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetGuestLastName() string {
	if o == nil || IsNil(o.GuestLastName) {
		var ret string
		return ret
	}
	return *o.GuestLastName
}

// GetGuestLastNameOk returns a tuple with the GuestLastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetGuestLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.GuestLastName) {
		return nil, false
	}
	return o.GuestLastName, true
}

// HasGuestLastName returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasGuestLastName() bool {
	if o != nil && !IsNil(o.GuestLastName) {
		return true
	}

	return false
}

// SetGuestLastName gets a reference to the given string and assigns it to the GuestLastName field.
func (o *RecentlyAccessedReservationType) SetGuestLastName(v string) {
	o.GuestLastName = &v
}

// GetHotelId returns the HotelId field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetHotelId() string {
	if o == nil || IsNil(o.HotelId) {
		var ret string
		return ret
	}
	return *o.HotelId
}

// GetHotelIdOk returns a tuple with the HotelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetHotelIdOk() (*string, bool) {
	if o == nil || IsNil(o.HotelId) {
		return nil, false
	}
	return o.HotelId, true
}

// HasHotelId returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasHotelId() bool {
	if o != nil && !IsNil(o.HotelId) {
		return true
	}

	return false
}

// SetHotelId gets a reference to the given string and assigns it to the HotelId field.
func (o *RecentlyAccessedReservationType) SetHotelId(v string) {
	o.HotelId = &v
}

// GetHotelName returns the HotelName field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetHotelName() string {
	if o == nil || IsNil(o.HotelName) {
		var ret string
		return ret
	}
	return *o.HotelName
}

// GetHotelNameOk returns a tuple with the HotelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetHotelNameOk() (*string, bool) {
	if o == nil || IsNil(o.HotelName) {
		return nil, false
	}
	return o.HotelName, true
}

// HasHotelName returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasHotelName() bool {
	if o != nil && !IsNil(o.HotelName) {
		return true
	}

	return false
}

// SetHotelName gets a reference to the given string and assigns it to the HotelName field.
func (o *RecentlyAccessedReservationType) SetHotelName(v string) {
	o.HotelName = &v
}

// GetReservationIdList returns the ReservationIdList field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetReservationIdList() []UniqueIDType {
	if o == nil || IsNil(o.ReservationIdList) {
		var ret []UniqueIDType
		return ret
	}
	return o.ReservationIdList
}

// GetReservationIdListOk returns a tuple with the ReservationIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetReservationIdListOk() ([]UniqueIDType, bool) {
	if o == nil || IsNil(o.ReservationIdList) {
		return nil, false
	}
	return o.ReservationIdList, true
}

// HasReservationIdList returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasReservationIdList() bool {
	if o != nil && !IsNil(o.ReservationIdList) {
		return true
	}

	return false
}

// SetReservationIdList gets a reference to the given []UniqueIDType and assigns it to the ReservationIdList field.
func (o *RecentlyAccessedReservationType) SetReservationIdList(v []UniqueIDType) {
	o.ReservationIdList = v
}

// GetReservationStatus returns the ReservationStatus field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetReservationStatus() PMSResStatusType {
	if o == nil || IsNil(o.ReservationStatus) {
		var ret PMSResStatusType
		return ret
	}
	return *o.ReservationStatus
}

// GetReservationStatusOk returns a tuple with the ReservationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetReservationStatusOk() (*PMSResStatusType, bool) {
	if o == nil || IsNil(o.ReservationStatus) {
		return nil, false
	}
	return o.ReservationStatus, true
}

// HasReservationStatus returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasReservationStatus() bool {
	if o != nil && !IsNil(o.ReservationStatus) {
		return true
	}

	return false
}

// SetReservationStatus gets a reference to the given PMSResStatusType and assigns it to the ReservationStatus field.
func (o *RecentlyAccessedReservationType) SetReservationStatus(v PMSResStatusType) {
	o.ReservationStatus = &v
}

// GetTimeSpan returns the TimeSpan field value if set, zero value otherwise.
func (o *RecentlyAccessedReservationType) GetTimeSpan() TimeSpanType {
	if o == nil || IsNil(o.TimeSpan) {
		var ret TimeSpanType
		return ret
	}
	return *o.TimeSpan
}

// GetTimeSpanOk returns a tuple with the TimeSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecentlyAccessedReservationType) GetTimeSpanOk() (*TimeSpanType, bool) {
	if o == nil || IsNil(o.TimeSpan) {
		return nil, false
	}
	return o.TimeSpan, true
}

// HasTimeSpan returns a boolean if a field has been set.
func (o *RecentlyAccessedReservationType) HasTimeSpan() bool {
	if o != nil && !IsNil(o.TimeSpan) {
		return true
	}

	return false
}

// SetTimeSpan gets a reference to the given TimeSpanType and assigns it to the TimeSpan field.
func (o *RecentlyAccessedReservationType) SetTimeSpan(v TimeSpanType) {
	o.TimeSpan = &v
}

func (o RecentlyAccessedReservationType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecentlyAccessedReservationType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessDate) {
		toSerialize["accessDate"] = o.AccessDate
	}
	if !IsNil(o.GuestFirstName) {
		toSerialize["guestFirstName"] = o.GuestFirstName
	}
	if !IsNil(o.GuestLastName) {
		toSerialize["guestLastName"] = o.GuestLastName
	}
	if !IsNil(o.HotelId) {
		toSerialize["hotelId"] = o.HotelId
	}
	if !IsNil(o.HotelName) {
		toSerialize["hotelName"] = o.HotelName
	}
	if !IsNil(o.ReservationIdList) {
		toSerialize["reservationIdList"] = o.ReservationIdList
	}
	if !IsNil(o.ReservationStatus) {
		toSerialize["reservationStatus"] = o.ReservationStatus
	}
	if !IsNil(o.TimeSpan) {
		toSerialize["timeSpan"] = o.TimeSpan
	}
	return toSerialize, nil
}

type NullableRecentlyAccessedReservationType struct {
	value *RecentlyAccessedReservationType
	isSet bool
}

func (v NullableRecentlyAccessedReservationType) Get() *RecentlyAccessedReservationType {
	return v.value
}

func (v *NullableRecentlyAccessedReservationType) Set(val *RecentlyAccessedReservationType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecentlyAccessedReservationType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecentlyAccessedReservationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecentlyAccessedReservationType(val *RecentlyAccessedReservationType) *NullableRecentlyAccessedReservationType {
	return &NullableRecentlyAccessedReservationType{value: val, isSet: true}
}

func (v NullableRecentlyAccessedReservationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecentlyAccessedReservationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


