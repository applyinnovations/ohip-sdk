/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the SellMessageConfigsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SellMessageConfigsType{}

// SellMessageConfigsType The SellMessageConfigsType is the list of sell messages, each comprising of all the sell message attributes and other details.
type SellMessageConfigsType struct {
	// Total number of rows returned
	Count *int32 `json:"count,omitempty"`
	// Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
	HasMore *bool `json:"hasMore,omitempty"`
	SellMessageConfig []SellMessageConfigType `json:"sellMessageConfig,omitempty"`
	// Total number of rows queried
	TotalResults *int32 `json:"totalResults,omitempty"`
}

// NewSellMessageConfigsType instantiates a new SellMessageConfigsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSellMessageConfigsType() *SellMessageConfigsType {
	this := SellMessageConfigsType{}
	return &this
}

// NewSellMessageConfigsTypeWithDefaults instantiates a new SellMessageConfigsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellMessageConfigsTypeWithDefaults() *SellMessageConfigsType {
	this := SellMessageConfigsType{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SellMessageConfigsType) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigsType) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SellMessageConfigsType) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *SellMessageConfigsType) SetCount(v int32) {
	o.Count = &v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *SellMessageConfigsType) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigsType) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *SellMessageConfigsType) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *SellMessageConfigsType) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetSellMessageConfig returns the SellMessageConfig field value if set, zero value otherwise.
func (o *SellMessageConfigsType) GetSellMessageConfig() []SellMessageConfigType {
	if o == nil || IsNil(o.SellMessageConfig) {
		var ret []SellMessageConfigType
		return ret
	}
	return o.SellMessageConfig
}

// GetSellMessageConfigOk returns a tuple with the SellMessageConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigsType) GetSellMessageConfigOk() ([]SellMessageConfigType, bool) {
	if o == nil || IsNil(o.SellMessageConfig) {
		return nil, false
	}
	return o.SellMessageConfig, true
}

// HasSellMessageConfig returns a boolean if a field has been set.
func (o *SellMessageConfigsType) HasSellMessageConfig() bool {
	if o != nil && !IsNil(o.SellMessageConfig) {
		return true
	}

	return false
}

// SetSellMessageConfig gets a reference to the given []SellMessageConfigType and assigns it to the SellMessageConfig field.
func (o *SellMessageConfigsType) SetSellMessageConfig(v []SellMessageConfigType) {
	o.SellMessageConfig = v
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *SellMessageConfigsType) GetTotalResults() int32 {
	if o == nil || IsNil(o.TotalResults) {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SellMessageConfigsType) GetTotalResultsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalResults) {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *SellMessageConfigsType) HasTotalResults() bool {
	if o != nil && !IsNil(o.TotalResults) {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *SellMessageConfigsType) SetTotalResults(v int32) {
	o.TotalResults = &v
}

func (o SellMessageConfigsType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SellMessageConfigsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.SellMessageConfig) {
		toSerialize["sellMessageConfig"] = o.SellMessageConfig
	}
	if !IsNil(o.TotalResults) {
		toSerialize["totalResults"] = o.TotalResults
	}
	return toSerialize, nil
}

type NullableSellMessageConfigsType struct {
	value *SellMessageConfigsType
	isSet bool
}

func (v NullableSellMessageConfigsType) Get() *SellMessageConfigsType {
	return v.value
}

func (v *NullableSellMessageConfigsType) Set(val *SellMessageConfigsType) {
	v.value = val
	v.isSet = true
}

func (v NullableSellMessageConfigsType) IsSet() bool {
	return v.isSet
}

func (v *NullableSellMessageConfigsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSellMessageConfigsType(val *SellMessageConfigsType) *NullableSellMessageConfigsType {
	return &NullableSellMessageConfigsType{value: val, isSet: true}
}

func (v NullableSellMessageConfigsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSellMessageConfigsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


