/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// RSVStatsAPIService RSVStatsAPI service
type RSVStatsAPIService service

type RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest struct {
	ctx context.Context
	ApiService *RSVStatsAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	excludeBlocksWithoutQuoteID *bool
	startDate *string
	endDate *string
	duration *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) Authorization(authorization string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) XAppKey(xAppKey string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) XHotelid(xHotelid string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.xHotelid = &xHotelid
	return r
}

// Whether to exclude blocks without quote IDs from the statistics gathering.
func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) ExcludeBlocksWithoutQuoteID(excludeBlocksWithoutQuoteID bool) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.excludeBlocksWithoutQuoteID = &excludeBlocksWithoutQuoteID
	return r
}

func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) StartDate(startDate string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.startDate = &startDate
	return r
}

func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) EndDate(endDate string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.endDate = &endDate
	return r
}

func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) Duration(duration string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.duration = &duration
	return r
}

// External system code.
func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) XExternalsystem(xExternalsystem string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) AcceptLanguage(acceptLanguage string) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) Execute() (*BlockReservationStatistics, *http.Response, error) {
	return r.ApiService.GetBlockReservationStatisticsByDateAndRoomPoolExecute(r)
}

/*
GetBlockReservationStatisticsByDateAndRoomPool Get block Reservation Statistics

Get block Reservation statistics by date and room pool <p><strong>OperationId:</strong>getBlockReservationStatisticsByDateAndRoomPool</p> <p>This API allows a time span of <strong>90</strong> days.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest
*/
func (a *RSVStatsAPIService) GetBlockReservationStatisticsByDateAndRoomPool(ctx context.Context) RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest {
	return RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BlockReservationStatistics
func (a *RSVStatsAPIService) GetBlockReservationStatisticsByDateAndRoomPoolExecute(r RSVStatsAPIGetBlockReservationStatisticsByDateAndRoomPoolRequest) (*BlockReservationStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlockReservationStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RSVStatsAPIService.GetBlockReservationStatisticsByDateAndRoomPool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/blockReservationStatisticsByDateAndRoomPool"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.excludeBlocksWithoutQuoteID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeBlocksWithoutQuoteID", r.excludeBlocksWithoutQuoteID, "")
  }
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
  }
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
  }
	if r.duration != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "duration", r.duration, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RSVStatsAPIGetReservationPaceRequest struct {
	ctx context.Context
	ApiService *RSVStatsAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	hotelId *string
	stayDate *string
	leadDays *int32
	channels *string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RSVStatsAPIGetReservationPaceRequest) Authorization(authorization string) RSVStatsAPIGetReservationPaceRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RSVStatsAPIGetReservationPaceRequest) XAppKey(xAppKey string) RSVStatsAPIGetReservationPaceRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RSVStatsAPIGetReservationPaceRequest) XHotelid(xHotelid string) RSVStatsAPIGetReservationPaceRequest {
	r.xHotelid = &xHotelid
	return r
}

// Hotel code from which the reservations will be fetched.
func (r RSVStatsAPIGetReservationPaceRequest) HotelId(hotelId string) RSVStatsAPIGetReservationPaceRequest {
	r.hotelId = &hotelId
	return r
}

// Target stay date for report
func (r RSVStatsAPIGetReservationPaceRequest) StayDate(stayDate string) RSVStatsAPIGetReservationPaceRequest {
	r.stayDate = &stayDate
	return r
}

// Number of lead days from stay date
func (r RSVStatsAPIGetReservationPaceRequest) LeadDays(leadDays int32) RSVStatsAPIGetReservationPaceRequest {
	r.leadDays = &leadDays
	return r
}

// List of Channels for which pace to be computed
func (r RSVStatsAPIGetReservationPaceRequest) Channels(channels string) RSVStatsAPIGetReservationPaceRequest {
	r.channels = &channels
	return r
}

// External system code.
func (r RSVStatsAPIGetReservationPaceRequest) XExternalsystem(xExternalsystem string) RSVStatsAPIGetReservationPaceRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RSVStatsAPIGetReservationPaceRequest) AcceptLanguage(acceptLanguage string) RSVStatsAPIGetReservationPaceRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RSVStatsAPIGetReservationPaceRequest) Execute() (*ReservationPace, *http.Response, error) {
	return r.ApiService.GetReservationPaceExecute(r)
}

/*
GetReservationPace Get Reservation pace

Use this API to get Reservation pace. <p><strong>OperationId:</strong>getReservationPace</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RSVStatsAPIGetReservationPaceRequest
*/
func (a *RSVStatsAPIService) GetReservationPace(ctx context.Context) RSVStatsAPIGetReservationPaceRequest {
	return RSVStatsAPIGetReservationPaceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReservationPace
func (a *RSVStatsAPIService) GetReservationPaceExecute(r RSVStatsAPIGetReservationPaceRequest) (*ReservationPace, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationPace
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RSVStatsAPIService.GetReservationPace")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reservations/pace"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.hotelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", r.hotelId, "")
  }
	if r.stayDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stayDate", r.stayDate, "")
  }
	if r.leadDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "leadDays", r.leadDays, "")
  }
	if r.channels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "channels", r.channels, "")
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RSVStatsAPIGetReservationStatisticsRequest struct {
	ctx context.Context
	ApiService *RSVStatsAPIService
	authorization *string
	xAppKey *string
	xHotelid *string
	chainName *[]string
	hotelCityCode *[]string
	hotelId *[]string
	hotelCodeContext *[]string
	hotelName *[]string
	requestedReportsTypeEndDate *[]string
	fiscalDate *[]string
	reportCode *[]string
	requestedReportsTypeStartDate *[]string
	requestedReportsTypeParameterName *[]string
	requestedReportsTypeParameterValue *[]string
	xExternalsystem *string
	acceptLanguage *string
}

// Bearer token that needs to be passed which is generated post user authentication
func (r RSVStatsAPIGetReservationStatisticsRequest) Authorization(authorization string) RSVStatsAPIGetReservationStatisticsRequest {
	r.authorization = &authorization
	return r
}

// Client or Partner&#39;s Application Key
func (r RSVStatsAPIGetReservationStatisticsRequest) XAppKey(xAppKey string) RSVStatsAPIGetReservationStatisticsRequest {
	r.xAppKey = &xAppKey
	return r
}

// Mandatory parameter to identify the hotel code where the end user is logged in
func (r RSVStatsAPIGetReservationStatisticsRequest) XHotelid(xHotelid string) RSVStatsAPIGetReservationStatisticsRequest {
	r.xHotelid = &xHotelid
	return r
}

// The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
func (r RSVStatsAPIGetReservationStatisticsRequest) ChainName(chainName []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.chainName = &chainName
	return r
}

// The IATA city code; for example DCA, ORD.
func (r RSVStatsAPIGetReservationStatisticsRequest) HotelCityCode(hotelCityCode []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.hotelCityCode = &hotelCityCode
	return r
}

// The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
func (r RSVStatsAPIGetReservationStatisticsRequest) HotelId(hotelId []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.hotelId = &hotelId
	return r
}

// A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
func (r RSVStatsAPIGetReservationStatisticsRequest) HotelCodeContext(hotelCodeContext []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.hotelCodeContext = &hotelCodeContext
	return r
}

// A text field used to communicate the proper name of the hotel.
func (r RSVStatsAPIGetReservationStatisticsRequest) HotelName(hotelName []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.hotelName = &hotelName
	return r
}

// The ending value of the date range.
func (r RSVStatsAPIGetReservationStatisticsRequest) RequestedReportsTypeEndDate(requestedReportsTypeEndDate []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.requestedReportsTypeEndDate = &requestedReportsTypeEndDate
	return r
}

// Hotel fiscal date for statistics.
func (r RSVStatsAPIGetReservationStatisticsRequest) FiscalDate(fiscalDate []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.fiscalDate = &fiscalDate
	return r
}

// Identifies the type of statistics collected. Each ReportCode corresponds to a set of category summaries based upon a predetermined agreement.
func (r RSVStatsAPIGetReservationStatisticsRequest) ReportCode(reportCode []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.reportCode = &reportCode
	return r
}

// The starting value of the date range.
func (r RSVStatsAPIGetReservationStatisticsRequest) RequestedReportsTypeStartDate(requestedReportsTypeStartDate []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.requestedReportsTypeStartDate = &requestedReportsTypeStartDate
	return r
}

// Name of the parameter.
func (r RSVStatsAPIGetReservationStatisticsRequest) RequestedReportsTypeParameterName(requestedReportsTypeParameterName []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.requestedReportsTypeParameterName = &requestedReportsTypeParameterName
	return r
}

// Value of the parameter.
func (r RSVStatsAPIGetReservationStatisticsRequest) RequestedReportsTypeParameterValue(requestedReportsTypeParameterValue []string) RSVStatsAPIGetReservationStatisticsRequest {
	r.requestedReportsTypeParameterValue = &requestedReportsTypeParameterValue
	return r
}

// External system code.
func (r RSVStatsAPIGetReservationStatisticsRequest) XExternalsystem(xExternalsystem string) RSVStatsAPIGetReservationStatisticsRequest {
	r.xExternalsystem = &xExternalsystem
	return r
}

// Language code
func (r RSVStatsAPIGetReservationStatisticsRequest) AcceptLanguage(acceptLanguage string) RSVStatsAPIGetReservationStatisticsRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r RSVStatsAPIGetReservationStatisticsRequest) Execute() (*ReservationStatistics, *http.Response, error) {
	return r.ApiService.GetReservationStatisticsExecute(r)
}

/*
GetReservationStatistics Get reservation statistics

Use this API to get a statistical breakdown of reservations such as inventory and revenue data.<p><strong>OperationId:</strong>getReservationStatistics</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RSVStatsAPIGetReservationStatisticsRequest
*/
func (a *RSVStatsAPIService) GetReservationStatistics(ctx context.Context) RSVStatsAPIGetReservationStatisticsRequest {
	return RSVStatsAPIGetReservationStatisticsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReservationStatistics
func (a *RSVStatsAPIService) GetReservationStatisticsExecute(r RSVStatsAPIGetReservationStatisticsRequest) (*ReservationStatistics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReservationStatistics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RSVStatsAPIService.GetReservationStatistics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reservations/statistics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chainName != nil {
		t := *r.chainName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "chainName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "chainName", t, "multi")
		}
  }
	if r.hotelCityCode != nil {
		t := *r.hotelCityCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelCityCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelCityCode", t, "multi")
		}
  }
	if r.hotelId != nil {
		t := *r.hotelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelId", t, "multi")
		}
  }
	if r.hotelCodeContext != nil {
		t := *r.hotelCodeContext
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelCodeContext", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelCodeContext", t, "multi")
		}
  }
	if r.hotelName != nil {
		t := *r.hotelName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "hotelName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "hotelName", t, "multi")
		}
  }
	if r.requestedReportsTypeEndDate != nil {
		t := *r.requestedReportsTypeEndDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeEndDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeEndDate", t, "multi")
		}
  }
	if r.fiscalDate != nil {
		t := *r.fiscalDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "fiscalDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "fiscalDate", t, "multi")
		}
  }
	if r.reportCode != nil {
		t := *r.reportCode
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reportCode", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reportCode", t, "multi")
		}
  }
	if r.requestedReportsTypeStartDate != nil {
		t := *r.requestedReportsTypeStartDate
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeStartDate", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeStartDate", t, "multi")
		}
  }
	if r.requestedReportsTypeParameterName != nil {
		t := *r.requestedReportsTypeParameterName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeParameterName", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeParameterName", t, "multi")
		}
  }
	if r.requestedReportsTypeParameterValue != nil {
		t := *r.requestedReportsTypeParameterValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeParameterValue", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "requestedReportsTypeParameterValue", t, "multi")
		}
  }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;charset=UTF-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.authorization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "authorization", r.authorization, "")
	}
	if r.xAppKey != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-app-key", r.xAppKey, "")
	}
	if r.xHotelid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-hotelid", r.xHotelid, "")
	}
	if r.xExternalsystem != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-externalsystem", r.xExternalsystem, "")
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExceptionDetailType
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
