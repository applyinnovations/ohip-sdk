/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>

API version: 23.2
Contact: hospitality-integrations_ww@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the CombineShareReservationsDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CombineShareReservationsDetails{}

// CombineShareReservationsDetails Response for the combine share reservation request. Based on the request, this will return all sharer reservations including the request reservation.
type CombineShareReservationsDetails struct {
	// Collection of effective rate amount per guest on specific dates.
	EffectiveRates []EffectiveRateType `json:"effectiveRates,omitempty"`
	Links []InstanceLink `json:"links,omitempty"`
	// Defines room rate information on a daily basis.
	NewRates []DailyRateType `json:"newRates,omitempty"`
	// Defines room rate information on a daily basis.
	OldRates []DailyRateType `json:"oldRates,omitempty"`
	ShareReservations *HotelReservationsType `json:"shareReservations,omitempty"`
	// Used in conjunction with the Success element to define a business error.
	Warnings []WarningType `json:"warnings,omitempty"`
}

// NewCombineShareReservationsDetails instantiates a new CombineShareReservationsDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombineShareReservationsDetails() *CombineShareReservationsDetails {
	this := CombineShareReservationsDetails{}
	return &this
}

// NewCombineShareReservationsDetailsWithDefaults instantiates a new CombineShareReservationsDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombineShareReservationsDetailsWithDefaults() *CombineShareReservationsDetails {
	this := CombineShareReservationsDetails{}
	return &this
}

// GetEffectiveRates returns the EffectiveRates field value if set, zero value otherwise.
func (o *CombineShareReservationsDetails) GetEffectiveRates() []EffectiveRateType {
	if o == nil || IsNil(o.EffectiveRates) {
		var ret []EffectiveRateType
		return ret
	}
	return o.EffectiveRates
}

// GetEffectiveRatesOk returns a tuple with the EffectiveRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsDetails) GetEffectiveRatesOk() ([]EffectiveRateType, bool) {
	if o == nil || IsNil(o.EffectiveRates) {
		return nil, false
	}
	return o.EffectiveRates, true
}

// HasEffectiveRates returns a boolean if a field has been set.
func (o *CombineShareReservationsDetails) HasEffectiveRates() bool {
	if o != nil && !IsNil(o.EffectiveRates) {
		return true
	}

	return false
}

// SetEffectiveRates gets a reference to the given []EffectiveRateType and assigns it to the EffectiveRates field.
func (o *CombineShareReservationsDetails) SetEffectiveRates(v []EffectiveRateType) {
	o.EffectiveRates = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CombineShareReservationsDetails) GetLinks() []InstanceLink {
	if o == nil || IsNil(o.Links) {
		var ret []InstanceLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsDetails) GetLinksOk() ([]InstanceLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CombineShareReservationsDetails) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []InstanceLink and assigns it to the Links field.
func (o *CombineShareReservationsDetails) SetLinks(v []InstanceLink) {
	o.Links = v
}

// GetNewRates returns the NewRates field value if set, zero value otherwise.
func (o *CombineShareReservationsDetails) GetNewRates() []DailyRateType {
	if o == nil || IsNil(o.NewRates) {
		var ret []DailyRateType
		return ret
	}
	return o.NewRates
}

// GetNewRatesOk returns a tuple with the NewRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsDetails) GetNewRatesOk() ([]DailyRateType, bool) {
	if o == nil || IsNil(o.NewRates) {
		return nil, false
	}
	return o.NewRates, true
}

// HasNewRates returns a boolean if a field has been set.
func (o *CombineShareReservationsDetails) HasNewRates() bool {
	if o != nil && !IsNil(o.NewRates) {
		return true
	}

	return false
}

// SetNewRates gets a reference to the given []DailyRateType and assigns it to the NewRates field.
func (o *CombineShareReservationsDetails) SetNewRates(v []DailyRateType) {
	o.NewRates = v
}

// GetOldRates returns the OldRates field value if set, zero value otherwise.
func (o *CombineShareReservationsDetails) GetOldRates() []DailyRateType {
	if o == nil || IsNil(o.OldRates) {
		var ret []DailyRateType
		return ret
	}
	return o.OldRates
}

// GetOldRatesOk returns a tuple with the OldRates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsDetails) GetOldRatesOk() ([]DailyRateType, bool) {
	if o == nil || IsNil(o.OldRates) {
		return nil, false
	}
	return o.OldRates, true
}

// HasOldRates returns a boolean if a field has been set.
func (o *CombineShareReservationsDetails) HasOldRates() bool {
	if o != nil && !IsNil(o.OldRates) {
		return true
	}

	return false
}

// SetOldRates gets a reference to the given []DailyRateType and assigns it to the OldRates field.
func (o *CombineShareReservationsDetails) SetOldRates(v []DailyRateType) {
	o.OldRates = v
}

// GetShareReservations returns the ShareReservations field value if set, zero value otherwise.
func (o *CombineShareReservationsDetails) GetShareReservations() HotelReservationsType {
	if o == nil || IsNil(o.ShareReservations) {
		var ret HotelReservationsType
		return ret
	}
	return *o.ShareReservations
}

// GetShareReservationsOk returns a tuple with the ShareReservations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsDetails) GetShareReservationsOk() (*HotelReservationsType, bool) {
	if o == nil || IsNil(o.ShareReservations) {
		return nil, false
	}
	return o.ShareReservations, true
}

// HasShareReservations returns a boolean if a field has been set.
func (o *CombineShareReservationsDetails) HasShareReservations() bool {
	if o != nil && !IsNil(o.ShareReservations) {
		return true
	}

	return false
}

// SetShareReservations gets a reference to the given HotelReservationsType and assigns it to the ShareReservations field.
func (o *CombineShareReservationsDetails) SetShareReservations(v HotelReservationsType) {
	o.ShareReservations = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CombineShareReservationsDetails) GetWarnings() []WarningType {
	if o == nil || IsNil(o.Warnings) {
		var ret []WarningType
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombineShareReservationsDetails) GetWarningsOk() ([]WarningType, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CombineShareReservationsDetails) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []WarningType and assigns it to the Warnings field.
func (o *CombineShareReservationsDetails) SetWarnings(v []WarningType) {
	o.Warnings = v
}

func (o CombineShareReservationsDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CombineShareReservationsDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EffectiveRates) {
		toSerialize["effectiveRates"] = o.EffectiveRates
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.NewRates) {
		toSerialize["newRates"] = o.NewRates
	}
	if !IsNil(o.OldRates) {
		toSerialize["oldRates"] = o.OldRates
	}
	if !IsNil(o.ShareReservations) {
		toSerialize["shareReservations"] = o.ShareReservations
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCombineShareReservationsDetails struct {
	value *CombineShareReservationsDetails
	isSet bool
}

func (v NullableCombineShareReservationsDetails) Get() *CombineShareReservationsDetails {
	return v.value
}

func (v *NullableCombineShareReservationsDetails) Set(val *CombineShareReservationsDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCombineShareReservationsDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCombineShareReservationsDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombineShareReservationsDetails(val *CombineShareReservationsDetails) *NullableCombineShareReservationsDetails {
	return &NullableCombineShareReservationsDetails{value: val, isSet: true}
}

func (v NullableCombineShareReservationsDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombineShareReservationsDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


