/*
OPERA Cloud Reservation API

APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>

API version: 24.4
Contact: hospitality_apis_ww_grp@oracle.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rsv

import (
	"encoding/json"
)

// checks if the ChannelResvRQInfoType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelResvRQInfoType{}

// ChannelResvRQInfoType Holds all the channel reservation specific information.
type ChannelResvRQInfoType struct {
	ChannelSummaryInfo *ChannelSummaryInfoType `json:"channelSummaryInfo,omitempty"`
	ChannelResvAction *ChannelResvActionType `json:"channelResvAction,omitempty"`
	// This attribute indicates true if the message is resubmitted for processing.
	RetransmissionIndicator *bool `json:"retransmissionIndicator,omitempty"`
}

// NewChannelResvRQInfoType instantiates a new ChannelResvRQInfoType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelResvRQInfoType() *ChannelResvRQInfoType {
	this := ChannelResvRQInfoType{}
	return &this
}

// NewChannelResvRQInfoTypeWithDefaults instantiates a new ChannelResvRQInfoType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelResvRQInfoTypeWithDefaults() *ChannelResvRQInfoType {
	this := ChannelResvRQInfoType{}
	return &this
}

// GetChannelSummaryInfo returns the ChannelSummaryInfo field value if set, zero value otherwise.
func (o *ChannelResvRQInfoType) GetChannelSummaryInfo() ChannelSummaryInfoType {
	if o == nil || IsNil(o.ChannelSummaryInfo) {
		var ret ChannelSummaryInfoType
		return ret
	}
	return *o.ChannelSummaryInfo
}

// GetChannelSummaryInfoOk returns a tuple with the ChannelSummaryInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelResvRQInfoType) GetChannelSummaryInfoOk() (*ChannelSummaryInfoType, bool) {
	if o == nil || IsNil(o.ChannelSummaryInfo) {
		return nil, false
	}
	return o.ChannelSummaryInfo, true
}

// HasChannelSummaryInfo returns a boolean if a field has been set.
func (o *ChannelResvRQInfoType) HasChannelSummaryInfo() bool {
	if o != nil && !IsNil(o.ChannelSummaryInfo) {
		return true
	}

	return false
}

// SetChannelSummaryInfo gets a reference to the given ChannelSummaryInfoType and assigns it to the ChannelSummaryInfo field.
func (o *ChannelResvRQInfoType) SetChannelSummaryInfo(v ChannelSummaryInfoType) {
	o.ChannelSummaryInfo = &v
}

// GetChannelResvAction returns the ChannelResvAction field value if set, zero value otherwise.
func (o *ChannelResvRQInfoType) GetChannelResvAction() ChannelResvActionType {
	if o == nil || IsNil(o.ChannelResvAction) {
		var ret ChannelResvActionType
		return ret
	}
	return *o.ChannelResvAction
}

// GetChannelResvActionOk returns a tuple with the ChannelResvAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelResvRQInfoType) GetChannelResvActionOk() (*ChannelResvActionType, bool) {
	if o == nil || IsNil(o.ChannelResvAction) {
		return nil, false
	}
	return o.ChannelResvAction, true
}

// HasChannelResvAction returns a boolean if a field has been set.
func (o *ChannelResvRQInfoType) HasChannelResvAction() bool {
	if o != nil && !IsNil(o.ChannelResvAction) {
		return true
	}

	return false
}

// SetChannelResvAction gets a reference to the given ChannelResvActionType and assigns it to the ChannelResvAction field.
func (o *ChannelResvRQInfoType) SetChannelResvAction(v ChannelResvActionType) {
	o.ChannelResvAction = &v
}

// GetRetransmissionIndicator returns the RetransmissionIndicator field value if set, zero value otherwise.
func (o *ChannelResvRQInfoType) GetRetransmissionIndicator() bool {
	if o == nil || IsNil(o.RetransmissionIndicator) {
		var ret bool
		return ret
	}
	return *o.RetransmissionIndicator
}

// GetRetransmissionIndicatorOk returns a tuple with the RetransmissionIndicator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelResvRQInfoType) GetRetransmissionIndicatorOk() (*bool, bool) {
	if o == nil || IsNil(o.RetransmissionIndicator) {
		return nil, false
	}
	return o.RetransmissionIndicator, true
}

// HasRetransmissionIndicator returns a boolean if a field has been set.
func (o *ChannelResvRQInfoType) HasRetransmissionIndicator() bool {
	if o != nil && !IsNil(o.RetransmissionIndicator) {
		return true
	}

	return false
}

// SetRetransmissionIndicator gets a reference to the given bool and assigns it to the RetransmissionIndicator field.
func (o *ChannelResvRQInfoType) SetRetransmissionIndicator(v bool) {
	o.RetransmissionIndicator = &v
}

func (o ChannelResvRQInfoType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelResvRQInfoType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChannelSummaryInfo) {
		toSerialize["channelSummaryInfo"] = o.ChannelSummaryInfo
	}
	if !IsNil(o.ChannelResvAction) {
		toSerialize["channelResvAction"] = o.ChannelResvAction
	}
	if !IsNil(o.RetransmissionIndicator) {
		toSerialize["retransmissionIndicator"] = o.RetransmissionIndicator
	}
	return toSerialize, nil
}

type NullableChannelResvRQInfoType struct {
	value *ChannelResvRQInfoType
	isSet bool
}

func (v NullableChannelResvRQInfoType) Get() *ChannelResvRQInfoType {
	return v.value
}

func (v *NullableChannelResvRQInfoType) Set(val *ChannelResvRQInfoType) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelResvRQInfoType) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelResvRQInfoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelResvRQInfoType(val *ChannelResvRQInfoType) *NullableChannelResvRQInfoType {
	return &NullableChannelResvRQInfoType{value: val, isSet: true}
}

func (v NullableChannelResvRQInfoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelResvRQInfoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


